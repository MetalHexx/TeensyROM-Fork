
C:\Users\trav\AppData\Local\Temp\arduino\sketches\968149CCFE8D0A4C22C4914E5FB8B32A/Teensy.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
	if (dest == src) return;
	do {
		*dest++ = *src++;
	} while (dest < dest_end);
#else
	asm volatile(
60001400:	4281      	cmp	r1, r0
60001402:	d005      	beq.n	60001410 <memory_copy+0x10>
60001404:	f851 3b04 	ldr.w	r3, [r1], #4
60001408:	f840 3b04 	str.w	r3, [r0], #4
6000140c:	4282      	cmp	r2, r0
6000140e:	d8f9      	bhi.n	60001404 <memory_copy+0x4>
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	"2:					\n"
	: [dest] "+r" (dest), [src] "+r" (src) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001410:	4770      	bx	lr
60001412:	bf00      	nop

60001414 <memory_clear.constprop.0>:
#if 0
	while (dest < dest_end) {
		*dest++ = 0;
	}
#else
	asm volatile(
60001414:	4a04      	ldr	r2, [pc, #16]	; (60001428 <memory_clear.constprop.0+0x14>)
60001416:	4905      	ldr	r1, [pc, #20]	; (6000142c <memory_clear.constprop.0+0x18>)
60001418:	f04f 0300 	mov.w	r3, #0
6000141c:	f842 3b04 	str.w	r3, [r2], #4
60001420:	4291      	cmp	r1, r2
60001422:	d8fb      	bhi.n	6000141c <memory_clear.constprop.0+0x8>
	"1:	str.w	r3, [%[dest]], #4	\n"
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	: [dest] "+r" (dest) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001424:	4770      	bx	lr
60001426:	bf00      	nop
60001428:	2000cec0 	.word	0x2000cec0
6000142c:	2005e580 	.word	0x2005e580

60001430 <ResetHandler2>:
{
60001430:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	__asm__ volatile("dsb":::"memory");
60001434:	f3bf 8f4f 	dsb	sy
	asm volatile("nop");
60001438:	bf00      	nop
	asm volatile("nop");
6000143a:	bf00      	nop
	asm volatile("nop");
6000143c:	bf00      	nop
	asm volatile("nop");
6000143e:	bf00      	nop
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001440:	f003 fc9e 	bl	60004d80 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001444:	4b68      	ldr	r3, [pc, #416]	; (600015e8 <ResetHandler2+0x1b8>)
60001446:	2208      	movs	r2, #8
60001448:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	asm volatile("nop");
6000144c:	bf00      	nop
	asm volatile("nop");
6000144e:	bf00      	nop
	asm volatile("nop");
60001450:	bf00      	nop
	asm volatile("nop");
60001452:	bf00      	nop
	asm volatile("nop");
60001454:	bf00      	nop
	asm volatile("nop");
60001456:	bf00      	nop
	asm volatile("nop");
60001458:	bf00      	nop
	asm volatile("nop");
6000145a:	bf00      	nop
	asm volatile("nop");
6000145c:	bf00      	nop
	asm volatile("nop");
6000145e:	bf00      	nop
	asm volatile("nop");
60001460:	bf00      	nop
	asm volatile("nop");
60001462:	bf00      	nop
	asm volatile("nop");
60001464:	bf00      	nop
	asm volatile("nop");
60001466:	bf00      	nop
	asm volatile("nop");
60001468:	bf00      	nop
	asm volatile("nop");
6000146a:	bf00      	nop
	memory_copy(&_stext, &_stextload, &_etext);
6000146c:	4a5f      	ldr	r2, [pc, #380]	; (600015ec <ResetHandler2+0x1bc>)
6000146e:	4960      	ldr	r1, [pc, #384]	; (600015f0 <ResetHandler2+0x1c0>)
60001470:	4860      	ldr	r0, [pc, #384]	; (600015f4 <ResetHandler2+0x1c4>)
60001472:	f7ff ffc5 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001476:	4a60      	ldr	r2, [pc, #384]	; (600015f8 <ResetHandler2+0x1c8>)
60001478:	4960      	ldr	r1, [pc, #384]	; (600015fc <ResetHandler2+0x1cc>)
6000147a:	4861      	ldr	r0, [pc, #388]	; (60001600 <ResetHandler2+0x1d0>)
6000147c:	f7ff ffc0 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
60001480:	4c60      	ldr	r4, [pc, #384]	; (60001604 <ResetHandler2+0x1d4>)
60001482:	f7ff ffc7 	bl	60001414 <memory_clear.constprop.0>
	SCB_CPACR = 0x00F00000;
60001486:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
6000148a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148e:	2300      	movs	r3, #0
60001490:	4a5d      	ldr	r2, [pc, #372]	; (60001608 <ResetHandler2+0x1d8>)
	SCB_CPACR = 0x00F00000;
60001492:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001496:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000149a:	3301      	adds	r3, #1
6000149c:	2bb0      	cmp	r3, #176	; 0xb0
6000149e:	d1fa      	bne.n	60001496 <ResetHandler2+0x66>
600014a0:	4b5a      	ldr	r3, [pc, #360]	; (6000160c <ResetHandler2+0x1dc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600014a2:	2180      	movs	r1, #128	; 0x80
600014a4:	4a5a      	ldr	r2, [pc, #360]	; (60001610 <ResetHandler2+0x1e0>)
600014a6:	f803 1b01 	strb.w	r1, [r3], #1
600014aa:	4293      	cmp	r3, r2
600014ac:	d1fb      	bne.n	600014a6 <ResetHandler2+0x76>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014ae:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b2:	4e4d      	ldr	r6, [pc, #308]	; (600015e8 <ResetHandler2+0x1b8>)
600014b4:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b8:	f8df b184 	ldr.w	fp, [pc, #388]	; 60001640 <ResetHandler2+0x210>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014bc:	f8df a184 	ldr.w	sl, [pc, #388]	; 60001644 <ResetHandler2+0x214>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014c0:	f04f 31ff 	mov.w	r1, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
600014c4:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
600014c8:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014ca:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014ce:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014d2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014d6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014da:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014de:	f8df 8168 	ldr.w	r8, [pc, #360]	; 60001648 <ResetHandler2+0x218>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014e6:	4a4b      	ldr	r2, [pc, #300]	; (60001614 <ResetHandler2+0x1e4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ec:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014f8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014fc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
60001500:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001508:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000150c:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000150e:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001510:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001512:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
60001514:	f003 fc3c 	bl	60004d90 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001518:	4b3f      	ldr	r3, [pc, #252]	; (60001618 <ResetHandler2+0x1e8>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000151a:	4940      	ldr	r1, [pc, #256]	; (6000161c <ResetHandler2+0x1ec>)
	_VectorsRam[14] = pendablesrvreq_isr;
6000151c:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000151e:	4b40      	ldr	r3, [pc, #256]	; (60001620 <ResetHandler2+0x1f0>)
60001520:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001522:	2363      	movs	r3, #99	; 0x63
60001524:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001526:	2303      	movs	r3, #3
	SYST_CVR = 0;
60001528:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000152a:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000152c:	4b3d      	ldr	r3, [pc, #244]	; (60001624 <ResetHandler2+0x1f4>)
6000152e:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001532:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000153a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000153e:	4b3a      	ldr	r3, [pc, #232]	; (60001628 <ResetHandler2+0x1f8>)
60001540:	681a      	ldr	r2, [r3, #0]
60001542:	f042 0201 	orr.w	r2, r2, #1
60001546:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001548:	685b      	ldr	r3, [r3, #4]
6000154a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000154c:	f003 fe6a 	bl	60005224 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001550:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001554:	4835      	ldr	r0, [pc, #212]	; (6000162c <ResetHandler2+0x1fc>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001556:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000155a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000155e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001562:	f004 f855 	bl	60005610 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001566:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000156a:	4b31      	ldr	r3, [pc, #196]	; (60001630 <ResetHandler2+0x200>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000156c:	4a31      	ldr	r2, [pc, #196]	; (60001634 <ResetHandler2+0x204>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000156e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001572:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001576:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001578:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000157c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001580:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001584:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001588:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000158a:	07db      	lsls	r3, r3, #31
6000158c:	d408      	bmi.n	600015a0 <ResetHandler2+0x170>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000158e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001592:	4929      	ldr	r1, [pc, #164]	; (60001638 <ResetHandler2+0x208>)
60001594:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001596:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001598:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000159a:	f043 0301 	orr.w	r3, r3, #1
6000159e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600015a0:	4a24      	ldr	r2, [pc, #144]	; (60001634 <ResetHandler2+0x204>)
600015a2:	4c26      	ldr	r4, [pc, #152]	; (6000163c <ResetHandler2+0x20c>)
600015a4:	6893      	ldr	r3, [r2, #8]
600015a6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600015aa:	6093      	str	r3, [r2, #8]
	configure_external_ram();
600015ac:	f003 fc78 	bl	60004ea0 <configure_external_ram>
	analog_init();
600015b0:	f003 ff9c 	bl	600054ec <analog_init>
	pwm_init();
600015b4:	f004 f84c 	bl	60005650 <__pwm_init_veneer>
	tempmon_init();
600015b8:	f003 fe62 	bl	60005280 <tempmon_init>
	startup_middle_hook();
600015bc:	f003 fbe2 	bl	60004d84 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015c0:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015c2:	2b13      	cmp	r3, #19
600015c4:	d9fc      	bls.n	600015c0 <ResetHandler2+0x190>
	usb_init();
600015c6:	f003 fef3 	bl	600053b0 <usb_init>
600015ca:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015cc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015d0:	d3fb      	bcc.n	600015ca <ResetHandler2+0x19a>
	startup_debug_reset();
600015d2:	f003 fbdb 	bl	60004d8c <startup_debug_reset>
	startup_late_hook();
600015d6:	f003 fbd7 	bl	60004d88 <startup_default_late_hook>
	__libc_init_array();
600015da:	f004 f811 	bl	60005600 <____libc_init_array_veneer>
	main();
600015de:	f004 f853 	bl	60005688 <__main_veneer>
	while (1) asm("WFI");
600015e2:	bf30      	wfi
600015e4:	e7fd      	b.n	600015e2 <ResetHandler2+0x1b2>
600015e6:	bf00      	nop
600015e8:	400d8000 	.word	0x400d8000
600015ec:	00019c98 	.word	0x00019c98
600015f0:	60006cf0 	.word	0x60006cf0
600015f4:	00000000 	.word	0x00000000
600015f8:	2000cec0 	.word	0x2000cec0
600015fc:	6002098c 	.word	0x6002098c
60001600:	20000000 	.word	0x20000000
60001604:	2000cc00 	.word	0x2000cc00
60001608:	0000d715 	.word	0x0000d715
6000160c:	e000e400 	.word	0xe000e400
60001610:	e000e4a0 	.word	0xe000e4a0
60001614:	400ac000 	.word	0x400ac000
60001618:	0000c65d 	.word	0x0000c65d
6000161c:	2005e4fc 	.word	0x2005e4fc
60001620:	0000c661 	.word	0x0000c661
60001624:	20200000 	.word	0x20200000
60001628:	e0001000 	.word	0xe0001000
6000162c:	23c34600 	.word	0x23c34600
60001630:	40084000 	.word	0x40084000
60001634:	400d4000 	.word	0x400d4000
60001638:	56c00000 	.word	0x56c00000
6000163c:	2005e500 	.word	0x2005e500
60001640:	2018101b 	.word	0x2018101b
60001644:	13110d0c 	.word	0x13110d0c
60001648:	400fc000 	.word	0x400fc000

6000164c <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000164c:	4b05      	ldr	r3, [pc, #20]	; (60001664 <ResetHandler+0x18>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000164e:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001652:	4a05      	ldr	r2, [pc, #20]	; (60001668 <ResetHandler+0x1c>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001654:	4805      	ldr	r0, [pc, #20]	; (6000166c <ResetHandler+0x20>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001656:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001658:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165a:	4a05      	ldr	r2, [pc, #20]	; (60001670 <ResetHandler+0x24>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000165c:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165e:	4695      	mov	sp, r2
	ResetHandler2();
60001660:	f7ff fee6 	bl	60001430 <ResetHandler2>
60001664:	400ac000 	.word	0x400ac000
60001668:	aaaaaaff 	.word	0xaaaaaaff
6000166c:	00200007 	.word	0x00200007
60001670:	20060000 	.word	0x20060000
60001674:	00000000 	.word	0x00000000

60001678 <NextPicture()>:
   IO1[rRegNumItemsOnPage] = (NumItemsFull > IO1[rwRegPageNumber]*MaxItemsPerPage ? MaxItemsPerPage : NumItemsFull-(IO1[rwRegPageNumber]-1)*MaxItemsPerPage);
}

FLASHMEM void NextPicture()
{
   SelItemFullIdx = IO1[rwRegCursorItemOnPg] + (IO1[rwRegPageNumber]-1) * MaxItemsPerPage;
60001678:	4925      	ldr	r1, [pc, #148]	; (60001710 <NextPicture()+0x98>)
   uint16_t InitItemNum = SelItemFullIdx;
   
   do
   {
      if (++SelItemFullIdx >= NumItemsFull) SelItemFullIdx=0;
      if (MenuSource[SelItemFullIdx].ItemType == rtFileKla ||
6000167a:	4b26      	ldr	r3, [pc, #152]	; (60001714 <NextPicture()+0x9c>)
      if (++SelItemFullIdx >= NumItemsFull) SelItemFullIdx=0;
6000167c:	4a26      	ldr	r2, [pc, #152]	; (60001718 <NextPicture()+0xa0>)
{
6000167e:	b470      	push	{r4, r5, r6}
   SelItemFullIdx = IO1[rwRegCursorItemOnPg] + (IO1[rwRegPageNumber]-1) * MaxItemsPerPage;
60001680:	680c      	ldr	r4, [r1, #0]
      if (MenuSource[SelItemFullIdx].ItemType == rtFileKla ||
60001682:	681d      	ldr	r5, [r3, #0]
   SelItemFullIdx = IO1[rwRegCursorItemOnPg] + (IO1[rwRegPageNumber]-1) * MaxItemsPerPage;
60001684:	7b23      	ldrb	r3, [r4, #12]
60001686:	7ba1      	ldrb	r1, [r4, #14]
      if (++SelItemFullIdx >= NumItemsFull) SelItemFullIdx=0;
60001688:	8810      	ldrh	r0, [r2, #0]
   SelItemFullIdx = IO1[rwRegCursorItemOnPg] + (IO1[rwRegPageNumber]-1) * MaxItemsPerPage;
6000168a:	3901      	subs	r1, #1
6000168c:	4e23      	ldr	r6, [pc, #140]	; (6000171c <NextPicture()+0xa4>)
6000168e:	eb01 02c1 	add.w	r2, r1, r1, lsl #3
60001692:	eb01 0142 	add.w	r1, r1, r2, lsl #1
60001696:	4419      	add	r1, r3
60001698:	b289      	uxth	r1, r1
      if (MenuSource[SelItemFullIdx].ItemType == rtFileKla ||
6000169a:	460b      	mov	r3, r1
   SelItemFullIdx = IO1[rwRegCursorItemOnPg] + (IO1[rwRegPageNumber]-1) * MaxItemsPerPage;
6000169c:	8031      	strh	r1, [r6, #0]
   uint16_t InitItemNum = SelItemFullIdx;
6000169e:	e001      	b.n	600016a4 <NextPicture()+0x2c>
          MenuSource[SelItemFullIdx].ItemType == rtFileArt)
      {
         SetCursorToItemNum(SelItemFullIdx);
         return;
      }
   } while (SelItemFullIdx != InitItemNum); //just 1 time through, but should stop on same initial one unless changed externally
600016a0:	4299      	cmp	r1, r3
600016a2:	d030      	beq.n	60001706 <NextPicture()+0x8e>
      if (++SelItemFullIdx >= NumItemsFull) SelItemFullIdx=0;
600016a4:	3301      	adds	r3, #1
600016a6:	462a      	mov	r2, r5
600016a8:	b29b      	uxth	r3, r3
600016aa:	4283      	cmp	r3, r0
      if (MenuSource[SelItemFullIdx].ItemType == rtFileKla ||
600016ac:	bf34      	ite	cc
600016ae:	eb05 1203 	addcc.w	r2, r5, r3, lsl #4
      if (++SelItemFullIdx >= NumItemsFull) SelItemFullIdx=0;
600016b2:	2300      	movcs	r3, #0
      if (MenuSource[SelItemFullIdx].ItemType == rtFileKla ||
600016b4:	7812      	ldrb	r2, [r2, #0]
600016b6:	3a0c      	subs	r2, #12
600016b8:	2a01      	cmp	r2, #1
600016ba:	d8f1      	bhi.n	600016a0 <NextPicture()+0x28>
   IO1[rwRegPageNumber] = ItemNum/MaxItemsPerPage +1;
600016bc:	4a18      	ldr	r2, [pc, #96]	; (60001720 <NextPicture()+0xa8>)
600016be:	8033      	strh	r3, [r6, #0]
600016c0:	fba2 1203 	umull	r1, r2, r2, r3
600016c4:	1a99      	subs	r1, r3, r2
600016c6:	eb02 0251 	add.w	r2, r2, r1, lsr #1
600016ca:	0912      	lsrs	r2, r2, #4
600016cc:	1c51      	adds	r1, r2, #1
600016ce:	b2c9      	uxtb	r1, r1
600016d0:	73a1      	strb	r1, [r4, #14]
   IO1[rwRegCursorItemOnPg] = ItemNum % MaxItemsPerPage;
600016d2:	eb02 01c2 	add.w	r1, r2, r2, lsl #3
600016d6:	eb02 0241 	add.w	r2, r2, r1, lsl #1
600016da:	1a9b      	subs	r3, r3, r2
600016dc:	b2db      	uxtb	r3, r3
600016de:	7323      	strb	r3, [r4, #12]
   IO1[rRegNumItemsOnPage] = (NumItemsFull > IO1[rwRegPageNumber]*MaxItemsPerPage ? MaxItemsPerPage : NumItemsFull-(IO1[rwRegPageNumber]-1)*MaxItemsPerPage);
600016e0:	7ba3      	ldrb	r3, [r4, #14]
600016e2:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
600016e6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
600016ea:	4298      	cmp	r0, r3
600016ec:	dc0d      	bgt.n	6000170a <NextPicture()+0x92>
600016ee:	7ba2      	ldrb	r2, [r4, #14]
600016f0:	f100 0313 	add.w	r3, r0, #19
600016f4:	eb02 0182 	add.w	r1, r2, r2, lsl #2
600016f8:	ebc2 1201 	rsb	r2, r2, r1, lsl #4
600016fc:	ebc2 0282 	rsb	r2, r2, r2, lsl #2
60001700:	4413      	add	r3, r2
60001702:	b2db      	uxtb	r3, r3
60001704:	7363      	strb	r3, [r4, #13]
}
60001706:	bc70      	pop	{r4, r5, r6}
60001708:	4770      	bx	lr
   IO1[rRegNumItemsOnPage] = (NumItemsFull > IO1[rwRegPageNumber]*MaxItemsPerPage ? MaxItemsPerPage : NumItemsFull-(IO1[rwRegPageNumber]-1)*MaxItemsPerPage);
6000170a:	2313      	movs	r3, #19
6000170c:	7363      	strb	r3, [r4, #13]
6000170e:	e7fa      	b.n	60001706 <NextPicture()+0x8e>
60001710:	2000dae4 	.word	0x2000dae4
60001714:	2000daf0 	.word	0x2000daf0
60001718:	2005e524 	.word	0x2005e524
6000171c:	2005e526 	.word	0x2005e526
60001720:	af286bcb 	.word	0xaf286bcb

60001724 <LastPicture()>:

FLASHMEM void LastPicture()
{
   SelItemFullIdx = IO1[rwRegCursorItemOnPg] + (IO1[rwRegPageNumber]-1) * MaxItemsPerPage;
60001724:	4929      	ldr	r1, [pc, #164]	; (600017cc <LastPicture()+0xa8>)
   do
   {
      if (SelItemFullIdx == 0) SelItemFullIdx = NumItemsFull-1;
      else SelItemFullIdx--;
      
      if (MenuSource[SelItemFullIdx].ItemType == rtFileKla ||
60001726:	4b2a      	ldr	r3, [pc, #168]	; (600017d0 <LastPicture()+0xac>)
   SelItemFullIdx = IO1[rwRegCursorItemOnPg] + (IO1[rwRegPageNumber]-1) * MaxItemsPerPage;
60001728:	6808      	ldr	r0, [r1, #0]
      if (SelItemFullIdx == 0) SelItemFullIdx = NumItemsFull-1;
6000172a:	4a2a      	ldr	r2, [pc, #168]	; (600017d4 <LastPicture()+0xb0>)
{
6000172c:	b530      	push	{r4, r5, lr}
      if (MenuSource[SelItemFullIdx].ItemType == rtFileKla ||
6000172e:	681c      	ldr	r4, [r3, #0]
   SelItemFullIdx = IO1[rwRegCursorItemOnPg] + (IO1[rwRegPageNumber]-1) * MaxItemsPerPage;
60001730:	7b03      	ldrb	r3, [r0, #12]
60001732:	7b81      	ldrb	r1, [r0, #14]
      if (SelItemFullIdx == 0) SelItemFullIdx = NumItemsFull-1;
60001734:	f8b2 c000 	ldrh.w	ip, [r2]
   SelItemFullIdx = IO1[rwRegCursorItemOnPg] + (IO1[rwRegPageNumber]-1) * MaxItemsPerPage;
60001738:	3901      	subs	r1, #1
6000173a:	4d27      	ldr	r5, [pc, #156]	; (600017d8 <LastPicture()+0xb4>)
      if (SelItemFullIdx == 0) SelItemFullIdx = NumItemsFull-1;
6000173c:	f10c 3eff 	add.w	lr, ip, #4294967295
   SelItemFullIdx = IO1[rwRegCursorItemOnPg] + (IO1[rwRegPageNumber]-1) * MaxItemsPerPage;
60001740:	eb01 02c1 	add.w	r2, r1, r1, lsl #3
      if (SelItemFullIdx == 0) SelItemFullIdx = NumItemsFull-1;
60001744:	fa1f fe8e 	uxth.w	lr, lr
   SelItemFullIdx = IO1[rwRegCursorItemOnPg] + (IO1[rwRegPageNumber]-1) * MaxItemsPerPage;
60001748:	eb01 0142 	add.w	r1, r1, r2, lsl #1
6000174c:	4419      	add	r1, r3
6000174e:	b289      	uxth	r1, r1
      if (MenuSource[SelItemFullIdx].ItemType == rtFileKla ||
60001750:	460b      	mov	r3, r1
   SelItemFullIdx = IO1[rwRegCursorItemOnPg] + (IO1[rwRegPageNumber]-1) * MaxItemsPerPage;
60001752:	8029      	strh	r1, [r5, #0]
   uint16_t InitItemNum = SelItemFullIdx;
60001754:	e007      	b.n	60001766 <LastPicture()+0x42>
      else SelItemFullIdx--;
60001756:	b293      	uxth	r3, r2
      if (MenuSource[SelItemFullIdx].ItemType == rtFileKla ||
60001758:	011a      	lsls	r2, r3, #4
6000175a:	5ca2      	ldrb	r2, [r4, r2]
6000175c:	3a0c      	subs	r2, #12
6000175e:	2a01      	cmp	r2, #1
60001760:	d90a      	bls.n	60001778 <LastPicture()+0x54>
          MenuSource[SelItemFullIdx].ItemType == rtFileArt)
      {
         SetCursorToItemNum(SelItemFullIdx);
         return;
      }
   } while (SelItemFullIdx != InitItemNum); //just 1 time through, but should stop on same initial one unless changed externally   
60001762:	4299      	cmp	r1, r3
60001764:	d02d      	beq.n	600017c2 <LastPicture()+0x9e>
      else SelItemFullIdx--;
60001766:	1e5a      	subs	r2, r3, #1
      if (SelItemFullIdx == 0) SelItemFullIdx = NumItemsFull-1;
60001768:	2b00      	cmp	r3, #0
6000176a:	d1f4      	bne.n	60001756 <LastPicture()+0x32>
6000176c:	4673      	mov	r3, lr
      if (MenuSource[SelItemFullIdx].ItemType == rtFileKla ||
6000176e:	011a      	lsls	r2, r3, #4
60001770:	5ca2      	ldrb	r2, [r4, r2]
60001772:	3a0c      	subs	r2, #12
60001774:	2a01      	cmp	r2, #1
60001776:	d8f4      	bhi.n	60001762 <LastPicture()+0x3e>
   IO1[rwRegPageNumber] = ItemNum/MaxItemsPerPage +1;
60001778:	4a18      	ldr	r2, [pc, #96]	; (600017dc <LastPicture()+0xb8>)
6000177a:	802b      	strh	r3, [r5, #0]
6000177c:	fba2 1203 	umull	r1, r2, r2, r3
60001780:	1a99      	subs	r1, r3, r2
60001782:	eb02 0251 	add.w	r2, r2, r1, lsr #1
60001786:	0912      	lsrs	r2, r2, #4
60001788:	1c51      	adds	r1, r2, #1
6000178a:	b2c9      	uxtb	r1, r1
6000178c:	7381      	strb	r1, [r0, #14]
   IO1[rwRegCursorItemOnPg] = ItemNum % MaxItemsPerPage;
6000178e:	eb02 01c2 	add.w	r1, r2, r2, lsl #3
60001792:	eb02 0241 	add.w	r2, r2, r1, lsl #1
60001796:	1a9b      	subs	r3, r3, r2
60001798:	b2db      	uxtb	r3, r3
6000179a:	7303      	strb	r3, [r0, #12]
   IO1[rRegNumItemsOnPage] = (NumItemsFull > IO1[rwRegPageNumber]*MaxItemsPerPage ? MaxItemsPerPage : NumItemsFull-(IO1[rwRegPageNumber]-1)*MaxItemsPerPage);
6000179c:	7b83      	ldrb	r3, [r0, #14]
6000179e:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
600017a2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
600017a6:	459c      	cmp	ip, r3
600017a8:	dc0c      	bgt.n	600017c4 <LastPicture()+0xa0>
600017aa:	7b82      	ldrb	r2, [r0, #14]
600017ac:	f10c 0313 	add.w	r3, ip, #19
600017b0:	eb02 0182 	add.w	r1, r2, r2, lsl #2
600017b4:	ebc2 1201 	rsb	r2, r2, r1, lsl #4
600017b8:	ebc2 0282 	rsb	r2, r2, r2, lsl #2
600017bc:	4413      	add	r3, r2
600017be:	b2db      	uxtb	r3, r3
600017c0:	7343      	strb	r3, [r0, #13]
}
600017c2:	bd30      	pop	{r4, r5, pc}
   IO1[rRegNumItemsOnPage] = (NumItemsFull > IO1[rwRegPageNumber]*MaxItemsPerPage ? MaxItemsPerPage : NumItemsFull-(IO1[rwRegPageNumber]-1)*MaxItemsPerPage);
600017c4:	2313      	movs	r3, #19
600017c6:	7343      	strb	r3, [r0, #13]
600017c8:	e7fb      	b.n	600017c2 <LastPicture()+0x9e>
600017ca:	bf00      	nop
600017cc:	2000dae4 	.word	0x2000dae4
600017d0:	2000daf0 	.word	0x2000daf0
600017d4:	2005e524 	.word	0x2005e524
600017d8:	2005e526 	.word	0x2005e526
600017dc:	af286bcb 	.word	0xaf286bcb

600017e0 <RAM2blocks()>:
{  //see how many 8k banks will fit in RAM2
600017e0:	b570      	push	{r4, r5, r6, lr}
600017e2:	2400      	movs	r4, #0
600017e4:	b0c6      	sub	sp, #280	; 0x118
600017e6:	b2e5      	uxtb	r5, r4
      ptrChip[ChipNum] = (char *)malloc(8192);
600017e8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
600017ec:	f003 ff18 	bl	60005620 <__malloc_veneer>
      if (ptrChip[ChipNum] == NULL) break;
600017f0:	3401      	adds	r4, #1
      ptrChip[ChipNum] = (char *)malloc(8192);
600017f2:	f84d 0025 	str.w	r0, [sp, r5, lsl #2]
      if (ptrChip[ChipNum] == NULL) break;
600017f6:	2800      	cmp	r0, #0
600017f8:	d1f5      	bne.n	600017e6 <RAM2blocks()+0x6>
   for(uint8_t Cnt=0; Cnt < ChipNum; Cnt++) free(ptrChip[Cnt]);
600017fa:	b15d      	cbz	r5, 60001814 <RAM2blocks()+0x34>
600017fc:	1e6b      	subs	r3, r5, #1
600017fe:	aa01      	add	r2, sp, #4
60001800:	466c      	mov	r4, sp
60001802:	b2db      	uxtb	r3, r3
60001804:	eb02 0683 	add.w	r6, r2, r3, lsl #2
60001808:	f854 0b04 	ldr.w	r0, [r4], #4
6000180c:	f003 fea4 	bl	60005558 <__free_veneer>
60001810:	42b4      	cmp	r4, r6
60001812:	d1f9      	bne.n	60001808 <RAM2blocks()+0x28>
}
60001814:	4628      	mov	r0, r5
60001816:	b046      	add	sp, #280	; 0x118
60001818:	bd70      	pop	{r4, r5, r6, pc}
6000181a:	bf00      	nop

6000181c <MakeBuildInfo()>:
   sprintf(SerialStringBuf, "       FW: %s, %s\r\n   Teensy: %luMHz  %.1fC", __DATE__, __TIME__, (F_CPU_ACTUAL/1000000), tempmonGetTemp());
6000181c:	4b0b      	ldr	r3, [pc, #44]	; (6000184c <MakeBuildInfo()+0x30>)
{
6000181e:	b510      	push	{r4, lr}
60001820:	b084      	sub	sp, #16
   sprintf(SerialStringBuf, "       FW: %s, %s\r\n   Teensy: %luMHz  %.1fC", __DATE__, __TIME__, (F_CPU_ACTUAL/1000000), tempmonGetTemp());
60001822:	681c      	ldr	r4, [r3, #0]
60001824:	f003 fec4 	bl	600055b0 <__tempmonGetTemp_veneer>
60001828:	4909      	ldr	r1, [pc, #36]	; (60001850 <MakeBuildInfo()+0x34>)
6000182a:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
6000182e:	4b09      	ldr	r3, [pc, #36]	; (60001854 <MakeBuildInfo()+0x38>)
60001830:	fba1 1404 	umull	r1, r4, r1, r4
60001834:	4a08      	ldr	r2, [pc, #32]	; (60001858 <MakeBuildInfo()+0x3c>)
60001836:	4909      	ldr	r1, [pc, #36]	; (6000185c <MakeBuildInfo()+0x40>)
60001838:	0ca4      	lsrs	r4, r4, #18
6000183a:	4809      	ldr	r0, [pc, #36]	; (60001860 <MakeBuildInfo()+0x44>)
6000183c:	ed8d 0b02 	vstr	d0, [sp, #8]
60001840:	9400      	str	r4, [sp, #0]
60001842:	f003 fed1 	bl	600055e8 <__sprintf_veneer>
}
60001846:	b004      	add	sp, #16
60001848:	bd10      	pop	{r4, pc}
6000184a:	bf00      	nop
6000184c:	2000bd24 	.word	0x2000bd24
60001850:	431bde83 	.word	0x431bde83
60001854:	2000a6b0 	.word	0x2000a6b0
60001858:	2000a6bc 	.word	0x2000a6bc
6000185c:	2000a6c8 	.word	0x2000a6c8
60001860:	2000bfe8 	.word	0x2000bfe8

60001864 <MakeBuildCPUInfoStr()>:
{
60001864:	b570      	push	{r4, r5, r6, lr}
}
 
void FreeDriveDirMenu()
{
   //free/clear prev loaded directory
   if(DriveDirMenu != NULL)
60001866:	4d30      	ldr	r5, [pc, #192]	; (60001928 <MakeBuildCPUInfoStr()+0xc4>)
60001868:	b08a      	sub	sp, #40	; 0x28
6000186a:	6828      	ldr	r0, [r5, #0]
6000186c:	b198      	cbz	r0, 60001896 <MakeBuildCPUInfoStr()+0x32>
   {
      Printf_dbg("Dir info removed\n"); 
      for(uint16_t Num=0; Num < NumDrvDirMenuItems; Num++) free(DriveDirMenu[Num].Name);
6000186e:	4e2f      	ldr	r6, [pc, #188]	; (6000192c <MakeBuildCPUInfoStr()+0xc8>)
60001870:	8833      	ldrh	r3, [r6, #0]
60001872:	b163      	cbz	r3, 6000188e <MakeBuildCPUInfoStr()+0x2a>
60001874:	2400      	movs	r4, #0
60001876:	b2a3      	uxth	r3, r4
60001878:	3401      	adds	r4, #1
6000187a:	eb00 1003 	add.w	r0, r0, r3, lsl #4
6000187e:	6840      	ldr	r0, [r0, #4]
60001880:	f003 fe6a 	bl	60005558 <__free_veneer>
60001884:	8832      	ldrh	r2, [r6, #0]
60001886:	b2a3      	uxth	r3, r4
      free(DriveDirMenu); DriveDirMenu = NULL;
60001888:	6828      	ldr	r0, [r5, #0]
      for(uint16_t Num=0; Num < NumDrvDirMenuItems; Num++) free(DriveDirMenu[Num].Name);
6000188a:	429a      	cmp	r2, r3
6000188c:	d8f3      	bhi.n	60001876 <MakeBuildCPUInfoStr()+0x12>
      free(DriveDirMenu); DriveDirMenu = NULL;
6000188e:	f003 fe63 	bl	60005558 <__free_veneer>
60001892:	2300      	movs	r3, #0
60001894:	602b      	str	r3, [r5, #0]
   //return true;
}
 
void RedirectEmptyDriveDirMenu()
{
   if((IO1[rWRegCurrMenuWAIT] == rmtSD || IO1[rWRegCurrMenuWAIT] == rmtUSBDrive) && DriveDirMenu == NULL)
60001896:	4b26      	ldr	r3, [pc, #152]	; (60001930 <MakeBuildCPUInfoStr()+0xcc>)
60001898:	681b      	ldr	r3, [r3, #0]
6000189a:	7a9a      	ldrb	r2, [r3, #10]
6000189c:	2a00      	cmp	r2, #0
6000189e:	d038      	beq.n	60001912 <MakeBuildCPUInfoStr()+0xae>
600018a0:	7a9a      	ldrb	r2, [r3, #10]
600018a2:	2a02      	cmp	r2, #2
600018a4:	d032      	beq.n	6000190c <MakeBuildCPUInfoStr()+0xa8>
   uint8_t NumChips = RAM2blocks();
600018a6:	f7ff ff9b 	bl	600017e0 <RAM2blocks()>
   NumChips = RAM2blocks()-1; //do it again, sometimes get one more, minus one to match reality, not clear why
600018aa:	f7ff ff99 	bl	600017e0 <RAM2blocks()>
600018ae:	1e42      	subs	r2, r0, #1
   CrtMax += NumChips*8;
600018b0:	f44f 73a0 	mov.w	r3, #320	; 0x140
   sprintf(FreeStr, "  %luk free\r", (uint32_t)(CrtMax*1.004));  //larger File size due to header info.
600018b4:	491f      	ldr	r1, [pc, #124]	; (60001934 <MakeBuildCPUInfoStr()+0xd0>)
   CrtMax += NumChips*8;
600018b6:	b2d2      	uxtb	r2, r2
   sprintf(FreeStr, "  %luk free\r", (uint32_t)(CrtMax*1.004));  //larger File size due to header info.
600018b8:	a805      	add	r0, sp, #20
   CrtMax += NumChips*8;
600018ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
600018be:	ee07 3a10 	vmov	s14, r3
   sprintf(FreeStr, "  %luk free\r", (uint32_t)(CrtMax*1.004));  //larger File size due to header info.
600018c2:	ed9f 6b17 	vldr	d6, [pc, #92]	; 60001920 <MakeBuildCPUInfoStr()+0xbc>
600018c6:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
600018ca:	ee27 7b06 	vmul.f64	d7, d7, d6
600018ce:	eefc 7bc7 	vcvt.u32.f64	s15, d7
600018d2:	ee17 2a90 	vmov	r2, s15
600018d6:	f003 fe87 	bl	600055e8 <__sprintf_veneer>
   sprintf(SerialStringBuf, "       FW: %s, %s\r\n   Teensy: %luMHz  %.1fC", __DATE__, __TIME__, (F_CPU_ACTUAL/1000000), tempmonGetTemp());
600018da:	4b17      	ldr	r3, [pc, #92]	; (60001938 <MakeBuildCPUInfoStr()+0xd4>)
600018dc:	681c      	ldr	r4, [r3, #0]
600018de:	f003 fe67 	bl	600055b0 <__tempmonGetTemp_veneer>
600018e2:	4a16      	ldr	r2, [pc, #88]	; (6000193c <MakeBuildCPUInfoStr()+0xd8>)
600018e4:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
600018e8:	4b15      	ldr	r3, [pc, #84]	; (60001940 <MakeBuildCPUInfoStr()+0xdc>)
600018ea:	fba2 2404 	umull	r2, r4, r2, r4
600018ee:	4915      	ldr	r1, [pc, #84]	; (60001944 <MakeBuildCPUInfoStr()+0xe0>)
600018f0:	4a15      	ldr	r2, [pc, #84]	; (60001948 <MakeBuildCPUInfoStr()+0xe4>)
600018f2:	0ca4      	lsrs	r4, r4, #18
600018f4:	4815      	ldr	r0, [pc, #84]	; (6000194c <MakeBuildCPUInfoStr()+0xe8>)
600018f6:	ed8d 0b02 	vstr	d0, [sp, #8]
600018fa:	9400      	str	r4, [sp, #0]
600018fc:	f003 fe74 	bl	600055e8 <__sprintf_veneer>
   strcat(SerialStringBuf, FreeStr);
60001900:	a905      	add	r1, sp, #20
60001902:	4812      	ldr	r0, [pc, #72]	; (6000194c <MakeBuildCPUInfoStr()+0xe8>)
60001904:	f003 fed4 	bl	600056b0 <__strcat_veneer>
}
60001908:	b00a      	add	sp, #40	; 0x28
6000190a:	bd70      	pop	{r4, r5, r6, pc}
6000190c:	682a      	ldr	r2, [r5, #0]
6000190e:	2a00      	cmp	r2, #0
60001910:	d1c9      	bne.n	600018a6 <MakeBuildCPUInfoStr()+0x42>
   {  //return to Teensy Menu instead of re-loading dir to save time
      IO1[rWRegCurrMenuWAIT] = rmtTeensy;
60001912:	2201      	movs	r2, #1
60001914:	729a      	strb	r2, [r3, #10]
      MenuChange();
60001916:	f003 fe97 	bl	60005648 <___Z10MenuChangev_veneer>
6000191a:	e7c4      	b.n	600018a6 <MakeBuildCPUInfoStr()+0x42>
6000191c:	f3af 8000 	nop.w
60001920:	4dd2f1aa 	.word	0x4dd2f1aa
60001924:	3ff01062 	.word	0x3ff01062
60001928:	2000d8b0 	.word	0x2000d8b0
6000192c:	2005e522 	.word	0x2005e522
60001930:	2000dae4 	.word	0x2000dae4
60001934:	2000a6f4 	.word	0x2000a6f4
60001938:	2000bd24 	.word	0x2000bd24
6000193c:	431bde83 	.word	0x431bde83
60001940:	2000a6b0 	.word	0x2000a6b0
60001944:	2000a6c8 	.word	0x2000a6c8
60001948:	2000a6bc 	.word	0x2000a6bc
6000194c:	2000bfe8 	.word	0x2000bfe8

60001950 <ParseARTHeader()>:
   if(XferImage[0] != 0 || XferImage[1] != 0x20) //allow only $2000
60001950:	4b16      	ldr	r3, [pc, #88]	; (600019ac <ParseARTHeader()+0x5c>)
60001952:	681b      	ldr	r3, [r3, #0]
{
60001954:	b510      	push	{r4, lr}
   if(XferImage[0] != 0 || XferImage[1] != 0x20) //allow only $2000
60001956:	781a      	ldrb	r2, [r3, #0]
{
60001958:	b082      	sub	sp, #8
   if(XferImage[0] != 0 || XferImage[1] != 0x20) //allow only $2000
6000195a:	7859      	ldrb	r1, [r3, #1]
6000195c:	b90a      	cbnz	r2, 60001962 <ParseARTHeader()+0x12>
6000195e:	2920      	cmp	r1, #32
60001960:	d005      	beq.n	6000196e <ParseARTHeader()+0x1e>
      SendMsgPrintfln("Bad addr: $%02x%02x (exp $2000)", XferImage[1], XferImage[0]);
60001962:	4813      	ldr	r0, [pc, #76]	; (600019b0 <ParseARTHeader()+0x60>)
60001964:	f003 fe04 	bl	60005570 <___Z15SendMsgPrintflnPKcz_veneer>
      return false;
60001968:	2000      	movs	r0, #0
}
6000196a:	b002      	add	sp, #8
6000196c:	bd10      	pop	{r4, pc}
   if (XferSize != 9002 && XferSize != 9009) //exact expected image size
6000196e:	4c11      	ldr	r4, [pc, #68]	; (600019b4 <ParseARTHeader()+0x64>)
60001970:	f242 302a 	movw	r0, #9002	; 0x232a
60001974:	6821      	ldr	r1, [r4, #0]
60001976:	4281      	cmp	r1, r0
60001978:	d00d      	beq.n	60001996 <ParseARTHeader()+0x46>
6000197a:	f242 3331 	movw	r3, #9009	; 0x2331
6000197e:	4299      	cmp	r1, r3
60001980:	d102      	bne.n	60001988 <ParseARTHeader()+0x38>
   return true;
60001982:	2001      	movs	r0, #1
}
60001984:	b002      	add	sp, #8
60001986:	bd10      	pop	{r4, pc}
      SendMsgPrintfln("Bad size: %lu bytes (exp 9002 or 9009)", XferSize);
60001988:	480b      	ldr	r0, [pc, #44]	; (600019b8 <ParseARTHeader()+0x68>)
6000198a:	9201      	str	r2, [sp, #4]
6000198c:	f003 fdf0 	bl	60005570 <___Z15SendMsgPrintflnPKcz_veneer>
      return false;
60001990:	9a01      	ldr	r2, [sp, #4]
60001992:	4610      	mov	r0, r2
60001994:	e7e9      	b.n	6000196a <ParseARTHeader()+0x1a>
      XferImage[XferSize++] = 15; //PokeLtGrey
60001996:	f242 312b 	movw	r1, #9003	; 0x232b
6000199a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
6000199e:	220f      	movs	r2, #15
   return true;
600019a0:	2001      	movs	r0, #1
      XferImage[XferSize++] = 15; //PokeLtGrey
600019a2:	6021      	str	r1, [r4, #0]
600019a4:	f883 232a 	strb.w	r2, [r3, #810]	; 0x32a
}
600019a8:	b002      	add	sp, #8
600019aa:	bd10      	pop	{r4, pc}
600019ac:	2005dfe4 	.word	0x2005dfe4
600019b0:	2000a704 	.word	0x2000a704
600019b4:	2005dfe8 	.word	0x2005dfe8
600019b8:	2000a724 	.word	0x2000a724

600019bc <ParseKLAHeader()>:
   if(XferImage[0] != 0 || (XferImage[1] & 0xbf) != 0x20) //allow only $2000 & $6000
600019bc:	4b0e      	ldr	r3, [pc, #56]	; (600019f8 <ParseKLAHeader()+0x3c>)
600019be:	681b      	ldr	r3, [r3, #0]
{
600019c0:	b510      	push	{r4, lr}
   if(XferImage[0] != 0 || (XferImage[1] & 0xbf) != 0x20) //allow only $2000 & $6000
600019c2:	781c      	ldrb	r4, [r3, #0]
600019c4:	7859      	ldrb	r1, [r3, #1]
600019c6:	b964      	cbnz	r4, 600019e2 <ParseKLAHeader()+0x26>
600019c8:	f001 02bf 	and.w	r2, r1, #191	; 0xbf
600019cc:	2a20      	cmp	r2, #32
600019ce:	d108      	bne.n	600019e2 <ParseKLAHeader()+0x26>
   if (XferSize != 10003) //exact expected image size
600019d0:	490a      	ldr	r1, [pc, #40]	; (600019fc <ParseKLAHeader()+0x40>)
   XferImage[1] = 0x20;  //force to $2000
600019d2:	705a      	strb	r2, [r3, #1]
   if (XferSize != 10003) //exact expected image size
600019d4:	f242 7313 	movw	r3, #10003	; 0x2713
600019d8:	6809      	ldr	r1, [r1, #0]
600019da:	4299      	cmp	r1, r3
600019dc:	d107      	bne.n	600019ee <ParseKLAHeader()+0x32>
   return true;
600019de:	2001      	movs	r0, #1
}
600019e0:	bd10      	pop	{r4, pc}
      SendMsgPrintfln("Bad addr: $%02x%02x (exp $2000 or $6000)", XferImage[1], XferImage[0]);
600019e2:	4622      	mov	r2, r4
600019e4:	4806      	ldr	r0, [pc, #24]	; (60001a00 <ParseKLAHeader()+0x44>)
600019e6:	f003 fdc3 	bl	60005570 <___Z15SendMsgPrintflnPKcz_veneer>
      return false;
600019ea:	2000      	movs	r0, #0
}
600019ec:	bd10      	pop	{r4, pc}
      SendMsgPrintfln("Bad size: %lu bytes (exp 10003)", XferSize);
600019ee:	4805      	ldr	r0, [pc, #20]	; (60001a04 <ParseKLAHeader()+0x48>)
600019f0:	f003 fdbe 	bl	60005570 <___Z15SendMsgPrintflnPKcz_veneer>
      return false;
600019f4:	4620      	mov	r0, r4
}
600019f6:	bd10      	pop	{r4, pc}
600019f8:	2005dfe4 	.word	0x2005dfe4
600019fc:	2005dfe8 	.word	0x2005dfe8
60001a00:	2000a74c 	.word	0x2000a74c
60001a04:	2000a778 	.word	0x2000a778

60001a08 <SIDLoadError(char const*)>:
{
60001a08:	b570      	push	{r4, r5, r6, lr}
   strcat(StrSIDInfo, "Error: ");
60001a0a:	4e0e      	ldr	r6, [pc, #56]	; (60001a44 <SIDLoadError(char const*)+0x3c>)
{
60001a0c:	4604      	mov	r4, r0
   strcat(StrSIDInfo, "Error: ");
60001a0e:	6835      	ldr	r5, [r6, #0]
60001a10:	4628      	mov	r0, r5
60001a12:	f003 fdb9 	bl	60005588 <__strlen_veneer>
60001a16:	4a0c      	ldr	r2, [pc, #48]	; (60001a48 <SIDLoadError(char const*)+0x40>)
60001a18:	eb05 0c00 	add.w	ip, r5, r0
60001a1c:	4603      	mov	r3, r0
60001a1e:	ca03      	ldmia	r2!, {r0, r1}
60001a20:	50e8      	str	r0, [r5, r3]
60001a22:	f8cc 1004 	str.w	r1, [ip, #4]
   strcat(StrSIDInfo, ErrMsg); //add to displayed info
60001a26:	4621      	mov	r1, r4
60001a28:	6830      	ldr	r0, [r6, #0]
60001a2a:	f003 fe41 	bl	600056b0 <__strcat_veneer>
	// the data across your USB cable.
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
	// Transmit a single byte to your PC
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
60001a2e:	2080      	movs	r0, #128	; 0x80
60001a30:	f003 fe12 	bl	60005658 <__usb_serial_putchar_veneer>
60001a34:	209b      	movs	r0, #155	; 0x9b
60001a36:	f003 fe0f 	bl	60005658 <__usb_serial_putchar_veneer>
   SendMsgPrintfln(ErrMsg);
60001a3a:	4620      	mov	r0, r4
}
60001a3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   SendMsgPrintfln(ErrMsg);
60001a40:	f003 bd96 	b.w	60005570 <___Z15SendMsgPrintflnPKcz_veneer>
60001a44:	2005dfe0 	.word	0x2005dfe0
60001a48:	2000a798 	.word	0x2000a798

60001a4c <ParseSIDHeader(char const*)>:
   char RetSpc[] = "\r "; //return char + space
60001a4c:	4bb8      	ldr	r3, [pc, #736]	; (60001d30 <ParseSIDHeader(char const*)+0x2e4>)
{
60001a4e:	4601      	mov	r1, r0
60001a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   strcpy(StrSIDInfo, RetSpc); //clear/init SID info
60001a54:	4cb7      	ldr	r4, [pc, #732]	; (60001d34 <ParseSIDHeader(char const*)+0x2e8>)
{
60001a56:	b099      	sub	sp, #100	; 0x64
   char RetSpc[] = "\r "; //return char + space
60001a58:	681d      	ldr	r5, [r3, #0]
   strcpy(StrSIDInfo, RetSpc); //clear/init SID info
60001a5a:	6823      	ldr	r3, [r4, #0]
   char RetSpc[] = "\r "; //return char + space
60001a5c:	0c2a      	lsrs	r2, r5, #16
60001a5e:	f8ad 501c 	strh.w	r5, [sp, #28]
   strncat(StrSIDInfo, (char*)XferImage+0x16, 0x20); //Name (32 chars max)
60001a62:	4db5      	ldr	r5, [pc, #724]	; (60001d38 <ParseSIDHeader(char const*)+0x2ec>)
   strcpy(StrSIDInfo, RetSpc); //clear/init SID info
60001a64:	709a      	strb	r2, [r3, #2]
   char RetSpc[] = "\r "; //return char + space
60001a66:	f88d 201e 	strb.w	r2, [sp, #30]
   strcpy(StrSIDInfo, RetSpc); //clear/init SID info
60001a6a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
60001a6e:	801a      	strh	r2, [r3, #0]
   strncat(StrSIDInfo, filename, 38); //filename, cut to 38 chars max to not scroll
60001a70:	2226      	movs	r2, #38	; 0x26
60001a72:	6820      	ldr	r0, [r4, #0]
60001a74:	f003 fd8c 	bl	60005590 <__strncat_veneer>
   strcat(StrSIDInfo, RetSpc); 
60001a78:	a907      	add	r1, sp, #28
60001a7a:	6820      	ldr	r0, [r4, #0]
60001a7c:	f003 fe18 	bl	600056b0 <__strcat_veneer>
   strcat(StrSIDInfo, RetSpc); //blank line to separate filename from header info
60001a80:	a907      	add	r1, sp, #28
60001a82:	6820      	ldr	r0, [r4, #0]
60001a84:	f003 fe14 	bl	600056b0 <__strcat_veneer>
   strcat(StrSIDInfo, "Name: "); 
60001a88:	6826      	ldr	r6, [r4, #0]
60001a8a:	4630      	mov	r0, r6
60001a8c:	f003 fd7c 	bl	60005588 <__strlen_veneer>
60001a90:	49aa      	ldr	r1, [pc, #680]	; (60001d3c <ParseSIDHeader(char const*)+0x2f0>)
60001a92:	1837      	adds	r7, r6, r0
60001a94:	4603      	mov	r3, r0
60001a96:	6808      	ldr	r0, [r1, #0]
   strncat(StrSIDInfo, (char*)XferImage+0x16, 0x20); //Name (32 chars max)
60001a98:	2220      	movs	r2, #32
   strcat(StrSIDInfo, "Name: "); 
60001a9a:	50f0      	str	r0, [r6, r3]
60001a9c:	888b      	ldrh	r3, [r1, #4]
   strncat(StrSIDInfo, (char*)XferImage+0x16, 0x20); //Name (32 chars max)
60001a9e:	6820      	ldr	r0, [r4, #0]
   strcat(StrSIDInfo, "Name: "); 
60001aa0:	80bb      	strh	r3, [r7, #4]
60001aa2:	798b      	ldrb	r3, [r1, #6]
   strncat(StrSIDInfo, (char*)XferImage+0x16, 0x20); //Name (32 chars max)
60001aa4:	6829      	ldr	r1, [r5, #0]
   strcat(StrSIDInfo, "Name: "); 
60001aa6:	71bb      	strb	r3, [r7, #6]
   strncat(StrSIDInfo, (char*)XferImage+0x16, 0x20); //Name (32 chars max)
60001aa8:	3116      	adds	r1, #22
60001aaa:	f003 fd71 	bl	60005590 <__strncat_veneer>
   strcat(StrSIDInfo, RetSpc); 
60001aae:	a907      	add	r1, sp, #28
60001ab0:	6820      	ldr	r0, [r4, #0]
60001ab2:	f003 fdfd 	bl	600056b0 <__strcat_veneer>
   strcat(StrSIDInfo, "Auth: "); 
60001ab6:	6826      	ldr	r6, [r4, #0]
60001ab8:	4630      	mov	r0, r6
60001aba:	f003 fd65 	bl	60005588 <__strlen_veneer>
60001abe:	49a0      	ldr	r1, [pc, #640]	; (60001d40 <ParseSIDHeader(char const*)+0x2f4>)
60001ac0:	4603      	mov	r3, r0
   strncat(StrSIDInfo, (char*)XferImage+0x36, 0x20);  //Author (32 chars max)
60001ac2:	2220      	movs	r2, #32
   strcat(StrSIDInfo, "Auth: "); 
60001ac4:	6808      	ldr	r0, [r1, #0]
60001ac6:	50f0      	str	r0, [r6, r3]
60001ac8:	18f0      	adds	r0, r6, r3
60001aca:	888b      	ldrh	r3, [r1, #4]
60001acc:	8083      	strh	r3, [r0, #4]
60001ace:	798b      	ldrb	r3, [r1, #6]
   strncat(StrSIDInfo, (char*)XferImage+0x36, 0x20);  //Author (32 chars max)
60001ad0:	6829      	ldr	r1, [r5, #0]
   strcat(StrSIDInfo, "Auth: "); 
60001ad2:	7183      	strb	r3, [r0, #6]
   strncat(StrSIDInfo, (char*)XferImage+0x36, 0x20);  //Author (32 chars max)
60001ad4:	3136      	adds	r1, #54	; 0x36
60001ad6:	6820      	ldr	r0, [r4, #0]
60001ad8:	f003 fd5a 	bl	60005590 <__strncat_veneer>
   strcat(StrSIDInfo, RetSpc); 
60001adc:	a907      	add	r1, sp, #28
60001ade:	6820      	ldr	r0, [r4, #0]
60001ae0:	f003 fde6 	bl	600056b0 <__strcat_veneer>
   strcat(StrSIDInfo, " Rel: "); 
60001ae4:	6826      	ldr	r6, [r4, #0]
60001ae6:	4630      	mov	r0, r6
60001ae8:	f003 fd4e 	bl	60005588 <__strlen_veneer>
60001aec:	4995      	ldr	r1, [pc, #596]	; (60001d44 <ParseSIDHeader(char const*)+0x2f8>)
60001aee:	4603      	mov	r3, r0
   strncat(StrSIDInfo, (char*)XferImage+0x56, 0x20);  //Released (32 chars max)
60001af0:	2220      	movs	r2, #32
   strcat(StrSIDInfo, " Rel: "); 
60001af2:	6808      	ldr	r0, [r1, #0]
60001af4:	50f0      	str	r0, [r6, r3]
60001af6:	18f0      	adds	r0, r6, r3
60001af8:	888b      	ldrh	r3, [r1, #4]
60001afa:	8083      	strh	r3, [r0, #4]
60001afc:	798b      	ldrb	r3, [r1, #6]
   strncat(StrSIDInfo, (char*)XferImage+0x56, 0x20);  //Released (32 chars max)
60001afe:	6829      	ldr	r1, [r5, #0]
   strcat(StrSIDInfo, " Rel: "); 
60001b00:	7183      	strb	r3, [r0, #6]
   strncat(StrSIDInfo, (char*)XferImage+0x56, 0x20);  //Released (32 chars max)
60001b02:	3156      	adds	r1, #86	; 0x56
60001b04:	6820      	ldr	r0, [r4, #0]
60001b06:	f003 fd43 	bl	60005590 <__strncat_veneer>
   strcat(StrSIDInfo, RetSpc); 
60001b0a:	a907      	add	r1, sp, #28
60001b0c:	6820      	ldr	r0, [r4, #0]
60001b0e:	f003 fdcf 	bl	600056b0 <__strcat_veneer>
   if (memcmp(XferImage, "PSID", 4) != 0) 
60001b12:	682b      	ldr	r3, [r5, #0]
60001b14:	781a      	ldrb	r2, [r3, #0]
60001b16:	2a50      	cmp	r2, #80	; 0x50
60001b18:	d007      	beq.n	60001b2a <ParseSIDHeader(char const*)+0xde>
      if (memcmp(XferImage, "RSID", 4) != 0) 
60001b1a:	2a52      	cmp	r2, #82	; 0x52
60001b1c:	d005      	beq.n	60001b2a <ParseSIDHeader(char const*)+0xde>
         SIDLoadError("PSID/RSID not found");
60001b1e:	488a      	ldr	r0, [pc, #552]	; (60001d48 <ParseSIDHeader(char const*)+0x2fc>)
}
60001b20:	b019      	add	sp, #100	; 0x64
60001b22:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      SIDLoadError("Mem conflict w/ TR app");
60001b26:	f7ff bf6f 	b.w	60001a08 <SIDLoadError(char const*)>
      if (memcmp(XferImage, "RSID", 4) != 0) 
60001b2a:	785a      	ldrb	r2, [r3, #1]
60001b2c:	1c59      	adds	r1, r3, #1
60001b2e:	2a53      	cmp	r2, #83	; 0x53
60001b30:	d1f5      	bne.n	60001b1e <ParseSIDHeader(char const*)+0xd2>
60001b32:	f811 2f01 	ldrb.w	r2, [r1, #1]!
60001b36:	2a49      	cmp	r2, #73	; 0x49
60001b38:	d1f1      	bne.n	60001b1e <ParseSIDHeader(char const*)+0xd2>
60001b3a:	784a      	ldrb	r2, [r1, #1]
60001b3c:	2a44      	cmp	r2, #68	; 0x44
60001b3e:	d1ee      	bne.n	60001b1e <ParseSIDHeader(char const*)+0xd2>

uint16_t toU16(uint8_t* src)
{
   return
      ((uint16_t)src[0]<<8 ) + 
      ((uint16_t)src[1]    ) ;
60001b40:	795a      	ldrb	r2, [r3, #5]
      ((uint16_t)src[0]<<8 ) + 
60001b42:	7919      	ldrb	r1, [r3, #4]
   if ( sidVersion<2 || sidVersion>4) 
60001b44:	3a02      	subs	r2, #2
60001b46:	eb02 2201 	add.w	r2, r2, r1, lsl #8
60001b4a:	b292      	uxth	r2, r2
60001b4c:	2a02      	cmp	r2, #2
60001b4e:	f200 80e6 	bhi.w	60001d1e <ParseSIDHeader(char const*)+0x2d2>
      ((uint16_t)src[0]<<8 ) + 
60001b52:	7999      	ldrb	r1, [r3, #6]
      ((uint16_t)src[1]    ) ;
60001b54:	79da      	ldrb	r2, [r3, #7]
60001b56:	eb02 2201 	add.w	r2, r2, r1, lsl #8
   StreamOffsetAddr = toU16(XferImage+0x06); //dataOffset
60001b5a:	497c      	ldr	r1, [pc, #496]	; (60001d4c <ParseSIDHeader(char const*)+0x300>)
      ((uint16_t)src[1]    ) ;
60001b5c:	b292      	uxth	r2, r2
   StreamOffsetAddr = toU16(XferImage+0x06); //dataOffset
60001b5e:	800a      	strh	r2, [r1, #0]
   if (StreamOffsetAddr!= 0x7c) 
60001b60:	880a      	ldrh	r2, [r1, #0]
60001b62:	b292      	uxth	r2, r2
60001b64:	2a7c      	cmp	r2, #124	; 0x7c
60001b66:	f040 80d4 	bne.w	60001d12 <ParseSIDHeader(char const*)+0x2c6>
      ((uint16_t)src[1]    ) ;
60001b6a:	7a58      	ldrb	r0, [r3, #9]
      ((uint16_t)src[0]<<8 ) + 
60001b6c:	7a1a      	ldrb	r2, [r3, #8]
      ((uint16_t)src[1]    ) ;
60001b6e:	eb00 2202 	add.w	r2, r0, r2, lsl #8
   if (toU16(XferImage+0x08) != 0)
60001b72:	b292      	uxth	r2, r2
60001b74:	b16a      	cbz	r2, 60001b92 <ParseSIDHeader(char const*)+0x146>
      StreamOffsetAddr -=2;
60001b76:	880a      	ldrh	r2, [r1, #0]
60001b78:	3a02      	subs	r2, #2
60001b7a:	b292      	uxth	r2, r2
60001b7c:	800a      	strh	r2, [r1, #0]
      XferImage[StreamOffsetAddr] = XferImage[0x09];
60001b7e:	880a      	ldrh	r2, [r1, #0]
60001b80:	b292      	uxth	r2, r2
60001b82:	5498      	strb	r0, [r3, r2]
      XferImage[StreamOffsetAddr+1] = XferImage[0x08];
60001b84:	682a      	ldr	r2, [r5, #0]
60001b86:	880b      	ldrh	r3, [r1, #0]
60001b88:	7a10      	ldrb	r0, [r2, #8]
60001b8a:	fa12 f383 	uxtah	r3, r2, r3
60001b8e:	7058      	strb	r0, [r3, #1]
   uint16_t LoadAddress = (XferImage[StreamOffsetAddr + 1] << 8) 
60001b90:	682b      	ldr	r3, [r5, #0]
60001b92:	8808      	ldrh	r0, [r1, #0]
      | XferImage[StreamOffsetAddr]; //little endian, opposite of toU16
60001b94:	880a      	ldrh	r2, [r1, #0]
   uint16_t LoadAddress = (XferImage[StreamOffsetAddr + 1] << 8) 
60001b96:	fa13 f180 	uxtah	r1, r3, r0
      ((uint16_t)src[1]    ) ;
60001b9a:	7b5f      	ldrb	r7, [r3, #13]
      | XferImage[StreamOffsetAddr]; //little endian, opposite of toU16
60001b9c:	b292      	uxth	r2, r2
      ((uint16_t)src[1]    ) ;
60001b9e:	f893 800b 	ldrb.w	r8, [r3, #11]
   uint16_t LoadAddress = (XferImage[StreamOffsetAddr + 1] << 8) 
60001ba2:	7849      	ldrb	r1, [r1, #1]
      | XferImage[StreamOffsetAddr]; //little endian, opposite of toU16
60001ba4:	5c9e      	ldrb	r6, [r3, r2]
   SendMsgPrintfln("SID Loc %04x:%04x, Play=%04x", LoadAddress, LoadAddress+XferSize, PlayAddress);
60001ba6:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 60001d7c <ParseSIDHeader(char const*)+0x330>
      | XferImage[StreamOffsetAddr]; //little endian, opposite of toU16
60001baa:	ea46 2601 	orr.w	r6, r6, r1, lsl #8
      ((uint16_t)src[0]<<8 ) + 
60001bae:	7b19      	ldrb	r1, [r3, #12]
60001bb0:	7a9a      	ldrb	r2, [r3, #10]
      ((uint16_t)src[1]    ) ;
60001bb2:	eb07 2701 	add.w	r7, r7, r1, lsl #8
   Printf_dbg("\nTR Code: %02x00:%02xff", IO1[rwRegCodeStartPage], IO1[rwRegCodeLastPage]);
60001bb6:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 60001d80 <ParseSIDHeader(char const*)+0x334>
      ((uint16_t)src[1]    ) ;
60001bba:	eb08 2802 	add.w	r8, r8, r2, lsl #8
   SendMsgPrintfln("SID Loc %04x:%04x, Play=%04x", LoadAddress, LoadAddress+XferSize, PlayAddress);
60001bbe:	f8d9 2000 	ldr.w	r2, [r9]
60001bc2:	b2bf      	uxth	r7, r7
60001bc4:	4631      	mov	r1, r6
60001bc6:	4432      	add	r2, r6
60001bc8:	4861      	ldr	r0, [pc, #388]	; (60001d50 <ParseSIDHeader(char const*)+0x304>)
60001bca:	463b      	mov	r3, r7
      ((uint16_t)src[1]    ) ;
60001bcc:	fa1f f888 	uxth.w	r8, r8
   SendMsgPrintfln("SID Loc %04x:%04x, Play=%04x", LoadAddress, LoadAddress+XferSize, PlayAddress);
60001bd0:	f003 fcce 	bl	60005570 <___Z15SendMsgPrintflnPKcz_veneer>
   Printf_dbg("\nTR Code: %02x00:%02xff", IO1[rwRegCodeStartPage], IO1[rwRegCodeLastPage]);
60001bd4:	f8da 3000 	ldr.w	r3, [sl]
   if (LoadAddress < 0xdf00 && LoadAddress+XferSize >= 0xde00)
60001bd8:	f5b6 4f5f 	cmp.w	r6, #57088	; 0xdf00
   Printf_dbg("\nTR Code: %02x00:%02xff", IO1[rwRegCodeStartPage], IO1[rwRegCodeLastPage]);
60001bdc:	7fda      	ldrb	r2, [r3, #31]
60001bde:	f893 2020 	ldrb.w	r2, [r3, #32]
   if (LoadAddress < 0xdf00 && LoadAddress+XferSize >= 0xde00)
60001be2:	d206      	bcs.n	60001bf2 <ParseSIDHeader(char const*)+0x1a6>
60001be4:	f8d9 2000 	ldr.w	r2, [r9]
60001be8:	4432      	add	r2, r6
60001bea:	f5b2 4f5e 	cmp.w	r2, #56832	; 0xde00
60001bee:	f080 80cb 	bcs.w	60001d88 <ParseSIDHeader(char const*)+0x33c>
   if (LoadAddress < (IO1[rwRegCodeLastPage]+1)*256 && LoadAddress+XferSize >= IO1[rwRegCodeStartPage]*256)
60001bf2:	f893 2020 	ldrb.w	r2, [r3, #32]
60001bf6:	3201      	adds	r2, #1
60001bf8:	ebb6 2f02 	cmp.w	r6, r2, lsl #8
60001bfc:	da07      	bge.n	60001c0e <ParseSIDHeader(char const*)+0x1c2>
60001bfe:	7fda      	ldrb	r2, [r3, #31]
60001c00:	f8d9 3000 	ldr.w	r3, [r9]
60001c04:	4433      	add	r3, r6
60001c06:	ebb3 2f02 	cmp.w	r3, r2, lsl #8
60001c0a:	f080 808e 	bcs.w	60001d2a <ParseSIDHeader(char const*)+0x2de>
   Printf_dbg("\nSpeed reg: %08x", toU32(XferImage+0x12));
60001c0e:	682b      	ldr	r3, [r5, #0]
   const char *VStandard[] =
60001c10:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
   const uint8_t CIATimer[4][2] =
60001c14:	494f      	ldr	r1, [pc, #316]	; (60001d54 <ParseSIDHeader(char const*)+0x308>)
      ((uint16_t)src[1]    ) ;
60001c16:	f893 2077 	ldrb.w	r2, [r3, #119]	; 0x77
   const char *VStandard[] =
60001c1a:	4b4f      	ldr	r3, [pc, #316]	; (60001d58 <ParseSIDHeader(char const*)+0x30c>)
   SendMsgPrintfln("SID Clock: %s", VStandard[SidFlags]);
60001c1c:	f002 0e0c 	and.w	lr, r2, #12
   SidFlags = (SidFlags >> 2) & 3;  //now just PAL/NTSC
60001c20:	f3c2 0281 	ubfx	r2, r2, #2, #2
   const uint8_t CIATimer[4][2] =
60001c24:	9108      	str	r1, [sp, #32]
   SidFlags = (SidFlags >> 2) & 3;  //now just PAL/NTSC
60001c26:	9204      	str	r2, [sp, #16]
   SendMsgPrintfln("SID Clock: %s", VStandard[SidFlags]);
60001c28:	f10e 0260 	add.w	r2, lr, #96	; 0x60
60001c2c:	eb0d 0e02 	add.w	lr, sp, r2
   const uint8_t CIATimer[4][2] =
60001c30:	4a4a      	ldr	r2, [pc, #296]	; (60001d5c <ParseSIDHeader(char const*)+0x310>)
60001c32:	9209      	str	r2, [sp, #36]	; 0x24
   const char *VStandard[] =
60001c34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
60001c36:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
   SendMsgPrintfln("SID Clock: %s", VStandard[SidFlags]);
60001c3a:	f85e bc38 	ldr.w	fp, [lr, #-56]
60001c3e:	4848      	ldr	r0, [pc, #288]	; (60001d60 <ParseSIDHeader(char const*)+0x314>)
60001c40:	4659      	mov	r1, fp
60001c42:	f003 fc95 	bl	60005570 <___Z15SendMsgPrintflnPKcz_veneer>
   strcat(StrSIDInfo, "Tech: "); //1+6
60001c46:	6823      	ldr	r3, [r4, #0]
60001c48:	4618      	mov	r0, r3
60001c4a:	9305      	str	r3, [sp, #20]
60001c4c:	f003 fc9c 	bl	60005588 <__strlen_veneer>
60001c50:	f8df c130 	ldr.w	ip, [pc, #304]	; 60001d84 <ParseSIDHeader(char const*)+0x338>
60001c54:	4686      	mov	lr, r0
60001c56:	9b05      	ldr	r3, [sp, #20]
60001c58:	f8dc 0000 	ldr.w	r0, [ip]
   sprintf(TechBuf, "%04x:%04x i=%04x p=%04x %s", LoadAddress, LoadAddress+(uint16_t)XferSize, InitAddress, PlayAddress, VStandard[SidFlags]);
60001c5c:	4632      	mov	r2, r6
60001c5e:	4941      	ldr	r1, [pc, #260]	; (60001d64 <ParseSIDHeader(char const*)+0x318>)
   strcat(StrSIDInfo, "Tech: "); //1+6
60001c60:	f843 000e 	str.w	r0, [r3, lr]
60001c64:	eb03 000e 	add.w	r0, r3, lr
   sprintf(TechBuf, "%04x:%04x i=%04x p=%04x %s", LoadAddress, LoadAddress+(uint16_t)XferSize, InitAddress, PlayAddress, VStandard[SidFlags]);
60001c68:	f8b9 3000 	ldrh.w	r3, [r9]
60001c6c:	4433      	add	r3, r6
   strcat(StrSIDInfo, "Tech: "); //1+6
60001c6e:	f8bc 6004 	ldrh.w	r6, [ip, #4]
60001c72:	8086      	strh	r6, [r0, #4]
60001c74:	f89c 6006 	ldrb.w	r6, [ip, #6]
60001c78:	7186      	strb	r6, [r0, #6]
   sprintf(TechBuf, "%04x:%04x i=%04x p=%04x %s", LoadAddress, LoadAddress+(uint16_t)XferSize, InitAddress, PlayAddress, VStandard[SidFlags]);
60001c7a:	a80e      	add	r0, sp, #56	; 0x38
60001c7c:	f8cd 8000 	str.w	r8, [sp]
60001c80:	e9cd 7b01 	strd	r7, fp, [sp, #4]
60001c84:	f003 fcb0 	bl	600055e8 <__sprintf_veneer>
   strcat(StrSIDInfo, TechBuf); //24 + 7 max ("Unknown")
60001c88:	a90e      	add	r1, sp, #56	; 0x38
60001c8a:	6820      	ldr	r0, [r4, #0]
60001c8c:	f003 fd10 	bl	600056b0 <__strcat_veneer>
   char MainsFreq[2] = {(IO1[wRegVid_TOD_Clks] & 2)==2 ? '6' : '5' , 0};
60001c90:	f8da 4000 	ldr.w	r4, [sl]
60001c94:	2300      	movs	r3, #0
   strcpy(StrMachineInfo, VStandard[(IO1[wRegVid_TOD_Clks] & 1)+1]); 
60001c96:	a918      	add	r1, sp, #96	; 0x60
   char MainsFreq[2] = {(IO1[wRegVid_TOD_Clks] & 2)==2 ? '6' : '5' , 0};
60001c98:	7f22      	ldrb	r2, [r4, #28]
60001c9a:	f88d 3019 	strb.w	r3, [sp, #25]
60001c9e:	f012 0f02 	tst.w	r2, #2
      VStandard[(IO1[wRegVid_TOD_Clks] & 1)+1], MainsFreq);
60001ca2:	7f22      	ldrb	r2, [r4, #28]
   strcpy(StrMachineInfo, VStandard[(IO1[wRegVid_TOD_Clks] & 1)+1]); 
60001ca4:	7f23      	ldrb	r3, [r4, #28]
60001ca6:	4830      	ldr	r0, [pc, #192]	; (60001d68 <ParseSIDHeader(char const*)+0x31c>)
60001ca8:	f003 0301 	and.w	r3, r3, #1
60001cac:	eb01 0383 	add.w	r3, r1, r3, lsl #2
60001cb0:	f853 1c34 	ldr.w	r1, [r3, #-52]
   char MainsFreq[2] = {(IO1[wRegVid_TOD_Clks] & 2)==2 ? '6' : '5' , 0};
60001cb4:	bf14      	ite	ne
60001cb6:	2336      	movne	r3, #54	; 0x36
60001cb8:	2335      	moveq	r3, #53	; 0x35
60001cba:	f88d 3018 	strb.w	r3, [sp, #24]
   strcpy(StrMachineInfo, VStandard[(IO1[wRegVid_TOD_Clks] & 1)+1]); 
60001cbe:	f003 fd0f 	bl	600056e0 <__stpcpy_veneer>
   strcat(StrMachineInfo, " Vid, "); 
60001cc2:	4a2a      	ldr	r2, [pc, #168]	; (60001d6c <ParseSIDHeader(char const*)+0x320>)
   strcpy(StrMachineInfo, VStandard[(IO1[wRegVid_TOD_Clks] & 1)+1]); 
60001cc4:	4603      	mov	r3, r0
   strcat(StrMachineInfo, MainsFreq); 
60001cc6:	a906      	add	r1, sp, #24
   strcat(StrMachineInfo, " Vid, "); 
60001cc8:	6810      	ldr	r0, [r2, #0]
60001cca:	8892      	ldrh	r2, [r2, #4]
60001ccc:	6018      	str	r0, [r3, #0]
   strcat(StrMachineInfo, MainsFreq); 
60001cce:	1d98      	adds	r0, r3, #6
   strcat(StrMachineInfo, " Vid, "); 
60001cd0:	809a      	strh	r2, [r3, #4]
   strcat(StrMachineInfo, MainsFreq); 
60001cd2:	f003 fcc9 	bl	60005668 <__strcpy_veneer>
   SidFlags = (IO1[wRegVid_TOD_Clks] & 1) | (SidFlags & 2); //now selects from CIATimer
60001cd6:	7f23      	ldrb	r3, [r4, #28]
60001cd8:	9a04      	ldr	r2, [sp, #16]
60001cda:	f003 0301 	and.w	r3, r3, #1
60001cde:	f002 0102 	and.w	r1, r2, #2
   Printf_dbg("\relocStartPage: %02x", XferImage[0x78]);
60001ce2:	682a      	ldr	r2, [r5, #0]
   Printf_dbg("\nCIA Timer: %02x%02x", CIATimer[SidFlags][0], CIATimer[SidFlags][1]);
60001ce4:	430b      	orrs	r3, r1
60001ce6:	a918      	add	r1, sp, #96	; 0x60
60001ce8:	eb01 0343 	add.w	r3, r1, r3, lsl #1
60001cec:	f813 1c40 	ldrb.w	r1, [r3, #-64]
60001cf0:	f813 3c3f 	ldrb.w	r3, [r3, #-63]
   IO1[rRegSIDDefSpeedHi] = CIATimer[SidFlags][0];
60001cf4:	76a1      	strb	r1, [r4, #26]
   IO1[rRegSIDDefSpeedLo] = CIATimer[SidFlags][1];  
60001cf6:	76e3      	strb	r3, [r4, #27]
   IO1[rRegStrAvailable] = 0xff; //transfer start flag, set last
60001cf8:	23ff      	movs	r3, #255	; 0xff
   IO1[rRegSIDInitHi] = XferImage[0x0A];
60001cfa:	7a91      	ldrb	r1, [r2, #10]
60001cfc:	75a1      	strb	r1, [r4, #22]
   IO1[rRegSIDInitLo] = XferImage[0x0B];
60001cfe:	7ad1      	ldrb	r1, [r2, #11]
60001d00:	75e1      	strb	r1, [r4, #23]
   IO1[rRegSIDPlayHi] = XferImage[0x0C];
60001d02:	7b11      	ldrb	r1, [r2, #12]
60001d04:	7621      	strb	r1, [r4, #24]
   IO1[rRegSIDPlayLo] = XferImage[0x0D];
60001d06:	7b52      	ldrb	r2, [r2, #13]
60001d08:	7662      	strb	r2, [r4, #25]
   IO1[rRegStrAvailable] = 0xff; //transfer start flag, set last
60001d0a:	70a3      	strb	r3, [r4, #2]
}
60001d0c:	b019      	add	sp, #100	; 0x64
60001d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      SIDLoadError("Unexpected Data Offset");
60001d12:	4817      	ldr	r0, [pc, #92]	; (60001d70 <ParseSIDHeader(char const*)+0x324>)
}
60001d14:	b019      	add	sp, #100	; 0x64
60001d16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      SIDLoadError("Mem conflict w/ TR app");
60001d1a:	f7ff be75 	b.w	60001a08 <SIDLoadError(char const*)>
      SIDLoadError("Unexpected Version");
60001d1e:	4815      	ldr	r0, [pc, #84]	; (60001d74 <ParseSIDHeader(char const*)+0x328>)
}
60001d20:	b019      	add	sp, #100	; 0x64
60001d22:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      SIDLoadError("Mem conflict w/ TR app");
60001d26:	f7ff be6f 	b.w	60001a08 <SIDLoadError(char const*)>
60001d2a:	4813      	ldr	r0, [pc, #76]	; (60001d78 <ParseSIDHeader(char const*)+0x32c>)
60001d2c:	e6f8      	b.n	60001b20 <ParseSIDHeader(char const*)+0xd4>
60001d2e:	bf00      	nop
60001d30:	2000a890 	.word	0x2000a890
60001d34:	2005dfe0 	.word	0x2005dfe0
60001d38:	2005dfe4 	.word	0x2005dfe4
60001d3c:	2000a7a0 	.word	0x2000a7a0
60001d40:	2000a7a8 	.word	0x2000a7a8
60001d44:	2000a7b0 	.word	0x2000a7b0
60001d48:	2000a7c8 	.word	0x2000a7c8
60001d4c:	2005e528 	.word	0x2005e528
60001d50:	2000a808 	.word	0x2000a808
60001d54:	b24fc74c 	.word	0xb24fc74c
60001d58:	20000398 	.word	0x20000398
60001d5c:	c6425840 	.word	0xc6425840
60001d60:	2000a854 	.word	0x2000a854
60001d64:	2000a86c 	.word	0x2000a86c
60001d68:	2005dfd0 	.word	0x2005dfd0
60001d6c:	2000a888 	.word	0x2000a888
60001d70:	2000a7f0 	.word	0x2000a7f0
60001d74:	2000a7dc 	.word	0x2000a7dc
60001d78:	2000a83c 	.word	0x2000a83c
60001d7c:	2005dfe8 	.word	0x2005dfe8
60001d80:	2000dae4 	.word	0x2000dae4
60001d84:	2000a864 	.word	0x2000a864
      SIDLoadError("IO1 mem conflict");
60001d88:	4800      	ldr	r0, [pc, #0]	; (60001d8c <ParseSIDHeader(char const*)+0x340>)
60001d8a:	e6c9      	b.n	60001b20 <ParseSIDHeader(char const*)+0xd4>
60001d8c:	2000a828 	.word	0x2000a828

60001d90 <LoadMainSIDforXfer()>:
   }
}

FLASHMEM void LoadMainSIDforXfer()
{
   XferImage = RAM_Image; 
60001d90:	4807      	ldr	r0, [pc, #28]	; (60001db0 <LoadMainSIDforXfer()+0x20>)
   XferSize  = sizeof(SIDforBackground); 
60001d92:	f241 3297 	movw	r2, #5015	; 0x1397
   XferImage = RAM_Image; 
60001d96:	4907      	ldr	r1, [pc, #28]	; (60001db4 <LoadMainSIDforXfer()+0x24>)
{
60001d98:	b508      	push	{r3, lr}
   XferSize  = sizeof(SIDforBackground); 
60001d9a:	4b07      	ldr	r3, [pc, #28]	; (60001db8 <LoadMainSIDforXfer()+0x28>)
   XferImage = RAM_Image; 
60001d9c:	6008      	str	r0, [r1, #0]
   memcpy(XferImage, SIDforBackground, XferSize);
60001d9e:	4907      	ldr	r1, [pc, #28]	; (60001dbc <LoadMainSIDforXfer()+0x2c>)
   XferSize  = sizeof(SIDforBackground); 
60001da0:	601a      	str	r2, [r3, #0]
   memcpy(XferImage, SIDforBackground, XferSize);
60001da2:	f003 fc15 	bl	600055d0 <__memcpy_veneer>
   ParseSIDHeader("Main Background SID"); //assuming it passes for buit-in
60001da6:	4806      	ldr	r0, [pc, #24]	; (60001dc0 <LoadMainSIDforXfer()+0x30>)
}
60001da8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   ParseSIDHeader("Main Background SID"); //assuming it passes for buit-in
60001dac:	f7ff be4e 	b.w	60001a4c <ParseSIDHeader(char const*)>
60001db0:	2000daf4 	.word	0x2000daf4
60001db4:	2005dfe4 	.word	0x2005dfe4
60001db8:	2005dfe8 	.word	0x2005dfe8
60001dbc:	200003a8 	.word	0x200003a8
60001dc0:	2000a894 	.word	0x2000a894

60001dc4 <GetStorageDevice(unsigned long)>:
    }
    return true;
}

FLASHMEM FS* GetStorageDevice(uint32_t storageType)
{
60001dc4:	b538      	push	{r3, r4, r5, lr}
    //if (!storageType) return &firstPartition;

    if (!SD.begin(BUILTIN_SDCARD))
60001dc6:	21fe      	movs	r1, #254	; 0xfe
{
60001dc8:	4605      	mov	r5, r0
    if (!SD.begin(BUILTIN_SDCARD))
60001dca:	480a      	ldr	r0, [pc, #40]	; (60001df4 <GetStorageDevice(unsigned long)+0x30>)
60001dcc:	f003 fc50 	bl	60005670 <___ZN7SDClass5beginEh_veneer>
60001dd0:	b108      	cbz	r0, 60001dd6 <GetStorageDevice(unsigned long)+0x12>
    {
        SendU16(FailToken);
        Serial.printf("Specified storage device was not found: %u\n", storageType);
        return nullptr;
    }
    return &SD;
60001dd2:	4808      	ldr	r0, [pc, #32]	; (60001df4 <GetStorageDevice(unsigned long)+0x30>)
}
60001dd4:	bd38      	pop	{r3, r4, r5, pc}
60001dd6:	4604      	mov	r4, r0
60001dd8:	207f      	movs	r0, #127	; 0x7f
60001dda:	f003 fc3d 	bl	60005658 <__usb_serial_putchar_veneer>
60001dde:	209b      	movs	r0, #155	; 0x9b
60001de0:	f003 fc3a 	bl	60005658 <__usb_serial_putchar_veneer>
        Serial.printf("Specified storage device was not found: %u\n", storageType);
60001de4:	462a      	mov	r2, r5
60001de6:	4904      	ldr	r1, [pc, #16]	; (60001df8 <GetStorageDevice(unsigned long)+0x34>)
60001de8:	4804      	ldr	r0, [pc, #16]	; (60001dfc <GetStorageDevice(unsigned long)+0x38>)
60001dea:	f003 fc0d 	bl	60005608 <___ZN5Print6printfEPKcz_veneer>
        return nullptr;
60001dee:	4620      	mov	r0, r4
}
60001df0:	bd38      	pop	{r3, r4, r5, pc}
60001df2:	bf00      	nop
60001df4:	2005daf4 	.word	0x2005daf4
60001df8:	2000a8a8 	.word	0x2000a8a8
60001dfc:	2000bfd8 	.word	0x2000bfd8

60001e00 <GetFileStream(unsigned long, char*, FS*, File&)>:

FLASHMEM bool GetFileStream(uint32_t SD_nUSB, char FileNamePath[], FS* sourceFS, File& file)
{
60001e00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
60001e04:	4614      	mov	r4, r2
    if (sourceFS->exists(FileNamePath))
60001e06:	6812      	ldr	r2, [r2, #0]
{
60001e08:	4607      	mov	r7, r0
60001e0a:	461d      	mov	r5, r3
60001e0c:	4882      	ldr	r0, [pc, #520]	; (60002018 <GetFileStream(unsigned long, char*, FS*, File&)+0x218>)
60001e0e:	b09d      	sub	sp, #116	; 0x74
    if (sourceFS->exists(FileNamePath))
60001e10:	6853      	ldr	r3, [r2, #4]
{
60001e12:	460e      	mov	r6, r1
60001e14:	4283      	cmp	r3, r0
60001e16:	f040 80d3 	bne.w	60001fc0 <GetFileStream(unsigned long, char*, FS*, File&)+0x1c0>
   * \param[in] path Path of the file to be tested for.
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return m_fVol ? m_fVol->exists(path) :
60001e1a:	f8d4 3484 	ldr.w	r3, [r4, #1156]	; 0x484
60001e1e:	2b00      	cmp	r3, #0
60001e20:	f000 809c 	beq.w	60001f5c <GetFileStream(unsigned long, char*, FS*, File&)+0x15c>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
60001e24:	4619      	mov	r1, r3
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
60001e26:	2300      	movs	r3, #0
60001e28:	4632      	mov	r2, r6
60001e2a:	a808      	add	r0, sp, #32
60001e2c:	9308      	str	r3, [sp, #32]
60001e2e:	f003 fbcb 	bl	600055c8 <___ZN7FatFile4openEP9FatVolumePKci_veneer>
    if (sourceFS->exists(FileNamePath))
60001e32:	2800      	cmp	r0, #0
60001e34:	f040 809f 	bne.w	60001f76 <GetFileStream(unsigned long, char*, FS*, File&)+0x176>
    {
        SendU16(FailToken);
        Serial.printf("File already exists.\n");
        return false;
    }
    file = sourceFS->open(FileNamePath, FILE_WRITE);
60001e38:	6822      	ldr	r2, [r4, #0]
60001e3a:	f8d2 8000 	ldr.w	r8, [r2]
60001e3e:	4b77      	ldr	r3, [pc, #476]	; (6000201c <GetFileStream(unsigned long, char*, FS*, File&)+0x21c>)
60001e40:	4598      	cmp	r8, r3
60001e42:	f040 80d0 	bne.w	60001fe6 <GetFileStream(unsigned long, char*, FS*, File&)+0x1e6>
	bool begin(uint8_t csPin = 10);
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
60001e46:	f244 2302 	movw	r3, #16898	; 0x4202
60001e4a:	1d21      	adds	r1, r4, #4
60001e4c:	4632      	mov	r2, r6
60001e4e:	a808      	add	r0, sp, #32
60001e50:	f003 fc3e 	bl	600056d0 <___ZN8FsVolume4openEPKci_veneer>
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
60001e54:	9b1a      	ldr	r3, [sp, #104]	; 0x68
60001e56:	2b00      	cmp	r3, #0
60001e58:	f000 80b5 	beq.w	60001fc6 <GetFileStream(unsigned long, char*, FS*, File&)+0x1c6>
		if (file) return File(new SDFile(file));
60001e5c:	205c      	movs	r0, #92	; 0x5c
// FileImpl instances are automatically deleted when the last referencing
// File is closed or goes out of scope.  The refcount variable is meant to
// be maintained by File class instances, never access by FileImpl functions.
// The FileImpl functions are meant to be called only by use of File instances.
//
class FileImpl {
60001e5e:	f04f 0800 	mov.w	r8, #0
60001e62:	f003 fc2d 	bl	600056c0 <___Znwj_veneer>
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
60001e66:	9b09      	ldr	r3, [sp, #36]	; 0x24
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
60001e68:	f10d 0930 	add.w	r9, sp, #48	; 0x30
60001e6c:	4604      	mov	r4, r0
60001e6e:	60c3      	str	r3, [r0, #12]
60001e70:	3018      	adds	r0, #24
#include <inttypes.h>
#include "Print.h"

enum LookaheadMode {SKIP_ALL, SKIP_NONE, SKIP_WHITESPACE};

class Stream : public Print
60001e72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
60001e74:	4649      	mov	r1, r9
60001e76:	f840 8c14 	str.w	r8, [r0, #-20]
60001e7a:	f840 3c08 	str.w	r3, [r0, #-8]
60001e7e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
60001e82:	f800 3c04 	strb.w	r3, [r0, #-4]
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
60001e86:	4b66      	ldr	r3, [pc, #408]	; (60002020 <GetFileStream(unsigned long, char*, FS*, File&)+0x220>)
60001e88:	f840 3c18 	str.w	r3, [r0, #-24]
60001e8c:	4b65      	ldr	r3, [pc, #404]	; (60002024 <GetFileStream(unsigned long, char*, FS*, File&)+0x224>)
60001e8e:	f840 3c10 	str.w	r3, [r0, #-16]
60001e92:	f003 fbf1 	bl	60005678 <___ZN10FsBaseFileC2ERKS__veneer>
	// functions derived from FS::open() and FileImpl::openNextFile().
	// Not normally called used from ordinary programs or libraries
	// which only access files.
	File(FileImpl *file) {
		f = file;
		if (f) f->refcount++;
60001e96:	6863      	ldr	r3, [r4, #4]
60001e98:	f8c4 8058 	str.w	r8, [r4, #88]	; 0x58
60001e9c:	3301      	adds	r3, #1
{
  public:
	constexpr Print() : write_error(0) {}
60001e9e:	f8cd 8010 	str.w	r8, [sp, #16]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
60001ea2:	f88d 8018 	strb.w	r8, [sp, #24]
60001ea6:	6063      	str	r3, [r4, #4]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
60001ea8:	4b5f      	ldr	r3, [pc, #380]	; (60002028 <GetFileStream(unsigned long, char*, FS*, File&)+0x228>)
		f = file;
60001eaa:	9407      	str	r4, [sp, #28]
60001eac:	60a3      	str	r3, [r4, #8]
60001eae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
60001eb2:	9305      	str	r3, [sp, #20]
	File(FileImpl *file) {
60001eb4:	4b5d      	ldr	r3, [pc, #372]	; (6000202c <GetFileStream(unsigned long, char*, FS*, File&)+0x22c>)
60001eb6:	9303      	str	r3, [sp, #12]
60001eb8:	4b5d      	ldr	r3, [pc, #372]	; (60002030 <GetFileStream(unsigned long, char*, FS*, File&)+0x230>)
  ~FsBaseFile() {close();}
60001eba:	4648      	mov	r0, r9
60001ebc:	9308      	str	r3, [sp, #32]
60001ebe:	f003 fb53 	bl	60005568 <___ZN10FsBaseFile5closeEv_veneer>
	}
#ifdef FILE_USE_MOVE
	// Move assignment.
	File& operator = (File&& file) {
		//Serial.println("File move assignment");
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
60001ec2:	692c      	ldr	r4, [r5, #16]
60001ec4:	2c00      	cmp	r4, #0
60001ec6:	d03a      	beq.n	60001f3e <GetFileStream(unsigned long, char*, FS*, File&)+0x13e>
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	using Print::write;
private:
	void dec_refcount() {
		if (--(f->refcount) == 0) {
60001ec8:	6863      	ldr	r3, [r4, #4]
60001eca:	3b01      	subs	r3, #1
60001ecc:	6063      	str	r3, [r4, #4]
60001ece:	9301      	str	r3, [sp, #4]
60001ed0:	2b00      	cmp	r3, #0
60001ed2:	d134      	bne.n	60001f3e <GetFileStream(unsigned long, char*, FS*, File&)+0x13e>
			f->close();
60001ed4:	6822      	ldr	r2, [r4, #0]
60001ed6:	4957      	ldr	r1, [pc, #348]	; (60002034 <GetFileStream(unsigned long, char*, FS*, File&)+0x234>)
60001ed8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
60001eda:	428a      	cmp	r2, r1
60001edc:	f040 8092 	bne.w	60002004 <GetFileStream(unsigned long, char*, FS*, File&)+0x204>
		if (filename) {
60001ee0:	6da0      	ldr	r0, [r4, #88]	; 0x58
60001ee2:	b118      	cbz	r0, 60001eec <GetFileStream(unsigned long, char*, FS*, File&)+0xec>
			free(filename);
60001ee4:	f003 fb38 	bl	60005558 <__free_veneer>
			filename = nullptr;
60001ee8:	9b01      	ldr	r3, [sp, #4]
60001eea:	65a3      	str	r3, [r4, #88]	; 0x58
  bool isOpen() const {return m_fFile || m_xFile;}
60001eec:	6d23      	ldr	r3, [r4, #80]	; 0x50
60001eee:	2b00      	cmp	r3, #0
60001ef0:	f000 8083 	beq.w	60001ffa <GetFileStream(unsigned long, char*, FS*, File&)+0x1fa>
			sdfatfile.close();
60001ef4:	f104 0018 	add.w	r0, r4, #24
60001ef8:	f003 fb36 	bl	60005568 <___ZN10FsBaseFile5closeEv_veneer>
			delete f;
60001efc:	692c      	ldr	r4, [r5, #16]
60001efe:	b1f4      	cbz	r4, 60001f3e <GetFileStream(unsigned long, char*, FS*, File&)+0x13e>
60001f00:	6823      	ldr	r3, [r4, #0]
60001f02:	4a4d      	ldr	r2, [pc, #308]	; (60002038 <GetFileStream(unsigned long, char*, FS*, File&)+0x238>)
60001f04:	685b      	ldr	r3, [r3, #4]
60001f06:	4293      	cmp	r3, r2
60001f08:	f040 8083 	bne.w	60002012 <GetFileStream(unsigned long, char*, FS*, File&)+0x212>
	virtual ~SDFile(void) {
60001f0c:	4b44      	ldr	r3, [pc, #272]	; (60002020 <GetFileStream(unsigned long, char*, FS*, File&)+0x220>)
		if (filename) {
60001f0e:	6da0      	ldr	r0, [r4, #88]	; 0x58
	virtual ~SDFile(void) {
60001f10:	6023      	str	r3, [r4, #0]
		if (filename) {
60001f12:	b118      	cbz	r0, 60001f1c <GetFileStream(unsigned long, char*, FS*, File&)+0x11c>
			free(filename);
60001f14:	f003 fb20 	bl	60005558 <__free_veneer>
			filename = nullptr;
60001f18:	2300      	movs	r3, #0
60001f1a:	65a3      	str	r3, [r4, #88]	; 0x58
60001f1c:	6d23      	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
60001f1e:	f104 0818 	add.w	r8, r4, #24
60001f22:	2b00      	cmp	r3, #0
60001f24:	d071      	beq.n	6000200a <GetFileStream(unsigned long, char*, FS*, File&)+0x20a>
60001f26:	4640      	mov	r0, r8
60001f28:	f003 fb1e 	bl	60005568 <___ZN10FsBaseFile5closeEv_veneer>
60001f2c:	4b40      	ldr	r3, [pc, #256]	; (60002030 <GetFileStream(unsigned long, char*, FS*, File&)+0x230>)
  ~FsBaseFile() {close();}
60001f2e:	4640      	mov	r0, r8
60001f30:	60a3      	str	r3, [r4, #8]
60001f32:	f003 fb19 	bl	60005568 <___ZN10FsBaseFile5closeEv_veneer>
	}
60001f36:	215c      	movs	r1, #92	; 0x5c
60001f38:	4620      	mov	r0, r4
60001f3a:	f003 fbb1 	bl	600056a0 <___ZdlPvj_veneer>
		f = file.f;
60001f3e:	9807      	ldr	r0, [sp, #28]
60001f40:	6128      	str	r0, [r5, #16]
		return (f) ? f->isOpen() : false;
60001f42:	b348      	cbz	r0, 60001f98 <GetFileStream(unsigned long, char*, FS*, File&)+0x198>
60001f44:	6802      	ldr	r2, [r0, #0]
60001f46:	493d      	ldr	r1, [pc, #244]	; (6000203c <GetFileStream(unsigned long, char*, FS*, File&)+0x23c>)
60001f48:	6b12      	ldr	r2, [r2, #48]	; 0x30
60001f4a:	428a      	cmp	r2, r1
60001f4c:	d121      	bne.n	60001f92 <GetFileStream(unsigned long, char*, FS*, File&)+0x192>
  bool isOpen() const {return m_fFile || m_xFile;}
60001f4e:	6d02      	ldr	r2, [r0, #80]	; 0x50
60001f50:	2a00      	cmp	r2, #0
60001f52:	d04e      	beq.n	60001ff2 <GetFileStream(unsigned long, char*, FS*, File&)+0x1f2>
    {
        SendU16(FailToken);
        Serial.printf("Could not open for write: %s:%s\n", (SD_nUSB ? "SD" : "USB"), FileNamePath);
        return false;
    }
    return true;
60001f54:	2001      	movs	r0, #1
}
60001f56:	b01d      	add	sp, #116	; 0x74
60001f58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
60001f5c:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
           m_xVol ? m_xVol->exists(path) : false;
60001f60:	2900      	cmp	r1, #0
60001f62:	f43f af6a 	beq.w	60001e3a <GetFileStream(unsigned long, char*, FS*, File&)+0x3a>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
60001f66:	4632      	mov	r2, r6
60001f68:	a808      	add	r0, sp, #32
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
60001f6a:	9314      	str	r3, [sp, #80]	; 0x50
60001f6c:	f003 fbc0 	bl	600056f0 <___ZN9ExFatFile4openEP11ExFatVolumePKci_veneer>
60001f70:	2800      	cmp	r0, #0
60001f72:	f43f af61 	beq.w	60001e38 <GetFileStream(unsigned long, char*, FS*, File&)+0x38>
60001f76:	207f      	movs	r0, #127	; 0x7f
60001f78:	f003 fb6e 	bl	60005658 <__usb_serial_putchar_veneer>
60001f7c:	209b      	movs	r0, #155	; 0x9b
60001f7e:	f003 fb6b 	bl	60005658 <__usb_serial_putchar_veneer>
        Serial.printf("File already exists.\n");
60001f82:	492f      	ldr	r1, [pc, #188]	; (60002040 <GetFileStream(unsigned long, char*, FS*, File&)+0x240>)
60001f84:	482f      	ldr	r0, [pc, #188]	; (60002044 <GetFileStream(unsigned long, char*, FS*, File&)+0x244>)
60001f86:	f003 fb3f 	bl	60005608 <___ZN5Print6printfEPKcz_veneer>
        return false;
60001f8a:	2000      	movs	r0, #0
}
60001f8c:	b01d      	add	sp, #116	; 0x74
60001f8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
60001f92:	4790      	blx	r2
60001f94:	2800      	cmp	r0, #0
60001f96:	d1dd      	bne.n	60001f54 <GetFileStream(unsigned long, char*, FS*, File&)+0x154>
60001f98:	207f      	movs	r0, #127	; 0x7f
60001f9a:	f003 fb5d 	bl	60005658 <__usb_serial_putchar_veneer>
60001f9e:	209b      	movs	r0, #155	; 0x9b
60001fa0:	f003 fb5a 	bl	60005658 <__usb_serial_putchar_veneer>
        Serial.printf("Could not open for write: %s:%s\n", (SD_nUSB ? "SD" : "USB"), FileNamePath);
60001fa4:	4828      	ldr	r0, [pc, #160]	; (60002048 <GetFileStream(unsigned long, char*, FS*, File&)+0x248>)
60001fa6:	4a29      	ldr	r2, [pc, #164]	; (6000204c <GetFileStream(unsigned long, char*, FS*, File&)+0x24c>)
60001fa8:	4633      	mov	r3, r6
60001faa:	4929      	ldr	r1, [pc, #164]	; (60002050 <GetFileStream(unsigned long, char*, FS*, File&)+0x250>)
60001fac:	2f00      	cmp	r7, #0
60001fae:	bf18      	it	ne
60001fb0:	4602      	movne	r2, r0
60001fb2:	4824      	ldr	r0, [pc, #144]	; (60002044 <GetFileStream(unsigned long, char*, FS*, File&)+0x244>)
60001fb4:	f003 fb28 	bl	60005608 <___ZN5Print6printfEPKcz_veneer>
        return false;
60001fb8:	2000      	movs	r0, #0
}
60001fba:	b01d      	add	sp, #116	; 0x74
60001fbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (sourceFS->exists(FileNamePath))
60001fc0:	4620      	mov	r0, r4
60001fc2:	4798      	blx	r3
60001fc4:	e735      	b.n	60001e32 <GetFileStream(unsigned long, char*, FS*, File&)+0x32>
60001fc6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
60001fc8:	2b00      	cmp	r3, #0
60001fca:	f47f af47 	bne.w	60001e5c <GetFileStream(unsigned long, char*, FS*, File&)+0x5c>
60001fce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
60001fd2:	9304      	str	r3, [sp, #16]
60001fd4:	f88d 3018 	strb.w	r3, [sp, #24]
60001fd8:	f10d 0930 	add.w	r9, sp, #48	; 0x30
	constexpr File() : f(nullptr) { }
60001fdc:	9307      	str	r3, [sp, #28]
60001fde:	4b13      	ldr	r3, [pc, #76]	; (6000202c <GetFileStream(unsigned long, char*, FS*, File&)+0x22c>)
60001fe0:	9205      	str	r2, [sp, #20]
60001fe2:	9303      	str	r3, [sp, #12]
60001fe4:	e768      	b.n	60001eb8 <GetFileStream(unsigned long, char*, FS*, File&)+0xb8>
    file = sourceFS->open(FileNamePath, FILE_WRITE);
60001fe6:	4621      	mov	r1, r4
60001fe8:	2301      	movs	r3, #1
60001fea:	4632      	mov	r2, r6
60001fec:	a803      	add	r0, sp, #12
60001fee:	47c0      	blx	r8
60001ff0:	e767      	b.n	60001ec2 <GetFileStream(unsigned long, char*, FS*, File&)+0xc2>
60001ff2:	6d43      	ldr	r3, [r0, #84]	; 0x54
60001ff4:	2b00      	cmp	r3, #0
60001ff6:	d1ad      	bne.n	60001f54 <GetFileStream(unsigned long, char*, FS*, File&)+0x154>
60001ff8:	e7ce      	b.n	60001f98 <GetFileStream(unsigned long, char*, FS*, File&)+0x198>
60001ffa:	6d63      	ldr	r3, [r4, #84]	; 0x54
60001ffc:	2b00      	cmp	r3, #0
60001ffe:	f47f af79 	bne.w	60001ef4 <GetFileStream(unsigned long, char*, FS*, File&)+0xf4>
60002002:	e77b      	b.n	60001efc <GetFileStream(unsigned long, char*, FS*, File&)+0xfc>
			f->close();
60002004:	4620      	mov	r0, r4
60002006:	4790      	blx	r2
60002008:	e778      	b.n	60001efc <GetFileStream(unsigned long, char*, FS*, File&)+0xfc>
6000200a:	6d63      	ldr	r3, [r4, #84]	; 0x54
6000200c:	2b00      	cmp	r3, #0
6000200e:	d18a      	bne.n	60001f26 <GetFileStream(unsigned long, char*, FS*, File&)+0x126>
60002010:	e78c      	b.n	60001f2c <GetFileStream(unsigned long, char*, FS*, File&)+0x12c>
			delete f;
60002012:	4620      	mov	r0, r4
60002014:	4798      	blx	r3
60002016:	e792      	b.n	60001f3e <GetFileStream(unsigned long, char*, FS*, File&)+0x13e>
60002018:	0000188d 	.word	0x0000188d
6000201c:	00000e91 	.word	0x00000e91
60002020:	20003358 	.word	0x20003358
60002024:	200033b4 	.word	0x200033b4
60002028:	20003334 	.word	0x20003334
6000202c:	20003308 	.word	0x20003308
60002030:	20003240 	.word	0x20003240
60002034:	00000e69 	.word	0x00000e69
60002038:	00001c55 	.word	0x00001c55
6000203c:	000004c5 	.word	0x000004c5
60002040:	2000a8dc 	.word	0x2000a8dc
60002044:	2000bfd8 	.word	0x2000bfd8
60002048:	2000a8d4 	.word	0x2000a8d4
6000204c:	2000a8d8 	.word	0x2000a8d8
60002050:	2000a8f4 	.word	0x2000a8f4

60002054 <EnsureDirectory(char const*, FS&)>:

FLASHMEM bool EnsureDirectory(const char* path, FS& fs)
{
60002054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
60002058:	4606      	mov	r6, r0
6000205a:	b08e      	sub	sp, #56	; 0x38
6000205c:	460f      	mov	r7, r1
    const char* lastSlash = strrchr(path, '/');
6000205e:	212f      	movs	r1, #47	; 0x2f
60002060:	f003 fb2a 	bl	600056b8 <__strrchr_veneer>

    if (lastSlash == path || lastSlash == nullptr)
60002064:	2800      	cmp	r0, #0
60002066:	bf18      	it	ne
60002068:	4286      	cmpne	r6, r0
6000206a:	bf0c      	ite	eq
6000206c:	2501      	moveq	r5, #1
6000206e:	2500      	movne	r5, #0
60002070:	d015      	beq.n	6000209e <EnsureDirectory(char const*, FS&)+0x4a>
    {
        return true;
    }

    char prevChar = *lastSlash;
60002072:	f890 8000 	ldrb.w	r8, [r0]
60002076:	4604      	mov	r4, r0
    *(char*)lastSlash = '\0';
60002078:	7005      	strb	r5, [r0, #0]

    bool result = true;

    if (!fs.exists(path))
6000207a:	683b      	ldr	r3, [r7, #0]
6000207c:	4a26      	ldr	r2, [pc, #152]	; (60002118 <EnsureDirectory(char const*, FS&)+0xc4>)
6000207e:	685b      	ldr	r3, [r3, #4]
60002080:	4293      	cmp	r3, r2
60002082:	d137      	bne.n	600020f4 <EnsureDirectory(char const*, FS&)+0xa0>
    return m_fVol ? m_fVol->exists(path) :
60002084:	f8d7 1484 	ldr.w	r1, [r7, #1156]	; 0x484
60002088:	b169      	cbz	r1, 600020a6 <EnsureDirectory(char const*, FS&)+0x52>
6000208a:	462b      	mov	r3, r5
6000208c:	4632      	mov	r2, r6
6000208e:	4668      	mov	r0, sp
60002090:	9500      	str	r5, [sp, #0]
60002092:	f003 fa99 	bl	600055c8 <___ZN7FatFile4openEP9FatVolumePKci_veneer>
           m_xVol ? m_xVol->exists(path) : false;
60002096:	b180      	cbz	r0, 600020ba <EnsureDirectory(char const*, FS&)+0x66>
    bool result = true;
60002098:	2501      	movs	r5, #1
        else
        {
            result = fs.mkdir(path);
        }
    }
    *(char*)lastSlash = prevChar;
6000209a:	f884 8000 	strb.w	r8, [r4]

    return result;
}
6000209e:	4628      	mov	r0, r5
600020a0:	b00e      	add	sp, #56	; 0x38
600020a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
600020a6:	f8d7 1488 	ldr.w	r1, [r7, #1160]	; 0x488
600020aa:	b131      	cbz	r1, 600020ba <EnsureDirectory(char const*, FS&)+0x66>
600020ac:	462b      	mov	r3, r5
600020ae:	4632      	mov	r2, r6
600020b0:	4668      	mov	r0, sp
600020b2:	950c      	str	r5, [sp, #48]	; 0x30
600020b4:	f003 fb1c 	bl	600056f0 <___ZN9ExFatFile4openEP11ExFatVolumePKci_veneer>
600020b8:	e7ed      	b.n	60002096 <EnsureDirectory(char const*, FS&)+0x42>
        if (!EnsureDirectory(path, fs))
600020ba:	4639      	mov	r1, r7
600020bc:	4630      	mov	r0, r6
600020be:	f7ff ffc9 	bl	60002054 <EnsureDirectory(char const*, FS&)>
600020c2:	b1a8      	cbz	r0, 600020f0 <EnsureDirectory(char const*, FS&)+0x9c>
            result = fs.mkdir(path);
600020c4:	683b      	ldr	r3, [r7, #0]
600020c6:	4a15      	ldr	r2, [pc, #84]	; (6000211c <EnsureDirectory(char const*, FS&)+0xc8>)
600020c8:	689b      	ldr	r3, [r3, #8]
600020ca:	4293      	cmp	r3, r2
600020cc:	d10d      	bne.n	600020ea <EnsureDirectory(char const*, FS&)+0x96>
   * \param[in] pFlag Create missing parent directories if true.
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char *path, bool pFlag = true) {
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
600020ce:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
600020d2:	b19b      	cbz	r3, 600020fc <EnsureDirectory(char const*, FS&)+0xa8>
600020d4:	2000      	movs	r0, #0
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
600020d6:	f503 6189 	add.w	r1, r3, #1096	; 0x448
600020da:	4632      	mov	r2, r6
600020dc:	2301      	movs	r3, #1
600020de:	9000      	str	r0, [sp, #0]
600020e0:	4668      	mov	r0, sp
600020e2:	f003 fa99 	bl	60005618 <___ZN7FatFile5mkdirEPS_PKcb_veneer>
600020e6:	4605      	mov	r5, r0
600020e8:	e7d7      	b.n	6000209a <EnsureDirectory(char const*, FS&)+0x46>
600020ea:	4631      	mov	r1, r6
600020ec:	4638      	mov	r0, r7
600020ee:	4798      	blx	r3
600020f0:	4605      	mov	r5, r0
600020f2:	e7d2      	b.n	6000209a <EnsureDirectory(char const*, FS&)+0x46>
    if (!fs.exists(path))
600020f4:	4631      	mov	r1, r6
600020f6:	4638      	mov	r0, r7
600020f8:	4798      	blx	r3
600020fa:	e7cc      	b.n	60002096 <EnsureDirectory(char const*, FS&)+0x42>
600020fc:	f8d7 1488 	ldr.w	r1, [r7, #1160]	; 0x488
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
60002100:	2900      	cmp	r1, #0
60002102:	d0ca      	beq.n	6000209a <EnsureDirectory(char const*, FS&)+0x46>
60002104:	930c      	str	r3, [sp, #48]	; 0x30
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
60002106:	4632      	mov	r2, r6
60002108:	f501 6189 	add.w	r1, r1, #1096	; 0x448
6000210c:	2301      	movs	r3, #1
6000210e:	4668      	mov	r0, sp
60002110:	f003 fa1e 	bl	60005550 <___ZN9ExFatFile5mkdirEPS_PKcb_veneer>
60002114:	4605      	mov	r5, r0
60002116:	e7c0      	b.n	6000209a <EnsureDirectory(char const*, FS&)+0x46>
60002118:	0000188d 	.word	0x0000188d
6000211c:	00001661 	.word	0x00001661

60002120 <SendPagedDirectoryContents(FS&, char const*, int, int)>:

    SendU16(AckToken);
}

FLASHMEM bool SendPagedDirectoryContents(FS& fileStream, const char* directoryPath, int skip, int take)
{
60002120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
60002124:	4698      	mov	r8, r3
    File directory = fileStream.open(directoryPath);
60002126:	6803      	ldr	r3, [r0, #0]
{
60002128:	b0a9      	sub	sp, #164	; 0xa4
6000212a:	468b      	mov	fp, r1
    File directory = fileStream.open(directoryPath);
6000212c:	681c      	ldr	r4, [r3, #0]
{
6000212e:	4692      	mov	sl, r2
60002130:	4bb4      	ldr	r3, [pc, #720]	; (60002404 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x2e4>)
60002132:	429c      	cmp	r4, r3
60002134:	f040 8458 	bne.w	600029e8 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x8c8>
		SDFAT_FILE file = sdfs.open(filepath, flags);
60002138:	2300      	movs	r3, #0
6000213a:	1d01      	adds	r1, r0, #4
6000213c:	465a      	mov	r2, fp
6000213e:	a814      	add	r0, sp, #80	; 0x50
60002140:	f003 fac6 	bl	600056d0 <___ZN8FsVolume4openEPKci_veneer>
60002144:	9b26      	ldr	r3, [sp, #152]	; 0x98
60002146:	2b00      	cmp	r3, #0
60002148:	f000 8437 	beq.w	600029ba <SendPagedDirectoryContents(FS&, char const*, int, int)+0x89a>
		if (file) return File(new SDFile(file));
6000214c:	205c      	movs	r0, #92	; 0x5c
class FileImpl {
6000214e:	2600      	movs	r6, #0
60002150:	f003 fab6 	bl	600056c0 <___Znwj_veneer>
class Print
60002154:	9b15      	ldr	r3, [sp, #84]	; 0x54
60002156:	ad18      	add	r5, sp, #96	; 0x60
60002158:	4604      	mov	r4, r0
6000215a:	60c3      	str	r3, [r0, #12]
6000215c:	3018      	adds	r0, #24
class Stream : public Print
6000215e:	9b16      	ldr	r3, [sp, #88]	; 0x58
60002160:	4629      	mov	r1, r5
60002162:	f840 6c14 	str.w	r6, [r0, #-20]
60002166:	f840 3c08 	str.w	r3, [r0, #-8]
6000216a:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
6000216e:	f800 3c04 	strb.w	r3, [r0, #-4]
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
60002172:	4ba5      	ldr	r3, [pc, #660]	; (60002408 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x2e8>)
60002174:	f840 3c18 	str.w	r3, [r0, #-24]
60002178:	4ba4      	ldr	r3, [pc, #656]	; (6000240c <SendPagedDirectoryContents(FS&, char const*, int, int)+0x2ec>)
6000217a:	f840 3c10 	str.w	r3, [r0, #-16]
6000217e:	f003 fa7b 	bl	60005678 <___ZN10FsBaseFileC2ERKS__veneer>
		if (f) f->refcount++;
60002182:	6863      	ldr	r3, [r4, #4]
60002184:	65a6      	str	r6, [r4, #88]	; 0x58
60002186:	3301      	adds	r3, #1
	constexpr Print() : write_error(0) {}
60002188:	9606      	str	r6, [sp, #24]
	constexpr Stream() : _timeout(1000), read_error(0) {}
6000218a:	f88d 6020 	strb.w	r6, [sp, #32]
6000218e:	6063      	str	r3, [r4, #4]
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
60002190:	4b9f      	ldr	r3, [pc, #636]	; (60002410 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x2f0>)
		f = file;
60002192:	9409      	str	r4, [sp, #36]	; 0x24
60002194:	60a3      	str	r3, [r4, #8]
60002196:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
6000219a:	9307      	str	r3, [sp, #28]
	File(FileImpl *file) {
6000219c:	4b9d      	ldr	r3, [pc, #628]	; (60002414 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x2f4>)
6000219e:	9302      	str	r3, [sp, #8]
600021a0:	9305      	str	r3, [sp, #20]
600021a2:	4b9d      	ldr	r3, [pc, #628]	; (60002418 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x2f8>)
  ~FsBaseFile() {close();}
600021a4:	4628      	mov	r0, r5
600021a6:	9314      	str	r3, [sp, #80]	; 0x50
600021a8:	f003 f9de 	bl	60005568 <___ZN10FsBaseFile5closeEv_veneer>

    File directoryItem = directory.openNextFile();
600021ac:	9909      	ldr	r1, [sp, #36]	; 0x24
		return (f) ? f->openNextFile(mode) : *this;
600021ae:	2900      	cmp	r1, #0
600021b0:	f000 83fb 	beq.w	600029aa <SendPagedDirectoryContents(FS&, char const*, int, int)+0x88a>
600021b4:	680b      	ldr	r3, [r1, #0]
600021b6:	4a99      	ldr	r2, [pc, #612]	; (6000241c <SendPagedDirectoryContents(FS&, char const*, int, int)+0x2fc>)
600021b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
600021ba:	4293      	cmp	r3, r2
600021bc:	f040 8472 	bne.w	60002aa4 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x984>
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
600021c0:	ad18      	add	r5, sp, #96	; 0x60
600021c2:	2200      	movs	r2, #0
600021c4:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
600021c8:	4e91      	ldr	r6, [pc, #580]	; (60002410 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x2f0>)
    tmpFile.openNext(this, oflag);
600021ca:	3118      	adds	r1, #24
600021cc:	4628      	mov	r0, r5
600021ce:	9215      	str	r2, [sp, #84]	; 0x54
600021d0:	f88d 205c 	strb.w	r2, [sp, #92]	; 0x5c
600021d4:	9416      	str	r4, [sp, #88]	; 0x58
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
600021d6:	9614      	str	r6, [sp, #80]	; 0x50
  FsBaseFile() {}
600021d8:	e9cd 2226 	strd	r2, r2, [sp, #152]	; 0x98
    tmpFile.openNext(this, oflag);
600021dc:	f003 fa84 	bl	600056e8 <___ZN10FsBaseFile8openNextEPS_i_veneer>
  bool isOpen() const {return m_fFile || m_xFile;}
600021e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
600021e2:	2b00      	cmp	r3, #0
600021e4:	f000 841c 	beq.w	60002a20 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x900>
		if (file) return File(new SDFile(file));
600021e8:	205c      	movs	r0, #92	; 0x5c
class FileImpl {
600021ea:	2700      	movs	r7, #0
600021ec:	f003 fa68 	bl	600056c0 <___Znwj_veneer>
class Print
600021f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
600021f2:	4604      	mov	r4, r0
600021f4:	6047      	str	r7, [r0, #4]
600021f6:	60c3      	str	r3, [r0, #12]
600021f8:	4629      	mov	r1, r5
class Stream : public Print
600021fa:	9b16      	ldr	r3, [sp, #88]	; 0x58
600021fc:	3018      	adds	r0, #24
600021fe:	f840 3c08 	str.w	r3, [r0, #-8]
60002202:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
60002206:	f800 3c04 	strb.w	r3, [r0, #-4]
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
6000220a:	4b7f      	ldr	r3, [pc, #508]	; (60002408 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x2e8>)
6000220c:	f840 3c18 	str.w	r3, [r0, #-24]
60002210:	4b7e      	ldr	r3, [pc, #504]	; (6000240c <SendPagedDirectoryContents(FS&, char const*, int, int)+0x2ec>)
60002212:	f840 3c10 	str.w	r3, [r0, #-16]
60002216:	f003 fa2f 	bl	60005678 <___ZN10FsBaseFileC2ERKS__veneer>
	File(FileImpl *file) {
6000221a:	9b02      	ldr	r3, [sp, #8]
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
6000221c:	60a6      	str	r6, [r4, #8]
6000221e:	930a      	str	r3, [sp, #40]	; 0x28
		if (f) f->refcount++;
60002220:	6863      	ldr	r3, [r4, #4]
60002222:	65a7      	str	r7, [r4, #88]	; 0x58
60002224:	3301      	adds	r3, #1
	constexpr Print() : write_error(0) {}
60002226:	970b      	str	r7, [sp, #44]	; 0x2c
	constexpr Stream() : _timeout(1000), read_error(0) {}
60002228:	f88d 7034 	strb.w	r7, [sp, #52]	; 0x34
6000222c:	6063      	str	r3, [r4, #4]
6000222e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
		f = file;
60002232:	940e      	str	r4, [sp, #56]	; 0x38
60002234:	930c      	str	r3, [sp, #48]	; 0x30
60002236:	4b78      	ldr	r3, [pc, #480]	; (60002418 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x2f8>)
  ~FsBaseFile() {close();}
60002238:	4628      	mov	r0, r5
6000223a:	9314      	str	r3, [sp, #80]	; 0x50
6000223c:	f003 f994 	bl	60005568 <___ZN10FsBaseFile5closeEv_veneer>

    int currentCount = 0;
    int pageCount = 0;

    while (directoryItem && pageCount < take)
60002240:	980e      	ldr	r0, [sp, #56]	; 0x38
		return (f) ? f->isOpen() : false;
60002242:	2800      	cmp	r0, #0
60002244:	f000 812b 	beq.w	6000249e <SendPagedDirectoryContents(FS&, char const*, int, int)+0x37e>
60002248:	2600      	movs	r6, #0
6000224a:	465f      	mov	r7, fp
6000224c:	4635      	mov	r5, r6
6000224e:	6803      	ldr	r3, [r0, #0]
60002250:	4a73      	ldr	r2, [pc, #460]	; (60002420 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x300>)
60002252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
60002254:	4293      	cmp	r3, r2
60002256:	f040 827a 	bne.w	6000274e <SendPagedDirectoryContents(FS&, char const*, int, int)+0x62e>
  bool isOpen() const {return m_fFile || m_xFile;}
6000225a:	6d03      	ldr	r3, [r0, #80]	; 0x50
6000225c:	2b00      	cmp	r3, #0
6000225e:	f000 82d9 	beq.w	60002814 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x6f4>
60002262:	45b0      	cmp	r8, r6
60002264:	f340 8277 	ble.w	60002756 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x636>
    {
        currentCount++;
60002268:	9c0e      	ldr	r4, [sp, #56]	; 0x38
6000226a:	3501      	adds	r5, #1
		return (f) ? f->name() : "";
6000226c:	2c00      	cmp	r4, #0
6000226e:	f000 81f5 	beq.w	6000265c <SendPagedDirectoryContents(FS&, char const*, int, int)+0x53c>
60002272:	6823      	ldr	r3, [r4, #0]
60002274:	4a6b      	ldr	r2, [pc, #428]	; (60002424 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x304>)
60002276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
60002278:	4293      	cmp	r3, r2
6000227a:	f040 82e4 	bne.w	60002846 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x726>
		if (!filename) {
6000227e:	f8d4 b058 	ldr.w	fp, [r4, #88]	; 0x58
60002282:	f1bb 0f00 	cmp.w	fp, #0
60002286:	f000 82e6 	beq.w	60002856 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x736>

        const char* itemName = directoryItem.name();

        if (currentCount >= skip)
6000228a:	4555      	cmp	r5, sl
6000228c:	f280 81a8 	bge.w	600025e0 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x4c0>
		if (f) {
60002290:	2c00      	cmp	r4, #0
60002292:	d057      	beq.n	60002344 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x224>
			f->close();
60002294:	6823      	ldr	r3, [r4, #0]
60002296:	f8df b194 	ldr.w	fp, [pc, #404]	; 6000242c <SendPagedDirectoryContents(FS&, char const*, int, int)+0x30c>
6000229a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
6000229c:	455b      	cmp	r3, fp
6000229e:	f040 82cf 	bne.w	60002840 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x720>
		if (filename) {
600022a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
600022a4:	b118      	cbz	r0, 600022ae <SendPagedDirectoryContents(FS&, char const*, int, int)+0x18e>
			free(filename);
600022a6:	f003 f957 	bl	60005558 <__free_veneer>
			filename = nullptr;
600022aa:	2300      	movs	r3, #0
600022ac:	65a3      	str	r3, [r4, #88]	; 0x58
600022ae:	6d23      	ldr	r3, [r4, #80]	; 0x50
600022b0:	2b00      	cmp	r3, #0
600022b2:	f000 82c0 	beq.w	60002836 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x716>
			sdfatfile.close();
600022b6:	f104 0018 	add.w	r0, r4, #24
600022ba:	f003 f955 	bl	60005568 <___ZN10FsBaseFile5closeEv_veneer>
		if (--(f->refcount) == 0) {
600022be:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
600022c2:	f8d9 4004 	ldr.w	r4, [r9, #4]
600022c6:	3c01      	subs	r4, #1
600022c8:	f8c9 4004 	str.w	r4, [r9, #4]
600022cc:	2c00      	cmp	r4, #0
600022ce:	d137      	bne.n	60002340 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x220>
			f->close();
600022d0:	f8d9 2000 	ldr.w	r2, [r9]
600022d4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
600022d6:	455a      	cmp	r2, fp
600022d8:	f040 82d8 	bne.w	6000288c <SendPagedDirectoryContents(FS&, char const*, int, int)+0x76c>
		if (filename) {
600022dc:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
600022e0:	b118      	cbz	r0, 600022ea <SendPagedDirectoryContents(FS&, char const*, int, int)+0x1ca>
			free(filename);
600022e2:	f003 f939 	bl	60005558 <__free_veneer>
			filename = nullptr;
600022e6:	f8c9 4058 	str.w	r4, [r9, #88]	; 0x58
600022ea:	f8d9 2050 	ldr.w	r2, [r9, #80]	; 0x50
600022ee:	2a00      	cmp	r2, #0
600022f0:	f000 82c6 	beq.w	60002880 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x760>
			sdfatfile.close();
600022f4:	f109 0018 	add.w	r0, r9, #24
600022f8:	f003 f936 	bl	60005568 <___ZN10FsBaseFile5closeEv_veneer>
			delete f;
600022fc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
600022fe:	b1fc      	cbz	r4, 60002340 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x220>
60002300:	6823      	ldr	r3, [r4, #0]
60002302:	4a49      	ldr	r2, [pc, #292]	; (60002428 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x308>)
60002304:	685b      	ldr	r3, [r3, #4]
60002306:	4293      	cmp	r3, r2
60002308:	f040 8344 	bne.w	60002994 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x874>
	virtual ~SDFile(void) {
6000230c:	4b3e      	ldr	r3, [pc, #248]	; (60002408 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x2e8>)
		if (filename) {
6000230e:	6da0      	ldr	r0, [r4, #88]	; 0x58
	virtual ~SDFile(void) {
60002310:	6023      	str	r3, [r4, #0]
		if (filename) {
60002312:	b118      	cbz	r0, 6000231c <SendPagedDirectoryContents(FS&, char const*, int, int)+0x1fc>
			free(filename);
60002314:	f003 f920 	bl	60005558 <__free_veneer>
			filename = nullptr;
60002318:	2300      	movs	r3, #0
6000231a:	65a3      	str	r3, [r4, #88]	; 0x58
6000231c:	6d23      	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
6000231e:	f104 0b18 	add.w	fp, r4, #24
60002322:	2b00      	cmp	r3, #0
60002324:	f000 830b 	beq.w	6000293e <SendPagedDirectoryContents(FS&, char const*, int, int)+0x81e>
60002328:	4658      	mov	r0, fp
6000232a:	f003 f91d 	bl	60005568 <___ZN10FsBaseFile5closeEv_veneer>
6000232e:	4b3a      	ldr	r3, [pc, #232]	; (60002418 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x2f8>)
  ~FsBaseFile() {close();}
60002330:	4658      	mov	r0, fp
60002332:	60a3      	str	r3, [r4, #8]
60002334:	f003 f918 	bl	60005568 <___ZN10FsBaseFile5closeEv_veneer>
	}
60002338:	4620      	mov	r0, r4
6000233a:	215c      	movs	r1, #92	; 0x5c
6000233c:	f003 f9b0 	bl	600056a0 <___ZdlPvj_veneer>
		}
		f = nullptr;
60002340:	2300      	movs	r3, #0
60002342:	930e      	str	r3, [sp, #56]	; 0x38
                Serial.print(itemName);
                Serial.print(F("\"}[/File]"));
            }
        }
        directoryItem.close();
        directoryItem = directory.openNextFile();
60002344:	9909      	ldr	r1, [sp, #36]	; 0x24
		return (f) ? f->openNextFile(mode) : *this;
60002346:	2900      	cmp	r1, #0
60002348:	f000 81f2 	beq.w	60002730 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x610>
6000234c:	680b      	ldr	r3, [r1, #0]
6000234e:	4a33      	ldr	r2, [pc, #204]	; (6000241c <SendPagedDirectoryContents(FS&, char const*, int, int)+0x2fc>)
60002350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
60002352:	4293      	cmp	r3, r2
60002354:	f04f 0200 	mov.w	r2, #0
60002358:	f040 827a 	bne.w	60002850 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x730>
    tmpFile.openNext(this, oflag);
6000235c:	f10d 0960 	add.w	r9, sp, #96	; 0x60
60002360:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
60002364:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 60002410 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x2f0>
    tmpFile.openNext(this, oflag);
60002368:	3118      	adds	r1, #24
6000236a:	4648      	mov	r0, r9
6000236c:	9215      	str	r2, [sp, #84]	; 0x54
6000236e:	f88d 205c 	strb.w	r2, [sp, #92]	; 0x5c
60002372:	9416      	str	r4, [sp, #88]	; 0x58
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
60002374:	f8cd b050 	str.w	fp, [sp, #80]	; 0x50
  FsBaseFile() {}
60002378:	e9cd 2226 	strd	r2, r2, [sp, #152]	; 0x98
    tmpFile.openNext(this, oflag);
6000237c:	f003 f9b4 	bl	600056e8 <___ZN10FsBaseFile8openNextEPS_i_veneer>
  bool isOpen() const {return m_fFile || m_xFile;}
60002380:	9a26      	ldr	r2, [sp, #152]	; 0x98
60002382:	2a00      	cmp	r2, #0
60002384:	f000 824b 	beq.w	6000281e <SendPagedDirectoryContents(FS&, char const*, int, int)+0x6fe>
		if (file) return File(new SDFile(file));
60002388:	205c      	movs	r0, #92	; 0x5c
6000238a:	f003 f999 	bl	600056c0 <___Znwj_veneer>
class Print
6000238e:	9915      	ldr	r1, [sp, #84]	; 0x54
class FileImpl {
60002390:	2200      	movs	r2, #0
60002392:	4604      	mov	r4, r0
60002394:	60c1      	str	r1, [r0, #12]
60002396:	3018      	adds	r0, #24
class Stream : public Print
60002398:	9916      	ldr	r1, [sp, #88]	; 0x58
6000239a:	f840 2c14 	str.w	r2, [r0, #-20]
6000239e:	f840 1c08 	str.w	r1, [r0, #-8]
600023a2:	f89d 105c 	ldrb.w	r1, [sp, #92]	; 0x5c
600023a6:	f800 1c04 	strb.w	r1, [r0, #-4]
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
600023aa:	4917      	ldr	r1, [pc, #92]	; (60002408 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x2e8>)
600023ac:	f840 1c18 	str.w	r1, [r0, #-24]
600023b0:	4916      	ldr	r1, [pc, #88]	; (6000240c <SendPagedDirectoryContents(FS&, char const*, int, int)+0x2ec>)
600023b2:	f840 1c10 	str.w	r1, [r0, #-16]
600023b6:	4649      	mov	r1, r9
600023b8:	f003 f95e 	bl	60005678 <___ZN10FsBaseFileC2ERKS__veneer>
600023bc:	2200      	movs	r2, #0
	File(FileImpl *file) {
600023be:	9b02      	ldr	r3, [sp, #8]
600023c0:	65a2      	str	r2, [r4, #88]	; 0x58
	constexpr Print() : write_error(0) {}
600023c2:	9210      	str	r2, [sp, #64]	; 0x40
	constexpr Stream() : _timeout(1000), read_error(0) {}
600023c4:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
		if (f) f->refcount++;
600023c8:	6862      	ldr	r2, [r4, #4]
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
600023ca:	f8c4 b008 	str.w	fp, [r4, #8]
600023ce:	3201      	adds	r2, #1
	File(FileImpl *file) {
600023d0:	930f      	str	r3, [sp, #60]	; 0x3c
		f = file;
600023d2:	9413      	str	r4, [sp, #76]	; 0x4c
		if (f) f->refcount++;
600023d4:	6062      	str	r2, [r4, #4]
600023d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
600023da:	9211      	str	r2, [sp, #68]	; 0x44
600023dc:	4a0e      	ldr	r2, [pc, #56]	; (60002418 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x2f8>)
  ~FsBaseFile() {close();}
600023de:	4648      	mov	r0, r9
600023e0:	9214      	str	r2, [sp, #80]	; 0x50
600023e2:	f003 f8c1 	bl	60005568 <___ZN10FsBaseFile5closeEv_veneer>
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
600023e6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
600023e8:	2c00      	cmp	r4, #0
600023ea:	d053      	beq.n	60002494 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x374>
		if (--(f->refcount) == 0) {
600023ec:	6863      	ldr	r3, [r4, #4]
600023ee:	3b01      	subs	r3, #1
600023f0:	6063      	str	r3, [r4, #4]
600023f2:	9303      	str	r3, [sp, #12]
600023f4:	2b00      	cmp	r3, #0
600023f6:	d14d      	bne.n	60002494 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x374>
			f->close();
600023f8:	6822      	ldr	r2, [r4, #0]
600023fa:	490c      	ldr	r1, [pc, #48]	; (6000242c <SendPagedDirectoryContents(FS&, char const*, int, int)+0x30c>)
600023fc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
600023fe:	428a      	cmp	r2, r1
60002400:	e016      	b.n	60002430 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x310>
60002402:	bf00      	nop
60002404:	00000e91 	.word	0x00000e91
60002408:	20003358 	.word	0x20003358
6000240c:	200033b4 	.word	0x200033b4
60002410:	20003334 	.word	0x20003334
60002414:	20003308 	.word	0x20003308
60002418:	20003240 	.word	0x20003240
6000241c:	000017dd 	.word	0x000017dd
60002420:	000004c5 	.word	0x000004c5
60002424:	000014a1 	.word	0x000014a1
60002428:	00001c55 	.word	0x00001c55
6000242c:	00000e69 	.word	0x00000e69
60002430:	f040 82aa 	bne.w	60002988 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x868>
		if (filename) {
60002434:	6da0      	ldr	r0, [r4, #88]	; 0x58
60002436:	b118      	cbz	r0, 60002440 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x320>
			free(filename);
60002438:	f003 f88e 	bl	60005558 <__free_veneer>
			filename = nullptr;
6000243c:	9b03      	ldr	r3, [sp, #12]
6000243e:	65a3      	str	r3, [r4, #88]	; 0x58
  bool isOpen() const {return m_fFile || m_xFile;}
60002440:	6d23      	ldr	r3, [r4, #80]	; 0x50
60002442:	2b00      	cmp	r3, #0
60002444:	f000 8233 	beq.w	600028ae <SendPagedDirectoryContents(FS&, char const*, int, int)+0x78e>
			sdfatfile.close();
60002448:	f104 0018 	add.w	r0, r4, #24
6000244c:	f003 f88c 	bl	60005568 <___ZN10FsBaseFile5closeEv_veneer>
			delete f;
60002450:	9c0e      	ldr	r4, [sp, #56]	; 0x38
60002452:	b1fc      	cbz	r4, 60002494 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x374>
60002454:	6823      	ldr	r3, [r4, #0]
60002456:	4aa7      	ldr	r2, [pc, #668]	; (600026f4 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x5d4>)
60002458:	685b      	ldr	r3, [r3, #4]
6000245a:	4293      	cmp	r3, r2
6000245c:	f040 82a2 	bne.w	600029a4 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x884>
	virtual ~SDFile(void) {
60002460:	4ba5      	ldr	r3, [pc, #660]	; (600026f8 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x5d8>)
		if (filename) {
60002462:	6da0      	ldr	r0, [r4, #88]	; 0x58
	virtual ~SDFile(void) {
60002464:	6023      	str	r3, [r4, #0]
		if (filename) {
60002466:	b118      	cbz	r0, 60002470 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x350>
			free(filename);
60002468:	f003 f876 	bl	60005558 <__free_veneer>
			filename = nullptr;
6000246c:	2300      	movs	r3, #0
6000246e:	65a3      	str	r3, [r4, #88]	; 0x58
60002470:	6d23      	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
60002472:	f104 0b18 	add.w	fp, r4, #24
60002476:	2b00      	cmp	r3, #0
60002478:	f000 828f 	beq.w	6000299a <SendPagedDirectoryContents(FS&, char const*, int, int)+0x87a>
6000247c:	4658      	mov	r0, fp
6000247e:	f003 f873 	bl	60005568 <___ZN10FsBaseFile5closeEv_veneer>
60002482:	4b9e      	ldr	r3, [pc, #632]	; (600026fc <SendPagedDirectoryContents(FS&, char const*, int, int)+0x5dc>)
  ~FsBaseFile() {close();}
60002484:	4658      	mov	r0, fp
60002486:	60a3      	str	r3, [r4, #8]
60002488:	f003 f86e 	bl	60005568 <___ZN10FsBaseFile5closeEv_veneer>
	}
6000248c:	4620      	mov	r0, r4
6000248e:	215c      	movs	r1, #92	; 0x5c
60002490:	f003 f906 	bl	600056a0 <___ZdlPvj_veneer>
		f = file.f;
60002494:	9813      	ldr	r0, [sp, #76]	; 0x4c
60002496:	900e      	str	r0, [sp, #56]	; 0x38
		return (f) ? f->isOpen() : false;
60002498:	2800      	cmp	r0, #0
6000249a:	f47f aed8 	bne.w	6000224e <SendPagedDirectoryContents(FS&, char const*, int, int)+0x12e>
		if (f) {
6000249e:	9c09      	ldr	r4, [sp, #36]	; 0x24
600024a0:	b1e4      	cbz	r4, 600024dc <SendPagedDirectoryContents(FS&, char const*, int, int)+0x3bc>
			f->close();
600024a2:	6823      	ldr	r3, [r4, #0]
600024a4:	4e96      	ldr	r6, [pc, #600]	; (60002700 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x5e0>)
600024a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
600024a8:	42b3      	cmp	r3, r6
600024aa:	f040 82f8 	bne.w	60002a9e <SendPagedDirectoryContents(FS&, char const*, int, int)+0x97e>
		if (filename) {
600024ae:	6da0      	ldr	r0, [r4, #88]	; 0x58
600024b0:	b118      	cbz	r0, 600024ba <SendPagedDirectoryContents(FS&, char const*, int, int)+0x39a>
			free(filename);
600024b2:	f003 f851 	bl	60005558 <__free_veneer>
			filename = nullptr;
600024b6:	2300      	movs	r3, #0
600024b8:	65a3      	str	r3, [r4, #88]	; 0x58
  bool isOpen() const {return m_fFile || m_xFile;}
600024ba:	6d23      	ldr	r3, [r4, #80]	; 0x50
600024bc:	2b00      	cmp	r3, #0
600024be:	f000 82c6 	beq.w	60002a4e <SendPagedDirectoryContents(FS&, char const*, int, int)+0x92e>
			sdfatfile.close();
600024c2:	f104 0018 	add.w	r0, r4, #24
600024c6:	f003 f84f 	bl	60005568 <___ZN10FsBaseFile5closeEv_veneer>
		if (--(f->refcount) == 0) {
600024ca:	9d09      	ldr	r5, [sp, #36]	; 0x24
600024cc:	686c      	ldr	r4, [r5, #4]
600024ce:	3c01      	subs	r4, #1
600024d0:	606c      	str	r4, [r5, #4]
600024d2:	2c00      	cmp	r4, #0
600024d4:	f000 81fc 	beq.w	600028d0 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x7b0>
		f = nullptr;
600024d8:	2300      	movs	r3, #0
600024da:	9309      	str	r3, [sp, #36]	; 0x24
	virtual ~File() {
600024dc:	9b02      	ldr	r3, [sp, #8]
		if (f) dec_refcount();
600024de:	9c0e      	ldr	r4, [sp, #56]	; 0x38
	virtual ~File() {
600024e0:	930a      	str	r3, [sp, #40]	; 0x28
		if (f) dec_refcount();
600024e2:	2c00      	cmp	r4, #0
600024e4:	d039      	beq.n	6000255a <SendPagedDirectoryContents(FS&, char const*, int, int)+0x43a>
		if (--(f->refcount) == 0) {
600024e6:	6865      	ldr	r5, [r4, #4]
600024e8:	3d01      	subs	r5, #1
600024ea:	6065      	str	r5, [r4, #4]
600024ec:	2d00      	cmp	r5, #0
600024ee:	d134      	bne.n	6000255a <SendPagedDirectoryContents(FS&, char const*, int, int)+0x43a>
			f->close();
600024f0:	6823      	ldr	r3, [r4, #0]
600024f2:	4a83      	ldr	r2, [pc, #524]	; (60002700 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x5e0>)
600024f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
600024f6:	4293      	cmp	r3, r2
600024f8:	f040 82e6 	bne.w	60002ac8 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x9a8>
		if (filename) {
600024fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
600024fe:	b110      	cbz	r0, 60002506 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x3e6>
			free(filename);
60002500:	f003 f82a 	bl	60005558 <__free_veneer>
			filename = nullptr;
60002504:	65a5      	str	r5, [r4, #88]	; 0x58
60002506:	6d23      	ldr	r3, [r4, #80]	; 0x50
60002508:	2b00      	cmp	r3, #0
6000250a:	f000 82ac 	beq.w	60002a66 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x946>
			sdfatfile.close();
6000250e:	f104 0018 	add.w	r0, r4, #24
60002512:	f003 f829 	bl	60005568 <___ZN10FsBaseFile5closeEv_veneer>
			delete f;
60002516:	9c0e      	ldr	r4, [sp, #56]	; 0x38
60002518:	b1fc      	cbz	r4, 6000255a <SendPagedDirectoryContents(FS&, char const*, int, int)+0x43a>
6000251a:	6823      	ldr	r3, [r4, #0]
6000251c:	4a75      	ldr	r2, [pc, #468]	; (600026f4 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x5d4>)
6000251e:	685b      	ldr	r3, [r3, #4]
60002520:	4293      	cmp	r3, r2
60002522:	f040 82ef 	bne.w	60002b04 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x9e4>
	virtual ~SDFile(void) {
60002526:	4b74      	ldr	r3, [pc, #464]	; (600026f8 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x5d8>)
		if (filename) {
60002528:	6da0      	ldr	r0, [r4, #88]	; 0x58
	virtual ~SDFile(void) {
6000252a:	6023      	str	r3, [r4, #0]
		if (filename) {
6000252c:	b118      	cbz	r0, 60002536 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x416>
			free(filename);
6000252e:	f003 f813 	bl	60005558 <__free_veneer>
			filename = nullptr;
60002532:	2300      	movs	r3, #0
60002534:	65a3      	str	r3, [r4, #88]	; 0x58
60002536:	6d23      	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
60002538:	f104 0518 	add.w	r5, r4, #24
6000253c:	2b00      	cmp	r3, #0
6000253e:	f000 82d4 	beq.w	60002aea <SendPagedDirectoryContents(FS&, char const*, int, int)+0x9ca>
60002542:	4628      	mov	r0, r5
60002544:	f003 f810 	bl	60005568 <___ZN10FsBaseFile5closeEv_veneer>
60002548:	4b6c      	ldr	r3, [pc, #432]	; (600026fc <SendPagedDirectoryContents(FS&, char const*, int, int)+0x5dc>)
  ~FsBaseFile() {close();}
6000254a:	4628      	mov	r0, r5
6000254c:	60a3      	str	r3, [r4, #8]
6000254e:	f003 f80b 	bl	60005568 <___ZN10FsBaseFile5closeEv_veneer>
	}
60002552:	215c      	movs	r1, #92	; 0x5c
60002554:	4620      	mov	r0, r4
60002556:	f003 f8a3 	bl	600056a0 <___ZdlPvj_veneer>
	virtual ~File() {
6000255a:	9b02      	ldr	r3, [sp, #8]
		if (f) dec_refcount();
6000255c:	9c09      	ldr	r4, [sp, #36]	; 0x24
	virtual ~File() {
6000255e:	9305      	str	r3, [sp, #20]
		if (f) dec_refcount();
60002560:	2c00      	cmp	r4, #0
60002562:	d039      	beq.n	600025d8 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x4b8>
		if (--(f->refcount) == 0) {
60002564:	6865      	ldr	r5, [r4, #4]
60002566:	3d01      	subs	r5, #1
60002568:	6065      	str	r5, [r4, #4]
6000256a:	2d00      	cmp	r5, #0
6000256c:	d134      	bne.n	600025d8 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x4b8>
			f->close();
6000256e:	6823      	ldr	r3, [r4, #0]
60002570:	4a63      	ldr	r2, [pc, #396]	; (60002700 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x5e0>)
60002572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
60002574:	4293      	cmp	r3, r2
60002576:	f040 82aa 	bne.w	60002ace <SendPagedDirectoryContents(FS&, char const*, int, int)+0x9ae>
		if (filename) {
6000257a:	6da0      	ldr	r0, [r4, #88]	; 0x58
6000257c:	b110      	cbz	r0, 60002584 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x464>
			free(filename);
6000257e:	f002 ffeb 	bl	60005558 <__free_veneer>
			filename = nullptr;
60002582:	65a5      	str	r5, [r4, #88]	; 0x58
  bool isOpen() const {return m_fFile || m_xFile;}
60002584:	6d23      	ldr	r3, [r4, #80]	; 0x50
60002586:	2b00      	cmp	r3, #0
60002588:	f000 8272 	beq.w	60002a70 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x950>
			sdfatfile.close();
6000258c:	f104 0018 	add.w	r0, r4, #24
60002590:	f002 ffea 	bl	60005568 <___ZN10FsBaseFile5closeEv_veneer>
			delete f;
60002594:	9c09      	ldr	r4, [sp, #36]	; 0x24
60002596:	b1fc      	cbz	r4, 600025d8 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x4b8>
60002598:	6823      	ldr	r3, [r4, #0]
6000259a:	4a56      	ldr	r2, [pc, #344]	; (600026f4 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x5d4>)
6000259c:	685b      	ldr	r3, [r3, #4]
6000259e:	4293      	cmp	r3, r2
600025a0:	f040 82ad 	bne.w	60002afe <SendPagedDirectoryContents(FS&, char const*, int, int)+0x9de>
	virtual ~SDFile(void) {
600025a4:	4b54      	ldr	r3, [pc, #336]	; (600026f8 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x5d8>)
		if (filename) {
600025a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
	virtual ~SDFile(void) {
600025a8:	6023      	str	r3, [r4, #0]
		if (filename) {
600025aa:	b118      	cbz	r0, 600025b4 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x494>
			free(filename);
600025ac:	f002 ffd4 	bl	60005558 <__free_veneer>
			filename = nullptr;
600025b0:	2300      	movs	r3, #0
600025b2:	65a3      	str	r3, [r4, #88]	; 0x58
600025b4:	6d23      	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
600025b6:	f104 0518 	add.w	r5, r4, #24
600025ba:	2b00      	cmp	r3, #0
600025bc:	f000 829a 	beq.w	60002af4 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x9d4>
600025c0:	4628      	mov	r0, r5
600025c2:	f002 ffd1 	bl	60005568 <___ZN10FsBaseFile5closeEv_veneer>
600025c6:	4b4d      	ldr	r3, [pc, #308]	; (600026fc <SendPagedDirectoryContents(FS&, char const*, int, int)+0x5dc>)
  ~FsBaseFile() {close();}
600025c8:	4628      	mov	r0, r5
600025ca:	60a3      	str	r3, [r4, #8]
600025cc:	f002 ffcc 	bl	60005568 <___ZN10FsBaseFile5closeEv_veneer>
	}
600025d0:	215c      	movs	r1, #92	; 0x5c
600025d2:	4620      	mov	r0, r4
600025d4:	f003 f864 	bl	600056a0 <___ZdlPvj_veneer>
        directoryItem.close();
    }
    directory.close();

    return true;
}
600025d8:	2001      	movs	r0, #1
600025da:	b029      	add	sp, #164	; 0xa4
600025dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            pageCount++;
600025e0:	3601      	adds	r6, #1
		return (f) ? f->isDirectory() : false;
600025e2:	2c00      	cmp	r4, #0
600025e4:	f000 815a 	beq.w	6000289c <SendPagedDirectoryContents(FS&, char const*, int, int)+0x77c>
600025e8:	6823      	ldr	r3, [r4, #0]
600025ea:	4a46      	ldr	r2, [pc, #280]	; (60002704 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x5e4>)
600025ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
600025ee:	4293      	cmp	r3, r2
600025f0:	f040 814f 	bne.w	60002892 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x772>
    return m_fFile ? m_fFile->isDir() :
600025f4:	6d23      	ldr	r3, [r4, #80]	; 0x50
600025f6:	2b00      	cmp	r3, #0
600025f8:	f000 81a6 	beq.w	60002948 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x828>
600025fc:	781b      	ldrb	r3, [r3, #0]
600025fe:	f013 0f70 	tst.w	r3, #112	; 0x70
60002602:	f000 814b 	beq.w	6000289c <SendPagedDirectoryContents(FS&, char const*, int, int)+0x77c>
	// Transmit a buffer containing any number of bytes to your PC
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
60002606:	210e      	movs	r1, #14
60002608:	483f      	ldr	r0, [pc, #252]	; (60002708 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x5e8>)
6000260a:	f003 f839 	bl	60005680 <__usb_serial_write_veneer>
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
6000260e:	f1bb 0f00 	cmp.w	fp, #0
60002612:	f000 81a9 	beq.w	60002968 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x848>
							  return write((const uint8_t *)str, strlen(str)); }
60002616:	4658      	mov	r0, fp
60002618:	f002 ffb6 	bl	60005588 <__strlen_veneer>
6000261c:	4601      	mov	r1, r0
6000261e:	4658      	mov	r0, fp
60002620:	f003 f82e 	bl	60005680 <__usb_serial_write_veneer>
60002624:	210a      	movs	r1, #10
60002626:	4839      	ldr	r0, [pc, #228]	; (6000270c <SendPagedDirectoryContents(FS&, char const*, int, int)+0x5ec>)
60002628:	f003 f82a 	bl	60005680 <__usb_serial_write_veneer>
	size_t write(const char *str)			{ if (str == nullptr) return 0;
6000262c:	b137      	cbz	r7, 6000263c <SendPagedDirectoryContents(FS&, char const*, int, int)+0x51c>
							  return write((const uint8_t *)str, strlen(str)); }
6000262e:	4638      	mov	r0, r7
60002630:	f002 ffaa 	bl	60005588 <__strlen_veneer>
60002634:	4601      	mov	r1, r0
60002636:	4638      	mov	r0, r7
60002638:	f003 f822 	bl	60005680 <__usb_serial_write_veneer>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
6000263c:	202f      	movs	r0, #47	; 0x2f
6000263e:	f003 f80b 	bl	60005658 <__usb_serial_putchar_veneer>
60002642:	4658      	mov	r0, fp
60002644:	f002 ffa0 	bl	60005588 <__strlen_veneer>
60002648:	4601      	mov	r1, r0
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
6000264a:	4658      	mov	r0, fp
6000264c:	f003 f818 	bl	60005680 <__usb_serial_write_veneer>
60002650:	2108      	movs	r1, #8
60002652:	482f      	ldr	r0, [pc, #188]	; (60002710 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x5f0>)
60002654:	f003 f814 	bl	60005680 <__usb_serial_write_veneer>
		if (f) {
60002658:	9c0e      	ldr	r4, [sp, #56]	; 0x38
6000265a:	e619      	b.n	60002290 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x170>
        if (currentCount >= skip)
6000265c:	4555      	cmp	r5, sl
6000265e:	f6ff ae71 	blt.w	60002344 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x224>
            pageCount++;
60002662:	3601      	adds	r6, #1
		return (f) ? f->name() : "";
60002664:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 6000272c <SendPagedDirectoryContents(FS&, char const*, int, int)+0x60c>
60002668:	210f      	movs	r1, #15
6000266a:	482a      	ldr	r0, [pc, #168]	; (60002714 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x5f4>)
6000266c:	f003 f808 	bl	60005680 <__usb_serial_write_veneer>
60002670:	4658      	mov	r0, fp
60002672:	f002 ff89 	bl	60005588 <__strlen_veneer>
60002676:	4601      	mov	r1, r0
60002678:	4658      	mov	r0, fp
6000267a:	f003 f801 	bl	60005680 <__usb_serial_write_veneer>
6000267e:	2109      	movs	r1, #9
60002680:	4825      	ldr	r0, [pc, #148]	; (60002718 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x5f8>)
60002682:	f002 fffd 	bl	60005680 <__usb_serial_write_veneer>
                Serial.print(directoryItem.size());
60002686:	980e      	ldr	r0, [sp, #56]	; 0x38
		return (f) ? f->size() : 0;
60002688:	2800      	cmp	r0, #0
6000268a:	f000 8180 	beq.w	6000298e <SendPagedDirectoryContents(FS&, char const*, int, int)+0x86e>
6000268e:	6803      	ldr	r3, [r0, #0]
60002690:	4a22      	ldr	r2, [pc, #136]	; (6000271c <SendPagedDirectoryContents(FS&, char const*, int, int)+0x5fc>)
60002692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
60002694:	4293      	cmp	r3, r2
60002696:	f040 81f0 	bne.w	60002a7a <SendPagedDirectoryContents(FS&, char const*, int, int)+0x95a>
    return m_fFile ? m_fFile->fileSize() :
6000269a:	6d03      	ldr	r3, [r0, #80]	; 0x50
6000269c:	2b00      	cmp	r3, #0
6000269e:	f000 819d 	beq.w	600029dc <SendPagedDirectoryContents(FS&, char const*, int, int)+0x8bc>
600026a2:	69da      	ldr	r2, [r3, #28]
600026a4:	2300      	movs	r3, #0
	// Print an unsigned number
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
	// Print a signed number
	size_t print(int64_t n);
	// Print an unsigned number
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
600026a6:	210a      	movs	r1, #10
600026a8:	2000      	movs	r0, #0
600026aa:	e9cd 1000 	strd	r1, r0, [sp]
600026ae:	481c      	ldr	r0, [pc, #112]	; (60002720 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x600>)
600026b0:	f002 ffc6 	bl	60005640 <___ZN5Print13printNumber64Eyhh_veneer>
600026b4:	2109      	movs	r1, #9
600026b6:	481b      	ldr	r0, [pc, #108]	; (60002724 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x604>)
600026b8:	f002 ffe2 	bl	60005680 <__usb_serial_write_veneer>
	size_t write(const char *str)			{ if (str == nullptr) return 0;
600026bc:	b137      	cbz	r7, 600026cc <SendPagedDirectoryContents(FS&, char const*, int, int)+0x5ac>
							  return write((const uint8_t *)str, strlen(str)); }
600026be:	4638      	mov	r0, r7
600026c0:	f002 ff62 	bl	60005588 <__strlen_veneer>
600026c4:	4601      	mov	r1, r0
600026c6:	4638      	mov	r0, r7
600026c8:	f002 ffda 	bl	60005680 <__usb_serial_write_veneer>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
600026cc:	202f      	movs	r0, #47	; 0x2f
600026ce:	f002 ffc3 	bl	60005658 <__usb_serial_putchar_veneer>
	size_t write(const char *str)			{ if (str == nullptr) return 0;
600026d2:	f1bb 0f00 	cmp.w	fp, #0
600026d6:	d006      	beq.n	600026e6 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x5c6>
							  return write((const uint8_t *)str, strlen(str)); }
600026d8:	4658      	mov	r0, fp
600026da:	f002 ff55 	bl	60005588 <__strlen_veneer>
600026de:	4601      	mov	r1, r0
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
600026e0:	4658      	mov	r0, fp
600026e2:	f002 ffcd 	bl	60005680 <__usb_serial_write_veneer>
600026e6:	2109      	movs	r1, #9
600026e8:	480f      	ldr	r0, [pc, #60]	; (60002728 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x608>)
600026ea:	f002 ffc9 	bl	60005680 <__usb_serial_write_veneer>
		if (f) {
600026ee:	9c0e      	ldr	r4, [sp, #56]	; 0x38
600026f0:	e5ce      	b.n	60002290 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x170>
600026f2:	bf00      	nop
600026f4:	00001c55 	.word	0x00001c55
600026f8:	20003358 	.word	0x20003358
600026fc:	20003240 	.word	0x20003240
60002700:	00000e69 	.word	0x00000e69
60002704:	00001949 	.word	0x00001949
60002708:	2000a918 	.word	0x2000a918
6000270c:	2000a928 	.word	0x2000a928
60002710:	2000a934 	.word	0x2000a934
60002714:	2000a940 	.word	0x2000a940
60002718:	2000a950 	.word	0x2000a950
6000271c:	000017c1 	.word	0x000017c1
60002720:	2000bfd8 	.word	0x2000bfd8
60002724:	2000a95c 	.word	0x2000a95c
60002728:	2000a968 	.word	0x2000a968
6000272c:	2000b0f8 	.word	0x2000b0f8
	File(const File& file) {
60002730:	9b02      	ldr	r3, [sp, #8]
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
60002732:	9c0e      	ldr	r4, [sp, #56]	; 0x38
	File(const File& file) {
60002734:	930f      	str	r3, [sp, #60]	; 0x3c
60002736:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	constexpr Print() : write_error(0) {}
6000273a:	9110      	str	r1, [sp, #64]	; 0x40
6000273c:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
		f = file.f;
60002740:	9113      	str	r1, [sp, #76]	; 0x4c
60002742:	9311      	str	r3, [sp, #68]	; 0x44
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
60002744:	2c00      	cmp	r4, #0
60002746:	f47f ae51 	bne.w	600023ec <SendPagedDirectoryContents(FS&, char const*, int, int)+0x2cc>
		if (f) {
6000274a:	9c09      	ldr	r4, [sp, #36]	; 0x24
		return (f) ? f->isOpen() : false;
6000274c:	e6a8      	b.n	600024a0 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x380>
6000274e:	4798      	blx	r3
60002750:	2800      	cmp	r0, #0
60002752:	f47f ad86 	bne.w	60002262 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x142>
    if (directoryItem) {
60002756:	9c0e      	ldr	r4, [sp, #56]	; 0x38
60002758:	2c00      	cmp	r4, #0
6000275a:	f43f aea0 	beq.w	6000249e <SendPagedDirectoryContents(FS&, char const*, int, int)+0x37e>
6000275e:	6823      	ldr	r3, [r4, #0]
60002760:	49a6      	ldr	r1, [pc, #664]	; (600029fc <SendPagedDirectoryContents(FS&, char const*, int, int)+0x8dc>)
60002762:	6b1a      	ldr	r2, [r3, #48]	; 0x30
60002764:	428a      	cmp	r2, r1
60002766:	f040 818f 	bne.w	60002a88 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x968>
  bool isOpen() const {return m_fFile || m_xFile;}
6000276a:	6d22      	ldr	r2, [r4, #80]	; 0x50
6000276c:	2a00      	cmp	r2, #0
6000276e:	f000 8164 	beq.w	60002a3a <SendPagedDirectoryContents(FS&, char const*, int, int)+0x91a>
			f->close();
60002772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
60002774:	4ea2      	ldr	r6, [pc, #648]	; (60002a00 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x8e0>)
60002776:	42b3      	cmp	r3, r6
60002778:	f040 81af 	bne.w	60002ada <SendPagedDirectoryContents(FS&, char const*, int, int)+0x9ba>
		if (filename) {
6000277c:	6da0      	ldr	r0, [r4, #88]	; 0x58
6000277e:	b118      	cbz	r0, 60002788 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x668>
			free(filename);
60002780:	f002 feea 	bl	60005558 <__free_veneer>
			filename = nullptr;
60002784:	2300      	movs	r3, #0
60002786:	65a3      	str	r3, [r4, #88]	; 0x58
60002788:	6d23      	ldr	r3, [r4, #80]	; 0x50
6000278a:	2b00      	cmp	r3, #0
6000278c:	f000 8197 	beq.w	60002abe <SendPagedDirectoryContents(FS&, char const*, int, int)+0x99e>
			sdfatfile.close();
60002790:	f104 0018 	add.w	r0, r4, #24
60002794:	f002 fee8 	bl	60005568 <___ZN10FsBaseFile5closeEv_veneer>
		if (--(f->refcount) == 0) {
60002798:	9d0e      	ldr	r5, [sp, #56]	; 0x38
6000279a:	686c      	ldr	r4, [r5, #4]
6000279c:	3c01      	subs	r4, #1
6000279e:	606c      	str	r4, [r5, #4]
600027a0:	2c00      	cmp	r4, #0
600027a2:	d133      	bne.n	6000280c <SendPagedDirectoryContents(FS&, char const*, int, int)+0x6ec>
			f->close();
600027a4:	682b      	ldr	r3, [r5, #0]
600027a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
600027a8:	42b3      	cmp	r3, r6
600027aa:	f040 81b3 	bne.w	60002b14 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x9f4>
		if (filename) {
600027ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
600027b0:	b110      	cbz	r0, 600027b8 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x698>
			free(filename);
600027b2:	f002 fed1 	bl	60005558 <__free_veneer>
			filename = nullptr;
600027b6:	65ac      	str	r4, [r5, #88]	; 0x58
600027b8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
600027ba:	2b00      	cmp	r3, #0
600027bc:	f000 81a5 	beq.w	60002b0a <SendPagedDirectoryContents(FS&, char const*, int, int)+0x9ea>
			sdfatfile.close();
600027c0:	f105 0018 	add.w	r0, r5, #24
600027c4:	f002 fed0 	bl	60005568 <___ZN10FsBaseFile5closeEv_veneer>
			delete f;
600027c8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
600027ca:	b1fc      	cbz	r4, 6000280c <SendPagedDirectoryContents(FS&, char const*, int, int)+0x6ec>
600027cc:	6823      	ldr	r3, [r4, #0]
600027ce:	4a8d      	ldr	r2, [pc, #564]	; (60002a04 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x8e4>)
600027d0:	685b      	ldr	r3, [r3, #4]
600027d2:	4293      	cmp	r3, r2
600027d4:	f040 81a1 	bne.w	60002b1a <SendPagedDirectoryContents(FS&, char const*, int, int)+0x9fa>
	virtual ~SDFile(void) {
600027d8:	4b8b      	ldr	r3, [pc, #556]	; (60002a08 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x8e8>)
		if (filename) {
600027da:	6da0      	ldr	r0, [r4, #88]	; 0x58
	virtual ~SDFile(void) {
600027dc:	6023      	str	r3, [r4, #0]
		if (filename) {
600027de:	b118      	cbz	r0, 600027e8 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x6c8>
			free(filename);
600027e0:	f002 feba 	bl	60005558 <__free_veneer>
			filename = nullptr;
600027e4:	2300      	movs	r3, #0
600027e6:	65a3      	str	r3, [r4, #88]	; 0x58
600027e8:	6d23      	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
600027ea:	f104 0518 	add.w	r5, r4, #24
600027ee:	2b00      	cmp	r3, #0
600027f0:	f000 8176 	beq.w	60002ae0 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x9c0>
600027f4:	4628      	mov	r0, r5
600027f6:	f002 feb7 	bl	60005568 <___ZN10FsBaseFile5closeEv_veneer>
600027fa:	4b84      	ldr	r3, [pc, #528]	; (60002a0c <SendPagedDirectoryContents(FS&, char const*, int, int)+0x8ec>)
  ~FsBaseFile() {close();}
600027fc:	4628      	mov	r0, r5
600027fe:	60a3      	str	r3, [r4, #8]
60002800:	f002 feb2 	bl	60005568 <___ZN10FsBaseFile5closeEv_veneer>
	}
60002804:	215c      	movs	r1, #92	; 0x5c
60002806:	4620      	mov	r0, r4
60002808:	f002 ff4a 	bl	600056a0 <___ZdlPvj_veneer>
		f = nullptr;
6000280c:	2300      	movs	r3, #0
		if (f) {
6000280e:	9c09      	ldr	r4, [sp, #36]	; 0x24
		f = nullptr;
60002810:	930e      	str	r3, [sp, #56]	; 0x38
	}
60002812:	e645      	b.n	600024a0 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x380>
  bool isOpen() const {return m_fFile || m_xFile;}
60002814:	6d43      	ldr	r3, [r0, #84]	; 0x54
60002816:	2b00      	cmp	r3, #0
60002818:	f47f ad23 	bne.w	60002262 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x142>
6000281c:	e79b      	b.n	60002756 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x636>
6000281e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
60002820:	2a00      	cmp	r2, #0
60002822:	f47f adb1 	bne.w	60002388 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x268>
	constexpr File() : f(nullptr) { }
60002826:	9b02      	ldr	r3, [sp, #8]
60002828:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
6000282c:	9213      	str	r2, [sp, #76]	; 0x4c
6000282e:	930f      	str	r3, [sp, #60]	; 0x3c
60002830:	e9cd 2410 	strd	r2, r4, [sp, #64]	; 0x40
60002834:	e5d2      	b.n	600023dc <SendPagedDirectoryContents(FS&, char const*, int, int)+0x2bc>
60002836:	6d63      	ldr	r3, [r4, #84]	; 0x54
60002838:	2b00      	cmp	r3, #0
6000283a:	f47f ad3c 	bne.w	600022b6 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x196>
6000283e:	e53e      	b.n	600022be <SendPagedDirectoryContents(FS&, char const*, int, int)+0x19e>
			f->close();
60002840:	4620      	mov	r0, r4
60002842:	4798      	blx	r3
60002844:	e53b      	b.n	600022be <SendPagedDirectoryContents(FS&, char const*, int, int)+0x19e>
		return (f) ? f->name() : "";
60002846:	4620      	mov	r0, r4
60002848:	4798      	blx	r3
6000284a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
6000284c:	4683      	mov	fp, r0
6000284e:	e51c      	b.n	6000228a <SendPagedDirectoryContents(FS&, char const*, int, int)+0x16a>
		return (f) ? f->openNextFile(mode) : *this;
60002850:	a80f      	add	r0, sp, #60	; 0x3c
60002852:	4798      	blx	r3
60002854:	e5c7      	b.n	600023e6 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x2c6>
			filename = (char *)malloc(MAX_FILENAME_LEN);
60002856:	f44f 7080 	mov.w	r0, #256	; 0x100
6000285a:	f002 fee1 	bl	60005620 <__malloc_veneer>
6000285e:	4601      	mov	r1, r0
60002860:	65a0      	str	r0, [r4, #88]	; 0x58
			if (filename) {
60002862:	2800      	cmp	r0, #0
60002864:	f000 815c 	beq.w	60002b20 <SendPagedDirectoryContents(FS&, char const*, int, int)+0xa00>
    *name = 0;
60002868:	f880 b000 	strb.w	fp, [r0]
    return m_fFile ? m_fFile->getName(name, len) :
6000286c:	6d20      	ldr	r0, [r4, #80]	; 0x50
6000286e:	b318      	cbz	r0, 600028b8 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x798>
60002870:	f44f 7280 	mov.w	r2, #256	; 0x100
60002874:	f002 fedc 	bl	60005630 <___ZN7FatFile7getNameEPcj_veneer>
		return filename;
60002878:	f8d4 b058 	ldr.w	fp, [r4, #88]	; 0x58
6000287c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
6000287e:	e504      	b.n	6000228a <SendPagedDirectoryContents(FS&, char const*, int, int)+0x16a>
  bool isOpen() const {return m_fFile || m_xFile;}
60002880:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
60002884:	2a00      	cmp	r2, #0
60002886:	f47f ad35 	bne.w	600022f4 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x1d4>
6000288a:	e537      	b.n	600022fc <SendPagedDirectoryContents(FS&, char const*, int, int)+0x1dc>
			f->close();
6000288c:	4648      	mov	r0, r9
6000288e:	4790      	blx	r2
60002890:	e534      	b.n	600022fc <SendPagedDirectoryContents(FS&, char const*, int, int)+0x1dc>
		return (f) ? f->isDirectory() : false;
60002892:	4620      	mov	r0, r4
60002894:	4798      	blx	r3
60002896:	2800      	cmp	r0, #0
60002898:	f47f aeb5 	bne.w	60002606 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x4e6>
6000289c:	210f      	movs	r1, #15
6000289e:	485c      	ldr	r0, [pc, #368]	; (60002a10 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x8f0>)
600028a0:	f002 feee 	bl	60005680 <__usb_serial_write_veneer>
	size_t write(const char *str)			{ if (str == nullptr) return 0;
600028a4:	f1bb 0f00 	cmp.w	fp, #0
600028a8:	f47f aee2 	bne.w	60002670 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x550>
600028ac:	e6e7      	b.n	6000267e <SendPagedDirectoryContents(FS&, char const*, int, int)+0x55e>
600028ae:	6d63      	ldr	r3, [r4, #84]	; 0x54
600028b0:	2b00      	cmp	r3, #0
600028b2:	f47f adc9 	bne.w	60002448 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x328>
600028b6:	e5cb      	b.n	60002450 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x330>
600028b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
           m_xFile ? m_xFile->getName(name, len) : 0;
600028ba:	2800      	cmp	r0, #0
600028bc:	f000 80e1 	beq.w	60002a82 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x962>
   * \param[in] size The size of the array in characters.
   * \return the name length.
   */
  size_t getName(char* name, size_t size) {
#if USE_UTF8_LONG_NAMES
    return getName8(name, size);
600028c0:	f44f 7280 	mov.w	r2, #256	; 0x100
600028c4:	f002 fe88 	bl	600055d8 <___ZN9ExFatFile8getName8EPcj_veneer>
600028c8:	f8d4 b058 	ldr.w	fp, [r4, #88]	; 0x58
600028cc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
600028ce:	e4dc      	b.n	6000228a <SendPagedDirectoryContents(FS&, char const*, int, int)+0x16a>
			f->close();
600028d0:	682b      	ldr	r3, [r5, #0]
600028d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
600028d4:	42b3      	cmp	r3, r6
600028d6:	f040 80ea 	bne.w	60002aae <SendPagedDirectoryContents(FS&, char const*, int, int)+0x98e>
		if (filename) {
600028da:	6da8      	ldr	r0, [r5, #88]	; 0x58
600028dc:	b110      	cbz	r0, 600028e4 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x7c4>
			free(filename);
600028de:	f002 fe3b 	bl	60005558 <__free_veneer>
			filename = nullptr;
600028e2:	65ac      	str	r4, [r5, #88]	; 0x58
  bool isOpen() const {return m_fFile || m_xFile;}
600028e4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
600028e6:	2b00      	cmp	r3, #0
600028e8:	f000 80b6 	beq.w	60002a58 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x938>
			sdfatfile.close();
600028ec:	f105 0018 	add.w	r0, r5, #24
600028f0:	f002 fe3a 	bl	60005568 <___ZN10FsBaseFile5closeEv_veneer>
			delete f;
600028f4:	9c09      	ldr	r4, [sp, #36]	; 0x24
600028f6:	2c00      	cmp	r4, #0
600028f8:	f43f adee 	beq.w	600024d8 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x3b8>
600028fc:	6823      	ldr	r3, [r4, #0]
600028fe:	4a41      	ldr	r2, [pc, #260]	; (60002a04 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x8e4>)
60002900:	685b      	ldr	r3, [r3, #4]
60002902:	4293      	cmp	r3, r2
60002904:	f040 80e6 	bne.w	60002ad4 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x9b4>
	virtual ~SDFile(void) {
60002908:	4b3f      	ldr	r3, [pc, #252]	; (60002a08 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x8e8>)
		if (filename) {
6000290a:	6da0      	ldr	r0, [r4, #88]	; 0x58
	virtual ~SDFile(void) {
6000290c:	6023      	str	r3, [r4, #0]
		if (filename) {
6000290e:	b118      	cbz	r0, 60002918 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x7f8>
			free(filename);
60002910:	f002 fe22 	bl	60005558 <__free_veneer>
			filename = nullptr;
60002914:	2300      	movs	r3, #0
60002916:	65a3      	str	r3, [r4, #88]	; 0x58
60002918:	6d23      	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
6000291a:	f104 0518 	add.w	r5, r4, #24
6000291e:	2b00      	cmp	r3, #0
60002920:	f000 80c8 	beq.w	60002ab4 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x994>
60002924:	4628      	mov	r0, r5
60002926:	f002 fe1f 	bl	60005568 <___ZN10FsBaseFile5closeEv_veneer>
6000292a:	4b38      	ldr	r3, [pc, #224]	; (60002a0c <SendPagedDirectoryContents(FS&, char const*, int, int)+0x8ec>)
  ~FsBaseFile() {close();}
6000292c:	4628      	mov	r0, r5
6000292e:	60a3      	str	r3, [r4, #8]
60002930:	f002 fe1a 	bl	60005568 <___ZN10FsBaseFile5closeEv_veneer>
	}
60002934:	215c      	movs	r1, #92	; 0x5c
60002936:	4620      	mov	r0, r4
60002938:	f002 feb2 	bl	600056a0 <___ZdlPvj_veneer>
6000293c:	e5cc      	b.n	600024d8 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x3b8>
  bool isOpen() const {return m_fFile || m_xFile;}
6000293e:	6d63      	ldr	r3, [r4, #84]	; 0x54
60002940:	2b00      	cmp	r3, #0
60002942:	f47f acf1 	bne.w	60002328 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x208>
60002946:	e4f2      	b.n	6000232e <SendPagedDirectoryContents(FS&, char const*, int, int)+0x20e>
60002948:	6d63      	ldr	r3, [r4, #84]	; 0x54
           m_xFile ? m_xFile->isDir() : false;
6000294a:	2b00      	cmp	r3, #0
6000294c:	d0a6      	beq.n	6000289c <SendPagedDirectoryContents(FS&, char const*, int, int)+0x77c>
6000294e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
60002952:	f013 0f50 	tst.w	r3, #80	; 0x50
60002956:	d0a1      	beq.n	6000289c <SendPagedDirectoryContents(FS&, char const*, int, int)+0x77c>
60002958:	210e      	movs	r1, #14
6000295a:	482e      	ldr	r0, [pc, #184]	; (60002a14 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x8f4>)
6000295c:	f002 fe90 	bl	60005680 <__usb_serial_write_veneer>
60002960:	f1bb 0f00 	cmp.w	fp, #0
60002964:	f47f ae57 	bne.w	60002616 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x4f6>
60002968:	210a      	movs	r1, #10
6000296a:	482b      	ldr	r0, [pc, #172]	; (60002a18 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x8f8>)
6000296c:	f002 fe88 	bl	60005680 <__usb_serial_write_veneer>
60002970:	b137      	cbz	r7, 60002980 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x860>
							  return write((const uint8_t *)str, strlen(str)); }
60002972:	4638      	mov	r0, r7
60002974:	f002 fe08 	bl	60005588 <__strlen_veneer>
60002978:	4601      	mov	r1, r0
6000297a:	4638      	mov	r0, r7
6000297c:	f002 fe80 	bl	60005680 <__usb_serial_write_veneer>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
60002980:	202f      	movs	r0, #47	; 0x2f
60002982:	f002 fe69 	bl	60005658 <__usb_serial_putchar_veneer>
	size_t write(const char *str)			{ if (str == nullptr) return 0;
60002986:	e663      	b.n	60002650 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x530>
			f->close();
60002988:	4620      	mov	r0, r4
6000298a:	4790      	blx	r2
6000298c:	e560      	b.n	60002450 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x330>
		return (f) ? f->size() : 0;
6000298e:	4602      	mov	r2, r0
60002990:	4603      	mov	r3, r0
60002992:	e688      	b.n	600026a6 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x586>
			delete f;
60002994:	4620      	mov	r0, r4
60002996:	4798      	blx	r3
60002998:	e4d2      	b.n	60002340 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x220>
  bool isOpen() const {return m_fFile || m_xFile;}
6000299a:	6d63      	ldr	r3, [r4, #84]	; 0x54
6000299c:	2b00      	cmp	r3, #0
6000299e:	f47f ad6d 	bne.w	6000247c <SendPagedDirectoryContents(FS&, char const*, int, int)+0x35c>
600029a2:	e56e      	b.n	60002482 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x362>
600029a4:	4620      	mov	r0, r4
600029a6:	4798      	blx	r3
600029a8:	e574      	b.n	60002494 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x374>
600029aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	constexpr Print() : write_error(0) {}
600029ae:	910b      	str	r1, [sp, #44]	; 0x2c
600029b0:	f88d 1034 	strb.w	r1, [sp, #52]	; 0x34
		f = file.f;
600029b4:	910e      	str	r1, [sp, #56]	; 0x38
600029b6:	930c      	str	r3, [sp, #48]	; 0x30
600029b8:	e590      	b.n	600024dc <SendPagedDirectoryContents(FS&, char const*, int, int)+0x3bc>
600029ba:	9b27      	ldr	r3, [sp, #156]	; 0x9c
600029bc:	2b00      	cmp	r3, #0
600029be:	f47f abc5 	bne.w	6000214c <SendPagedDirectoryContents(FS&, char const*, int, int)+0x2c>
600029c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
600029c6:	9306      	str	r3, [sp, #24]
600029c8:	f88d 3020 	strb.w	r3, [sp, #32]
600029cc:	ad18      	add	r5, sp, #96	; 0x60
	constexpr File() : f(nullptr) { }
600029ce:	9309      	str	r3, [sp, #36]	; 0x24
600029d0:	4b12      	ldr	r3, [pc, #72]	; (60002a1c <SendPagedDirectoryContents(FS&, char const*, int, int)+0x8fc>)
600029d2:	9207      	str	r2, [sp, #28]
600029d4:	9302      	str	r3, [sp, #8]
600029d6:	9305      	str	r3, [sp, #20]
600029d8:	f7ff bbe3 	b.w	600021a2 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x82>
600029dc:	6d43      	ldr	r3, [r0, #84]	; 0x54
           m_xFile ? m_xFile->fileSize() : 0;
600029de:	2b00      	cmp	r3, #0
600029e0:	d03f      	beq.n	60002a62 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x942>
  uint64_t fileSize() const {return m_validLength;}
600029e2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
600029e6:	e65e      	b.n	600026a6 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x586>
600029e8:	4b0c      	ldr	r3, [pc, #48]	; (60002a1c <SendPagedDirectoryContents(FS&, char const*, int, int)+0x8fc>)
    File directory = fileStream.open(directoryPath);
600029ea:	4601      	mov	r1, r0
600029ec:	465a      	mov	r2, fp
600029ee:	a805      	add	r0, sp, #20
600029f0:	9302      	str	r3, [sp, #8]
600029f2:	2300      	movs	r3, #0
600029f4:	47a0      	blx	r4
600029f6:	f7ff bbd9 	b.w	600021ac <SendPagedDirectoryContents(FS&, char const*, int, int)+0x8c>
600029fa:	bf00      	nop
600029fc:	000004c5 	.word	0x000004c5
60002a00:	00000e69 	.word	0x00000e69
60002a04:	00001c55 	.word	0x00001c55
60002a08:	20003358 	.word	0x20003358
60002a0c:	20003240 	.word	0x20003240
60002a10:	2000a940 	.word	0x2000a940
60002a14:	2000a918 	.word	0x2000a918
60002a18:	2000a928 	.word	0x2000a928
60002a1c:	20003308 	.word	0x20003308
  bool isOpen() const {return m_fFile || m_xFile;}
60002a20:	9b27      	ldr	r3, [sp, #156]	; 0x9c
60002a22:	2b00      	cmp	r3, #0
60002a24:	f47f abe0 	bne.w	600021e8 <SendPagedDirectoryContents(FS&, char const*, int, int)+0xc8>
60002a28:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
60002a2c:	930e      	str	r3, [sp, #56]	; 0x38
60002a2e:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
60002a32:	9b02      	ldr	r3, [sp, #8]
60002a34:	930a      	str	r3, [sp, #40]	; 0x28
60002a36:	f7ff bbfe 	b.w	60002236 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x116>
60002a3a:	6d62      	ldr	r2, [r4, #84]	; 0x54
60002a3c:	2a00      	cmp	r2, #0
60002a3e:	f43f ad2e 	beq.w	6000249e <SendPagedDirectoryContents(FS&, char const*, int, int)+0x37e>
			f->close();
60002a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
60002a44:	4e39      	ldr	r6, [pc, #228]	; (60002b2c <SendPagedDirectoryContents(FS&, char const*, int, int)+0xa0c>)
60002a46:	42b3      	cmp	r3, r6
60002a48:	f43f ae98 	beq.w	6000277c <SendPagedDirectoryContents(FS&, char const*, int, int)+0x65c>
60002a4c:	e045      	b.n	60002ada <SendPagedDirectoryContents(FS&, char const*, int, int)+0x9ba>
60002a4e:	6d63      	ldr	r3, [r4, #84]	; 0x54
60002a50:	2b00      	cmp	r3, #0
60002a52:	f47f ad36 	bne.w	600024c2 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x3a2>
60002a56:	e538      	b.n	600024ca <SendPagedDirectoryContents(FS&, char const*, int, int)+0x3aa>
60002a58:	6d6b      	ldr	r3, [r5, #84]	; 0x54
60002a5a:	2b00      	cmp	r3, #0
60002a5c:	f47f af46 	bne.w	600028ec <SendPagedDirectoryContents(FS&, char const*, int, int)+0x7cc>
60002a60:	e748      	b.n	600028f4 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x7d4>
		return (f) ? f->size() : 0;
60002a62:	461a      	mov	r2, r3
60002a64:	e61f      	b.n	600026a6 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x586>
60002a66:	6d63      	ldr	r3, [r4, #84]	; 0x54
60002a68:	2b00      	cmp	r3, #0
60002a6a:	f47f ad50 	bne.w	6000250e <SendPagedDirectoryContents(FS&, char const*, int, int)+0x3ee>
60002a6e:	e552      	b.n	60002516 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x3f6>
60002a70:	6d63      	ldr	r3, [r4, #84]	; 0x54
60002a72:	2b00      	cmp	r3, #0
60002a74:	f47f ad8a 	bne.w	6000258c <SendPagedDirectoryContents(FS&, char const*, int, int)+0x46c>
60002a78:	e58c      	b.n	60002594 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x474>
60002a7a:	4798      	blx	r3
60002a7c:	4602      	mov	r2, r0
60002a7e:	460b      	mov	r3, r1
60002a80:	e611      	b.n	600026a6 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x586>
		return filename;
60002a82:	f8d4 b058 	ldr.w	fp, [r4, #88]	; 0x58
60002a86:	e400      	b.n	6000228a <SendPagedDirectoryContents(FS&, char const*, int, int)+0x16a>
		return (f) ? f->isOpen() : false;
60002a88:	4620      	mov	r0, r4
60002a8a:	4790      	blx	r2
60002a8c:	2800      	cmp	r0, #0
60002a8e:	f43f ad06 	beq.w	6000249e <SendPagedDirectoryContents(FS&, char const*, int, int)+0x37e>
		if (f) {
60002a92:	9c0e      	ldr	r4, [sp, #56]	; 0x38
60002a94:	2c00      	cmp	r4, #0
60002a96:	f43f ad02 	beq.w	6000249e <SendPagedDirectoryContents(FS&, char const*, int, int)+0x37e>
			f->close();
60002a9a:	6823      	ldr	r3, [r4, #0]
60002a9c:	e669      	b.n	60002772 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x652>
60002a9e:	4620      	mov	r0, r4
60002aa0:	4798      	blx	r3
60002aa2:	e512      	b.n	600024ca <SendPagedDirectoryContents(FS&, char const*, int, int)+0x3aa>
		return (f) ? f->openNextFile(mode) : *this;
60002aa4:	2200      	movs	r2, #0
60002aa6:	a80a      	add	r0, sp, #40	; 0x28
60002aa8:	4798      	blx	r3
60002aaa:	f7ff bbc9 	b.w	60002240 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x120>
			f->close();
60002aae:	4628      	mov	r0, r5
60002ab0:	4798      	blx	r3
60002ab2:	e71f      	b.n	600028f4 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x7d4>
60002ab4:	6d63      	ldr	r3, [r4, #84]	; 0x54
60002ab6:	2b00      	cmp	r3, #0
60002ab8:	f47f af34 	bne.w	60002924 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x804>
60002abc:	e735      	b.n	6000292a <SendPagedDirectoryContents(FS&, char const*, int, int)+0x80a>
60002abe:	6d63      	ldr	r3, [r4, #84]	; 0x54
60002ac0:	2b00      	cmp	r3, #0
60002ac2:	f47f ae65 	bne.w	60002790 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x670>
60002ac6:	e667      	b.n	60002798 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x678>
60002ac8:	4620      	mov	r0, r4
60002aca:	4798      	blx	r3
60002acc:	e523      	b.n	60002516 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x3f6>
60002ace:	4620      	mov	r0, r4
60002ad0:	4798      	blx	r3
60002ad2:	e55f      	b.n	60002594 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x474>
			delete f;
60002ad4:	4620      	mov	r0, r4
60002ad6:	4798      	blx	r3
60002ad8:	e4fe      	b.n	600024d8 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x3b8>
			f->close();
60002ada:	4620      	mov	r0, r4
60002adc:	4798      	blx	r3
60002ade:	e65b      	b.n	60002798 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x678>
60002ae0:	6d63      	ldr	r3, [r4, #84]	; 0x54
60002ae2:	2b00      	cmp	r3, #0
60002ae4:	f47f ae86 	bne.w	600027f4 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x6d4>
60002ae8:	e687      	b.n	600027fa <SendPagedDirectoryContents(FS&, char const*, int, int)+0x6da>
60002aea:	6d63      	ldr	r3, [r4, #84]	; 0x54
60002aec:	2b00      	cmp	r3, #0
60002aee:	f47f ad28 	bne.w	60002542 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x422>
60002af2:	e529      	b.n	60002548 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x428>
60002af4:	6d63      	ldr	r3, [r4, #84]	; 0x54
60002af6:	2b00      	cmp	r3, #0
60002af8:	f47f ad62 	bne.w	600025c0 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x4a0>
60002afc:	e563      	b.n	600025c6 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x4a6>
			delete f;
60002afe:	4620      	mov	r0, r4
60002b00:	4798      	blx	r3
    return true;
60002b02:	e569      	b.n	600025d8 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x4b8>
60002b04:	4620      	mov	r0, r4
60002b06:	4798      	blx	r3
60002b08:	e527      	b.n	6000255a <SendPagedDirectoryContents(FS&, char const*, int, int)+0x43a>
60002b0a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
60002b0c:	2b00      	cmp	r3, #0
60002b0e:	f47f ae57 	bne.w	600027c0 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x6a0>
60002b12:	e659      	b.n	600027c8 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x6a8>
			f->close();
60002b14:	4628      	mov	r0, r5
60002b16:	4798      	blx	r3
60002b18:	e656      	b.n	600027c8 <SendPagedDirectoryContents(FS&, char const*, int, int)+0x6a8>
			delete f;
60002b1a:	4620      	mov	r0, r4
60002b1c:	4798      	blx	r3
60002b1e:	e675      	b.n	6000280c <SendPagedDirectoryContents(FS&, char const*, int, int)+0x6ec>
				filename = &zeroterm;
60002b20:	4b03      	ldr	r3, [pc, #12]	; (60002b30 <SendPagedDirectoryContents(FS&, char const*, int, int)+0xa10>)
60002b22:	469b      	mov	fp, r3
60002b24:	65a3      	str	r3, [r4, #88]	; 0x58
60002b26:	f7ff bbb0 	b.w	6000228a <SendPagedDirectoryContents(FS&, char const*, int, int)+0x16a>
60002b2a:	bf00      	nop
60002b2c:	00000e69 	.word	0x00000e69
60002b30:	2005e541 	.word	0x2005e541

60002b34 <CopyFile(char const*, char const*, FS&)>:
    SendU16(EndDirectoryListToken);
}

FLASHMEM bool CopyFile(const char* SourcePath, const char* DestinationPath, FS& fs)
{
    File sourceFile = fs.open(SourcePath, FILE_READ);
60002b34:	6813      	ldr	r3, [r2, #0]
{
60002b36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
60002b3a:	f8df a300 	ldr.w	sl, [pc, #768]	; 60002e3c <CopyFile(char const*, char const*, FS&)+0x308>
60002b3e:	b0a1      	sub	sp, #132	; 0x84
    File sourceFile = fs.open(SourcePath, FILE_READ);
60002b40:	681c      	ldr	r4, [r3, #0]
{
60002b42:	4615      	mov	r5, r2
60002b44:	4606      	mov	r6, r0
60002b46:	4688      	mov	r8, r1
60002b48:	4554      	cmp	r4, sl
60002b4a:	f040 82e1 	bne.w	60003110 <CopyFile(char const*, char const*, FS&)+0x5dc>
		SDFAT_FILE file = sdfs.open(filepath, flags);
60002b4e:	2300      	movs	r3, #0
60002b50:	4602      	mov	r2, r0
60002b52:	1d29      	adds	r1, r5, #4
60002b54:	a80c      	add	r0, sp, #48	; 0x30
60002b56:	f002 fdbb 	bl	600056d0 <___ZN8FsVolume4openEPKci_veneer>
60002b5a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
60002b5c:	2b00      	cmp	r3, #0
60002b5e:	f000 82c7 	beq.w	600030f0 <CopyFile(char const*, char const*, FS&)+0x5bc>
		if (file) return File(new SDFile(file));
60002b62:	205c      	movs	r0, #92	; 0x5c
class FileImpl {
60002b64:	2700      	movs	r7, #0
60002b66:	f002 fdab 	bl	600056c0 <___Znwj_veneer>
class Print
60002b6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
60002b6c:	f10d 0940 	add.w	r9, sp, #64	; 0x40
60002b70:	4604      	mov	r4, r0
60002b72:	60c3      	str	r3, [r0, #12]
60002b74:	3018      	adds	r0, #24
class Stream : public Print
60002b76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
60002b78:	4649      	mov	r1, r9
60002b7a:	f840 7c14 	str.w	r7, [r0, #-20]
60002b7e:	f840 3c08 	str.w	r3, [r0, #-8]
60002b82:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
60002b86:	f800 3c04 	strb.w	r3, [r0, #-4]
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
60002b8a:	4ba2      	ldr	r3, [pc, #648]	; (60002e14 <CopyFile(char const*, char const*, FS&)+0x2e0>)
60002b8c:	f840 3c18 	str.w	r3, [r0, #-24]
60002b90:	4ba1      	ldr	r3, [pc, #644]	; (60002e18 <CopyFile(char const*, char const*, FS&)+0x2e4>)
60002b92:	f840 3c10 	str.w	r3, [r0, #-16]
60002b96:	f002 fd6f 	bl	60005678 <___ZN10FsBaseFileC2ERKS__veneer>
		if (f) f->refcount++;
60002b9a:	6863      	ldr	r3, [r4, #4]
60002b9c:	65a7      	str	r7, [r4, #88]	; 0x58
60002b9e:	3301      	adds	r3, #1
	constexpr Print() : write_error(0) {}
60002ba0:	9703      	str	r7, [sp, #12]
	constexpr Stream() : _timeout(1000), read_error(0) {}
60002ba2:	f88d 7014 	strb.w	r7, [sp, #20]
60002ba6:	6063      	str	r3, [r4, #4]
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
60002ba8:	4b9c      	ldr	r3, [pc, #624]	; (60002e1c <CopyFile(char const*, char const*, FS&)+0x2e8>)
	File(FileImpl *file) {
60002baa:	4f9d      	ldr	r7, [pc, #628]	; (60002e20 <CopyFile(char const*, char const*, FS&)+0x2ec>)
60002bac:	60a3      	str	r3, [r4, #8]
60002bae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
		f = file;
60002bb2:	9406      	str	r4, [sp, #24]
60002bb4:	9304      	str	r3, [sp, #16]
	File(FileImpl *file) {
60002bb6:	9702      	str	r7, [sp, #8]
60002bb8:	4b9a      	ldr	r3, [pc, #616]	; (60002e24 <CopyFile(char const*, char const*, FS&)+0x2f0>)
  ~FsBaseFile() {close();}
60002bba:	4648      	mov	r0, r9
60002bbc:	930c      	str	r3, [sp, #48]	; 0x30
60002bbe:	f002 fcd3 	bl	60005568 <___ZN10FsBaseFile5closeEv_veneer>
    if (!sourceFile)
60002bc2:	9806      	ldr	r0, [sp, #24]
		return (f) ? f->isOpen() : false;
60002bc4:	2800      	cmp	r0, #0
60002bc6:	f000 81d2 	beq.w	60002f6e <CopyFile(char const*, char const*, FS&)+0x43a>
60002bca:	6803      	ldr	r3, [r0, #0]
60002bcc:	f8df b270 	ldr.w	fp, [pc, #624]	; 60002e40 <CopyFile(char const*, char const*, FS&)+0x30c>
60002bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
60002bd2:	455b      	cmp	r3, fp
60002bd4:	f040 81c7 	bne.w	60002f66 <CopyFile(char const*, char const*, FS&)+0x432>
  bool isOpen() const {return m_fFile || m_xFile;}
60002bd8:	6d03      	ldr	r3, [r0, #80]	; 0x50
60002bda:	2b00      	cmp	r3, #0
60002bdc:	f000 82ae 	beq.w	6000313c <CopyFile(char const*, char const*, FS&)+0x608>
        SendU16(FailToken);
        Serial.printf("Failed to open source file: %s\n", SourcePath);
        return false;
    }

    File destinationFile = fs.open(DestinationPath, FILE_WRITE);
60002be0:	682b      	ldr	r3, [r5, #0]
60002be2:	681c      	ldr	r4, [r3, #0]
60002be4:	4554      	cmp	r4, sl
60002be6:	f040 82b2 	bne.w	6000314e <CopyFile(char const*, char const*, FS&)+0x61a>
		SDFAT_FILE file = sdfs.open(filepath, flags);
60002bea:	f244 2302 	movw	r3, #16898	; 0x4202
60002bee:	1d29      	adds	r1, r5, #4
60002bf0:	4642      	mov	r2, r8
60002bf2:	a80c      	add	r0, sp, #48	; 0x30
60002bf4:	f002 fd6c 	bl	600056d0 <___ZN8FsVolume4openEPKci_veneer>
60002bf8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
60002bfa:	2b00      	cmp	r3, #0
60002bfc:	f000 828f 	beq.w	6000311e <CopyFile(char const*, char const*, FS&)+0x5ea>
		if (file) return File(new SDFile(file));
60002c00:	205c      	movs	r0, #92	; 0x5c
class FileImpl {
60002c02:	2500      	movs	r5, #0
60002c04:	f002 fd5c 	bl	600056c0 <___Znwj_veneer>
class Print
60002c08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
60002c0a:	f10d 0940 	add.w	r9, sp, #64	; 0x40
60002c0e:	4604      	mov	r4, r0
60002c10:	60c3      	str	r3, [r0, #12]
60002c12:	3018      	adds	r0, #24
class Stream : public Print
60002c14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
60002c16:	4649      	mov	r1, r9
60002c18:	f840 5c14 	str.w	r5, [r0, #-20]
60002c1c:	f840 3c08 	str.w	r3, [r0, #-8]
60002c20:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
60002c24:	f800 3c04 	strb.w	r3, [r0, #-4]
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
60002c28:	4b7a      	ldr	r3, [pc, #488]	; (60002e14 <CopyFile(char const*, char const*, FS&)+0x2e0>)
60002c2a:	f840 3c18 	str.w	r3, [r0, #-24]
60002c2e:	4b7a      	ldr	r3, [pc, #488]	; (60002e18 <CopyFile(char const*, char const*, FS&)+0x2e4>)
60002c30:	f840 3c10 	str.w	r3, [r0, #-16]
60002c34:	f002 fd20 	bl	60005678 <___ZN10FsBaseFileC2ERKS__veneer>
		if (f) f->refcount++;
60002c38:	6863      	ldr	r3, [r4, #4]
60002c3a:	65a5      	str	r5, [r4, #88]	; 0x58
60002c3c:	3301      	adds	r3, #1
	constexpr Print() : write_error(0) {}
60002c3e:	9508      	str	r5, [sp, #32]
	constexpr Stream() : _timeout(1000), read_error(0) {}
60002c40:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
60002c44:	6063      	str	r3, [r4, #4]
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
60002c46:	4b75      	ldr	r3, [pc, #468]	; (60002e1c <CopyFile(char const*, char const*, FS&)+0x2e8>)
	File(FileImpl *file) {
60002c48:	9707      	str	r7, [sp, #28]
60002c4a:	60a3      	str	r3, [r4, #8]
60002c4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
		f = file;
60002c50:	940b      	str	r4, [sp, #44]	; 0x2c
60002c52:	9309      	str	r3, [sp, #36]	; 0x24
60002c54:	4b73      	ldr	r3, [pc, #460]	; (60002e24 <CopyFile(char const*, char const*, FS&)+0x2f0>)
  ~FsBaseFile() {close();}
60002c56:	4648      	mov	r0, r9
60002c58:	930c      	str	r3, [sp, #48]	; 0x30
60002c5a:	f002 fc85 	bl	60005568 <___ZN10FsBaseFile5closeEv_veneer>
    if (!destinationFile)
60002c5e:	980b      	ldr	r0, [sp, #44]	; 0x2c
		return (f) ? f->isOpen() : false;
60002c60:	2800      	cmp	r0, #0
60002c62:	f000 8195 	beq.w	60002f90 <CopyFile(char const*, char const*, FS&)+0x45c>
60002c66:	6803      	ldr	r3, [r0, #0]
60002c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
60002c6a:	455b      	cmp	r3, fp
60002c6c:	f040 818c 	bne.w	60002f88 <CopyFile(char const*, char const*, FS&)+0x454>
  bool isOpen() const {return m_fFile || m_xFile;}
60002c70:	6d03      	ldr	r3, [r0, #80]	; 0x50
60002c72:	2b00      	cmp	r3, #0
60002c74:	f000 8276 	beq.w	60003164 <CopyFile(char const*, char const*, FS&)+0x630>
		return (f) ? f->available() : 0;
60002c78:	9b06      	ldr	r3, [sp, #24]
60002c7a:	2b00      	cmp	r3, #0
60002c7c:	d036      	beq.n	60002cec <CopyFile(char const*, char const*, FS&)+0x1b8>
60002c7e:	4c6a      	ldr	r4, [pc, #424]	; (60002e28 <CopyFile(char const*, char const*, FS&)+0x2f4>)
60002c80:	4e6a      	ldr	r6, [pc, #424]	; (60002e2c <CopyFile(char const*, char const*, FS&)+0x2f8>)
60002c82:	4d6b      	ldr	r5, [pc, #428]	; (60002e30 <CopyFile(char const*, char const*, FS&)+0x2fc>)
60002c84:	681a      	ldr	r2, [r3, #0]
60002c86:	6912      	ldr	r2, [r2, #16]
60002c88:	42a2      	cmp	r2, r4
60002c8a:	f040 80db 	bne.w	60002e44 <CopyFile(char const*, char const*, FS&)+0x310>
    return m_fFile ? m_fFile->available() :
60002c8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
60002c90:	2a00      	cmp	r2, #0
60002c92:	f000 8145 	beq.w	60002f20 <CopyFile(char const*, char const*, FS&)+0x3ec>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
60002c96:	7811      	ldrb	r1, [r2, #0]
60002c98:	0708      	lsls	r0, r1, #28
60002c9a:	f140 80d9 	bpl.w	60002e50 <CopyFile(char const*, char const*, FS&)+0x31c>
60002c9e:	69d0      	ldr	r0, [r2, #28]
60002ca0:	6953      	ldr	r3, [r2, #20]
    return n > INT_MAX ? INT_MAX : n;
60002ca2:	1ac0      	subs	r0, r0, r3
60002ca4:	f140 80d0 	bpl.w	60002e48 <CopyFile(char const*, char const*, FS&)+0x314>
    }

    while (sourceFile.available())
    {
        uint8_t buf[64];
        size_t len = sourceFile.read(buf, sizeof(buf));
60002ca8:	9a06      	ldr	r2, [sp, #24]
		return (f) ? f->read(buf, nbyte) : 0;
60002caa:	b16a      	cbz	r2, 60002cc8 <CopyFile(char const*, char const*, FS&)+0x194>
60002cac:	6813      	ldr	r3, [r2, #0]
60002cae:	689b      	ldr	r3, [r3, #8]
60002cb0:	42b3      	cmp	r3, r6
60002cb2:	f040 814e 	bne.w	60002f52 <CopyFile(char const*, char const*, FS&)+0x41e>
    return m_fFile ? m_fFile->read(buf, count) :
60002cb6:	6d10      	ldr	r0, [r2, #80]	; 0x50
60002cb8:	2800      	cmp	r0, #0
60002cba:	f000 811f 	beq.w	60002efc <CopyFile(char const*, char const*, FS&)+0x3c8>
60002cbe:	2240      	movs	r2, #64	; 0x40
60002cc0:	a90c      	add	r1, sp, #48	; 0x30
60002cc2:	f002 fc71 	bl	600055a8 <___ZN7FatFile4readEPvj_veneer>
60002cc6:	4602      	mov	r2, r0
		return (f) ? f->write((void*)buf, size) : 0;
60002cc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
60002cca:	b163      	cbz	r3, 60002ce6 <CopyFile(char const*, char const*, FS&)+0x1b2>
60002ccc:	6819      	ldr	r1, [r3, #0]
60002cce:	f8d1 800c 	ldr.w	r8, [r1, #12]
60002cd2:	45a8      	cmp	r8, r5
60002cd4:	f040 8143 	bne.w	60002f5e <CopyFile(char const*, char const*, FS&)+0x42a>
    return m_fFile ? m_fFile->write(buf, count) :
60002cd8:	6d18      	ldr	r0, [r3, #80]	; 0x50
60002cda:	2800      	cmp	r0, #0
60002cdc:	f000 8118 	beq.w	60002f10 <CopyFile(char const*, char const*, FS&)+0x3dc>
60002ce0:	a90c      	add	r1, sp, #48	; 0x30
60002ce2:	f002 fcd5 	bl	60005690 <___ZN7FatFile5writeEPKvj_veneer>
		return (f) ? f->available() : 0;
60002ce6:	9b06      	ldr	r3, [sp, #24]
60002ce8:	2b00      	cmp	r3, #0
60002cea:	d1cb      	bne.n	60002c84 <CopyFile(char const*, char const*, FS&)+0x150>
		if (f) {
60002cec:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
60002cee:	2c00      	cmp	r4, #0
60002cf0:	d04d      	beq.n	60002d8e <CopyFile(char const*, char const*, FS&)+0x25a>
			f->close();
60002cf2:	6823      	ldr	r3, [r4, #0]
60002cf4:	4d4f      	ldr	r5, [pc, #316]	; (60002e34 <CopyFile(char const*, char const*, FS&)+0x300>)
60002cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
60002cf8:	42ab      	cmp	r3, r5
60002cfa:	f040 8244 	bne.w	60003186 <CopyFile(char const*, char const*, FS&)+0x652>
		if (filename) {
60002cfe:	6da0      	ldr	r0, [r4, #88]	; 0x58
60002d00:	b118      	cbz	r0, 60002d0a <CopyFile(char const*, char const*, FS&)+0x1d6>
			free(filename);
60002d02:	f002 fc29 	bl	60005558 <__free_veneer>
			filename = nullptr;
60002d06:	2300      	movs	r3, #0
60002d08:	65a3      	str	r3, [r4, #88]	; 0x58
  bool isOpen() const {return m_fFile || m_xFile;}
60002d0a:	6d23      	ldr	r3, [r4, #80]	; 0x50
60002d0c:	2b00      	cmp	r3, #0
60002d0e:	f000 8235 	beq.w	6000317c <CopyFile(char const*, char const*, FS&)+0x648>
			sdfatfile.close();
60002d12:	f104 0018 	add.w	r0, r4, #24
60002d16:	f002 fc27 	bl	60005568 <___ZN10FsBaseFile5closeEv_veneer>
		if (--(f->refcount) == 0) {
60002d1a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
60002d1c:	6874      	ldr	r4, [r6, #4]
60002d1e:	3c01      	subs	r4, #1
60002d20:	6074      	str	r4, [r6, #4]
60002d22:	2c00      	cmp	r4, #0
60002d24:	d133      	bne.n	60002d8e <CopyFile(char const*, char const*, FS&)+0x25a>
			f->close();
60002d26:	6833      	ldr	r3, [r6, #0]
60002d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
60002d2a:	42ab      	cmp	r3, r5
60002d2c:	f040 8243 	bne.w	600031b6 <CopyFile(char const*, char const*, FS&)+0x682>
		if (filename) {
60002d30:	6db0      	ldr	r0, [r6, #88]	; 0x58
60002d32:	b110      	cbz	r0, 60002d3a <CopyFile(char const*, char const*, FS&)+0x206>
			free(filename);
60002d34:	f002 fc10 	bl	60005558 <__free_veneer>
			filename = nullptr;
60002d38:	65b4      	str	r4, [r6, #88]	; 0x58
60002d3a:	6d33      	ldr	r3, [r6, #80]	; 0x50
60002d3c:	2b00      	cmp	r3, #0
60002d3e:	f000 822d 	beq.w	6000319c <CopyFile(char const*, char const*, FS&)+0x668>
			sdfatfile.close();
60002d42:	f106 0018 	add.w	r0, r6, #24
60002d46:	f002 fc0f 	bl	60005568 <___ZN10FsBaseFile5closeEv_veneer>
			delete f;
60002d4a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
60002d4c:	b1fc      	cbz	r4, 60002d8e <CopyFile(char const*, char const*, FS&)+0x25a>
60002d4e:	6823      	ldr	r3, [r4, #0]
60002d50:	4a39      	ldr	r2, [pc, #228]	; (60002e38 <CopyFile(char const*, char const*, FS&)+0x304>)
60002d52:	685b      	ldr	r3, [r3, #4]
60002d54:	4293      	cmp	r3, r2
60002d56:	f040 8256 	bne.w	60003206 <CopyFile(char const*, char const*, FS&)+0x6d2>
	virtual ~SDFile(void) {
60002d5a:	4b2e      	ldr	r3, [pc, #184]	; (60002e14 <CopyFile(char const*, char const*, FS&)+0x2e0>)
		if (filename) {
60002d5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
	virtual ~SDFile(void) {
60002d5e:	6023      	str	r3, [r4, #0]
		if (filename) {
60002d60:	b118      	cbz	r0, 60002d6a <CopyFile(char const*, char const*, FS&)+0x236>
			free(filename);
60002d62:	f002 fbf9 	bl	60005558 <__free_veneer>
			filename = nullptr;
60002d66:	2300      	movs	r3, #0
60002d68:	65a3      	str	r3, [r4, #88]	; 0x58
60002d6a:	6d23      	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
60002d6c:	f104 0518 	add.w	r5, r4, #24
60002d70:	2b00      	cmp	r3, #0
60002d72:	f000 823e 	beq.w	600031f2 <CopyFile(char const*, char const*, FS&)+0x6be>
60002d76:	4628      	mov	r0, r5
60002d78:	f002 fbf6 	bl	60005568 <___ZN10FsBaseFile5closeEv_veneer>
60002d7c:	4b29      	ldr	r3, [pc, #164]	; (60002e24 <CopyFile(char const*, char const*, FS&)+0x2f0>)
  ~FsBaseFile() {close();}
60002d7e:	4628      	mov	r0, r5
60002d80:	60a3      	str	r3, [r4, #8]
60002d82:	f002 fbf1 	bl	60005568 <___ZN10FsBaseFile5closeEv_veneer>
	}
60002d86:	215c      	movs	r1, #92	; 0x5c
60002d88:	4620      	mov	r0, r4
60002d8a:	f002 fc89 	bl	600056a0 <___ZdlPvj_veneer>
    }

    sourceFile.close();
    destinationFile.close();

    return true;
60002d8e:	2401      	movs	r4, #1
		if (f) dec_refcount();
60002d90:	9d06      	ldr	r5, [sp, #24]
	virtual ~File() {
60002d92:	9702      	str	r7, [sp, #8]
		if (f) dec_refcount();
60002d94:	2d00      	cmp	r5, #0
60002d96:	d039      	beq.n	60002e0c <CopyFile(char const*, char const*, FS&)+0x2d8>
		if (--(f->refcount) == 0) {
60002d98:	686e      	ldr	r6, [r5, #4]
60002d9a:	3e01      	subs	r6, #1
60002d9c:	606e      	str	r6, [r5, #4]
60002d9e:	2e00      	cmp	r6, #0
60002da0:	d134      	bne.n	60002e0c <CopyFile(char const*, char const*, FS&)+0x2d8>
			f->close();
60002da2:	682b      	ldr	r3, [r5, #0]
60002da4:	4a23      	ldr	r2, [pc, #140]	; (60002e34 <CopyFile(char const*, char const*, FS&)+0x300>)
60002da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
60002da8:	4293      	cmp	r3, r2
60002daa:	f040 81fc 	bne.w	600031a6 <CopyFile(char const*, char const*, FS&)+0x672>
		if (filename) {
60002dae:	6da8      	ldr	r0, [r5, #88]	; 0x58
60002db0:	b110      	cbz	r0, 60002db8 <CopyFile(char const*, char const*, FS&)+0x284>
			free(filename);
60002db2:	f002 fbd1 	bl	60005558 <__free_veneer>
			filename = nullptr;
60002db6:	65ae      	str	r6, [r5, #88]	; 0x58
  bool isOpen() const {return m_fFile || m_xFile;}
60002db8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
60002dba:	2b00      	cmp	r3, #0
60002dbc:	f000 81cd 	beq.w	6000315a <CopyFile(char const*, char const*, FS&)+0x626>
			sdfatfile.close();
60002dc0:	f105 0018 	add.w	r0, r5, #24
60002dc4:	f002 fbd0 	bl	60005568 <___ZN10FsBaseFile5closeEv_veneer>
			delete f;
60002dc8:	9d06      	ldr	r5, [sp, #24]
60002dca:	b1fd      	cbz	r5, 60002e0c <CopyFile(char const*, char const*, FS&)+0x2d8>
60002dcc:	682b      	ldr	r3, [r5, #0]
60002dce:	4a1a      	ldr	r2, [pc, #104]	; (60002e38 <CopyFile(char const*, char const*, FS&)+0x304>)
60002dd0:	685b      	ldr	r3, [r3, #4]
60002dd2:	4293      	cmp	r3, r2
60002dd4:	f040 8205 	bne.w	600031e2 <CopyFile(char const*, char const*, FS&)+0x6ae>
	virtual ~SDFile(void) {
60002dd8:	4b0e      	ldr	r3, [pc, #56]	; (60002e14 <CopyFile(char const*, char const*, FS&)+0x2e0>)
		if (filename) {
60002dda:	6da8      	ldr	r0, [r5, #88]	; 0x58
	virtual ~SDFile(void) {
60002ddc:	602b      	str	r3, [r5, #0]
		if (filename) {
60002dde:	b118      	cbz	r0, 60002de8 <CopyFile(char const*, char const*, FS&)+0x2b4>
			free(filename);
60002de0:	f002 fbba 	bl	60005558 <__free_veneer>
			filename = nullptr;
60002de4:	2300      	movs	r3, #0
60002de6:	65ab      	str	r3, [r5, #88]	; 0x58
60002de8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
			sdfatfile.close();
60002dea:	f105 0618 	add.w	r6, r5, #24
60002dee:	2b00      	cmp	r3, #0
60002df0:	f000 81ef 	beq.w	600031d2 <CopyFile(char const*, char const*, FS&)+0x69e>
60002df4:	4630      	mov	r0, r6
60002df6:	f002 fbb7 	bl	60005568 <___ZN10FsBaseFile5closeEv_veneer>
60002dfa:	4b0a      	ldr	r3, [pc, #40]	; (60002e24 <CopyFile(char const*, char const*, FS&)+0x2f0>)
  ~FsBaseFile() {close();}
60002dfc:	4630      	mov	r0, r6
60002dfe:	60ab      	str	r3, [r5, #8]
60002e00:	f002 fbb2 	bl	60005568 <___ZN10FsBaseFile5closeEv_veneer>
	}
60002e04:	215c      	movs	r1, #92	; 0x5c
60002e06:	4628      	mov	r0, r5
60002e08:	f002 fc4a 	bl	600056a0 <___ZdlPvj_veneer>
}
60002e0c:	4620      	mov	r0, r4
60002e0e:	b021      	add	sp, #132	; 0x84
60002e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
60002e14:	20003358 	.word	0x20003358
60002e18:	200033b4 	.word	0x200033b4
60002e1c:	20003334 	.word	0x20003334
60002e20:	20003308 	.word	0x20003308
60002e24:	20003240 	.word	0x20003240
60002e28:	00001b39 	.word	0x00001b39
60002e2c:	000019b9 	.word	0x000019b9
60002e30:	00001a89 	.word	0x00001a89
60002e34:	00000e69 	.word	0x00000e69
60002e38:	00001c55 	.word	0x00001c55
60002e3c:	00000e91 	.word	0x00000e91
60002e40:	000004c5 	.word	0x000004c5
		return (f) ? f->available() : 0;
60002e44:	4618      	mov	r0, r3
60002e46:	4790      	blx	r2
    while (sourceFile.available())
60002e48:	2800      	cmp	r0, #0
60002e4a:	f47f af2d 	bne.w	60002ca8 <CopyFile(char const*, char const*, FS&)+0x174>
60002e4e:	9b06      	ldr	r3, [sp, #24]
		if (f) {
60002e50:	2b00      	cmp	r3, #0
60002e52:	f43f af4b 	beq.w	60002cec <CopyFile(char const*, char const*, FS&)+0x1b8>
			f->close();
60002e56:	681a      	ldr	r2, [r3, #0]
60002e58:	4d9e      	ldr	r5, [pc, #632]	; (600030d4 <CopyFile(char const*, char const*, FS&)+0x5a0>)
60002e5a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
60002e5c:	42aa      	cmp	r2, r5
60002e5e:	f040 8195 	bne.w	6000318c <CopyFile(char const*, char const*, FS&)+0x658>
		if (filename) {
60002e62:	6d98      	ldr	r0, [r3, #88]	; 0x58
60002e64:	b128      	cbz	r0, 60002e72 <CopyFile(char const*, char const*, FS&)+0x33e>
60002e66:	9301      	str	r3, [sp, #4]
			free(filename);
60002e68:	f002 fb76 	bl	60005558 <__free_veneer>
			filename = nullptr;
60002e6c:	2200      	movs	r2, #0
60002e6e:	9b01      	ldr	r3, [sp, #4]
60002e70:	659a      	str	r2, [r3, #88]	; 0x58
  bool isOpen() const {return m_fFile || m_xFile;}
60002e72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
60002e74:	2a00      	cmp	r2, #0
60002e76:	f000 817c 	beq.w	60003172 <CopyFile(char const*, char const*, FS&)+0x63e>
			sdfatfile.close();
60002e7a:	f103 0018 	add.w	r0, r3, #24
60002e7e:	f002 fb73 	bl	60005568 <___ZN10FsBaseFile5closeEv_veneer>
		if (--(f->refcount) == 0) {
60002e82:	9e06      	ldr	r6, [sp, #24]
60002e84:	6874      	ldr	r4, [r6, #4]
60002e86:	3c01      	subs	r4, #1
60002e88:	6074      	str	r4, [r6, #4]
60002e8a:	2c00      	cmp	r4, #0
60002e8c:	d133      	bne.n	60002ef6 <CopyFile(char const*, char const*, FS&)+0x3c2>
			f->close();
60002e8e:	6833      	ldr	r3, [r6, #0]
60002e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
60002e92:	42ab      	cmp	r3, r5
60002e94:	f040 8192 	bne.w	600031bc <CopyFile(char const*, char const*, FS&)+0x688>
		if (filename) {
60002e98:	6db0      	ldr	r0, [r6, #88]	; 0x58
60002e9a:	b110      	cbz	r0, 60002ea2 <CopyFile(char const*, char const*, FS&)+0x36e>
			free(filename);
60002e9c:	f002 fb5c 	bl	60005558 <__free_veneer>
			filename = nullptr;
60002ea0:	65b4      	str	r4, [r6, #88]	; 0x58
60002ea2:	6d33      	ldr	r3, [r6, #80]	; 0x50
60002ea4:	2b00      	cmp	r3, #0
60002ea6:	f000 8174 	beq.w	60003192 <CopyFile(char const*, char const*, FS&)+0x65e>
			sdfatfile.close();
60002eaa:	f106 0018 	add.w	r0, r6, #24
60002eae:	f002 fb5b 	bl	60005568 <___ZN10FsBaseFile5closeEv_veneer>
			delete f;
60002eb2:	9c06      	ldr	r4, [sp, #24]
60002eb4:	b1fc      	cbz	r4, 60002ef6 <CopyFile(char const*, char const*, FS&)+0x3c2>
60002eb6:	6823      	ldr	r3, [r4, #0]
60002eb8:	4a87      	ldr	r2, [pc, #540]	; (600030d8 <CopyFile(char const*, char const*, FS&)+0x5a4>)
60002eba:	685b      	ldr	r3, [r3, #4]
60002ebc:	4293      	cmp	r3, r2
60002ebe:	f040 81a5 	bne.w	6000320c <CopyFile(char const*, char const*, FS&)+0x6d8>
	virtual ~SDFile(void) {
60002ec2:	4b86      	ldr	r3, [pc, #536]	; (600030dc <CopyFile(char const*, char const*, FS&)+0x5a8>)
		if (filename) {
60002ec4:	6da0      	ldr	r0, [r4, #88]	; 0x58
	virtual ~SDFile(void) {
60002ec6:	6023      	str	r3, [r4, #0]
		if (filename) {
60002ec8:	b118      	cbz	r0, 60002ed2 <CopyFile(char const*, char const*, FS&)+0x39e>
			free(filename);
60002eca:	f002 fb45 	bl	60005558 <__free_veneer>
			filename = nullptr;
60002ece:	2300      	movs	r3, #0
60002ed0:	65a3      	str	r3, [r4, #88]	; 0x58
60002ed2:	6d23      	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
60002ed4:	f104 0518 	add.w	r5, r4, #24
60002ed8:	2b00      	cmp	r3, #0
60002eda:	f000 8185 	beq.w	600031e8 <CopyFile(char const*, char const*, FS&)+0x6b4>
60002ede:	4628      	mov	r0, r5
60002ee0:	f002 fb42 	bl	60005568 <___ZN10FsBaseFile5closeEv_veneer>
60002ee4:	4b7e      	ldr	r3, [pc, #504]	; (600030e0 <CopyFile(char const*, char const*, FS&)+0x5ac>)
  ~FsBaseFile() {close();}
60002ee6:	4628      	mov	r0, r5
60002ee8:	60a3      	str	r3, [r4, #8]
60002eea:	f002 fb3d 	bl	60005568 <___ZN10FsBaseFile5closeEv_veneer>
	}
60002eee:	215c      	movs	r1, #92	; 0x5c
60002ef0:	4620      	mov	r0, r4
60002ef2:	f002 fbd5 	bl	600056a0 <___ZdlPvj_veneer>
		f = nullptr;
60002ef6:	2300      	movs	r3, #0
60002ef8:	9306      	str	r3, [sp, #24]
	}
60002efa:	e6f7      	b.n	60002cec <CopyFile(char const*, char const*, FS&)+0x1b8>
60002efc:	6d50      	ldr	r0, [r2, #84]	; 0x54
           m_xFile ? m_xFile->read(buf, count) : -1;
60002efe:	2800      	cmp	r0, #0
60002f00:	f000 8190 	beq.w	60003224 <CopyFile(char const*, char const*, FS&)+0x6f0>
60002f04:	2240      	movs	r2, #64	; 0x40
60002f06:	a90c      	add	r1, sp, #48	; 0x30
60002f08:	f002 fbde 	bl	600056c8 <___ZN9ExFatFile4readEPvj_veneer>
60002f0c:	4602      	mov	r2, r0
60002f0e:	e6db      	b.n	60002cc8 <CopyFile(char const*, char const*, FS&)+0x194>
60002f10:	6d58      	ldr	r0, [r3, #84]	; 0x54
           m_xFile ? m_xFile->write(buf, count) : 0;
60002f12:	2800      	cmp	r0, #0
60002f14:	f43f aee7 	beq.w	60002ce6 <CopyFile(char const*, char const*, FS&)+0x1b2>
60002f18:	a90c      	add	r1, sp, #48	; 0x30
60002f1a:	f002 fb6d 	bl	600055f8 <___ZN9ExFatFile5writeEPKvj_veneer>
60002f1e:	e6e2      	b.n	60002ce6 <CopyFile(char const*, char const*, FS&)+0x1b2>
60002f20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
           m_xFile ? m_xFile->available() : 0;
60002f22:	2a00      	cmp	r2, #0
60002f24:	d094      	beq.n	60002e50 <CopyFile(char const*, char const*, FS&)+0x31c>
    return isFile() ? fileSize() - curPosition() : 0;
60002f26:	f892 1031 	ldrb.w	r1, [r2, #49]	; 0x31
60002f2a:	0709      	lsls	r1, r1, #28
60002f2c:	d590      	bpl.n	60002e50 <CopyFile(char const*, char const*, FS&)+0x31c>
60002f2e:	6813      	ldr	r3, [r2, #0]
60002f30:	6910      	ldr	r0, [r2, #16]
60002f32:	1ac0      	subs	r0, r0, r3
60002f34:	6953      	ldr	r3, [r2, #20]
60002f36:	6852      	ldr	r2, [r2, #4]
60002f38:	eb63 0302 	sbc.w	r3, r3, r2
    return n > INT_MAX ? INT_MAX : n;
60002f3c:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
60002f40:	f173 0300 	sbcs.w	r3, r3, #0
60002f44:	d380      	bcc.n	60002e48 <CopyFile(char const*, char const*, FS&)+0x314>
60002f46:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
60002f4a:	2800      	cmp	r0, #0
60002f4c:	f47f aeac 	bne.w	60002ca8 <CopyFile(char const*, char const*, FS&)+0x174>
60002f50:	e77d      	b.n	60002e4e <CopyFile(char const*, char const*, FS&)+0x31a>
		return (f) ? f->read(buf, nbyte) : 0;
60002f52:	4610      	mov	r0, r2
60002f54:	a90c      	add	r1, sp, #48	; 0x30
60002f56:	2240      	movs	r2, #64	; 0x40
60002f58:	4798      	blx	r3
60002f5a:	4602      	mov	r2, r0
60002f5c:	e6b4      	b.n	60002cc8 <CopyFile(char const*, char const*, FS&)+0x194>
		return (f) ? f->write((void*)buf, size) : 0;
60002f5e:	4618      	mov	r0, r3
60002f60:	a90c      	add	r1, sp, #48	; 0x30
60002f62:	47c0      	blx	r8
60002f64:	e6bf      	b.n	60002ce6 <CopyFile(char const*, char const*, FS&)+0x1b2>
		return (f) ? f->isOpen() : false;
60002f66:	4798      	blx	r3
60002f68:	2800      	cmp	r0, #0
60002f6a:	f47f ae39 	bne.w	60002be0 <CopyFile(char const*, char const*, FS&)+0xac>
60002f6e:	207f      	movs	r0, #127	; 0x7f
        return false;
60002f70:	2400      	movs	r4, #0
60002f72:	f002 fb71 	bl	60005658 <__usb_serial_putchar_veneer>
60002f76:	209b      	movs	r0, #155	; 0x9b
60002f78:	f002 fb6e 	bl	60005658 <__usb_serial_putchar_veneer>
        Serial.printf("Failed to open source file: %s\n", SourcePath);
60002f7c:	4632      	mov	r2, r6
60002f7e:	4959      	ldr	r1, [pc, #356]	; (600030e4 <CopyFile(char const*, char const*, FS&)+0x5b0>)
60002f80:	4859      	ldr	r0, [pc, #356]	; (600030e8 <CopyFile(char const*, char const*, FS&)+0x5b4>)
60002f82:	f002 fb41 	bl	60005608 <___ZN5Print6printfEPKcz_veneer>
        return false;
60002f86:	e703      	b.n	60002d90 <CopyFile(char const*, char const*, FS&)+0x25c>
60002f88:	4798      	blx	r3
60002f8a:	2800      	cmp	r0, #0
60002f8c:	f47f ae74 	bne.w	60002c78 <CopyFile(char const*, char const*, FS&)+0x144>
60002f90:	207f      	movs	r0, #127	; 0x7f
60002f92:	f002 fb61 	bl	60005658 <__usb_serial_putchar_veneer>
60002f96:	209b      	movs	r0, #155	; 0x9b
60002f98:	f002 fb5e 	bl	60005658 <__usb_serial_putchar_veneer>
        Serial.printf("Failed to open destination file: %s\n", DestinationPath);
60002f9c:	4642      	mov	r2, r8
60002f9e:	4953      	ldr	r1, [pc, #332]	; (600030ec <CopyFile(char const*, char const*, FS&)+0x5b8>)
60002fa0:	4851      	ldr	r0, [pc, #324]	; (600030e8 <CopyFile(char const*, char const*, FS&)+0x5b4>)
60002fa2:	f002 fb31 	bl	60005608 <___ZN5Print6printfEPKcz_veneer>
		if (f) {
60002fa6:	9c06      	ldr	r4, [sp, #24]
60002fa8:	2c00      	cmp	r4, #0
60002faa:	f000 8110 	beq.w	600031ce <CopyFile(char const*, char const*, FS&)+0x69a>
			f->close();
60002fae:	6823      	ldr	r3, [r4, #0]
60002fb0:	4d48      	ldr	r5, [pc, #288]	; (600030d4 <CopyFile(char const*, char const*, FS&)+0x5a0>)
60002fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
60002fb4:	42ab      	cmp	r3, r5
60002fb6:	f040 8104 	bne.w	600031c2 <CopyFile(char const*, char const*, FS&)+0x68e>
		if (filename) {
60002fba:	6da0      	ldr	r0, [r4, #88]	; 0x58
60002fbc:	b118      	cbz	r0, 60002fc6 <CopyFile(char const*, char const*, FS&)+0x492>
			free(filename);
60002fbe:	f002 facb 	bl	60005558 <__free_veneer>
			filename = nullptr;
60002fc2:	2300      	movs	r3, #0
60002fc4:	65a3      	str	r3, [r4, #88]	; 0x58
  bool isOpen() const {return m_fFile || m_xFile;}
60002fc6:	6d23      	ldr	r3, [r4, #80]	; 0x50
60002fc8:	2b00      	cmp	r3, #0
60002fca:	f000 8126 	beq.w	6000321a <CopyFile(char const*, char const*, FS&)+0x6e6>
			sdfatfile.close();
60002fce:	f104 0018 	add.w	r0, r4, #24
60002fd2:	f002 fac9 	bl	60005568 <___ZN10FsBaseFile5closeEv_veneer>
		if (--(f->refcount) == 0) {
60002fd6:	9e06      	ldr	r6, [sp, #24]
60002fd8:	6874      	ldr	r4, [r6, #4]
60002fda:	3c01      	subs	r4, #1
60002fdc:	6074      	str	r4, [r6, #4]
60002fde:	2c00      	cmp	r4, #0
60002fe0:	d133      	bne.n	6000304a <CopyFile(char const*, char const*, FS&)+0x516>
			f->close();
60002fe2:	6833      	ldr	r3, [r6, #0]
60002fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
60002fe6:	42ab      	cmp	r3, r5
60002fe8:	f040 80ee 	bne.w	600031c8 <CopyFile(char const*, char const*, FS&)+0x694>
		if (filename) {
60002fec:	6db0      	ldr	r0, [r6, #88]	; 0x58
60002fee:	b110      	cbz	r0, 60002ff6 <CopyFile(char const*, char const*, FS&)+0x4c2>
			free(filename);
60002ff0:	f002 fab2 	bl	60005558 <__free_veneer>
			filename = nullptr;
60002ff4:	65b4      	str	r4, [r6, #88]	; 0x58
60002ff6:	6d33      	ldr	r3, [r6, #80]	; 0x50
60002ff8:	2b00      	cmp	r3, #0
60002ffa:	f000 8116 	beq.w	6000322a <CopyFile(char const*, char const*, FS&)+0x6f6>
			sdfatfile.close();
60002ffe:	f106 0018 	add.w	r0, r6, #24
60003002:	f002 fab1 	bl	60005568 <___ZN10FsBaseFile5closeEv_veneer>
			delete f;
60003006:	9c06      	ldr	r4, [sp, #24]
60003008:	b1fc      	cbz	r4, 6000304a <CopyFile(char const*, char const*, FS&)+0x516>
6000300a:	6823      	ldr	r3, [r4, #0]
6000300c:	4a32      	ldr	r2, [pc, #200]	; (600030d8 <CopyFile(char const*, char const*, FS&)+0x5a4>)
6000300e:	685b      	ldr	r3, [r3, #4]
60003010:	4293      	cmp	r3, r2
60003012:	f040 8114 	bne.w	6000323e <CopyFile(char const*, char const*, FS&)+0x70a>
	virtual ~SDFile(void) {
60003016:	4b31      	ldr	r3, [pc, #196]	; (600030dc <CopyFile(char const*, char const*, FS&)+0x5a8>)
		if (filename) {
60003018:	6da0      	ldr	r0, [r4, #88]	; 0x58
	virtual ~SDFile(void) {
6000301a:	6023      	str	r3, [r4, #0]
		if (filename) {
6000301c:	b118      	cbz	r0, 60003026 <CopyFile(char const*, char const*, FS&)+0x4f2>
			free(filename);
6000301e:	f002 fa9b 	bl	60005558 <__free_veneer>
			filename = nullptr;
60003022:	2300      	movs	r3, #0
60003024:	65a3      	str	r3, [r4, #88]	; 0x58
60003026:	6d23      	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
60003028:	f104 0518 	add.w	r5, r4, #24
6000302c:	2b00      	cmp	r3, #0
6000302e:	f000 8101 	beq.w	60003234 <CopyFile(char const*, char const*, FS&)+0x700>
60003032:	4628      	mov	r0, r5
60003034:	f002 fa98 	bl	60005568 <___ZN10FsBaseFile5closeEv_veneer>
60003038:	4b29      	ldr	r3, [pc, #164]	; (600030e0 <CopyFile(char const*, char const*, FS&)+0x5ac>)
  ~FsBaseFile() {close();}
6000303a:	4628      	mov	r0, r5
6000303c:	60a3      	str	r3, [r4, #8]
6000303e:	f002 fa93 	bl	60005568 <___ZN10FsBaseFile5closeEv_veneer>
	}
60003042:	215c      	movs	r1, #92	; 0x5c
60003044:	4620      	mov	r0, r4
60003046:	f002 fb2b 	bl	600056a0 <___ZdlPvj_veneer>
		f = nullptr;
6000304a:	2300      	movs	r3, #0
		if (f) dec_refcount();
6000304c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		f = nullptr;
6000304e:	9306      	str	r3, [sp, #24]
	virtual ~File() {
60003050:	9707      	str	r7, [sp, #28]
		if (f) dec_refcount();
60003052:	2c00      	cmp	r4, #0
60003054:	f43f ae9c 	beq.w	60002d90 <CopyFile(char const*, char const*, FS&)+0x25c>
		if (--(f->refcount) == 0) {
60003058:	6865      	ldr	r5, [r4, #4]
6000305a:	3d01      	subs	r5, #1
6000305c:	6065      	str	r5, [r4, #4]
6000305e:	2d00      	cmp	r5, #0
60003060:	f040 8085 	bne.w	6000316e <CopyFile(char const*, char const*, FS&)+0x63a>
			f->close();
60003064:	6823      	ldr	r3, [r4, #0]
60003066:	4a1b      	ldr	r2, [pc, #108]	; (600030d4 <CopyFile(char const*, char const*, FS&)+0x5a0>)
60003068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
6000306a:	4293      	cmp	r3, r2
6000306c:	f040 80b6 	bne.w	600031dc <CopyFile(char const*, char const*, FS&)+0x6a8>
		if (filename) {
60003070:	6da0      	ldr	r0, [r4, #88]	; 0x58
60003072:	b110      	cbz	r0, 6000307a <CopyFile(char const*, char const*, FS&)+0x546>
			free(filename);
60003074:	f002 fa70 	bl	60005558 <__free_veneer>
			filename = nullptr;
60003078:	65a5      	str	r5, [r4, #88]	; 0x58
  bool isOpen() const {return m_fFile || m_xFile;}
6000307a:	6d23      	ldr	r3, [r4, #80]	; 0x50
6000307c:	2b00      	cmp	r3, #0
6000307e:	f000 8095 	beq.w	600031ac <CopyFile(char const*, char const*, FS&)+0x678>
			sdfatfile.close();
60003082:	f104 0018 	add.w	r0, r4, #24
60003086:	f002 fa6f 	bl	60005568 <___ZN10FsBaseFile5closeEv_veneer>
			delete f;
6000308a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
6000308c:	2d00      	cmp	r5, #0
6000308e:	d06e      	beq.n	6000316e <CopyFile(char const*, char const*, FS&)+0x63a>
60003090:	682b      	ldr	r3, [r5, #0]
60003092:	4a11      	ldr	r2, [pc, #68]	; (600030d8 <CopyFile(char const*, char const*, FS&)+0x5a4>)
60003094:	685b      	ldr	r3, [r3, #4]
60003096:	4293      	cmp	r3, r2
60003098:	f040 80bb 	bne.w	60003212 <CopyFile(char const*, char const*, FS&)+0x6de>
	virtual ~SDFile(void) {
6000309c:	4b0f      	ldr	r3, [pc, #60]	; (600030dc <CopyFile(char const*, char const*, FS&)+0x5a8>)
		if (filename) {
6000309e:	6da8      	ldr	r0, [r5, #88]	; 0x58
	virtual ~SDFile(void) {
600030a0:	602b      	str	r3, [r5, #0]
		if (filename) {
600030a2:	b118      	cbz	r0, 600030ac <CopyFile(char const*, char const*, FS&)+0x578>
			free(filename);
600030a4:	f002 fa58 	bl	60005558 <__free_veneer>
			filename = nullptr;
600030a8:	2300      	movs	r3, #0
600030aa:	65ab      	str	r3, [r5, #88]	; 0x58
600030ac:	6d2b      	ldr	r3, [r5, #80]	; 0x50
			sdfatfile.close();
600030ae:	f105 0418 	add.w	r4, r5, #24
600030b2:	2b00      	cmp	r3, #0
600030b4:	f000 80a2 	beq.w	600031fc <CopyFile(char const*, char const*, FS&)+0x6c8>
600030b8:	4620      	mov	r0, r4
600030ba:	f002 fa55 	bl	60005568 <___ZN10FsBaseFile5closeEv_veneer>
600030be:	4b08      	ldr	r3, [pc, #32]	; (600030e0 <CopyFile(char const*, char const*, FS&)+0x5ac>)
  ~FsBaseFile() {close();}
600030c0:	4620      	mov	r0, r4
	}
600030c2:	2400      	movs	r4, #0
600030c4:	60ab      	str	r3, [r5, #8]
600030c6:	f002 fa4f 	bl	60005568 <___ZN10FsBaseFile5closeEv_veneer>
600030ca:	215c      	movs	r1, #92	; 0x5c
600030cc:	4628      	mov	r0, r5
600030ce:	f002 fae7 	bl	600056a0 <___ZdlPvj_veneer>
600030d2:	e65d      	b.n	60002d90 <CopyFile(char const*, char const*, FS&)+0x25c>
600030d4:	00000e69 	.word	0x00000e69
600030d8:	00001c55 	.word	0x00001c55
600030dc:	20003358 	.word	0x20003358
600030e0:	20003240 	.word	0x20003240
600030e4:	2000a974 	.word	0x2000a974
600030e8:	2000bfd8 	.word	0x2000bfd8
600030ec:	2000a994 	.word	0x2000a994
  bool isOpen() const {return m_fFile || m_xFile;}
600030f0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
600030f2:	2b00      	cmp	r3, #0
600030f4:	f47f ad35 	bne.w	60002b62 <CopyFile(char const*, char const*, FS&)+0x2e>
	constexpr File() : f(nullptr) { }
600030f8:	4f52      	ldr	r7, [pc, #328]	; (60003244 <CopyFile(char const*, char const*, FS&)+0x710>)
600030fa:	f10d 0940 	add.w	r9, sp, #64	; 0x40
600030fe:	9303      	str	r3, [sp, #12]
60003100:	f88d 3014 	strb.w	r3, [sp, #20]
60003104:	9306      	str	r3, [sp, #24]
60003106:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
6000310a:	9702      	str	r7, [sp, #8]
6000310c:	9304      	str	r3, [sp, #16]
6000310e:	e553      	b.n	60002bb8 <CopyFile(char const*, char const*, FS&)+0x84>
    File sourceFile = fs.open(SourcePath, FILE_READ);
60003110:	4602      	mov	r2, r0
60003112:	2300      	movs	r3, #0
60003114:	4629      	mov	r1, r5
60003116:	a802      	add	r0, sp, #8
60003118:	4f4a      	ldr	r7, [pc, #296]	; (60003244 <CopyFile(char const*, char const*, FS&)+0x710>)
6000311a:	47a0      	blx	r4
6000311c:	e551      	b.n	60002bc2 <CopyFile(char const*, char const*, FS&)+0x8e>
6000311e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
60003120:	2b00      	cmp	r3, #0
60003122:	f47f ad6d 	bne.w	60002c00 <CopyFile(char const*, char const*, FS&)+0xcc>
60003126:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
6000312a:	f10d 0940 	add.w	r9, sp, #64	; 0x40
6000312e:	9308      	str	r3, [sp, #32]
60003130:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
60003134:	9707      	str	r7, [sp, #28]
60003136:	9209      	str	r2, [sp, #36]	; 0x24
60003138:	930b      	str	r3, [sp, #44]	; 0x2c
6000313a:	e58b      	b.n	60002c54 <CopyFile(char const*, char const*, FS&)+0x120>
6000313c:	6d43      	ldr	r3, [r0, #84]	; 0x54
6000313e:	2b00      	cmp	r3, #0
60003140:	f43f af15 	beq.w	60002f6e <CopyFile(char const*, char const*, FS&)+0x43a>
    File destinationFile = fs.open(DestinationPath, FILE_WRITE);
60003144:	682b      	ldr	r3, [r5, #0]
60003146:	681c      	ldr	r4, [r3, #0]
60003148:	4554      	cmp	r4, sl
6000314a:	f43f ad4e 	beq.w	60002bea <CopyFile(char const*, char const*, FS&)+0xb6>
6000314e:	4629      	mov	r1, r5
60003150:	2301      	movs	r3, #1
60003152:	4642      	mov	r2, r8
60003154:	a807      	add	r0, sp, #28
60003156:	47a0      	blx	r4
60003158:	e581      	b.n	60002c5e <CopyFile(char const*, char const*, FS&)+0x12a>
6000315a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
6000315c:	2b00      	cmp	r3, #0
6000315e:	f47f ae2f 	bne.w	60002dc0 <CopyFile(char const*, char const*, FS&)+0x28c>
60003162:	e631      	b.n	60002dc8 <CopyFile(char const*, char const*, FS&)+0x294>
60003164:	6d43      	ldr	r3, [r0, #84]	; 0x54
60003166:	2b00      	cmp	r3, #0
60003168:	f47f ad86 	bne.w	60002c78 <CopyFile(char const*, char const*, FS&)+0x144>
6000316c:	e710      	b.n	60002f90 <CopyFile(char const*, char const*, FS&)+0x45c>
		return (f) ? f->read(buf, nbyte) : 0;
6000316e:	2400      	movs	r4, #0
60003170:	e60e      	b.n	60002d90 <CopyFile(char const*, char const*, FS&)+0x25c>
60003172:	6d5a      	ldr	r2, [r3, #84]	; 0x54
60003174:	2a00      	cmp	r2, #0
60003176:	f47f ae80 	bne.w	60002e7a <CopyFile(char const*, char const*, FS&)+0x346>
6000317a:	e682      	b.n	60002e82 <CopyFile(char const*, char const*, FS&)+0x34e>
6000317c:	6d63      	ldr	r3, [r4, #84]	; 0x54
6000317e:	2b00      	cmp	r3, #0
60003180:	f47f adc7 	bne.w	60002d12 <CopyFile(char const*, char const*, FS&)+0x1de>
60003184:	e5c9      	b.n	60002d1a <CopyFile(char const*, char const*, FS&)+0x1e6>
			f->close();
60003186:	4620      	mov	r0, r4
60003188:	4798      	blx	r3
6000318a:	e5c6      	b.n	60002d1a <CopyFile(char const*, char const*, FS&)+0x1e6>
6000318c:	4618      	mov	r0, r3
6000318e:	4790      	blx	r2
60003190:	e677      	b.n	60002e82 <CopyFile(char const*, char const*, FS&)+0x34e>
60003192:	6d73      	ldr	r3, [r6, #84]	; 0x54
60003194:	2b00      	cmp	r3, #0
60003196:	f47f ae88 	bne.w	60002eaa <CopyFile(char const*, char const*, FS&)+0x376>
6000319a:	e68a      	b.n	60002eb2 <CopyFile(char const*, char const*, FS&)+0x37e>
6000319c:	6d73      	ldr	r3, [r6, #84]	; 0x54
6000319e:	2b00      	cmp	r3, #0
600031a0:	f47f adcf 	bne.w	60002d42 <CopyFile(char const*, char const*, FS&)+0x20e>
600031a4:	e5d1      	b.n	60002d4a <CopyFile(char const*, char const*, FS&)+0x216>
			f->close();
600031a6:	4628      	mov	r0, r5
600031a8:	4798      	blx	r3
600031aa:	e60d      	b.n	60002dc8 <CopyFile(char const*, char const*, FS&)+0x294>
600031ac:	6d63      	ldr	r3, [r4, #84]	; 0x54
600031ae:	2b00      	cmp	r3, #0
600031b0:	f47f af67 	bne.w	60003082 <CopyFile(char const*, char const*, FS&)+0x54e>
600031b4:	e769      	b.n	6000308a <CopyFile(char const*, char const*, FS&)+0x556>
600031b6:	4630      	mov	r0, r6
600031b8:	4798      	blx	r3
600031ba:	e5c6      	b.n	60002d4a <CopyFile(char const*, char const*, FS&)+0x216>
600031bc:	4630      	mov	r0, r6
600031be:	4798      	blx	r3
600031c0:	e677      	b.n	60002eb2 <CopyFile(char const*, char const*, FS&)+0x37e>
			f->close();
600031c2:	4620      	mov	r0, r4
600031c4:	4798      	blx	r3
600031c6:	e706      	b.n	60002fd6 <CopyFile(char const*, char const*, FS&)+0x4a2>
			f->close();
600031c8:	4630      	mov	r0, r6
600031ca:	4798      	blx	r3
600031cc:	e71b      	b.n	60003006 <CopyFile(char const*, char const*, FS&)+0x4d2>
		if (f) dec_refcount();
600031ce:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
600031d0:	e73e      	b.n	60003050 <CopyFile(char const*, char const*, FS&)+0x51c>
600031d2:	6d6b      	ldr	r3, [r5, #84]	; 0x54
600031d4:	2b00      	cmp	r3, #0
600031d6:	f47f ae0d 	bne.w	60002df4 <CopyFile(char const*, char const*, FS&)+0x2c0>
600031da:	e60e      	b.n	60002dfa <CopyFile(char const*, char const*, FS&)+0x2c6>
			f->close();
600031dc:	4620      	mov	r0, r4
600031de:	4798      	blx	r3
600031e0:	e753      	b.n	6000308a <CopyFile(char const*, char const*, FS&)+0x556>
			delete f;
600031e2:	4628      	mov	r0, r5
600031e4:	4798      	blx	r3
600031e6:	e611      	b.n	60002e0c <CopyFile(char const*, char const*, FS&)+0x2d8>
600031e8:	6d63      	ldr	r3, [r4, #84]	; 0x54
600031ea:	2b00      	cmp	r3, #0
600031ec:	f47f ae77 	bne.w	60002ede <CopyFile(char const*, char const*, FS&)+0x3aa>
600031f0:	e678      	b.n	60002ee4 <CopyFile(char const*, char const*, FS&)+0x3b0>
600031f2:	6d63      	ldr	r3, [r4, #84]	; 0x54
600031f4:	2b00      	cmp	r3, #0
600031f6:	f47f adbe 	bne.w	60002d76 <CopyFile(char const*, char const*, FS&)+0x242>
600031fa:	e5bf      	b.n	60002d7c <CopyFile(char const*, char const*, FS&)+0x248>
600031fc:	6d6b      	ldr	r3, [r5, #84]	; 0x54
600031fe:	2b00      	cmp	r3, #0
60003200:	f47f af5a 	bne.w	600030b8 <CopyFile(char const*, char const*, FS&)+0x584>
60003204:	e75b      	b.n	600030be <CopyFile(char const*, char const*, FS&)+0x58a>
60003206:	4620      	mov	r0, r4
60003208:	4798      	blx	r3
		if (f) dec_refcount();
6000320a:	e5c0      	b.n	60002d8e <CopyFile(char const*, char const*, FS&)+0x25a>
			delete f;
6000320c:	4620      	mov	r0, r4
6000320e:	4798      	blx	r3
60003210:	e671      	b.n	60002ef6 <CopyFile(char const*, char const*, FS&)+0x3c2>
60003212:	4628      	mov	r0, r5
60003214:	2400      	movs	r4, #0
60003216:	4798      	blx	r3
60003218:	e5ba      	b.n	60002d90 <CopyFile(char const*, char const*, FS&)+0x25c>
6000321a:	6d63      	ldr	r3, [r4, #84]	; 0x54
6000321c:	2b00      	cmp	r3, #0
6000321e:	f47f aed6 	bne.w	60002fce <CopyFile(char const*, char const*, FS&)+0x49a>
60003222:	e6d8      	b.n	60002fd6 <CopyFile(char const*, char const*, FS&)+0x4a2>
60003224:	f04f 32ff 	mov.w	r2, #4294967295
60003228:	e54e      	b.n	60002cc8 <CopyFile(char const*, char const*, FS&)+0x194>
6000322a:	6d73      	ldr	r3, [r6, #84]	; 0x54
6000322c:	2b00      	cmp	r3, #0
6000322e:	f47f aee6 	bne.w	60002ffe <CopyFile(char const*, char const*, FS&)+0x4ca>
60003232:	e6e8      	b.n	60003006 <CopyFile(char const*, char const*, FS&)+0x4d2>
60003234:	6d63      	ldr	r3, [r4, #84]	; 0x54
60003236:	2b00      	cmp	r3, #0
60003238:	f47f aefb 	bne.w	60003032 <CopyFile(char const*, char const*, FS&)+0x4fe>
6000323c:	e6fc      	b.n	60003038 <CopyFile(char const*, char const*, FS&)+0x504>
6000323e:	4620      	mov	r0, r4
60003240:	4798      	blx	r3
60003242:	e702      	b.n	6000304a <CopyFile(char const*, char const*, FS&)+0x516>
60003244:	20003308 	.word	0x20003308

60003248 <DeleteFile(char const*, FS&)>:
    SendU16(AckToken);
}

FLASHMEM void DeleteFile(const char* filePath, FS& fileSystem)
{
    if (!fileSystem.exists(filePath))
60003248:	680b      	ldr	r3, [r1, #0]
6000324a:	4a3b      	ldr	r2, [pc, #236]	; (60003338 <DeleteFile(char const*, FS&)+0xf0>)
6000324c:	685b      	ldr	r3, [r3, #4]
6000324e:	4293      	cmp	r3, r2
{
60003250:	b530      	push	{r4, r5, lr}
60003252:	460c      	mov	r4, r1
60003254:	b08f      	sub	sp, #60	; 0x3c
60003256:	4605      	mov	r5, r0
60003258:	d15d      	bne.n	60003316 <DeleteFile(char const*, FS&)+0xce>
    return m_fVol ? m_fVol->exists(path) :
6000325a:	f8d1 2484 	ldr.w	r2, [r1, #1156]	; 0x484
6000325e:	b33a      	cbz	r2, 600032b0 <DeleteFile(char const*, FS&)+0x68>
  FatFile() {}
60003260:	2300      	movs	r3, #0
    return tmp.open(this, path, O_RDONLY);
60003262:	4611      	mov	r1, r2
60003264:	4602      	mov	r2, r0
60003266:	4668      	mov	r0, sp
60003268:	9300      	str	r3, [sp, #0]
6000326a:	f002 f9ad 	bl	600055c8 <___ZN7FatFile4openEP9FatVolumePKci_veneer>
    if (!fileSystem.exists(filePath))
6000326e:	b350      	cbz	r0, 600032c6 <DeleteFile(char const*, FS&)+0x7e>
        SendU16(FailToken);
        Serial.printf("File not found: %s\n", filePath);
        return;
    }

    if (fileSystem.remove(filePath))
60003270:	6823      	ldr	r3, [r4, #0]
60003272:	4a32      	ldr	r2, [pc, #200]	; (6000333c <DeleteFile(char const*, FS&)+0xf4>)
60003274:	691b      	ldr	r3, [r3, #16]
60003276:	4293      	cmp	r3, r2
60003278:	d151      	bne.n	6000331e <DeleteFile(char const*, FS&)+0xd6>
  * \param[in] path A path with a valid 8.3 DOS name for the file.
  *
   * \return true for success or false for failure.
  */
  bool remove(const char *path) {
    return m_fVol ? m_fVol->remove(path) :
6000327a:	f8d4 2484 	ldr.w	r2, [r4, #1156]	; 0x484
6000327e:	b382      	cbz	r2, 600032e2 <DeleteFile(char const*, FS&)+0x9a>
60003280:	2000      	movs	r0, #0
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
60003282:	4611      	mov	r1, r2
60003284:	2301      	movs	r3, #1
60003286:	462a      	mov	r2, r5
60003288:	9000      	str	r0, [sp, #0]
6000328a:	4668      	mov	r0, sp
6000328c:	f002 f99c 	bl	600055c8 <___ZN7FatFile4openEP9FatVolumePKci_veneer>
60003290:	2800      	cmp	r0, #0
60003292:	d14a      	bne.n	6000332a <DeleteFile(char const*, FS&)+0xe2>
60003294:	207f      	movs	r0, #127	; 0x7f
60003296:	f002 f9df 	bl	60005658 <__usb_serial_putchar_veneer>
6000329a:	209b      	movs	r0, #155	; 0x9b
6000329c:	f002 f9dc 	bl	60005658 <__usb_serial_putchar_veneer>
        return;
    }
    else
    {
        SendU16(FailToken);
        Serial.printf("Failed to delete file: %s\n", filePath);
600032a0:	462a      	mov	r2, r5
600032a2:	4927      	ldr	r1, [pc, #156]	; (60003340 <DeleteFile(char const*, FS&)+0xf8>)
600032a4:	4827      	ldr	r0, [pc, #156]	; (60003344 <DeleteFile(char const*, FS&)+0xfc>)
        return;
    }
}
600032a6:	b00f      	add	sp, #60	; 0x3c
600032a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        Serial.printf("Failed to delete file: %s\n", filePath);
600032ac:	f002 b9ac 	b.w	60005608 <___ZN5Print6printfEPKcz_veneer>
600032b0:	f8d1 1488 	ldr.w	r1, [r1, #1160]	; 0x488
           m_xVol ? m_xVol->exists(path) : false;
600032b4:	b139      	cbz	r1, 600032c6 <DeleteFile(char const*, FS&)+0x7e>
    return tmp.open(this, path, O_RDONLY);
600032b6:	4613      	mov	r3, r2
  ExFatFile() {}
600032b8:	920c      	str	r2, [sp, #48]	; 0x30
600032ba:	4602      	mov	r2, r0
600032bc:	4668      	mov	r0, sp
600032be:	f002 fa17 	bl	600056f0 <___ZN9ExFatFile4openEP11ExFatVolumePKci_veneer>
600032c2:	2800      	cmp	r0, #0
600032c4:	d1d4      	bne.n	60003270 <DeleteFile(char const*, FS&)+0x28>
600032c6:	207f      	movs	r0, #127	; 0x7f
600032c8:	f002 f9c6 	bl	60005658 <__usb_serial_putchar_veneer>
600032cc:	209b      	movs	r0, #155	; 0x9b
600032ce:	f002 f9c3 	bl	60005658 <__usb_serial_putchar_veneer>
        Serial.printf("File not found: %s\n", filePath);
600032d2:	462a      	mov	r2, r5
600032d4:	491c      	ldr	r1, [pc, #112]	; (60003348 <DeleteFile(char const*, FS&)+0x100>)
        Serial.printf("Failed to delete file: %s\n", filePath);
600032d6:	481b      	ldr	r0, [pc, #108]	; (60003344 <DeleteFile(char const*, FS&)+0xfc>)
}
600032d8:	b00f      	add	sp, #60	; 0x3c
600032da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        Serial.printf("Failed to delete file: %s\n", filePath);
600032de:	f002 b993 	b.w	60005608 <___ZN5Print6printfEPKcz_veneer>
600032e2:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
           m_xVol ? m_xVol->remove(path) : false;
600032e6:	2900      	cmp	r1, #0
600032e8:	d0d4      	beq.n	60003294 <DeleteFile(char const*, FS&)+0x4c>
600032ea:	920c      	str	r2, [sp, #48]	; 0x30
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
600032ec:	2301      	movs	r3, #1
600032ee:	462a      	mov	r2, r5
600032f0:	4668      	mov	r0, sp
600032f2:	f002 f9fd 	bl	600056f0 <___ZN9ExFatFile4openEP11ExFatVolumePKci_veneer>
600032f6:	2800      	cmp	r0, #0
600032f8:	d0cc      	beq.n	60003294 <DeleteFile(char const*, FS&)+0x4c>
600032fa:	4668      	mov	r0, sp
600032fc:	f002 f970 	bl	600055e0 <___ZN9ExFatFile6removeEv_veneer>
60003300:	2800      	cmp	r0, #0
60003302:	d0c7      	beq.n	60003294 <DeleteFile(char const*, FS&)+0x4c>
60003304:	20cc      	movs	r0, #204	; 0xcc
60003306:	f002 f9a7 	bl	60005658 <__usb_serial_putchar_veneer>
6000330a:	2064      	movs	r0, #100	; 0x64
}
6000330c:	b00f      	add	sp, #60	; 0x3c
6000330e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
60003312:	f002 b9a1 	b.w	60005658 <__usb_serial_putchar_veneer>
    if (!fileSystem.exists(filePath))
60003316:	4601      	mov	r1, r0
60003318:	4620      	mov	r0, r4
6000331a:	4798      	blx	r3
6000331c:	e7a7      	b.n	6000326e <DeleteFile(char const*, FS&)+0x26>
    if (fileSystem.remove(filePath))
6000331e:	4629      	mov	r1, r5
60003320:	4620      	mov	r0, r4
60003322:	4798      	blx	r3
60003324:	2800      	cmp	r0, #0
60003326:	d1ed      	bne.n	60003304 <DeleteFile(char const*, FS&)+0xbc>
60003328:	e7b4      	b.n	60003294 <DeleteFile(char const*, FS&)+0x4c>
6000332a:	4668      	mov	r0, sp
6000332c:	f002 f948 	bl	600055c0 <___ZN7FatFile6removeEv_veneer>
60003330:	2800      	cmp	r0, #0
60003332:	d1e7      	bne.n	60003304 <DeleteFile(char const*, FS&)+0xbc>
60003334:	e7ae      	b.n	60003294 <DeleteFile(char const*, FS&)+0x4c>
60003336:	bf00      	nop
60003338:	0000188d 	.word	0x0000188d
6000333c:	000018f5 	.word	0x000018f5
60003340:	2000a9d0 	.word	0x2000a9d0
60003344:	2000bfd8 	.word	0x2000bfd8
60003348:	2000a9bc 	.word	0x2000a9bc

6000334c <disableCache()>:
// assembled from bits of core_cm7.h
// uses various #defines from that file that will need to be included.
// probably some library functions we could call instead of this.
FLASHMEM void disableCache() {

  SCB_MPU_CTRL = 0; // turn off MPU
6000334c:	2200      	movs	r2, #0
6000334e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
  SYST_CSR = 0; // turn off system tick
  // disable all interrupts
  for (int i=0;i<NVIC_NUM_INTERRUPTS;i++) {
    NVIC_DISABLE_IRQ(i);
60003352:	2001      	movs	r0, #1
  for (int i=0;i<NVIC_NUM_INTERRUPTS;i++) {
60003354:	4613      	mov	r3, r2
FLASHMEM void disableCache() {
60003356:	b510      	push	{r4, lr}
    NVIC_DISABLE_IRQ(i);
60003358:	4c20      	ldr	r4, [pc, #128]	; (600033dc <disableCache()+0x90>)
  SCB_MPU_CTRL = 0; // turn off MPU
6000335a:	f8c1 2d94 	str.w	r2, [r1, #3476]	; 0xd94
  SYST_CSR = 0; // turn off system tick
6000335e:	610a      	str	r2, [r1, #16]
    NVIC_DISABLE_IRQ(i);
60003360:	eb04 1263 	add.w	r2, r4, r3, asr #5
60003364:	f003 011f 	and.w	r1, r3, #31
  for (int i=0;i<NVIC_NUM_INTERRUPTS;i++) {
60003368:	3301      	adds	r3, #1
    NVIC_DISABLE_IRQ(i);
6000336a:	0092      	lsls	r2, r2, #2
6000336c:	fa00 f101 	lsl.w	r1, r0, r1
  for (int i=0;i<NVIC_NUM_INTERRUPTS;i++) {
60003370:	2ba0      	cmp	r3, #160	; 0xa0
    NVIC_DISABLE_IRQ(i);
60003372:	6011      	str	r1, [r2, #0]
  for (int i=0;i<NVIC_NUM_INTERRUPTS;i++) {
60003374:	d1f4      	bne.n	60003360 <disableCache()+0x14>

  uint32_t ccsidr;
  uint32_t sets;
  uint32_t ways;

  SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
60003376:	481a      	ldr	r0, [pc, #104]	; (600033e0 <disableCache()+0x94>)
60003378:	2300      	movs	r3, #0
6000337a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  asm("dsb");
6000337e:	f3bf 8f4f 	dsb	sy

  SCB->CCR &= ~(uint32_t)SCB_CCR_DC_Msk;  /* disable D-Cache */
60003382:	6943      	ldr	r3, [r0, #20]
60003384:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
60003388:	6143      	str	r3, [r0, #20]
  asm("dsb");
6000338a:	f3bf 8f4f 	dsb	sy

  ccsidr = SCB->CCSIDR;
6000338e:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
  sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  do {
    ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
    do {
      SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
60003392:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
  sets = (uint32_t)(CCSIDR_SETS(ccsidr));
60003396:	f3c3 344e 	ubfx	r4, r3, #13, #15
    ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
6000339a:	f3c3 0cc9 	ubfx	ip, r3, #3, #10
6000339e:	0164      	lsls	r4, r4, #5
      SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
600033a0:	ea04 010e 	and.w	r1, r4, lr
    ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
600033a4:	4663      	mov	r3, ip
      SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
600033a6:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                     ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
    } while (ways-- != 0U);
600033aa:	3b01      	subs	r3, #1
      SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
600033ac:	f8c0 2274 	str.w	r2, [r0, #628]	; 0x274
    } while (ways-- != 0U);
600033b0:	1c5a      	adds	r2, r3, #1
600033b2:	d1f8      	bne.n	600033a6 <disableCache()+0x5a>
  } while(sets-- != 0U);
600033b4:	3c20      	subs	r4, #32
600033b6:	f114 0f20 	cmn.w	r4, #32
600033ba:	d1f1      	bne.n	600033a0 <disableCache()+0x54>

  asm("dsb");
600033bc:	f3bf 8f4f 	dsb	sy
  asm("isb");
600033c0:	f3bf 8f6f 	isb	sy
  SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
600033c4:	6943      	ldr	r3, [r0, #20]
  SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
600033c6:	2200      	movs	r2, #0
  SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
600033c8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
600033cc:	6143      	str	r3, [r0, #20]
  SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
600033ce:	f8c0 2250 	str.w	r2, [r0, #592]	; 0x250
  asm("dsb");
600033d2:	f3bf 8f4f 	dsb	sy
  asm("isb");
600033d6:	f3bf 8f6f 	isb	sy
}
600033da:	bd10      	pop	{r4, pc}
600033dc:	38003860 	.word	0x38003860
600033e0:	e000ed00 	.word	0xe000ed00

600033e4 <runApp(unsigned long)>:
  uint32_t SPIFlashConfigMagicWord = *((uint32_t*)addressInFlash);
600033e4:	f100 41c0 	add.w	r1, r0, #1610612736	; 0x60000000
  if ((SPIFlashConfigMagicWord == 0x42464346) && (VectorTableMagicWord==0x432000D1))
600033e8:	4a22      	ldr	r2, [pc, #136]	; (60003474 <runApp(unsigned long)+0x90>)
  uint32_t VectorTableMagicWord = *((uint32_t*)(addressInFlash+0x1000));
600033ea:	4b23      	ldr	r3, [pc, #140]	; (60003478 <runApp(unsigned long)+0x94>)
  if ((SPIFlashConfigMagicWord == 0x42464346) && (VectorTableMagicWord==0x432000D1))
600033ec:	6809      	ldr	r1, [r1, #0]
600033ee:	4291      	cmp	r1, r2
FLASHMEM bool runApp(uint32_t offsetFromStart) {
600033f0:	b570      	push	{r4, r5, r6, lr}
  uint32_t VectorTableMagicWord = *((uint32_t*)(addressInFlash+0x1000));
600033f2:	eb00 0503 	add.w	r5, r0, r3
  if ((SPIFlashConfigMagicWord == 0x42464346) && (VectorTableMagicWord==0x432000D1))
600033f6:	d11b      	bne.n	60003430 <runApp(unsigned long)+0x4c>
600033f8:	58c2      	ldr	r2, [r0, r3]
600033fa:	f1a3 53e7 	sub.w	r3, r3, #484442112	; 0x1ce00000
600033fe:	4604      	mov	r4, r0
60003400:	f6a3 732f 	subw	r3, r3, #3887	; 0xf2f
60003404:	429a      	cmp	r2, r3
60003406:	d113      	bne.n	60003430 <runApp(unsigned long)+0x4c>
  uint32_t firstInstructionPtr = imageStartAddress + 0x1000 + sizeof(uint32_t);
60003408:	4e1c      	ldr	r6, [pc, #112]	; (6000347c <runApp(unsigned long)+0x98>)
  Serial.printf("First instruction pointer is at address 0x%08X\r\n", firstInstructionPtr);
6000340a:	491d      	ldr	r1, [pc, #116]	; (60003480 <runApp(unsigned long)+0x9c>)
6000340c:	19a2      	adds	r2, r4, r6
6000340e:	481d      	ldr	r0, [pc, #116]	; (60003484 <runApp(unsigned long)+0xa0>)
60003410:	f002 f8fa 	bl	60005608 <___ZN5Print6printfEPKcz_veneer>
  uint32_t firstInstructionAddr = *(uint32_t*)firstInstructionPtr;
60003414:	59a6      	ldr	r6, [r4, r6]
  if ( (firstInstructionAddr < (imageStartAddress+0x1000)) || (firstInstructionAddr > (imageStartAddress+0x3000)) ) {
60003416:	42ae      	cmp	r6, r5
60003418:	d303      	bcc.n	60003422 <runApp(unsigned long)+0x3e>
6000341a:	4b1b      	ldr	r3, [pc, #108]	; (60003488 <runApp(unsigned long)+0xa4>)
6000341c:	4423      	add	r3, r4
6000341e:	42b3      	cmp	r3, r6
60003420:	d20f      	bcs.n	60003442 <runApp(unsigned long)+0x5e>
    Serial.printf("Address of first instruction %08X isn't sensible for location in flash. Image was probably incorrectly built\r\n", firstInstructionAddr);
60003422:	4632      	mov	r2, r6
60003424:	4919      	ldr	r1, [pc, #100]	; (6000348c <runApp(unsigned long)+0xa8>)
60003426:	4817      	ldr	r0, [pc, #92]	; (60003484 <runApp(unsigned long)+0xa0>)
60003428:	f002 f8ee 	bl	60005608 <___ZN5Print6printfEPKcz_veneer>
}
6000342c:	2000      	movs	r0, #0
6000342e:	bd70      	pop	{r4, r5, r6, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
60003430:	212b      	movs	r1, #43	; 0x2b
60003432:	4817      	ldr	r0, [pc, #92]	; (60003490 <runApp(unsigned long)+0xac>)
60003434:	f002 f924 	bl	60005680 <__usb_serial_write_veneer>
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60003438:	4812      	ldr	r0, [pc, #72]	; (60003484 <runApp(unsigned long)+0xa0>)
6000343a:	f002 f92d 	bl	60005698 <___ZN5Print7printlnEv_veneer>
6000343e:	2000      	movs	r0, #0
60003440:	bd70      	pop	{r4, r5, r6, pc}
  Serial.printf("Jumping to code at 0x%08X\r\n", firstInstructionAddr);
60003442:	4632      	mov	r2, r6
60003444:	4913      	ldr	r1, [pc, #76]	; (60003494 <runApp(unsigned long)+0xb0>)
60003446:	480f      	ldr	r0, [pc, #60]	; (60003484 <runApp(unsigned long)+0xa0>)
60003448:	f002 f8de 	bl	60005608 <___ZN5Print6printfEPKcz_veneer>
  delay(10); // give the serial port time to output so we see that message.
6000344c:	200a      	movs	r0, #10
6000344e:	4d12      	ldr	r5, [pc, #72]	; (60003498 <runApp(unsigned long)+0xb4>)
60003450:	4c0c      	ldr	r4, [pc, #48]	; (60003484 <runApp(unsigned long)+0xa0>)
60003452:	f002 f941 	bl	600056d8 <__delay_veneer>
  disableCache();
60003456:	f7ff ff79 	bl	6000334c <disableCache()>
  Target_Code_Address();
6000345a:	47b0      	blx	r6
6000345c:	2111      	movs	r1, #17
6000345e:	4628      	mov	r0, r5
60003460:	f002 f90e 	bl	60005680 <__usb_serial_write_veneer>
60003464:	4620      	mov	r0, r4
60003466:	f002 f917 	bl	60005698 <___ZN5Print7printlnEv_veneer>
    delay(1000);
6000346a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
6000346e:	f002 f933 	bl	600056d8 <__delay_veneer>
  while(true) {
60003472:	e7f3      	b.n	6000345c <runApp(unsigned long)+0x78>
60003474:	42464346 	.word	0x42464346
60003478:	60001000 	.word	0x60001000
6000347c:	60001004 	.word	0x60001004
60003480:	2000a9ec 	.word	0x2000a9ec
60003484:	2000bfd8 	.word	0x2000bfd8
60003488:	60003000 	.word	0x60003000
6000348c:	2000aa20 	.word	0x2000aa20
60003490:	20001b9c 	.word	0x20001b9c
60003494:	2000aa90 	.word	0x2000aa90
60003498:	2000aaac 	.word	0x2000aaac

6000349c <AddAndCheckSource(StructMenuItem, unsigned long*)>:
   
   }
}

FLASHMEM void AddAndCheckSource(StructMenuItem SourceMenu, uint32_t *TotalSize)
{
6000349c:	b410      	push	{r4}
6000349e:	b085      	sub	sp, #20
600034a0:	f10d 0c10 	add.w	ip, sp, #16
600034a4:	9c06      	ldr	r4, [sp, #24]
600034a6:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
600034aa:	4613      	mov	r3, r2
   *TotalSize += SourceMenu.Size;
600034ac:	6821      	ldr	r1, [r4, #0]
600034ae:	9803      	ldr	r0, [sp, #12]
   Printf_dbg(" $%08x %7d %s\n", (uint32_t)SourceMenu.Code_Image, SourceMenu.Size, SourceMenu.Name);
   if (((uint32_t)SourceMenu.Code_Image & 0xF0000000) == 0x20000000)
600034b0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
600034b4:	9a01      	ldr	r2, [sp, #4]
   *TotalSize += SourceMenu.Size;
600034b6:	4401      	add	r1, r0
   if (((uint32_t)SourceMenu.Code_Image & 0xF0000000) == 0x20000000)
600034b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   *TotalSize += SourceMenu.Size;
600034bc:	6021      	str	r1, [r4, #0]
   if (((uint32_t)SourceMenu.Code_Image & 0xF0000000) == 0x20000000)
600034be:	d003      	beq.n	600034c8 <AddAndCheckSource(StructMenuItem, unsigned long*)+0x2c>
      Serial.printf("%s is using RAM!!!\n", SourceMenu.Name);
}
600034c0:	b005      	add	sp, #20
600034c2:	f85d 4b04 	ldr.w	r4, [sp], #4
600034c6:	4770      	bx	lr
      Serial.printf("%s is using RAM!!!\n", SourceMenu.Name);
600034c8:	4903      	ldr	r1, [pc, #12]	; (600034d8 <AddAndCheckSource(StructMenuItem, unsigned long*)+0x3c>)
600034ca:	4804      	ldr	r0, [pc, #16]	; (600034dc <AddAndCheckSource(StructMenuItem, unsigned long*)+0x40>)
}
600034cc:	b005      	add	sp, #20
600034ce:	f85d 4b04 	ldr.w	r4, [sp], #4
      Serial.printf("%s is using RAM!!!\n", SourceMenu.Name);
600034d2:	f002 b899 	b.w	60005608 <___ZN5Print6printfEPKcz_veneer>
600034d6:	bf00      	nop
600034d8:	2000aac0 	.word	0x2000aac0
600034dc:	2000bfd8 	.word	0x2000bfd8

600034e0 <GetDigits(unsigned char, unsigned long*)>:

FLASHMEM void GetDigits(uint8_t NumDigits, uint32_t *SetInt)
{
   char inStr[NumDigits+1];
600034e0:	f100 0308 	add.w	r3, r0, #8
600034e4:	f403 73fc 	and.w	r3, r3, #504	; 0x1f8
{
600034e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
600034ec:	af00      	add	r7, sp, #0
      inStr[DigNum] = Serial.read(); 
   }
   inStr[NumDigits]=0;
   *SetInt = atol(inStr);
   Serial.printf("\nVal Set to: %d\n\n", *SetInt);
}
600034ee:	46ea      	mov	sl, sp
   char inStr[NumDigits+1];
600034f0:	ebad 0d03 	sub.w	sp, sp, r3
{
600034f4:	4606      	mov	r6, r0
600034f6:	4688      	mov	r8, r1
   char inStr[NumDigits+1];
600034f8:	46e9      	mov	r9, sp
   for(uint8_t DigNum=0; DigNum<NumDigits; DigNum++)
600034fa:	b1d0      	cbz	r0, 60003532 <GetDigits(unsigned char, unsigned long*)+0x52>
600034fc:	1e45      	subs	r5, r0, #1
600034fe:	f10d 34ff 	add.w	r4, sp, #4294967295
60003502:	fa59 f585 	uxtab	r5, r9, r5
60003506:	e005      	b.n	60003514 <GetDigits(unsigned char, unsigned long*)+0x34>
        virtual int read() { return usb_serial_getchar(); }
60003508:	f002 f8ce 	bl	600056a8 <__usb_serial_getchar_veneer>
      inStr[DigNum] = Serial.read(); 
6000350c:	f804 0f01 	strb.w	r0, [r4, #1]!
   for(uint8_t DigNum=0; DigNum<NumDigits; DigNum++)
60003510:	42ac      	cmp	r4, r5
60003512:	d00e      	beq.n	60003532 <GetDigits(unsigned char, unsigned long*)+0x52>
        virtual int available() { return usb_serial_available(); }
60003514:	f002 f8a4 	bl	60005660 <__usb_serial_available_veneer>
      if(!Serial.available())
60003518:	2800      	cmp	r0, #0
6000351a:	d1f5      	bne.n	60003508 <GetDigits(unsigned char, unsigned long*)+0x28>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
6000351c:	2114      	movs	r1, #20
6000351e:	480d      	ldr	r0, [pc, #52]	; (60003554 <GetDigits(unsigned char, unsigned long*)+0x74>)
60003520:	f002 f8ae 	bl	60005680 <__usb_serial_write_veneer>
60003524:	480c      	ldr	r0, [pc, #48]	; (60003558 <GetDigits(unsigned char, unsigned long*)+0x78>)
60003526:	f002 f8b7 	bl	60005698 <___ZN5Print7printlnEv_veneer>
         return;
6000352a:	46d5      	mov	sp, sl
}
6000352c:	46bd      	mov	sp, r7
6000352e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   inStr[NumDigits]=0;
60003532:	2300      	movs	r3, #0
   *SetInt = atol(inStr);
60003534:	4648      	mov	r0, r9
   inStr[NumDigits]=0;
60003536:	f809 3006 	strb.w	r3, [r9, r6]
   *SetInt = atol(inStr);
6000353a:	f002 f821 	bl	60005580 <__atol_veneer>
6000353e:	4602      	mov	r2, r0
   Serial.printf("\nVal Set to: %d\n\n", *SetInt);
60003540:	4906      	ldr	r1, [pc, #24]	; (6000355c <GetDigits(unsigned char, unsigned long*)+0x7c>)
   *SetInt = atol(inStr);
60003542:	f8c8 2000 	str.w	r2, [r8]
   Serial.printf("\nVal Set to: %d\n\n", *SetInt);
60003546:	4804      	ldr	r0, [pc, #16]	; (60003558 <GetDigits(unsigned char, unsigned long*)+0x78>)
60003548:	f002 f85e 	bl	60005608 <___ZN5Print6printfEPKcz_veneer>
6000354c:	46d5      	mov	sp, sl
}
6000354e:	46bd      	mov	sp, r7
60003550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
60003554:	2000aad4 	.word	0x2000aad4
60003558:	2000bfd8 	.word	0x2000bfd8
6000355c:	2000aaec 	.word	0x2000aaec

60003560 <PrintDebugLog()>:

FLASHMEM void PrintDebugLog()
{
60003560:	b508      	push	{r3, lr}
60003562:	2112      	movs	r1, #18
60003564:	4803      	ldr	r0, [pc, #12]	; (60003574 <PrintDebugLog()+0x14>)
60003566:	f002 f88b 	bl	60005680 <__usb_serial_write_veneer>
6000356a:	4803      	ldr	r0, [pc, #12]	; (60003578 <PrintDebugLog()+0x18>)
   
   if (BigBufCount == 0) Serial.println("Buffer empty");
   if (BufferFull) Serial.println("Buffer was full");
   Serial.println("Buffer Reset");
   BigBufCount = 0;
}
6000356c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
60003570:	f002 b892 	b.w	60005698 <___ZN5Print7printlnEv_veneer>
60003574:	2000ab00 	.word	0x2000ab00
60003578:	2000bfd8 	.word	0x2000bfd8

6000357c <SendU16(unsigned short)>:
   }
   return true;
}

FLASHMEM void SendU16(uint16_t SendVal)
{
6000357c:	b510      	push	{r4, lr}
6000357e:	4604      	mov	r4, r0
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
60003580:	b2c0      	uxtb	r0, r0
60003582:	f002 f869 	bl	60005658 <__usb_serial_putchar_veneer>
60003586:	0a20      	lsrs	r0, r4, #8
   Serial.write((uint8_t)(SendVal & 0xff));
   Serial.write((uint8_t)((SendVal >> 8) & 0xff));
}
60003588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
6000358c:	f002 b864 	b.w	60005658 <__usb_serial_putchar_veneer>

60003590 <SerialAvailabeTimeout()>:
   
FLASHMEM bool SerialAvailabeTimeout()
{
60003590:	b538      	push	{r3, r4, r5, lr}
60003592:	4c0f      	ldr	r4, [pc, #60]	; (600035d0 <SerialAvailabeTimeout()+0x40>)
60003594:	6825      	ldr	r5, [r4, #0]
   uint32_t StartTOMillis = millis();
   
   while(!Serial.available() && (millis() - StartTOMillis) < SerialTimoutMillis); // timeout loop
60003596:	e004      	b.n	600035a2 <SerialAvailabeTimeout()+0x12>
60003598:	6823      	ldr	r3, [r4, #0]
6000359a:	1b5b      	subs	r3, r3, r5
6000359c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
600035a0:	d203      	bcs.n	600035aa <SerialAvailabeTimeout()+0x1a>
        virtual int available() { return usb_serial_available(); }
600035a2:	f002 f85d 	bl	60005660 <__usb_serial_available_veneer>
600035a6:	2800      	cmp	r0, #0
600035a8:	d0f6      	beq.n	60003598 <SerialAvailabeTimeout()+0x8>
600035aa:	f002 f859 	bl	60005660 <__usb_serial_available_veneer>
   if (Serial.available()) return(true);
600035ae:	4604      	mov	r4, r0
600035b0:	b108      	cbz	r0, 600035b6 <SerialAvailabeTimeout()+0x26>
600035b2:	2001      	movs	r0, #1
   
   SendU16(FailToken);
   Serial.print("Timeout!\n");  
   return(false);
}
600035b4:	bd38      	pop	{r3, r4, r5, pc}
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
600035b6:	207f      	movs	r0, #127	; 0x7f
600035b8:	f002 f84e 	bl	60005658 <__usb_serial_putchar_veneer>
600035bc:	209b      	movs	r0, #155	; 0x9b
600035be:	f002 f84b 	bl	60005658 <__usb_serial_putchar_veneer>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
600035c2:	2109      	movs	r1, #9
600035c4:	4803      	ldr	r0, [pc, #12]	; (600035d4 <SerialAvailabeTimeout()+0x44>)
600035c6:	f002 f85b 	bl	60005680 <__usb_serial_write_veneer>
   return(false);
600035ca:	4620      	mov	r0, r4
}
600035cc:	bd38      	pop	{r3, r4, r5, pc}
600035ce:	bf00      	nop
600035d0:	2005e500 	.word	0x2005e500
600035d4:	2000ab14 	.word	0x2000ab14

600035d8 <GetPathParameter(char*)>:
{
600035d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint16_t CharNum = 0;
600035da:	2500      	movs	r5, #0
{
600035dc:	4607      	mov	r7, r0
600035de:	1e46      	subs	r6, r0, #1
600035e0:	e00c      	b.n	600035fc <GetPathParameter(char*)+0x24>
        virtual int read() { return usb_serial_getchar(); }
600035e2:	f002 f861 	bl	600056a8 <__usb_serial_getchar_veneer>
        if (currentChar == 0) break;
600035e6:	f010 03ff 	ands.w	r3, r0, #255	; 0xff
        CharNum++;
600035ea:	f105 0201 	add.w	r2, r5, #1
        if (currentChar == 0) break;
600035ee:	d016      	beq.n	6000361e <GetPathParameter(char*)+0x46>
        CharNum++;
600035f0:	b295      	uxth	r5, r2
        FileNamePath[CharNum] = currentChar;
600035f2:	f806 3f01 	strb.w	r3, [r6, #1]!
    while (CharNum < MaxNamePathLength)
600035f6:	f5b5 7fc9 	cmp.w	r5, #402	; 0x192
600035fa:	d013      	beq.n	60003624 <GetPathParameter(char*)+0x4c>
        if (!SerialAvailabeTimeout())
600035fc:	f7ff ffc8 	bl	60003590 <SerialAvailabeTimeout()>
60003600:	4604      	mov	r4, r0
60003602:	2800      	cmp	r0, #0
60003604:	d1ed      	bne.n	600035e2 <GetPathParameter(char*)+0xa>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
60003606:	207f      	movs	r0, #127	; 0x7f
60003608:	f002 f826 	bl	60005658 <__usb_serial_putchar_veneer>
6000360c:	209b      	movs	r0, #155	; 0x9b
6000360e:	f002 f823 	bl	60005658 <__usb_serial_putchar_veneer>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
60003612:	211e      	movs	r1, #30
60003614:	480a      	ldr	r0, [pc, #40]	; (60003640 <GetPathParameter(char*)+0x68>)
60003616:	f002 f833 	bl	60005680 <__usb_serial_write_veneer>
}
6000361a:	4620      	mov	r0, r4
6000361c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
6000361e:	4620      	mov	r0, r4
    FileNamePath[CharNum] = 0;
60003620:	557b      	strb	r3, [r7, r5]
}
60003622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    FileNamePath[CharNum] = 0;
60003624:	2400      	movs	r4, #0
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
60003626:	207f      	movs	r0, #127	; 0x7f
60003628:	f887 4192 	strb.w	r4, [r7, #402]	; 0x192
6000362c:	f002 f814 	bl	60005658 <__usb_serial_putchar_veneer>
60003630:	209b      	movs	r0, #155	; 0x9b
60003632:	f002 f811 	bl	60005658 <__usb_serial_putchar_veneer>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
60003636:	210f      	movs	r1, #15
60003638:	4802      	ldr	r0, [pc, #8]	; (60003644 <GetPathParameter(char*)+0x6c>)
6000363a:	f002 f821 	bl	60005680 <__usb_serial_write_veneer>
6000363e:	e7ec      	b.n	6000361a <GetPathParameter(char*)+0x42>
60003640:	2000ab20 	.word	0x2000ab20
60003644:	2000ab40 	.word	0x2000ab40

60003648 <ReceiveFileData(File&, unsigned long, unsigned long&)>:
{
60003648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
6000364c:	4607      	mov	r7, r0
6000364e:	b082      	sub	sp, #8
60003650:	4616      	mov	r6, r2
    while (bytenum < len)
60003652:	2900      	cmp	r1, #0
60003654:	d034      	beq.n	600036c0 <ReceiveFileData(File&, unsigned long, unsigned long&)+0x78>
60003656:	4688      	mov	r8, r1
    uint32_t bytenum = 0;
60003658:	2500      	movs	r5, #0
6000365a:	f8df 926c 	ldr.w	r9, [pc, #620]	; 600038c8 <ReceiveFileData(File&, unsigned long, unsigned long&)+0x280>
6000365e:	e008      	b.n	60003672 <ReceiveFileData(File&, unsigned long, unsigned long&)+0x2a>
    return m_fFile ? m_fFile->write(buf, count) :
60003660:	f002 f816 	bl	60005690 <___ZN7FatFile5writeEPKvj_veneer>
        CheckSum -= ByteIn;
60003664:	6833      	ldr	r3, [r6, #0]
60003666:	b2e4      	uxtb	r4, r4
        bytenum++;
60003668:	3501      	adds	r5, #1
        CheckSum -= ByteIn;
6000366a:	1b1b      	subs	r3, r3, r4
    while (bytenum < len)
6000366c:	45a8      	cmp	r8, r5
        CheckSum -= ByteIn;
6000366e:	6033      	str	r3, [r6, #0]
    while (bytenum < len)
60003670:	d026      	beq.n	600036c0 <ReceiveFileData(File&, unsigned long, unsigned long&)+0x78>
        if (!SerialAvailabeTimeout())
60003672:	f7ff ff8d 	bl	60003590 <SerialAvailabeTimeout()>
60003676:	4604      	mov	r4, r0
60003678:	2800      	cmp	r0, #0
6000367a:	d07e      	beq.n	6000377a <ReceiveFileData(File&, unsigned long, unsigned long&)+0x132>
        virtual int read() { return usb_serial_getchar(); }
6000367c:	f002 f814 	bl	600056a8 <__usb_serial_getchar_veneer>
		return (f) ? f->write(&b, 1) : 0;
60003680:	693b      	ldr	r3, [r7, #16]
60003682:	4604      	mov	r4, r0
        file.write(ByteIn = Serial.read());
60003684:	f88d 0007 	strb.w	r0, [sp, #7]
60003688:	2b00      	cmp	r3, #0
6000368a:	d0eb      	beq.n	60003664 <ReceiveFileData(File&, unsigned long, unsigned long&)+0x1c>
6000368c:	6818      	ldr	r0, [r3, #0]
6000368e:	2201      	movs	r2, #1
60003690:	f10d 0107 	add.w	r1, sp, #7
60003694:	f8d0 a00c 	ldr.w	sl, [r0, #12]
60003698:	45ca      	cmp	sl, r9
6000369a:	d10b      	bne.n	600036b4 <ReceiveFileData(File&, unsigned long, unsigned long&)+0x6c>
6000369c:	6d18      	ldr	r0, [r3, #80]	; 0x50
6000369e:	2800      	cmp	r0, #0
600036a0:	d1de      	bne.n	60003660 <ReceiveFileData(File&, unsigned long, unsigned long&)+0x18>
600036a2:	6d58      	ldr	r0, [r3, #84]	; 0x54
           m_xFile ? m_xFile->write(buf, count) : 0;
600036a4:	2201      	movs	r2, #1
600036a6:	f10d 0107 	add.w	r1, sp, #7
600036aa:	2800      	cmp	r0, #0
600036ac:	d0da      	beq.n	60003664 <ReceiveFileData(File&, unsigned long, unsigned long&)+0x1c>
600036ae:	f001 ffa3 	bl	600055f8 <___ZN9ExFatFile5writeEPKvj_veneer>
600036b2:	e7d7      	b.n	60003664 <ReceiveFileData(File&, unsigned long, unsigned long&)+0x1c>
600036b4:	2201      	movs	r2, #1
600036b6:	f10d 0107 	add.w	r1, sp, #7
600036ba:	4618      	mov	r0, r3
600036bc:	47d0      	blx	sl
600036be:	e7d1      	b.n	60003664 <ReceiveFileData(File&, unsigned long, unsigned long&)+0x1c>
		if (f) {
600036c0:	693c      	ldr	r4, [r7, #16]
600036c2:	2c00      	cmp	r4, #0
600036c4:	d050      	beq.n	60003768 <ReceiveFileData(File&, unsigned long, unsigned long&)+0x120>
			f->close();
600036c6:	6823      	ldr	r3, [r4, #0]
600036c8:	f8df 8200 	ldr.w	r8, [pc, #512]	; 600038cc <ReceiveFileData(File&, unsigned long, unsigned long&)+0x284>
600036cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
600036ce:	4543      	cmp	r3, r8
600036d0:	f040 80c9 	bne.w	60003866 <ReceiveFileData(File&, unsigned long, unsigned long&)+0x21e>
		if (filename) {
600036d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
600036d6:	b118      	cbz	r0, 600036e0 <ReceiveFileData(File&, unsigned long, unsigned long&)+0x98>
			free(filename);
600036d8:	f001 ff3e 	bl	60005558 <__free_veneer>
			filename = nullptr;
600036dc:	2300      	movs	r3, #0
600036de:	65a3      	str	r3, [r4, #88]	; 0x58
  bool isOpen() const {return m_fFile || m_xFile;}
600036e0:	6d23      	ldr	r3, [r4, #80]	; 0x50
600036e2:	2b00      	cmp	r3, #0
600036e4:	f000 80ba 	beq.w	6000385c <ReceiveFileData(File&, unsigned long, unsigned long&)+0x214>
			sdfatfile.close();
600036e8:	f104 0018 	add.w	r0, r4, #24
600036ec:	f001 ff3c 	bl	60005568 <___ZN10FsBaseFile5closeEv_veneer>
		if (--(f->refcount) == 0) {
600036f0:	693d      	ldr	r5, [r7, #16]
600036f2:	686c      	ldr	r4, [r5, #4]
600036f4:	3c01      	subs	r4, #1
600036f6:	606c      	str	r4, [r5, #4]
600036f8:	2c00      	cmp	r4, #0
600036fa:	d133      	bne.n	60003764 <ReceiveFileData(File&, unsigned long, unsigned long&)+0x11c>
			f->close();
600036fc:	682b      	ldr	r3, [r5, #0]
600036fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
60003700:	4543      	cmp	r3, r8
60003702:	f040 80bf 	bne.w	60003884 <ReceiveFileData(File&, unsigned long, unsigned long&)+0x23c>
		if (filename) {
60003706:	6da8      	ldr	r0, [r5, #88]	; 0x58
60003708:	b110      	cbz	r0, 60003710 <ReceiveFileData(File&, unsigned long, unsigned long&)+0xc8>
			free(filename);
6000370a:	f001 ff25 	bl	60005558 <__free_veneer>
			filename = nullptr;
6000370e:	65ac      	str	r4, [r5, #88]	; 0x58
60003710:	6d2b      	ldr	r3, [r5, #80]	; 0x50
60003712:	2b00      	cmp	r3, #0
60003714:	f000 80ad 	beq.w	60003872 <ReceiveFileData(File&, unsigned long, unsigned long&)+0x22a>
			sdfatfile.close();
60003718:	f105 0018 	add.w	r0, r5, #24
6000371c:	f001 ff24 	bl	60005568 <___ZN10FsBaseFile5closeEv_veneer>
			delete f;
60003720:	693c      	ldr	r4, [r7, #16]
60003722:	b1fc      	cbz	r4, 60003764 <ReceiveFileData(File&, unsigned long, unsigned long&)+0x11c>
60003724:	6823      	ldr	r3, [r4, #0]
60003726:	4a62      	ldr	r2, [pc, #392]	; (600038b0 <ReceiveFileData(File&, unsigned long, unsigned long&)+0x268>)
60003728:	685b      	ldr	r3, [r3, #4]
6000372a:	4293      	cmp	r3, r2
6000372c:	f040 80b9 	bne.w	600038a2 <ReceiveFileData(File&, unsigned long, unsigned long&)+0x25a>
	virtual ~SDFile(void) {
60003730:	4b60      	ldr	r3, [pc, #384]	; (600038b4 <ReceiveFileData(File&, unsigned long, unsigned long&)+0x26c>)
		if (filename) {
60003732:	6da0      	ldr	r0, [r4, #88]	; 0x58
	virtual ~SDFile(void) {
60003734:	6023      	str	r3, [r4, #0]
		if (filename) {
60003736:	b118      	cbz	r0, 60003740 <ReceiveFileData(File&, unsigned long, unsigned long&)+0xf8>
			free(filename);
60003738:	f001 ff0e 	bl	60005558 <__free_veneer>
			filename = nullptr;
6000373c:	2300      	movs	r3, #0
6000373e:	65a3      	str	r3, [r4, #88]	; 0x58
60003740:	6d23      	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
60003742:	f104 0518 	add.w	r5, r4, #24
60003746:	2b00      	cmp	r3, #0
60003748:	f000 80a2 	beq.w	60003890 <ReceiveFileData(File&, unsigned long, unsigned long&)+0x248>
6000374c:	4628      	mov	r0, r5
6000374e:	f001 ff0b 	bl	60005568 <___ZN10FsBaseFile5closeEv_veneer>
60003752:	4b59      	ldr	r3, [pc, #356]	; (600038b8 <ReceiveFileData(File&, unsigned long, unsigned long&)+0x270>)
  ~FsBaseFile() {close();}
60003754:	4628      	mov	r0, r5
60003756:	60a3      	str	r3, [r4, #8]
60003758:	f001 ff06 	bl	60005568 <___ZN10FsBaseFile5closeEv_veneer>
	}
6000375c:	215c      	movs	r1, #92	; 0x5c
6000375e:	4620      	mov	r0, r4
60003760:	f001 ff9e 	bl	600056a0 <___ZdlPvj_veneer>
		f = nullptr;
60003764:	2300      	movs	r3, #0
60003766:	613b      	str	r3, [r7, #16]
    CheckSum &= 0xffff;
60003768:	8833      	ldrh	r3, [r6, #0]
6000376a:	6033      	str	r3, [r6, #0]
    if (CheckSum != 0)
6000376c:	2b00      	cmp	r3, #0
6000376e:	d161      	bne.n	60003834 <ReceiveFileData(File&, unsigned long, unsigned long&)+0x1ec>
    return true;
60003770:	2401      	movs	r4, #1
}
60003772:	4620      	mov	r0, r4
60003774:	b002      	add	sp, #8
60003776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
6000377a:	207f      	movs	r0, #127	; 0x7f
6000377c:	f001 ff6c 	bl	60005658 <__usb_serial_putchar_veneer>
60003780:	209b      	movs	r0, #155	; 0x9b
60003782:	f001 ff69 	bl	60005658 <__usb_serial_putchar_veneer>
            Serial.printf("Rec %lu of %lu bytes\n", bytenum, len);
60003786:	462a      	mov	r2, r5
60003788:	4643      	mov	r3, r8
6000378a:	494c      	ldr	r1, [pc, #304]	; (600038bc <ReceiveFileData(File&, unsigned long, unsigned long&)+0x274>)
6000378c:	484c      	ldr	r0, [pc, #304]	; (600038c0 <ReceiveFileData(File&, unsigned long, unsigned long&)+0x278>)
6000378e:	f001 ff3b 	bl	60005608 <___ZN5Print6printfEPKcz_veneer>
		if (f) {
60003792:	693d      	ldr	r5, [r7, #16]
60003794:	2d00      	cmp	r5, #0
60003796:	d0ec      	beq.n	60003772 <ReceiveFileData(File&, unsigned long, unsigned long&)+0x12a>
			f->close();
60003798:	682b      	ldr	r3, [r5, #0]
6000379a:	f8df 8130 	ldr.w	r8, [pc, #304]	; 600038cc <ReceiveFileData(File&, unsigned long, unsigned long&)+0x284>
6000379e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
600037a0:	4543      	cmp	r3, r8
600037a2:	d163      	bne.n	6000386c <ReceiveFileData(File&, unsigned long, unsigned long&)+0x224>
		if (filename) {
600037a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
600037a6:	b110      	cbz	r0, 600037ae <ReceiveFileData(File&, unsigned long, unsigned long&)+0x166>
			free(filename);
600037a8:	f001 fed6 	bl	60005558 <__free_veneer>
			filename = nullptr;
600037ac:	65ac      	str	r4, [r5, #88]	; 0x58
  bool isOpen() const {return m_fFile || m_xFile;}
600037ae:	6d2b      	ldr	r3, [r5, #80]	; 0x50
600037b0:	2b00      	cmp	r3, #0
600037b2:	d04f      	beq.n	60003854 <ReceiveFileData(File&, unsigned long, unsigned long&)+0x20c>
			sdfatfile.close();
600037b4:	f105 0018 	add.w	r0, r5, #24
600037b8:	f001 fed6 	bl	60005568 <___ZN10FsBaseFile5closeEv_veneer>
		if (--(f->refcount) == 0) {
600037bc:	693e      	ldr	r6, [r7, #16]
600037be:	6875      	ldr	r5, [r6, #4]
600037c0:	3d01      	subs	r5, #1
600037c2:	6075      	str	r5, [r6, #4]
600037c4:	2d00      	cmp	r5, #0
600037c6:	d12f      	bne.n	60003828 <ReceiveFileData(File&, unsigned long, unsigned long&)+0x1e0>
			f->close();
600037c8:	6833      	ldr	r3, [r6, #0]
600037ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
600037cc:	4543      	cmp	r3, r8
600037ce:	d15c      	bne.n	6000388a <ReceiveFileData(File&, unsigned long, unsigned long&)+0x242>
		if (filename) {
600037d0:	6db0      	ldr	r0, [r6, #88]	; 0x58
600037d2:	b110      	cbz	r0, 600037da <ReceiveFileData(File&, unsigned long, unsigned long&)+0x192>
			free(filename);
600037d4:	f001 fec0 	bl	60005558 <__free_veneer>
			filename = nullptr;
600037d8:	65b5      	str	r5, [r6, #88]	; 0x58
600037da:	6d33      	ldr	r3, [r6, #80]	; 0x50
600037dc:	2b00      	cmp	r3, #0
600037de:	d04d      	beq.n	6000387c <ReceiveFileData(File&, unsigned long, unsigned long&)+0x234>
			sdfatfile.close();
600037e0:	f106 0018 	add.w	r0, r6, #24
600037e4:	f001 fec0 	bl	60005568 <___ZN10FsBaseFile5closeEv_veneer>
			delete f;
600037e8:	693d      	ldr	r5, [r7, #16]
600037ea:	b1ed      	cbz	r5, 60003828 <ReceiveFileData(File&, unsigned long, unsigned long&)+0x1e0>
600037ec:	682b      	ldr	r3, [r5, #0]
600037ee:	4a30      	ldr	r2, [pc, #192]	; (600038b0 <ReceiveFileData(File&, unsigned long, unsigned long&)+0x268>)
600037f0:	685b      	ldr	r3, [r3, #4]
600037f2:	4293      	cmp	r3, r2
600037f4:	d158      	bne.n	600038a8 <ReceiveFileData(File&, unsigned long, unsigned long&)+0x260>
	virtual ~SDFile(void) {
600037f6:	4b2f      	ldr	r3, [pc, #188]	; (600038b4 <ReceiveFileData(File&, unsigned long, unsigned long&)+0x26c>)
		if (filename) {
600037f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
	virtual ~SDFile(void) {
600037fa:	602b      	str	r3, [r5, #0]
		if (filename) {
600037fc:	b118      	cbz	r0, 60003806 <ReceiveFileData(File&, unsigned long, unsigned long&)+0x1be>
			free(filename);
600037fe:	f001 feab 	bl	60005558 <__free_veneer>
			filename = nullptr;
60003802:	2300      	movs	r3, #0
60003804:	65ab      	str	r3, [r5, #88]	; 0x58
60003806:	6d2b      	ldr	r3, [r5, #80]	; 0x50
			sdfatfile.close();
60003808:	f105 0618 	add.w	r6, r5, #24
6000380c:	2b00      	cmp	r3, #0
6000380e:	d044      	beq.n	6000389a <ReceiveFileData(File&, unsigned long, unsigned long&)+0x252>
60003810:	4630      	mov	r0, r6
60003812:	f001 fea9 	bl	60005568 <___ZN10FsBaseFile5closeEv_veneer>
60003816:	4b28      	ldr	r3, [pc, #160]	; (600038b8 <ReceiveFileData(File&, unsigned long, unsigned long&)+0x270>)
  ~FsBaseFile() {close();}
60003818:	4630      	mov	r0, r6
6000381a:	60ab      	str	r3, [r5, #8]
6000381c:	f001 fea4 	bl	60005568 <___ZN10FsBaseFile5closeEv_veneer>
	}
60003820:	215c      	movs	r1, #92	; 0x5c
60003822:	4628      	mov	r0, r5
60003824:	f001 ff3c 	bl	600056a0 <___ZdlPvj_veneer>
		f = nullptr;
60003828:	2300      	movs	r3, #0
}
6000382a:	4620      	mov	r0, r4
6000382c:	613b      	str	r3, [r7, #16]
6000382e:	b002      	add	sp, #8
60003830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
60003834:	207f      	movs	r0, #127	; 0x7f
        return false;
60003836:	2400      	movs	r4, #0
60003838:	f001 ff0e 	bl	60005658 <__usb_serial_putchar_veneer>
6000383c:	209b      	movs	r0, #155	; 0x9b
6000383e:	f001 ff0b 	bl	60005658 <__usb_serial_putchar_veneer>
        Serial.printf("CS Failed! RCS:%lu\n", CheckSum);
60003842:	6832      	ldr	r2, [r6, #0]
60003844:	491f      	ldr	r1, [pc, #124]	; (600038c4 <ReceiveFileData(File&, unsigned long, unsigned long&)+0x27c>)
60003846:	481e      	ldr	r0, [pc, #120]	; (600038c0 <ReceiveFileData(File&, unsigned long, unsigned long&)+0x278>)
60003848:	f001 fede 	bl	60005608 <___ZN5Print6printfEPKcz_veneer>
}
6000384c:	4620      	mov	r0, r4
6000384e:	b002      	add	sp, #8
60003850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
60003854:	6d6b      	ldr	r3, [r5, #84]	; 0x54
60003856:	2b00      	cmp	r3, #0
60003858:	d1ac      	bne.n	600037b4 <ReceiveFileData(File&, unsigned long, unsigned long&)+0x16c>
6000385a:	e7af      	b.n	600037bc <ReceiveFileData(File&, unsigned long, unsigned long&)+0x174>
6000385c:	6d63      	ldr	r3, [r4, #84]	; 0x54
6000385e:	2b00      	cmp	r3, #0
60003860:	f47f af42 	bne.w	600036e8 <ReceiveFileData(File&, unsigned long, unsigned long&)+0xa0>
60003864:	e744      	b.n	600036f0 <ReceiveFileData(File&, unsigned long, unsigned long&)+0xa8>
			f->close();
60003866:	4620      	mov	r0, r4
60003868:	4798      	blx	r3
6000386a:	e741      	b.n	600036f0 <ReceiveFileData(File&, unsigned long, unsigned long&)+0xa8>
6000386c:	4628      	mov	r0, r5
6000386e:	4798      	blx	r3
60003870:	e7a4      	b.n	600037bc <ReceiveFileData(File&, unsigned long, unsigned long&)+0x174>
60003872:	6d6b      	ldr	r3, [r5, #84]	; 0x54
60003874:	2b00      	cmp	r3, #0
60003876:	f47f af4f 	bne.w	60003718 <ReceiveFileData(File&, unsigned long, unsigned long&)+0xd0>
6000387a:	e751      	b.n	60003720 <ReceiveFileData(File&, unsigned long, unsigned long&)+0xd8>
6000387c:	6d73      	ldr	r3, [r6, #84]	; 0x54
6000387e:	2b00      	cmp	r3, #0
60003880:	d1ae      	bne.n	600037e0 <ReceiveFileData(File&, unsigned long, unsigned long&)+0x198>
60003882:	e7b1      	b.n	600037e8 <ReceiveFileData(File&, unsigned long, unsigned long&)+0x1a0>
			f->close();
60003884:	4628      	mov	r0, r5
60003886:	4798      	blx	r3
60003888:	e74a      	b.n	60003720 <ReceiveFileData(File&, unsigned long, unsigned long&)+0xd8>
6000388a:	4630      	mov	r0, r6
6000388c:	4798      	blx	r3
6000388e:	e7ab      	b.n	600037e8 <ReceiveFileData(File&, unsigned long, unsigned long&)+0x1a0>
60003890:	6d63      	ldr	r3, [r4, #84]	; 0x54
60003892:	2b00      	cmp	r3, #0
60003894:	f47f af5a 	bne.w	6000374c <ReceiveFileData(File&, unsigned long, unsigned long&)+0x104>
60003898:	e75b      	b.n	60003752 <ReceiveFileData(File&, unsigned long, unsigned long&)+0x10a>
6000389a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
6000389c:	2b00      	cmp	r3, #0
6000389e:	d1b7      	bne.n	60003810 <ReceiveFileData(File&, unsigned long, unsigned long&)+0x1c8>
600038a0:	e7b9      	b.n	60003816 <ReceiveFileData(File&, unsigned long, unsigned long&)+0x1ce>
			delete f;
600038a2:	4620      	mov	r0, r4
600038a4:	4798      	blx	r3
600038a6:	e75d      	b.n	60003764 <ReceiveFileData(File&, unsigned long, unsigned long&)+0x11c>
600038a8:	4628      	mov	r0, r5
600038aa:	4798      	blx	r3
600038ac:	e7bc      	b.n	60003828 <ReceiveFileData(File&, unsigned long, unsigned long&)+0x1e0>
600038ae:	bf00      	nop
600038b0:	00001c55 	.word	0x00001c55
600038b4:	20003358 	.word	0x20003358
600038b8:	20003240 	.word	0x20003240
600038bc:	2000ab50 	.word	0x2000ab50
600038c0:	2000bfd8 	.word	0x2000bfd8
600038c4:	2000ab68 	.word	0x2000ab68
600038c8:	00001a89 	.word	0x00001a89
600038cc:	00000e69 	.word	0x00000e69

600038d0 <GetUInt(unsigned long*, unsigned char)>:
   for(int8_t ByteNum=NumBytes-1; ByteNum>=0; ByteNum--)
600038d0:	3901      	subs	r1, #1
   *InVal=0;
600038d2:	2300      	movs	r3, #0
{
600038d4:	b570      	push	{r4, r5, r6, lr}
   for(int8_t ByteNum=NumBytes-1; ByteNum>=0; ByteNum--)
600038d6:	b24c      	sxtb	r4, r1
   *InVal=0;
600038d8:	6003      	str	r3, [r0, #0]
   for(int8_t ByteNum=NumBytes-1; ByteNum>=0; ByteNum--)
600038da:	429c      	cmp	r4, r3
600038dc:	db12      	blt.n	60003904 <GetUInt(unsigned long*, unsigned char)+0x34>
600038de:	4606      	mov	r6, r0
600038e0:	00e5      	lsls	r5, r4, #3
600038e2:	e00a      	b.n	600038fa <GetUInt(unsigned long*, unsigned char)+0x2a>
        virtual int read() { return usb_serial_getchar(); }
600038e4:	f001 fee0 	bl	600056a8 <__usb_serial_getchar_veneer>
      *InVal += (ByteIn << (ByteNum*8));
600038e8:	3c01      	subs	r4, #1
600038ea:	6833      	ldr	r3, [r6, #0]
600038ec:	40a8      	lsls	r0, r5
600038ee:	b264      	sxtb	r4, r4
600038f0:	3d08      	subs	r5, #8
600038f2:	4403      	add	r3, r0
600038f4:	6033      	str	r3, [r6, #0]
   for(int8_t ByteNum=NumBytes-1; ByteNum>=0; ByteNum--)
600038f6:	1c63      	adds	r3, r4, #1
600038f8:	d004      	beq.n	60003904 <GetUInt(unsigned long*, unsigned char)+0x34>
      if(!SerialAvailabeTimeout()) return false;
600038fa:	f7ff fe49 	bl	60003590 <SerialAvailabeTimeout()>
600038fe:	2800      	cmp	r0, #0
60003900:	d1f0      	bne.n	600038e4 <GetUInt(unsigned long*, unsigned char)+0x14>
}
60003902:	bd70      	pop	{r4, r5, r6, pc}
   return true;
60003904:	2001      	movs	r0, #1
}
60003906:	bd70      	pop	{r4, r5, r6, pc}

60003908 <ReceiveFileName(unsigned long*, char*)>:
   *InVal=0;
60003908:	2300      	movs	r3, #0
{
6000390a:	b570      	push	{r4, r5, r6, lr}
   *InVal=0;
6000390c:	6003      	str	r3, [r0, #0]
{
6000390e:	4604      	mov	r4, r0
60003910:	460e      	mov	r6, r1
      if(!SerialAvailabeTimeout()) return false;
60003912:	f7ff fe3d 	bl	60003590 <SerialAvailabeTimeout()>
60003916:	b1a8      	cbz	r0, 60003944 <ReceiveFileName(unsigned long*, char*)+0x3c>
60003918:	f001 fec6 	bl	600056a8 <__usb_serial_getchar_veneer>
      *InVal += (ByteIn << (ByteNum*8));
6000391c:	6823      	ldr	r3, [r4, #0]
6000391e:	1e75      	subs	r5, r6, #1
60003920:	f206 1691 	addw	r6, r6, #401	; 0x191
60003924:	4418      	add	r0, r3
60003926:	6020      	str	r0, [r4, #0]
   for(int8_t ByteNum=NumBytes-1; ByteNum>=0; ByteNum--)
60003928:	e007      	b.n	6000393a <ReceiveFileName(unsigned long*, char*)+0x32>
6000392a:	f001 febd 	bl	600056a8 <__usb_serial_getchar_veneer>
      FileNamePath[CharNum] = Serial.read();
6000392e:	b2c3      	uxtb	r3, r0
60003930:	f805 3f01 	strb.w	r3, [r5, #1]!
      if (FileNamePath[CharNum]==0) return true;
60003934:	b13b      	cbz	r3, 60003946 <ReceiveFileName(unsigned long*, char*)+0x3e>
      if (++CharNum == MaxNamePathLength)
60003936:	42b5      	cmp	r5, r6
60003938:	d007      	beq.n	6000394a <ReceiveFileName(unsigned long*, char*)+0x42>
      if(!SerialAvailabeTimeout()) return false;
6000393a:	f7ff fe29 	bl	60003590 <SerialAvailabeTimeout()>
6000393e:	4604      	mov	r4, r0
60003940:	2800      	cmp	r0, #0
60003942:	d1f2      	bne.n	6000392a <ReceiveFileName(unsigned long*, char*)+0x22>
   if (!GetUInt(SD_nUSB, 1)) return false;
60003944:	2400      	movs	r4, #0
}
60003946:	4620      	mov	r0, r4
60003948:	bd70      	pop	{r4, r5, r6, pc}
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
6000394a:	207f      	movs	r0, #127	; 0x7f
         return false;
6000394c:	2400      	movs	r4, #0
6000394e:	f001 fe83 	bl	60005658 <__usb_serial_putchar_veneer>
60003952:	209b      	movs	r0, #155	; 0x9b
60003954:	f001 fe80 	bl	60005658 <__usb_serial_putchar_veneer>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
60003958:	210f      	movs	r1, #15
6000395a:	4802      	ldr	r0, [pc, #8]	; (60003964 <ReceiveFileName(unsigned long*, char*)+0x5c>)
6000395c:	f001 fe90 	bl	60005680 <__usb_serial_write_veneer>
60003960:	e7f1      	b.n	60003946 <ReceiveFileName(unsigned long*, char*)+0x3e>
60003962:	bf00      	nop
60003964:	2000ab40 	.word	0x2000ab40

60003968 <LaunchFile()>:
{            
60003968:	b500      	push	{lr}
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
6000396a:	20cc      	movs	r0, #204	; 0xcc
6000396c:	b0e7      	sub	sp, #412	; 0x19c
6000396e:	f001 fe73 	bl	60005658 <__usb_serial_putchar_veneer>
60003972:	2064      	movs	r0, #100	; 0x64
60003974:	f001 fe70 	bl	60005658 <__usb_serial_putchar_veneer>
   if (ReceiveFileName(&SD_nUSB, FileNamePath))
60003978:	a901      	add	r1, sp, #4
6000397a:	4668      	mov	r0, sp
6000397c:	f7ff ffc4 	bl	60003908 <ReceiveFileName(unsigned long*, char*)>
60003980:	b910      	cbnz	r0, 60003988 <LaunchFile()+0x20>
}
60003982:	b067      	add	sp, #412	; 0x19c
60003984:	f85d fb04 	ldr.w	pc, [sp], #4
60003988:	20cc      	movs	r0, #204	; 0xcc
6000398a:	f001 fe65 	bl	60005658 <__usb_serial_putchar_veneer>
6000398e:	2064      	movs	r0, #100	; 0x64
60003990:	f001 fe62 	bl	60005658 <__usb_serial_putchar_veneer>
      RemoteLaunch(SD_nUSB !=0 , FileNamePath);
60003994:	9800      	ldr	r0, [sp, #0]
60003996:	a901      	add	r1, sp, #4
60003998:	3800      	subs	r0, #0
6000399a:	bf18      	it	ne
6000399c:	2001      	movne	r0, #1
6000399e:	f001 fe4b 	bl	60005638 <___Z12RemoteLaunchbPKc_veneer>
}
600039a2:	b067      	add	sp, #412	; 0x19c
600039a4:	f85d fb04 	ldr.w	pc, [sp], #4

600039a8 <DeleteFileCommand()>:
// Receive <-- SD_nUSB(1), File Path(MaxNameLength, null terminator)
// Send --> 0x64CC on Pass, 0x9b7f on Fail 
//
// Notes: Once Delete File Token Received, responses are 2 bytes in length
FLASHMEM void DeleteFileCommand()
{
600039a8:	b530      	push	{r4, r5, lr}
600039aa:	20cc      	movs	r0, #204	; 0xcc
600039ac:	b0e7      	sub	sp, #412	; 0x19c
600039ae:	f001 fe53 	bl	60005658 <__usb_serial_putchar_veneer>
600039b2:	2064      	movs	r0, #100	; 0x64
600039b4:	f001 fe50 	bl	60005658 <__usb_serial_putchar_veneer>
      if(!SerialAvailabeTimeout()) return false;
600039b8:	f7ff fdea 	bl	60003590 <SerialAvailabeTimeout()>
600039bc:	b190      	cbz	r0, 600039e4 <DeleteFileCommand()+0x3c>
        virtual int read() { return usb_serial_getchar(); }
600039be:	f001 fe73 	bl	600056a8 <__usb_serial_getchar_veneer>
600039c2:	4604      	mov	r4, r0
        SendU16(FailToken);
        Serial.println("Error receiving storage type!");
        return;
    }

    if (!GetPathParameter(FilePath))
600039c4:	a801      	add	r0, sp, #4
600039c6:	f7ff fe07 	bl	600035d8 <GetPathParameter(char*)>
600039ca:	b1d8      	cbz	r0, 60003a04 <DeleteFileCommand()+0x5c>
    if (!SD.begin(BUILTIN_SDCARD))
600039cc:	21fe      	movs	r1, #254	; 0xfe
600039ce:	4822      	ldr	r0, [pc, #136]	; (60003a58 <DeleteFileCommand()+0xb0>)
600039d0:	f001 fe4e 	bl	60005670 <___ZN7SDClass5beginEh_veneer>
600039d4:	4605      	mov	r5, r0
600039d6:	b320      	cbz	r0, 60003a22 <DeleteFileCommand()+0x7a>
600039d8:	491f      	ldr	r1, [pc, #124]	; (60003a58 <DeleteFileCommand()+0xb0>)
    {
        SendU16(FailToken);
        Serial.println("Error getting storage device!");
    }

    DeleteFile(FilePath, *sourceFS);
600039da:	a801      	add	r0, sp, #4
600039dc:	f7ff fc34 	bl	60003248 <DeleteFile(char const*, FS&)>
}
600039e0:	b067      	add	sp, #412	; 0x19c
600039e2:	bd30      	pop	{r4, r5, pc}
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
600039e4:	207f      	movs	r0, #127	; 0x7f
600039e6:	f001 fe37 	bl	60005658 <__usb_serial_putchar_veneer>
600039ea:	209b      	movs	r0, #155	; 0x9b
600039ec:	f001 fe34 	bl	60005658 <__usb_serial_putchar_veneer>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
600039f0:	211d      	movs	r1, #29
600039f2:	481a      	ldr	r0, [pc, #104]	; (60003a5c <DeleteFileCommand()+0xb4>)
600039f4:	f001 fe44 	bl	60005680 <__usb_serial_write_veneer>
600039f8:	4819      	ldr	r0, [pc, #100]	; (60003a60 <DeleteFileCommand()+0xb8>)
600039fa:	b067      	add	sp, #412	; 0x19c
600039fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
60003a00:	f001 be4a 	b.w	60005698 <___ZN5Print7printlnEv_veneer>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
60003a04:	207f      	movs	r0, #127	; 0x7f
60003a06:	f001 fe27 	bl	60005658 <__usb_serial_putchar_veneer>
60003a0a:	209b      	movs	r0, #155	; 0x9b
60003a0c:	f001 fe24 	bl	60005658 <__usb_serial_putchar_veneer>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
60003a10:	2115      	movs	r1, #21
60003a12:	4814      	ldr	r0, [pc, #80]	; (60003a64 <DeleteFileCommand()+0xbc>)
60003a14:	f001 fe34 	bl	60005680 <__usb_serial_write_veneer>
60003a18:	4811      	ldr	r0, [pc, #68]	; (60003a60 <DeleteFileCommand()+0xb8>)
60003a1a:	f001 fe3d 	bl	60005698 <___ZN5Print7printlnEv_veneer>
60003a1e:	b067      	add	sp, #412	; 0x19c
60003a20:	bd30      	pop	{r4, r5, pc}
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
60003a22:	207f      	movs	r0, #127	; 0x7f
60003a24:	f001 fe18 	bl	60005658 <__usb_serial_putchar_veneer>
60003a28:	209b      	movs	r0, #155	; 0x9b
60003a2a:	f001 fe15 	bl	60005658 <__usb_serial_putchar_veneer>
        Serial.printf("Specified storage device was not found: %u\n", storageType);
60003a2e:	4622      	mov	r2, r4
60003a30:	490d      	ldr	r1, [pc, #52]	; (60003a68 <DeleteFileCommand()+0xc0>)
60003a32:	480b      	ldr	r0, [pc, #44]	; (60003a60 <DeleteFileCommand()+0xb8>)
60003a34:	f001 fde8 	bl	60005608 <___ZN5Print6printfEPKcz_veneer>
60003a38:	207f      	movs	r0, #127	; 0x7f
60003a3a:	f001 fe0d 	bl	60005658 <__usb_serial_putchar_veneer>
60003a3e:	209b      	movs	r0, #155	; 0x9b
60003a40:	f001 fe0a 	bl	60005658 <__usb_serial_putchar_veneer>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
60003a44:	211d      	movs	r1, #29
60003a46:	4809      	ldr	r0, [pc, #36]	; (60003a6c <DeleteFileCommand()+0xc4>)
60003a48:	f001 fe1a 	bl	60005680 <__usb_serial_write_veneer>
60003a4c:	4804      	ldr	r0, [pc, #16]	; (60003a60 <DeleteFileCommand()+0xb8>)
60003a4e:	f001 fe23 	bl	60005698 <___ZN5Print7printlnEv_veneer>
60003a52:	4629      	mov	r1, r5
60003a54:	e7c1      	b.n	600039da <DeleteFileCommand()+0x32>
60003a56:	bf00      	nop
60003a58:	2005daf4 	.word	0x2005daf4
60003a5c:	2000ab7c 	.word	0x2000ab7c
60003a60:	2000bfd8 	.word	0x2000bfd8
60003a64:	2000ab9c 	.word	0x2000ab9c
60003a68:	2000a8a8 	.word	0x2000a8a8
60003a6c:	2000abb4 	.word	0x2000abb4

60003a70 <CopyFileCommand()>:
{
60003a70:	b510      	push	{r4, lr}
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
60003a72:	20cc      	movs	r0, #204	; 0xcc
60003a74:	f5ad 7d4a 	sub.w	sp, sp, #808	; 0x328
60003a78:	f001 fdee 	bl	60005658 <__usb_serial_putchar_veneer>
60003a7c:	2064      	movs	r0, #100	; 0x64
60003a7e:	f001 fdeb 	bl	60005658 <__usb_serial_putchar_veneer>
60003a82:	f7ff fd85 	bl	60003590 <SerialAvailabeTimeout()>
60003a86:	b330      	cbz	r0, 60003ad6 <CopyFileCommand()+0x66>
        virtual int read() { return usb_serial_getchar(); }
60003a88:	f001 fe0e 	bl	600056a8 <__usb_serial_getchar_veneer>
60003a8c:	4604      	mov	r4, r0
    if (!GetPathParameter(SourcePath)) return;
60003a8e:	4668      	mov	r0, sp
60003a90:	f7ff fda2 	bl	600035d8 <GetPathParameter(char*)>
60003a94:	b910      	cbnz	r0, 60003a9c <CopyFileCommand()+0x2c>
}
60003a96:	f50d 7d4a 	add.w	sp, sp, #808	; 0x328
60003a9a:	bd10      	pop	{r4, pc}
    if (!GetPathParameter(DestinationPath)) return;
60003a9c:	a865      	add	r0, sp, #404	; 0x194
60003a9e:	f7ff fd9b 	bl	600035d8 <GetPathParameter(char*)>
60003aa2:	2800      	cmp	r0, #0
60003aa4:	d0f7      	beq.n	60003a96 <CopyFileCommand()+0x26>
    if (!SD.begin(BUILTIN_SDCARD))
60003aa6:	21fe      	movs	r1, #254	; 0xfe
60003aa8:	481f      	ldr	r0, [pc, #124]	; (60003b28 <CopyFileCommand()+0xb8>)
60003aaa:	f001 fde1 	bl	60005670 <___ZN7SDClass5beginEh_veneer>
60003aae:	b378      	cbz	r0, 60003b10 <CopyFileCommand()+0xa0>
    if (!EnsureDirectory(DestinationPath, *sourceFS))
60003ab0:	491d      	ldr	r1, [pc, #116]	; (60003b28 <CopyFileCommand()+0xb8>)
60003ab2:	a865      	add	r0, sp, #404	; 0x194
60003ab4:	f7fe face 	bl	60002054 <EnsureDirectory(char const*, FS&)>
60003ab8:	b1f0      	cbz	r0, 60003af8 <CopyFileCommand()+0x88>
    if (!CopyFile(SourcePath, DestinationPath, *sourceFS)) return;
60003aba:	4a1b      	ldr	r2, [pc, #108]	; (60003b28 <CopyFileCommand()+0xb8>)
60003abc:	a965      	add	r1, sp, #404	; 0x194
60003abe:	4668      	mov	r0, sp
60003ac0:	f7ff f838 	bl	60002b34 <CopyFile(char const*, char const*, FS&)>
60003ac4:	2800      	cmp	r0, #0
60003ac6:	d0e6      	beq.n	60003a96 <CopyFileCommand()+0x26>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
60003ac8:	20cc      	movs	r0, #204	; 0xcc
60003aca:	f001 fdc5 	bl	60005658 <__usb_serial_putchar_veneer>
60003ace:	2064      	movs	r0, #100	; 0x64
60003ad0:	f001 fdc2 	bl	60005658 <__usb_serial_putchar_veneer>
60003ad4:	e7df      	b.n	60003a96 <CopyFileCommand()+0x26>
60003ad6:	207f      	movs	r0, #127	; 0x7f
60003ad8:	f001 fdbe 	bl	60005658 <__usb_serial_putchar_veneer>
60003adc:	209b      	movs	r0, #155	; 0x9b
60003ade:	f001 fdbb 	bl	60005658 <__usb_serial_putchar_veneer>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
60003ae2:	2123      	movs	r1, #35	; 0x23
60003ae4:	4811      	ldr	r0, [pc, #68]	; (60003b2c <CopyFileCommand()+0xbc>)
60003ae6:	f001 fdcb 	bl	60005680 <__usb_serial_write_veneer>
60003aea:	4811      	ldr	r0, [pc, #68]	; (60003b30 <CopyFileCommand()+0xc0>)
}
60003aec:	f50d 7d4a 	add.w	sp, sp, #808	; 0x328
60003af0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
60003af4:	f001 bdd0 	b.w	60005698 <___ZN5Print7printlnEv_veneer>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
60003af8:	207f      	movs	r0, #127	; 0x7f
60003afa:	f001 fdad 	bl	60005658 <__usb_serial_putchar_veneer>
60003afe:	209b      	movs	r0, #155	; 0x9b
60003b00:	f001 fdaa 	bl	60005658 <__usb_serial_putchar_veneer>
        Serial.printf("Failed to ensure directory for: %s\n", DestinationPath);
60003b04:	aa65      	add	r2, sp, #404	; 0x194
60003b06:	490b      	ldr	r1, [pc, #44]	; (60003b34 <CopyFileCommand()+0xc4>)
60003b08:	4809      	ldr	r0, [pc, #36]	; (60003b30 <CopyFileCommand()+0xc0>)
60003b0a:	f001 fd7d 	bl	60005608 <___ZN5Print6printfEPKcz_veneer>
        return;
60003b0e:	e7c2      	b.n	60003a96 <CopyFileCommand()+0x26>
60003b10:	207f      	movs	r0, #127	; 0x7f
60003b12:	f001 fda1 	bl	60005658 <__usb_serial_putchar_veneer>
60003b16:	209b      	movs	r0, #155	; 0x9b
60003b18:	f001 fd9e 	bl	60005658 <__usb_serial_putchar_veneer>
        Serial.printf("Specified storage device was not found: %u\n", storageType);
60003b1c:	4622      	mov	r2, r4
60003b1e:	4906      	ldr	r1, [pc, #24]	; (60003b38 <CopyFileCommand()+0xc8>)
60003b20:	4803      	ldr	r0, [pc, #12]	; (60003b30 <CopyFileCommand()+0xc0>)
60003b22:	f001 fd71 	bl	60005608 <___ZN5Print6printfEPKcz_veneer>
    if (!sourceFS) return;
60003b26:	e7b6      	b.n	60003a96 <CopyFileCommand()+0x26>
60003b28:	2005daf4 	.word	0x2005daf4
60003b2c:	2000abd4 	.word	0x2000abd4
60003b30:	2000bfd8 	.word	0x2000bfd8
60003b34:	2000abf8 	.word	0x2000abf8
60003b38:	2000a8a8 	.word	0x2000a8a8

60003b3c <GetDirectoryCommand()>:
{
60003b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
60003b40:	20cc      	movs	r0, #204	; 0xcc
60003b42:	b0e6      	sub	sp, #408	; 0x198
60003b44:	f001 fd88 	bl	60005658 <__usb_serial_putchar_veneer>
60003b48:	2064      	movs	r0, #100	; 0x64
60003b4a:	f001 fd85 	bl	60005658 <__usb_serial_putchar_veneer>
60003b4e:	f7ff fd1f 	bl	60003590 <SerialAvailabeTimeout()>
60003b52:	2800      	cmp	r0, #0
60003b54:	d041      	beq.n	60003bda <GetDirectoryCommand()+0x9e>
        virtual int read() { return usb_serial_getchar(); }
60003b56:	f001 fda7 	bl	600056a8 <__usb_serial_getchar_veneer>
60003b5a:	4604      	mov	r4, r0
60003b5c:	f7ff fd18 	bl	60003590 <SerialAvailabeTimeout()>
60003b60:	2800      	cmp	r0, #0
60003b62:	d04a      	beq.n	60003bfa <GetDirectoryCommand()+0xbe>
60003b64:	f001 fda0 	bl	600056a8 <__usb_serial_getchar_veneer>
60003b68:	4606      	mov	r6, r0
60003b6a:	f7ff fd11 	bl	60003590 <SerialAvailabeTimeout()>
60003b6e:	2800      	cmp	r0, #0
60003b70:	d043      	beq.n	60003bfa <GetDirectoryCommand()+0xbe>
60003b72:	f001 fd99 	bl	600056a8 <__usb_serial_getchar_veneer>
60003b76:	4607      	mov	r7, r0
60003b78:	f7ff fd0a 	bl	60003590 <SerialAvailabeTimeout()>
60003b7c:	2800      	cmp	r0, #0
60003b7e:	d045      	beq.n	60003c0c <GetDirectoryCommand()+0xd0>
60003b80:	f001 fd92 	bl	600056a8 <__usb_serial_getchar_veneer>
60003b84:	4680      	mov	r8, r0
60003b86:	f7ff fd03 	bl	60003590 <SerialAvailabeTimeout()>
60003b8a:	2800      	cmp	r0, #0
60003b8c:	d03e      	beq.n	60003c0c <GetDirectoryCommand()+0xd0>
60003b8e:	f001 fd8b 	bl	600056a8 <__usb_serial_getchar_veneer>
60003b92:	4605      	mov	r5, r0
    if (!GetPathParameter(path))
60003b94:	a801      	add	r0, sp, #4
60003b96:	f7ff fd1f 	bl	600035d8 <GetPathParameter(char*)>
60003b9a:	2800      	cmp	r0, #0
60003b9c:	d03f      	beq.n	60003c1e <GetDirectoryCommand()+0xe2>
    if (!SD.begin(BUILTIN_SDCARD))
60003b9e:	21fe      	movs	r1, #254	; 0xfe
60003ba0:	482c      	ldr	r0, [pc, #176]	; (60003c54 <GetDirectoryCommand()+0x118>)
60003ba2:	f001 fd65 	bl	60005670 <___ZN7SDClass5beginEh_veneer>
60003ba6:	2800      	cmp	r0, #0
60003ba8:	d047      	beq.n	60003c3a <GetDirectoryCommand()+0xfe>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
60003baa:	205a      	movs	r0, #90	; 0x5a
60003bac:	f001 fd54 	bl	60005658 <__usb_serial_putchar_veneer>
60003bb0:	205a      	movs	r0, #90	; 0x5a
60003bb2:	f001 fd51 	bl	60005658 <__usb_serial_putchar_veneer>
    if (!SendPagedDirectoryContents(*sourceFS, path, skip, take)) return;
60003bb6:	a901      	add	r1, sp, #4
60003bb8:	eb05 2308 	add.w	r3, r5, r8, lsl #8
60003bbc:	4825      	ldr	r0, [pc, #148]	; (60003c54 <GetDirectoryCommand()+0x118>)
60003bbe:	eb07 2206 	add.w	r2, r7, r6, lsl #8
60003bc2:	f7fe faad 	bl	60002120 <SendPagedDirectoryContents(FS&, char const*, int, int)>
60003bc6:	b128      	cbz	r0, 60003bd4 <GetDirectoryCommand()+0x98>
60003bc8:	20a5      	movs	r0, #165	; 0xa5
60003bca:	f001 fd45 	bl	60005658 <__usb_serial_putchar_veneer>
60003bce:	20a5      	movs	r0, #165	; 0xa5
60003bd0:	f001 fd42 	bl	60005658 <__usb_serial_putchar_veneer>
}
60003bd4:	b066      	add	sp, #408	; 0x198
60003bd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
60003bda:	207f      	movs	r0, #127	; 0x7f
60003bdc:	f001 fd3c 	bl	60005658 <__usb_serial_putchar_veneer>
60003be0:	209b      	movs	r0, #155	; 0x9b
60003be2:	f001 fd39 	bl	60005658 <__usb_serial_putchar_veneer>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
60003be6:	2123      	movs	r1, #35	; 0x23
60003be8:	481b      	ldr	r0, [pc, #108]	; (60003c58 <GetDirectoryCommand()+0x11c>)
60003bea:	f001 fd49 	bl	60005680 <__usb_serial_write_veneer>
60003bee:	481b      	ldr	r0, [pc, #108]	; (60003c5c <GetDirectoryCommand()+0x120>)
60003bf0:	b066      	add	sp, #408	; 0x198
60003bf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
60003bf6:	f001 bd4f 	b.w	60005698 <___ZN5Print7printlnEv_veneer>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
60003bfa:	207f      	movs	r0, #127	; 0x7f
60003bfc:	f001 fd2c 	bl	60005658 <__usb_serial_putchar_veneer>
60003c00:	209b      	movs	r0, #155	; 0x9b
60003c02:	f001 fd29 	bl	60005658 <__usb_serial_putchar_veneer>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
60003c06:	211b      	movs	r1, #27
60003c08:	4815      	ldr	r0, [pc, #84]	; (60003c60 <GetDirectoryCommand()+0x124>)
60003c0a:	e7ee      	b.n	60003bea <GetDirectoryCommand()+0xae>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
60003c0c:	207f      	movs	r0, #127	; 0x7f
60003c0e:	f001 fd23 	bl	60005658 <__usb_serial_putchar_veneer>
60003c12:	209b      	movs	r0, #155	; 0x9b
60003c14:	f001 fd20 	bl	60005658 <__usb_serial_putchar_veneer>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
60003c18:	211b      	movs	r1, #27
60003c1a:	4812      	ldr	r0, [pc, #72]	; (60003c64 <GetDirectoryCommand()+0x128>)
60003c1c:	e7e5      	b.n	60003bea <GetDirectoryCommand()+0xae>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
60003c1e:	207f      	movs	r0, #127	; 0x7f
60003c20:	f001 fd1a 	bl	60005658 <__usb_serial_putchar_veneer>
60003c24:	209b      	movs	r0, #155	; 0x9b
60003c26:	f001 fd17 	bl	60005658 <__usb_serial_putchar_veneer>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
60003c2a:	211b      	movs	r1, #27
60003c2c:	480e      	ldr	r0, [pc, #56]	; (60003c68 <GetDirectoryCommand()+0x12c>)
60003c2e:	f001 fd27 	bl	60005680 <__usb_serial_write_veneer>
60003c32:	480a      	ldr	r0, [pc, #40]	; (60003c5c <GetDirectoryCommand()+0x120>)
60003c34:	f001 fd30 	bl	60005698 <___ZN5Print7printlnEv_veneer>
60003c38:	e7cc      	b.n	60003bd4 <GetDirectoryCommand()+0x98>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
60003c3a:	207f      	movs	r0, #127	; 0x7f
60003c3c:	f001 fd0c 	bl	60005658 <__usb_serial_putchar_veneer>
60003c40:	209b      	movs	r0, #155	; 0x9b
60003c42:	f001 fd09 	bl	60005658 <__usb_serial_putchar_veneer>
        Serial.printf("Specified storage device was not found: %u\n", storageType);
60003c46:	4622      	mov	r2, r4
60003c48:	4908      	ldr	r1, [pc, #32]	; (60003c6c <GetDirectoryCommand()+0x130>)
60003c4a:	4804      	ldr	r0, [pc, #16]	; (60003c5c <GetDirectoryCommand()+0x120>)
60003c4c:	f001 fcdc 	bl	60005608 <___ZN5Print6printfEPKcz_veneer>
    if (!sourceFS) return;
60003c50:	e7c0      	b.n	60003bd4 <GetDirectoryCommand()+0x98>
60003c52:	bf00      	nop
60003c54:	2005daf4 	.word	0x2005daf4
60003c58:	2000abd4 	.word	0x2000abd4
60003c5c:	2000bfd8 	.word	0x2000bfd8
60003c60:	2000ac1c 	.word	0x2000ac1c
60003c64:	2000ac38 	.word	0x2000ac38
60003c68:	2000ac54 	.word	0x2000ac54
60003c6c:	2000a8a8 	.word	0x2000a8a8

60003c70 <PostFileCommand()>:
{
60003c70:	b570      	push	{r4, r5, r6, lr}
60003c72:	20cc      	movs	r0, #204	; 0xcc
60003c74:	b0ec      	sub	sp, #432	; 0x1b0
60003c76:	f001 fcef 	bl	60005658 <__usb_serial_putchar_veneer>
60003c7a:	2064      	movs	r0, #100	; 0x64
60003c7c:	2418      	movs	r4, #24
   *InVal=0;
60003c7e:	2500      	movs	r5, #0
60003c80:	f001 fcea 	bl	60005658 <__usb_serial_putchar_veneer>
      if(!SerialAvailabeTimeout()) return false;
60003c84:	f7ff fc84 	bl	60003590 <SerialAvailabeTimeout()>
60003c88:	b320      	cbz	r0, 60003cd4 <PostFileCommand()+0x64>
        virtual int read() { return usb_serial_getchar(); }
60003c8a:	f001 fd0d 	bl	600056a8 <__usb_serial_getchar_veneer>
      *InVal += (ByteIn << (ByteNum*8));
60003c8e:	40a0      	lsls	r0, r4
   for(int8_t ByteNum=NumBytes-1; ByteNum>=0; ByteNum--)
60003c90:	3c08      	subs	r4, #8
      *InVal += (ByteIn << (ByteNum*8));
60003c92:	4405      	add	r5, r0
   for(int8_t ByteNum=NumBytes-1; ByteNum>=0; ByteNum--)
60003c94:	f114 0f08 	cmn.w	r4, #8
60003c98:	d1f4      	bne.n	60003c84 <PostFileCommand()+0x14>
   *InVal=0;
60003c9a:	2600      	movs	r6, #0
60003c9c:	9601      	str	r6, [sp, #4]
      if(!SerialAvailabeTimeout()) return false;
60003c9e:	f7ff fc77 	bl	60003590 <SerialAvailabeTimeout()>
60003ca2:	b338      	cbz	r0, 60003cf4 <PostFileCommand()+0x84>
60003ca4:	f001 fd00 	bl	600056a8 <__usb_serial_getchar_veneer>
      *InVal += (ByteIn << (ByteNum*8));
60003ca8:	0204      	lsls	r4, r0, #8
60003caa:	9401      	str	r4, [sp, #4]
      if(!SerialAvailabeTimeout()) return false;
60003cac:	f7ff fc70 	bl	60003590 <SerialAvailabeTimeout()>
60003cb0:	b300      	cbz	r0, 60003cf4 <PostFileCommand()+0x84>
60003cb2:	f001 fcf9 	bl	600056a8 <__usb_serial_getchar_veneer>
      *InVal += (ByteIn << (ByteNum*8));
60003cb6:	4420      	add	r0, r4
60003cb8:	9001      	str	r0, [sp, #4]
      if(!SerialAvailabeTimeout()) return false;
60003cba:	f7ff fc69 	bl	60003590 <SerialAvailabeTimeout()>
60003cbe:	2800      	cmp	r0, #0
60003cc0:	d077      	beq.n	60003db2 <PostFileCommand()+0x142>
60003cc2:	f001 fcf1 	bl	600056a8 <__usb_serial_getchar_veneer>
60003cc6:	4604      	mov	r4, r0
    if (!GetPathParameter(FileNamePath)) return;
60003cc8:	a807      	add	r0, sp, #28
60003cca:	f7ff fc85 	bl	600035d8 <GetPathParameter(char*)>
60003cce:	b9d0      	cbnz	r0, 60003d06 <PostFileCommand()+0x96>
}
60003cd0:	b06c      	add	sp, #432	; 0x1b0
60003cd2:	bd70      	pop	{r4, r5, r6, pc}
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
60003cd4:	207f      	movs	r0, #127	; 0x7f
60003cd6:	f001 fcbf 	bl	60005658 <__usb_serial_putchar_veneer>
60003cda:	209b      	movs	r0, #155	; 0x9b
60003cdc:	f001 fcbc 	bl	60005658 <__usb_serial_putchar_veneer>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
60003ce0:	2122      	movs	r1, #34	; 0x22
60003ce2:	4857      	ldr	r0, [pc, #348]	; (60003e40 <PostFileCommand()+0x1d0>)
60003ce4:	f001 fccc 	bl	60005680 <__usb_serial_write_veneer>
60003ce8:	4856      	ldr	r0, [pc, #344]	; (60003e44 <PostFileCommand()+0x1d4>)
60003cea:	b06c      	add	sp, #432	; 0x1b0
60003cec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
60003cf0:	f001 bcd2 	b.w	60005698 <___ZN5Print7printlnEv_veneer>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
60003cf4:	207f      	movs	r0, #127	; 0x7f
60003cf6:	f001 fcaf 	bl	60005658 <__usb_serial_putchar_veneer>
60003cfa:	209b      	movs	r0, #155	; 0x9b
60003cfc:	f001 fcac 	bl	60005658 <__usb_serial_putchar_veneer>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
60003d00:	211f      	movs	r1, #31
60003d02:	4851      	ldr	r0, [pc, #324]	; (60003e48 <PostFileCommand()+0x1d8>)
60003d04:	e7ee      	b.n	60003ce4 <PostFileCommand()+0x74>
    if (!SD.begin(BUILTIN_SDCARD))
60003d06:	21fe      	movs	r1, #254	; 0xfe
60003d08:	4850      	ldr	r0, [pc, #320]	; (60003e4c <PostFileCommand()+0x1dc>)
60003d0a:	f001 fcb1 	bl	60005670 <___ZN7SDClass5beginEh_veneer>
60003d0e:	2800      	cmp	r0, #0
60003d10:	d07c      	beq.n	60003e0c <PostFileCommand()+0x19c>
    if (!EnsureDirectory(FileNamePath, *sourceFS))
60003d12:	494e      	ldr	r1, [pc, #312]	; (60003e4c <PostFileCommand()+0x1dc>)
60003d14:	a807      	add	r0, sp, #28
60003d16:	f7fe f99d 	bl	60002054 <EnsureDirectory(char const*, FS&)>
60003d1a:	2800      	cmp	r0, #0
60003d1c:	d06a      	beq.n	60003df4 <PostFileCommand()+0x184>
    File fileStream;
60003d1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
60003d22:	9603      	str	r6, [sp, #12]
60003d24:	f88d 6014 	strb.w	r6, [sp, #20]
    if (!GetFileStream(storageType, FileNamePath, sourceFS, fileStream)) return;
60003d28:	a907      	add	r1, sp, #28
    File fileStream;
60003d2a:	9606      	str	r6, [sp, #24]
    if (!GetFileStream(storageType, FileNamePath, sourceFS, fileStream)) return;
60003d2c:	4620      	mov	r0, r4
    File fileStream;
60003d2e:	4e48      	ldr	r6, [pc, #288]	; (60003e50 <PostFileCommand()+0x1e0>)
60003d30:	9304      	str	r3, [sp, #16]
    if (!GetFileStream(storageType, FileNamePath, sourceFS, fileStream)) return;
60003d32:	ab02      	add	r3, sp, #8
60003d34:	4a45      	ldr	r2, [pc, #276]	; (60003e4c <PostFileCommand()+0x1dc>)
    File fileStream;
60003d36:	9602      	str	r6, [sp, #8]
    if (!GetFileStream(storageType, FileNamePath, sourceFS, fileStream)) return;
60003d38:	f7fe f862 	bl	60001e00 <GetFileStream(unsigned long, char*, FS*, File&)>
60003d3c:	2800      	cmp	r0, #0
60003d3e:	d141      	bne.n	60003dc4 <PostFileCommand()+0x154>
		if (f) dec_refcount();
60003d40:	9c06      	ldr	r4, [sp, #24]
	virtual ~File() {
60003d42:	9602      	str	r6, [sp, #8]
		if (f) dec_refcount();
60003d44:	2c00      	cmp	r4, #0
60003d46:	d0c3      	beq.n	60003cd0 <PostFileCommand()+0x60>
		if (--(f->refcount) == 0) {
60003d48:	6865      	ldr	r5, [r4, #4]
60003d4a:	3d01      	subs	r5, #1
60003d4c:	6065      	str	r5, [r4, #4]
60003d4e:	2d00      	cmp	r5, #0
60003d50:	d1be      	bne.n	60003cd0 <PostFileCommand()+0x60>
			f->close();
60003d52:	6823      	ldr	r3, [r4, #0]
60003d54:	4a3f      	ldr	r2, [pc, #252]	; (60003e54 <PostFileCommand()+0x1e4>)
60003d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
60003d58:	4293      	cmp	r3, r2
60003d5a:	d163      	bne.n	60003e24 <PostFileCommand()+0x1b4>
		if (filename) {
60003d5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
60003d5e:	b110      	cbz	r0, 60003d66 <PostFileCommand()+0xf6>
			free(filename);
60003d60:	f001 fbfa 	bl	60005558 <__free_veneer>
			filename = nullptr;
60003d64:	65a5      	str	r5, [r4, #88]	; 0x58
60003d66:	6d23      	ldr	r3, [r4, #80]	; 0x50
60003d68:	2b00      	cmp	r3, #0
60003d6a:	d05e      	beq.n	60003e2a <PostFileCommand()+0x1ba>
			sdfatfile.close();
60003d6c:	f104 0018 	add.w	r0, r4, #24
60003d70:	f001 fbfa 	bl	60005568 <___ZN10FsBaseFile5closeEv_veneer>
			delete f;
60003d74:	6823      	ldr	r3, [r4, #0]
60003d76:	4a38      	ldr	r2, [pc, #224]	; (60003e58 <PostFileCommand()+0x1e8>)
60003d78:	685b      	ldr	r3, [r3, #4]
60003d7a:	4293      	cmp	r3, r2
60003d7c:	d15d      	bne.n	60003e3a <PostFileCommand()+0x1ca>
	virtual ~SDFile(void) {
60003d7e:	4b37      	ldr	r3, [pc, #220]	; (60003e5c <PostFileCommand()+0x1ec>)
		if (filename) {
60003d80:	6da0      	ldr	r0, [r4, #88]	; 0x58
	virtual ~SDFile(void) {
60003d82:	6023      	str	r3, [r4, #0]
		if (filename) {
60003d84:	b118      	cbz	r0, 60003d8e <PostFileCommand()+0x11e>
			free(filename);
60003d86:	f001 fbe7 	bl	60005558 <__free_veneer>
			filename = nullptr;
60003d8a:	2300      	movs	r3, #0
60003d8c:	65a3      	str	r3, [r4, #88]	; 0x58
60003d8e:	6d23      	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
60003d90:	f104 0518 	add.w	r5, r4, #24
60003d94:	2b00      	cmp	r3, #0
60003d96:	d04c      	beq.n	60003e32 <PostFileCommand()+0x1c2>
60003d98:	4628      	mov	r0, r5
60003d9a:	f001 fbe5 	bl	60005568 <___ZN10FsBaseFile5closeEv_veneer>
60003d9e:	4b30      	ldr	r3, [pc, #192]	; (60003e60 <PostFileCommand()+0x1f0>)
  ~FsBaseFile() {close();}
60003da0:	4628      	mov	r0, r5
60003da2:	60a3      	str	r3, [r4, #8]
60003da4:	f001 fbe0 	bl	60005568 <___ZN10FsBaseFile5closeEv_veneer>
	}
60003da8:	215c      	movs	r1, #92	; 0x5c
60003daa:	4620      	mov	r0, r4
60003dac:	f001 fc78 	bl	600056a0 <___ZdlPvj_veneer>
60003db0:	e78e      	b.n	60003cd0 <PostFileCommand()+0x60>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
60003db2:	207f      	movs	r0, #127	; 0x7f
60003db4:	f001 fc50 	bl	60005658 <__usb_serial_putchar_veneer>
60003db8:	209b      	movs	r0, #155	; 0x9b
60003dba:	f001 fc4d 	bl	60005658 <__usb_serial_putchar_veneer>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
60003dbe:	2123      	movs	r1, #35	; 0x23
60003dc0:	4828      	ldr	r0, [pc, #160]	; (60003e64 <PostFileCommand()+0x1f4>)
60003dc2:	e78f      	b.n	60003ce4 <PostFileCommand()+0x74>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
60003dc4:	20cc      	movs	r0, #204	; 0xcc
60003dc6:	f001 fc47 	bl	60005658 <__usb_serial_putchar_veneer>
60003dca:	2064      	movs	r0, #100	; 0x64
60003dcc:	f001 fc44 	bl	60005658 <__usb_serial_putchar_veneer>
    if (!ReceiveFileData(fileStream, fileLength, checksum)) return;
60003dd0:	aa01      	add	r2, sp, #4
60003dd2:	4629      	mov	r1, r5
60003dd4:	a802      	add	r0, sp, #8
60003dd6:	f7ff fc37 	bl	60003648 <ReceiveFileData(File&, unsigned long, unsigned long&)>
60003dda:	2800      	cmp	r0, #0
60003ddc:	d0b0      	beq.n	60003d40 <PostFileCommand()+0xd0>
60003dde:	20cc      	movs	r0, #204	; 0xcc
60003de0:	f001 fc3a 	bl	60005658 <__usb_serial_putchar_veneer>
60003de4:	2064      	movs	r0, #100	; 0x64
60003de6:	f001 fc37 	bl	60005658 <__usb_serial_putchar_veneer>
		if (f) dec_refcount();
60003dea:	9c06      	ldr	r4, [sp, #24]
	virtual ~File() {
60003dec:	9602      	str	r6, [sp, #8]
		if (f) dec_refcount();
60003dee:	2c00      	cmp	r4, #0
60003df0:	d1aa      	bne.n	60003d48 <PostFileCommand()+0xd8>
60003df2:	e76d      	b.n	60003cd0 <PostFileCommand()+0x60>
60003df4:	207f      	movs	r0, #127	; 0x7f
60003df6:	f001 fc2f 	bl	60005658 <__usb_serial_putchar_veneer>
60003dfa:	209b      	movs	r0, #155	; 0x9b
60003dfc:	f001 fc2c 	bl	60005658 <__usb_serial_putchar_veneer>
        Serial.printf("Failed to ensure directory for: %s\n", FileNamePath);
60003e00:	aa07      	add	r2, sp, #28
60003e02:	4919      	ldr	r1, [pc, #100]	; (60003e68 <PostFileCommand()+0x1f8>)
60003e04:	480f      	ldr	r0, [pc, #60]	; (60003e44 <PostFileCommand()+0x1d4>)
60003e06:	f001 fbff 	bl	60005608 <___ZN5Print6printfEPKcz_veneer>
        return;
60003e0a:	e761      	b.n	60003cd0 <PostFileCommand()+0x60>
60003e0c:	207f      	movs	r0, #127	; 0x7f
60003e0e:	f001 fc23 	bl	60005658 <__usb_serial_putchar_veneer>
60003e12:	209b      	movs	r0, #155	; 0x9b
60003e14:	f001 fc20 	bl	60005658 <__usb_serial_putchar_veneer>
        Serial.printf("Specified storage device was not found: %u\n", storageType);
60003e18:	4622      	mov	r2, r4
60003e1a:	4914      	ldr	r1, [pc, #80]	; (60003e6c <PostFileCommand()+0x1fc>)
60003e1c:	4809      	ldr	r0, [pc, #36]	; (60003e44 <PostFileCommand()+0x1d4>)
60003e1e:	f001 fbf3 	bl	60005608 <___ZN5Print6printfEPKcz_veneer>
    if (!sourceFS) return;
60003e22:	e755      	b.n	60003cd0 <PostFileCommand()+0x60>
			f->close();
60003e24:	4620      	mov	r0, r4
60003e26:	4798      	blx	r3
60003e28:	e7a4      	b.n	60003d74 <PostFileCommand()+0x104>
  bool isOpen() const {return m_fFile || m_xFile;}
60003e2a:	6d63      	ldr	r3, [r4, #84]	; 0x54
60003e2c:	2b00      	cmp	r3, #0
60003e2e:	d19d      	bne.n	60003d6c <PostFileCommand()+0xfc>
60003e30:	e7a0      	b.n	60003d74 <PostFileCommand()+0x104>
60003e32:	6d63      	ldr	r3, [r4, #84]	; 0x54
60003e34:	2b00      	cmp	r3, #0
60003e36:	d1af      	bne.n	60003d98 <PostFileCommand()+0x128>
60003e38:	e7b1      	b.n	60003d9e <PostFileCommand()+0x12e>
			delete f;
60003e3a:	4620      	mov	r0, r4
60003e3c:	4798      	blx	r3
	}
60003e3e:	e747      	b.n	60003cd0 <PostFileCommand()+0x60>
60003e40:	2000ac90 	.word	0x2000ac90
60003e44:	2000bfd8 	.word	0x2000bfd8
60003e48:	2000ac70 	.word	0x2000ac70
60003e4c:	2005daf4 	.word	0x2005daf4
60003e50:	20003308 	.word	0x20003308
60003e54:	00000e69 	.word	0x00000e69
60003e58:	00001c55 	.word	0x00001c55
60003e5c:	20003358 	.word	0x20003358
60003e60:	20003240 	.word	0x20003240
60003e64:	2000abd4 	.word	0x2000abd4
60003e68:	2000abf8 	.word	0x2000abf8
60003e6c:	2000a8a8 	.word	0x2000a8a8

60003e70 <memInfo()>:
#if ARDUINO_TEENSY41
  extern "C" uint8_t external_psram_size;
#endif
  
FLASHMEM void memInfo () 
{
60003e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
60003e74:	b081      	sub	sp, #4
         _estack[], _heap_start[], _heap_end[], _itcm_block_count[], *__brkval;

  auto sp = (char*) __builtin_frame_address(0);

  printf("MemInfo:\n");
  printf("_stext        %08x\n",      _stext);
60003e76:	4e58      	ldr	r6, [pc, #352]	; (60003fd8 <memInfo()+0x168>)
  printf("MemInfo:\n");
60003e78:	4958      	ldr	r1, [pc, #352]	; (60003fdc <memInfo()+0x16c>)
60003e7a:	4859      	ldr	r0, [pc, #356]	; (60003fe0 <memInfo()+0x170>)
{
60003e7c:	af00      	add	r7, sp, #0
  printf("_etext        %08x +%db\n", _etext, _etext - _stext);
  printf("_sdata        %08x\n",      _sdata);
60003e7e:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 60004070 <memInfo()+0x200>
  printf("MemInfo:\n");
60003e82:	f001 fbc1 	bl	60005608 <___ZN5Print6printfEPKcz_veneer>
  printf("_stext        %08x\n",      _stext);
60003e86:	4632      	mov	r2, r6
60003e88:	4956      	ldr	r1, [pc, #344]	; (60003fe4 <memInfo()+0x174>)
60003e8a:	4855      	ldr	r0, [pc, #340]	; (60003fe0 <memInfo()+0x170>)
60003e8c:	f001 fbbc 	bl	60005608 <___ZN5Print6printfEPKcz_veneer>
  printf("_etext        %08x +%db\n", _etext, _etext - _stext);
60003e90:	4a55      	ldr	r2, [pc, #340]	; (60003fe8 <memInfo()+0x178>)
60003e92:	4956      	ldr	r1, [pc, #344]	; (60003fec <memInfo()+0x17c>)
60003e94:	1b93      	subs	r3, r2, r6
60003e96:	4852      	ldr	r0, [pc, #328]	; (60003fe0 <memInfo()+0x170>)
60003e98:	f001 fbb6 	bl	60005608 <___ZN5Print6printfEPKcz_veneer>
  printf("_sdata        %08x\n",      _sdata);
60003e9c:	4652      	mov	r2, sl
60003e9e:	4954      	ldr	r1, [pc, #336]	; (60003ff0 <memInfo()+0x180>)
60003ea0:	484f      	ldr	r0, [pc, #316]	; (60003fe0 <memInfo()+0x170>)
60003ea2:	f001 fbb1 	bl	60005608 <___ZN5Print6printfEPKcz_veneer>
  printf("_edata        %08x +%db\n", _edata, _edata - _sdata);
60003ea6:	4a53      	ldr	r2, [pc, #332]	; (60003ff4 <memInfo()+0x184>)
  printf("_sbss         %08x\n",      _sbss);
  printf("_ebss         %08x +%db\n", _ebss, _ebss - _sbss);
60003ea8:	4c53      	ldr	r4, [pc, #332]	; (60003ff8 <memInfo()+0x188>)
  printf("_sbss         %08x\n",      _sbss);
60003eaa:	4d54      	ldr	r5, [pc, #336]	; (60003ffc <memInfo()+0x18c>)
  printf("_edata        %08x +%db\n", _edata, _edata - _sdata);
60003eac:	eba2 030a 	sub.w	r3, r2, sl
60003eb0:	4953      	ldr	r1, [pc, #332]	; (60004000 <memInfo()+0x190>)
  printf("curr stack    %08x +%db\n", sp, sp - _ebss);
60003eb2:	eba7 0904 	sub.w	r9, r7, r4
  printf("_edata        %08x +%db\n", _edata, _edata - _sdata);
60003eb6:	484a      	ldr	r0, [pc, #296]	; (60003fe0 <memInfo()+0x170>)
60003eb8:	f001 fba6 	bl	60005608 <___ZN5Print6printfEPKcz_veneer>
  printf("_sbss         %08x\n",      _sbss);
60003ebc:	462a      	mov	r2, r5
60003ebe:	4951      	ldr	r1, [pc, #324]	; (60004004 <memInfo()+0x194>)
60003ec0:	4847      	ldr	r0, [pc, #284]	; (60003fe0 <memInfo()+0x170>)
60003ec2:	f001 fba1 	bl	60005608 <___ZN5Print6printfEPKcz_veneer>
  printf("_estack       %08x +%db\n", _estack, _estack - sp);
60003ec6:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 60004074 <memInfo()+0x204>
  printf("_ebss         %08x +%db\n", _ebss, _ebss - _sbss);
60003eca:	1b63      	subs	r3, r4, r5
60003ecc:	4622      	mov	r2, r4
60003ece:	494e      	ldr	r1, [pc, #312]	; (60004008 <memInfo()+0x198>)
60003ed0:	4843      	ldr	r0, [pc, #268]	; (60003fe0 <memInfo()+0x170>)
60003ed2:	f001 fb99 	bl	60005608 <___ZN5Print6printfEPKcz_veneer>
  printf("_heap_start   %08x\n",      _heap_start);
60003ed6:	4c4d      	ldr	r4, [pc, #308]	; (6000400c <memInfo()+0x19c>)
  printf("curr stack    %08x +%db\n", sp, sp - _ebss);
60003ed8:	464b      	mov	r3, r9
60003eda:	463a      	mov	r2, r7
60003edc:	494c      	ldr	r1, [pc, #304]	; (60004010 <memInfo()+0x1a0>)
60003ede:	4840      	ldr	r0, [pc, #256]	; (60003fe0 <memInfo()+0x170>)
60003ee0:	f001 fb92 	bl	60005608 <___ZN5Print6printfEPKcz_veneer>
  printf("__brkval      %08x +%db\n", __brkval, __brkval - _heap_start);
60003ee4:	f8df 8190 	ldr.w	r8, [pc, #400]	; 60004078 <memInfo()+0x208>
  printf("_estack       %08x +%db\n", _estack, _estack - sp);
60003ee8:	ebab 0307 	sub.w	r3, fp, r7
60003eec:	465a      	mov	r2, fp
60003eee:	4949      	ldr	r1, [pc, #292]	; (60004014 <memInfo()+0x1a4>)
60003ef0:	483b      	ldr	r0, [pc, #236]	; (60003fe0 <memInfo()+0x170>)
60003ef2:	f001 fb89 	bl	60005608 <___ZN5Print6printfEPKcz_veneer>
  printf("_heap_start   %08x\n",      _heap_start);
60003ef6:	4622      	mov	r2, r4
60003ef8:	4947      	ldr	r1, [pc, #284]	; (60004018 <memInfo()+0x1a8>)
60003efa:	4839      	ldr	r0, [pc, #228]	; (60003fe0 <memInfo()+0x170>)
60003efc:	f001 fb84 	bl	60005608 <___ZN5Print6printfEPKcz_veneer>
  printf("__brkval      %08x +%db\n", __brkval, __brkval - _heap_start);
60003f00:	f8d8 2000 	ldr.w	r2, [r8]
60003f04:	4945      	ldr	r1, [pc, #276]	; (6000401c <memInfo()+0x1ac>)
60003f06:	1b13      	subs	r3, r2, r4
60003f08:	4835      	ldr	r0, [pc, #212]	; (60003fe0 <memInfo()+0x170>)
60003f0a:	f001 fb7d 	bl	60005608 <___ZN5Print6printfEPKcz_veneer>
  printf("_heap_end     %08x +%db\n", _heap_end, _heap_end - __brkval);
60003f0e:	4d44      	ldr	r5, [pc, #272]	; (60004020 <memInfo()+0x1b0>)
60003f10:	f8d8 3000 	ldr.w	r3, [r8]
  
#if ARDUINO_TEENSY41
  extern char _extram_start[], _extram_end[], *__brkval;
  printf("_extram_start %08x\n",      _extram_start);
60003f14:	4c43      	ldr	r4, [pc, #268]	; (60004024 <memInfo()+0x1b4>)
  printf("_heap_end     %08x +%db\n", _heap_end, _heap_end - __brkval);
60003f16:	462a      	mov	r2, r5
60003f18:	1aeb      	subs	r3, r5, r3
60003f1a:	4943      	ldr	r1, [pc, #268]	; (60004028 <memInfo()+0x1b8>)
60003f1c:	4830      	ldr	r0, [pc, #192]	; (60003fe0 <memInfo()+0x170>)
60003f1e:	f001 fb73 	bl	60005608 <___ZN5Print6printfEPKcz_veneer>
  printf("_extram_start %08x\n",      _extram_start);
60003f22:	4622      	mov	r2, r4
60003f24:	4941      	ldr	r1, [pc, #260]	; (6000402c <memInfo()+0x1bc>)
60003f26:	482e      	ldr	r0, [pc, #184]	; (60003fe0 <memInfo()+0x170>)
60003f28:	f001 fb6e 	bl	60005608 <___ZN5Print6printfEPKcz_veneer>
  printf("_extram_end   %08x +%db\n", _extram_end,
60003f2c:	4b40      	ldr	r3, [pc, #256]	; (60004030 <memInfo()+0x1c0>)
60003f2e:	4a40      	ldr	r2, [pc, #256]	; (60004030 <memInfo()+0x1c0>)
60003f30:	1b1b      	subs	r3, r3, r4
60003f32:	4940      	ldr	r1, [pc, #256]	; (60004034 <memInfo()+0x1c4>)
60003f34:	482a      	ldr	r0, [pc, #168]	; (60003fe0 <memInfo()+0x170>)
60003f36:	f001 fb67 	bl	60005608 <___ZN5Print6printfEPKcz_veneer>
         _extram_end - _extram_start);
#endif
  printf("\n");
60003f3a:	493f      	ldr	r1, [pc, #252]	; (60004038 <memInfo()+0x1c8>)
60003f3c:	4828      	ldr	r0, [pc, #160]	; (60003fe0 <memInfo()+0x170>)
60003f3e:	f001 fb63 	bl	60005608 <___ZN5Print6printfEPKcz_veneer>

  printf("<ITCM>  %08x .. %08x\n",
         _stext, _stext + ((int) _itcm_block_count << 15) - 1);
60003f42:	4b3e      	ldr	r3, [pc, #248]	; (6000403c <memInfo()+0x1cc>)
  printf("<ITCM>  %08x .. %08x\n",
60003f44:	4632      	mov	r2, r6
60003f46:	493e      	ldr	r1, [pc, #248]	; (60004040 <memInfo()+0x1d0>)
         _stext, _stext + ((int) _itcm_block_count << 15) - 1);
60003f48:	eb06 33c3 	add.w	r3, r6, r3, lsl #15
  printf("<ITCM>  %08x .. %08x\n",
60003f4c:	4824      	ldr	r0, [pc, #144]	; (60003fe0 <memInfo()+0x170>)
  printf("<RAM>   %08x .. %08x\n",
         RAM_BASE, RAM_BASE + RAM_SIZE - 1);
  printf("<FLASH> %08x .. %08x\n",
         FLASH_BASE, FLASH_BASE + FLASH_SIZE - 1);
#if ARDUINO_TEENSY41
  if (external_psram_size > 0)
60003f4e:	4e3d      	ldr	r6, [pc, #244]	; (60004044 <memInfo()+0x1d4>)
  printf("<ITCM>  %08x .. %08x\n",
60003f50:	3b01      	subs	r3, #1
60003f52:	f001 fb59 	bl	60005608 <___ZN5Print6printfEPKcz_veneer>
  printf("<DTCM>  %08x .. %08x\n",
60003f56:	f10b 33ff 	add.w	r3, fp, #4294967295
60003f5a:	4652      	mov	r2, sl
60003f5c:	493a      	ldr	r1, [pc, #232]	; (60004048 <memInfo()+0x1d8>)
60003f5e:	4820      	ldr	r0, [pc, #128]	; (60003fe0 <memInfo()+0x170>)
60003f60:	f001 fb52 	bl	60005608 <___ZN5Print6printfEPKcz_veneer>
  printf("<RAM>   %08x .. %08x\n",
60003f64:	4b39      	ldr	r3, [pc, #228]	; (6000404c <memInfo()+0x1dc>)
60003f66:	4a3a      	ldr	r2, [pc, #232]	; (60004050 <memInfo()+0x1e0>)
60003f68:	493a      	ldr	r1, [pc, #232]	; (60004054 <memInfo()+0x1e4>)
60003f6a:	481d      	ldr	r0, [pc, #116]	; (60003fe0 <memInfo()+0x170>)
60003f6c:	f001 fb4c 	bl	60005608 <___ZN5Print6printfEPKcz_veneer>
  printf("<FLASH> %08x .. %08x\n",
60003f70:	4b39      	ldr	r3, [pc, #228]	; (60004058 <memInfo()+0x1e8>)
60003f72:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
60003f76:	4939      	ldr	r1, [pc, #228]	; (6000405c <memInfo()+0x1ec>)
60003f78:	4819      	ldr	r0, [pc, #100]	; (60003fe0 <memInfo()+0x170>)
60003f7a:	f001 fb45 	bl	60005608 <___ZN5Print6printfEPKcz_veneer>
  if (external_psram_size > 0)
60003f7e:	7833      	ldrb	r3, [r6, #0]
60003f80:	bb03      	cbnz	r3, 60003fc4 <memInfo()+0x154>
    printf("<PSRAM> %08x .. %08x\n",
           _extram_start, _extram_start + (external_psram_size << 20) - 1);
#endif
  printf("\n");
60003f82:	492d      	ldr	r1, [pc, #180]	; (60004038 <memInfo()+0x1c8>)
60003f84:	4816      	ldr	r0, [pc, #88]	; (60003fe0 <memInfo()+0x170>)
60003f86:	f001 fb3f 	bl	60005608 <___ZN5Print6printfEPKcz_veneer>

  auto stack = sp - _ebss;
  printf("avail STACK (RAM1) %8d b %5d kb\n", stack, stack >> 10);
60003f8a:	464a      	mov	r2, r9
60003f8c:	ea4f 23a9 	mov.w	r3, r9, asr #10
60003f90:	4933      	ldr	r1, [pc, #204]	; (60004060 <memInfo()+0x1f0>)
60003f92:	4813      	ldr	r0, [pc, #76]	; (60003fe0 <memInfo()+0x170>)
60003f94:	f001 fb38 	bl	60005608 <___ZN5Print6printfEPKcz_veneer>

  auto heap = _heap_end - __brkval;
60003f98:	f8d8 2000 	ldr.w	r2, [r8]
  printf("avail HEAP  (RAM2) %8d b %5d kb\n", heap, heap >> 10);
60003f9c:	4931      	ldr	r1, [pc, #196]	; (60004064 <memInfo()+0x1f4>)
  auto heap = _heap_end - __brkval;
60003f9e:	1aaa      	subs	r2, r5, r2
  printf("avail HEAP  (RAM2) %8d b %5d kb\n", heap, heap >> 10);
60003fa0:	480f      	ldr	r0, [pc, #60]	; (60003fe0 <memInfo()+0x170>)
60003fa2:	1293      	asrs	r3, r2, #10
60003fa4:	f001 fb30 	bl	60005608 <___ZN5Print6printfEPKcz_veneer>

#if ARDUINO_TEENSY41
  auto psram = _extram_start + (external_psram_size << 20) - _extram_end;
60003fa8:	7833      	ldrb	r3, [r6, #0]
  printf("avail PSRAM (ext)  %8d b %5d kb\n", psram, psram >> 10);
60003faa:	492f      	ldr	r1, [pc, #188]	; (60004068 <memInfo()+0x1f8>)
#endif
}
60003fac:	3704      	adds	r7, #4
  auto psram = _extram_start + (external_psram_size << 20) - _extram_end;
60003fae:	eb04 5203 	add.w	r2, r4, r3, lsl #20
60003fb2:	4b1f      	ldr	r3, [pc, #124]	; (60004030 <memInfo()+0x1c0>)
  printf("avail PSRAM (ext)  %8d b %5d kb\n", psram, psram >> 10);
60003fb4:	480a      	ldr	r0, [pc, #40]	; (60003fe0 <memInfo()+0x170>)
  auto psram = _extram_start + (external_psram_size << 20) - _extram_end;
60003fb6:	1ad2      	subs	r2, r2, r3
  printf("avail PSRAM (ext)  %8d b %5d kb\n", psram, psram >> 10);
60003fb8:	1293      	asrs	r3, r2, #10
}
60003fba:	46bd      	mov	sp, r7
60003fbc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  printf("avail PSRAM (ext)  %8d b %5d kb\n", psram, psram >> 10);
60003fc0:	f001 bb22 	b.w	60005608 <___ZN5Print6printfEPKcz_veneer>
           _extram_start, _extram_start + (external_psram_size << 20) - 1);
60003fc4:	eb04 5303 	add.w	r3, r4, r3, lsl #20
    printf("<PSRAM> %08x .. %08x\n",
60003fc8:	4622      	mov	r2, r4
60003fca:	4928      	ldr	r1, [pc, #160]	; (6000406c <memInfo()+0x1fc>)
60003fcc:	3b01      	subs	r3, #1
60003fce:	4804      	ldr	r0, [pc, #16]	; (60003fe0 <memInfo()+0x170>)
60003fd0:	f001 fb1a 	bl	60005608 <___ZN5Print6printfEPKcz_veneer>
60003fd4:	e7d5      	b.n	60003f82 <memInfo()+0x112>
60003fd6:	bf00      	nop
60003fd8:	00000000 	.word	0x00000000
60003fdc:	2000acb4 	.word	0x2000acb4
60003fe0:	2000bfd8 	.word	0x2000bfd8
60003fe4:	2000acc0 	.word	0x2000acc0
60003fe8:	00019c98 	.word	0x00019c98
60003fec:	2000acd4 	.word	0x2000acd4
60003ff0:	2000acf0 	.word	0x2000acf0
60003ff4:	2000cec0 	.word	0x2000cec0
60003ff8:	2005e580 	.word	0x2005e580
60003ffc:	2000cec0 	.word	0x2000cec0
60004000:	2000ad04 	.word	0x2000ad04
60004004:	2000ad20 	.word	0x2000ad20
60004008:	2000ad34 	.word	0x2000ad34
6000400c:	20203080 	.word	0x20203080
60004010:	2000ad50 	.word	0x2000ad50
60004014:	2000ad6c 	.word	0x2000ad6c
60004018:	2000ad88 	.word	0x2000ad88
6000401c:	2000ad9c 	.word	0x2000ad9c
60004020:	20280000 	.word	0x20280000
60004024:	70000000 	.word	0x70000000
60004028:	2000adb8 	.word	0x2000adb8
6000402c:	2000add4 	.word	0x2000add4
60004030:	70000000 	.word	0x70000000
60004034:	2000ade8 	.word	0x2000ade8
60004038:	2000b004 	.word	0x2000b004
6000403c:	00000004 	.word	0x00000004
60004040:	2000ae04 	.word	0x2000ae04
60004044:	2005e545 	.word	0x2005e545
60004048:	2000ae1c 	.word	0x2000ae1c
6000404c:	2027ffff 	.word	0x2027ffff
60004050:	20200000 	.word	0x20200000
60004054:	2000ae34 	.word	0x2000ae34
60004058:	607fffff 	.word	0x607fffff
6000405c:	2000ae4c 	.word	0x2000ae4c
60004060:	2000ae7c 	.word	0x2000ae7c
60004064:	2000aea0 	.word	0x2000aea0
60004068:	2000aec4 	.word	0x2000aec4
6000406c:	2000ae64 	.word	0x2000ae64
60004070:	20000000 	.word	0x20000000
60004074:	20060000 	.word	0x20060000
60004078:	2000c164 	.word	0x2000c164

6000407c <getFreeITCM()>:
uint32_t *ptrFreeITCM;  // Set to Usable ITCM free RAM
uint32_t  sizeofFreeITCM; // sizeof free RAM in uint32_t units.
uint32_t  SizeLeft_etext;
extern char _stext[], _etext[];

FLASHMEM void  getFreeITCM() { // end of CODE ITCM, skip full 32 bits
6000407c:	b570      	push	{r4, r5, r6, lr}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
6000407e:	210d      	movs	r1, #13
60004080:	4829      	ldr	r0, [pc, #164]	; (60004128 <getFreeITCM()+0xac>)
60004082:	f001 fafd 	bl	60005680 <__usb_serial_write_veneer>
60004086:	4829      	ldr	r0, [pc, #164]	; (6000412c <getFreeITCM()+0xb0>)
60004088:	f001 fb06 	bl	60005698 <___ZN5Print7printlnEv_veneer>
  Serial.println("\ngetFreeITCM:");
  SizeLeft_etext = (32 * 1024) - (((uint32_t)&_etext - (uint32_t)&_stext) % (32 * 1024));
6000408c:	4828      	ldr	r0, [pc, #160]	; (60004130 <getFreeITCM()+0xb4>)
6000408e:	4b29      	ldr	r3, [pc, #164]	; (60004134 <getFreeITCM()+0xb8>)
  sizeofFreeITCM = SizeLeft_etext - 4;
60004090:	f647 72fc 	movw	r2, #32764	; 0x7ffc
  SizeLeft_etext = (32 * 1024) - (((uint32_t)&_etext - (uint32_t)&_stext) % (32 * 1024));
60004094:	4c28      	ldr	r4, [pc, #160]	; (60004138 <getFreeITCM()+0xbc>)
60004096:	1a19      	subs	r1, r3, r0
  sizeofFreeITCM /= sizeof(ptrFreeITCM[0]);
  ptrFreeITCM = (uint32_t *) ( (uint32_t)&_stext + (uint32_t)&_etext + 4 );
60004098:	4403      	add	r3, r0
  sizeofFreeITCM /= sizeof(ptrFreeITCM[0]);
6000409a:	4d28      	ldr	r5, [pc, #160]	; (6000413c <getFreeITCM()+0xc0>)
  SizeLeft_etext = (32 * 1024) - (((uint32_t)&_etext - (uint32_t)&_stext) % (32 * 1024));
6000409c:	f3c1 010e 	ubfx	r1, r1, #0, #15
  ptrFreeITCM = (uint32_t *) ( (uint32_t)&_stext + (uint32_t)&_etext + 4 );
600040a0:	3304      	adds	r3, #4
  printf( "Size of Free ITCM in Bytes = %u\n", sizeofFreeITCM * sizeof(ptrFreeITCM[0]) );
600040a2:	4822      	ldr	r0, [pc, #136]	; (6000412c <getFreeITCM()+0xb0>)
  sizeofFreeITCM = SizeLeft_etext - 4;
600040a4:	1a52      	subs	r2, r2, r1
  SizeLeft_etext = (32 * 1024) - (((uint32_t)&_etext - (uint32_t)&_stext) % (32 * 1024));
600040a6:	f5c1 4100 	rsb	r1, r1, #32768	; 0x8000
  sizeofFreeITCM /= sizeof(ptrFreeITCM[0]);
600040aa:	0892      	lsrs	r2, r2, #2
  SizeLeft_etext = (32 * 1024) - (((uint32_t)&_etext - (uint32_t)&_stext) % (32 * 1024));
600040ac:	6021      	str	r1, [r4, #0]
  ptrFreeITCM = (uint32_t *) ( (uint32_t)&_stext + (uint32_t)&_etext + 4 );
600040ae:	4c24      	ldr	r4, [pc, #144]	; (60004140 <getFreeITCM()+0xc4>)
  printf( "Size of Free ITCM in Bytes = %u\n", sizeofFreeITCM * sizeof(ptrFreeITCM[0]) );
600040b0:	4924      	ldr	r1, [pc, #144]	; (60004144 <getFreeITCM()+0xc8>)
  sizeofFreeITCM /= sizeof(ptrFreeITCM[0]);
600040b2:	602a      	str	r2, [r5, #0]
  printf( "Size of Free ITCM in Bytes = %u\n", sizeofFreeITCM * sizeof(ptrFreeITCM[0]) );
600040b4:	0092      	lsls	r2, r2, #2
  ptrFreeITCM = (uint32_t *) ( (uint32_t)&_stext + (uint32_t)&_etext + 4 );
600040b6:	6023      	str	r3, [r4, #0]
  printf( "Size of Free ITCM in Bytes = %u\n", sizeofFreeITCM * sizeof(ptrFreeITCM[0]) );
600040b8:	f001 faa6 	bl	60005608 <___ZN5Print6printfEPKcz_veneer>
  printf( "Start of Free ITCM = %u [%X] \n", ptrFreeITCM, ptrFreeITCM);
600040bc:	6823      	ldr	r3, [r4, #0]
600040be:	4922      	ldr	r1, [pc, #136]	; (60004148 <getFreeITCM()+0xcc>)
600040c0:	461a      	mov	r2, r3
600040c2:	481a      	ldr	r0, [pc, #104]	; (6000412c <getFreeITCM()+0xb0>)
600040c4:	f001 faa0 	bl	60005608 <___ZN5Print6printfEPKcz_veneer>
  printf( "End of Free ITCM = %u [%X] \n", ptrFreeITCM + sizeofFreeITCM, ptrFreeITCM + sizeofFreeITCM);
600040c8:	682a      	ldr	r2, [r5, #0]
600040ca:	6823      	ldr	r3, [r4, #0]
600040cc:	491f      	ldr	r1, [pc, #124]	; (6000414c <getFreeITCM()+0xd0>)
600040ce:	eb03 0382 	add.w	r3, r3, r2, lsl #2
600040d2:	4816      	ldr	r0, [pc, #88]	; (6000412c <getFreeITCM()+0xb0>)
600040d4:	461a      	mov	r2, r3
600040d6:	f001 fa97 	bl	60005608 <___ZN5Print6printfEPKcz_veneer>
  for ( uint32_t ii = 0; ii < sizeofFreeITCM; ii++) ptrFreeITCM[ii] = 1;
600040da:	682b      	ldr	r3, [r5, #0]
600040dc:	b1db      	cbz	r3, 60004116 <getFreeITCM()+0x9a>
600040de:	6824      	ldr	r4, [r4, #0]
600040e0:	2200      	movs	r2, #0
600040e2:	2601      	movs	r6, #1
600040e4:	1f23      	subs	r3, r4, #4
600040e6:	4618      	mov	r0, r3
600040e8:	3201      	adds	r2, #1
600040ea:	f840 6f04 	str.w	r6, [r0, #4]!
600040ee:	6829      	ldr	r1, [r5, #0]
600040f0:	4291      	cmp	r1, r2
600040f2:	d8f9      	bhi.n	600040e8 <getFreeITCM()+0x6c>
  uint32_t jj = 0;
  for ( uint32_t ii = 0; ii < sizeofFreeITCM; ii++) jj += ptrFreeITCM[ii];
600040f4:	b179      	cbz	r1, 60004116 <getFreeITCM()+0x9a>
600040f6:	eb04 0081 	add.w	r0, r4, r1, lsl #2
  uint32_t jj = 0;
600040fa:	2200      	movs	r2, #0
600040fc:	3804      	subs	r0, #4
  for ( uint32_t ii = 0; ii < sizeofFreeITCM; ii++) jj += ptrFreeITCM[ii];
600040fe:	f853 1f04 	ldr.w	r1, [r3, #4]!
60004102:	4283      	cmp	r3, r0
60004104:	440a      	add	r2, r1
60004106:	d1fa      	bne.n	600040fe <getFreeITCM()+0x82>
  printf( "ITCM DWORD cnt = %u [#bytes=%u] \n", jj, jj*4);
60004108:	0093      	lsls	r3, r2, #2
6000410a:	4911      	ldr	r1, [pc, #68]	; (60004150 <getFreeITCM()+0xd4>)
6000410c:	4807      	ldr	r0, [pc, #28]	; (6000412c <getFreeITCM()+0xb0>)
}
6000410e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  printf( "ITCM DWORD cnt = %u [#bytes=%u] \n", jj, jj*4);
60004112:	f001 ba79 	b.w	60005608 <___ZN5Print6printfEPKcz_veneer>
  uint32_t jj = 0;
60004116:	2300      	movs	r3, #0
  printf( "ITCM DWORD cnt = %u [#bytes=%u] \n", jj, jj*4);
60004118:	490d      	ldr	r1, [pc, #52]	; (60004150 <getFreeITCM()+0xd4>)
6000411a:	4804      	ldr	r0, [pc, #16]	; (6000412c <getFreeITCM()+0xb0>)
  uint32_t jj = 0;
6000411c:	461a      	mov	r2, r3
}
6000411e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  printf( "ITCM DWORD cnt = %u [#bytes=%u] \n", jj, jj*4);
60004122:	f001 ba71 	b.w	60005608 <___ZN5Print6printfEPKcz_veneer>
60004126:	bf00      	nop
60004128:	2000aee8 	.word	0x2000aee8
6000412c:	2000bfd8 	.word	0x2000bfd8
60004130:	00000000 	.word	0x00000000
60004134:	00019c98 	.word	0x00019c98
60004138:	2005dfc8 	.word	0x2005dfc8
6000413c:	2005e4f8 	.word	0x2005e4f8
60004140:	2005e424 	.word	0x2005e424
60004144:	2000aef8 	.word	0x2000aef8
60004148:	2000af1c 	.word	0x2000af1c
6000414c:	2000af3c 	.word	0x2000af3c
60004150:	2000af5c 	.word	0x2000af5c

60004154 <ServiceSerial()>:
{  //Serial.available() confirmed before calling
60004154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
60004158:	b087      	sub	sp, #28
        virtual int read() { return usb_serial_getchar(); }
6000415a:	f001 faa5 	bl	600056a8 <__usb_serial_getchar_veneer>
   switch (inVal)
6000415e:	b280      	uxth	r0, r0
60004160:	3864      	subs	r0, #100	; 0x64
60004162:	2814      	cmp	r0, #20
60004164:	d855      	bhi.n	60004212 <ServiceSerial()+0xbe>
60004166:	e8df f010 	tbh	[pc, r0, lsl #1]
6000416a:	00f9      	.short	0x00f9
6000416c:	005e0054 	.word	0x005e0054
60004170:	00540054 	.word	0x00540054
60004174:	00540054 	.word	0x00540054
60004178:	00540054 	.word	0x00540054
6000417c:	00540054 	.word	0x00540054
60004180:	00540054 	.word	0x00540054
60004184:	00540054 	.word	0x00540054
60004188:	00540054 	.word	0x00540054
6000418c:	00540057 	.word	0x00540057
60004190:	00150054 	.word	0x00150054
   if(DriveDirMenu != NULL)
60004194:	4da8      	ldr	r5, [pc, #672]	; (60004438 <ServiceSerial()+0x2e4>)
60004196:	6828      	ldr	r0, [r5, #0]
60004198:	b198      	cbz	r0, 600041c2 <ServiceSerial()+0x6e>
      for(uint16_t Num=0; Num < NumDrvDirMenuItems; Num++) free(DriveDirMenu[Num].Name);
6000419a:	4ea8      	ldr	r6, [pc, #672]	; (6000443c <ServiceSerial()+0x2e8>)
6000419c:	8833      	ldrh	r3, [r6, #0]
6000419e:	b163      	cbz	r3, 600041ba <ServiceSerial()+0x66>
600041a0:	2400      	movs	r4, #0
600041a2:	b2a3      	uxth	r3, r4
600041a4:	3401      	adds	r4, #1
600041a6:	eb00 1003 	add.w	r0, r0, r3, lsl #4
600041aa:	6840      	ldr	r0, [r0, #4]
600041ac:	f001 f9d4 	bl	60005558 <__free_veneer>
600041b0:	8832      	ldrh	r2, [r6, #0]
600041b2:	b2a3      	uxth	r3, r4
      free(DriveDirMenu); DriveDirMenu = NULL;
600041b4:	6828      	ldr	r0, [r5, #0]
      for(uint16_t Num=0; Num < NumDrvDirMenuItems; Num++) free(DriveDirMenu[Num].Name);
600041b6:	429a      	cmp	r2, r3
600041b8:	d8f3      	bhi.n	600041a2 <ServiceSerial()+0x4e>
      free(DriveDirMenu); DriveDirMenu = NULL;
600041ba:	f001 f9cd 	bl	60005558 <__free_veneer>
600041be:	2300      	movs	r3, #0
600041c0:	602b      	str	r3, [r5, #0]
            Serial.printf("\n\nRAM1 Buff: %luK (%lu blks)\n", CrtMax, CrtMax/8);
600041c2:	2328      	movs	r3, #40	; 0x28
600041c4:	f44f 72a0 	mov.w	r2, #320	; 0x140
600041c8:	499d      	ldr	r1, [pc, #628]	; (60004440 <ServiceSerial()+0x2ec>)
600041ca:	489e      	ldr	r0, [pc, #632]	; (60004444 <ServiceSerial()+0x2f0>)
600041cc:	f001 fa1c 	bl	60005608 <___ZN5Print6printfEPKcz_veneer>
            uint8_t NumChips = RAM2blocks();
600041d0:	f7fd fb06 	bl	600017e0 <RAM2blocks()>
            NumChips = RAM2blocks()-1; //do it again, sometimes get one more, minus one to match reality, not clear why
600041d4:	f7fd fb04 	bl	600017e0 <RAM2blocks()>
600041d8:	4603      	mov	r3, r0
            Serial.printf("RAM2 Blks: %luK (%lu blks)\n", NumChips*8, NumChips);
600041da:	499b      	ldr	r1, [pc, #620]	; (60004448 <ServiceSerial()+0x2f4>)
            NumChips = RAM2blocks()-1; //do it again, sometimes get one more, minus one to match reality, not clear why
600041dc:	3b01      	subs	r3, #1
            Serial.printf("RAM2 Blks: %luK (%lu blks)\n", NumChips*8, NumChips);
600041de:	4899      	ldr	r0, [pc, #612]	; (60004444 <ServiceSerial()+0x2f0>)
600041e0:	b2da      	uxtb	r2, r3
600041e2:	00d4      	lsls	r4, r2, #3
600041e4:	4613      	mov	r3, r2
600041e6:	4622      	mov	r2, r4
600041e8:	f001 fa0e 	bl	60005608 <___ZN5Print6printfEPKcz_veneer>
            CrtMax += NumChips*8;
600041ec:	f504 72a0 	add.w	r2, r4, #320	; 0x140
            Serial.printf("  CRT Max: %luK (%lu blks) ~%luK file\n", CrtMax, CrtMax/8, (uint32_t)(CrtMax*1.004));
600041f0:	4996      	ldr	r1, [pc, #600]	; (6000444c <ServiceSerial()+0x2f8>)
600041f2:	ee07 2a90 	vmov	s15, r2
600041f6:	08d3      	lsrs	r3, r2, #3
600041f8:	4892      	ldr	r0, [pc, #584]	; (60004444 <ServiceSerial()+0x2f0>)
600041fa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
600041fe:	ed9f 6b8c 	vldr	d6, [pc, #560]	; 60004430 <ServiceSerial()+0x2dc>
60004202:	ee27 7b06 	vmul.f64	d7, d7, d6
60004206:	eebc 7bc7 	vcvt.u32.f64	s14, d7
6000420a:	ed8d 7a00 	vstr	s14, [sp]
6000420e:	f001 f9fb 	bl	60005608 <___ZN5Print6printfEPKcz_veneer>
}
60004212:	b007      	add	sp, #28
60004214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         runApp(UpperAddr);  
60004218:	f44f 2080 	mov.w	r0, #262144	; 0x40000
}
6000421c:	b007      	add	sp, #28
6000421e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
         runApp(UpperAddr);  
60004222:	f7ff b8df 	b.w	600033e4 <runApp(unsigned long)>
   sprintf(SerialStringBuf, "       FW: %s, %s\r\n   Teensy: %luMHz  %.1fC", __DATE__, __TIME__, (F_CPU_ACTUAL/1000000), tempmonGetTemp());
60004226:	4b8a      	ldr	r3, [pc, #552]	; (60004450 <ServiceSerial()+0x2fc>)
60004228:	681c      	ldr	r4, [r3, #0]
6000422a:	f001 f9c1 	bl	600055b0 <__tempmonGetTemp_veneer>
6000422e:	4989      	ldr	r1, [pc, #548]	; (60004454 <ServiceSerial()+0x300>)
60004230:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
60004234:	4b88      	ldr	r3, [pc, #544]	; (60004458 <ServiceSerial()+0x304>)
60004236:	fba1 1404 	umull	r1, r4, r1, r4
6000423a:	4a88      	ldr	r2, [pc, #544]	; (6000445c <ServiceSerial()+0x308>)
6000423c:	4988      	ldr	r1, [pc, #544]	; (60004460 <ServiceSerial()+0x30c>)
6000423e:	0ca4      	lsrs	r4, r4, #18
60004240:	4888      	ldr	r0, [pc, #544]	; (60004464 <ServiceSerial()+0x310>)
60004242:	ed8d 0b02 	vstr	d0, [sp, #8]
60004246:	9400      	str	r4, [sp, #0]
60004248:	f001 f9ce 	bl	600055e8 <__sprintf_veneer>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
6000424c:	211d      	movs	r1, #29
6000424e:	4886      	ldr	r0, [pc, #536]	; (60004468 <ServiceSerial()+0x314>)
60004250:	f001 fa16 	bl	60005680 <__usb_serial_write_veneer>
60004254:	487b      	ldr	r0, [pc, #492]	; (60004444 <ServiceSerial()+0x2f0>)
60004256:	f001 fa1f 	bl	60005698 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000425a:	4882      	ldr	r0, [pc, #520]	; (60004464 <ServiceSerial()+0x310>)
6000425c:	f001 f994 	bl	60005588 <__strlen_veneer>
60004260:	4601      	mov	r1, r0
60004262:	4880      	ldr	r0, [pc, #512]	; (60004464 <ServiceSerial()+0x310>)
60004264:	f001 fa0c 	bl	60005680 <__usb_serial_write_veneer>
	size_t println(const char s[])			{ return print(s) + println(); }
60004268:	4876      	ldr	r0, [pc, #472]	; (60004444 <ServiceSerial()+0x2f0>)
6000426a:	f001 fa15 	bl	60005698 <___ZN5Print7printlnEv_veneer>
   return (_heap_end - __brkval);
6000426e:	4b7f      	ldr	r3, [pc, #508]	; (6000446c <ServiceSerial()+0x318>)
60004270:	4a7f      	ldr	r2, [pc, #508]	; (60004470 <ServiceSerial()+0x31c>)
60004272:	681b      	ldr	r3, [r3, #0]
            Serial.printf("RAM2 Bytes Free: %lu (%luK)\n\n", RAM2BytesFree(), RAM2BytesFree()/1024);
60004274:	497f      	ldr	r1, [pc, #508]	; (60004474 <ServiceSerial()+0x320>)
   return (_heap_end - __brkval);
60004276:	1ad2      	subs	r2, r2, r3
            Serial.printf("RAM2 Bytes Free: %lu (%luK)\n\n", RAM2BytesFree(), RAM2BytesFree()/1024);
60004278:	4872      	ldr	r0, [pc, #456]	; (60004444 <ServiceSerial()+0x2f0>)
6000427a:	0a93      	lsrs	r3, r2, #10
6000427c:	f001 f9c4 	bl	60005608 <___ZN5Print6printfEPKcz_veneer>
            memInfo();
60004280:	f7ff fdf6 	bl	60003e70 <memInfo()>
            getFreeITCM();
60004284:	f7ff fefa 	bl	6000407c <getFreeITCM()>
            Serial.printf("\nMem usage:\n");
60004288:	497b      	ldr	r1, [pc, #492]	; (60004478 <ServiceSerial()+0x324>)
6000428a:	486e      	ldr	r0, [pc, #440]	; (60004444 <ServiceSerial()+0x2f0>)
6000428c:	f001 f9bc 	bl	60005608 <___ZN5Print6printfEPKcz_veneer>
            if(DriveDirMenu != NULL) 
60004290:	4b69      	ldr	r3, [pc, #420]	; (60004438 <ServiceSerial()+0x2e4>)
60004292:	681f      	ldr	r7, [r3, #0]
60004294:	2f00      	cmp	r7, #0
60004296:	f000 8095 	beq.w	600043c4 <ServiceSerial()+0x270>
               for(uint16_t Num=0; Num < NumDrvDirMenuItems; Num++) TotalSize += strlen(DriveDirMenu[Num].Name)+1;
6000429a:	4b68      	ldr	r3, [pc, #416]	; (6000443c <ServiceSerial()+0x2e8>)
6000429c:	881b      	ldrh	r3, [r3, #0]
6000429e:	2b00      	cmp	r3, #0
600042a0:	f000 8149 	beq.w	60004536 <ServiceSerial()+0x3e2>
600042a4:	3b01      	subs	r3, #1
600042a6:	f107 0610 	add.w	r6, r7, #16
600042aa:	463c      	mov	r4, r7
            uint32_t TotalSize = 0;
600042ac:	2500      	movs	r5, #0
600042ae:	b29b      	uxth	r3, r3
600042b0:	eb06 1603 	add.w	r6, r6, r3, lsl #4
               for(uint16_t Num=0; Num < NumDrvDirMenuItems; Num++) TotalSize += strlen(DriveDirMenu[Num].Name)+1;
600042b4:	6860      	ldr	r0, [r4, #4]
600042b6:	3410      	adds	r4, #16
600042b8:	f001 f966 	bl	60005588 <__strlen_veneer>
600042bc:	3001      	adds	r0, #1
600042be:	42b4      	cmp	r4, r6
600042c0:	4405      	add	r5, r0
600042c2:	d1f7      	bne.n	600042b4 <ServiceSerial()+0x160>
               TotalSize += MaxMenuItems*sizeof(StructMenuItem);
600042c4:	f64b 3480 	movw	r4, #48000	; 0xbb80
               Serial.printf("Filenames: %lu (%luk) @ $%08x\nDriveDirMenu: %lu (%luk) @ $%08x\n", 
600042c8:	0aab      	lsrs	r3, r5, #10
               TotalSize += MaxMenuItems*sizeof(StructMenuItem);
600042ca:	442c      	add	r4, r5
            Serial.printf("DriveDirMenu+Filenames: %lu (%luk)\n", 
600042cc:	0aa6      	lsrs	r6, r4, #10
               Serial.printf("Filenames: %lu (%luk) @ $%08x\nDriveDirMenu: %lu (%luk) @ $%08x\n", 
600042ce:	f64b 3180 	movw	r1, #48000	; 0xbb80
600042d2:	202e      	movs	r0, #46	; 0x2e
600042d4:	9703      	str	r7, [sp, #12]
600042d6:	462a      	mov	r2, r5
600042d8:	e9cd 1001 	strd	r1, r0, [sp, #4]
600042dc:	6879      	ldr	r1, [r7, #4]
600042de:	4859      	ldr	r0, [pc, #356]	; (60004444 <ServiceSerial()+0x2f0>)
600042e0:	9100      	str	r1, [sp, #0]
600042e2:	4966      	ldr	r1, [pc, #408]	; (6000447c <ServiceSerial()+0x328>)
600042e4:	f001 f990 	bl	60005608 <___ZN5Print6printfEPKcz_veneer>
            Serial.printf("DriveDirMenu+Filenames: %lu (%luk)\n", 
600042e8:	4633      	mov	r3, r6
600042ea:	4622      	mov	r2, r4
600042ec:	4964      	ldr	r1, [pc, #400]	; (60004480 <ServiceSerial()+0x32c>)
            TotalSize = 0;
600042ee:	2600      	movs	r6, #0
            Serial.printf("DriveDirMenu+Filenames: %lu (%luk)\n", 
600042f0:	4854      	ldr	r0, [pc, #336]	; (60004444 <ServiceSerial()+0x2f0>)
            uint32_t TotalStructSize = sizeof(TeensyROMMenu);
600042f2:	f04f 0820 	mov.w	r8, #32
            Serial.printf("DriveDirMenu+Filenames: %lu (%luk)\n", 
600042f6:	f001 f987 	bl	60005608 <___ZN5Print6printfEPKcz_veneer>
      Serial.printf("%s is using RAM!!!\n", SourceMenu.Name);
600042fa:	f8df a148 	ldr.w	sl, [pc, #328]	; 60004444 <ServiceSerial()+0x2f0>
            Serial.printf("RAM_Image: %lu (%luk) @ $%08x\n", 
600042fe:	4861      	ldr	r0, [pc, #388]	; (60004484 <ServiceSerial()+0x330>)
60004300:	f44f 73a0 	mov.w	r3, #320	; 0x140
60004304:	4f60      	ldr	r7, [pc, #384]	; (60004488 <ServiceSerial()+0x334>)
60004306:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
6000430a:	9000      	str	r0, [sp, #0]
6000430c:	4650      	mov	r0, sl
6000430e:	495f      	ldr	r1, [pc, #380]	; (6000448c <ServiceSerial()+0x338>)
60004310:	f107 0920 	add.w	r9, r7, #32
60004314:	463d      	mov	r5, r7
      Serial.printf("%s is using RAM!!!\n", SourceMenu.Name);
60004316:	f8df b18c 	ldr.w	fp, [pc, #396]	; 600044a4 <ServiceSerial()+0x350>
            Serial.printf("RAM_Image: %lu (%luk) @ $%08x\n", 
6000431a:	f001 f975 	bl	60005608 <___ZN5Print6printfEPKcz_veneer>
               if(TeensyROMMenu[ROMNum].ItemType == rtDirectory)
6000431e:	782b      	ldrb	r3, [r5, #0]
60004320:	2b06      	cmp	r3, #6
60004322:	d07d      	beq.n	60004420 <ServiceSerial()+0x2cc>
   if (((uint32_t)SourceMenu.Code_Image & 0xF0000000) == 0x20000000)
60004324:	68ab      	ldr	r3, [r5, #8]
   *TotalSize += SourceMenu.Size;
60004326:	68ea      	ldr	r2, [r5, #12]
   if (((uint32_t)SourceMenu.Code_Image & 0xF0000000) == 0x20000000)
60004328:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
   *TotalSize += SourceMenu.Size;
6000432c:	4416      	add	r6, r2
   if (((uint32_t)SourceMenu.Code_Image & 0xF0000000) == 0x20000000)
6000432e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
60004332:	d06f      	beq.n	60004414 <ServiceSerial()+0x2c0>
            for(uint8_t ROMNum=0; ROMNum < sizeof(TeensyROMMenu)/sizeof(TeensyROMMenu[0]); ROMNum++)
60004334:	3510      	adds	r5, #16
60004336:	45a9      	cmp	r9, r5
60004338:	d1f1      	bne.n	6000431e <ServiceSerial()+0x1ca>
            Serial.printf("TeensyROMMenu/sub struct: %lu (%luk) @ $%08x\n", 
6000433a:	ea4f 2398 	mov.w	r3, r8, lsr #10
6000433e:	4642      	mov	r2, r8
60004340:	4953      	ldr	r1, [pc, #332]	; (60004490 <ServiceSerial()+0x33c>)
60004342:	9700      	str	r7, [sp, #0]
60004344:	483f      	ldr	r0, [pc, #252]	; (60004444 <ServiceSerial()+0x2f0>)
60004346:	f001 f95f 	bl	60005608 <___ZN5Print6printfEPKcz_veneer>
            Serial.printf("TeensyROMMenu/sub Items: %d (%dk) of Flash\n\n", TotalSize, TotalSize/1024);
6000434a:	4632      	mov	r2, r6
6000434c:	0ab3      	lsrs	r3, r6, #10
6000434e:	4951      	ldr	r1, [pc, #324]	; (60004494 <ServiceSerial()+0x340>)
60004350:	483c      	ldr	r0, [pc, #240]	; (60004444 <ServiceSerial()+0x2f0>)
}
60004352:	b007      	add	sp, #28
60004354:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            Serial.printf("TeensyROMMenu/sub Items: %d (%dk) of Flash\n\n", TotalSize, TotalSize/1024);
60004358:	f001 b956 	b.w	60005608 <___ZN5Print6printfEPKcz_veneer>
         if(!SerialAvailabeTimeout()) return;
6000435c:	f7ff f918 	bl	60003590 <SerialAvailabeTimeout()>
60004360:	2800      	cmp	r0, #0
60004362:	f43f af56 	beq.w	60004212 <ServiceSerial()+0xbe>
        virtual int read() { return usb_serial_getchar(); }
60004366:	f001 f99f 	bl	600056a8 <__usb_serial_getchar_veneer>
         inVal = (inVal<<8) | Serial.read(); //READ NEXT BYTE
6000436a:	f440 40c8 	orr.w	r0, r0, #25600	; 0x6400
         if (inVal == ResetC64Token) //Reset C64
6000436e:	f246 43ee 	movw	r3, #25838	; 0x64ee
         inVal = (inVal<<8) | Serial.read(); //READ NEXT BYTE
60004372:	b282      	uxth	r2, r0
60004374:	b200      	sxth	r0, r0
         if (inVal == ResetC64Token) //Reset C64
60004376:	429a      	cmp	r2, r3
60004378:	f000 80e2 	beq.w	60004540 <ServiceSerial()+0x3ec>
         else if (inVal == LaunchFileToken) //Launch File
6000437c:	f246 4344 	movw	r3, #25668	; 0x6444
60004380:	429a      	cmp	r2, r3
60004382:	f000 80e8 	beq.w	60004556 <ServiceSerial()+0x402>
         if (CurrentIOHandler != IOH_TeensyROM)
60004386:	4b44      	ldr	r3, [pc, #272]	; (60004498 <ServiceSerial()+0x344>)
60004388:	781b      	ldrb	r3, [r3, #0]
6000438a:	2b01      	cmp	r3, #1
6000438c:	f040 80c6 	bne.w	6000451c <ServiceSerial()+0x3c8>
         switch (inVal)
60004390:	f246 43bb 	movw	r3, #25787	; 0x64bb
60004394:	4298      	cmp	r0, r3
60004396:	d010      	beq.n	600043ba <ServiceSerial()+0x266>
60004398:	dc17      	bgt.n	600043ca <ServiceSerial()+0x276>
6000439a:	f246 4366 	movw	r3, #25702	; 0x6466
6000439e:	4298      	cmp	r0, r3
600043a0:	f000 80a7 	beq.w	600044f2 <ServiceSerial()+0x39e>
600043a4:	dd29      	ble.n	600043fa <ServiceSerial()+0x2a6>
600043a6:	f246 4367 	movw	r3, #25703	; 0x6467
600043aa:	4298      	cmp	r0, r3
600043ac:	f43f af31 	beq.w	60004212 <ServiceSerial()+0xbe>
600043b0:	f246 43aa 	movw	r3, #25770	; 0x64aa
600043b4:	4298      	cmp	r0, r3
600043b6:	f040 80af 	bne.w	60004518 <ServiceSerial()+0x3c4>
}
600043ba:	b007      	add	sp, #28
600043bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
               PostFileCommand();
600043c0:	f7ff bc56 	b.w	60003c70 <PostFileCommand()>
600043c4:	463e      	mov	r6, r7
            uint32_t TotalSize = 0;
600043c6:	463c      	mov	r4, r7
600043c8:	e78e      	b.n	600042e8 <ServiceSerial()+0x194>
600043ca:	f246 43dd 	movw	r3, #25821	; 0x64dd
600043ce:	4298      	cmp	r0, r3
600043d0:	f000 808a 	beq.w	600044e8 <ServiceSerial()+0x394>
600043d4:	f246 43ff 	movw	r3, #25855	; 0x64ff
600043d8:	4298      	cmp	r0, r3
600043da:	d104      	bne.n	600043e6 <ServiceSerial()+0x292>
}
600043dc:	b007      	add	sp, #28
600043de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                CopyFileCommand();
600043e2:	f7ff bb45 	b.w	60003a70 <CopyFileCommand()>
600043e6:	f246 43cf 	movw	r3, #25807	; 0x64cf
600043ea:	4298      	cmp	r0, r3
600043ec:	f040 8094 	bne.w	60004518 <ServiceSerial()+0x3c4>
}
600043f0:	b007      	add	sp, #28
600043f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                DeleteFileCommand();
600043f6:	f7ff bad7 	b.w	600039a8 <DeleteFileCommand()>
600043fa:	f246 4355 	movw	r3, #25685	; 0x6455
600043fe:	4298      	cmp	r0, r3
60004400:	f040 808a 	bne.w	60004518 <ServiceSerial()+0x3c4>
               Serial.printf("TeensyROM %s ready!\n", strVersionNumber);
60004404:	4a25      	ldr	r2, [pc, #148]	; (6000449c <ServiceSerial()+0x348>)
60004406:	4926      	ldr	r1, [pc, #152]	; (600044a0 <ServiceSerial()+0x34c>)
               Serial.printf("Unk cmd: 0x%04x\n", inVal); 
60004408:	480e      	ldr	r0, [pc, #56]	; (60004444 <ServiceSerial()+0x2f0>)
}
6000440a:	b007      	add	sp, #28
6000440c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
               Serial.printf("Unk cmd: 0x%04x\n", inVal); 
60004410:	f001 b8fa 	b.w	60005608 <___ZN5Print6printfEPKcz_veneer>
      Serial.printf("%s is using RAM!!!\n", SourceMenu.Name);
60004414:	686a      	ldr	r2, [r5, #4]
60004416:	4659      	mov	r1, fp
60004418:	4650      	mov	r0, sl
6000441a:	f001 f8f5 	bl	60005608 <___ZN5Print6printfEPKcz_veneer>
6000441e:	e789      	b.n	60004334 <ServiceSerial()+0x1e0>
                  TotalStructSize += TeensyROMMenu[ROMNum].Size;
60004420:	68e8      	ldr	r0, [r5, #12]
                  StructMenuItem *subTROMMenu = (StructMenuItem*)TeensyROMMenu[ROMNum].Code_Image;
60004422:	68ab      	ldr	r3, [r5, #8]
                  for(uint8_t subROMNum=0; subROMNum < TeensyROMMenu[ROMNum].Size/sizeof(StructMenuItem); subROMNum++)
60004424:	0902      	lsrs	r2, r0, #4
                  TotalStructSize += TeensyROMMenu[ROMNum].Size;
60004426:	4480      	add	r8, r0
                  for(uint8_t subROMNum=0; subROMNum < TeensyROMMenu[ROMNum].Size/sizeof(StructMenuItem); subROMNum++)
60004428:	d084      	beq.n	60004334 <ServiceSerial()+0x1e0>
6000442a:	2400      	movs	r4, #0
6000442c:	4622      	mov	r2, r4
6000442e:	e042      	b.n	600044b6 <ServiceSerial()+0x362>
60004430:	4dd2f1aa 	.word	0x4dd2f1aa
60004434:	3ff01062 	.word	0x3ff01062
60004438:	2000d8b0 	.word	0x2000d8b0
6000443c:	2005e522 	.word	0x2005e522
60004440:	2000b0fc 	.word	0x2000b0fc
60004444:	2000bfd8 	.word	0x2000bfd8
60004448:	2000b11c 	.word	0x2000b11c
6000444c:	2000b138 	.word	0x2000b138
60004450:	2000bd24 	.word	0x2000bd24
60004454:	431bde83 	.word	0x431bde83
60004458:	2000a6b0 	.word	0x2000a6b0
6000445c:	2000a6bc 	.word	0x2000a6bc
60004460:	2000a6c8 	.word	0x2000a6c8
60004464:	2000bfe8 	.word	0x2000bfe8
60004468:	2000afc8 	.word	0x2000afc8
6000446c:	2000c164 	.word	0x2000c164
60004470:	20280000 	.word	0x20280000
60004474:	2000afe8 	.word	0x2000afe8
60004478:	2000b008 	.word	0x2000b008
6000447c:	2000b018 	.word	0x2000b018
60004480:	2000b058 	.word	0x2000b058
60004484:	2000daf4 	.word	0x2000daf4
60004488:	2000c140 	.word	0x2000c140
6000448c:	2000b07c 	.word	0x2000b07c
60004490:	2000b09c 	.word	0x2000b09c
60004494:	2000b0cc 	.word	0x2000b0cc
60004498:	2005e534 	.word	0x2005e534
6000449c:	2000c960 	.word	0x2000c960
600044a0:	2000af9c 	.word	0x2000af9c
600044a4:	2000aac0 	.word	0x2000aac0
600044a8:	3401      	adds	r4, #1
600044aa:	b2e4      	uxtb	r4, r4
600044ac:	ebb4 1f10 	cmp.w	r4, r0, lsr #4
600044b0:	4622      	mov	r2, r4
600044b2:	f4bf af3f 	bcs.w	60004334 <ServiceSerial()+0x1e0>
                     if(subTROMMenu[subROMNum].ItemType != rtDirectory) AddAndCheckSource(subTROMMenu[subROMNum], &TotalSize);
600044b6:	0111      	lsls	r1, r2, #4
600044b8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
600044bc:	5c59      	ldrb	r1, [r3, r1]
600044be:	2906      	cmp	r1, #6
600044c0:	d0f2      	beq.n	600044a8 <ServiceSerial()+0x354>
   if (((uint32_t)SourceMenu.Code_Image & 0xF0000000) == 0x20000000)
600044c2:	6891      	ldr	r1, [r2, #8]
600044c4:	9105      	str	r1, [sp, #20]
   *TotalSize += SourceMenu.Size;
600044c6:	68d1      	ldr	r1, [r2, #12]
600044c8:	440e      	add	r6, r1
   if (((uint32_t)SourceMenu.Code_Image & 0xF0000000) == 0x20000000)
600044ca:	9905      	ldr	r1, [sp, #20]
600044cc:	f001 4170 	and.w	r1, r1, #4026531840	; 0xf0000000
600044d0:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
600044d4:	d1e8      	bne.n	600044a8 <ServiceSerial()+0x354>
      Serial.printf("%s is using RAM!!!\n", SourceMenu.Name);
600044d6:	6852      	ldr	r2, [r2, #4]
600044d8:	4659      	mov	r1, fp
600044da:	4650      	mov	r0, sl
600044dc:	9305      	str	r3, [sp, #20]
600044de:	f001 f893 	bl	60005608 <___ZN5Print6printfEPKcz_veneer>
600044e2:	68e8      	ldr	r0, [r5, #12]
600044e4:	9b05      	ldr	r3, [sp, #20]
600044e6:	e7df      	b.n	600044a8 <ServiceSerial()+0x354>
}
600044e8:	b007      	add	sp, #28
600044ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
               GetDirectoryCommand();
600044ee:	f7ff bb25 	b.w	60003b3c <GetDirectoryCommand()>
//  TR: sees ack2, success/return
// C64: Executes command

bool InterruptC64(RegIRQCommands IRQCommand)
{
   IO1[rwRegIRQ_CMD] = IRQCommand;
600044f2:	4c1e      	ldr	r4, [pc, #120]	; (6000456c <ServiceSerial()+0x418>)
600044f4:	2203      	movs	r2, #3
600044f6:	6823      	ldr	r3, [r4, #0]
600044f8:	779a      	strb	r2, [r3, #30]
   bool IRQSuccess = DoC64IRQ();
600044fa:	f001 f83d 	bl	60005578 <___Z8DoC64IRQv_veneer>
   IO1[rwRegIRQ_CMD] = ricmdNone; //always set back to none/0 for default/protection 
600044fe:	6823      	ldr	r3, [r4, #0]
60004500:	2200      	movs	r2, #0
60004502:	779a      	strb	r2, [r3, #30]
               if(RemotePauseSID()) SendU16(AckToken);
60004504:	b360      	cbz	r0, 60004560 <ServiceSerial()+0x40c>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
60004506:	20cc      	movs	r0, #204	; 0xcc
60004508:	f001 f8a6 	bl	60005658 <__usb_serial_putchar_veneer>
6000450c:	2064      	movs	r0, #100	; 0x64
}
6000450e:	b007      	add	sp, #28
60004510:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
60004514:	f001 b8a0 	b.w	60005658 <__usb_serial_putchar_veneer>
               Serial.printf("Unk cmd: 0x%04x\n", inVal); 
60004518:	4915      	ldr	r1, [pc, #84]	; (60004570 <ServiceSerial()+0x41c>)
6000451a:	e775      	b.n	60004408 <ServiceSerial()+0x2b4>
6000451c:	207f      	movs	r0, #127	; 0x7f
6000451e:	f001 f89b 	bl	60005658 <__usb_serial_putchar_veneer>
60004522:	209b      	movs	r0, #155	; 0x9b
60004524:	f001 f898 	bl	60005658 <__usb_serial_putchar_veneer>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
60004528:	2106      	movs	r1, #6
6000452a:	4812      	ldr	r0, [pc, #72]	; (60004574 <ServiceSerial()+0x420>)
}
6000452c:	b007      	add	sp, #28
6000452e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
60004532:	f001 b8a5 	b.w	60005680 <__usb_serial_write_veneer>
               for(uint16_t Num=0; Num < NumDrvDirMenuItems; Num++) TotalSize += strlen(DriveDirMenu[Num].Name)+1;
60004536:	262e      	movs	r6, #46	; 0x2e
60004538:	f64b 3480 	movw	r4, #48000	; 0xbb80
            uint32_t TotalSize = 0;
6000453c:	461d      	mov	r5, r3
6000453e:	e6c6      	b.n	600042ce <ServiceSerial()+0x17a>
60004540:	2112      	movs	r1, #18
60004542:	480d      	ldr	r0, [pc, #52]	; (60004578 <ServiceSerial()+0x424>)
60004544:	f001 f89c 	bl	60005680 <__usb_serial_write_veneer>
60004548:	480c      	ldr	r0, [pc, #48]	; (6000457c <ServiceSerial()+0x428>)
6000454a:	f001 f8a5 	bl	60005698 <___ZN5Print7printlnEv_veneer>
            BtnPressed = true;
6000454e:	4b0c      	ldr	r3, [pc, #48]	; (60004580 <ServiceSerial()+0x42c>)
60004550:	2201      	movs	r2, #1
60004552:	701a      	strb	r2, [r3, #0]
            return;
60004554:	e65d      	b.n	60004212 <ServiceSerial()+0xbe>
}
60004556:	b007      	add	sp, #28
60004558:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            LaunchFile();
6000455c:	f7ff ba04 	b.w	60003968 <LaunchFile()>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
60004560:	207f      	movs	r0, #127	; 0x7f
60004562:	f001 f879 	bl	60005658 <__usb_serial_putchar_veneer>
60004566:	209b      	movs	r0, #155	; 0x9b
60004568:	e7d1      	b.n	6000450e <ServiceSerial()+0x3ba>
6000456a:	bf00      	nop
6000456c:	2000dae4 	.word	0x2000dae4
60004570:	2000afb4 	.word	0x2000afb4
60004574:	2000af94 	.word	0x2000af94
60004578:	2000af80 	.word	0x2000af80
6000457c:	2000bfd8 	.word	0x2000bfd8
60004580:	2005e533 	.word	0x2005e533

60004584 <CrashReportClass::clear()>:
}

FLASHMEM
static void cleardata(struct arm_fault_info_struct *info)
{
	info->len = 0;
60004584:	4b20      	ldr	r3, [pc, #128]	; (60004608 <CrashReportClass::clear()+0x84>)
60004586:	2000      	movs	r0, #0
{
60004588:	b430      	push	{r4, r5}
	info->ipsr  = 0;
6000458a:	e9c3 0020 	strd	r0, r0, [r3, #128]	; 0x80
	info->cfsr  = 0;
	info->hfsr  = 0;
6000458e:	e9c3 0022 	strd	r0, r0, [r3, #136]	; 0x88
	info->mmfar = 0;
	info->bfar  = 0;
60004592:	e9c3 0024 	strd	r0, r0, [r3, #144]	; 0x90
	info->ret = 0;
	info->xpsr  = 0;
60004596:	e9c3 0026 	strd	r0, r0, [r3, #152]	; 0x98
	info->crc = 0;
6000459a:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
6000459e:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
600045a2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600045a6:	4919      	ldr	r1, [pc, #100]	; (6000460c <CrashReportClass::clear()+0x88>)
600045a8:	4a19      	ldr	r2, [pc, #100]	; (60004610 <CrashReportClass::clear()+0x8c>)
600045aa:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
600045ae:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
600045b2:	f3bf 8f4f 	dsb	sy
	asm("isb");
600045b6:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(info, sizeof(*info));
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
600045ba:	4b16      	ldr	r3, [pc, #88]	; (60004614 <CrashReportClass::clear()+0x90>)
			arm_dcache_flush((void *)bc, sizeof(struct crashreport_breadcrumbs_struct));
		}
	}
	static uint32_t checksum(volatile const void *data, int len) {
		volatile const uint16_t *p = (volatile const uint16_t *)data;
		uint32_t a=1, b=0; // Adler Fletcher kinda, len < 720 bytes
600045bc:	4601      	mov	r1, r0
  *(volatile uint32_t *)(&bc->bitmask) = 0;
600045be:	4c16      	ldr	r4, [pc, #88]	; (60004618 <CrashReportClass::clear()+0x94>)
600045c0:	2201      	movs	r2, #1
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
600045c2:	689d      	ldr	r5, [r3, #8]
		while (len > 0) {
600045c4:	f604 74dc 	addw	r4, r4, #4060	; 0xfdc
600045c8:	609d      	str	r5, [r3, #8]
	SRC_GPR5 = 0;
600045ca:	6318      	str	r0, [r3, #48]	; 0x30
		volatile const uint16_t *p = (volatile const uint16_t *)data;
600045cc:	4b13      	ldr	r3, [pc, #76]	; (6000461c <CrashReportClass::clear()+0x98>)
  *(volatile uint32_t *)(&bc->bitmask) = 0;
600045ce:	f844 0c1c 	str.w	r0, [r4, #-28]
			a += *p++;
600045d2:	4618      	mov	r0, r3
600045d4:	3302      	adds	r3, #2
600045d6:	8800      	ldrh	r0, [r0, #0]
		while (len > 0) {
600045d8:	42a3      	cmp	r3, r4
			a += *p++;
600045da:	fa12 f280 	uxtah	r2, r2, r0
			b += a;
600045de:	4411      	add	r1, r2
		while (len > 0) {
600045e0:	d1f7      	bne.n	600045d2 <CrashReportClass::clear()+0x4e>
			len -= 2;
		}
		a = a & 65535;
600045e2:	b292      	uxth	r2, r2
  *(volatile uint32_t *)(&bc->checksum) = checksum(bc, 28);
600045e4:	4b0c      	ldr	r3, [pc, #48]	; (60004618 <CrashReportClass::clear()+0x94>)
		b = b & 65535;
		return a | (b << 16);
600045e6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
600045ea:	f8c3 2fdc 	str.w	r2, [r3, #4060]	; 0xfdc
	asm("dsb");
600045ee:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCMVAC = location;
600045f2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600045f6:	4a09      	ldr	r2, [pc, #36]	; (6000461c <CrashReportClass::clear()+0x98>)
600045f8:	f8c3 2f68 	str.w	r2, [r3, #3944]	; 0xf68
	asm("dsb");
600045fc:	f3bf 8f4f 	dsb	sy
	asm("isb");
60004600:	f3bf 8f6f 	isb	sy
}
60004604:	bc30      	pop	{r4, r5}
60004606:	4770      	bx	lr
60004608:	2027ff00 	.word	0x2027ff00
6000460c:	2027ff80 	.word	0x2027ff80
60004610:	2027ffa0 	.word	0x2027ffa0
60004614:	400f8000 	.word	0x400f8000
60004618:	2027f000 	.word	0x2027f000
6000461c:	2027ffc0 	.word	0x2027ffc0

60004620 <CrashReportClass::printTo(Print&) const>:
	if (info->len != sizeof(*info) / 4) return 0;
60004620:	4bb2      	ldr	r3, [pc, #712]	; (600048ec <CrashReportClass::printTo(Print&) const+0x2cc>)
60004622:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
60004626:	2a0b      	cmp	r2, #11
{
60004628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
6000462c:	460d      	mov	r5, r1
	if (info->len != sizeof(*info) / 4) return 0;
6000462e:	d11b      	bne.n	60004668 <CrashReportClass::printTo(Print&) const+0x48>
	crc = 0xFFFFFFFF;
60004630:	f04f 30ff 	mov.w	r0, #4294967295
	data = (uint32_t *)info;
60004634:	49ae      	ldr	r1, [pc, #696]	; (600048f0 <CrashReportClass::printTo(Print&) const+0x2d0>)
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60004636:	4baf      	ldr	r3, [pc, #700]	; (600048f4 <CrashReportClass::printTo(Print&) const+0x2d4>)
	while (data < end) {
60004638:	4eaf      	ldr	r6, [pc, #700]	; (600048f8 <CrashReportClass::printTo(Print&) const+0x2d8>)
		crc ^= *data++;
6000463a:	f101 0c04 	add.w	ip, r1, #4
6000463e:	4050      	eors	r0, r2
60004640:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60004642:	f000 0201 	and.w	r2, r0, #1
60004646:	3c01      	subs	r4, #1
60004648:	fb03 f202 	mul.w	r2, r3, r2
6000464c:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
60004650:	d1f7      	bne.n	60004642 <CrashReportClass::printTo(Print&) const+0x22>
	while (data < end) {
60004652:	45b4      	cmp	ip, r6
60004654:	d002      	beq.n	6000465c <CrashReportClass::printTo(Print&) const+0x3c>
		crc ^= *data++;
60004656:	684a      	ldr	r2, [r1, #4]
60004658:	4661      	mov	r1, ip
6000465a:	e7ee      	b.n	6000463a <CrashReportClass::printTo(Print&) const+0x1a>
	if (crc != info->crc) return 0;
6000465c:	f8df 828c 	ldr.w	r8, [pc, #652]	; 600048ec <CrashReportClass::printTo(Print&) const+0x2cc>
60004660:	f8d8 30a8 	ldr.w	r3, [r8, #168]	; 0xa8
60004664:	4298      	cmp	r0, r3
60004666:	d079      	beq.n	6000475c <CrashReportClass::printTo(Print&) const+0x13c>
							  return write((const uint8_t *)str, strlen(str)); }
60004668:	682b      	ldr	r3, [r5, #0]
6000466a:	2217      	movs	r2, #23
6000466c:	49a3      	ldr	r1, [pc, #652]	; (600048fc <CrashReportClass::printTo(Print&) const+0x2dc>)
6000466e:	4628      	mov	r0, r5
60004670:	685b      	ldr	r3, [r3, #4]
60004672:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60004674:	4628      	mov	r0, r5
60004676:	f001 f80f 	bl	60005698 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000467a:	682b      	ldr	r3, [r5, #0]
6000467c:	2248      	movs	r2, #72	; 0x48
6000467e:	49a0      	ldr	r1, [pc, #640]	; (60004900 <CrashReportClass::printTo(Print&) const+0x2e0>)
60004680:	685b      	ldr	r3, [r3, #4]
60004682:	4628      	mov	r0, r5
60004684:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60004686:	4628      	mov	r0, r5
60004688:	f001 f806 	bl	60005698 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000468c:	682b      	ldr	r3, [r5, #0]
6000468e:	2249      	movs	r2, #73	; 0x49
60004690:	499c      	ldr	r1, [pc, #624]	; (60004904 <CrashReportClass::printTo(Print&) const+0x2e4>)
60004692:	685b      	ldr	r3, [r3, #4]
60004694:	4628      	mov	r0, r5
60004696:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60004698:	4628      	mov	r0, r5
6000469a:	f000 fffd 	bl	60005698 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000469e:	682b      	ldr	r3, [r5, #0]
600046a0:	2224      	movs	r2, #36	; 0x24
600046a2:	4999      	ldr	r1, [pc, #612]	; (60004908 <CrashReportClass::printTo(Print&) const+0x2e8>)
600046a4:	685b      	ldr	r3, [r3, #4]
600046a6:	4628      	mov	r0, r5
600046a8:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600046aa:	4628      	mov	r0, r5
600046ac:	f000 fff4 	bl	60005698 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600046b0:	682b      	ldr	r3, [r5, #0]
600046b2:	2247      	movs	r2, #71	; 0x47
600046b4:	4995      	ldr	r1, [pc, #596]	; (6000490c <CrashReportClass::printTo(Print&) const+0x2ec>)
600046b6:	685b      	ldr	r3, [r3, #4]
600046b8:	4628      	mov	r0, r5
600046ba:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600046bc:	4628      	mov	r0, r5
600046be:	f000 ffeb 	bl	60005698 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600046c2:	682b      	ldr	r3, [r5, #0]
600046c4:	223f      	movs	r2, #63	; 0x3f
600046c6:	4992      	ldr	r1, [pc, #584]	; (60004910 <CrashReportClass::printTo(Print&) const+0x2f0>)
600046c8:	685b      	ldr	r3, [r3, #4]
600046ca:	4628      	mov	r0, r5
600046cc:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600046ce:	4628      	mov	r0, r5
600046d0:	f000 ffe2 	bl	60005698 <___ZN5Print7printlnEv_veneer>
  uint32_t SRSR = SRC_SRSR;
600046d4:	4b8f      	ldr	r3, [pc, #572]	; (60004914 <CrashReportClass::printTo(Print&) const+0x2f4>)
600046d6:	689c      	ldr	r4, [r3, #8]
  if (SRSR & SRC_SRSR_LOCKUP_SYSRESETREQ) {
600046d8:	07a2      	lsls	r2, r4, #30
600046da:	d50d      	bpl.n	600046f8 <CrashReportClass::printTo(Print&) const+0xd8>
    uint32_t gpr5 = SRC_GPR5;
600046dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    if (gpr5 == 0x0BAD00F1) {
600046de:	4b8e      	ldr	r3, [pc, #568]	; (60004918 <CrashReportClass::printTo(Print&) const+0x2f8>)
600046e0:	429a      	cmp	r2, r3
							  return write((const uint8_t *)str, strlen(str)); }
600046e2:	682b      	ldr	r3, [r5, #0]
600046e4:	f000 8174 	beq.w	600049d0 <CrashReportClass::printTo(Print&) const+0x3b0>
600046e8:	2240      	movs	r2, #64	; 0x40
600046ea:	498c      	ldr	r1, [pc, #560]	; (6000491c <CrashReportClass::printTo(Print&) const+0x2fc>)
600046ec:	685b      	ldr	r3, [r3, #4]
600046ee:	4628      	mov	r0, r5
600046f0:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600046f2:	4628      	mov	r0, r5
600046f4:	f000 ffd0 	bl	60005698 <___ZN5Print7printlnEv_veneer>
  if (SRSR & SRC_SRSR_CSU_RESET_B) {
600046f8:	0767      	lsls	r7, r4, #29
600046fa:	f100 815f 	bmi.w	600049bc <CrashReportClass::printTo(Print&) const+0x39c>
  if (SRSR & SRC_SRSR_IPP_USER_RESET_B) {
600046fe:	0726      	lsls	r6, r4, #28
60004700:	f100 8152 	bmi.w	600049a8 <CrashReportClass::printTo(Print&) const+0x388>
  if (SRSR & SRC_SRSR_WDOG_RST_B) {
60004704:	06e0      	lsls	r0, r4, #27
60004706:	f100 8145 	bmi.w	60004994 <CrashReportClass::printTo(Print&) const+0x374>
  if (SRSR & SRC_SRSR_JTAG_RST_B) {
6000470a:	06a1      	lsls	r1, r4, #26
6000470c:	f100 8138 	bmi.w	60004980 <CrashReportClass::printTo(Print&) const+0x360>
  if (SRSR & SRC_SRSR_JTAG_SW_RST) {
60004710:	0662      	lsls	r2, r4, #25
60004712:	f100 812b 	bmi.w	6000496c <CrashReportClass::printTo(Print&) const+0x34c>
  if (SRSR & SRC_SRSR_WDOG3_RST_B) {
60004716:	0623      	lsls	r3, r4, #24
60004718:	f100 80dd 	bmi.w	600048d6 <CrashReportClass::printTo(Print&) const+0x2b6>
  if (SRSR & SRC_SRSR_TEMPSENSE_RST_B) {
6000471c:	f414 7480 	ands.w	r4, r4, #256	; 0x100
60004720:	f040 80ad 	bne.w	6000487e <CrashReportClass::printTo(Print&) const+0x25e>
  if (bc->bitmask && bc->checksum == checksum(bc, 28)) {
60004724:	4b71      	ldr	r3, [pc, #452]	; (600048ec <CrashReportClass::printTo(Print&) const+0x2cc>)
60004726:	f8d3 60c0 	ldr.w	r6, [r3, #192]	; 0xc0
6000472a:	b196      	cbz	r6, 60004752 <CrashReportClass::printTo(Print&) const+0x132>
6000472c:	f8d3 70dc 	ldr.w	r7, [r3, #220]	; 0xdc
		uint32_t a=1, b=0; // Adler Fletcher kinda, len < 720 bytes
60004730:	2201      	movs	r2, #1
		volatile const uint16_t *p = (volatile const uint16_t *)data;
60004732:	33c0      	adds	r3, #192	; 0xc0
		while (len > 0) {
60004734:	487a      	ldr	r0, [pc, #488]	; (60004920 <CrashReportClass::printTo(Print&) const+0x300>)
			a += *p++;
60004736:	4619      	mov	r1, r3
60004738:	3302      	adds	r3, #2
6000473a:	8809      	ldrh	r1, [r1, #0]
		while (len > 0) {
6000473c:	4283      	cmp	r3, r0
			a += *p++;
6000473e:	fa12 f281 	uxtah	r2, r2, r1
			b += a;
60004742:	4414      	add	r4, r2
		while (len > 0) {
60004744:	d1f7      	bne.n	60004736 <CrashReportClass::printTo(Print&) const+0x116>
		a = a & 65535;
60004746:	b293      	uxth	r3, r2
		return a | (b << 16);
60004748:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
6000474c:	429f      	cmp	r7, r3
6000474e:	f000 817c 	beq.w	60004a4a <CrashReportClass::printTo(Print&) const+0x42a>
  clear();
60004752:	f7ff ff17 	bl	60004584 <CrashReportClass::clear()>
}
60004756:	2001      	movs	r0, #1
60004758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
							  return write((const uint8_t *)str, strlen(str)); }
6000475c:	682b      	ldr	r3, [r5, #0]
6000475e:	220c      	movs	r2, #12
60004760:	4970      	ldr	r1, [pc, #448]	; (60004924 <CrashReportClass::printTo(Print&) const+0x304>)
60004762:	4628      	mov	r0, r5
60004764:	685b      	ldr	r3, [r3, #4]
60004766:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60004768:	4628      	mov	r0, r5
6000476a:	f000 ff95 	bl	60005698 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000476e:	682a      	ldr	r2, [r5, #0]
    uint8_t ss = info->time % 60;
60004770:	f8d8 90a4 	ldr.w	r9, [r8, #164]	; 0xa4
60004774:	4628      	mov	r0, r5
    info->time /= 60;
60004776:	4b6c      	ldr	r3, [pc, #432]	; (60004928 <CrashReportClass::printTo(Print&) const+0x308>)
60004778:	f8d2 a004 	ldr.w	sl, [r2, #4]
6000477c:	fba3 2709 	umull	r2, r7, r3, r9
60004780:	496a      	ldr	r1, [pc, #424]	; (6000492c <CrashReportClass::printTo(Print&) const+0x30c>)
60004782:	097f      	lsrs	r7, r7, #5
    info->time /= 60;
60004784:	fba3 2307 	umull	r2, r3, r3, r7
60004788:	2226      	movs	r2, #38	; 0x26
6000478a:	095e      	lsrs	r6, r3, #5
6000478c:	f8c8 60a4 	str.w	r6, [r8, #164]	; 0xa4
60004790:	47d0      	blx	sl
    uint8_t hh = info->time % 24;
60004792:	4967      	ldr	r1, [pc, #412]	; (60004930 <CrashReportClass::printTo(Print&) const+0x310>)
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
60004794:	220a      	movs	r2, #10
60004796:	4628      	mov	r0, r5
60004798:	fba1 3106 	umull	r3, r1, r1, r6
6000479c:	4623      	mov	r3, r4
6000479e:	0909      	lsrs	r1, r1, #4
600047a0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
600047a4:	eba6 01c1 	sub.w	r1, r6, r1, lsl #3
600047a8:	f000 ff22 	bl	600055f0 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600047ac:	682b      	ldr	r3, [r5, #0]
    uint8_t mm = info->time % 60;
600047ae:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
600047b2:	2201      	movs	r2, #1
600047b4:	685b      	ldr	r3, [r3, #4]
600047b6:	4628      	mov	r0, r5
600047b8:	495e      	ldr	r1, [pc, #376]	; (60004934 <CrashReportClass::printTo(Print&) const+0x314>)
600047ba:	4798      	blx	r3
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
600047bc:	4623      	mov	r3, r4
600047be:	eba7 0186 	sub.w	r1, r7, r6, lsl #2
600047c2:	220a      	movs	r2, #10
600047c4:	4628      	mov	r0, r5
    uint8_t ss = info->time % 60;
600047c6:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
600047ca:	f000 ff11 	bl	600055f0 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600047ce:	682b      	ldr	r3, [r5, #0]
600047d0:	2201      	movs	r2, #1
600047d2:	4958      	ldr	r1, [pc, #352]	; (60004934 <CrashReportClass::printTo(Print&) const+0x314>)
600047d4:	685b      	ldr	r3, [r3, #4]
600047d6:	4628      	mov	r0, r5
600047d8:	4798      	blx	r3
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
600047da:	4623      	mov	r3, r4
600047dc:	eba9 0187 	sub.w	r1, r9, r7, lsl #2
600047e0:	220a      	movs	r2, #10
600047e2:	4628      	mov	r0, r5
600047e4:	f000 ff04 	bl	600055f0 <___ZN5Print11printNumberEmhh_veneer>
	// Print a string and newline
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	// Print an unsigned number and newline
	size_t println(uint8_t b)			{ return print(b) + println(); }
600047e8:	4628      	mov	r0, r5
600047ea:	f000 ff55 	bl	60005698 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600047ee:	682b      	ldr	r3, [r5, #0]
600047f0:	2224      	movs	r2, #36	; 0x24
600047f2:	4951      	ldr	r1, [pc, #324]	; (60004938 <CrashReportClass::printTo(Print&) const+0x318>)
600047f4:	685b      	ldr	r3, [r3, #4]
600047f6:	4628      	mov	r0, r5
600047f8:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
600047fa:	4623      	mov	r3, r4
600047fc:	2210      	movs	r2, #16
600047fe:	f8d8 1098 	ldr.w	r1, [r8, #152]	; 0x98
60004802:	4628      	mov	r0, r5
60004804:	f000 fef4 	bl	600055f0 <___ZN5Print11printNumberEmhh_veneer>
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60004808:	4628      	mov	r0, r5
6000480a:	f000 ff45 	bl	60005698 <___ZN5Print7printlnEv_veneer>
    uint32_t _CFSR = info->cfsr;
6000480e:	f8d8 6088 	ldr.w	r6, [r8, #136]	; 0x88
    if (_CFSR > 0) {
60004812:	2e00      	cmp	r6, #0
60004814:	f040 80df 	bne.w	600049d6 <CrashReportClass::printTo(Print&) const+0x3b6>
    uint32_t _HFSR = info->hfsr;
60004818:	4e34      	ldr	r6, [pc, #208]	; (600048ec <CrashReportClass::printTo(Print&) const+0x2cc>)
6000481a:	f8d6 408c 	ldr.w	r4, [r6, #140]	; 0x8c
    if (_HFSR > 0) {
6000481e:	2c00      	cmp	r4, #0
60004820:	f040 80fa 	bne.w	60004a18 <CrashReportClass::printTo(Print&) const+0x3f8>
							  return write((const uint8_t *)str, strlen(str)); }
60004824:	682b      	ldr	r3, [r5, #0]
60004826:	2222      	movs	r2, #34	; 0x22
60004828:	4944      	ldr	r1, [pc, #272]	; (6000493c <CrashReportClass::printTo(Print&) const+0x31c>)
6000482a:	4628      	mov	r0, r5
6000482c:	685b      	ldr	r3, [r3, #4]
6000482e:	4798      	blx	r3
    p.print(info->temp);
60004830:	4b2e      	ldr	r3, [pc, #184]	; (600048ec <CrashReportClass::printTo(Print&) const+0x2cc>)
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
60004832:	2102      	movs	r1, #2
60004834:	4628      	mov	r0, r5
60004836:	ed93 0a28 	vldr	s0, [r3, #160]	; 0xa0
6000483a:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
6000483e:	f000 fef3 	bl	60005628 <___ZN5Print10printFloatEdh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60004842:	682b      	ldr	r3, [r5, #0]
60004844:	2205      	movs	r2, #5
60004846:	493e      	ldr	r1, [pc, #248]	; (60004940 <CrashReportClass::printTo(Print&) const+0x320>)
60004848:	685b      	ldr	r3, [r3, #4]
6000484a:	4628      	mov	r0, r5
6000484c:	4798      	blx	r3
6000484e:	682b      	ldr	r3, [r5, #0]
60004850:	221d      	movs	r2, #29
60004852:	493c      	ldr	r1, [pc, #240]	; (60004944 <CrashReportClass::printTo(Print&) const+0x324>)
60004854:	685b      	ldr	r3, [r3, #4]
60004856:	4628      	mov	r0, r5
60004858:	4798      	blx	r3
    p.print( F_CPU_ACTUAL/1000000);
6000485a:	4a3b      	ldr	r2, [pc, #236]	; (60004948 <CrashReportClass::printTo(Print&) const+0x328>)
6000485c:	483b      	ldr	r0, [pc, #236]	; (6000494c <CrashReportClass::printTo(Print&) const+0x32c>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
6000485e:	2300      	movs	r3, #0
60004860:	6811      	ldr	r1, [r2, #0]
60004862:	220a      	movs	r2, #10
60004864:	fba0 0101 	umull	r0, r1, r0, r1
60004868:	4628      	mov	r0, r5
6000486a:	0c89      	lsrs	r1, r1, #18
6000486c:	f000 fec0 	bl	600055f0 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60004870:	682b      	ldr	r3, [r5, #0]
60004872:	2204      	movs	r2, #4
60004874:	4936      	ldr	r1, [pc, #216]	; (60004950 <CrashReportClass::printTo(Print&) const+0x330>)
60004876:	685b      	ldr	r3, [r3, #4]
60004878:	4628      	mov	r0, r5
6000487a:	4798      	blx	r3
6000487c:	e72a      	b.n	600046d4 <CrashReportClass::printTo(Print&) const+0xb4>
6000487e:	682b      	ldr	r3, [r5, #0]
60004880:	2229      	movs	r2, #41	; 0x29
60004882:	4934      	ldr	r1, [pc, #208]	; (60004954 <CrashReportClass::printTo(Print&) const+0x334>)
60004884:	4628      	mov	r0, r5
60004886:	685b      	ldr	r3, [r3, #4]
60004888:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
6000488a:	4628      	mov	r0, r5
6000488c:	f000 ff04 	bl	60005698 <___ZN5Print7printlnEv_veneer>
	  SRC_SRSR &= ~0x100u; /* Write 0 to clear. */
60004890:	4920      	ldr	r1, [pc, #128]	; (60004914 <CrashReportClass::printTo(Print&) const+0x2f4>)
							  return write((const uint8_t *)str, strlen(str)); }
60004892:	6828      	ldr	r0, [r5, #0]
60004894:	2221      	movs	r2, #33	; 0x21
60004896:	688b      	ldr	r3, [r1, #8]
60004898:	6844      	ldr	r4, [r0, #4]
6000489a:	4628      	mov	r0, r5
6000489c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
600048a0:	608b      	str	r3, [r1, #8]
600048a2:	492d      	ldr	r1, [pc, #180]	; (60004958 <CrashReportClass::printTo(Print&) const+0x338>)
600048a4:	47a0      	blx	r4
	size_t println(const char s[])			{ return print(s) + println(); }
600048a6:	4628      	mov	r0, r5
600048a8:	f000 fef6 	bl	60005698 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600048ac:	682b      	ldr	r3, [r5, #0]
600048ae:	2242      	movs	r2, #66	; 0x42
600048b0:	492a      	ldr	r1, [pc, #168]	; (6000495c <CrashReportClass::printTo(Print&) const+0x33c>)
600048b2:	685b      	ldr	r3, [r3, #4]
600048b4:	4628      	mov	r0, r5
600048b6:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600048b8:	4628      	mov	r0, r5
600048ba:	f000 feed 	bl	60005698 <___ZN5Print7printlnEv_veneer>
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
600048be:	4a28      	ldr	r2, [pc, #160]	; (60004960 <CrashReportClass::printTo(Print&) const+0x340>)
	  IOMUXC_GPR_GPR16 = 0x00000007;
600048c0:	4b28      	ldr	r3, [pc, #160]	; (60004964 <CrashReportClass::printTo(Print&) const+0x344>)
600048c2:	2107      	movs	r1, #7
600048c4:	6419      	str	r1, [r3, #64]	; 0x40
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
600048c6:	6b93      	ldr	r3, [r2, #56]	; 0x38
600048c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600048cc:	6393      	str	r3, [r2, #56]	; 0x38
	  asm volatile ("dsb":::"memory");
600048ce:	f3bf 8f4f 	dsb	sy
	  while (1) asm ("wfi");
600048d2:	bf30      	wfi
600048d4:	e7fd      	b.n	600048d2 <CrashReportClass::printTo(Print&) const+0x2b2>
							  return write((const uint8_t *)str, strlen(str)); }
600048d6:	682b      	ldr	r3, [r5, #0]
600048d8:	2221      	movs	r2, #33	; 0x21
600048da:	4923      	ldr	r1, [pc, #140]	; (60004968 <CrashReportClass::printTo(Print&) const+0x348>)
600048dc:	4628      	mov	r0, r5
600048de:	685b      	ldr	r3, [r3, #4]
600048e0:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600048e2:	4628      	mov	r0, r5
600048e4:	f000 fed8 	bl	60005698 <___ZN5Print7printlnEv_veneer>
600048e8:	e718      	b.n	6000471c <CrashReportClass::printTo(Print&) const+0xfc>
600048ea:	bf00      	nop
600048ec:	2027ff00 	.word	0x2027ff00
600048f0:	2027ff80 	.word	0x2027ff80
600048f4:	edb88320 	.word	0xedb88320
600048f8:	2027ffa8 	.word	0x2027ffa8
600048fc:	2000b6c8 	.word	0x2000b6c8
60004900:	2000b6e0 	.word	0x2000b6e0
60004904:	2000b72c 	.word	0x2000b72c
60004908:	2000b778 	.word	0x2000b778
6000490c:	2000b7a0 	.word	0x2000b7a0
60004910:	2000b7e8 	.word	0x2000b7e8
60004914:	400f8000 	.word	0x400f8000
60004918:	0bad00f1 	.word	0x0bad00f1
6000491c:	2000b874 	.word	0x2000b874
60004920:	2027ffdc 	.word	0x2027ffdc
60004924:	2000b1b4 	.word	0x2000b1b4
60004928:	88888889 	.word	0x88888889
6000492c:	2000b1c4 	.word	0x2000b1c4
60004930:	aaaaaaab 	.word	0xaaaaaaab
60004934:	2000a958 	.word	0x2000a958
60004938:	2000b1ec 	.word	0x2000b1ec
6000493c:	2000b674 	.word	0x2000b674
60004940:	2000b698 	.word	0x2000b698
60004944:	2000b6a0 	.word	0x2000b6a0
60004948:	2000bd24 	.word	0x2000bd24
6000494c:	431bde83 	.word	0x431bde83
60004950:	2000b6c0 	.word	0x2000b6c0
60004954:	2000b9a8 	.word	0x2000b9a8
60004958:	2000b9d4 	.word	0x2000b9d4
6000495c:	2000b9f8 	.word	0x2000b9f8
60004960:	400d4000 	.word	0x400d4000
60004964:	400ac000 	.word	0x400ac000
60004968:	2000b984 	.word	0x2000b984
							  return write((const uint8_t *)str, strlen(str)); }
6000496c:	682b      	ldr	r3, [r5, #0]
6000496e:	2221      	movs	r2, #33	; 0x21
60004970:	499c      	ldr	r1, [pc, #624]	; (60004be4 <CrashReportClass::printTo(Print&) const+0x5c4>)
60004972:	4628      	mov	r0, r5
60004974:	685b      	ldr	r3, [r3, #4]
60004976:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60004978:	4628      	mov	r0, r5
6000497a:	f000 fe8d 	bl	60005698 <___ZN5Print7printlnEv_veneer>
6000497e:	e6ca      	b.n	60004716 <CrashReportClass::printTo(Print&) const+0xf6>
							  return write((const uint8_t *)str, strlen(str)); }
60004980:	682b      	ldr	r3, [r5, #0]
60004982:	2229      	movs	r2, #41	; 0x29
60004984:	4998      	ldr	r1, [pc, #608]	; (60004be8 <CrashReportClass::printTo(Print&) const+0x5c8>)
60004986:	4628      	mov	r0, r5
60004988:	685b      	ldr	r3, [r3, #4]
6000498a:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
6000498c:	4628      	mov	r0, r5
6000498e:	f000 fe83 	bl	60005698 <___ZN5Print7printlnEv_veneer>
60004992:	e6bd      	b.n	60004710 <CrashReportClass::printTo(Print&) const+0xf0>
							  return write((const uint8_t *)str, strlen(str)); }
60004994:	682b      	ldr	r3, [r5, #0]
60004996:	2226      	movs	r2, #38	; 0x26
60004998:	4994      	ldr	r1, [pc, #592]	; (60004bec <CrashReportClass::printTo(Print&) const+0x5cc>)
6000499a:	4628      	mov	r0, r5
6000499c:	685b      	ldr	r3, [r3, #4]
6000499e:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600049a0:	4628      	mov	r0, r5
600049a2:	f000 fe79 	bl	60005698 <___ZN5Print7printlnEv_veneer>
600049a6:	e6b0      	b.n	6000470a <CrashReportClass::printTo(Print&) const+0xea>
							  return write((const uint8_t *)str, strlen(str)); }
600049a8:	682b      	ldr	r3, [r5, #0]
600049aa:	222a      	movs	r2, #42	; 0x2a
600049ac:	4990      	ldr	r1, [pc, #576]	; (60004bf0 <CrashReportClass::printTo(Print&) const+0x5d0>)
600049ae:	4628      	mov	r0, r5
600049b0:	685b      	ldr	r3, [r3, #4]
600049b2:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600049b4:	4628      	mov	r0, r5
600049b6:	f000 fe6f 	bl	60005698 <___ZN5Print7printlnEv_veneer>
600049ba:	e6a3      	b.n	60004704 <CrashReportClass::printTo(Print&) const+0xe4>
							  return write((const uint8_t *)str, strlen(str)); }
600049bc:	682b      	ldr	r3, [r5, #0]
600049be:	2227      	movs	r2, #39	; 0x27
600049c0:	498c      	ldr	r1, [pc, #560]	; (60004bf4 <CrashReportClass::printTo(Print&) const+0x5d4>)
600049c2:	4628      	mov	r0, r5
600049c4:	685b      	ldr	r3, [r3, #4]
600049c6:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600049c8:	4628      	mov	r0, r5
600049ca:	f000 fe65 	bl	60005698 <___ZN5Print7printlnEv_veneer>
600049ce:	e696      	b.n	600046fe <CrashReportClass::printTo(Print&) const+0xde>
							  return write((const uint8_t *)str, strlen(str)); }
600049d0:	2248      	movs	r2, #72	; 0x48
600049d2:	4989      	ldr	r1, [pc, #548]	; (60004bf8 <CrashReportClass::printTo(Print&) const+0x5d8>)
600049d4:	e68a      	b.n	600046ec <CrashReportClass::printTo(Print&) const+0xcc>
600049d6:	682b      	ldr	r3, [r5, #0]
600049d8:	2208      	movs	r2, #8
600049da:	4988      	ldr	r1, [pc, #544]	; (60004bfc <CrashReportClass::printTo(Print&) const+0x5dc>)
600049dc:	4628      	mov	r0, r5
600049de:	685b      	ldr	r3, [r3, #4]
600049e0:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
600049e2:	4623      	mov	r3, r4
600049e4:	2210      	movs	r2, #16
600049e6:	f8d8 1088 	ldr.w	r1, [r8, #136]	; 0x88
600049ea:	4628      	mov	r0, r5
600049ec:	f000 fe00 	bl	600055f0 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
600049f0:	4628      	mov	r0, r5
600049f2:	f000 fe51 	bl	60005698 <___ZN5Print7printlnEv_veneer>
      if ((_CFSR & 1) == 1) {
600049f6:	07f4      	lsls	r4, r6, #31
600049f8:	d469      	bmi.n	60004ace <CrashReportClass::printTo(Print&) const+0x4ae>
      } else  if (((_CFSR & (0x02)) >> 1) == 1) {
600049fa:	07b0      	lsls	r0, r6, #30
600049fc:	f100 8153 	bmi.w	60004ca6 <CrashReportClass::printTo(Print&) const+0x686>
      } else if (((_CFSR & (0x08)) >> 3) == 1) {
60004a00:	0731      	lsls	r1, r6, #28
60004a02:	f100 8144 	bmi.w	60004c8e <CrashReportClass::printTo(Print&) const+0x66e>
      } else if (((_CFSR & (0x10)) >> 4) == 1) {
60004a06:	06f2      	lsls	r2, r6, #27
60004a08:	f100 815d 	bmi.w	60004cc6 <CrashReportClass::printTo(Print&) const+0x6a6>
      } else if (((_CFSR & (0x20)) >> 5) == 1) {
60004a0c:	06b3      	lsls	r3, r6, #26
60004a0e:	d567      	bpl.n	60004ae0 <CrashReportClass::printTo(Print&) const+0x4c0>
							  return write((const uint8_t *)str, strlen(str)); }
60004a10:	682b      	ldr	r3, [r5, #0]
60004a12:	222a      	movs	r2, #42	; 0x2a
60004a14:	497a      	ldr	r1, [pc, #488]	; (60004c00 <CrashReportClass::printTo(Print&) const+0x5e0>)
60004a16:	e05d      	b.n	60004ad4 <CrashReportClass::printTo(Print&) const+0x4b4>
60004a18:	682b      	ldr	r3, [r5, #0]
60004a1a:	2208      	movs	r2, #8
60004a1c:	4979      	ldr	r1, [pc, #484]	; (60004c04 <CrashReportClass::printTo(Print&) const+0x5e4>)
60004a1e:	4628      	mov	r0, r5
60004a20:	685b      	ldr	r3, [r3, #4]
60004a22:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60004a24:	2300      	movs	r3, #0
60004a26:	2210      	movs	r2, #16
60004a28:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
60004a2c:	4628      	mov	r0, r5
60004a2e:	f000 fddf 	bl	600055f0 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60004a32:	4628      	mov	r0, r5
60004a34:	f000 fe30 	bl	60005698 <___ZN5Print7printlnEv_veneer>
      if (((_HFSR & (0x02)) >> 1) == 1) {
60004a38:	07a0      	lsls	r0, r4, #30
60004a3a:	d467      	bmi.n	60004b0c <CrashReportClass::printTo(Print&) const+0x4ec>
      } else if (((_HFSR & (0x40000000)) >> 30) == 1) {
60004a3c:	0061      	lsls	r1, r4, #1
60004a3e:	f57f aef1 	bpl.w	60004824 <CrashReportClass::printTo(Print&) const+0x204>
							  return write((const uint8_t *)str, strlen(str)); }
60004a42:	682b      	ldr	r3, [r5, #0]
60004a44:	221b      	movs	r2, #27
60004a46:	4970      	ldr	r1, [pc, #448]	; (60004c08 <CrashReportClass::printTo(Print&) const+0x5e8>)
60004a48:	e063      	b.n	60004b12 <CrashReportClass::printTo(Print&) const+0x4f2>
60004a4a:	2401      	movs	r4, #1
60004a4c:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 60004c44 <CrashReportClass::printTo(Print&) const+0x624>
60004a50:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 60004c48 <CrashReportClass::printTo(Print&) const+0x628>
      if (bc->bitmask & (1 << i)) {
60004a54:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 60004c2c <CrashReportClass::printTo(Print&) const+0x60c>
60004a58:	e005      	b.n	60004a66 <CrashReportClass::printTo(Print&) const+0x446>
    for (int i=0; i < 6; i++) {
60004a5a:	3401      	adds	r4, #1
60004a5c:	2c07      	cmp	r4, #7
60004a5e:	f43f ae78 	beq.w	60004752 <CrashReportClass::printTo(Print&) const+0x132>
      if (bc->bitmask & (1 << i)) {
60004a62:	f8d8 60c0 	ldr.w	r6, [r8, #192]	; 0xc0
60004a66:	1e63      	subs	r3, r4, #1
60004a68:	2701      	movs	r7, #1
60004a6a:	fa07 f203 	lsl.w	r2, r7, r3
60004a6e:	4232      	tst	r2, r6
60004a70:	d0f3      	beq.n	60004a5a <CrashReportClass::printTo(Print&) const+0x43a>
60004a72:	eb09 0683 	add.w	r6, r9, r3, lsl #2
60004a76:	682b      	ldr	r3, [r5, #0]
60004a78:	220e      	movs	r2, #14
60004a7a:	4651      	mov	r1, sl
60004a7c:	685b      	ldr	r3, [r3, #4]
60004a7e:	4628      	mov	r0, r5
60004a80:	4798      	blx	r3
	size_t print(int n)				{ return print((long)n); }
60004a82:	4621      	mov	r1, r4
60004a84:	4628      	mov	r0, r5
60004a86:	f000 fd87 	bl	60005598 <___ZN5Print5printEl_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60004a8a:	682b      	ldr	r3, [r5, #0]
60004a8c:	2205      	movs	r2, #5
60004a8e:	495f      	ldr	r1, [pc, #380]	; (60004c0c <CrashReportClass::printTo(Print&) const+0x5ec>)
60004a90:	685b      	ldr	r3, [r3, #4]
60004a92:	4628      	mov	r0, r5
60004a94:	4798      	blx	r3
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
60004a96:	6871      	ldr	r1, [r6, #4]
60004a98:	2300      	movs	r3, #0
60004a9a:	220a      	movs	r2, #10
60004a9c:	4628      	mov	r0, r5
60004a9e:	f000 fda7 	bl	600055f0 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60004aa2:	682b      	ldr	r3, [r5, #0]
60004aa4:	2204      	movs	r2, #4
60004aa6:	495a      	ldr	r1, [pc, #360]	; (60004c10 <CrashReportClass::printTo(Print&) const+0x5f0>)
60004aa8:	685b      	ldr	r3, [r3, #4]
60004aaa:	4628      	mov	r0, r5
60004aac:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60004aae:	6871      	ldr	r1, [r6, #4]
60004ab0:	2300      	movs	r3, #0
60004ab2:	2210      	movs	r2, #16
60004ab4:	4628      	mov	r0, r5
60004ab6:	f000 fd9b 	bl	600055f0 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60004aba:	682b      	ldr	r3, [r5, #0]
60004abc:	463a      	mov	r2, r7
60004abe:	4955      	ldr	r1, [pc, #340]	; (60004c14 <CrashReportClass::printTo(Print&) const+0x5f4>)
60004ac0:	685b      	ldr	r3, [r3, #4]
60004ac2:	4628      	mov	r0, r5
60004ac4:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60004ac6:	4628      	mov	r0, r5
60004ac8:	f000 fde6 	bl	60005698 <___ZN5Print7printlnEv_veneer>
60004acc:	e7c5      	b.n	60004a5a <CrashReportClass::printTo(Print&) const+0x43a>
							  return write((const uint8_t *)str, strlen(str)); }
60004ace:	682b      	ldr	r3, [r5, #0]
60004ad0:	2228      	movs	r2, #40	; 0x28
60004ad2:	4951      	ldr	r1, [pc, #324]	; (60004c18 <CrashReportClass::printTo(Print&) const+0x5f8>)
60004ad4:	685b      	ldr	r3, [r3, #4]
60004ad6:	4628      	mov	r0, r5
60004ad8:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60004ada:	4628      	mov	r0, r5
60004adc:	f000 fddc 	bl	60005698 <___ZN5Print7printlnEv_veneer>
      if (((_CFSR & (0x80)) >> 7) == 1) {
60004ae0:	0637      	lsls	r7, r6, #24
60004ae2:	d43c      	bmi.n	60004b5e <CrashReportClass::printTo(Print&) const+0x53e>
      if (((_CFSR & 0x100) >> 8) == 1) {
60004ae4:	05f4      	lsls	r4, r6, #23
60004ae6:	d41b      	bmi.n	60004b20 <CrashReportClass::printTo(Print&) const+0x500>
      } else  if (((_CFSR & (0x200)) >> 9) == 1) {
60004ae8:	05b0      	lsls	r0, r6, #22
60004aea:	f100 80d8 	bmi.w	60004c9e <CrashReportClass::printTo(Print&) const+0x67e>
      } else if (((_CFSR & (0x400)) >> 10) == 1) {
60004aee:	0571      	lsls	r1, r6, #21
60004af0:	f100 80d1 	bmi.w	60004c96 <CrashReportClass::printTo(Print&) const+0x676>
      } else if (((_CFSR & (0x800)) >> 11) == 1) {
60004af4:	0532      	lsls	r2, r6, #20
60004af6:	f100 80e2 	bmi.w	60004cbe <CrashReportClass::printTo(Print&) const+0x69e>
      } else if (((_CFSR & (0x1000)) >> 12) == 1) {
60004afa:	04f3      	lsls	r3, r6, #19
60004afc:	f100 80db 	bmi.w	60004cb6 <CrashReportClass::printTo(Print&) const+0x696>
      } else if (((_CFSR & (0x2000)) >> 13) == 1) {
60004b00:	04b7      	lsls	r7, r6, #18
60004b02:	d516      	bpl.n	60004b32 <CrashReportClass::printTo(Print&) const+0x512>
							  return write((const uint8_t *)str, strlen(str)); }
60004b04:	682b      	ldr	r3, [r5, #0]
60004b06:	2231      	movs	r2, #49	; 0x31
60004b08:	4944      	ldr	r1, [pc, #272]	; (60004c1c <CrashReportClass::printTo(Print&) const+0x5fc>)
60004b0a:	e00c      	b.n	60004b26 <CrashReportClass::printTo(Print&) const+0x506>
60004b0c:	682b      	ldr	r3, [r5, #0]
60004b0e:	2226      	movs	r2, #38	; 0x26
60004b10:	4943      	ldr	r1, [pc, #268]	; (60004c20 <CrashReportClass::printTo(Print&) const+0x600>)
60004b12:	4628      	mov	r0, r5
60004b14:	685b      	ldr	r3, [r3, #4]
60004b16:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60004b18:	4628      	mov	r0, r5
60004b1a:	f000 fdbd 	bl	60005698 <___ZN5Print7printlnEv_veneer>
60004b1e:	e681      	b.n	60004824 <CrashReportClass::printTo(Print&) const+0x204>
							  return write((const uint8_t *)str, strlen(str)); }
60004b20:	682b      	ldr	r3, [r5, #0]
60004b22:	2220      	movs	r2, #32
60004b24:	493f      	ldr	r1, [pc, #252]	; (60004c24 <CrashReportClass::printTo(Print&) const+0x604>)
60004b26:	685b      	ldr	r3, [r3, #4]
60004b28:	4628      	mov	r0, r5
60004b2a:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60004b2c:	4628      	mov	r0, r5
60004b2e:	f000 fdb3 	bl	60005698 <___ZN5Print7printlnEv_veneer>
      if (((_CFSR & (0x8000)) >> 15) == 1) {
60004b32:	0434      	lsls	r4, r6, #16
60004b34:	d440      	bmi.n	60004bb8 <CrashReportClass::printTo(Print&) const+0x598>
      if (((_CFSR & 0x10000) >> 16) == 1) {
60004b36:	03f0      	lsls	r0, r6, #15
60004b38:	d42e      	bmi.n	60004b98 <CrashReportClass::printTo(Print&) const+0x578>
      } else  if (((_CFSR & (0x20000)) >> 17) == 1) {
60004b3a:	03b1      	lsls	r1, r6, #14
60004b3c:	f100 80b7 	bmi.w	60004cae <CrashReportClass::printTo(Print&) const+0x68e>
      } else if (((_CFSR & (0x40000)) >> 18) == 1) {
60004b40:	0372      	lsls	r2, r6, #13
60004b42:	d44b      	bmi.n	60004bdc <CrashReportClass::printTo(Print&) const+0x5bc>
      } else if (((_CFSR & (0x80000)) >> 19) == 1) {
60004b44:	0333      	lsls	r3, r6, #12
60004b46:	f100 80c6 	bmi.w	60004cd6 <CrashReportClass::printTo(Print&) const+0x6b6>
      } else if (((_CFSR & (0x1000000)) >> 24) == 1) {
60004b4a:	01f7      	lsls	r7, r6, #7
60004b4c:	f100 80bf 	bmi.w	60004cce <CrashReportClass::printTo(Print&) const+0x6ae>
      } else if (((_CFSR & (0x2000000)) >> 25) == 1) {
60004b50:	01b4      	lsls	r4, r6, #6
60004b52:	f57f ae61 	bpl.w	60004818 <CrashReportClass::printTo(Print&) const+0x1f8>
							  return write((const uint8_t *)str, strlen(str)); }
60004b56:	682b      	ldr	r3, [r5, #0]
60004b58:	221b      	movs	r2, #27
60004b5a:	4933      	ldr	r1, [pc, #204]	; (60004c28 <CrashReportClass::printTo(Print&) const+0x608>)
60004b5c:	e01f      	b.n	60004b9e <CrashReportClass::printTo(Print&) const+0x57e>
60004b5e:	682b      	ldr	r3, [r5, #0]
60004b60:	2221      	movs	r2, #33	; 0x21
        p.print(info->mmfar, HEX);
60004b62:	4c32      	ldr	r4, [pc, #200]	; (60004c2c <CrashReportClass::printTo(Print&) const+0x60c>)
60004b64:	4628      	mov	r0, r5
60004b66:	4932      	ldr	r1, [pc, #200]	; (60004c30 <CrashReportClass::printTo(Print&) const+0x610>)
60004b68:	685b      	ldr	r3, [r3, #4]
60004b6a:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60004b6c:	2210      	movs	r2, #16
60004b6e:	2300      	movs	r3, #0
60004b70:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
60004b74:	4628      	mov	r0, r5
60004b76:	f000 fd3b 	bl	600055f0 <___ZN5Print11printNumberEmhh_veneer>
        if (info->mmfar < 32) {
60004b7a:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
60004b7e:	2a1f      	cmp	r2, #31
60004b80:	d964      	bls.n	60004c4c <CrashReportClass::printTo(Print&) const+0x62c>
        } else if ((info->mmfar >= (uint32_t)&_ebss) && (info->mmfar < (uint32_t)&_ebss + 32)) {
60004b82:	4b2c      	ldr	r3, [pc, #176]	; (60004c34 <CrashReportClass::printTo(Print&) const+0x614>)
60004b84:	429a      	cmp	r2, r3
60004b86:	d303      	bcc.n	60004b90 <CrashReportClass::printTo(Print&) const+0x570>
60004b88:	3320      	adds	r3, #32
60004b8a:	429a      	cmp	r2, r3
60004b8c:	f0c0 80a7 	bcc.w	60004cde <CrashReportClass::printTo(Print&) const+0x6be>
        p.println();
60004b90:	4628      	mov	r0, r5
60004b92:	f000 fd81 	bl	60005698 <___ZN5Print7printlnEv_veneer>
60004b96:	e7a5      	b.n	60004ae4 <CrashReportClass::printTo(Print&) const+0x4c4>
							  return write((const uint8_t *)str, strlen(str)); }
60004b98:	682b      	ldr	r3, [r5, #0]
60004b9a:	2223      	movs	r2, #35	; 0x23
60004b9c:	4926      	ldr	r1, [pc, #152]	; (60004c38 <CrashReportClass::printTo(Print&) const+0x618>)
60004b9e:	685b      	ldr	r3, [r3, #4]
60004ba0:	4628      	mov	r0, r5
    uint32_t _HFSR = info->hfsr;
60004ba2:	4e22      	ldr	r6, [pc, #136]	; (60004c2c <CrashReportClass::printTo(Print&) const+0x60c>)
60004ba4:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60004ba6:	4628      	mov	r0, r5
60004ba8:	f000 fd76 	bl	60005698 <___ZN5Print7printlnEv_veneer>
60004bac:	f8d6 408c 	ldr.w	r4, [r6, #140]	; 0x8c
    if (_HFSR > 0) {
60004bb0:	2c00      	cmp	r4, #0
60004bb2:	f43f ae37 	beq.w	60004824 <CrashReportClass::printTo(Print&) const+0x204>
60004bb6:	e72f      	b.n	60004a18 <CrashReportClass::printTo(Print&) const+0x3f8>
							  return write((const uint8_t *)str, strlen(str)); }
60004bb8:	682b      	ldr	r3, [r5, #0]
60004bba:	2221      	movs	r2, #33	; 0x21
60004bbc:	491f      	ldr	r1, [pc, #124]	; (60004c3c <CrashReportClass::printTo(Print&) const+0x61c>)
60004bbe:	4628      	mov	r0, r5
60004bc0:	685b      	ldr	r3, [r3, #4]
60004bc2:	4798      	blx	r3
        p.println(info->bfar, HEX);
60004bc4:	4919      	ldr	r1, [pc, #100]	; (60004c2c <CrashReportClass::printTo(Print&) const+0x60c>)
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60004bc6:	2300      	movs	r3, #0
60004bc8:	2210      	movs	r2, #16
60004bca:	f8d1 1094 	ldr.w	r1, [r1, #148]	; 0x94
60004bce:	4628      	mov	r0, r5
60004bd0:	f000 fd0e 	bl	600055f0 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60004bd4:	4628      	mov	r0, r5
60004bd6:	f000 fd5f 	bl	60005698 <___ZN5Print7printlnEv_veneer>
60004bda:	e7ac      	b.n	60004b36 <CrashReportClass::printTo(Print&) const+0x516>
							  return write((const uint8_t *)str, strlen(str)); }
60004bdc:	682b      	ldr	r3, [r5, #0]
60004bde:	2228      	movs	r2, #40	; 0x28
60004be0:	4917      	ldr	r1, [pc, #92]	; (60004c40 <CrashReportClass::printTo(Print&) const+0x620>)
60004be2:	e7dc      	b.n	60004b9e <CrashReportClass::printTo(Print&) const+0x57e>
60004be4:	2000b960 	.word	0x2000b960
60004be8:	2000b934 	.word	0x2000b934
60004bec:	2000b90c 	.word	0x2000b90c
60004bf0:	2000b8e0 	.word	0x2000b8e0
60004bf4:	2000b8b8 	.word	0x2000b8b8
60004bf8:	2000b828 	.word	0x2000b828
60004bfc:	2000b214 	.word	0x2000b214
60004c00:	2000b2c4 	.word	0x2000b2c4
60004c04:	2000b624 	.word	0x2000b624
60004c08:	2000b658 	.word	0x2000b658
60004c0c:	2000ba4c 	.word	0x2000ba4c
60004c10:	2000ba54 	.word	0x2000ba54
60004c14:	2000b774 	.word	0x2000b774
60004c18:	2000b220 	.word	0x2000b220
60004c1c:	2000b4e8 	.word	0x2000b4e8
60004c20:	2000b630 	.word	0x2000b630
60004c24:	2000b3d8 	.word	0x2000b3d8
60004c28:	2000b608 	.word	0x2000b608
60004c2c:	2027ff00 	.word	0x2027ff00
60004c30:	2000b2f0 	.word	0x2000b2f0
60004c34:	2005e580 	.word	0x2005e580
60004c38:	2000b540 	.word	0x2000b540
60004c3c:	2000b51c 	.word	0x2000b51c
60004c40:	2000b598 	.word	0x2000b598
60004c44:	2000ba3c 	.word	0x2000ba3c
60004c48:	2027ffc0 	.word	0x2027ffc0
60004c4c:	682b      	ldr	r3, [r5, #0]
60004c4e:	221e      	movs	r2, #30
60004c50:	4926      	ldr	r1, [pc, #152]	; (60004cec <CrashReportClass::printTo(Print&) const+0x6cc>)
60004c52:	4628      	mov	r0, r5
60004c54:	685b      	ldr	r3, [r3, #4]
60004c56:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60004c58:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
60004c5c:	2300      	movs	r3, #0
60004c5e:	2210      	movs	r2, #16
60004c60:	4628      	mov	r0, r5
60004c62:	f000 fcc5 	bl	600055f0 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60004c66:	682b      	ldr	r3, [r5, #0]
60004c68:	223e      	movs	r2, #62	; 0x3e
60004c6a:	4921      	ldr	r1, [pc, #132]	; (60004cf0 <CrashReportClass::printTo(Print&) const+0x6d0>)
60004c6c:	685b      	ldr	r3, [r3, #4]
60004c6e:	4628      	mov	r0, r5
60004c70:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60004c72:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
60004c76:	2300      	movs	r3, #0
60004c78:	2210      	movs	r2, #16
60004c7a:	4628      	mov	r0, r5
60004c7c:	f000 fcb8 	bl	600055f0 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60004c80:	682b      	ldr	r3, [r5, #0]
60004c82:	221d      	movs	r2, #29
60004c84:	491b      	ldr	r1, [pc, #108]	; (60004cf4 <CrashReportClass::printTo(Print&) const+0x6d4>)
60004c86:	685b      	ldr	r3, [r3, #4]
60004c88:	4628      	mov	r0, r5
60004c8a:	4798      	blx	r3
60004c8c:	e780      	b.n	60004b90 <CrashReportClass::printTo(Print&) const+0x570>
60004c8e:	682b      	ldr	r3, [r5, #0]
60004c90:	2229      	movs	r2, #41	; 0x29
60004c92:	4919      	ldr	r1, [pc, #100]	; (60004cf8 <CrashReportClass::printTo(Print&) const+0x6d8>)
60004c94:	e71e      	b.n	60004ad4 <CrashReportClass::printTo(Print&) const+0x4b4>
60004c96:	682b      	ldr	r3, [r5, #0]
60004c98:	2244      	movs	r2, #68	; 0x44
60004c9a:	4918      	ldr	r1, [pc, #96]	; (60004cfc <CrashReportClass::printTo(Print&) const+0x6dc>)
60004c9c:	e743      	b.n	60004b26 <CrashReportClass::printTo(Print&) const+0x506>
60004c9e:	682b      	ldr	r3, [r5, #0]
60004ca0:	222c      	movs	r2, #44	; 0x2c
60004ca2:	4917      	ldr	r1, [pc, #92]	; (60004d00 <CrashReportClass::printTo(Print&) const+0x6e0>)
60004ca4:	e73f      	b.n	60004b26 <CrashReportClass::printTo(Print&) const+0x506>
60004ca6:	682b      	ldr	r3, [r5, #0]
60004ca8:	2221      	movs	r2, #33	; 0x21
60004caa:	4916      	ldr	r1, [pc, #88]	; (60004d04 <CrashReportClass::printTo(Print&) const+0x6e4>)
60004cac:	e712      	b.n	60004ad4 <CrashReportClass::printTo(Print&) const+0x4b4>
60004cae:	682b      	ldr	r3, [r5, #0]
60004cb0:	2232      	movs	r2, #50	; 0x32
60004cb2:	4915      	ldr	r1, [pc, #84]	; (60004d08 <CrashReportClass::printTo(Print&) const+0x6e8>)
60004cb4:	e773      	b.n	60004b9e <CrashReportClass::printTo(Print&) const+0x57e>
60004cb6:	682b      	ldr	r3, [r5, #0]
60004cb8:	2233      	movs	r2, #51	; 0x33
60004cba:	4914      	ldr	r1, [pc, #80]	; (60004d0c <CrashReportClass::printTo(Print&) const+0x6ec>)
60004cbc:	e733      	b.n	60004b26 <CrashReportClass::printTo(Print&) const+0x506>
60004cbe:	682b      	ldr	r3, [r5, #0]
60004cc0:	223f      	movs	r2, #63	; 0x3f
60004cc2:	4913      	ldr	r1, [pc, #76]	; (60004d10 <CrashReportClass::printTo(Print&) const+0x6f0>)
60004cc4:	e72f      	b.n	60004b26 <CrashReportClass::printTo(Print&) const+0x506>
60004cc6:	682b      	ldr	r3, [r5, #0]
60004cc8:	2225      	movs	r2, #37	; 0x25
60004cca:	4912      	ldr	r1, [pc, #72]	; (60004d14 <CrashReportClass::printTo(Print&) const+0x6f4>)
60004ccc:	e702      	b.n	60004ad4 <CrashReportClass::printTo(Print&) const+0x4b4>
60004cce:	682b      	ldr	r3, [r5, #0]
60004cd0:	2228      	movs	r2, #40	; 0x28
60004cd2:	4911      	ldr	r1, [pc, #68]	; (60004d18 <CrashReportClass::printTo(Print&) const+0x6f8>)
60004cd4:	e763      	b.n	60004b9e <CrashReportClass::printTo(Print&) const+0x57e>
60004cd6:	682b      	ldr	r3, [r5, #0]
60004cd8:	2216      	movs	r2, #22
60004cda:	4910      	ldr	r1, [pc, #64]	; (60004d1c <CrashReportClass::printTo(Print&) const+0x6fc>)
60004cdc:	e75f      	b.n	60004b9e <CrashReportClass::printTo(Print&) const+0x57e>
60004cde:	682b      	ldr	r3, [r5, #0]
60004ce0:	2241      	movs	r2, #65	; 0x41
60004ce2:	490f      	ldr	r1, [pc, #60]	; (60004d20 <CrashReportClass::printTo(Print&) const+0x700>)
60004ce4:	4628      	mov	r0, r5
60004ce6:	685b      	ldr	r3, [r3, #4]
60004ce8:	4798      	blx	r3
60004cea:	e751      	b.n	60004b90 <CrashReportClass::printTo(Print&) const+0x570>
60004cec:	2000b314 	.word	0x2000b314
60004cf0:	2000b334 	.word	0x2000b334
60004cf4:	2000b374 	.word	0x2000b374
60004cf8:	2000b270 	.word	0x2000b270
60004cfc:	2000b42c 	.word	0x2000b42c
60004d00:	2000b3fc 	.word	0x2000b3fc
60004d04:	2000b24c 	.word	0x2000b24c
60004d08:	2000b564 	.word	0x2000b564
60004d0c:	2000b4b4 	.word	0x2000b4b4
60004d10:	2000b474 	.word	0x2000b474
60004d14:	2000b29c 	.word	0x2000b29c
60004d18:	2000b5dc 	.word	0x2000b5dc
60004d1c:	2000b5c4 	.word	0x2000b5c4
60004d20:	2000b394 	.word	0x2000b394

60004d24 <CrashReportClass::operator bool()>:
	if (info->len != sizeof(*info) / 4) return 0;
60004d24:	4b12      	ldr	r3, [pc, #72]	; (60004d70 <CrashReportClass::operator bool()+0x4c>)
60004d26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
60004d2a:	2b0b      	cmp	r3, #11
60004d2c:	d11e      	bne.n	60004d6c <CrashReportClass::operator bool()+0x48>
	crc = 0xFFFFFFFF;
60004d2e:	f04f 32ff 	mov.w	r2, #4294967295
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60004d32:	4810      	ldr	r0, [pc, #64]	; (60004d74 <CrashReportClass::operator bool()+0x50>)
{
60004d34:	b530      	push	{r4, r5, lr}
	data = (uint32_t *)info;
60004d36:	4d10      	ldr	r5, [pc, #64]	; (60004d78 <CrashReportClass::operator bool()+0x54>)
	while (data < end) {
60004d38:	4c10      	ldr	r4, [pc, #64]	; (60004d7c <CrashReportClass::operator bool()+0x58>)
60004d3a:	e001      	b.n	60004d40 <CrashReportClass::operator bool()+0x1c>
		crc ^= *data++;
60004d3c:	686b      	ldr	r3, [r5, #4]
60004d3e:	4675      	mov	r5, lr
60004d40:	f105 0e04 	add.w	lr, r5, #4
60004d44:	405a      	eors	r2, r3
60004d46:	2120      	movs	r1, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60004d48:	f002 0301 	and.w	r3, r2, #1
60004d4c:	3901      	subs	r1, #1
60004d4e:	fb00 f303 	mul.w	r3, r0, r3
60004d52:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
60004d56:	d1f7      	bne.n	60004d48 <CrashReportClass::operator bool()+0x24>
	while (data < end) {
60004d58:	45a6      	cmp	lr, r4
60004d5a:	d1ef      	bne.n	60004d3c <CrashReportClass::operator bool()+0x18>
	if (crc != info->crc) return 0;
60004d5c:	4b04      	ldr	r3, [pc, #16]	; (60004d70 <CrashReportClass::operator bool()+0x4c>)
60004d5e:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
60004d62:	1a80      	subs	r0, r0, r2
60004d64:	fab0 f080 	clz	r0, r0
60004d68:	0940      	lsrs	r0, r0, #5
}
60004d6a:	bd30      	pop	{r4, r5, pc}
	return false;
60004d6c:	2000      	movs	r0, #0
}
60004d6e:	4770      	bx	lr
60004d70:	2027ff00 	.word	0x2027ff00
60004d74:	edb88320 	.word	0xedb88320
60004d78:	2027ff80 	.word	0x2027ff80
60004d7c:	2027ffa8 	.word	0x2027ffa8

60004d80 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
60004d80:	4770      	bx	lr
60004d82:	bf00      	nop

60004d84 <startup_default_middle_hook>:
60004d84:	4770      	bx	lr
60004d86:	bf00      	nop

60004d88 <startup_default_late_hook>:
60004d88:	4770      	bx	lr
60004d8a:	bf00      	nop

60004d8c <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
60004d8c:	bf00      	nop
60004d8e:	4770      	bx	lr

60004d90 <configure_cache>:
{
60004d90:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
60004d92:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60004d96:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60004d98:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60004d9a:	4831      	ldr	r0, [pc, #196]	; (60004e60 <configure_cache+0xd0>)
	SCB_MPU_CTRL = 0; // turn off MPU
60004d9c:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60004da0:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60004da4:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60004da6:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
60004daa:	482e      	ldr	r0, [pc, #184]	; (60004e64 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60004dac:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60004db0:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
60004db2:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60004db6:	482c      	ldr	r0, [pc, #176]	; (60004e68 <configure_cache+0xd8>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60004db8:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60004dbc:	4a2b      	ldr	r2, [pc, #172]	; (60004e6c <configure_cache+0xdc>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60004dbe:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60004dc2:	4c2b      	ldr	r4, [pc, #172]	; (60004e70 <configure_cache+0xe0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60004dc4:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60004dc8:	482a      	ldr	r0, [pc, #168]	; (60004e74 <configure_cache+0xe4>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60004dca:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60004dce:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60004dd2:	4c29      	ldr	r4, [pc, #164]	; (60004e78 <configure_cache+0xe8>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60004dd4:	4829      	ldr	r0, [pc, #164]	; (60004e7c <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60004dd6:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60004dda:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60004dde:	4c28      	ldr	r4, [pc, #160]	; (60004e80 <configure_cache+0xf0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60004de0:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60004de4:	4827      	ldr	r0, [pc, #156]	; (60004e84 <configure_cache+0xf4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60004de6:	4a28      	ldr	r2, [pc, #160]	; (60004e88 <configure_cache+0xf8>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60004de8:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60004dec:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60004df0:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60004df4:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60004df8:	4c24      	ldr	r4, [pc, #144]	; (60004e8c <configure_cache+0xfc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60004dfa:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60004dfc:	4824      	ldr	r0, [pc, #144]	; (60004e90 <configure_cache+0x100>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60004dfe:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60004e02:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60004e06:	4a23      	ldr	r2, [pc, #140]	; (60004e94 <configure_cache+0x104>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60004e08:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60004e0c:	4c22      	ldr	r4, [pc, #136]	; (60004e98 <configure_cache+0x108>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60004e0e:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60004e12:	f102 6240 	add.w	r2, r2, #201326592	; 0xc000000
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60004e16:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
60004e1a:	4820      	ldr	r0, [pc, #128]	; (60004e9c <configure_cache+0x10c>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60004e1c:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
60004e20:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
60004e22:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
60004e26:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	asm("nop"); // allow a few cycles for bus writes before enable MPU
60004e2a:	bf00      	nop
	asm("nop");
60004e2c:	bf00      	nop
	asm("nop");
60004e2e:	bf00      	nop
	asm("nop");
60004e30:	bf00      	nop
	asm("nop");
60004e32:	bf00      	nop
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60004e34:	2201      	movs	r2, #1
60004e36:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
60004e3a:	f3bf 8f4f 	dsb	sy
	asm("isb");
60004e3e:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60004e42:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
60004e46:	f3bf 8f4f 	dsb	sy
	asm("isb");
60004e4a:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60004e4e:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
60004e52:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60004e56:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
60004e5a:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
60004e5e:	4770      	bx	lr
60004e60:	1000003f 	.word	0x1000003f
60004e64:	07080025 	.word	0x07080025
60004e68:	00100009 	.word	0x00100009
60004e6c:	2005e580 	.word	0x2005e580
60004e70:	00200013 	.word	0x00200013
60004e74:	07020021 	.word	0x07020021
60004e78:	20000014 	.word	0x20000014
60004e7c:	13080025 	.word	0x13080025
60004e80:	10000009 	.word	0x10000009
60004e84:	20200016 	.word	0x20200016
60004e88:	130b0027 	.word	0x130b0027
60004e8c:	40000017 	.word	0x40000017
60004e90:	60000018 	.word	0x60000018
60004e94:	070b002f 	.word	0x070b002f
60004e98:	70000019 	.word	0x70000019
60004e9c:	8000001a 	.word	0x8000001a

60004ea0 <configure_external_ram>:
{
60004ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60004ea2:	4bb8      	ldr	r3, [pc, #736]	; (60005184 <configure_external_ram+0x2e4>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60004ea4:	2218      	movs	r2, #24
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60004ea6:	4eb8      	ldr	r6, [pc, #736]	; (60005188 <configure_external_ram+0x2e8>)
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60004ea8:	2001      	movs	r0, #1
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60004eaa:	4fb8      	ldr	r7, [pc, #736]	; (6000518c <configure_external_ram+0x2ec>)
{
60004eac:	b083      	sub	sp, #12
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60004eae:	f8c3 625c 	str.w	r6, [r3, #604]	; 0x25c
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60004eb2:	49b7      	ldr	r1, [pc, #732]	; (60005190 <configure_external_ram+0x2f0>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60004eb4:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60004eb8:	4db6      	ldr	r5, [pc, #728]	; (60005194 <configure_external_ram+0x2f4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60004eba:	f8c3 6264 	str.w	r6, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60004ebe:	f5a6 4630 	sub.w	r6, r6, #45056	; 0xb000
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60004ec2:	4cb5      	ldr	r4, [pc, #724]	; (60005198 <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60004ec4:	f8c3 6268 	str.w	r6, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60004ec8:	f8c3 526c 	str.w	r5, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60004ecc:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60004ed0:	f8c3 5274 	str.w	r5, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60004ed4:	f8c3 5278 	str.w	r5, [r3, #632]	; 0x278
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60004ed8:	f248 750c 	movw	r5, #34572	; 0x870c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60004edc:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
60004ede:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
60004ee0:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
60004ee2:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
60004ee4:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
60004ee6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
60004eea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
60004eee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60004ef2:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60004ef6:	4aa9      	ldr	r2, [pc, #676]	; (6000519c <configure_external_ram+0x2fc>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
60004ef8:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
60004efc:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
60004f00:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
60004f04:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60004f08:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60004f0c:	69a1      	ldr	r1, [r4, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60004f0e:	4ba4      	ldr	r3, [pc, #656]	; (600051a0 <configure_external_ram+0x300>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60004f10:	400a      	ands	r2, r1
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60004f12:	48a4      	ldr	r0, [pc, #656]	; (600051a4 <configure_external_ram+0x304>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60004f14:	49a4      	ldr	r1, [pc, #656]	; (600051a8 <configure_external_ram+0x308>)
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60004f16:	4313      	orrs	r3, r2
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60004f18:	4aa4      	ldr	r2, [pc, #656]	; (600051ac <configure_external_ram+0x30c>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60004f1a:	61a3      	str	r3, [r4, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60004f1c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
60004f20:	f043 030c 	orr.w	r3, r3, #12
60004f24:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60004f28:	f04f 34ff 	mov.w	r4, #4294967295
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60004f2c:	6803      	ldr	r3, [r0, #0]
60004f2e:	f043 0302 	orr.w	r3, r3, #2
60004f32:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60004f34:	6803      	ldr	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60004f36:	402b      	ands	r3, r5
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60004f38:	f44f 5500 	mov.w	r5, #8192	; 0x2000
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60004f3c:	431a      	orrs	r2, r3
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60004f3e:	4b9c      	ldr	r3, [pc, #624]	; (600051b0 <configure_external_ram+0x310>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60004f40:	6002      	str	r2, [r0, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60004f42:	6044      	str	r4, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60004f44:	688a      	ldr	r2, [r1, #8]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60004f46:	4c9b      	ldr	r4, [pc, #620]	; (600051b4 <configure_external_ram+0x314>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60004f48:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60004f4a:	4a9b      	ldr	r2, [pc, #620]	; (600051b8 <configure_external_ram+0x318>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60004f4c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60004f50:	6083      	str	r3, [r0, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
60004f52:	68c3      	ldr	r3, [r0, #12]
60004f54:	f023 0378 	bic.w	r3, r3, #120	; 0x78
60004f58:	60c3      	str	r3, [r0, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60004f5a:	6a03      	ldr	r3, [r0, #32]
60004f5c:	4013      	ands	r3, r2
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60004f5e:	4323      	orrs	r3, r4
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60004f60:	6203      	str	r3, [r0, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60004f62:	6a03      	ldr	r3, [r0, #32]
60004f64:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60004f66:	4a95      	ldr	r2, [pc, #596]	; (600051bc <configure_external_ram+0x31c>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60004f68:	4323      	orrs	r3, r4
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60004f6a:	4c95      	ldr	r4, [pc, #596]	; (600051c0 <configure_external_ram+0x320>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60004f6c:	6243      	str	r3, [r0, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60004f6e:	6282      	str	r2, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
60004f70:	62c2      	str	r2, [r0, #44]	; 0x2c
	FLEXSPI2_INTEN = 0;
60004f72:	2200      	movs	r2, #0
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60004f74:	f8d1 30b8 	ldr.w	r3, [r1, #184]	; 0xb8
60004f78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
60004f7c:	f043 0301 	orr.w	r3, r3, #1
60004f80:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60004f84:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60004f88:	498e      	ldr	r1, [pc, #568]	; (600051c4 <configure_external_ram+0x324>)
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60004f8a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
60004f8e:	f043 0301 	orr.w	r3, r3, #1
60004f92:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60004f96:	f240 6305 	movw	r3, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
60004f9a:	6102      	str	r2, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60004f9c:	6605      	str	r5, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60004f9e:	6704      	str	r4, [r0, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60004fa0:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60004fa4:	6645      	str	r5, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60004fa6:	6744      	str	r4, [r0, #116]	; 0x74
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60004fa8:	2402      	movs	r4, #2
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60004faa:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
60004fae:	6803      	ldr	r3, [r0, #0]
60004fb0:	f023 0302 	bic.w	r3, r3, #2
60004fb4:	6003      	str	r3, [r0, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60004fb6:	6181      	str	r1, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60004fb8:	4b83      	ldr	r3, [pc, #524]	; (600051c8 <configure_external_ram+0x328>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
60004fba:	4984      	ldr	r1, [pc, #528]	; (600051cc <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60004fbc:	61c4      	str	r4, [r0, #28]
	for (int i=0; i < 64; i++) luttable[i] = 0;
60004fbe:	f843 2b04 	str.w	r2, [r3], #4
60004fc2:	428b      	cmp	r3, r1
60004fc4:	d1fb      	bne.n	60004fbe <configure_external_ram+0x11e>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
60004fc6:	4a77      	ldr	r2, [pc, #476]	; (600051a4 <configure_external_ram+0x304>)
60004fc8:	6813      	ldr	r3, [r2, #0]
60004fca:	f043 0301 	orr.w	r3, r3, #1
60004fce:	6013      	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
60004fd0:	6813      	ldr	r3, [r2, #0]
60004fd2:	f013 0301 	ands.w	r3, r3, #1
60004fd6:	d1fb      	bne.n	60004fd0 <configure_external_ram+0x130>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60004fd8:	487a      	ldr	r0, [pc, #488]	; (600051c4 <configure_external_ram+0x324>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60004fda:	2102      	movs	r1, #2
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60004fdc:	f240 64f5 	movw	r4, #1781	; 0x6f5
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60004fe0:	6190      	str	r0, [r2, #24]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60004fe2:	f240 4099 	movw	r0, #1177	; 0x499
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60004fe6:	61d1      	str	r1, [r2, #28]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60004fe8:	f240 4166 	movw	r1, #1126	; 0x466
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60004fec:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60004ff0:	f242 4401 	movw	r4, #9217	; 0x2401
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60004ff4:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60004ff8:	4975      	ldr	r1, [pc, #468]	; (600051d0 <configure_external_ram+0x330>)
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60004ffa:	f8c2 0220 	str.w	r0, [r2, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60004ffe:	f8c2 1230 	str.w	r1, [r2, #560]	; 0x230
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60005002:	f240 4135 	movw	r1, #1077	; 0x435
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60005006:	4873      	ldr	r0, [pc, #460]	; (600051d4 <configure_external_ram+0x334>)
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60005008:	f8c2 4234 	str.w	r4, [r2, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
6000500c:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60005010:	4c71      	ldr	r4, [pc, #452]	; (600051d8 <configure_external_ram+0x338>)
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60005012:	f8c2 0250 	str.w	r0, [r2, #592]	; 0x250
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60005016:	f242 2001 	movw	r0, #8705	; 0x2201
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
6000501a:	4970      	ldr	r1, [pc, #448]	; (600051dc <configure_external_ram+0x33c>)
6000501c:	f8c2 1254 	str.w	r1, [r2, #596]	; 0x254
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60005020:	2101      	movs	r1, #1
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60005022:	f8c2 4260 	str.w	r4, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60005026:	f8c2 0264 	str.w	r0, [r2, #612]	; 0x264
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000502a:	485e      	ldr	r0, [pc, #376]	; (600051a4 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
6000502c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60005030:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60005034:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60005038:	6943      	ldr	r3, [r0, #20]
6000503a:	07da      	lsls	r2, r3, #31
6000503c:	d5fc      	bpl.n	60005038 <configure_external_ram+0x198>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000503e:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60005040:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60005042:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60005046:	4957      	ldr	r1, [pc, #348]	; (600051a4 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60005048:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
6000504a:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000504e:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60005052:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60005056:	694b      	ldr	r3, [r1, #20]
60005058:	07db      	lsls	r3, r3, #31
6000505a:	d5fc      	bpl.n	60005056 <configure_external_ram+0x1b6>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000505c:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
6000505e:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60005060:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60005064:	4a4f      	ldr	r2, [pc, #316]	; (600051a4 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60005066:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60005068:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000506c:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60005070:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60005074:	6953      	ldr	r3, [r2, #20]
60005076:	07df      	lsls	r7, r3, #31
60005078:	d5fc      	bpl.n	60005074 <configure_external_ram+0x1d4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000507a:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
6000507c:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
6000507e:	4858      	ldr	r0, [pc, #352]	; (600051e0 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60005080:	4948      	ldr	r1, [pc, #288]	; (600051a4 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60005082:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60005084:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60005088:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000508c:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60005090:	694b      	ldr	r3, [r1, #20]
60005092:	07de      	lsls	r6, r3, #31
60005094:	d5fc      	bpl.n	60005090 <configure_external_ram+0x1f0>
	uint32_t id = FLEXSPI2_RFDR0;
60005096:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
	if (flexspi2_psram_id(0) == 0x5D0D) {
6000509a:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
6000509e:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
600050a0:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600050a2:	6148      	str	r0, [r1, #20]
	if (flexspi2_psram_id(0) == 0x5D0D) {
600050a4:	4293      	cmp	r3, r2
600050a6:	d165      	bne.n	60005174 <configure_external_ram+0x2d4>
	FLEXSPI2_IPCR0 = addr;
600050a8:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600050aa:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600050ae:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600050b0:	483c      	ldr	r0, [pc, #240]	; (600051a4 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
600050b2:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600050b6:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600050ba:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600050be:	6943      	ldr	r3, [r0, #20]
600050c0:	07dd      	lsls	r5, r3, #31
600050c2:	d5fc      	bpl.n	600050be <configure_external_ram+0x21e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600050c4:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600050c6:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600050ca:	2100      	movs	r1, #0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600050cc:	4a35      	ldr	r2, [pc, #212]	; (600051a4 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600050ce:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
600050d0:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600050d4:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600050d8:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600050dc:	6953      	ldr	r3, [r2, #20]
600050de:	07dc      	lsls	r4, r3, #31
600050e0:	d5fc      	bpl.n	600050dc <configure_external_ram+0x23c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600050e2:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600050e4:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600050e8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600050ec:	492d      	ldr	r1, [pc, #180]	; (600051a4 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600050ee:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
600050f0:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600050f4:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600050f8:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600050fc:	694b      	ldr	r3, [r1, #20]
600050fe:	07d8      	lsls	r0, r3, #31
60005100:	d5fc      	bpl.n	600050fc <configure_external_ram+0x25c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60005102:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60005104:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60005108:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000510c:	4a25      	ldr	r2, [pc, #148]	; (600051a4 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000510e:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60005110:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60005114:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60005118:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000511c:	6953      	ldr	r3, [r2, #20]
6000511e:	07d9      	lsls	r1, r3, #31
60005120:	d5fc      	bpl.n	6000511c <configure_external_ram+0x27c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60005122:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60005124:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60005128:	482d      	ldr	r0, [pc, #180]	; (600051e0 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000512a:	491e      	ldr	r1, [pc, #120]	; (600051a4 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000512c:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
6000512e:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60005132:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60005136:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000513a:	694b      	ldr	r3, [r1, #20]
6000513c:	07da      	lsls	r2, r3, #31
6000513e:	d5fc      	bpl.n	6000513a <configure_external_ram+0x29a>
	uint32_t id = FLEXSPI2_RFDR0;
60005140:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60005144:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60005148:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
6000514a:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
6000514c:	6148      	str	r0, [r1, #20]
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
6000514e:	4293      	cmp	r3, r2
60005150:	d050      	beq.n	600051f4 <configure_external_ram+0x354>
60005152:	2508      	movs	r5, #8
60005154:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
			external_psram_size * 0x100000 -
60005158:	4922      	ldr	r1, [pc, #136]	; (600051e4 <configure_external_ram+0x344>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
6000515a:	2000      	movs	r0, #0
			external_psram_size * 0x100000 -
6000515c:	4b22      	ldr	r3, [pc, #136]	; (600051e8 <configure_external_ram+0x348>)
			external_psram_size = 16;
6000515e:	4a23      	ldr	r2, [pc, #140]	; (600051ec <configure_external_ram+0x34c>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60005160:	9000      	str	r0, [sp, #0]
			external_psram_size = 16;
60005162:	7015      	strb	r5, [r2, #0]
			external_psram_size * 0x100000 -
60005164:	1a5a      	subs	r2, r3, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60005166:	2301      	movs	r3, #1
60005168:	4821      	ldr	r0, [pc, #132]	; (600051f0 <configure_external_ram+0x350>)
6000516a:	4422      	add	r2, r4
6000516c:	f000 fa18 	bl	600055a0 <__sm_set_pool_veneer>
}
60005170:	b003      	add	sp, #12
60005172:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60005174:	4b1e      	ldr	r3, [pc, #120]	; (600051f0 <configure_external_ram+0x350>)
60005176:	2200      	movs	r2, #0
60005178:	e9c3 2200 	strd	r2, r2, [r3]
6000517c:	e9c3 2202 	strd	r2, r2, [r3, #8]
}
60005180:	b003      	add	sp, #12
60005182:	bdf0      	pop	{r4, r5, r6, r7, pc}
60005184:	401f8000 	.word	0x401f8000
60005188:	0001b0f9 	.word	0x0001b0f9
6000518c:	000110f9 	.word	0x000110f9
60005190:	401f8400 	.word	0x401f8400
60005194:	000170f9 	.word	0x000170f9
60005198:	400fc000 	.word	0x400fc000
6000519c:	1ffffcff 	.word	0x1ffffcff
600051a0:	a0000300 	.word	0xa0000300
600051a4:	402a4000 	.word	0x402a4000
600051a8:	402a8000 	.word	0x402a8000
600051ac:	ffff0012 	.word	0xffff0012
600051b0:	00f737ff 	.word	0x00f737ff
600051b4:	80000040 	.word	0x80000040
600051b8:	7cf0ff00 	.word	0x7cf0ff00
600051bc:	830f00ff 	.word	0x830f00ff
600051c0:	00020063 	.word	0x00020063
600051c4:	5af05af0 	.word	0x5af05af0
600051c8:	402a4200 	.word	0x402a4200
600051cc:	402a4300 	.word	0x402a4300
600051d0:	3018049f 	.word	0x3018049f
600051d4:	0a1806eb 	.word	0x0a1806eb
600051d8:	0a180638 	.word	0x0a180638
600051dc:	26013206 	.word	0x26013206
600051e0:	00030004 	.word	0x00030004
600051e4:	70000000 	.word	0x70000000
600051e8:	70000000 	.word	0x70000000
600051ec:	2005e545 	.word	0x2005e545
600051f0:	2005e3fc 	.word	0x2005e3fc
	FLEXSPI2_IPCR0 = addr;
600051f4:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600051f8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600051fc:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600051fe:	4808      	ldr	r0, [pc, #32]	; (60005220 <configure_external_ram+0x380>)
	FLEXSPI2_IPCR0 = addr;
60005200:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60005204:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60005208:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000520c:	6943      	ldr	r3, [r0, #20]
6000520e:	07db      	lsls	r3, r3, #31
60005210:	d5fc      	bpl.n	6000520c <configure_external_ram+0x36c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60005212:	2301      	movs	r3, #1
60005214:	2510      	movs	r5, #16
60005216:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
6000521a:	6143      	str	r3, [r0, #20]
			external_psram_size = 16;
6000521c:	e79c      	b.n	60005158 <configure_external_ram+0x2b8>
6000521e:	bf00      	nop
60005220:	402a4000 	.word	0x402a4000

60005224 <usb_pll_start>:
{
60005224:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60005226:	4a15      	ldr	r2, [pc, #84]	; (6000527c <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60005228:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
6000522a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
6000522e:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60005232:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60005236:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
6000523a:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000523e:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60005240:	f013 0f02 	tst.w	r3, #2
60005244:	d10e      	bne.n	60005264 <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60005246:	f413 5f00 	tst.w	r3, #8192	; 0x2000
6000524a:	d00f      	beq.n	6000526c <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
6000524c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60005250:	d00e      	beq.n	60005270 <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60005252:	2b00      	cmp	r3, #0
60005254:	daf3      	bge.n	6000523e <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60005256:	f413 3f80 	tst.w	r3, #65536	; 0x10000
6000525a:	d10b      	bne.n	60005274 <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
6000525c:	065b      	lsls	r3, r3, #25
6000525e:	d50b      	bpl.n	60005278 <usb_pll_start+0x54>
}
60005260:	bcf0      	pop	{r4, r5, r6, r7}
60005262:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60005264:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60005266:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60005268:	6190      	str	r0, [r2, #24]
			continue;
6000526a:	e7e8      	b.n	6000523e <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000526c:	6155      	str	r5, [r2, #20]
			continue;
6000526e:	e7e6      	b.n	6000523e <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60005270:	6156      	str	r6, [r2, #20]
			continue;
60005272:	e7e4      	b.n	6000523e <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60005274:	6191      	str	r1, [r2, #24]
			continue;
60005276:	e7e2      	b.n	6000523e <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60005278:	6157      	str	r7, [r2, #20]
			continue;
6000527a:	e7e0      	b.n	6000523e <usb_pll_start+0x1a>
6000527c:	400d8000 	.word	0x400d8000

60005280 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60005280:	4a3f      	ldr	r2, [pc, #252]	; (60005380 <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60005282:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60005284:	493f      	ldr	r1, [pc, #252]	; (60005384 <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60005286:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000528a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
6000528e:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60005292:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 60005388 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60005296:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000529a:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 6000538c <tempmon_init+0x10c>
{
6000529e:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600052a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600052a4:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
600052a8:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600052ac:	4d38      	ldr	r5, [pc, #224]	; (60005390 <tempmon_init+0x110>)
600052ae:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600052b0:	4c38      	ldr	r4, [pc, #224]	; (60005394 <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600052b2:	4839      	ldr	r0, [pc, #228]	; (60005398 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600052b4:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600052b6:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
600052ba:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600052bc:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600052c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
600052c4:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
600052c8:	ee07 1a10 	vmov	s14, r1
600052cc:	4b33      	ldr	r3, [pc, #204]	; (6000539c <tempmon_init+0x11c>)
600052ce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600052d2:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
600052d4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600052d8:	4931      	ldr	r1, [pc, #196]	; (600053a0 <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600052da:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600052de:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
600052e2:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600052e6:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600052ea:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
600052ee:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600052f2:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600052f6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600052fa:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600052fe:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60005302:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60005306:	4827      	ldr	r0, [pc, #156]	; (600053a4 <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60005308:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000530c:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60005310:	ee75 5a87 	vadd.f32	s11, s11, s14
60005314:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60005318:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000531c:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60005320:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60005324:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60005328:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000532c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60005330:	ee16 3a10 	vmov	r3, s12
60005334:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60005338:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000533c:	ea01 4103 	and.w	r1, r1, r3, lsl #16
60005340:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60005342:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60005346:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000534a:	f3c3 030b 	ubfx	r3, r3, #0, #12
6000534e:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
60005352:	430b      	orrs	r3, r1
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60005354:	4914      	ldr	r1, [pc, #80]	; (600053a8 <tempmon_init+0x128>)
60005356:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
6000535a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
6000535e:	f043 0302 	orr.w	r3, r3, #2
60005362:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
60005366:	4b11      	ldr	r3, [pc, #68]	; (600053ac <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60005368:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
6000536c:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60005370:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60005374:	2201      	movs	r2, #1
}
60005376:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60005378:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
6000537c:	4770      	bx	lr
6000537e:	bf00      	nop
60005380:	400d8100 	.word	0x400d8100
60005384:	401f4400 	.word	0x401f4400
60005388:	42aa0000 	.word	0x42aa0000
6000538c:	42b40000 	.word	0x42b40000
60005390:	2005e468 	.word	0x2005e468
60005394:	2005e464 	.word	0x2005e464
60005398:	2005e46c 	.word	0x2005e46c
6000539c:	2005e470 	.word	0x2005e470
600053a0:	0fff0000 	.word	0x0fff0000
600053a4:	e000e400 	.word	0xe000e400
600053a8:	2000cc00 	.word	0x2000cc00
600053ac:	0000d901 	.word	0x0000d901

600053b0 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600053b0:	4b31      	ldr	r3, [pc, #196]	; (60005478 <usb_init+0xc8>)
600053b2:	f640 7261 	movw	r2, #3937	; 0xf61
{
600053b6:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600053b8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600053bc:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
600053c0:	f000 f8fa 	bl	600055b8 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600053c4:	4a2d      	ldr	r2, [pc, #180]	; (6000547c <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
600053c6:	492e      	ldr	r1, [pc, #184]	; (60005480 <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600053c8:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600053cc:	482d      	ldr	r0, [pc, #180]	; (60005484 <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600053ce:	f043 0303 	orr.w	r3, r3, #3
600053d2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600053d6:	4b2c      	ldr	r3, [pc, #176]	; (60005488 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
600053d8:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600053dc:	6802      	ldr	r2, [r0, #0]
600053de:	421a      	tst	r2, r3
600053e0:	d103      	bne.n	600053ea <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
600053e2:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
600053e6:	079a      	lsls	r2, r3, #30
600053e8:	d01b      	beq.n	60005422 <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600053ea:	4a25      	ldr	r2, [pc, #148]	; (60005480 <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600053ec:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
600053f0:	4b24      	ldr	r3, [pc, #144]	; (60005484 <usb_init+0xd4>)
600053f2:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600053f4:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
600053f8:	f043 0302 	orr.w	r3, r3, #2
600053fc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60005400:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60005404:	079b      	lsls	r3, r3, #30
60005406:	d4fb      	bmi.n	60005400 <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60005408:	f44f 3000 	mov.w	r0, #131072	; 0x20000
6000540c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60005410:	4b1c      	ldr	r3, [pc, #112]	; (60005484 <usb_init+0xd4>)
60005412:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
60005416:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
6000541a:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
6000541c:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
6000541e:	f000 f95b 	bl	600056d8 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60005422:	4a18      	ldr	r2, [pc, #96]	; (60005484 <usb_init+0xd4>)
60005424:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60005428:	4c15      	ldr	r4, [pc, #84]	; (60005480 <usb_init+0xd0>)
	USBPHY1_PWD = 0;
6000542a:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000542c:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
6000542e:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60005430:	4b16      	ldr	r3, [pc, #88]	; (6000548c <usb_init+0xdc>)
	USBPHY1_PWD = 0;
60005432:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60005434:	f44f 7220 	mov.w	r2, #640	; 0x280
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60005438:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000543c:	4618      	mov	r0, r3
6000543e:	f000 f88f 	bl	60005560 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
60005442:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60005446:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60005448:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000544c:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60005450:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60005452:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
60005456:	641a      	str	r2, [r3, #64]	; 0x40
60005458:	4b0d      	ldr	r3, [pc, #52]	; (60005490 <usb_init+0xe0>)
6000545a:	4a0e      	ldr	r2, [pc, #56]	; (60005494 <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000545c:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
60005460:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60005464:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60005468:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
6000546c:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000546e:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
60005472:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60005476:	bd10      	pop	{r4, pc}
60005478:	400d8000 	.word	0x400d8000
6000547c:	400fc000 	.word	0x400fc000
60005480:	402e0000 	.word	0x402e0000
60005484:	400d9000 	.word	0x400d9000
60005488:	001e1c00 	.word	0x001e1c00
6000548c:	20000000 	.word	0x20000000
60005490:	2000cc00 	.word	0x2000cc00
60005494:	0000dae9 	.word	0x0000dae9

60005498 <_reboot_Teensyduino_>:


FLASHMEM __attribute__((noinline)) void _reboot_Teensyduino_(void)
{
60005498:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
6000549a:	4b0e      	ldr	r3, [pc, #56]	; (600054d4 <_reboot_Teensyduino_+0x3c>)
6000549c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
6000549e:	079b      	lsls	r3, r3, #30
600054a0:	d400      	bmi.n	600054a4 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
600054a2:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
600054a4:	b672      	cpsid	i
		USB1_USBCMD = 0;
600054a6:	4b0c      	ldr	r3, [pc, #48]	; (600054d8 <_reboot_Teensyduino_+0x40>)
600054a8:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
600054aa:	4a0c      	ldr	r2, [pc, #48]	; (600054dc <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
600054ac:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
600054b0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
600054b4:	490a      	ldr	r1, [pc, #40]	; (600054e0 <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
600054b6:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
600054ba:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
600054bc:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
600054be:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
600054c2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
600054c6:	4807      	ldr	r0, [pc, #28]	; (600054e4 <_reboot_Teensyduino_+0x4c>)
600054c8:	4a07      	ldr	r2, [pc, #28]	; (600054e8 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
600054ca:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
600054cc:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
600054ce:	689b      	ldr	r3, [r3, #8]
600054d0:	4798      	blx	r3
	}
	__builtin_unreachable();
600054d2:	bf00      	nop
600054d4:	401f4400 	.word	0x401f4400
600054d8:	402e0000 	.word	0x402e0000
600054dc:	400ac000 	.word	0x400ac000
600054e0:	00200003 	.word	0x00200003
600054e4:	20208000 	.word	0x20208000
600054e8:	eb120000 	.word	0xeb120000

600054ec <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600054ec:	4b10      	ldr	r3, [pc, #64]	; (60005530 <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600054ee:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600054f0:	4a10      	ldr	r2, [pc, #64]	; (60005534 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600054f2:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
600054f4:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
600054f8:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600054fa:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600054fc:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60005500:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60005502:	f441 7140 	orr.w	r1, r1, #768	; 0x300
60005506:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60005508:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
6000550a:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
6000550c:	6c93      	ldr	r3, [r2, #72]	; 0x48
6000550e:	061b      	lsls	r3, r3, #24
60005510:	d4fc      	bmi.n	6000550c <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60005512:	4a09      	ldr	r2, [pc, #36]	; (60005538 <analog_init+0x4c>)
60005514:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60005518:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
6000551a:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
6000551c:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
6000551e:	6c93      	ldr	r3, [r2, #72]	; 0x48
60005520:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60005524:	d1fb      	bne.n	6000551e <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
60005526:	4a05      	ldr	r2, [pc, #20]	; (6000553c <analog_init+0x50>)
60005528:	7013      	strb	r3, [r2, #0]
}
6000552a:	f85d 4b04 	ldr.w	r4, [sp], #4
6000552e:	4770      	bx	lr
60005530:	400fc000 	.word	0x400fc000
60005534:	400c4000 	.word	0x400c4000
60005538:	400c8000 	.word	0x400c8000
6000553c:	2005e542 	.word	0x2005e542

60005540 <_init>:
60005540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60005542:	bf00      	nop
60005544:	bcf8      	pop	{r3, r4, r5, r6, r7}
60005546:	bc08      	pop	{r3}
60005548:	469e      	mov	lr, r3
6000554a:	4770      	bx	lr
6000554c:	0000      	movs	r0, r0
	...

60005550 <___ZN9ExFatFile5mkdirEPS_PKcb_veneer>:
60005550:	f85f f000 	ldr.w	pc, [pc]	; 60005554 <___ZN9ExFatFile5mkdirEPS_PKcb_veneer+0x4>
60005554:	00005d39 	.word	0x00005d39

60005558 <__free_veneer>:
60005558:	f85f f000 	ldr.w	pc, [pc]	; 6000555c <__free_veneer+0x4>
6000555c:	0000f0ed 	.word	0x0000f0ed

60005560 <__memset_veneer>:
60005560:	f85f f000 	ldr.w	pc, [pc]	; 60005564 <__memset_veneer+0x4>
60005564:	00010fb5 	.word	0x00010fb5

60005568 <___ZN10FsBaseFile5closeEv_veneer>:
60005568:	f85f f000 	ldr.w	pc, [pc]	; 6000556c <___ZN10FsBaseFile5closeEv_veneer+0x4>
6000556c:	000097f5 	.word	0x000097f5

60005570 <___Z15SendMsgPrintflnPKcz_veneer>:
60005570:	f85f f000 	ldr.w	pc, [pc]	; 60005574 <___Z15SendMsgPrintflnPKcz_veneer+0x4>
60005574:	000029d9 	.word	0x000029d9

60005578 <___Z8DoC64IRQv_veneer>:
60005578:	f85f f000 	ldr.w	pc, [pc]	; 6000557c <___Z8DoC64IRQv_veneer+0x4>
6000557c:	000044d9 	.word	0x000044d9

60005580 <__atol_veneer>:
60005580:	f85f f000 	ldr.w	pc, [pc]	; 60005584 <__atol_veneer+0x4>
60005584:	0000f045 	.word	0x0000f045

60005588 <__strlen_veneer>:
60005588:	f85f f000 	ldr.w	pc, [pc]	; 6000558c <__strlen_veneer+0x4>
6000558c:	00011901 	.word	0x00011901

60005590 <__strncat_veneer>:
60005590:	f85f f000 	ldr.w	pc, [pc]	; 60005594 <__strncat_veneer+0x4>
60005594:	000111b9 	.word	0x000111b9

60005598 <___ZN5Print5printEl_veneer>:
60005598:	f85f f000 	ldr.w	pc, [pc]	; 6000559c <___ZN5Print5printEl_veneer+0x4>
6000559c:	0000c759 	.word	0x0000c759

600055a0 <__sm_set_pool_veneer>:
600055a0:	f85f f000 	ldr.w	pc, [pc]	; 600055a4 <__sm_set_pool_veneer+0x4>
600055a4:	0000ecb9 	.word	0x0000ecb9

600055a8 <___ZN7FatFile4readEPvj_veneer>:
600055a8:	f85f f000 	ldr.w	pc, [pc]	; 600055ac <___ZN7FatFile4readEPvj_veneer+0x4>
600055ac:	0000767d 	.word	0x0000767d

600055b0 <__tempmonGetTemp_veneer>:
600055b0:	f85f f000 	ldr.w	pc, [pc]	; 600055b4 <__tempmonGetTemp_veneer+0x4>
600055b4:	0000d905 	.word	0x0000d905

600055b8 <__usb_init_serialnumber_veneer>:
600055b8:	f85f f000 	ldr.w	pc, [pc]	; 600055bc <__usb_init_serialnumber_veneer+0x4>
600055bc:	0000e259 	.word	0x0000e259

600055c0 <___ZN7FatFile6removeEv_veneer>:
600055c0:	f85f f000 	ldr.w	pc, [pc]	; 600055c4 <___ZN7FatFile6removeEv_veneer+0x4>
600055c4:	000087e1 	.word	0x000087e1

600055c8 <___ZN7FatFile4openEP9FatVolumePKci_veneer>:
600055c8:	f85f f000 	ldr.w	pc, [pc]	; 600055cc <___ZN7FatFile4openEP9FatVolumePKci_veneer+0x4>
600055cc:	000075d5 	.word	0x000075d5

600055d0 <__memcpy_veneer>:
600055d0:	f85f f000 	ldr.w	pc, [pc]	; 600055d4 <__memcpy_veneer+0x4>
600055d4:	0000d551 	.word	0x0000d551

600055d8 <___ZN9ExFatFile8getName8EPcj_veneer>:
600055d8:	f85f f000 	ldr.w	pc, [pc]	; 600055dc <___ZN9ExFatFile8getName8EPcj_veneer+0x4>
600055dc:	000069f1 	.word	0x000069f1

600055e0 <___ZN9ExFatFile6removeEv_veneer>:
600055e0:	f85f f000 	ldr.w	pc, [pc]	; 600055e4 <___ZN9ExFatFile6removeEv_veneer+0x4>
600055e4:	000058d9 	.word	0x000058d9

600055e8 <__sprintf_veneer>:
600055e8:	f85f f000 	ldr.w	pc, [pc]	; 600055ec <__sprintf_veneer+0x4>
600055ec:	00010c31 	.word	0x00010c31

600055f0 <___ZN5Print11printNumberEmhh_veneer>:
600055f0:	f85f f000 	ldr.w	pc, [pc]	; 600055f4 <___ZN5Print11printNumberEmhh_veneer+0x4>
600055f4:	0000c7c5 	.word	0x0000c7c5

600055f8 <___ZN9ExFatFile5writeEPKvj_veneer>:
600055f8:	f85f f000 	ldr.w	pc, [pc]	; 600055fc <___ZN9ExFatFile5writeEPKvj_veneer+0x4>
600055fc:	0000606d 	.word	0x0000606d

60005600 <____libc_init_array_veneer>:
60005600:	f85f f000 	ldr.w	pc, [pc]	; 60005604 <____libc_init_array_veneer+0x4>
60005604:	0001145d 	.word	0x0001145d

60005608 <___ZN5Print6printfEPKcz_veneer>:
60005608:	f85f f000 	ldr.w	pc, [pc]	; 6000560c <___ZN5Print6printfEPKcz_veneer+0x4>
6000560c:	0000c7a9 	.word	0x0000c7a9

60005610 <__set_arm_clock_veneer>:
60005610:	f85f f000 	ldr.w	pc, [pc]	; 60005614 <__set_arm_clock_veneer+0x4>
60005614:	0000cb4d 	.word	0x0000cb4d

60005618 <___ZN7FatFile5mkdirEPS_PKcb_veneer>:
60005618:	f85f f000 	ldr.w	pc, [pc]	; 6000561c <___ZN7FatFile5mkdirEPS_PKcb_veneer+0x4>
6000561c:	000073e5 	.word	0x000073e5

60005620 <__malloc_veneer>:
60005620:	f85f f000 	ldr.w	pc, [pc]	; 60005624 <__malloc_veneer+0x4>
60005624:	0000f0dd 	.word	0x0000f0dd

60005628 <___ZN5Print10printFloatEdh_veneer>:
60005628:	f85f f000 	ldr.w	pc, [pc]	; 6000562c <___ZN5Print10printFloatEdh_veneer+0x4>
6000562c:	0000c891 	.word	0x0000c891

60005630 <___ZN7FatFile7getNameEPcj_veneer>:
60005630:	f85f f000 	ldr.w	pc, [pc]	; 60005634 <___ZN7FatFile7getNameEPcj_veneer+0x4>
60005634:	00009095 	.word	0x00009095

60005638 <___Z12RemoteLaunchbPKc_veneer>:
60005638:	f85f f000 	ldr.w	pc, [pc]	; 6000563c <___Z12RemoteLaunchbPKc_veneer+0x4>
6000563c:	0000455d 	.word	0x0000455d

60005640 <___ZN5Print13printNumber64Eyhh_veneer>:
60005640:	f85f f000 	ldr.w	pc, [pc]	; 60005644 <___ZN5Print13printNumber64Eyhh_veneer+0x4>
60005644:	0000c7ed 	.word	0x0000c7ed

60005648 <___Z10MenuChangev_veneer>:
60005648:	f85f f000 	ldr.w	pc, [pc]	; 6000564c <___Z10MenuChangev_veneer+0x4>
6000564c:	000027a5 	.word	0x000027a5

60005650 <__pwm_init_veneer>:
60005650:	f85f f000 	ldr.w	pc, [pc]	; 60005654 <__pwm_init_veneer+0x4>
60005654:	0000eb79 	.word	0x0000eb79

60005658 <__usb_serial_putchar_veneer>:
60005658:	f85f f000 	ldr.w	pc, [pc]	; 6000565c <__usb_serial_putchar_veneer+0x4>
6000565c:	0000e8fd 	.word	0x0000e8fd

60005660 <__usb_serial_available_veneer>:
60005660:	f85f f000 	ldr.w	pc, [pc]	; 60005664 <__usb_serial_available_veneer+0x4>
60005664:	0000e855 	.word	0x0000e855

60005668 <__strcpy_veneer>:
60005668:	f85f f000 	ldr.w	pc, [pc]	; 6000566c <__strcpy_veneer+0x4>
6000566c:	0001179d 	.word	0x0001179d

60005670 <___ZN7SDClass5beginEh_veneer>:
60005670:	f85f f000 	ldr.w	pc, [pc]	; 60005674 <___ZN7SDClass5beginEh_veneer+0x4>
60005674:	00004e19 	.word	0x00004e19

60005678 <___ZN10FsBaseFileC2ERKS__veneer>:
60005678:	f85f f000 	ldr.w	pc, [pc]	; 6000567c <___ZN10FsBaseFileC2ERKS__veneer+0x4>
6000567c:	00009771 	.word	0x00009771

60005680 <__usb_serial_write_veneer>:
60005680:	f85f f000 	ldr.w	pc, [pc]	; 60005684 <__usb_serial_write_veneer+0x4>
60005684:	0000e929 	.word	0x0000e929

60005688 <__main_veneer>:
60005688:	f85f f000 	ldr.w	pc, [pc]	; 6000568c <__main_veneer+0x4>
6000568c:	0000d541 	.word	0x0000d541

60005690 <___ZN7FatFile5writeEPKvj_veneer>:
60005690:	f85f f000 	ldr.w	pc, [pc]	; 60005694 <___ZN7FatFile5writeEPKvj_veneer+0x4>
60005694:	00007ec5 	.word	0x00007ec5

60005698 <___ZN5Print7printlnEv_veneer>:
60005698:	f85f f000 	ldr.w	pc, [pc]	; 6000569c <___ZN5Print7printlnEv_veneer+0x4>
6000569c:	0000c771 	.word	0x0000c771

600056a0 <___ZdlPvj_veneer>:
600056a0:	f85f f000 	ldr.w	pc, [pc]	; 600056a4 <___ZdlPvj_veneer+0x4>
600056a4:	0000d689 	.word	0x0000d689

600056a8 <__usb_serial_getchar_veneer>:
600056a8:	f85f f000 	ldr.w	pc, [pc]	; 600056ac <__usb_serial_getchar_veneer+0x4>
600056ac:	0000e8dd 	.word	0x0000e8dd

600056b0 <__strcat_veneer>:
600056b0:	f85f f000 	ldr.w	pc, [pc]	; 600056b4 <__strcat_veneer+0x4>
600056b4:	000110ad 	.word	0x000110ad

600056b8 <__strrchr_veneer>:
600056b8:	f85f f000 	ldr.w	pc, [pc]	; 600056bc <__strrchr_veneer+0x4>
600056bc:	00011305 	.word	0x00011305

600056c0 <___Znwj_veneer>:
600056c0:	f85f f000 	ldr.w	pc, [pc]	; 600056c4 <___Znwj_veneer+0x4>
600056c4:	0000d685 	.word	0x0000d685

600056c8 <___ZN9ExFatFile4readEPvj_veneer>:
600056c8:	f85f f000 	ldr.w	pc, [pc]	; 600056cc <___ZN9ExFatFile4readEPvj_veneer+0x4>
600056cc:	000050c9 	.word	0x000050c9

600056d0 <___ZN8FsVolume4openEPKci_veneer>:
600056d0:	f85f f000 	ldr.w	pc, [pc]	; 600056d4 <___ZN8FsVolume4openEPKci_veneer+0x4>
600056d4:	00009a29 	.word	0x00009a29

600056d8 <__delay_veneer>:
600056d8:	f85f f000 	ldr.w	pc, [pc]	; 600056dc <__delay_veneer+0x4>
600056dc:	0000ce3d 	.word	0x0000ce3d

600056e0 <__stpcpy_veneer>:
600056e0:	f85f f000 	ldr.w	pc, [pc]	; 600056e4 <__stpcpy_veneer+0x4>
600056e4:	00011331 	.word	0x00011331

600056e8 <___ZN10FsBaseFile8openNextEPS_i_veneer>:
600056e8:	f85f f000 	ldr.w	pc, [pc]	; 600056ec <___ZN10FsBaseFile8openNextEPS_i_veneer+0x4>
600056ec:	000098cd 	.word	0x000098cd

600056f0 <___ZN9ExFatFile4openEP11ExFatVolumePKci_veneer>:
600056f0:	f85f f000 	ldr.w	pc, [pc]	; 600056f4 <___ZN9ExFatFile4openEP11ExFatVolumePKci_veneer+0x4>
600056f4:	00005811 	.word	0x00005811

600056f8 <__frame_dummy_init_array_entry>:
600056f8:	00000499 0000472d 00004eed              ....-G...N..

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <isrButton()>:
    } else {
      *hs = highSurrogate(cp);
      *ls = lowSurrogate(cp);
    }
    return ptr;
  }
      20:	4b01      	ldr	r3, [pc, #4]	; (28 <_teensy_model_identifier+0x3>)
  /** High surrogate for a code point.
   * \param{in} cp code point.
   * \return high surrogate.
   */
  inline uint16_t highSurrogate(uint32_t cp) {
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
      22:	2201      	movs	r2, #1
  /** Low surrogate for a code point.
   * \param{in} cp code point.
   * \return low surrogate.
   */
  inline uint16_t lowSurrogate(uint32_t cp) {
    return (cp & 0X3FF) + 0XDC00;
      24:	701a      	strb	r2, [r3, #0]
      26:	4770      	bx	lr
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
      28:	2005e533 	.word	0x2005e533

0000002c <isrPHI2()>:
    return (cp & 0X3FF) + 0XDC00;
      2c:	4aa7      	ldr	r2, [pc, #668]	; (2cc <isrPHI2()+0x2a0>)
      2e:	4ba8      	ldr	r3, [pc, #672]	; (2d0 <isrPHI2()+0x2a4>)
      *hs = highSurrogate(cp);
      30:	6852      	ldr	r2, [r2, #4]
      *ls = lowSurrogate(cp);
      32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }
      36:	4ca7      	ldr	r4, [pc, #668]	; (2d4 <isrPHI2()+0x2a8>)
	SNVS_LPSRTCMR = t >> 17;
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
      38:	4da7      	ldr	r5, [pc, #668]	; (2d8 <isrPHI2()+0x2ac>)
      3a:	6022      	str	r2, [r4, #0]
      3c:	6820      	ldr	r0, [r4, #0]
      3e:	681a      	ldr	r2, [r3, #0]
}
      40:	6821      	ldr	r1, [r4, #0]
      42:	4ea6      	ldr	r6, [pc, #664]	; (2dc <isrPHI2()+0x2b0>)
      44:	6019      	str	r1, [r3, #0]
      46:	49a6      	ldr	r1, [pc, #664]	; (2e0 <isrPHI2()+0x2b4>)
		index += nbytes;
		len -= nbytes;
		count += write(buffer, nbytes);
	}
	return count;
}
      48:	682b      	ldr	r3, [r5, #0]
      4a:	680f      	ldr	r7, [r1, #0]
  m_vwd = dir;
  return true;

 fail:
  return false;
}
      4c:	0c1b      	lsrs	r3, r3, #16
      4e:	fb07 f303 	mul.w	r3, r7, r3
	if (pin < NUM_DIGITAL_PINS) {
		cdPin_ = pin;
		pinMode(cdPin_, INPUT_PULLUP);
	} else {
		cdPin_ = 0xff;
		return false;
      52:	085b      	lsrs	r3, r3, #1
      54:	fba6 1303 	umull	r1, r3, r6, r3
      58:	1a81      	subs	r1, r0, r2
      5a:	ebb1 2f13 	cmp.w	r1, r3, lsr #8
  m_vwd = dir;
  return true;

 fail:
  return false;
}
      5e:	d90c      	bls.n	7a <isrPHI2()+0x4e>
}
      60:	6829      	ldr	r1, [r5, #0]
      62:	6823      	ldr	r3, [r4, #0]
      64:	0c09      	lsrs	r1, r1, #16
      66:	4413      	add	r3, r2
      68:	fb07 f101 	mul.w	r1, r7, r1
      }
    }
  }
  if (r < 0) {
    // read error
    return -1;
      6c:	1a1b      	subs	r3, r3, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_dataLength = length;
  m_firstCluster = find;
  m_flags |= FILE_FLAG_DIR_DIRTY | FILE_FLAG_CONTIGUOUS;
      6e:	0849      	lsrs	r1, r1, #1
  }
  return true;

 fail:
  return false;
}
      70:	fba6 6101 	umull	r6, r1, r6, r1
      74:	eb03 2311 	add.w	r3, r3, r1, lsr #8
  if (!sync()) {
      78:	6023      	str	r3, [r4, #0]
}
      7a:	4a9a      	ldr	r2, [pc, #616]	; (2e4 <isrPHI2()+0x2b8>)
      7c:	2180      	movs	r1, #128	; 0x80
      7e:	4b9a      	ldr	r3, [pc, #616]	; (2e8 <isrPHI2()+0x2bc>)
  return true;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName7(char* name, size_t count) {
  DirName_t* dn;
  size_t n = 0;
      80:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
  if (n < 10) {
    *--str = '0';
      84:	4f91      	ldr	r7, [pc, #580]	; (2cc <isrPHI2()+0x2a0>)
  if (tz & 0X80) {
    if (tz & 0X40) {
      sign = '-';
      tz = -tz;
    } else {
      sign = '+';
      86:	681e      	ldr	r6, [r3, #0]
      88:	4894      	ldr	r0, [pc, #592]	; (2dc <isrPHI2()+0x2b0>)
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
			break;
      8a:	687a      	ldr	r2, [r7, #4]
      8c:	6821      	ldr	r1, [r4, #0]
      8e:	682b      	ldr	r3, [r5, #0]
      90:	1a52      	subs	r2, r2, r1
      92:	0c1b      	lsrs	r3, r3, #16
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
  m_clusterMask = m_bytesPerCluster - 1;
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
      94:	fb06 f303 	mul.w	r3, r6, r3
  m_fatType = FAT_TYPE_EXFAT;
      98:	085b      	lsrs	r3, r3, #1
  return true;
      9a:	fba0 1303 	umull	r1, r3, r0, r3
  m_fatType = FAT_TYPE_EXFAT;
      9e:	ebb2 2f13 	cmp.w	r2, r3, lsr #8

 fail:
  return false;
}
      a2:	d3f2      	bcc.n	8a <isrPHI2()+0x5e>
      a4:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    // Insure MISO goes to low Z.
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
  }
}
      a8:	4e88      	ldr	r6, [pc, #544]	; (2cc <isrPHI2()+0x2a0>)
}
      aa:	498c      	ldr	r1, [pc, #560]	; (2dc <isrPHI2()+0x2b0>)
      ac:	f8d3 c000 	ldr.w	ip, [r3]
}
//------------------------------------------------------------------------------
FsBaseFile& FsBaseFile::operator=(const FsBaseFile& from) {
  if (this == &from) return *this;
  close();
  if (from.m_fFile) {
      b0:	4b8e      	ldr	r3, [pc, #568]	; (2ec <isrPHI2()+0x2c0>)
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FF8000;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
	flash_wait();
      b2:	ea4f 401c 	mov.w	r0, ip, lsr #16
      b6:	681f      	ldr	r7, [r3, #0]
      b8:	4686      	mov	lr, r0
      ba:	f8d6 8004 	ldr.w	r8, [r6, #4]
        goto fail;
      }
    } else {
      // ignore read-only
      f.m_flags |= FILE_FLAG_WRITE;
      if (!f.remove()) {
      be:	6822      	ldr	r2, [r4, #0]
      if (!getError()) {
      c0:	682b      	ldr	r3, [r5, #0]
      c2:	eba8 0202 	sub.w	r2, r8, r2
        goto fail;
      }
    }
  }
  // don't try to delete root
  if (!isRoot()) {
      c6:	0c1b      	lsrs	r3, r3, #16
      c8:	fb07 f303 	mul.w	r3, r7, r3
      cc:	085b      	lsrs	r3, r3, #1
    if (!rmdir()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return true;
      ce:	fba1 8303 	umull	r8, r3, r1, r3

 fail:
  return false;
}
      d2:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
    if (!rmdir()) {
      d6:	d3f0      	bcc.n	ba <isrPHI2()+0x8e>
      d8:	4b82      	ldr	r3, [pc, #520]	; (2e4 <isrPHI2()+0x2b8>)
      da:	681b      	ldr	r3, [r3, #0]
  seconds += (tm.mday-1) * SECS_PER_DAY;
  seconds += tm.hour * SECS_PER_HOUR;
  seconds += tm.min * SECS_PER_MIN;
  seconds += tm.sec;
  return /*(time_t)*/ seconds;
}
      dc:	0659      	lsls	r1, r3, #25
      de:	f100 8095 	bmi.w	20c <isrPHI2()+0x1e0>
      e2:	4b83      	ldr	r3, [pc, #524]	; (2f0 <isrPHI2()+0x2c4>)
      e4:	681a      	ldr	r2, [r3, #0]
      e6:	b36a      	cbz	r2, 144 <isrPHI2()+0x118>
      e8:	4b82      	ldr	r3, [pc, #520]	; (2f4 <isrPHI2()+0x2c8>)
      ea:	4983      	ldr	r1, [pc, #524]	; (2f8 <isrPHI2()+0x2cc>)
      ec:	881b      	ldrh	r3, [r3, #0]
      ee:	f8df c1dc 	ldr.w	ip, [pc, #476]	; 2cc <isrPHI2()+0x2a0>
      f2:	ea0e 0303 	and.w	r3, lr, r3
  }
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) {
    m_mirrorOffset = offset;
      f6:	4e79      	ldr	r6, [pc, #484]	; (2dc <isrPHI2()+0x2b0>)
      f8:	5cd2      	ldrb	r2, [r2, r3]
  }
  m_cache.setMirrorOffset(m_sectorsPerFat);
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;
      fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
      fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
     102:	0313      	lsls	r3, r2, #12
     104:	f002 020f 	and.w	r2, r2, #15
  return *reinterpret_cast<const uint16_t*>(src);
     108:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
      } else if (!FsUtf::isSurrogate(c)) {
        if (c == 0) {
          break;
        }
        cp = c;
      } else if (FsUtf::isHighSurrogate(c)) {
     10c:	4313      	orrs	r3, r2
     10e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
     112:	f083 130f 	eor.w	r3, r3, #983055	; 0xf000f
     116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
     11a:	4b78      	ldr	r3, [pc, #480]	; (2fc <isrPHI2()+0x2d0>)
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
     11c:	681f      	ldr	r7, [r3, #0]
     11e:	f8dc 2004 	ldr.w	r2, [ip, #4]
     122:	6821      	ldr	r1, [r4, #0]
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
     124:	682b      	ldr	r3, [r5, #0]
	mask = p->mask;
     126:	1a52      	subs	r2, r2, r1
	pinmode = *(p->reg + 1);
     128:	0c1b      	lsrs	r3, r3, #16
	if (pinmode & mask) {
     12a:	fb07 f303 	mul.w	r3, r7, r3
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     12e:	085b      	lsrs	r3, r3, #1
     130:	fba6 1303 	umull	r1, r3, r6, r3
	mask = p->mask;
     134:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
	if (pinmode & mask) {
     138:	d3f1      	bcc.n	11e <isrPHI2()+0xf2>
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     13a:	4b6f      	ldr	r3, [pc, #444]	; (2f8 <isrPHI2()+0x2cc>)
     13c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     140:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
     144:	4f6e      	ldr	r7, [pc, #440]	; (300 <isrPHI2()+0x2d4>)
     146:	4e6f      	ldr	r6, [pc, #444]	; (304 <isrPHI2()+0x2d8>)
     148:	783b      	ldrb	r3, [r7, #0]
     14a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
     14e:	6a1a      	ldr	r2, [r3, #32]
     150:	b11a      	cbz	r2, 15a <isrPHI2()+0x12e>
     152:	4790      	blx	r2
     154:	783b      	ldrb	r3, [r7, #0]
     156:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
     15a:	6adb      	ldr	r3, [r3, #44]	; 0x2c

	// Use a single variable as the data destination.  Typically a register
	// for transmitting data to one of the hardware peripherals is used.
	void destination(volatile signed char &p) { destination(*(volatile uint8_t *)&p); }
	void destination(volatile unsigned char &p) {
		TCD->DADDR = &p;
     15c:	b103      	cbz	r3, 160 <isrPHI2()+0x134>
		TCD->DOFF = 0;
     15e:	4798      	blx	r3
		TCD->ATTR_DST = 0;
     160:	4b69      	ldr	r3, [pc, #420]	; (308 <isrPHI2()+0x2dc>)
		if ((uint32_t)&p < 0x40000000 || TCD->NBYTES == 0) TCD->NBYTES = 1;
     162:	781b      	ldrb	r3, [r3, #0]
     164:	2b00      	cmp	r3, #0
     166:	d04b      	beq.n	200 <isrPHI2()+0x1d4>
		TCD->DLASTSGA = 0;
     168:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
     16c:	6813      	ldr	r3, [r2, #0]
//=========================================================================
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
     16e:	0759      	lsls	r1, r3, #29
     170:	d4fc      	bmi.n	16c <isrPHI2()+0x140>
     172:	4856      	ldr	r0, [pc, #344]	; (2cc <isrPHI2()+0x2a0>)
		tcd->BITER = len & 0x7fff;
     174:	4b65      	ldr	r3, [pc, #404]	; (30c <isrPHI2()+0x2e0>)
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
     176:	6842      	ldr	r2, [r0, #4]
     178:	4f58      	ldr	r7, [pc, #352]	; (2dc <isrPHI2()+0x2b0>)
     17a:	681e      	ldr	r6, [r3, #0]
}
     17c:	6022      	str	r2, [r4, #0]
		if ((uint32_t)&p < 0x40000000 || TCD->NBYTES == 0) TCD->NBYTES = 1;
     17e:	6842      	ldr	r2, [r0, #4]
     180:	6821      	ldr	r1, [r4, #0]
     182:	682b      	ldr	r3, [r5, #0]
	uint8_t *write_data = (uint8_t*) buf;
	if (buf) {
		_dmaTX->sourceBuffer((uint8_t*)write_data, count);  
		_dmaTX->TCD->SLAST = 0;	// Finish with it pointing to next location
	} else {
		_dmaTX->source((uint8_t&)_transferWriteFill);   // maybe have setable value
     184:	1a52      	subs	r2, r2, r1
     186:	0c1b      	lsrs	r3, r3, #16
		TCD->SOFF = 0;
     188:	fb06 f303 	mul.w	r3, r6, r3
		TCD->ATTR_SRC = 0;
     18c:	085b      	lsrs	r3, r3, #1
     18e:	fba7 1303 	umull	r1, r3, r7, r3
		if ((uint32_t)&p < 0x40000000 || TCD->NBYTES == 0) TCD->NBYTES = 1;
     192:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
     196:	d3f2      	bcc.n	17e <isrPHI2()+0x152>
     198:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
		TCD->SLAST = 0;
     19c:	4a51      	ldr	r2, [pc, #324]	; (2e4 <isrPHI2()+0x2b8>)
     19e:	681b      	ldr	r3, [r3, #0]
     1a0:	6812      	ldr	r2, [r2, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
     1a2:	05d2      	lsls	r2, r2, #23
     1a4:	d42c      	bmi.n	200 <isrPHI2()+0x1d4>
     1a6:	4a5a      	ldr	r2, [pc, #360]	; (310 <isrPHI2()+0x2e4>)
		tcd->BITER = len & 0x7fff;
     1a8:	6812      	ldr	r2, [r2, #0]
	tcd->CITER = tcd->BITER; 
     1aa:	b34a      	cbz	r2, 200 <isrPHI2()+0x1d4>
     1ac:	f3c3 430c 	ubfx	r3, r3, #16, #13
}
     1b0:	4951      	ldr	r1, [pc, #324]	; (2f8 <isrPHI2()+0x2cc>)
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
     1b2:	4f46      	ldr	r7, [pc, #280]	; (2cc <isrPHI2()+0x2a0>)
     1b4:	5cd2      	ldrb	r2, [r2, r3]
     1b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
		return true;
     1ba:	4e48      	ldr	r6, [pc, #288]	; (2dc <isrPHI2()+0x2b0>)
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
     1bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
     1c0:	0313      	lsls	r3, r2, #12
     1c2:	f002 020f 	and.w	r2, r2, #15
     1c6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
     1ca:	4313      	orrs	r3, r2
		if ((uint32_t)&p < 0x40000000 || TCD->NBYTES == 0) TCD->NBYTES = 1;
     1cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
     1d0:	f083 120f 	eor.w	r2, r3, #983055	; 0xf000f
     1d4:	4b49      	ldr	r3, [pc, #292]	; (2fc <isrPHI2()+0x2d0>)
     1d6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
     1da:	6818      	ldr	r0, [r3, #0]
     1dc:	687a      	ldr	r2, [r7, #4]
     1de:	6821      	ldr	r1, [r4, #0]
     1e0:	682b      	ldr	r3, [r5, #0]
     1e2:	1a52      	subs	r2, r2, r1
		event_responder.triggerEvent();
     1e4:	0c1b      	lsrs	r3, r3, #16
     1e6:	fb00 f303 	mul.w	r3, r0, r3
     1ea:	085b      	lsrs	r3, r3, #1
		return true;
     1ec:	fba6 1303 	umull	r1, r3, r6, r3
     1f0:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
     1f4:	d3f2      	bcc.n	1dc <isrPHI2()+0x1b0>
     1f6:	4b40      	ldr	r3, [pc, #256]	; (2f8 <isrPHI2()+0x2cc>)
     1f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     1fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
     200:	4b38      	ldr	r3, [pc, #224]	; (2e4 <isrPHI2()+0x2b8>)
     202:	2280      	movs	r2, #128	; 0x80
	//digitalWrite(4, LOW);
}


void HardwareSerialIMXRT::addToSerialEventsList() {
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
     204:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		if (s_serials_with_serial_events[i] == this) return; // already in the list.
     208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     20c:	05da      	lsls	r2, r3, #23
};
     20e:	d439      	bmi.n	284 <isrPHI2()+0x258>
     210:	4b3f      	ldr	r3, [pc, #252]	; (310 <isrPHI2()+0x2e4>)
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
     212:	681b      	ldr	r3, [r3, #0]
     214:	b363      	cbz	r3, 270 <isrPHI2()+0x244>
     216:	4a3f      	ldr	r2, [pc, #252]	; (314 <isrPHI2()+0x2e8>)
     218:	4937      	ldr	r1, [pc, #220]	; (2f8 <isrPHI2()+0x2cc>)
     21a:	8812      	ldrh	r2, [r2, #0]
     21c:	4f2b      	ldr	r7, [pc, #172]	; (2cc <isrPHI2()+0x2a0>)
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
     21e:	ea0e 0e02 	and.w	lr, lr, r2
     222:	f813 200e 	ldrb.w	r2, [r3, lr]
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
     226:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     22a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
     22e:	0313      	lsls	r3, r2, #12
     230:	f002 020f 	and.w	r2, r2, #15
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
     234:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
     238:	4313      	orrs	r3, r2
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
     23a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
     23e:	f083 130f 	eor.w	r3, r3, #983055	; 0xf000f
     242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
     246:	4b2d      	ldr	r3, [pc, #180]	; (2fc <isrPHI2()+0x2d0>)
     248:	4924      	ldr	r1, [pc, #144]	; (2dc <isrPHI2()+0x2b0>)
     24a:	681e      	ldr	r6, [r3, #0]
     24c:	687a      	ldr	r2, [r7, #4]
     24e:	6823      	ldr	r3, [r4, #0]
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
     250:	1ad2      	subs	r2, r2, r3
	}
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
     252:	682b      	ldr	r3, [r5, #0]
     254:	0c1b      	lsrs	r3, r3, #16
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
     256:	fb06 f303 	mul.w	r3, r6, r3
     25a:	085b      	lsrs	r3, r3, #1
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
     25c:	fba1 c303 	umull	ip, r3, r1, r3
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
     260:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
     264:	d3f2      	bcc.n	24c <isrPHI2()+0x220>
};
     266:	4b24      	ldr	r3, [pc, #144]	; (2f8 <isrPHI2()+0x2cc>)
     268:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
     26c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
     270:	4f23      	ldr	r7, [pc, #140]	; (300 <isrPHI2()+0x2d4>)
     272:	4e24      	ldr	r6, [pc, #144]	; (304 <isrPHI2()+0x2d8>)
     274:	783b      	ldrb	r3, [r7, #0]
     276:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
     27a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
     27c:	2a00      	cmp	r2, #0
     27e:	f47f af68 	bne.w	152 <isrPHI2()+0x126>
     282:	e76a      	b.n	15a <isrPHI2()+0x12e>
     284:	06df      	lsls	r7, r3, #27
     286:	d410      	bmi.n	2aa <isrPHI2()+0x27e>
     288:	4f1d      	ldr	r7, [pc, #116]	; (300 <isrPHI2()+0x2d4>)
     28a:	4e1e      	ldr	r6, [pc, #120]	; (304 <isrPHI2()+0x2d8>)
     28c:	783b      	ldrb	r3, [r7, #0]
     28e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
     292:	699a      	ldr	r2, [r3, #24]
     294:	2a00      	cmp	r2, #0
     296:	f43f af60 	beq.w	15a <isrPHI2()+0x12e>
     29a:	f3cc 01c0 	ubfx	r1, ip, #3, #1
    if (isDirty() && !sync()) {
     29e:	b2c0      	uxtb	r0, r0
     2a0:	4790      	blx	r2
     2a2:	783b      	ldrb	r3, [r7, #0]
     2a4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
     2a8:	e757      	b.n	15a <isrPHI2()+0x12e>
      }
      for (size_t i = 0; i < 11; i++) {
        dir->name[i] = *volume_label? *volume_label++ : ' '; // fill in the 11 trailing blanks
      }
      dir->attributes = 8;  // mark as a volume label.
      m_blockDev->writeSector(root_dir, buf);
     2aa:	069e      	lsls	r6, r3, #26
     2ac:	d505      	bpl.n	2ba <isrPHI2()+0x28e>
     2ae:	4a14      	ldr	r2, [pc, #80]	; (300 <isrPHI2()+0x2d4>)
     2b0:	4b14      	ldr	r3, [pc, #80]	; (304 <isrPHI2()+0x2d8>)
      dir->attributes = 8;  // mark as a volume label.
     2b2:	7812      	ldrb	r2, [r2, #0]
     2b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    uint16_t first_deleted_entry_index = 0;
     2b8:	e74f      	b.n	15a <isrPHI2()+0x12e>
     2ba:	4f11      	ldr	r7, [pc, #68]	; (300 <isrPHI2()+0x2d4>)
     2bc:	4e11      	ldr	r6, [pc, #68]	; (304 <isrPHI2()+0x2d8>)
     2be:	783b      	ldrb	r3, [r7, #0]
     2c0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
   
   else if (!GP9_IO2n(GPIO_9))  //IO2: DFxx address space
   {
      Address &= 0xFF;

      if (IOHandler[CurrentIOHandler]->IO2Hndlr != NULL) IOHandler[CurrentIOHandler]->IO2Hndlr(Address, GP6_R_Wn(GPIO_6));
     2c4:	69da      	ldr	r2, [r3, #28]
     2c6:	2a00      	cmp	r2, #0
     2c8:	d1e7      	bne.n	29a <isrPHI2()+0x26e>
     2ca:	e746      	b.n	15a <isrPHI2()+0x12e>
     2cc:	e0001000 	.word	0xe0001000
     2d0:	2000daec 	.word	0x2000daec
     2d4:	2005dfcc 	.word	0x2005dfcc
     2d8:	2000bd24 	.word	0x2000bd24
     2dc:	08972311 	.word	0x08972311
     2e0:	2000c950 	.word	0x2000c950
     2e4:	4200c000 	.word	0x4200c000
     2e8:	2000c958 	.word	0x2000c958
     2ec:	2000c954 	.word	0x2000c954
     2f0:	2000dae8 	.word	0x2000dae8
     2f4:	2005e520 	.word	0x2005e520
     2f8:	42004000 	.word	0x42004000
     2fc:	2000c948 	.word	0x2000c948
     300:	2005e534 	.word	0x2005e534
     304:	2000bd4c 	.word	0x2000bd4c
     308:	2005e535 	.word	0x2005e535
     30c:	2000c95c 	.word	0x2000c95c
     310:	2000dae0 	.word	0x2000dae0
     314:	2005e51e 	.word	0x2005e51e

00000318 <flash_sector_not_erased>:
//******************************************************************************
// flash_sector_not_erased()	returns 0 if erased and !0 (error) if NOT erased
//******************************************************************************
RAMFUNC int flash_sector_not_erased( uint32_t address )
{
  uint32_t *sector = (uint32_t*)(address & ~(FLASH_SECTOR_SIZE - 1));
     318:	f420 607f 	bic.w	r0, r0, #4080	; 0xff0
     31c:	f020 000f 	bic.w	r0, r0, #15
  for (int i=0; i<FLASH_SECTOR_SIZE/4; i++) {
     320:	f500 5280 	add.w	r2, r0, #4096	; 0x1000
    if (*sector++ != 0xFFFFFFFF)
     324:	6803      	ldr	r3, [r0, #0]
     326:	3004      	adds	r0, #4
     328:	3301      	adds	r3, #1
     32a:	d103      	bne.n	334 <flash_sector_not_erased+0x1c>
  for (int i=0; i<FLASH_SECTOR_SIZE/4; i++) {
     32c:	4290      	cmp	r0, r2
     32e:	d1f9      	bne.n	324 <flash_sector_not_erased+0xc>
      return 1; // NOT erased
  }
  return 0; // erased
     330:	2000      	movs	r0, #0
     332:	4770      	bx	lr
      return 1; // NOT erased
     334:	2001      	movs	r0, #1
}
     336:	4770      	bx	lr

00000338 <flash_move>:
//******************************************************************************
// move from source to destination (flash), erasing destination sectors as we go
// DANGER: this is critical and cannot be interrupted, else T3.x can be damaged
//******************************************************************************
RAMFUNC void flash_move( uint32_t dst, uint32_t src, uint32_t size )
{
     338:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
     33c:	4606      	mov	r6, r0
     33e:	460d      	mov	r5, r1
     340:	4690      	mov	r8, r2
  uint32_t offset=0, error=0, addr;
     342:	2400      	movs	r4, #0
  // set global flag leave_interrupts_disabled = 1 to prevent the T3.x flash
  // write and erase functions from re-enabling interrupts when they complete 
  leave_interrupts_disabled = 1;
  
  // move size bytes containing new program from source to destination
  while (offset < size && error == 0) {
     344:	4544      	cmp	r4, r8
     346:	d214      	bcs.n	372 <flash_move+0x3a>

    addr = dst + offset;
     348:	19a7      	adds	r7, r4, r6

    // if new sector, erase, then immediately write FSEC/FOPT if in this sector
    // this is the ONLY place that FSEC values are written, so it's the only
    // place where calls to KINETIS flash write functions have aFSEC = oFSEC = 1
    if ((addr & (FLASH_SECTOR_SIZE - 1)) == 0) {
     34a:	f3c7 030b 	ubfx	r3, r7, #0, #12
     34e:	b933      	cbnz	r3, 35e <flash_move+0x26>
      if (flash_sector_not_erased( addr )) {
     350:	4638      	mov	r0, r7
     352:	f7ff ffe1 	bl	318 <flash_sector_not_erased>
     356:	b110      	cbz	r0, 35e <flash_move+0x26>
        #if defined(__IMXRT1062__)
          eepromemu_flash_erase_sector( (void *)addr );
     358:	4638      	mov	r0, r7
     35a:	f00c ff67 	bl	d22c <eepromemu_flash_erase_sector>
    // for KINETIS, these writes may be to the sector containing FSEC, but the
    // FSEC location was written by the code above, so use aFSEC=1, oFSEC=0
    #if defined(__IMXRT1062__)
      // for T4.x, data address passed to flash_write() must be in RAM
      uint32_t value = *(uint32_t *)(src + offset);     
      eepromemu_flash_write( (void*)addr, &value, 4 );
     35e:	2204      	movs	r2, #4
      uint32_t value = *(uint32_t *)(src + offset);     
     360:	5963      	ldr	r3, [r4, r5]
      eepromemu_flash_write( (void*)addr, &value, 4 );
     362:	4638      	mov	r0, r7
      error |= flash_word( addr, *(uint32_t *)(src + offset), 1, 0 );
    #elif (FLASH_WRITE_SIZE==8)
      error |= flash_phrase( addr, *(uint64_t *)(src + offset), 1, 0 );
    #endif

    offset += FLASH_WRITE_SIZE;
     364:	3404      	adds	r4, #4
      eepromemu_flash_write( (void*)addr, &value, 4 );
     366:	eb0d 0102 	add.w	r1, sp, r2
      uint32_t value = *(uint32_t *)(src + offset);     
     36a:	9301      	str	r3, [sp, #4]
      eepromemu_flash_write( (void*)addr, &value, 4 );
     36c:	f00c fee8 	bl	d140 <eepromemu_flash_write>
    offset += FLASH_WRITE_SIZE;
     370:	e7e8      	b.n	344 <flash_move+0xc>
  
  // move is complete. if the source buffer (src) is in FLASH, erase the buffer
  // by erasing all sectors from top of new program to bottom of FLASH_RESERVE,
  // which leaves FLASH in same state as if code was loaded using TeensyDuino.
  // For KINETIS, this erase cannot include FSEC, so erase uses aFSEC=0.
  if (IN_FLASH(src)) {
     372:	f105 4520 	add.w	r5, r5, #2684354560	; 0xa0000000
     376:	f5b5 0f00 	cmp.w	r5, #8388608	; 0x800000
     37a:	d30a      	bcc.n	392 <flash_move+0x5a>
    }   
  }

  // for T3.x, at least, must REBOOT here (via macro) because original code has
  // been erased and overwritten, so return address is no longer valid
  REBOOT;
     37c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     380:	4a0b      	ldr	r2, [pc, #44]	; (3b0 <flash_move+0x78>)
     382:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
     386:	e011      	b.n	3ac <flash_move+0x74>
      addr = dst + offset;
     388:	19a1      	adds	r1, r4, r6
      if ((addr & (FLASH_SECTOR_SIZE - 1)) == 0) {
     38a:	f3c1 030b 	ubfx	r3, r1, #0, #12
     38e:	b123      	cbz	r3, 39a <flash_move+0x62>
      offset += FLASH_WRITE_SIZE;
     390:	3404      	adds	r4, #4
    while (offset < (FLASH_SIZE - FLASH_RESERVE) && error == 0) {
     392:	f5b4 0ff8 	cmp.w	r4, #8126464	; 0x7c0000
     396:	d3f7      	bcc.n	388 <flash_move+0x50>
     398:	e7f0      	b.n	37c <flash_move+0x44>
        if (flash_sector_not_erased( addr )) {
     39a:	4608      	mov	r0, r1
     39c:	f7ff ffbc 	bl	318 <flash_sector_not_erased>
     3a0:	2800      	cmp	r0, #0
     3a2:	d0f5      	beq.n	390 <flash_move+0x58>
            eepromemu_flash_erase_sector( (void*)addr );
     3a4:	4608      	mov	r0, r1
     3a6:	f00c ff41 	bl	d22c <eepromemu_flash_erase_sector>
     3aa:	e7f1      	b.n	390 <flash_move+0x58>
  // wait here until REBOOT actually happens 
  for (;;) {}
     3ac:	e7fe      	b.n	3ac <flash_move+0x74>
     3ae:	bf00      	nop
     3b0:	05fa0004 	.word	0x05fa0004

000003b4 <irq_gpio6789>:
	}
}

FASTRUN
void irq_gpio6789(void)
{
     3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t status = gpio[ISR_INDEX] & gpio[IMR_INDEX];
     3b6:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
     3ba:	699d      	ldr	r5, [r3, #24]
     3bc:	695a      	ldr	r2, [r3, #20]
	if (status) {
     3be:	4015      	ands	r5, r2
     3c0:	d00d      	beq.n	3de <irq_gpio6789+0x2a>
		gpio[ISR_INDEX] = status;
     3c2:	4f25      	ldr	r7, [pc, #148]	; (458 <irq_gpio6789+0xa4>)
			status = status & ~(1 << index);
     3c4:	2601      	movs	r6, #1
		gpio[ISR_INDEX] = status;
     3c6:	619d      	str	r5, [r3, #24]
			uint32_t index = __builtin_ctz(status);
     3c8:	fa95 f4a5 	rbit	r4, r5
     3cc:	fab4 f484 	clz	r4, r4
			table[index]();
     3d0:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
			status = status & ~(1 << index);
     3d4:	fa06 f404 	lsl.w	r4, r6, r4
			table[index]();
     3d8:	4798      	blx	r3
		while (status) {
     3da:	43a5      	bics	r5, r4
     3dc:	d1f4      	bne.n	3c8 <irq_gpio6789+0x14>
	uint32_t status = gpio[ISR_INDEX] & gpio[IMR_INDEX];
     3de:	4b1f      	ldr	r3, [pc, #124]	; (45c <irq_gpio6789+0xa8>)
     3e0:	699d      	ldr	r5, [r3, #24]
     3e2:	695a      	ldr	r2, [r3, #20]
	if (status) {
     3e4:	4015      	ands	r5, r2
     3e6:	d00d      	beq.n	404 <irq_gpio6789+0x50>
		gpio[ISR_INDEX] = status;
     3e8:	4f1d      	ldr	r7, [pc, #116]	; (460 <irq_gpio6789+0xac>)
			status = status & ~(1 << index);
     3ea:	2601      	movs	r6, #1
		gpio[ISR_INDEX] = status;
     3ec:	619d      	str	r5, [r3, #24]
			uint32_t index = __builtin_ctz(status);
     3ee:	fa95 f4a5 	rbit	r4, r5
     3f2:	fab4 f484 	clz	r4, r4
			table[index]();
     3f6:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
			status = status & ~(1 << index);
     3fa:	fa06 f404 	lsl.w	r4, r6, r4
			table[index]();
     3fe:	4798      	blx	r3
		while (status) {
     400:	43a5      	bics	r5, r4
     402:	d1f4      	bne.n	3ee <irq_gpio6789+0x3a>
	uint32_t status = gpio[ISR_INDEX] & gpio[IMR_INDEX];
     404:	4b17      	ldr	r3, [pc, #92]	; (464 <irq_gpio6789+0xb0>)
     406:	699d      	ldr	r5, [r3, #24]
     408:	695a      	ldr	r2, [r3, #20]
	if (status) {
     40a:	4015      	ands	r5, r2
     40c:	d00d      	beq.n	42a <irq_gpio6789+0x76>
		gpio[ISR_INDEX] = status;
     40e:	4f16      	ldr	r7, [pc, #88]	; (468 <irq_gpio6789+0xb4>)
			status = status & ~(1 << index);
     410:	2601      	movs	r6, #1
		gpio[ISR_INDEX] = status;
     412:	619d      	str	r5, [r3, #24]
			uint32_t index = __builtin_ctz(status);
     414:	fa95 f4a5 	rbit	r4, r5
     418:	fab4 f484 	clz	r4, r4
			table[index]();
     41c:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
			status = status & ~(1 << index);
     420:	fa06 f404 	lsl.w	r4, r6, r4
			table[index]();
     424:	4798      	blx	r3
		while (status) {
     426:	43a5      	bics	r5, r4
     428:	d1f4      	bne.n	414 <irq_gpio6789+0x60>
	uint32_t status = gpio[ISR_INDEX] & gpio[IMR_INDEX];
     42a:	4b10      	ldr	r3, [pc, #64]	; (46c <irq_gpio6789+0xb8>)
     42c:	699d      	ldr	r5, [r3, #24]
     42e:	695a      	ldr	r2, [r3, #20]
	if (status) {
     430:	4015      	ands	r5, r2
     432:	d00d      	beq.n	450 <irq_gpio6789+0x9c>
		gpio[ISR_INDEX] = status;
     434:	4f0e      	ldr	r7, [pc, #56]	; (470 <irq_gpio6789+0xbc>)
			status = status & ~(1 << index);
     436:	2601      	movs	r6, #1
		gpio[ISR_INDEX] = status;
     438:	619d      	str	r5, [r3, #24]
			uint32_t index = __builtin_ctz(status);
     43a:	fa95 f4a5 	rbit	r4, r5
     43e:	fab4 f484 	clz	r4, r4
			table[index]();
     442:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
			status = status & ~(1 << index);
     446:	fa06 f404 	lsl.w	r4, r6, r4
			table[index]();
     44a:	4798      	blx	r3
		while (status) {
     44c:	43a5      	bics	r5, r4
     44e:	d1f4      	bne.n	43a <irq_gpio6789+0x86>
	irq_anyport(&GPIO6_DR, isr_table_gpio1);
	irq_anyport(&GPIO7_DR, isr_table_gpio2);
	irq_anyport(&GPIO8_DR, isr_table_gpio3);
	irq_anyport(&GPIO9_DR, isr_table_gpio4);
	asm volatile ("dsb":::"memory");
     450:	f3bf 8f4f 	dsb	sy
}
     454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     456:	bf00      	nop
     458:	2000c70c 	.word	0x2000c70c
     45c:	42004000 	.word	0x42004000
     460:	2000c78c 	.word	0x2000c78c
     464:	42008000 	.word	0x42008000
     468:	2000c80c 	.word	0x2000c80c
     46c:	4200c000 	.word	0x4200c000
     470:	2000c88c 	.word	0x2000c88c

00000474 <register_tm_clones>:
     474:	4805      	ldr	r0, [pc, #20]	; (48c <register_tm_clones+0x18>)
     476:	4b06      	ldr	r3, [pc, #24]	; (490 <register_tm_clones+0x1c>)
     478:	1a1b      	subs	r3, r3, r0
     47a:	0fd9      	lsrs	r1, r3, #31
     47c:	eb01 01a3 	add.w	r1, r1, r3, asr #2
     480:	1049      	asrs	r1, r1, #1
     482:	d002      	beq.n	48a <register_tm_clones+0x16>
     484:	4b03      	ldr	r3, [pc, #12]	; (494 <register_tm_clones+0x20>)
     486:	b103      	cbz	r3, 48a <register_tm_clones+0x16>
     488:	4718      	bx	r3
     48a:	4770      	bx	lr
     48c:	2000cec0 	.word	0x2000cec0
     490:	2000cec0 	.word	0x2000cec0
     494:	00000000 	.word	0x00000000

00000498 <frame_dummy>:
     498:	b508      	push	{r3, lr}
     49a:	4b05      	ldr	r3, [pc, #20]	; (4b0 <frame_dummy+0x18>)
     49c:	b11b      	cbz	r3, 4a6 <frame_dummy+0xe>
     49e:	4905      	ldr	r1, [pc, #20]	; (4b4 <frame_dummy+0x1c>)
     4a0:	4805      	ldr	r0, [pc, #20]	; (4b8 <frame_dummy+0x20>)
     4a2:	f3af 8000 	nop.w
     4a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     4aa:	f7ff bfe3 	b.w	474 <register_tm_clones>
     4ae:	bf00      	nop
     4b0:	00000000 	.word	0x00000000
     4b4:	2005e40c 	.word	0x2005e40c
     4b8:	6002e800 	.word	0x6002e800

000004bc <Print::availableForWrite()>:
	virtual int availableForWrite(void)		{ return 0; }
     4bc:	2000      	movs	r0, #0
     4be:	4770      	bx	lr

000004c0 <Print::flush()>:
	virtual void flush()				{ }
     4c0:	4770      	bx	lr
     4c2:	bf00      	nop

000004c4 <SDFile::isOpen()>:
     4c4:	6d03      	ldr	r3, [r0, #80]	; 0x50
     4c6:	b10b      	cbz	r3, 4cc <SDFile::isOpen()+0x8>
     4c8:	2001      	movs	r0, #1
	}
     4ca:	4770      	bx	lr
     4cc:	6d40      	ldr	r0, [r0, #84]	; 0x54
     4ce:	3800      	subs	r0, #0
     4d0:	bf18      	it	ne
     4d2:	2001      	movne	r0, #1
     4d4:	4770      	bx	lr
     4d6:	bf00      	nop

000004d8 <getNtpTime()>:
}
     4d8:	4770      	bx	lr
     4da:	bf00      	nop

000004dc <InitHndlr_TeensyROM()>:
//__________________________________________________________________________________


void InitHndlr_TeensyROM()
{
   IO1[rwRegNextIOHndlr] = IOH_None;  //EEPROM.read(eepAdNextIOHndlr);  //in case it was over-ridden by .crt
     4dc:	4b02      	ldr	r3, [pc, #8]	; (4e8 <InitHndlr_TeensyROM()+0xc>)
     4de:	2200      	movs	r2, #0
     4e0:	681b      	ldr	r3, [r3, #0]
     4e2:	74da      	strb	r2, [r3, #19]
   //
   //usbDevMIDI.setHandleNoteOff       (M2SOnNoteOff);             // 8x
   //usbDevMIDI.setHandleNoteOn        (M2SOnNoteOn);              // 9x
   //usbDevMIDI.setHandleControlChange (M2SOnControlChange);       // Bx
   //usbDevMIDI.setHandlePitchChange   (M2SOnPitchChange);         // Ex
}   
     4e4:	4770      	bx	lr
     4e6:	bf00      	nop
     4e8:	2000dae4 	.word	0x2000dae4

000004ec <InitHndlr_EpyxFastLoad()>:

volatile uint32_t CycleCountdown=0;

void InitHndlr_EpyxFastLoad()
{
   CycleCountdown=100000; //give extra time at start
     4ec:	4904      	ldr	r1, [pc, #16]	; (500 <InitHndlr_EpyxFastLoad()+0x14>)
   SetExROMAssert;
     4ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
   CycleCountdown=100000; //give extra time at start
     4f2:	4804      	ldr	r0, [pc, #16]	; (504 <InitHndlr_EpyxFastLoad()+0x18>)
   SetExROMAssert;
     4f4:	4b04      	ldr	r3, [pc, #16]	; (508 <InitHndlr_EpyxFastLoad()+0x1c>)
   CycleCountdown=100000; //give extra time at start
     4f6:	6008      	str	r0, [r1, #0]
   SetExROMAssert;
     4f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
     4fc:	4770      	bx	lr
     4fe:	bf00      	nop
     500:	2000d8ac 	.word	0x2000d8ac
     504:	000186a0 	.word	0x000186a0
     508:	42004000 	.word	0x42004000

0000050c <IO1Hndlr_EpyxFastLoad(unsigned char, bool)>:

void IO1Hndlr_EpyxFastLoad(uint8_t Address, bool R_Wn)
{
   EpyxFastLoadCycleReset;
     50c:	4a06      	ldr	r2, [pc, #24]	; (528 <IO1Hndlr_EpyxFastLoad(unsigned char, bool)+0x1c>)
     50e:	f44f 6100 	mov.w	r1, #2048	; 0x800
     512:	4b06      	ldr	r3, [pc, #24]	; (52c <IO1Hndlr_EpyxFastLoad(unsigned char, bool)+0x20>)
     514:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
     518:	681a      	ldr	r2, [r3, #0]
     51a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
     51e:	d202      	bcs.n	526 <IO1Hndlr_EpyxFastLoad(unsigned char, bool)+0x1a>
     520:	f44f 7200 	mov.w	r2, #512	; 0x200
     524:	601a      	str	r2, [r3, #0]
}
     526:	4770      	bx	lr
     528:	42004000 	.word	0x42004000
     52c:	2000d8ac 	.word	0x2000d8ac

00000530 <ROMLHndlr_EpyxFastLoad(unsigned long)>:
   if (R_Wn) DataPortWriteWait(LOROM_Image[Address | 0x1F00]); 
}

void ROMLHndlr_EpyxFastLoad(uint32_t Address)
{
   EpyxFastLoadCycleReset;
     530:	4a06      	ldr	r2, [pc, #24]	; (54c <ROMLHndlr_EpyxFastLoad(unsigned long)+0x1c>)
     532:	f44f 6100 	mov.w	r1, #2048	; 0x800
     536:	4b06      	ldr	r3, [pc, #24]	; (550 <ROMLHndlr_EpyxFastLoad(unsigned long)+0x20>)
     538:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
     53c:	681a      	ldr	r2, [r3, #0]
     53e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
     542:	d202      	bcs.n	54a <ROMLHndlr_EpyxFastLoad(unsigned long)+0x1a>
     544:	f44f 7200 	mov.w	r2, #512	; 0x200
     548:	601a      	str	r2, [r3, #0]
}
     54a:	4770      	bx	lr
     54c:	42004000 	.word	0x42004000
     550:	2000d8ac 	.word	0x2000d8ac

00000554 <InitHndlr_MagicDesk()>:

uint8_t BankReg; 

void InitHndlr_MagicDesk()
{
   BankReg = 0;
     554:	4b01      	ldr	r3, [pc, #4]	; (55c <InitHndlr_MagicDesk()+0x8>)
     556:	2200      	movs	r2, #0
     558:	701a      	strb	r2, [r3, #0]
}
     55a:	4770      	bx	lr
     55c:	2005e532 	.word	0x2005e532

00000560 <IO1Hndlr_MagicDesk(unsigned char, bool)>:

void IO1Hndlr_MagicDesk(uint8_t Address, bool R_Wn)
{
     560:	b4f0      	push	{r4, r5, r6, r7}
   if (R_Wn) //IO1 Read  -------------------------------------------------
     562:	b361      	cbz	r1, 5be <IO1Hndlr_MagicDesk(unsigned char, bool)+0x5e>
   {
      DataPortWriteWaitLog(BankReg);
     564:	4a39      	ldr	r2, [pc, #228]	; (64c <IO1Hndlr_MagicDesk(unsigned char, bool)+0xec>)
uint32_t nS_VICStart  = Def_nS_VICStart;  


__attribute__((always_inline)) inline void DataPortWriteWait(uint8_t Data)
{
   DataBufEnable; 
     566:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     56a:	4939      	ldr	r1, [pc, #228]	; (650 <IO1Hndlr_MagicDesk(unsigned char, bool)+0xf0>)
     56c:	7812      	ldrb	r2, [r2, #0]
     56e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
   register uint32_t RegBits = (Data & 0x0F) | ((Data & 0xF0) << 12);
     572:	0313      	lsls	r3, r2, #12
     574:	f002 020f 	and.w	r2, r2, #15
   CORE_PIN7_PORTSET = RegBits;
   CORE_PIN7_PORTCLEAR = ~RegBits & GP7_DataMask;
   WaitUntil_nS(nS_DataHold);  
     578:	4c36      	ldr	r4, [pc, #216]	; (654 <IO1Hndlr_MagicDesk(unsigned char, bool)+0xf4>)
   register uint32_t RegBits = (Data & 0x0F) | ((Data & 0xF0) << 12);
     57a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
     57e:	4836      	ldr	r0, [pc, #216]	; (658 <IO1Hndlr_MagicDesk(unsigned char, bool)+0xf8>)
   WaitUntil_nS(nS_DataHold);  
     580:	4e36      	ldr	r6, [pc, #216]	; (65c <IO1Hndlr_MagicDesk(unsigned char, bool)+0xfc>)
   register uint32_t RegBits = (Data & 0x0F) | ((Data & 0xF0) << 12);
     582:	4313      	orrs	r3, r2
   WaitUntil_nS(nS_DataHold);  
     584:	4d36      	ldr	r5, [pc, #216]	; (660 <IO1Hndlr_MagicDesk(unsigned char, bool)+0x100>)
   CORE_PIN7_PORTCLEAR = ~RegBits & GP7_DataMask;
     586:	f083 120f 	eor.w	r2, r3, #983055	; 0xf000f
   CORE_PIN7_PORTSET = RegBits;
     58a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
   CORE_PIN7_PORTCLEAR = ~RegBits & GP7_DataMask;
     58e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
   WaitUntil_nS(nS_DataHold);  
     592:	4934      	ldr	r1, [pc, #208]	; (664 <IO1Hndlr_MagicDesk(unsigned char, bool)+0x104>)
     594:	6827      	ldr	r7, [r4, #0]
     596:	6872      	ldr	r2, [r6, #4]
     598:	6804      	ldr	r4, [r0, #0]
     59a:	680b      	ldr	r3, [r1, #0]
     59c:	1b12      	subs	r2, r2, r4
     59e:	0c1b      	lsrs	r3, r3, #16
     5a0:	fb07 f303 	mul.w	r3, r7, r3
     5a4:	085b      	lsrs	r3, r3, #1
     5a6:	fba5 4303 	umull	r4, r3, r5, r3
     5aa:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
     5ae:	d3f2      	bcc.n	596 <IO1Hndlr_MagicDesk(unsigned char, bool)+0x36>
   DataBufDisable;
     5b0:	4b27      	ldr	r3, [pc, #156]	; (650 <IO1Hndlr_MagicDesk(unsigned char, bool)+0xf0>)
     5b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     5b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      
      TraceLogAddValidData(BankReg);
      BankReg &= 0x7f;
      if (BankReg<NumCrtChips) LOROM_Image = CrtChips[BankReg].ChipROM;
   }
}
     5ba:	bcf0      	pop	{r4, r5, r6, r7}
     5bc:	4770      	bx	lr
   TraceLogAddValidData(Data);
}

__attribute__((always_inline)) inline uint8_t DataPortWaitRead()
{
   SetDataPortDirIn; //set data ports to inputs         //data port set to read previously
     5be:	4b24      	ldr	r3, [pc, #144]	; (650 <IO1Hndlr_MagicDesk(unsigned char, bool)+0xf0>)
   DataBufEnable; //enable external buffer
     5c0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   WaitUntil_nS(nS_DataSetup);  //could poll Phi2 for falling edge...  only 30nS typ hold time
     5c4:	4c28      	ldr	r4, [pc, #160]	; (668 <IO1Hndlr_MagicDesk(unsigned char, bool)+0x108>)
   SetDataPortDirIn; //set data ports to inputs         //data port set to read previously
     5c6:	685a      	ldr	r2, [r3, #4]
     5c8:	4823      	ldr	r0, [pc, #140]	; (658 <IO1Hndlr_MagicDesk(unsigned char, bool)+0xf8>)
     5ca:	f022 120f 	bic.w	r2, r2, #983055	; 0xf000f
     5ce:	4925      	ldr	r1, [pc, #148]	; (664 <IO1Hndlr_MagicDesk(unsigned char, bool)+0x104>)
   WaitUntil_nS(nS_DataSetup);  //could poll Phi2 for falling edge...  only 30nS typ hold time
     5d0:	4f22      	ldr	r7, [pc, #136]	; (65c <IO1Hndlr_MagicDesk(unsigned char, bool)+0xfc>)
   SetDataPortDirIn; //set data ports to inputs         //data port set to read previously
     5d2:	605a      	str	r2, [r3, #4]
   DataBufEnable; //enable external buffer
     5d4:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
   WaitUntil_nS(nS_DataSetup);  //could poll Phi2 for falling edge...  only 30nS typ hold time
     5d8:	4d21      	ldr	r5, [pc, #132]	; (660 <IO1Hndlr_MagicDesk(unsigned char, bool)+0x100>)
     5da:	6826      	ldr	r6, [r4, #0]
     5dc:	687a      	ldr	r2, [r7, #4]
     5de:	6804      	ldr	r4, [r0, #0]
     5e0:	680b      	ldr	r3, [r1, #0]
     5e2:	1b12      	subs	r2, r2, r4
     5e4:	0c1b      	lsrs	r3, r3, #16
     5e6:	fb06 f303 	mul.w	r3, r6, r3
     5ea:	085b      	lsrs	r3, r3, #1
     5ec:	fba5 4303 	umull	r4, r3, r5, r3
     5f0:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
     5f4:	d3f2      	bcc.n	5dc <IO1Hndlr_MagicDesk(unsigned char, bool)+0x7c>
   register uint32_t DataIn = ReadGPIO7;
     5f6:	4916      	ldr	r1, [pc, #88]	; (650 <IO1Hndlr_MagicDesk(unsigned char, bool)+0xf0>)
   DataBufDisable;
     5f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
      BankReg = DataPortWaitRead(); 
     5fc:	4c13      	ldr	r4, [pc, #76]	; (64c <IO1Hndlr_MagicDesk(unsigned char, bool)+0xec>)
   register uint32_t DataIn = ReadGPIO7;
     5fe:	680b      	ldr	r3, [r1, #0]
   DataBufDisable;
     600:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
   SetDataPortDirOut; //set data ports to outputs (default)
   return ((DataIn & 0x0F) | ((DataIn >> 12) & 0xF0));
     604:	0b1a      	lsrs	r2, r3, #12
   SetDataPortDirOut; //set data ports to outputs (default)
     606:	6848      	ldr	r0, [r1, #4]
   return ((DataIn & 0x0F) | ((DataIn >> 12) & 0xF0));
     608:	f003 030f 	and.w	r3, r3, #15
     60c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
   SetDataPortDirOut; //set data ports to outputs (default)
     610:	f040 100f 	orr.w	r0, r0, #983055	; 0xf000f
   return ((DataIn & 0x0F) | ((DataIn >> 12) & 0xF0));
     614:	4313      	orrs	r3, r2
      if (BankReg & 0x80) SetExROMDeassert; //turn off cart
     616:	09d2      	lsrs	r2, r2, #7
   SetDataPortDirOut; //set data ports to outputs (default)
     618:	6048      	str	r0, [r1, #4]
     61a:	f44f 6200 	mov.w	r2, #2048	; 0x800
     61e:	d111      	bne.n	644 <IO1Hndlr_MagicDesk(unsigned char, bool)+0xe4>
      else SetExROMAssert;
     620:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
      if (BankReg<NumCrtChips) LOROM_Image = CrtChips[BankReg].ChipROM;
     624:	4a11      	ldr	r2, [pc, #68]	; (66c <IO1Hndlr_MagicDesk(unsigned char, bool)+0x10c>)
      BankReg &= 0x7f;
     626:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      if (BankReg<NumCrtChips) LOROM_Image = CrtChips[BankReg].ChipROM;
     62a:	7812      	ldrb	r2, [r2, #0]
      BankReg &= 0x7f;
     62c:	7023      	strb	r3, [r4, #0]
      if (BankReg<NumCrtChips) LOROM_Image = CrtChips[BankReg].ChipROM;
     62e:	429a      	cmp	r2, r3
     630:	d9c3      	bls.n	5ba <IO1Hndlr_MagicDesk(unsigned char, bool)+0x5a>
     632:	490f      	ldr	r1, [pc, #60]	; (670 <IO1Hndlr_MagicDesk(unsigned char, bool)+0x110>)
     634:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     638:	4a0e      	ldr	r2, [pc, #56]	; (674 <IO1Hndlr_MagicDesk(unsigned char, bool)+0x114>)
     63a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
}
     63e:	bcf0      	pop	{r4, r5, r6, r7}
      if (BankReg<NumCrtChips) LOROM_Image = CrtChips[BankReg].ChipROM;
     640:	6013      	str	r3, [r2, #0]
}
     642:	4770      	bx	lr
      if (BankReg & 0x80) SetExROMDeassert; //turn off cart
     644:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
     648:	e7ec      	b.n	624 <IO1Hndlr_MagicDesk(unsigned char, bool)+0xc4>
     64a:	bf00      	nop
     64c:	2005e532 	.word	0x2005e532
     650:	42004000 	.word	0x42004000
     654:	2000c948 	.word	0x2000c948
     658:	2005dfcc 	.word	0x2005dfcc
     65c:	e0001000 	.word	0xe0001000
     660:	08972311 	.word	0x08972311
     664:	2000bd24 	.word	0x2000bd24
     668:	2000c94c 	.word	0x2000c94c
     66c:	2005e536 	.word	0x2005e536
     670:	2000d2ac 	.word	0x2000d2ac
     674:	2000dae8 	.word	0x2000dae8

00000678 <InitHndlr_Ocean1()>:
  NULL,                  //called at the end of EVERY c64 cycle
};

void InitHndlr_Ocean1()
{
   if (NumCrtChips == 64) // Type B, 512k
     678:	4b0c      	ldr	r3, [pc, #48]	; (6ac <InitHndlr_Ocean1()+0x34>)
   {
      //8kLo config
      SetGameDeassert;
     67a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
      SetExROMAssert;
     67e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   if (NumCrtChips == 64) // Type B, 512k
     682:	781b      	ldrb	r3, [r3, #0]
     684:	2b40      	cmp	r3, #64	; 0x40
      SetGameDeassert;
     686:	4b0a      	ldr	r3, [pc, #40]	; (6b0 <InitHndlr_Ocean1()+0x38>)
   if (NumCrtChips == 64) // Type B, 512k
     688:	d00a      	beq.n	6a0 <InitHndlr_Ocean1()+0x28>
   }
   else                  // Type A, all other sizes
   {
      //16k config, 8k mirrored
      SetGameAssert;
     68a:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
      SetExROMAssert;
     68e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   }

   LOROM_Image = CrtChips[0].ChipROM;
     692:	4b08      	ldr	r3, [pc, #32]	; (6b4 <InitHndlr_Ocean1()+0x3c>)
     694:	4908      	ldr	r1, [pc, #32]	; (6b8 <InitHndlr_Ocean1()+0x40>)
     696:	681b      	ldr	r3, [r3, #0]
   HIROM_Image = CrtChips[0].ChipROM;
     698:	4a08      	ldr	r2, [pc, #32]	; (6bc <InitHndlr_Ocean1()+0x44>)
   LOROM_Image = CrtChips[0].ChipROM;
     69a:	600b      	str	r3, [r1, #0]
   HIROM_Image = CrtChips[0].ChipROM;
     69c:	6013      	str	r3, [r2, #0]
}
     69e:	4770      	bx	lr
      SetGameDeassert;
     6a0:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
      SetExROMAssert;
     6a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
     6a8:	e7f3      	b.n	692 <InitHndlr_Ocean1()+0x1a>
     6aa:	bf00      	nop
     6ac:	2005e536 	.word	0x2005e536
     6b0:	42004000 	.word	0x42004000
     6b4:	2000d2ac 	.word	0x2000d2ac
     6b8:	2000dae8 	.word	0x2000dae8
     6bc:	2000dae0 	.word	0x2000dae0

000006c0 <InitHndlr_SuperGames()>:

bool WPLatched; 

void InitHndlr_SuperGames()
{
   WPLatched = false;
     6c0:	4b01      	ldr	r3, [pc, #4]	; (6c8 <InitHndlr_SuperGames()+0x8>)
     6c2:	2200      	movs	r2, #0
     6c4:	701a      	strb	r2, [r3, #0]
}
     6c6:	4770      	bx	lr
     6c8:	2005e538 	.word	0x2005e538

000006cc <IO2Hndlr_EasyFlash(unsigned char, bool)>:
      }
   }
}

void IO2Hndlr_EasyFlash(uint8_t Address, bool R_Wn)
{
     6cc:	b4f0      	push	{r4, r5, r6, r7}
   if (R_Wn) //IO2 Read  -------------------------------------------------
     6ce:	b361      	cbz	r1, 72a <IO2Hndlr_EasyFlash(unsigned char, bool)+0x5e>
   {
      DataPortWriteWaitLog(EZFlashRAM[Address]);
     6d0:	4a2e      	ldr	r2, [pc, #184]	; (78c <IO2Hndlr_EasyFlash(unsigned char, bool)+0xc0>)
   DataBufEnable; 
     6d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     6d6:	4d2e      	ldr	r5, [pc, #184]	; (790 <IO2Hndlr_EasyFlash(unsigned char, bool)+0xc4>)
     6d8:	5c12      	ldrb	r2, [r2, r0]
     6da:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
   register uint32_t RegBits = (Data & 0x0F) | ((Data & 0xF0) << 12);
     6de:	0313      	lsls	r3, r2, #12
     6e0:	f002 020f 	and.w	r2, r2, #15
   WaitUntil_nS(nS_DataHold);  
     6e4:	482b      	ldr	r0, [pc, #172]	; (794 <IO2Hndlr_EasyFlash(unsigned char, bool)+0xc8>)
   register uint32_t RegBits = (Data & 0x0F) | ((Data & 0xF0) << 12);
     6e6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
     6ea:	4c2b      	ldr	r4, [pc, #172]	; (798 <IO2Hndlr_EasyFlash(unsigned char, bool)+0xcc>)
     6ec:	492b      	ldr	r1, [pc, #172]	; (79c <IO2Hndlr_EasyFlash(unsigned char, bool)+0xd0>)
     6ee:	4313      	orrs	r3, r2
   WaitUntil_nS(nS_DataHold);  
     6f0:	4f2b      	ldr	r7, [pc, #172]	; (7a0 <IO2Hndlr_EasyFlash(unsigned char, bool)+0xd4>)
   CORE_PIN7_PORTCLEAR = ~RegBits & GP7_DataMask;
     6f2:	f083 120f 	eor.w	r2, r3, #983055	; 0xf000f
   CORE_PIN7_PORTSET = RegBits;
     6f6:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
   CORE_PIN7_PORTCLEAR = ~RegBits & GP7_DataMask;
     6fa:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
   WaitUntil_nS(nS_DataHold);  
     6fe:	4d29      	ldr	r5, [pc, #164]	; (7a4 <IO2Hndlr_EasyFlash(unsigned char, bool)+0xd8>)
     700:	6806      	ldr	r6, [r0, #0]
     702:	687a      	ldr	r2, [r7, #4]
     704:	6820      	ldr	r0, [r4, #0]
     706:	680b      	ldr	r3, [r1, #0]
     708:	1a12      	subs	r2, r2, r0
     70a:	0c1b      	lsrs	r3, r3, #16
     70c:	fb06 f303 	mul.w	r3, r6, r3
     710:	085b      	lsrs	r3, r3, #1
     712:	fba5 0303 	umull	r0, r3, r5, r3
     716:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
     71a:	d3f2      	bcc.n	702 <IO2Hndlr_EasyFlash(unsigned char, bool)+0x36>
   DataBufDisable;
     71c:	4b1c      	ldr	r3, [pc, #112]	; (790 <IO2Hndlr_EasyFlash(unsigned char, bool)+0xc4>)
     71e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   {
      uint8_t Data = DataPortWaitRead(); 
      EZFlashRAM[Address] = Data;
      TraceLogAddValidData(Data);
   }
}
     722:	bcf0      	pop	{r4, r5, r6, r7}
     724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
     728:	4770      	bx	lr
   SetDataPortDirIn; //set data ports to inputs         //data port set to read previously
     72a:	4b19      	ldr	r3, [pc, #100]	; (790 <IO2Hndlr_EasyFlash(unsigned char, bool)+0xc4>)
   DataBufEnable; //enable external buffer
     72c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   WaitUntil_nS(nS_DataSetup);  //could poll Phi2 for falling edge...  only 30nS typ hold time
     730:	4d1d      	ldr	r5, [pc, #116]	; (7a8 <IO2Hndlr_EasyFlash(unsigned char, bool)+0xdc>)
   SetDataPortDirIn; //set data ports to inputs         //data port set to read previously
     732:	685a      	ldr	r2, [r3, #4]
     734:	4c18      	ldr	r4, [pc, #96]	; (798 <IO2Hndlr_EasyFlash(unsigned char, bool)+0xcc>)
     736:	f022 120f 	bic.w	r2, r2, #983055	; 0xf000f
   WaitUntil_nS(nS_DataSetup);  //could poll Phi2 for falling edge...  only 30nS typ hold time
     73a:	4f19      	ldr	r7, [pc, #100]	; (7a0 <IO2Hndlr_EasyFlash(unsigned char, bool)+0xd4>)
     73c:	4e19      	ldr	r6, [pc, #100]	; (7a4 <IO2Hndlr_EasyFlash(unsigned char, bool)+0xd8>)
   SetDataPortDirIn; //set data ports to inputs         //data port set to read previously
     73e:	605a      	str	r2, [r3, #4]
   DataBufEnable; //enable external buffer
     740:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
   WaitUntil_nS(nS_DataSetup);  //could poll Phi2 for falling edge...  only 30nS typ hold time
     744:	4915      	ldr	r1, [pc, #84]	; (79c <IO2Hndlr_EasyFlash(unsigned char, bool)+0xd0>)
     746:	f8d5 c000 	ldr.w	ip, [r5]
     74a:	687a      	ldr	r2, [r7, #4]
     74c:	6825      	ldr	r5, [r4, #0]
     74e:	680b      	ldr	r3, [r1, #0]
     750:	1b52      	subs	r2, r2, r5
     752:	0c1b      	lsrs	r3, r3, #16
     754:	fb0c f303 	mul.w	r3, ip, r3
     758:	085b      	lsrs	r3, r3, #1
     75a:	fba6 5303 	umull	r5, r3, r6, r3
     75e:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
     762:	d3f2      	bcc.n	74a <IO2Hndlr_EasyFlash(unsigned char, bool)+0x7e>
   register uint32_t DataIn = ReadGPIO7;
     764:	4b0a      	ldr	r3, [pc, #40]	; (790 <IO2Hndlr_EasyFlash(unsigned char, bool)+0xc4>)
   DataBufDisable;
     766:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
      EZFlashRAM[Address] = Data;
     76a:	4c08      	ldr	r4, [pc, #32]	; (78c <IO2Hndlr_EasyFlash(unsigned char, bool)+0xc0>)
   register uint32_t DataIn = ReadGPIO7;
     76c:	681a      	ldr	r2, [r3, #0]
   DataBufDisable;
     76e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
   SetDataPortDirOut; //set data ports to outputs (default)
     772:	6859      	ldr	r1, [r3, #4]
     774:	f041 110f 	orr.w	r1, r1, #983055	; 0xf000f
     778:	6059      	str	r1, [r3, #4]
   return ((DataIn & 0x0F) | ((DataIn >> 12) & 0xF0));
     77a:	0b13      	lsrs	r3, r2, #12
     77c:	f002 020f 	and.w	r2, r2, #15
     780:	f023 030f 	bic.w	r3, r3, #15
     784:	4313      	orrs	r3, r2
     786:	5423      	strb	r3, [r4, r0]
}
     788:	bcf0      	pop	{r4, r5, r6, r7}
     78a:	4770      	bx	lr
     78c:	2000d9e0 	.word	0x2000d9e0
     790:	42004000 	.word	0x42004000
     794:	2000c948 	.word	0x2000c948
     798:	2005dfcc 	.word	0x2005dfcc
     79c:	2000bd24 	.word	0x2000bd24
     7a0:	e0001000 	.word	0xe0001000
     7a4:	08972311 	.word	0x08972311
     7a8:	2000c94c 	.word	0x2000c94c

000007ac <InitHndlr_ZaxxonSuper()>:

void InitHndlr_ZaxxonSuper()
{
   LOROM_Mask = 0x0fff; //mirror 4k to both sides of 8klo

   LOROM_Image = CrtChips[0].ChipROM;
     7ac:	4b07      	ldr	r3, [pc, #28]	; (7cc <InitHndlr_ZaxxonSuper()+0x20>)
   LOROM_Mask = 0x0fff; //mirror 4k to both sides of 8klo
     7ae:	f640 7cff 	movw	ip, #4095	; 0xfff
   LOROM_Image = CrtChips[0].ChipROM;
     7b2:	4907      	ldr	r1, [pc, #28]	; (7d0 <InitHndlr_ZaxxonSuper()+0x24>)
     7b4:	6818      	ldr	r0, [r3, #0]
   HIROM_Image = CrtChips[1].ChipROM;
     7b6:	68da      	ldr	r2, [r3, #12]
     7b8:	4b06      	ldr	r3, [pc, #24]	; (7d4 <InitHndlr_ZaxxonSuper()+0x28>)
{
     7ba:	b410      	push	{r4}
   LOROM_Mask = 0x0fff; //mirror 4k to both sides of 8klo
     7bc:	4c06      	ldr	r4, [pc, #24]	; (7d8 <InitHndlr_ZaxxonSuper()+0x2c>)
   LOROM_Image = CrtChips[0].ChipROM;
     7be:	6008      	str	r0, [r1, #0]
   LOROM_Mask = 0x0fff; //mirror 4k to both sides of 8klo
     7c0:	f8a4 c000 	strh.w	ip, [r4]
   HIROM_Image = CrtChips[1].ChipROM;
     7c4:	601a      	str	r2, [r3, #0]
}
     7c6:	f85d 4b04 	ldr.w	r4, [sp], #4
     7ca:	4770      	bx	lr
     7cc:	2000d2ac 	.word	0x2000d2ac
     7d0:	2000dae8 	.word	0x2000dae8
     7d4:	2000dae0 	.word	0x2000dae0
     7d8:	2005e520 	.word	0x2005e520

000007dc <ROMLHndlr_ZaxxonSuper(unsigned long)>:

void ROMLHndlr_ZaxxonSuper(uint32_t Address)
{
   HIROM_Image = CrtChips[(Address & 0x1000) ? 2 : 1].ChipROM;
     7dc:	f410 5f80 	tst.w	r0, #4096	; 0x1000
     7e0:	4905      	ldr	r1, [pc, #20]	; (7f8 <ROMLHndlr_ZaxxonSuper(unsigned long)+0x1c>)
     7e2:	4a06      	ldr	r2, [pc, #24]	; (7fc <ROMLHndlr_ZaxxonSuper(unsigned long)+0x20>)
     7e4:	bf14      	ite	ne
     7e6:	2302      	movne	r3, #2
     7e8:	2301      	moveq	r3, #1
     7ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     7ee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
     7f2:	6013      	str	r3, [r2, #0]
}
     7f4:	4770      	bx	lr
     7f6:	bf00      	nop
     7f8:	2000d2ac 	.word	0x2000d2ac
     7fc:	2000dae0 	.word	0x2000dae0

00000800 <WriteEEPROM()>:
   Printf_dbg("Wrote $%02x to EEP addr %d\n", eepDataToWrite, eepAddrToWrite);
     800:	4b03      	ldr	r3, [pc, #12]	; (810 <WriteEEPROM()+0x10>)
     802:	4a04      	ldr	r2, [pc, #16]	; (814 <WriteEEPROM()+0x14>)
     804:	7819      	ldrb	r1, [r3, #0]
     806:	7811      	ldrb	r1, [r2, #0]
   EEPROM.write(eepAddrToWrite, eepDataToWrite);
     808:	7810      	ldrb	r0, [r2, #0]
     80a:	7819      	ldrb	r1, [r3, #0]
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator const uint8_t() const       { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
     80c:	f00c bd6a 	b.w	d2e4 <eeprom_write_byte>
     810:	2005e544 	.word	0x2005e544
     814:	2005e543 	.word	0x2005e543

00000818 <IO1Hndlr_TeensyROM(unsigned char, bool)>:

void IO1Hndlr_TeensyROM(uint8_t Address, bool R_Wn)
{
     818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   uint8_t Data;
   if (R_Wn) //High (IO1 Read)
     81a:	2900      	cmp	r1, #0
     81c:	d035      	beq.n	88a <IO1Hndlr_TeensyROM(unsigned char, bool)+0x72>
   {
      switch(Address)
     81e:	2810      	cmp	r0, #16
     820:	f000 811c 	beq.w	a5c <IO1Hndlr_TeensyROM(unsigned char, bool)+0x244>
     824:	2814      	cmp	r0, #20
     826:	f000 80e0 	beq.w	9ea <IO1Hndlr_TeensyROM(unsigned char, bool)+0x1d2>
     82a:	2803      	cmp	r0, #3
     82c:	f000 80a0 	beq.w	970 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x158>
         case rwRegSerialString:
            Data = ptrSerialString[StringOffset++];
            DataPortWriteWaitLog(ToPETSCII(Data));            
            break;
         default: //used for all other IO1 reads
            DataPortWriteWaitLog(IO1[Address]); //will read garbage if above IO1Size
     830:	4ab6      	ldr	r2, [pc, #728]	; (b0c <IO1Hndlr_TeensyROM(unsigned char, bool)+0x2f4>)
   DataBufEnable; 
     832:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     836:	49b6      	ldr	r1, [pc, #728]	; (b10 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x2f8>)
     838:	6812      	ldr	r2, [r2, #0]
     83a:	4cb6      	ldr	r4, [pc, #728]	; (b14 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x2fc>)
     83c:	5c12      	ldrb	r2, [r2, r0]
     83e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
   register uint32_t RegBits = (Data & 0x0F) | ((Data & 0xF0) << 12);
     842:	0313      	lsls	r3, r2, #12
     844:	f002 020f 	and.w	r2, r2, #15
   WaitUntil_nS(nS_DataHold);  
     848:	48b3      	ldr	r0, [pc, #716]	; (b18 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x300>)
   register uint32_t RegBits = (Data & 0x0F) | ((Data & 0xF0) << 12);
     84a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   WaitUntil_nS(nS_DataHold);  
     84e:	4db3      	ldr	r5, [pc, #716]	; (b1c <IO1Hndlr_TeensyROM(unsigned char, bool)+0x304>)
   register uint32_t RegBits = (Data & 0x0F) | ((Data & 0xF0) << 12);
     850:	4313      	orrs	r3, r2
   CORE_PIN7_PORTCLEAR = ~RegBits & GP7_DataMask;
     852:	f083 120f 	eor.w	r2, r3, #983055	; 0xf000f
   CORE_PIN7_PORTSET = RegBits;
     856:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
   CORE_PIN7_PORTCLEAR = ~RegBits & GP7_DataMask;
     85a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
   WaitUntil_nS(nS_DataHold);  
     85e:	49b0      	ldr	r1, [pc, #704]	; (b20 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x308>)
     860:	6806      	ldr	r6, [r0, #0]
     862:	48b0      	ldr	r0, [pc, #704]	; (b24 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x30c>)
     864:	686a      	ldr	r2, [r5, #4]
     866:	6823      	ldr	r3, [r4, #0]
     868:	1ad2      	subs	r2, r2, r3
     86a:	680b      	ldr	r3, [r1, #0]
     86c:	0c1b      	lsrs	r3, r3, #16
     86e:	fb06 f303 	mul.w	r3, r6, r3
     872:	085b      	lsrs	r3, r3, #1
     874:	fba0 7303 	umull	r7, r3, r0, r3
     878:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
     87c:	d3f2      	bcc.n	864 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x4c>
   DataBufDisable;
     87e:	4ba4      	ldr	r3, [pc, #656]	; (b10 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x2f8>)
     880:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     884:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                  break;
            }
            break;
      }
   } //write
}
     888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   SetDataPortDirIn; //set data ports to inputs         //data port set to read previously
     88a:	4ba1      	ldr	r3, [pc, #644]	; (b10 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x2f8>)
   DataBufEnable; //enable external buffer
     88c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   WaitUntil_nS(nS_DataSetup);  //could poll Phi2 for falling edge...  only 30nS typ hold time
     890:	4da5      	ldr	r5, [pc, #660]	; (b28 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x310>)
   SetDataPortDirIn; //set data ports to inputs         //data port set to read previously
     892:	685a      	ldr	r2, [r3, #4]
     894:	4c9f      	ldr	r4, [pc, #636]	; (b14 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x2fc>)
     896:	f022 120f 	bic.w	r2, r2, #983055	; 0xf000f
   WaitUntil_nS(nS_DataSetup);  //could poll Phi2 for falling edge...  only 30nS typ hold time
     89a:	4fa0      	ldr	r7, [pc, #640]	; (b1c <IO1Hndlr_TeensyROM(unsigned char, bool)+0x304>)
     89c:	4ea1      	ldr	r6, [pc, #644]	; (b24 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x30c>)
   SetDataPortDirIn; //set data ports to inputs         //data port set to read previously
     89e:	605a      	str	r2, [r3, #4]
   DataBufEnable; //enable external buffer
     8a0:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
   WaitUntil_nS(nS_DataSetup);  //could poll Phi2 for falling edge...  only 30nS typ hold time
     8a4:	499e      	ldr	r1, [pc, #632]	; (b20 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x308>)
     8a6:	f8d5 c000 	ldr.w	ip, [r5]
     8aa:	687a      	ldr	r2, [r7, #4]
     8ac:	6825      	ldr	r5, [r4, #0]
     8ae:	680b      	ldr	r3, [r1, #0]
     8b0:	1b52      	subs	r2, r2, r5
     8b2:	0c1b      	lsrs	r3, r3, #16
     8b4:	fb0c f303 	mul.w	r3, ip, r3
     8b8:	085b      	lsrs	r3, r3, #1
     8ba:	fba6 5303 	umull	r5, r3, r6, r3
     8be:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
     8c2:	d3f2      	bcc.n	8aa <IO1Hndlr_TeensyROM(unsigned char, bool)+0x92>
   register uint32_t DataIn = ReadGPIO7;
     8c4:	4b92      	ldr	r3, [pc, #584]	; (b10 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x2f8>)
   DataBufDisable;
     8c6:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
      switch(Address)
     8ca:	1e42      	subs	r2, r0, #1
   register uint32_t DataIn = ReadGPIO7;
     8cc:	6819      	ldr	r1, [r3, #0]
   DataBufDisable;
     8ce:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
   SetDataPortDirOut; //set data ports to outputs (default)
     8d2:	685c      	ldr	r4, [r3, #4]
     8d4:	f044 140f 	orr.w	r4, r4, #983055	; 0xf000f
     8d8:	605c      	str	r4, [r3, #4]
   return ((DataIn & 0x0F) | ((DataIn >> 12) & 0xF0));
     8da:	0b0b      	lsrs	r3, r1, #12
     8dc:	f001 010f 	and.w	r1, r1, #15
     8e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     8e4:	430b      	orrs	r3, r1
     8e6:	2a1f      	cmp	r2, #31
     8e8:	d8ce      	bhi.n	888 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x70>
     8ea:	a101      	add	r1, pc, #4	; (adr r1, 8f0 <IO1Hndlr_TeensyROM(unsigned char, bool)+0xd8>)
     8ec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
     8f0:	00000acd 	.word	0x00000acd
     8f4:	00000889 	.word	0x00000889
     8f8:	00000889 	.word	0x00000889
     8fc:	00000aed 	.word	0x00000aed
     900:	00000889 	.word	0x00000889
     904:	00000889 	.word	0x00000889
     908:	00000889 	.word	0x00000889
     90c:	00000889 	.word	0x00000889
     910:	00000889 	.word	0x00000889
     914:	00000ae1 	.word	0x00000ae1
     918:	00000bbf 	.word	0x00000bbf
     91c:	00000acd 	.word	0x00000acd
     920:	00000889 	.word	0x00000889
     924:	00000b91 	.word	0x00000b91
     928:	00000889 	.word	0x00000889
     92c:	00000889 	.word	0x00000889
     930:	00000b7d 	.word	0x00000b7d
     934:	00000bd9 	.word	0x00000bd9
     938:	00000b65 	.word	0x00000b65
     93c:	00000b4d 	.word	0x00000b4d
     940:	00000ad5 	.word	0x00000ad5
     944:	00000889 	.word	0x00000889
     948:	00000889 	.word	0x00000889
     94c:	00000889 	.word	0x00000889
     950:	00000889 	.word	0x00000889
     954:	00000889 	.word	0x00000889
     958:	00000889 	.word	0x00000889
     95c:	00000acd 	.word	0x00000acd
     960:	00000acd 	.word	0x00000acd
     964:	00000acd 	.word	0x00000acd
     968:	00000acd 	.word	0x00000acd
     96c:	00000acd 	.word	0x00000acd
            DataPortWriteWait(XferImage[StreamOffsetAddr]);
     970:	4f6e      	ldr	r7, [pc, #440]	; (b2c <IO1Hndlr_TeensyROM(unsigned char, bool)+0x314>)
   DataBufEnable; 
     972:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
     976:	4a6e      	ldr	r2, [pc, #440]	; (b30 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x318>)
     978:	883b      	ldrh	r3, [r7, #0]
     97a:	6812      	ldr	r2, [r2, #0]
     97c:	b29b      	uxth	r3, r3
     97e:	4964      	ldr	r1, [pc, #400]	; (b10 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x2f8>)
     980:	4c64      	ldr	r4, [pc, #400]	; (b14 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x2fc>)
     982:	5cd2      	ldrb	r2, [r2, r3]
     984:	f8c1 0088 	str.w	r0, [r1, #136]	; 0x88
   register uint32_t RegBits = (Data & 0x0F) | ((Data & 0xF0) << 12);
     988:	0313      	lsls	r3, r2, #12
     98a:	f002 020f 	and.w	r2, r2, #15
   WaitUntil_nS(nS_DataHold);  
     98e:	4d63      	ldr	r5, [pc, #396]	; (b1c <IO1Hndlr_TeensyROM(unsigned char, bool)+0x304>)
   register uint32_t RegBits = (Data & 0x0F) | ((Data & 0xF0) << 12);
     990:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
     994:	4313      	orrs	r3, r2
   WaitUntil_nS(nS_DataHold);  
     996:	4a60      	ldr	r2, [pc, #384]	; (b18 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x300>)
   CORE_PIN7_PORTCLEAR = ~RegBits & GP7_DataMask;
     998:	f083 100f 	eor.w	r0, r3, #983055	; 0xf000f
   CORE_PIN7_PORTSET = RegBits;
     99c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
   CORE_PIN7_PORTCLEAR = ~RegBits & GP7_DataMask;
     9a0:	f8c1 0088 	str.w	r0, [r1, #136]	; 0x88
   WaitUntil_nS(nS_DataHold);  
     9a4:	495e      	ldr	r1, [pc, #376]	; (b20 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x308>)
     9a6:	6816      	ldr	r6, [r2, #0]
     9a8:	485e      	ldr	r0, [pc, #376]	; (b24 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x30c>)
     9aa:	686a      	ldr	r2, [r5, #4]
     9ac:	6823      	ldr	r3, [r4, #0]
     9ae:	1ad2      	subs	r2, r2, r3
     9b0:	680b      	ldr	r3, [r1, #0]
     9b2:	0c1b      	lsrs	r3, r3, #16
     9b4:	fb06 f303 	mul.w	r3, r6, r3
     9b8:	085b      	lsrs	r3, r3, #1
     9ba:	fba0 c303 	umull	ip, r3, r0, r3
     9be:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
     9c2:	d3f2      	bcc.n	9aa <IO1Hndlr_TeensyROM(unsigned char, bool)+0x192>
   DataBufDisable;
     9c4:	4b52      	ldr	r3, [pc, #328]	; (b10 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x2f8>)
     9c6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
            if (++StreamOffsetAddr >= XferSize) IO1[rRegStrAvailable]=0; //signal end of transfer
     9ca:	4a5a      	ldr	r2, [pc, #360]	; (b34 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x31c>)
     9cc:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
     9d0:	883b      	ldrh	r3, [r7, #0]
     9d2:	6812      	ldr	r2, [r2, #0]
     9d4:	3301      	adds	r3, #1
     9d6:	b29b      	uxth	r3, r3
     9d8:	4293      	cmp	r3, r2
     9da:	803b      	strh	r3, [r7, #0]
     9dc:	f4ff af54 	bcc.w	888 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x70>
     9e0:	4b4a      	ldr	r3, [pc, #296]	; (b0c <IO1Hndlr_TeensyROM(unsigned char, bool)+0x2f4>)
     9e2:	2200      	movs	r2, #0
     9e4:	681b      	ldr	r3, [r3, #0]
     9e6:	709a      	strb	r2, [r3, #2]
}
     9e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            Data = ptrSerialString[StringOffset++];
     9ea:	4d53      	ldr	r5, [pc, #332]	; (b38 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x320>)
   DataBufEnable; 
     9ec:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
     9f0:	4a52      	ldr	r2, [pc, #328]	; (b3c <IO1Hndlr_TeensyROM(unsigned char, bool)+0x324>)
     9f2:	882b      	ldrh	r3, [r5, #0]
     9f4:	f8d2 c000 	ldr.w	ip, [r2]
     9f8:	b29b      	uxth	r3, r3
            DataPortWriteWaitLog(ToPETSCII(Data));            
     9fa:	4f51      	ldr	r7, [pc, #324]	; (b40 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x328>)
     9fc:	4944      	ldr	r1, [pc, #272]	; (b10 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x2f8>)
            Data = ptrSerialString[StringOffset++];
     9fe:	1c5a      	adds	r2, r3, #1
   WaitUntil_nS(nS_DataHold);  
     a00:	4845      	ldr	r0, [pc, #276]	; (b18 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x300>)
     a02:	4c44      	ldr	r4, [pc, #272]	; (b14 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x2fc>)
     a04:	b292      	uxth	r2, r2
     a06:	802a      	strh	r2, [r5, #0]
     a08:	f81c 3003 	ldrb.w	r3, [ip, r3]
     a0c:	4d43      	ldr	r5, [pc, #268]	; (b1c <IO1Hndlr_TeensyROM(unsigned char, bool)+0x304>)
            DataPortWriteWaitLog(ToPETSCII(Data));            
     a0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     a12:	5cfa      	ldrb	r2, [r7, r3]
   DataBufEnable; 
     a14:	f8c1 6088 	str.w	r6, [r1, #136]	; 0x88
   register uint32_t RegBits = (Data & 0x0F) | ((Data & 0xF0) << 12);
     a18:	0313      	lsls	r3, r2, #12
     a1a:	f002 020f 	and.w	r2, r2, #15
     a1e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
     a22:	4313      	orrs	r3, r2
   CORE_PIN7_PORTCLEAR = ~RegBits & GP7_DataMask;
     a24:	f083 120f 	eor.w	r2, r3, #983055	; 0xf000f
   CORE_PIN7_PORTSET = RegBits;
     a28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
   CORE_PIN7_PORTCLEAR = ~RegBits & GP7_DataMask;
     a2c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
   WaitUntil_nS(nS_DataHold);  
     a30:	493b      	ldr	r1, [pc, #236]	; (b20 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x308>)
     a32:	6806      	ldr	r6, [r0, #0]
     a34:	483b      	ldr	r0, [pc, #236]	; (b24 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x30c>)
     a36:	686a      	ldr	r2, [r5, #4]
     a38:	6823      	ldr	r3, [r4, #0]
     a3a:	1ad2      	subs	r2, r2, r3
     a3c:	680b      	ldr	r3, [r1, #0]
     a3e:	0c1b      	lsrs	r3, r3, #16
     a40:	fb06 f303 	mul.w	r3, r6, r3
     a44:	085b      	lsrs	r3, r3, #1
     a46:	fba0 7303 	umull	r7, r3, r0, r3
     a4a:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
     a4e:	d3f2      	bcc.n	a36 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x21e>
   DataBufDisable;
     a50:	4b2f      	ldr	r3, [pc, #188]	; (b10 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x2f8>)
     a52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     a56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   TraceLogAddValidData(Data);
     a5a:	e715      	b.n	888 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x70>
            if(IO1[rWRegCurrMenuWAIT] == rmtTeensy && MenuSource[SelItemFullIdx].IOHndlrAssoc != IOH_None) Data |= 0x80; //bit 7 indicates an assigned IOHandler
     a5c:	492b      	ldr	r1, [pc, #172]	; (b0c <IO1Hndlr_TeensyROM(unsigned char, bool)+0x2f4>)
            Data = MenuSource[SelItemFullIdx].ItemType;
     a5e:	4b39      	ldr	r3, [pc, #228]	; (b44 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x32c>)
            if(IO1[rWRegCurrMenuWAIT] == rmtTeensy && MenuSource[SelItemFullIdx].IOHndlrAssoc != IOH_None) Data |= 0x80; //bit 7 indicates an assigned IOHandler
     a60:	6809      	ldr	r1, [r1, #0]
            Data = MenuSource[SelItemFullIdx].ItemType;
     a62:	881b      	ldrh	r3, [r3, #0]
     a64:	4a38      	ldr	r2, [pc, #224]	; (b48 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x330>)
            if(IO1[rWRegCurrMenuWAIT] == rmtTeensy && MenuSource[SelItemFullIdx].IOHndlrAssoc != IOH_None) Data |= 0x80; //bit 7 indicates an assigned IOHandler
     a66:	7a89      	ldrb	r1, [r1, #10]
            Data = MenuSource[SelItemFullIdx].ItemType;
     a68:	0118      	lsls	r0, r3, #4
     a6a:	6812      	ldr	r2, [r2, #0]
            if(IO1[rWRegCurrMenuWAIT] == rmtTeensy && MenuSource[SelItemFullIdx].IOHndlrAssoc != IOH_None) Data |= 0x80; //bit 7 indicates an assigned IOHandler
     a6c:	2901      	cmp	r1, #1
            Data = MenuSource[SelItemFullIdx].ItemType;
     a6e:	eb02 1303 	add.w	r3, r2, r3, lsl #4
     a72:	5c12      	ldrb	r2, [r2, r0]
            if(IO1[rWRegCurrMenuWAIT] == rmtTeensy && MenuSource[SelItemFullIdx].IOHndlrAssoc != IOH_None) Data |= 0x80; //bit 7 indicates an assigned IOHandler
     a74:	f000 813d 	beq.w	cf2 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x4da>
   register uint32_t RegBits = (Data & 0x0F) | ((Data & 0xF0) << 12);
     a78:	0313      	lsls	r3, r2, #12
     a7a:	f002 020f 	and.w	r2, r2, #15
   DataBufEnable; 
     a7e:	4924      	ldr	r1, [pc, #144]	; (b10 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x2f8>)
     a80:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
   register uint32_t RegBits = (Data & 0x0F) | ((Data & 0xF0) << 12);
     a84:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   WaitUntil_nS(nS_DataHold);  
     a88:	4823      	ldr	r0, [pc, #140]	; (b18 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x300>)
   DataBufEnable; 
     a8a:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
   register uint32_t RegBits = (Data & 0x0F) | ((Data & 0xF0) << 12);
     a8e:	4313      	orrs	r3, r2
   CORE_PIN7_PORTSET = RegBits;
     a90:	4c20      	ldr	r4, [pc, #128]	; (b14 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x2fc>)
   WaitUntil_nS(nS_DataHold);  
     a92:	4d22      	ldr	r5, [pc, #136]	; (b1c <IO1Hndlr_TeensyROM(unsigned char, bool)+0x304>)
   CORE_PIN7_PORTCLEAR = ~RegBits & GP7_DataMask;
     a94:	f083 120f 	eor.w	r2, r3, #983055	; 0xf000f
   CORE_PIN7_PORTSET = RegBits;
     a98:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
   CORE_PIN7_PORTCLEAR = ~RegBits & GP7_DataMask;
     a9c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
   WaitUntil_nS(nS_DataHold);  
     aa0:	491f      	ldr	r1, [pc, #124]	; (b20 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x308>)
     aa2:	6806      	ldr	r6, [r0, #0]
     aa4:	481f      	ldr	r0, [pc, #124]	; (b24 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x30c>)
     aa6:	686a      	ldr	r2, [r5, #4]
     aa8:	6823      	ldr	r3, [r4, #0]
     aaa:	1ad2      	subs	r2, r2, r3
     aac:	680b      	ldr	r3, [r1, #0]
     aae:	0c1b      	lsrs	r3, r3, #16
     ab0:	fb06 f303 	mul.w	r3, r6, r3
     ab4:	085b      	lsrs	r3, r3, #1
     ab6:	fba0 7303 	umull	r7, r3, r0, r3
     aba:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
     abe:	d3f2      	bcc.n	aa6 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x28e>
   DataBufDisable;
     ac0:	4b13      	ldr	r3, [pc, #76]	; (b10 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x2f8>)
     ac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     ac6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   TraceLogAddValidData(Data);
     aca:	e6dd      	b.n	888 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x70>
     acc:	4a0f      	ldr	r2, [pc, #60]	; (b0c <IO1Hndlr_TeensyROM(unsigned char, bool)+0x2f4>)
     ace:	6811      	ldr	r1, [r2, #0]
            IO1[Address]=Data;
     ad0:	540b      	strb	r3, [r1, r0]
}
     ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            IO1[wRegSearchLetterWAIT] = Data;
     ad4:	4a0d      	ldr	r2, [pc, #52]	; (b0c <IO1Hndlr_TeensyROM(unsigned char, bool)+0x2f4>)
            IO1[rwRegStatus] = rsSearchForLetter; //work this in the main code
     ad6:	2107      	movs	r1, #7
            IO1[wRegSearchLetterWAIT] = Data;
     ad8:	6812      	ldr	r2, [r2, #0]
     ada:	7553      	strb	r3, [r2, #21]
            IO1[rwRegStatus] = rsSearchForLetter; //work this in the main code
     adc:	7051      	strb	r1, [r2, #1]
}
     ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            IO1[rWRegCurrMenuWAIT]=Data;
     ae0:	4a0a      	ldr	r2, [pc, #40]	; (b0c <IO1Hndlr_TeensyROM(unsigned char, bool)+0x2f4>)
            IO1[rwRegStatus] = rsChangeMenu; //work this in the main code
     ae2:	2100      	movs	r1, #0
            IO1[rWRegCurrMenuWAIT]=Data;
     ae4:	6812      	ldr	r2, [r2, #0]
     ae6:	7293      	strb	r3, [r2, #10]
            IO1[rwRegStatus] = rsChangeMenu; //work this in the main code
     ae8:	7051      	strb	r1, [r2, #1]
}
     aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            switch(Data)
     aec:	2b09      	cmp	r3, #9
     aee:	f63f aecb 	bhi.w	888 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x70>
     af2:	e8df f013 	tbh	[pc, r3, lsl #1]
     af6:	00c7      	.short	0x00c7
     af8:	00f900bf 	.word	0x00f900bf
     afc:	00ef00f4 	.word	0x00ef00f4
     b00:	00e500ea 	.word	0x00e500ea
     b04:	00db00e0 	.word	0x00db00e0
     b08:	00d6      	.short	0x00d6
     b0a:	bf00      	nop
     b0c:	2000dae4 	.word	0x2000dae4
     b10:	42004000 	.word	0x42004000
     b14:	2005dfcc 	.word	0x2005dfcc
     b18:	2000c948 	.word	0x2000c948
     b1c:	e0001000 	.word	0xe0001000
     b20:	2000bd24 	.word	0x2000bd24
     b24:	08972311 	.word	0x08972311
     b28:	2000c94c 	.word	0x2000c94c
     b2c:	2005e528 	.word	0x2005e528
     b30:	2005dfe4 	.word	0x2005dfe4
     b34:	2005dfe8 	.word	0x2005dfe8
     b38:	2005e52a 	.word	0x2005e52a
     b3c:	2005e428 	.word	0x2005e428
     b40:	2000bc68 	.word	0x2000bc68
     b44:	2005e526 	.word	0x2005e526
     b48:	2000daf0 	.word	0x2000daf0
            StringOffset = 0;
     b4c:	4a74      	ldr	r2, [pc, #464]	; (d20 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x508>)
     b4e:	2100      	movs	r1, #0
     b50:	8011      	strh	r1, [r2, #0]
            switch(Data)
     b52:	2b06      	cmp	r3, #6
     b54:	f63f ae98 	bhi.w	888 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x70>
     b58:	e8df f003 	tbb	[pc, r3]
     b5c:	5b885f68 	.word	0x5b885f68
     b60:	4d52      	.short	0x4d52
     b62:	49          	.byte	0x49
     b63:	00          	.byte	0x00
            IO1[rwRegNextIOHndlr]= Data;
     b64:	4b6f      	ldr	r3, [pc, #444]	; (d24 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x50c>)
     b66:	2200      	movs	r2, #0
            eepAddrToWrite = eepAdNextIOHndlr;
     b68:	496f      	ldr	r1, [pc, #444]	; (d28 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x510>)
     b6a:	2406      	movs	r4, #6
            IO1[rwRegNextIOHndlr]= Data;
     b6c:	681b      	ldr	r3, [r3, #0]
            eepDataToWrite = Data;
     b6e:	486f      	ldr	r0, [pc, #444]	; (d2c <IO1Hndlr_TeensyROM(unsigned char, bool)+0x514>)
            IO1[rwRegNextIOHndlr]= Data;
     b70:	74da      	strb	r2, [r3, #19]
            eepAddrToWrite = eepAdNextIOHndlr;
     b72:	700c      	strb	r4, [r1, #0]
            IO1[rwRegStatus] = rsWriteEEPROM; //work this in the main code
     b74:	2104      	movs	r1, #4
            eepDataToWrite = Data;
     b76:	7002      	strb	r2, [r0, #0]
            IO1[rwRegStatus] = rsWriteEEPROM; //work this in the main code
     b78:	7059      	strb	r1, [r3, #1]
}
     b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            IO1[rwRegPwrUpDefaults]= Data;
     b7c:	4a69      	ldr	r2, [pc, #420]	; (d24 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x50c>)
            eepAddrToWrite = eepAdPwrUpDefaults;
     b7e:	2104      	movs	r1, #4
     b80:	4c69      	ldr	r4, [pc, #420]	; (d28 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x510>)
            IO1[rwRegPwrUpDefaults]= Data;
     b82:	6812      	ldr	r2, [r2, #0]
            eepDataToWrite = Data;
     b84:	4869      	ldr	r0, [pc, #420]	; (d2c <IO1Hndlr_TeensyROM(unsigned char, bool)+0x514>)
            IO1[rwRegPwrUpDefaults]= Data;
     b86:	7453      	strb	r3, [r2, #17]
            eepAddrToWrite = eepAdPwrUpDefaults;
     b88:	7021      	strb	r1, [r4, #0]
            eepDataToWrite = Data;
     b8a:	7003      	strb	r3, [r0, #0]
            IO1[rwRegStatus] = rsWriteEEPROM; //work this in the main code
     b8c:	7051      	strb	r1, [r2, #1]
}
     b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            IO1[rRegNumItemsOnPage] = (NumItemsFull > Data*MaxItemsPerPage ? MaxItemsPerPage : NumItemsFull-(Data-1)*MaxItemsPerPage);
     b90:	4967      	ldr	r1, [pc, #412]	; (d30 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x518>)
     b92:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
            IO1[rwRegPageNumber]=Data;
     b96:	4863      	ldr	r0, [pc, #396]	; (d24 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x50c>)
            IO1[rRegNumItemsOnPage] = (NumItemsFull > Data*MaxItemsPerPage ? MaxItemsPerPage : NumItemsFull-(Data-1)*MaxItemsPerPage);
     b98:	8809      	ldrh	r1, [r1, #0]
     b9a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
            IO1[rwRegPageNumber]=Data;
     b9e:	6800      	ldr	r0, [r0, #0]
            IO1[rRegNumItemsOnPage] = (NumItemsFull > Data*MaxItemsPerPage ? MaxItemsPerPage : NumItemsFull-(Data-1)*MaxItemsPerPage);
     ba0:	4291      	cmp	r1, r2
            IO1[rwRegPageNumber]=Data;
     ba2:	7383      	strb	r3, [r0, #14]
            IO1[rRegNumItemsOnPage] = (NumItemsFull > Data*MaxItemsPerPage ? MaxItemsPerPage : NumItemsFull-(Data-1)*MaxItemsPerPage);
     ba4:	f300 80ac 	bgt.w	d00 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x4e8>
     ba8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
     bac:	3113      	adds	r1, #19
     bae:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
     bb2:	ebc3 0383 	rsb	r3, r3, r3, lsl #2
     bb6:	440b      	add	r3, r1
     bb8:	b2db      	uxtb	r3, r3
     bba:	7343      	strb	r3, [r0, #13]
}
     bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            SelItemFullIdx=Data+(IO1[rwRegPageNumber]-1)*MaxItemsPerPage;
     bbe:	4a59      	ldr	r2, [pc, #356]	; (d24 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x50c>)
     bc0:	4c5c      	ldr	r4, [pc, #368]	; (d34 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x51c>)
     bc2:	6811      	ldr	r1, [r2, #0]
     bc4:	7b8a      	ldrb	r2, [r1, #14]
     bc6:	3a01      	subs	r2, #1
     bc8:	eb02 05c2 	add.w	r5, r2, r2, lsl #3
     bcc:	eb02 0245 	add.w	r2, r2, r5, lsl #1
     bd0:	441a      	add	r2, r3
     bd2:	8022      	strh	r2, [r4, #0]
            IO1[Address]=Data;
     bd4:	540b      	strb	r3, [r1, r0]
            break;    
     bd6:	e77c      	b.n	ad2 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x2ba>
            IO1[rwRegTimezone]= Data;
     bd8:	4a52      	ldr	r2, [pc, #328]	; (d24 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x50c>)
            eepAddrToWrite = eepAdTimezone;
     bda:	2405      	movs	r4, #5
     bdc:	4952      	ldr	r1, [pc, #328]	; (d28 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x510>)
            IO1[rwRegTimezone]= Data;
     bde:	6812      	ldr	r2, [r2, #0]
            eepDataToWrite = Data;
     be0:	4852      	ldr	r0, [pc, #328]	; (d2c <IO1Hndlr_TeensyROM(unsigned char, bool)+0x514>)
            IO1[rwRegTimezone]= Data;
     be2:	7493      	strb	r3, [r2, #18]
            eepAddrToWrite = eepAdTimezone;
     be4:	700c      	strb	r4, [r1, #0]
            IO1[rwRegStatus] = rsWriteEEPROM; //work this in the main code
     be6:	2104      	movs	r1, #4
            eepDataToWrite = Data;
     be8:	7003      	strb	r3, [r0, #0]
            IO1[rwRegStatus] = rsWriteEEPROM; //work this in the main code
     bea:	7051      	strb	r1, [r2, #1]
}
     bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                  ptrSerialString = StrMachineInfo;
     bee:	4b52      	ldr	r3, [pc, #328]	; (d38 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x520>)
     bf0:	4a52      	ldr	r2, [pc, #328]	; (d3c <IO1Hndlr_TeensyROM(unsigned char, bool)+0x524>)
     bf2:	601a      	str	r2, [r3, #0]
}
     bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                  ptrSerialString = StrSIDInfo;
     bf6:	4a52      	ldr	r2, [pc, #328]	; (d40 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x528>)
     bf8:	4b4f      	ldr	r3, [pc, #316]	; (d38 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x520>)
     bfa:	6812      	ldr	r2, [r2, #0]
     bfc:	601a      	str	r2, [r3, #0]
}
     bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                     uint16_t Len = strlen(DriveDirPath);
     c00:	4c50      	ldr	r4, [pc, #320]	; (d44 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x52c>)
     c02:	4620      	mov	r0, r4
     c04:	f010 fe7c 	bl	11900 <strlen>
                     if (Len >= 40) 
     c08:	2827      	cmp	r0, #39	; 0x27
     c0a:	d87c      	bhi.n	d06 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x4ee>
                     else ptrSerialString = DriveDirPath;
     c0c:	4b4a      	ldr	r3, [pc, #296]	; (d38 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x520>)
     c0e:	601c      	str	r4, [r3, #0]
}
     c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                  ptrSerialString = strVersionNumber;
     c12:	4b49      	ldr	r3, [pc, #292]	; (d38 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x520>)
     c14:	4a4c      	ldr	r2, [pc, #304]	; (d48 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x530>)
     c16:	601a      	str	r2, [r3, #0]
}
     c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                  ptrSerialString = IOHandler[IO1[rwRegNextIOHndlr]]->Name;
     c1a:	4942      	ldr	r1, [pc, #264]	; (d24 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x50c>)
     c1c:	4a4b      	ldr	r2, [pc, #300]	; (d4c <IO1Hndlr_TeensyROM(unsigned char, bool)+0x534>)
     c1e:	6809      	ldr	r1, [r1, #0]
     c20:	4b45      	ldr	r3, [pc, #276]	; (d38 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x520>)
     c22:	7cc9      	ldrb	r1, [r1, #19]
     c24:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
     c28:	601a      	str	r2, [r3, #0]
}
     c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                  memcpy(SerialStringBuf, MenuSource[SelItemFullIdx].Name, MaxItemDispLength);
     c2c:	4b48      	ldr	r3, [pc, #288]	; (d50 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x538>)
     c2e:	4a41      	ldr	r2, [pc, #260]	; (d34 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x51c>)
     c30:	681b      	ldr	r3, [r3, #0]
     c32:	8812      	ldrh	r2, [r2, #0]
     c34:	4f47      	ldr	r7, [pc, #284]	; (d54 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x53c>)
     c36:	eb03 1302 	add.w	r3, r3, r2, lsl #4
     c3a:	463e      	mov	r6, r7
     c3c:	685c      	ldr	r4, [r3, #4]
     c3e:	f104 0c20 	add.w	ip, r4, #32
     c42:	6820      	ldr	r0, [r4, #0]
     c44:	3410      	adds	r4, #16
     c46:	f854 1c0c 	ldr.w	r1, [r4, #-12]
     c4a:	4635      	mov	r5, r6
     c4c:	f854 2c08 	ldr.w	r2, [r4, #-8]
     c50:	3610      	adds	r6, #16
     c52:	f854 3c04 	ldr.w	r3, [r4, #-4]
     c56:	4564      	cmp	r4, ip
     c58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     c5a:	d1f2      	bne.n	c42 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x42a>
     c5c:	8821      	ldrh	r1, [r4, #0]
                  SerialStringBuf[MaxItemDispLength-1] = 0;
     c5e:	2200      	movs	r2, #0
                  ptrSerialString = SerialStringBuf;
     c60:	4b35      	ldr	r3, [pc, #212]	; (d38 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x520>)
                  memcpy(SerialStringBuf, MenuSource[SelItemFullIdx].Name, MaxItemDispLength);
     c62:	8031      	strh	r1, [r6, #0]
                  SerialStringBuf[MaxItemDispLength-1] = 0;
     c64:	f887 2022 	strb.w	r2, [r7, #34]	; 0x22
                  ptrSerialString = SerialStringBuf;
     c68:	601f      	str	r7, [r3, #0]
}
     c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                  ptrSerialString = SerialStringBuf; 
     c6c:	4b32      	ldr	r3, [pc, #200]	; (d38 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x520>)
     c6e:	4a39      	ldr	r2, [pc, #228]	; (d54 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x53c>)
     c70:	601a      	str	r2, [r3, #0]
}
     c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                  IO1[rwRegStatus] = rsIOHWinit; //Support IO handlers at reset
     c74:	4b2b      	ldr	r3, [pc, #172]	; (d24 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x50c>)
                  doReset=true;
     c76:	2001      	movs	r0, #1
     c78:	4937      	ldr	r1, [pc, #220]	; (d58 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x540>)
                  IO1[rwRegStatus] = rsIOHWinit; //Support IO handlers at reset
     c7a:	2203      	movs	r2, #3
     c7c:	681b      	ldr	r3, [r3, #0]
                  doReset=true;
     c7e:	7008      	strb	r0, [r1, #0]
                  IO1[rwRegStatus] = rsIOHWinit; //Support IO handlers at reset
     c80:	705a      	strb	r2, [r3, #1]
}
     c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                  SetGameDeassert;
     c84:	4a35      	ldr	r2, [pc, #212]	; (d5c <IO1Hndlr_TeensyROM(unsigned char, bool)+0x544>)
     c86:	f44f 5480 	mov.w	r4, #4096	; 0x1000
                  SetExROMDeassert;      
     c8a:	f44f 6000 	mov.w	r0, #2048	; 0x800
                  LOROM_Image = NULL;
     c8e:	2300      	movs	r3, #0
                  SetGameDeassert;
     c90:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
                  LOROM_Image = NULL;
     c94:	4932      	ldr	r1, [pc, #200]	; (d60 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x548>)
                  SetExROMDeassert;      
     c96:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
                  HIROM_Image = NULL;  
     c9a:	4a32      	ldr	r2, [pc, #200]	; (d64 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x54c>)
                  LOROM_Image = NULL;
     c9c:	600b      	str	r3, [r1, #0]
                  HIROM_Image = NULL;  
     c9e:	6013      	str	r3, [r2, #0]
}
     ca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                  IO1[rwRegStatus] = rsLastPicture; //work this in the main code
     ca2:	4b20      	ldr	r3, [pc, #128]	; (d24 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x50c>)
     ca4:	220a      	movs	r2, #10
     ca6:	681b      	ldr	r3, [r3, #0]
     ca8:	705a      	strb	r2, [r3, #1]
}
     caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                  IO1[rwRegStatus] = rsNextPicture; //work this in the main code
     cac:	4b1d      	ldr	r3, [pc, #116]	; (d24 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x50c>)
     cae:	2209      	movs	r2, #9
     cb0:	681b      	ldr	r3, [r3, #0]
     cb2:	705a      	strb	r2, [r3, #1]
}
     cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                  IO1[rwRegStatus] = rsLoadSIDforXfer; //work this in the main code
     cb6:	4b1b      	ldr	r3, [pc, #108]	; (d24 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x50c>)
     cb8:	2208      	movs	r2, #8
     cba:	681b      	ldr	r3, [r3, #0]
     cbc:	705a      	strb	r2, [r3, #1]
}
     cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                  IO1[rwRegStatus] = rsUpDirectory; //work this in the main code
     cc0:	4b18      	ldr	r3, [pc, #96]	; (d24 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x50c>)
     cc2:	2206      	movs	r2, #6
     cc4:	681b      	ldr	r3, [r3, #0]
     cc6:	705a      	strb	r2, [r3, #1]
}
     cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                  IO1[rwRegStatus] = rsMakeBuildCPUInfoStr; //work this in the main code
     cca:	4b16      	ldr	r3, [pc, #88]	; (d24 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x50c>)
     ccc:	2205      	movs	r2, #5
     cce:	681b      	ldr	r3, [r3, #0]
     cd0:	705a      	strb	r2, [r3, #1]
}
     cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                  IO1[rwRegStatus] = rsIOHWinit; //Support IO handlers in PRG
     cd4:	4b13      	ldr	r3, [pc, #76]	; (d24 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x50c>)
     cd6:	2203      	movs	r2, #3
     cd8:	681b      	ldr	r3, [r3, #0]
     cda:	705a      	strb	r2, [r3, #1]
}
     cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                  IO1[rwRegStatus] = rsGetTime;   //work this in the main code
     cde:	4b11      	ldr	r3, [pc, #68]	; (d24 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x50c>)
     ce0:	2202      	movs	r2, #2
     ce2:	681b      	ldr	r3, [r3, #0]
     ce4:	705a      	strb	r2, [r3, #1]
}
     ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                  IO1[rwRegStatus] = rsStartItem; //work this in the main code
     ce8:	4b0e      	ldr	r3, [pc, #56]	; (d24 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x50c>)
     cea:	2201      	movs	r2, #1
     cec:	681b      	ldr	r3, [r3, #0]
     cee:	705a      	strb	r2, [r3, #1]
}
     cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(IO1[rWRegCurrMenuWAIT] == rmtTeensy && MenuSource[SelItemFullIdx].IOHndlrAssoc != IOH_None) Data |= 0x80; //bit 7 indicates an assigned IOHandler
     cf2:	785b      	ldrb	r3, [r3, #1]
     cf4:	2b00      	cmp	r3, #0
     cf6:	f43f aebf 	beq.w	a78 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x260>
     cfa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     cfe:	e6bb      	b.n	a78 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x260>
            IO1[rRegNumItemsOnPage] = (NumItemsFull > Data*MaxItemsPerPage ? MaxItemsPerPage : NumItemsFull-(Data-1)*MaxItemsPerPage);
     d00:	2313      	movs	r3, #19
     d02:	7343      	strb	r3, [r0, #13]
            break;
     d04:	e75a      	b.n	bbc <IO1Hndlr_TeensyROM(unsigned char, bool)+0x3a4>
                        strcpy(SerialStringBuf, "...");
     d06:	4d13      	ldr	r5, [pc, #76]	; (d54 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x53c>)
                        strcat(SerialStringBuf, DriveDirPath+Len-36);
     d08:	f1a0 0124 	sub.w	r1, r0, #36	; 0x24
                        strcpy(SerialStringBuf, "...");
     d0c:	4a16      	ldr	r2, [pc, #88]	; (d68 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x550>)
     d0e:	4628      	mov	r0, r5
                        strcat(SerialStringBuf, DriveDirPath+Len-36);
     d10:	4421      	add	r1, r4
                        strcpy(SerialStringBuf, "...");
     d12:	f840 2b03 	str.w	r2, [r0], #3
                        strcat(SerialStringBuf, DriveDirPath+Len-36);
     d16:	f010 fd41 	bl	1179c <strcpy>
                        ptrSerialString = SerialStringBuf;
     d1a:	4b07      	ldr	r3, [pc, #28]	; (d38 <IO1Hndlr_TeensyROM(unsigned char, bool)+0x520>)
     d1c:	601d      	str	r5, [r3, #0]
}
     d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d20:	2005e52a 	.word	0x2005e52a
     d24:	2000dae4 	.word	0x2000dae4
     d28:	2005e543 	.word	0x2005e543
     d2c:	2005e544 	.word	0x2005e544
     d30:	2005e524 	.word	0x2005e524
     d34:	2005e526 	.word	0x2005e526
     d38:	2005e428 	.word	0x2005e428
     d3c:	2005dfd0 	.word	0x2005dfd0
     d40:	2005dfe0 	.word	0x2005dfe0
     d44:	2000d8b4 	.word	0x2000d8b4
     d48:	2000c960 	.word	0x2000c960
     d4c:	2000bd4c 	.word	0x2000bd4c
     d50:	2000daf0 	.word	0x2000daf0
     d54:	2000bfe8 	.word	0x2000bfe8
     d58:	2000c987 	.word	0x2000c987
     d5c:	42004000 	.word	0x42004000
     d60:	2000dae8 	.word	0x2000dae8
     d64:	2000dae0 	.word	0x2000dae0
     d68:	002e2e2e 	.word	0x002e2e2e

00000d6c <InitHndlr_EasyFlash()>:
{
     d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     d70:	4d32      	ldr	r5, [pc, #200]	; (e3c <InitHndlr_EasyFlash()+0xd0>)
   for(uint8_t BankNum = 0; BankNum < NumDecodeBanks; BankNum++) {BankDecode[BankNum][0]=NULL;BankDecode[BankNum][1]=NULL;}
     d72:	2200      	movs	r2, #0
     d74:	462b      	mov	r3, r5
     d76:	f505 7100 	add.w	r1, r5, #512	; 0x200
     d7a:	e9c3 2200 	strd	r2, r2, [r3]
     d7e:	3308      	adds	r3, #8
     d80:	428b      	cmp	r3, r1
     d82:	d1fa      	bne.n	d7a <InitHndlr_EasyFlash()+0xe>
   for(uint8_t ChipNum = 0; ChipNum < NumCrtChips; ChipNum++)
     d84:	4f2e      	ldr	r7, [pc, #184]	; (e40 <InitHndlr_EasyFlash()+0xd4>)
     d86:	783b      	ldrb	r3, [r7, #0]
     d88:	b34b      	cbz	r3, dde <InitHndlr_EasyFlash()+0x72>
     d8a:	2400      	movs	r4, #0
     d8c:	4e2d      	ldr	r6, [pc, #180]	; (e44 <InitHndlr_EasyFlash()+0xd8>)
      else Serial.printf("Unexp Bank# (%d) in chip %d\n", CrtChips[ChipNum].BankNum, ChipNum);
     d8e:	f8df 90d4 	ldr.w	r9, [pc, #212]	; e64 <InitHndlr_EasyFlash()+0xf8>
     d92:	4623      	mov	r3, r4
     d94:	f8df 80c8 	ldr.w	r8, [pc, #200]	; e60 <InitHndlr_EasyFlash()+0xf4>
     d98:	e00e      	b.n	db8 <InitHndlr_EasyFlash()+0x4c>
         BankDecode[CrtChips[ChipNum].BankNum][CrtChips[ChipNum].LoadAddress == 0x8000 ? 0 : 1] = CrtChips[ChipNum].ChipROM;
     d9a:	f8bc 2004 	ldrh.w	r2, [ip, #4]
   for(uint8_t ChipNum = 0; ChipNum < NumCrtChips; ChipNum++)
     d9e:	3401      	adds	r4, #1
         BankDecode[CrtChips[ChipNum].BankNum][CrtChips[ChipNum].LoadAddress == 0x8000 ? 0 : 1] = CrtChips[ChipNum].ChipROM;
     da0:	f856 3021 	ldr.w	r3, [r6, r1, lsl #2]
     da4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
     da8:	bf18      	it	ne
     daa:	3001      	addne	r0, #1
   for(uint8_t ChipNum = 0; ChipNum < NumCrtChips; ChipNum++)
     dac:	783a      	ldrb	r2, [r7, #0]
         BankDecode[CrtChips[ChipNum].BankNum][CrtChips[ChipNum].LoadAddress == 0x8000 ? 0 : 1] = CrtChips[ChipNum].ChipROM;
     dae:	f845 3020 	str.w	r3, [r5, r0, lsl #2]
   for(uint8_t ChipNum = 0; ChipNum < NumCrtChips; ChipNum++)
     db2:	b2e3      	uxtb	r3, r4
     db4:	429a      	cmp	r2, r3
     db6:	d912      	bls.n	dde <InitHndlr_EasyFlash()+0x72>
      if (CrtChips[ChipNum].BankNum < NumDecodeBanks)
     db8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
     dbc:	eb06 0c81 	add.w	ip, r6, r1, lsl #2
     dc0:	f8bc 2008 	ldrh.w	r2, [ip, #8]
     dc4:	2a3f      	cmp	r2, #63	; 0x3f
         BankDecode[CrtChips[ChipNum].BankNum][CrtChips[ChipNum].LoadAddress == 0x8000 ? 0 : 1] = CrtChips[ChipNum].ChipROM;
     dc6:	ea4f 0042 	mov.w	r0, r2, lsl #1
      if (CrtChips[ChipNum].BankNum < NumDecodeBanks)
     dca:	d9e6      	bls.n	d9a <InitHndlr_EasyFlash()+0x2e>
   for(uint8_t ChipNum = 0; ChipNum < NumCrtChips; ChipNum++)
     dcc:	3401      	adds	r4, #1
      else Serial.printf("Unexp Bank# (%d) in chip %d\n", CrtChips[ChipNum].BankNum, ChipNum);
     dce:	4649      	mov	r1, r9
     dd0:	4640      	mov	r0, r8
     dd2:	f00b fce9 	bl	c7a8 <Print::printf(char const*, ...)>
   for(uint8_t ChipNum = 0; ChipNum < NumCrtChips; ChipNum++)
     dd6:	783a      	ldrb	r2, [r7, #0]
     dd8:	b2e3      	uxtb	r3, r4
     dda:	429a      	cmp	r2, r3
     ddc:	d8ec      	bhi.n	db8 <InitHndlr_EasyFlash()+0x4c>
   memset(EZFlashRAM, 0, 256);
     dde:	f44f 7280 	mov.w	r2, #256	; 0x100
     de2:	2100      	movs	r1, #0
     de4:	4818      	ldr	r0, [pc, #96]	; (e48 <InitHndlr_EasyFlash()+0xdc>)
     de6:	f010 f8e5 	bl	10fb4 <memset>
   HIROM_Image = BankDecode[0][1];
     dea:	686a      	ldr	r2, [r5, #4]
   LOROM_Image = BankDecode[0][0];
     dec:	4817      	ldr	r0, [pc, #92]	; (e4c <InitHndlr_EasyFlash()+0xe0>)
     dee:	682c      	ldr	r4, [r5, #0]
   if(memcmp(HIROM_Image+0x1800, "eapi", 4)==0) Serial.printf("EAPI found\n");
     df0:	f502 53c0 	add.w	r3, r2, #6144	; 0x1800
   HIROM_Image = BankDecode[0][1];
     df4:	4916      	ldr	r1, [pc, #88]	; (e50 <InitHndlr_EasyFlash()+0xe4>)
   LOROM_Image = BankDecode[0][0];
     df6:	6004      	str	r4, [r0, #0]
   HIROM_Image = BankDecode[0][1];
     df8:	600a      	str	r2, [r1, #0]
   if(memcmp(HIROM_Image+0x1800, "eapi", 4)==0) Serial.printf("EAPI found\n");
     dfa:	781a      	ldrb	r2, [r3, #0]
     dfc:	2a65      	cmp	r2, #101	; 0x65
     dfe:	d00d      	beq.n	e1c <InitHndlr_EasyFlash()+0xb0>
   SetGameAssert;
     e00:	4b14      	ldr	r3, [pc, #80]	; (e54 <InitHndlr_EasyFlash()+0xe8>)
     e02:	f44f 5480 	mov.w	r4, #4096	; 0x1000
   SetExROMDeassert;
     e06:	f44f 6000 	mov.w	r0, #2048	; 0x800
   EmulateVicCycles = false;
     e0a:	4a13      	ldr	r2, [pc, #76]	; (e58 <InitHndlr_EasyFlash()+0xec>)
     e0c:	2100      	movs	r1, #0
   SetGameAssert;
     e0e:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
   SetExROMDeassert;
     e12:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
   EmulateVicCycles = false;
     e16:	7011      	strb	r1, [r2, #0]
}
     e18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   if(memcmp(HIROM_Image+0x1800, "eapi", 4)==0) Serial.printf("EAPI found\n");
     e1c:	785a      	ldrb	r2, [r3, #1]
     e1e:	3301      	adds	r3, #1
     e20:	2a61      	cmp	r2, #97	; 0x61
     e22:	d1ed      	bne.n	e00 <InitHndlr_EasyFlash()+0x94>
     e24:	f813 2f01 	ldrb.w	r2, [r3, #1]!
     e28:	2a70      	cmp	r2, #112	; 0x70
     e2a:	d1e9      	bne.n	e00 <InitHndlr_EasyFlash()+0x94>
     e2c:	785b      	ldrb	r3, [r3, #1]
     e2e:	2b69      	cmp	r3, #105	; 0x69
     e30:	d1e6      	bne.n	e00 <InitHndlr_EasyFlash()+0x94>
     e32:	490a      	ldr	r1, [pc, #40]	; (e5c <InitHndlr_EasyFlash()+0xf0>)
     e34:	480a      	ldr	r0, [pc, #40]	; (e60 <InitHndlr_EasyFlash()+0xf4>)
     e36:	f00b fcb7 	bl	c7a8 <Print::printf(char const*, ...)>
     e3a:	e7e1      	b.n	e00 <InitHndlr_EasyFlash()+0x94>
     e3c:	2000d0a8 	.word	0x2000d0a8
     e40:	2005e536 	.word	0x2005e536
     e44:	2000d2ac 	.word	0x2000d2ac
     e48:	2000d9e0 	.word	0x2000d9e0
     e4c:	2000dae8 	.word	0x2000dae8
     e50:	2000dae0 	.word	0x2000dae0
     e54:	42004000 	.word	0x42004000
     e58:	2005e535 	.word	0x2005e535
     e5c:	20001c10 	.word	0x20001c10
     e60:	2000bfd8 	.word	0x2000bfd8
     e64:	20001be8 	.word	0x20001be8

00000e68 <SDFile::close()>:
	virtual void close() {
     e68:	b510      	push	{r4, lr}
     e6a:	4604      	mov	r4, r0
		if (filename) {
     e6c:	6d80      	ldr	r0, [r0, #88]	; 0x58
     e6e:	b118      	cbz	r0, e78 <SDFile::close()+0x10>
			free(filename);
     e70:	f00e f93c 	bl	f0ec <free>
			filename = nullptr;
     e74:	2300      	movs	r3, #0
     e76:	65a3      	str	r3, [r4, #88]	; 0x58
     e78:	6d23      	ldr	r3, [r4, #80]	; 0x50
     e7a:	b12b      	cbz	r3, e88 <SDFile::close()+0x20>
			sdfatfile.close();
     e7c:	f104 0018 	add.w	r0, r4, #24
	}
     e80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			sdfatfile.close();
     e84:	f008 bcb6 	b.w	97f4 <FsBaseFile::close()>
     e88:	6d63      	ldr	r3, [r4, #84]	; 0x54
     e8a:	2b00      	cmp	r3, #0
     e8c:	d1f6      	bne.n	e7c <SDFile::close()+0x14>
	}
     e8e:	bd10      	pop	{r4, pc}

00000e90 <SDClass::open(char const*, unsigned char)>:
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
     e90:	2b01      	cmp	r3, #1
	File open(const char *filepath, uint8_t mode = FILE_READ) {
     e92:	b5f0      	push	{r4, r5, r6, r7, lr}
     e94:	4605      	mov	r5, r0
     e96:	b095      	sub	sp, #84	; 0x54
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
     e98:	d03d      	beq.n	f16 <SDClass::open(char const*, unsigned char)+0x86>
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
     e9a:	2b02      	cmp	r3, #2
     e9c:	f240 2002 	movw	r0, #514	; 0x202
		SDFAT_FILE file = sdfs.open(filepath, flags);
     ea0:	f101 0104 	add.w	r1, r1, #4
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
     ea4:	bf0c      	ite	eq
     ea6:	4603      	moveq	r3, r0
     ea8:	2300      	movne	r3, #0
		SDFAT_FILE file = sdfs.open(filepath, flags);
     eaa:	4668      	mov	r0, sp
     eac:	f008 fdbc 	bl	9a28 <FsVolume::open(char const*, int)>
     eb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
     eb2:	2b00      	cmp	r3, #0
     eb4:	d038      	beq.n	f28 <SDClass::open(char const*, unsigned char)+0x98>
		if (file) return File(new SDFile(file));
     eb6:	205c      	movs	r0, #92	; 0x5c
class FileImpl {
     eb8:	2600      	movs	r6, #0
     eba:	f00c fbe3 	bl	d684 <operator new(unsigned int)>
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
     ebe:	4b21      	ldr	r3, [pc, #132]	; (f44 <SDClass::open(char const*, unsigned char)+0xb4>)
     ec0:	af04      	add	r7, sp, #16
		if (file) return File(new SDFile(file));
     ec2:	4604      	mov	r4, r0
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
     ec4:	e9c0 3600 	strd	r3, r6, [r0]
class Print
     ec8:	9b01      	ldr	r3, [sp, #4]
     eca:	4639      	mov	r1, r7
     ecc:	3018      	adds	r0, #24
     ece:	f840 3c0c 	str.w	r3, [r0, #-12]
class Stream : public Print
     ed2:	4b1d      	ldr	r3, [pc, #116]	; (f48 <SDClass::open(char const*, unsigned char)+0xb8>)
     ed4:	f840 3c10 	str.w	r3, [r0, #-16]
     ed8:	9b02      	ldr	r3, [sp, #8]
     eda:	f840 3c08 	str.w	r3, [r0, #-8]
     ede:	f89d 300c 	ldrb.w	r3, [sp, #12]
     ee2:	f800 3c04 	strb.w	r3, [r0, #-4]
     ee6:	f008 fc43 	bl	9770 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     eea:	4b18      	ldr	r3, [pc, #96]	; (f4c <SDClass::open(char const*, unsigned char)+0xbc>)
	constexpr Stream() : _timeout(1000), read_error(0) {}
     eec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     ef0:	65a6      	str	r6, [r4, #88]	; 0x58
     ef2:	60a3      	str	r3, [r4, #8]
	File(FileImpl *file) {
     ef4:	4b16      	ldr	r3, [pc, #88]	; (f50 <SDClass::open(char const*, unsigned char)+0xc0>)
	constexpr Print() : write_error(0) {}
     ef6:	606e      	str	r6, [r5, #4]
     ef8:	602b      	str	r3, [r5, #0]
		if (f) f->refcount++;
     efa:	6863      	ldr	r3, [r4, #4]
     efc:	732e      	strb	r6, [r5, #12]
     efe:	3301      	adds	r3, #1
     f00:	60aa      	str	r2, [r5, #8]
		f = file;
     f02:	612c      	str	r4, [r5, #16]
		if (f) f->refcount++;
     f04:	6063      	str	r3, [r4, #4]
     f06:	4b13      	ldr	r3, [pc, #76]	; (f54 <SDClass::open(char const*, unsigned char)+0xc4>)
  ~FsBaseFile() {close();}
     f08:	4638      	mov	r0, r7
     f0a:	9300      	str	r3, [sp, #0]
     f0c:	f008 fc72 	bl	97f4 <FsBaseFile::close()>
		return File();
	}
     f10:	4628      	mov	r0, r5
     f12:	b015      	add	sp, #84	; 0x54
     f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
     f16:	f244 2302 	movw	r3, #16898	; 0x4202
		SDFAT_FILE file = sdfs.open(filepath, flags);
     f1a:	3104      	adds	r1, #4
     f1c:	4668      	mov	r0, sp
     f1e:	f008 fd83 	bl	9a28 <FsVolume::open(char const*, int)>
  bool isOpen() const {return m_fFile || m_xFile;}
     f22:	9b12      	ldr	r3, [sp, #72]	; 0x48
     f24:	2b00      	cmp	r3, #0
     f26:	d1c6      	bne.n	eb6 <SDClass::open(char const*, unsigned char)+0x26>
     f28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
     f2a:	2b00      	cmp	r3, #0
     f2c:	d1c3      	bne.n	eb6 <SDClass::open(char const*, unsigned char)+0x26>
     f2e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	constexpr File() : f(nullptr) { }
     f32:	4a07      	ldr	r2, [pc, #28]	; (f50 <SDClass::open(char const*, unsigned char)+0xc0>)
     f34:	af04      	add	r7, sp, #16
     f36:	732b      	strb	r3, [r5, #12]
     f38:	602a      	str	r2, [r5, #0]
     f3a:	612b      	str	r3, [r5, #16]
     f3c:	e9c5 3101 	strd	r3, r1, [r5, #4]
     f40:	e7e1      	b.n	f06 <SDClass::open(char const*, unsigned char)+0x76>
     f42:	bf00      	nop
     f44:	20003358 	.word	0x20003358
     f48:	200033b4 	.word	0x200033b4
     f4c:	20003334 	.word	0x20003334
     f50:	20003308 	.word	0x20003308
     f54:	20003240 	.word	0x20003240

00000f58 <CycleHndlr_EpyxFastLoad()>:

void CycleHndlr_EpyxFastLoad()
{
   if (CycleCountdown)
     f58:	4b06      	ldr	r3, [pc, #24]	; (f74 <CycleHndlr_EpyxFastLoad()+0x1c>)
     f5a:	681a      	ldr	r2, [r3, #0]
     f5c:	b142      	cbz	r2, f70 <CycleHndlr_EpyxFastLoad()+0x18>
   {
      if(--CycleCountdown == 0) SetExROMDeassert;
     f5e:	681a      	ldr	r2, [r3, #0]
     f60:	3a01      	subs	r2, #1
     f62:	601a      	str	r2, [r3, #0]
     f64:	b922      	cbnz	r2, f70 <CycleHndlr_EpyxFastLoad()+0x18>
     f66:	4b04      	ldr	r3, [pc, #16]	; (f78 <CycleHndlr_EpyxFastLoad()+0x20>)
     f68:	f44f 6200 	mov.w	r2, #2048	; 0x800
     f6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   }
}
     f70:	4770      	bx	lr
     f72:	bf00      	nop
     f74:	2000d8ac 	.word	0x2000d8ac
     f78:	42004000 	.word	0x42004000

00000f7c <IO1Hndlr_Dinamic(unsigned char, bool)>:
  NULL,                 //called at the end of EVERY c64 cycle
};

void IO1Hndlr_Dinamic(uint8_t Address, bool R_Wn)
{
   if (R_Wn) //IO1 Read  -------------------------------------------------
     f7c:	b161      	cbz	r1, f98 <IO1Hndlr_Dinamic(unsigned char, bool)+0x1c>
   {
      uint8_t BankReg = Address & 0x0f;
      if (BankReg<NumCrtChips) LOROM_Image = CrtChips[BankReg].ChipROM;
     f7e:	4b07      	ldr	r3, [pc, #28]	; (f9c <IO1Hndlr_Dinamic(unsigned char, bool)+0x20>)
      uint8_t BankReg = Address & 0x0f;
     f80:	f000 000f 	and.w	r0, r0, #15
      if (BankReg<NumCrtChips) LOROM_Image = CrtChips[BankReg].ChipROM;
     f84:	781b      	ldrb	r3, [r3, #0]
     f86:	4283      	cmp	r3, r0
     f88:	d906      	bls.n	f98 <IO1Hndlr_Dinamic(unsigned char, bool)+0x1c>
     f8a:	4a05      	ldr	r2, [pc, #20]	; (fa0 <IO1Hndlr_Dinamic(unsigned char, bool)+0x24>)
     f8c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     f90:	4b04      	ldr	r3, [pc, #16]	; (fa4 <IO1Hndlr_Dinamic(unsigned char, bool)+0x28>)
     f92:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
     f96:	601a      	str	r2, [r3, #0]
      //DataPortWriteWaitLog(BankReg);  //actual value read doesn't matter, address selects bank
   }
}
     f98:	4770      	bx	lr
     f9a:	bf00      	nop
     f9c:	2005e536 	.word	0x2005e536
     fa0:	2000d2ac 	.word	0x2000d2ac
     fa4:	2000dae8 	.word	0x2000dae8

00000fa8 <IO1Hndlr_C64GameSystem3(unsigned char, bool)>:
  NULL,                     //called at the end of EVERY c64 cycle
};

void IO1Hndlr_C64GameSystem3(uint8_t Address, bool R_Wn)
{
   if (R_Wn) // IO1 read  -------------------------------------------------
     fa8:	b121      	cbz	r1, fb4 <IO1Hndlr_C64GameSystem3(unsigned char, bool)+0xc>
   {
      //DataPortWriteWaitLog(0); //read value doesn't matter
      LOROM_Image = CrtChips[0].ChipROM;
     faa:	4a09      	ldr	r2, [pc, #36]	; (fd0 <IO1Hndlr_C64GameSystem3(unsigned char, bool)+0x28>)
     fac:	4b09      	ldr	r3, [pc, #36]	; (fd4 <IO1Hndlr_C64GameSystem3(unsigned char, bool)+0x2c>)
     fae:	6812      	ldr	r2, [r2, #0]
     fb0:	601a      	str	r2, [r3, #0]
     fb2:	4770      	bx	lr
   }
   else // IO1 write  -------------------------------------------------
   {     
      //uint8_t Data = DataPortWaitRead(); written value doesn't matter
      uint8_t BankReg = Address & 0x3f;
      if (BankReg<NumCrtChips)
     fb4:	4b08      	ldr	r3, [pc, #32]	; (fd8 <IO1Hndlr_C64GameSystem3(unsigned char, bool)+0x30>)
      uint8_t BankReg = Address & 0x3f;
     fb6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if (BankReg<NumCrtChips)
     fba:	781b      	ldrb	r3, [r3, #0]
     fbc:	4283      	cmp	r3, r0
     fbe:	d906      	bls.n	fce <IO1Hndlr_C64GameSystem3(unsigned char, bool)+0x26>
      {
         LOROM_Image = CrtChips[BankReg].ChipROM;
     fc0:	4a03      	ldr	r2, [pc, #12]	; (fd0 <IO1Hndlr_C64GameSystem3(unsigned char, bool)+0x28>)
     fc2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     fc6:	4b03      	ldr	r3, [pc, #12]	; (fd4 <IO1Hndlr_C64GameSystem3(unsigned char, bool)+0x2c>)
     fc8:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
     fcc:	601a      	str	r2, [r3, #0]
      }         
      //TraceLogAddValidData(Data);
   }
}
     fce:	4770      	bx	lr
     fd0:	2000d2ac 	.word	0x2000d2ac
     fd4:	2000dae8 	.word	0x2000dae8
     fd8:	2005e536 	.word	0x2005e536

00000fdc <PollingHndlr_TeensyROM()>:

void PollingHndlr_TeensyROM()
{
     fdc:	b510      	push	{r4, lr}
   if (IO1[rwRegStatus] != rsReady) 
     fde:	4c0c      	ldr	r4, [pc, #48]	; (1010 <PollingHndlr_TeensyROM()+0x34>)
     fe0:	6823      	ldr	r3, [r4, #0]
     fe2:	785a      	ldrb	r2, [r3, #1]
     fe4:	2a5a      	cmp	r2, #90	; 0x5a
     fe6:	d00c      	beq.n	1002 <PollingHndlr_TeensyROM()+0x26>
   {  //ISR requested work
      if (IO1[rwRegStatus]<rsNumStatusTypes) StatusFunction[IO1[rwRegStatus]]();
     fe8:	785a      	ldrb	r2, [r3, #1]
     fea:	2a0a      	cmp	r2, #10
     fec:	785a      	ldrb	r2, [r3, #1]
     fee:	d809      	bhi.n	1004 <PollingHndlr_TeensyROM()+0x28>
     ff0:	4b08      	ldr	r3, [pc, #32]	; (1014 <PollingHndlr_TeensyROM()+0x38>)
     ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
     ff6:	4798      	blx	r3
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
     ff8:	f00d fcca 	bl	e990 <usb_serial_flush_output>
      else Serial.printf("?Stat: %02x\n", IO1[rwRegStatus]);
      Serial.flush();
      IO1[rwRegStatus] = rsReady;
     ffc:	6823      	ldr	r3, [r4, #0]
     ffe:	225a      	movs	r2, #90	; 0x5a
    1000:	705a      	strb	r2, [r3, #1]
   }
   //usbHostMIDI.read();
   //usbDevMIDI.read();
}
    1002:	bd10      	pop	{r4, pc}
      else Serial.printf("?Stat: %02x\n", IO1[rwRegStatus]);
    1004:	4904      	ldr	r1, [pc, #16]	; (1018 <PollingHndlr_TeensyROM()+0x3c>)
    1006:	4805      	ldr	r0, [pc, #20]	; (101c <PollingHndlr_TeensyROM()+0x40>)
    1008:	f00b fbce 	bl	c7a8 <Print::printf(char const*, ...)>
    100c:	e7f4      	b.n	ff8 <PollingHndlr_TeensyROM()+0x1c>
    100e:	bf00      	nop
    1010:	2000dae4 	.word	0x2000dae4
    1014:	2000c114 	.word	0x2000c114
    1018:	20001c1c 	.word	0x20001c1c
    101c:	2000bfd8 	.word	0x2000bfd8

00001020 <IO2Hndlr_EpyxFastLoad(unsigned char, bool)>:
   if (R_Wn) DataPortWriteWait(LOROM_Image[Address | 0x1F00]); 
    1020:	b381      	cbz	r1, 1084 <IO2Hndlr_EpyxFastLoad(unsigned char, bool)+0x64>
    1022:	4a19      	ldr	r2, [pc, #100]	; (1088 <IO2Hndlr_EpyxFastLoad(unsigned char, bool)+0x68>)
    1024:	f440 50f8 	orr.w	r0, r0, #7936	; 0x1f00
   DataBufEnable; 
    1028:	4918      	ldr	r1, [pc, #96]	; (108c <IO2Hndlr_EpyxFastLoad(unsigned char, bool)+0x6c>)
    102a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    102e:	6812      	ldr	r2, [r2, #0]
{
    1030:	b4f0      	push	{r4, r5, r6, r7}
   if (R_Wn) DataPortWriteWait(LOROM_Image[Address | 0x1F00]); 
    1032:	5c12      	ldrb	r2, [r2, r0]
    1034:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
   register uint32_t RegBits = (Data & 0x0F) | ((Data & 0xF0) << 12);
    1038:	0313      	lsls	r3, r2, #12
    103a:	f002 020f 	and.w	r2, r2, #15
   WaitUntil_nS(nS_DataHold);  
    103e:	4814      	ldr	r0, [pc, #80]	; (1090 <IO2Hndlr_EpyxFastLoad(unsigned char, bool)+0x70>)
   register uint32_t RegBits = (Data & 0x0F) | ((Data & 0xF0) << 12);
    1040:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    1044:	4f13      	ldr	r7, [pc, #76]	; (1094 <IO2Hndlr_EpyxFastLoad(unsigned char, bool)+0x74>)
    1046:	4e14      	ldr	r6, [pc, #80]	; (1098 <IO2Hndlr_EpyxFastLoad(unsigned char, bool)+0x78>)
    1048:	4313      	orrs	r3, r2
   WaitUntil_nS(nS_DataHold);  
    104a:	4c14      	ldr	r4, [pc, #80]	; (109c <IO2Hndlr_EpyxFastLoad(unsigned char, bool)+0x7c>)
   CORE_PIN7_PORTCLEAR = ~RegBits & GP7_DataMask;
    104c:	f083 120f 	eor.w	r2, r3, #983055	; 0xf000f
   CORE_PIN7_PORTSET = RegBits;
    1050:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
   CORE_PIN7_PORTCLEAR = ~RegBits & GP7_DataMask;
    1054:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
   WaitUntil_nS(nS_DataHold);  
    1058:	6805      	ldr	r5, [r0, #0]
    105a:	4811      	ldr	r0, [pc, #68]	; (10a0 <IO2Hndlr_EpyxFastLoad(unsigned char, bool)+0x80>)
    105c:	6862      	ldr	r2, [r4, #4]
    105e:	6839      	ldr	r1, [r7, #0]
    1060:	6833      	ldr	r3, [r6, #0]
    1062:	1a52      	subs	r2, r2, r1
    1064:	0c1b      	lsrs	r3, r3, #16
    1066:	fb05 f303 	mul.w	r3, r5, r3
    106a:	085b      	lsrs	r3, r3, #1
    106c:	fba0 1303 	umull	r1, r3, r0, r3
    1070:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
    1074:	d3f2      	bcc.n	105c <IO2Hndlr_EpyxFastLoad(unsigned char, bool)+0x3c>
   DataBufDisable;
    1076:	4b05      	ldr	r3, [pc, #20]	; (108c <IO2Hndlr_EpyxFastLoad(unsigned char, bool)+0x6c>)
    1078:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
}
    107c:	bcf0      	pop	{r4, r5, r6, r7}
    107e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    1082:	4770      	bx	lr
    1084:	4770      	bx	lr
    1086:	bf00      	nop
    1088:	2000dae8 	.word	0x2000dae8
    108c:	42004000 	.word	0x42004000
    1090:	2000c948 	.word	0x2000c948
    1094:	2005dfcc 	.word	0x2005dfcc
    1098:	2000bd24 	.word	0x2000bd24
    109c:	e0001000 	.word	0xe0001000
    10a0:	08972311 	.word	0x08972311

000010a4 <IO1Hndlr_Ocean1(unsigned char, bool)>:

void IO1Hndlr_Ocean1(uint8_t Address, bool R_Wn)
{
   if (!R_Wn) // IO1 write    -------------------------------------------------
    10a4:	2900      	cmp	r1, #0
    10a6:	d13b      	bne.n	1120 <IO1Hndlr_Ocean1(unsigned char, bool)+0x7c>
   SetDataPortDirIn; //set data ports to inputs         //data port set to read previously
    10a8:	4b1e      	ldr	r3, [pc, #120]	; (1124 <IO1Hndlr_Ocean1(unsigned char, bool)+0x80>)
   DataBufEnable; //enable external buffer
    10aa:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   WaitUntil_nS(nS_DataSetup);  //could poll Phi2 for falling edge...  only 30nS typ hold time
    10ae:	491e      	ldr	r1, [pc, #120]	; (1128 <IO1Hndlr_Ocean1(unsigned char, bool)+0x84>)
   SetDataPortDirIn; //set data ports to inputs         //data port set to read previously
    10b0:	685a      	ldr	r2, [r3, #4]
    10b2:	f022 120f 	bic.w	r2, r2, #983055	; 0xf000f
{
    10b6:	b4f0      	push	{r4, r5, r6, r7}
    10b8:	605a      	str	r2, [r3, #4]
   DataBufEnable; //enable external buffer
    10ba:	4f1c      	ldr	r7, [pc, #112]	; (112c <IO1Hndlr_Ocean1(unsigned char, bool)+0x88>)
    10bc:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
   WaitUntil_nS(nS_DataSetup);  //could poll Phi2 for falling edge...  only 30nS typ hold time
    10c0:	4e1b      	ldr	r6, [pc, #108]	; (1130 <IO1Hndlr_Ocean1(unsigned char, bool)+0x8c>)
    10c2:	4d1c      	ldr	r5, [pc, #112]	; (1134 <IO1Hndlr_Ocean1(unsigned char, bool)+0x90>)
    10c4:	680c      	ldr	r4, [r1, #0]
    10c6:	481c      	ldr	r0, [pc, #112]	; (1138 <IO1Hndlr_Ocean1(unsigned char, bool)+0x94>)
    10c8:	686a      	ldr	r2, [r5, #4]
    10ca:	6839      	ldr	r1, [r7, #0]
    10cc:	6833      	ldr	r3, [r6, #0]
    10ce:	1a52      	subs	r2, r2, r1
    10d0:	0c1b      	lsrs	r3, r3, #16
    10d2:	fb04 f303 	mul.w	r3, r4, r3
    10d6:	085b      	lsrs	r3, r3, #1
    10d8:	fba0 1303 	umull	r1, r3, r0, r3
    10dc:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
    10e0:	d3f2      	bcc.n	10c8 <IO1Hndlr_Ocean1(unsigned char, bool)+0x24>
   register uint32_t DataIn = ReadGPIO7;
    10e2:	4a10      	ldr	r2, [pc, #64]	; (1124 <IO1Hndlr_Ocean1(unsigned char, bool)+0x80>)
   DataBufDisable;
    10e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   {
      uint8_t BankReg = DataPortWaitRead(); 
      
      TraceLogAddValidData(BankReg);
      BankReg &= 0x3f;
      if (BankReg < NumCrtChips)
    10e8:	4c14      	ldr	r4, [pc, #80]	; (113c <IO1Hndlr_Ocean1(unsigned char, bool)+0x98>)
   register uint32_t DataIn = ReadGPIO7;
    10ea:	6811      	ldr	r1, [r2, #0]
   DataBufDisable;
    10ec:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
   return ((DataIn & 0x0F) | ((DataIn >> 12) & 0xF0));
    10f0:	0b0b      	lsrs	r3, r1, #12
   SetDataPortDirOut; //set data ports to outputs (default)
    10f2:	6850      	ldr	r0, [r2, #4]
   return ((DataIn & 0x0F) | ((DataIn >> 12) & 0xF0));
    10f4:	f001 010f 	and.w	r1, r1, #15
   SetDataPortDirOut; //set data ports to outputs (default)
    10f8:	f040 100f 	orr.w	r0, r0, #983055	; 0xf000f
   return ((DataIn & 0x0F) | ((DataIn >> 12) & 0xF0));
    10fc:	f003 0330 	and.w	r3, r3, #48	; 0x30
   SetDataPortDirOut; //set data ports to outputs (default)
    1100:	6050      	str	r0, [r2, #4]
      BankReg &= 0x3f;
    1102:	430b      	orrs	r3, r1
      if (BankReg < NumCrtChips)
    1104:	7822      	ldrb	r2, [r4, #0]
    1106:	429a      	cmp	r2, r3
    1108:	d908      	bls.n	111c <IO1Hndlr_Ocean1(unsigned char, bool)+0x78>
      {
         LOROM_Image = CrtChips[BankReg].ChipROM;
    110a:	480d      	ldr	r0, [pc, #52]	; (1140 <IO1Hndlr_Ocean1(unsigned char, bool)+0x9c>)
    110c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1110:	490c      	ldr	r1, [pc, #48]	; (1144 <IO1Hndlr_Ocean1(unsigned char, bool)+0xa0>)
    1112:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
         HIROM_Image = CrtChips[BankReg].ChipROM;
    1116:	4a0c      	ldr	r2, [pc, #48]	; (1148 <IO1Hndlr_Ocean1(unsigned char, bool)+0xa4>)
         LOROM_Image = CrtChips[BankReg].ChipROM;
    1118:	600b      	str	r3, [r1, #0]
         HIROM_Image = CrtChips[BankReg].ChipROM;
    111a:	6013      	str	r3, [r2, #0]
      }
   }
}
    111c:	bcf0      	pop	{r4, r5, r6, r7}
    111e:	4770      	bx	lr
    1120:	4770      	bx	lr
    1122:	bf00      	nop
    1124:	42004000 	.word	0x42004000
    1128:	2000c94c 	.word	0x2000c94c
    112c:	2005dfcc 	.word	0x2005dfcc
    1130:	2000bd24 	.word	0x2000bd24
    1134:	e0001000 	.word	0xe0001000
    1138:	08972311 	.word	0x08972311
    113c:	2005e536 	.word	0x2005e536
    1140:	2000d2ac 	.word	0x2000d2ac
    1144:	2000dae8 	.word	0x2000dae8
    1148:	2000dae0 	.word	0x2000dae0

0000114c <IO1Hndlr_FunPlay(unsigned char, bool)>:
};


void IO1Hndlr_FunPlay(uint8_t Address, bool R_Wn)
{
   if (!R_Wn) // IO1 write    -------------------------------------------------
    114c:	2900      	cmp	r1, #0
    114e:	d145      	bne.n	11dc <IO1Hndlr_FunPlay(unsigned char, bool)+0x90>
   SetDataPortDirIn; //set data ports to inputs         //data port set to read previously
    1150:	4b27      	ldr	r3, [pc, #156]	; (11f0 <IO1Hndlr_FunPlay(unsigned char, bool)+0xa4>)
   DataBufEnable; //enable external buffer
    1152:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   WaitUntil_nS(nS_DataSetup);  //could poll Phi2 for falling edge...  only 30nS typ hold time
    1156:	4927      	ldr	r1, [pc, #156]	; (11f4 <IO1Hndlr_FunPlay(unsigned char, bool)+0xa8>)
   SetDataPortDirIn; //set data ports to inputs         //data port set to read previously
    1158:	685a      	ldr	r2, [r3, #4]
    115a:	f022 120f 	bic.w	r2, r2, #983055	; 0xf000f
{
    115e:	b4f0      	push	{r4, r5, r6, r7}
    1160:	605a      	str	r2, [r3, #4]
   DataBufEnable; //enable external buffer
    1162:	4f25      	ldr	r7, [pc, #148]	; (11f8 <IO1Hndlr_FunPlay(unsigned char, bool)+0xac>)
    1164:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
   WaitUntil_nS(nS_DataSetup);  //could poll Phi2 for falling edge...  only 30nS typ hold time
    1168:	4e24      	ldr	r6, [pc, #144]	; (11fc <IO1Hndlr_FunPlay(unsigned char, bool)+0xb0>)
    116a:	4d25      	ldr	r5, [pc, #148]	; (1200 <IO1Hndlr_FunPlay(unsigned char, bool)+0xb4>)
    116c:	680c      	ldr	r4, [r1, #0]
    116e:	4825      	ldr	r0, [pc, #148]	; (1204 <IO1Hndlr_FunPlay(unsigned char, bool)+0xb8>)
    1170:	686a      	ldr	r2, [r5, #4]
    1172:	6839      	ldr	r1, [r7, #0]
    1174:	6833      	ldr	r3, [r6, #0]
    1176:	1a52      	subs	r2, r2, r1
    1178:	0c1b      	lsrs	r3, r3, #16
    117a:	fb04 f303 	mul.w	r3, r4, r3
    117e:	085b      	lsrs	r3, r3, #1
    1180:	fba0 1303 	umull	r1, r3, r0, r3
    1184:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
    1188:	d3f2      	bcc.n	1170 <IO1Hndlr_FunPlay(unsigned char, bool)+0x24>
   register uint32_t DataIn = ReadGPIO7;
    118a:	4a19      	ldr	r2, [pc, #100]	; (11f0 <IO1Hndlr_FunPlay(unsigned char, bool)+0xa4>)
   DataBufDisable;
    118c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   register uint32_t DataIn = ReadGPIO7;
    1190:	6811      	ldr	r1, [r2, #0]
   DataBufDisable;
    1192:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
   return ((DataIn & 0x0F) | ((DataIn >> 12) & 0xF0));
    1196:	0b0b      	lsrs	r3, r1, #12
   SetDataPortDirOut; //set data ports to outputs (default)
    1198:	6850      	ldr	r0, [r2, #4]
   return ((DataIn & 0x0F) | ((DataIn >> 12) & 0xF0));
    119a:	f001 010f 	and.w	r1, r1, #15
    119e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   SetDataPortDirOut; //set data ports to outputs (default)
    11a2:	f040 100f 	orr.w	r0, r0, #983055	; 0xf000f
   return ((DataIn & 0x0F) | ((DataIn >> 12) & 0xF0));
    11a6:	430b      	orrs	r3, r1
   SetDataPortDirOut; //set data ports to outputs (default)
    11a8:	6050      	str	r0, [r2, #4]
   {     
      uint8_t Data = DataPortWaitRead(); 
      uint8_t BankReg = ((Data >> 3) & 7) | ((Data & 1) << 3); //remap to bank #
    11aa:	00d8      	lsls	r0, r3, #3
    11ac:	f3c3 01c2 	ubfx	r1, r3, #3, #3
      
      if ((Data & 0xc6) == 0x86) SetExROMDeassert; //turn off cart
    11b0:	f003 03c6 	and.w	r3, r3, #198	; 0xc6
      uint8_t BankReg = ((Data >> 3) & 7) | ((Data & 1) << 3); //remap to bank #
    11b4:	f000 0008 	and.w	r0, r0, #8
      if ((Data & 0xc6) == 0x86) SetExROMDeassert; //turn off cart
    11b8:	2b86      	cmp	r3, #134	; 0x86
      uint8_t BankReg = ((Data >> 3) & 7) | ((Data & 1) << 3); //remap to bank #
    11ba:	ea41 0400 	orr.w	r4, r1, r0
    11be:	4621      	mov	r1, r4
      if ((Data & 0xc6) == 0x86) SetExROMDeassert; //turn off cart
    11c0:	d00d      	beq.n	11de <IO1Hndlr_FunPlay(unsigned char, bool)+0x92>
          
      TraceLogAddValidData(Data);
      if (BankReg<NumCrtChips) LOROM_Image = CrtChips[BankReg].ChipROM;
    11c2:	4b11      	ldr	r3, [pc, #68]	; (1208 <IO1Hndlr_FunPlay(unsigned char, bool)+0xbc>)
    11c4:	781b      	ldrb	r3, [r3, #0]
    11c6:	428b      	cmp	r3, r1
    11c8:	d906      	bls.n	11d8 <IO1Hndlr_FunPlay(unsigned char, bool)+0x8c>
    11ca:	4a10      	ldr	r2, [pc, #64]	; (120c <IO1Hndlr_FunPlay(unsigned char, bool)+0xc0>)
    11cc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    11d0:	4b0f      	ldr	r3, [pc, #60]	; (1210 <IO1Hndlr_FunPlay(unsigned char, bool)+0xc4>)
    11d2:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
    11d6:	601a      	str	r2, [r3, #0]
   }
}
    11d8:	bcf0      	pop	{r4, r5, r6, r7}
    11da:	4770      	bx	lr
    11dc:	4770      	bx	lr
      if ((Data & 0xc6) == 0x86) SetExROMDeassert; //turn off cart
    11de:	f44f 6300 	mov.w	r3, #2048	; 0x800
    11e2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      if (BankReg<NumCrtChips) LOROM_Image = CrtChips[BankReg].ChipROM;
    11e6:	4b08      	ldr	r3, [pc, #32]	; (1208 <IO1Hndlr_FunPlay(unsigned char, bool)+0xbc>)
    11e8:	781b      	ldrb	r3, [r3, #0]
    11ea:	428b      	cmp	r3, r1
    11ec:	d9f4      	bls.n	11d8 <IO1Hndlr_FunPlay(unsigned char, bool)+0x8c>
    11ee:	e7ec      	b.n	11ca <IO1Hndlr_FunPlay(unsigned char, bool)+0x7e>
    11f0:	42004000 	.word	0x42004000
    11f4:	2000c94c 	.word	0x2000c94c
    11f8:	2005dfcc 	.word	0x2005dfcc
    11fc:	2000bd24 	.word	0x2000bd24
    1200:	e0001000 	.word	0xe0001000
    1204:	08972311 	.word	0x08972311
    1208:	2005e536 	.word	0x2005e536
    120c:	2000d2ac 	.word	0x2000d2ac
    1210:	2000dae8 	.word	0x2000dae8

00001214 <IO2Hndlr_SuperGames(unsigned char, bool)>:

void IO2Hndlr_SuperGames(uint8_t Address, bool R_Wn)
{
   if (!R_Wn) // IO2 write  -------------------------------------------------
    1214:	2900      	cmp	r1, #0
    1216:	d151      	bne.n	12bc <IO2Hndlr_SuperGames(unsigned char, bool)+0xa8>
   SetDataPortDirIn; //set data ports to inputs         //data port set to read previously
    1218:	4b2b      	ldr	r3, [pc, #172]	; (12c8 <IO2Hndlr_SuperGames(unsigned char, bool)+0xb4>)
   DataBufEnable; //enable external buffer
    121a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   WaitUntil_nS(nS_DataSetup);  //could poll Phi2 for falling edge...  only 30nS typ hold time
    121e:	492b      	ldr	r1, [pc, #172]	; (12cc <IO2Hndlr_SuperGames(unsigned char, bool)+0xb8>)
   SetDataPortDirIn; //set data ports to inputs         //data port set to read previously
    1220:	685a      	ldr	r2, [r3, #4]
    1222:	f022 120f 	bic.w	r2, r2, #983055	; 0xf000f
{
    1226:	b4f0      	push	{r4, r5, r6, r7}
    1228:	605a      	str	r2, [r3, #4]
   DataBufEnable; //enable external buffer
    122a:	4f29      	ldr	r7, [pc, #164]	; (12d0 <IO2Hndlr_SuperGames(unsigned char, bool)+0xbc>)
    122c:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
   WaitUntil_nS(nS_DataSetup);  //could poll Phi2 for falling edge...  only 30nS typ hold time
    1230:	4e28      	ldr	r6, [pc, #160]	; (12d4 <IO2Hndlr_SuperGames(unsigned char, bool)+0xc0>)
    1232:	4d29      	ldr	r5, [pc, #164]	; (12d8 <IO2Hndlr_SuperGames(unsigned char, bool)+0xc4>)
    1234:	680c      	ldr	r4, [r1, #0]
    1236:	4829      	ldr	r0, [pc, #164]	; (12dc <IO2Hndlr_SuperGames(unsigned char, bool)+0xc8>)
    1238:	686a      	ldr	r2, [r5, #4]
    123a:	6839      	ldr	r1, [r7, #0]
    123c:	6833      	ldr	r3, [r6, #0]
    123e:	1a52      	subs	r2, r2, r1
    1240:	0c1b      	lsrs	r3, r3, #16
    1242:	fb04 f303 	mul.w	r3, r4, r3
    1246:	085b      	lsrs	r3, r3, #1
    1248:	fba0 1303 	umull	r1, r3, r0, r3
    124c:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
    1250:	d3f2      	bcc.n	1238 <IO2Hndlr_SuperGames(unsigned char, bool)+0x24>
   register uint32_t DataIn = ReadGPIO7;
    1252:	4b1d      	ldr	r3, [pc, #116]	; (12c8 <IO2Hndlr_SuperGames(unsigned char, bool)+0xb4>)
   DataBufDisable;
    1254:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   {     
      uint8_t Data = DataPortWaitRead(); 
      if (!WPLatched) 
    1258:	4821      	ldr	r0, [pc, #132]	; (12e0 <IO2Hndlr_SuperGames(unsigned char, bool)+0xcc>)
   register uint32_t DataIn = ReadGPIO7;
    125a:	681a      	ldr	r2, [r3, #0]
   DataBufDisable;
    125c:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
   SetDataPortDirOut; //set data ports to outputs (default)
    1260:	6859      	ldr	r1, [r3, #4]
    1262:	f041 110f 	orr.w	r1, r1, #983055	; 0xf000f
    1266:	6059      	str	r1, [r3, #4]
    1268:	7803      	ldrb	r3, [r0, #0]
    126a:	bb2b      	cbnz	r3, 12b8 <IO2Hndlr_SuperGames(unsigned char, bool)+0xa4>
   return ((DataIn & 0x0F) | ((DataIn >> 12) & 0xF0));
    126c:	f002 010f 	and.w	r1, r2, #15
      {
         uint8_t BankReg = Data & 3;
         if (BankReg<NumCrtChips)
    1270:	4c1c      	ldr	r4, [pc, #112]	; (12e4 <IO2Hndlr_SuperGames(unsigned char, bool)+0xd0>)
    1272:	0b13      	lsrs	r3, r2, #12
    1274:	7824      	ldrb	r4, [r4, #0]
         uint8_t BankReg = Data & 3;
    1276:	f001 0203 	and.w	r2, r1, #3
    127a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
         if (BankReg<NumCrtChips)
    127e:	4294      	cmp	r4, r2
    1280:	ea43 0301 	orr.w	r3, r3, r1
    1284:	d90a      	bls.n	129c <IO2Hndlr_SuperGames(unsigned char, bool)+0x88>
         {
            LOROM_Image = CrtChips[BankReg].ChipROM;
    1286:	4c18      	ldr	r4, [pc, #96]	; (12e8 <IO2Hndlr_SuperGames(unsigned char, bool)+0xd4>)
    1288:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    128c:	4917      	ldr	r1, [pc, #92]	; (12ec <IO2Hndlr_SuperGames(unsigned char, bool)+0xd8>)
    128e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    1292:	600a      	str	r2, [r1, #0]
            HIROM_Image = CrtChips[BankReg].ChipROM+0x2000;
    1294:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
    1298:	4915      	ldr	r1, [pc, #84]	; (12f0 <IO2Hndlr_SuperGames(unsigned char, bool)+0xdc>)
    129a:	600a      	str	r2, [r1, #0]
         }         
         
         if (Data & 4)
    129c:	075d      	lsls	r5, r3, #29
         {
            SetExROMDeassert; //turn off cart
    129e:	4a0a      	ldr	r2, [pc, #40]	; (12c8 <IO2Hndlr_SuperGames(unsigned char, bool)+0xb4>)
    12a0:	f44f 6400 	mov.w	r4, #2048	; 0x800
            SetGameDeassert;
    12a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
         if (Data & 4)
    12a8:	d409      	bmi.n	12be <IO2Hndlr_SuperGames(unsigned char, bool)+0xaa>
         }
         else
         {
            SetExROMAssert; //16k config
    12aa:	f8c2 4088 	str.w	r4, [r2, #136]	; 0x88
            SetGameAssert;
    12ae:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
         }
         
         WPLatched = (Data & 8) == 8;            
    12b2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    12b6:	7003      	strb	r3, [r0, #0]
      }
      TraceLogAddValidData(Data);
   }
}
    12b8:	bcf0      	pop	{r4, r5, r6, r7}
    12ba:	4770      	bx	lr
    12bc:	4770      	bx	lr
            SetExROMDeassert; //turn off cart
    12be:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
            SetGameDeassert;
    12c2:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    12c6:	e7f4      	b.n	12b2 <IO2Hndlr_SuperGames(unsigned char, bool)+0x9e>
    12c8:	42004000 	.word	0x42004000
    12cc:	2000c94c 	.word	0x2000c94c
    12d0:	2005dfcc 	.word	0x2005dfcc
    12d4:	2000bd24 	.word	0x2000bd24
    12d8:	e0001000 	.word	0xe0001000
    12dc:	08972311 	.word	0x08972311
    12e0:	2005e538 	.word	0x2005e538
    12e4:	2005e536 	.word	0x2005e536
    12e8:	2000d2ac 	.word	0x2000d2ac
    12ec:	2000dae8 	.word	0x2000dae8
    12f0:	2000dae0 	.word	0x2000dae0

000012f4 <IO1Hndlr_EasyFlash(unsigned char, bool)>:
   if (!R_Wn) //IO1 Write  -------------------------------------------------
    12f4:	2900      	cmp	r1, #0
    12f6:	d148      	bne.n	138a <IO1Hndlr_EasyFlash(unsigned char, bool)+0x96>
   SetDataPortDirIn; //set data ports to inputs         //data port set to read previously
    12f8:	4b30      	ldr	r3, [pc, #192]	; (13bc <IO1Hndlr_EasyFlash(unsigned char, bool)+0xc8>)
   WaitUntil_nS(nS_DataSetup);  //could poll Phi2 for falling edge...  only 30nS typ hold time
    12fa:	4931      	ldr	r1, [pc, #196]	; (13c0 <IO1Hndlr_EasyFlash(unsigned char, bool)+0xcc>)
   SetDataPortDirIn; //set data ports to inputs         //data port set to read previously
    12fc:	685a      	ldr	r2, [r3, #4]
    12fe:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 13dc <IO1Hndlr_EasyFlash(unsigned char, bool)+0xe8>
    1302:	f022 120f 	bic.w	r2, r2, #983055	; 0xf000f
{
    1306:	b4f0      	push	{r4, r5, r6, r7}
   DataBufEnable; //enable external buffer
    1308:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
   SetDataPortDirIn; //set data ports to inputs         //data port set to read previously
    130c:	605a      	str	r2, [r3, #4]
   DataBufEnable; //enable external buffer
    130e:	4f2d      	ldr	r7, [pc, #180]	; (13c4 <IO1Hndlr_EasyFlash(unsigned char, bool)+0xd0>)
    1310:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
   WaitUntil_nS(nS_DataSetup);  //could poll Phi2 for falling edge...  only 30nS typ hold time
    1314:	4d2c      	ldr	r5, [pc, #176]	; (13c8 <IO1Hndlr_EasyFlash(unsigned char, bool)+0xd4>)
    1316:	680e      	ldr	r6, [r1, #0]
    1318:	4c2c      	ldr	r4, [pc, #176]	; (13cc <IO1Hndlr_EasyFlash(unsigned char, bool)+0xd8>)
    131a:	686a      	ldr	r2, [r5, #4]
    131c:	f8dc 1000 	ldr.w	r1, [ip]
    1320:	683b      	ldr	r3, [r7, #0]
    1322:	1a52      	subs	r2, r2, r1
    1324:	0c1b      	lsrs	r3, r3, #16
    1326:	fb06 f303 	mul.w	r3, r6, r3
    132a:	085b      	lsrs	r3, r3, #1
    132c:	fba4 1303 	umull	r1, r3, r4, r3
    1330:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
    1334:	d3f1      	bcc.n	131a <IO1Hndlr_EasyFlash(unsigned char, bool)+0x26>
   register uint32_t DataIn = ReadGPIO7;
    1336:	4a21      	ldr	r2, [pc, #132]	; (13bc <IO1Hndlr_EasyFlash(unsigned char, bool)+0xc8>)
   DataBufDisable;
    1338:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   register uint32_t DataIn = ReadGPIO7;
    133c:	6811      	ldr	r1, [r2, #0]
   DataBufDisable;
    133e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
   return ((DataIn & 0x0F) | ((DataIn >> 12) & 0xF0));
    1342:	0b0b      	lsrs	r3, r1, #12
   SetDataPortDirOut; //set data ports to outputs (default)
    1344:	6854      	ldr	r4, [r2, #4]
   return ((DataIn & 0x0F) | ((DataIn >> 12) & 0xF0));
    1346:	f001 010f 	and.w	r1, r1, #15
   SetDataPortDirOut; //set data ports to outputs (default)
    134a:	f044 140f 	orr.w	r4, r4, #983055	; 0xf000f
   return ((DataIn & 0x0F) | ((DataIn >> 12) & 0xF0));
    134e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   SetDataPortDirOut; //set data ports to outputs (default)
    1352:	6054      	str	r4, [r2, #4]
   return ((DataIn & 0x0F) | ((DataIn >> 12) & 0xF0));
    1354:	430b      	orrs	r3, r1
      switch (Address)
    1356:	b1c8      	cbz	r0, 138c <IO1Hndlr_EasyFlash(unsigned char, bool)+0x98>
    1358:	2802      	cmp	r0, #2
    135a:	d114      	bne.n	1386 <IO1Hndlr_EasyFlash(unsigned char, bool)+0x92>
            if (Data & 0x80) SetLEDOn; //Status LED, 1 = on
    135c:	061c      	lsls	r4, r3, #24
    135e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    1362:	d427      	bmi.n	13b4 <IO1Hndlr_EasyFlash(unsigned char, bool)+0xc0>
            else SetLEDOff;
    1364:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
            if (Data & 0x02) SetExROMAssert; //EXROM state, 0 = /EXROM high
    1368:	0798      	lsls	r0, r3, #30
    136a:	4a14      	ldr	r2, [pc, #80]	; (13bc <IO1Hndlr_EasyFlash(unsigned char, bool)+0xc8>)
    136c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    1370:	d51d      	bpl.n	13ae <IO1Hndlr_EasyFlash(unsigned char, bool)+0xba>
    1372:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
            if (Data & 0x01) SetGameAssert; //GAME state if M (bit 2 sel bit 0 or jumper for GAME) = 1, 0 = /GAME high
    1376:	f013 0f01 	tst.w	r3, #1
    137a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    137e:	4b0f      	ldr	r3, [pc, #60]	; (13bc <IO1Hndlr_EasyFlash(unsigned char, bool)+0xc8>)
    1380:	d012      	beq.n	13a8 <IO1Hndlr_EasyFlash(unsigned char, bool)+0xb4>
    1382:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    1386:	bcf0      	pop	{r4, r5, r6, r7}
    1388:	4770      	bx	lr
    138a:	4770      	bx	lr
            LOROM_Image = BankDecode[Data][0];
    138c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    1390:	4a0f      	ldr	r2, [pc, #60]	; (13d0 <IO1Hndlr_EasyFlash(unsigned char, bool)+0xdc>)
    1392:	4810      	ldr	r0, [pc, #64]	; (13d4 <IO1Hndlr_EasyFlash(unsigned char, bool)+0xe0>)
            HIROM_Image = BankDecode[Data][1];
    1394:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
    1398:	490f      	ldr	r1, [pc, #60]	; (13d8 <IO1Hndlr_EasyFlash(unsigned char, bool)+0xe4>)
            LOROM_Image = BankDecode[Data][0];
    139a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
            HIROM_Image = BankDecode[Data][1];
    139e:	6863      	ldr	r3, [r4, #4]
            LOROM_Image = BankDecode[Data][0];
    13a0:	6002      	str	r2, [r0, #0]
            HIROM_Image = BankDecode[Data][1];
    13a2:	600b      	str	r3, [r1, #0]
}
    13a4:	bcf0      	pop	{r4, r5, r6, r7}
    13a6:	4770      	bx	lr
            else SetGameDeassert;
    13a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    13ac:	e7eb      	b.n	1386 <IO1Hndlr_EasyFlash(unsigned char, bool)+0x92>
            else SetExROMDeassert;
    13ae:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    13b2:	e7e0      	b.n	1376 <IO1Hndlr_EasyFlash(unsigned char, bool)+0x82>
            if (Data & 0x80) SetLEDOn; //Status LED, 1 = on
    13b4:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    13b8:	e7d6      	b.n	1368 <IO1Hndlr_EasyFlash(unsigned char, bool)+0x74>
    13ba:	bf00      	nop
    13bc:	42004000 	.word	0x42004000
    13c0:	2000c94c 	.word	0x2000c94c
    13c4:	2000bd24 	.word	0x2000bd24
    13c8:	e0001000 	.word	0xe0001000
    13cc:	08972311 	.word	0x08972311
    13d0:	2000d0a8 	.word	0x2000d0a8
    13d4:	2000dae8 	.word	0x2000dae8
    13d8:	2000dae0 	.word	0x2000dae0
    13dc:	2005dfcc 	.word	0x2005dfcc

000013e0 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*) [clone .part.0] [clone .constprop.0]>:
/* num gets the number of bytes that were stored into bytes[] */

#include <stdio.h>		// sscanf(), etc.
#include <string.h>		// strlen(), etc.

int parse_hex_line( const char *theline, char *bytes, 
    13e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    13e4:	b085      	sub	sp, #20
    13e6:	4615      	mov	r5, r2
    13e8:	4604      	mov	r4, r0
    13ea:	460f      	mov	r7, r1
  if (theline[0] != ':')
    return 0;
  if (strlen (theline) < 11)
    return 0;
  ptr = theline + 1;
  if (!sscanf (ptr, "%02x", &len))
    13ec:	aa01      	add	r2, sp, #4
    13ee:	492a      	ldr	r1, [pc, #168]	; (1498 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*) [clone .part.0] [clone .constprop.0]+0xb8>)
    13f0:	3001      	adds	r0, #1
int parse_hex_line( const char *theline, char *bytes, 
    13f2:	461e      	mov	r6, r3
  if (!sscanf (ptr, "%02x", &len))
    13f4:	f00f fc3c 	bl	10c70 <sscanf>
    13f8:	b138      	cbz	r0, 140a <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*) [clone .part.0] [clone .constprop.0]+0x2a>
    return 0;
  ptr += 2;
  if (strlen (theline) < (11 + (len * 2)))
    13fa:	4620      	mov	r0, r4
    13fc:	f010 fa80 	bl	11900 <strlen>
    1400:	9b01      	ldr	r3, [sp, #4]
    1402:	005b      	lsls	r3, r3, #1
    1404:	330b      	adds	r3, #11
    1406:	4298      	cmp	r0, r3
    1408:	d203      	bcs.n	1412 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*) [clone .part.0] [clone .constprop.0]+0x32>
    return 0;
    140a:	2000      	movs	r0, #0
    return 0;

  if (((sum & 255) + (cksum & 255)) & 255)
    return 0;     /* checksum error */
  return 1;
}
    140c:	b005      	add	sp, #20
    140e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (!sscanf (ptr, "%04x", (unsigned int *)addr))
    1412:	462a      	mov	r2, r5
    1414:	4921      	ldr	r1, [pc, #132]	; (149c <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*) [clone .part.0] [clone .constprop.0]+0xbc>)
    1416:	1ce0      	adds	r0, r4, #3
    1418:	f00f fc2a 	bl	10c70 <sscanf>
    141c:	2800      	cmp	r0, #0
    141e:	d0f4      	beq.n	140a <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*) [clone .part.0] [clone .constprop.0]+0x2a>
  if (!sscanf (ptr, "%02x", code))
    1420:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1422:	1de0      	adds	r0, r4, #7
    1424:	491c      	ldr	r1, [pc, #112]	; (1498 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*) [clone .part.0] [clone .constprop.0]+0xb8>)
    1426:	f00f fc23 	bl	10c70 <sscanf>
    142a:	2800      	cmp	r0, #0
    142c:	d0ed      	beq.n	140a <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*) [clone .part.0] [clone .constprop.0]+0x2a>
  sum = (len & 255) + ((*addr >> 8) & 255) + (*addr & 255) + (*code & 255);
    142e:	990c      	ldr	r1, [sp, #48]	; 0x30
  ptr += 2;
    1430:	3409      	adds	r4, #9
  sum = (len & 255) + ((*addr >> 8) & 255) + (*addr & 255) + (*code & 255);
    1432:	9b01      	ldr	r3, [sp, #4]
    1434:	f891 8000 	ldrb.w	r8, [r1]
    1438:	682a      	ldr	r2, [r5, #0]
    143a:	fa58 f883 	uxtab	r8, r8, r3
  while (*num != len)
    143e:	6835      	ldr	r5, [r6, #0]
    if (!sscanf (ptr, "%02x", &temp))
    1440:	f8df 9054 	ldr.w	r9, [pc, #84]	; 1498 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*) [clone .part.0] [clone .constprop.0]+0xb8>
  sum = (len & 255) + ((*addr >> 8) & 255) + (*addr & 255) + (*code & 255);
    1444:	fa58 f882 	uxtab	r8, r8, r2
    1448:	f3c2 2207 	ubfx	r2, r2, #8, #8
    144c:	4490      	add	r8, r2
  while (*num != len)
    144e:	e010      	b.n	1472 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*) [clone .part.0] [clone .constprop.0]+0x92>
    if (!sscanf (ptr, "%02x", &temp))
    1450:	4649      	mov	r1, r9
    ptr += 2;
    1452:	3402      	adds	r4, #2
    if (!sscanf (ptr, "%02x", &temp))
    1454:	f00f fc0c 	bl	10c70 <sscanf>
    1458:	2800      	cmp	r0, #0
    145a:	d0d6      	beq.n	140a <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*) [clone .part.0] [clone .constprop.0]+0x2a>
    bytes[*num] = temp;
    145c:	6833      	ldr	r3, [r6, #0]
    145e:	9a03      	ldr	r2, [sp, #12]
    1460:	54fa      	strb	r2, [r7, r3]
    sum += bytes[*num] & 255;
    1462:	6835      	ldr	r5, [r6, #0]
    1464:	5d7b      	ldrb	r3, [r7, r5]
    (*num)++;
    1466:	3501      	adds	r5, #1
    if (*num >= 256)
    1468:	2dff      	cmp	r5, #255	; 0xff
    sum += bytes[*num] & 255;
    146a:	4498      	add	r8, r3
    (*num)++;
    146c:	6035      	str	r5, [r6, #0]
    if (*num >= 256)
    146e:	d8cc      	bhi.n	140a <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*) [clone .part.0] [clone .constprop.0]+0x2a>
  while (*num != len)
    1470:	9b01      	ldr	r3, [sp, #4]
    1472:	429d      	cmp	r5, r3
    if (!sscanf (ptr, "%02x", &temp))
    1474:	4620      	mov	r0, r4
    1476:	aa03      	add	r2, sp, #12
  while (*num != len)
    1478:	d1ea      	bne.n	1450 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*) [clone .part.0] [clone .constprop.0]+0x70>
  if (!sscanf (ptr, "%02x", &cksum))
    147a:	aa02      	add	r2, sp, #8
    147c:	4906      	ldr	r1, [pc, #24]	; (1498 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*) [clone .part.0] [clone .constprop.0]+0xb8>)
    147e:	f00f fbf7 	bl	10c70 <sscanf>
    1482:	2800      	cmp	r0, #0
    1484:	d0c1      	beq.n	140a <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*) [clone .part.0] [clone .constprop.0]+0x2a>
  if (((sum & 255) + (cksum & 255)) & 255)
    1486:	9b02      	ldr	r3, [sp, #8]
    1488:	eb08 0003 	add.w	r0, r8, r3
    148c:	b2c0      	uxtb	r0, r0
    148e:	fab0 f080 	clz	r0, r0
    1492:	0940      	lsrs	r0, r0, #5
    1494:	e7ba      	b.n	140c <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*) [clone .part.0] [clone .constprop.0]+0x2c>
    1496:	bf00      	nop
    1498:	200019dc 	.word	0x200019dc
    149c:	2000a820 	.word	0x2000a820

000014a0 <SDFile::name()>:
	virtual const char * name() {
    14a0:	b510      	push	{r4, lr}
    14a2:	4604      	mov	r4, r0
		if (!filename) {
    14a4:	6d80      	ldr	r0, [r0, #88]	; 0x58
    14a6:	b100      	cbz	r0, 14aa <SDFile::name()+0xa>
	}
    14a8:	bd10      	pop	{r4, pc}
			filename = (char *)malloc(MAX_FILENAME_LEN);
    14aa:	f44f 7080 	mov.w	r0, #256	; 0x100
    14ae:	f00d fe15 	bl	f0dc <malloc>
    14b2:	65a0      	str	r0, [r4, #88]	; 0x58
			if (filename) {
    14b4:	b1b0      	cbz	r0, 14e4 <SDFile::name()+0x44>
    *name = 0;
    14b6:	2200      	movs	r2, #0
    return m_fFile ? m_fFile->getName(name, len) :
    14b8:	6d23      	ldr	r3, [r4, #80]	; 0x50
    *name = 0;
    14ba:	7002      	strb	r2, [r0, #0]
    return m_fFile ? m_fFile->getName(name, len) :
    14bc:	b13b      	cbz	r3, 14ce <SDFile::name()+0x2e>
    14be:	4601      	mov	r1, r0
    14c0:	f44f 7280 	mov.w	r2, #256	; 0x100
    14c4:	4618      	mov	r0, r3
    14c6:	f007 fde5 	bl	9094 <FatFile::getName(char*, unsigned int)>
		return filename;
    14ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
	}
    14cc:	bd10      	pop	{r4, pc}
    14ce:	6d63      	ldr	r3, [r4, #84]	; 0x54
           m_xFile ? m_xFile->getName(name, len) : 0;
    14d0:	2b00      	cmp	r3, #0
    14d2:	d0e9      	beq.n	14a8 <SDFile::name()+0x8>
    return getName8(name, size);
    14d4:	4601      	mov	r1, r0
    14d6:	f44f 7280 	mov.w	r2, #256	; 0x100
    14da:	4618      	mov	r0, r3
    14dc:	f005 fa88 	bl	69f0 <ExFatFile::getName8(char*, unsigned int)>
		return filename;
    14e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
	}
    14e2:	bd10      	pop	{r4, pc}
				filename = &zeroterm;
    14e4:	4b01      	ldr	r3, [pc, #4]	; (14ec <SDFile::name()+0x4c>)
    14e6:	4618      	mov	r0, r3
    14e8:	65a3      	str	r3, [r4, #88]	; 0x58
	}
    14ea:	bd10      	pop	{r4, pc}
    14ec:	2005e541 	.word	0x2005e541

000014f0 <SDFile::truncate(unsigned long long)>:
	virtual bool truncate(uint64_t size=0) {
    14f0:	b538      	push	{r3, r4, r5, lr}
    return m_fFile ? length < (1ULL << 32) && m_fFile->truncate(length) :
    14f2:	6d05      	ldr	r5, [r0, #80]	; 0x50
    14f4:	b16d      	cbz	r5, 1512 <SDFile::truncate(unsigned long long)+0x22>
    14f6:	b10b      	cbz	r3, 14fc <SDFile::truncate(unsigned long long)+0xc>
	}
    14f8:	2000      	movs	r0, #0
    14fa:	bd38      	pop	{r3, r4, r5, pc}
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint32_t length) {
    return seekSet(length) && truncate();
    14fc:	4611      	mov	r1, r2
    14fe:	4628      	mov	r0, r5
    1500:	f006 fb04 	bl	7b0c <FatFile::seekSet(unsigned long)>
    1504:	2800      	cmp	r0, #0
    1506:	d0f7      	beq.n	14f8 <SDFile::truncate(unsigned long long)+0x8>
    1508:	4628      	mov	r0, r5
    150a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    150e:	f006 bc9f 	b.w	7e50 <FatFile::truncate()>
    1512:	6d44      	ldr	r4, [r0, #84]	; 0x54
           m_xFile ? m_xFile->truncate(length) : false;
    1514:	2c00      	cmp	r4, #0
    1516:	d0ef      	beq.n	14f8 <SDFile::truncate(unsigned long long)+0x8>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
    1518:	4620      	mov	r0, r4
    151a:	f003 febb 	bl	5294 <ExFatFile::seekSet(unsigned long long)>
    151e:	2800      	cmp	r0, #0
    1520:	d0ea      	beq.n	14f8 <SDFile::truncate(unsigned long long)+0x8>
    1522:	4620      	mov	r0, r4
    1524:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    1528:	f004 bd2e 	b.w	5f88 <ExFatFile::truncate()>

0000152c <SDFile::setModifyTime(DateTimeFields const&)>:
		if (tm.year < 80 || tm.year > 207) return false;
    152c:	798a      	ldrb	r2, [r1, #6]
    152e:	f1a2 0350 	sub.w	r3, r2, #80	; 0x50
    1532:	061b      	lsls	r3, r3, #24
    1534:	d422      	bmi.n	157c <SDFile::setModifyTime(DateTimeFields const&)+0x50>
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
    1536:	f202 726c 	addw	r2, r2, #1900	; 0x76c
	virtual bool setModifyTime(const DateTimeFields &tm) {
    153a:	b5f0      	push	{r4, r5, r6, r7, lr}
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
    153c:	794b      	ldrb	r3, [r1, #5]
	virtual bool setModifyTime(const DateTimeFields &tm) {
    153e:	b085      	sub	sp, #20
    return m_fFile ?
    1540:	6d04      	ldr	r4, [r0, #80]	; 0x50
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
    1542:	3301      	adds	r3, #1
			tm.mday, tm.hour, tm.min, tm.sec);
    1544:	790d      	ldrb	r5, [r1, #4]
    1546:	788e      	ldrb	r6, [r1, #2]
    1548:	784f      	ldrb	r7, [r1, #1]
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
    154a:	b2db      	uxtb	r3, r3
			tm.mday, tm.hour, tm.min, tm.sec);
    154c:	7809      	ldrb	r1, [r1, #0]
    154e:	b14c      	cbz	r4, 1564 <SDFile::setModifyTime(DateTimeFields const&)+0x38>
           m_fFile->timestamp(flags, year, month, day, hour, minute, second) :
    1550:	4620      	mov	r0, r4
    1552:	9601      	str	r6, [sp, #4]
    1554:	9500      	str	r5, [sp, #0]
    1556:	e9cd 7102 	strd	r7, r1, [sp, #8]
    155a:	2104      	movs	r1, #4
    155c:	f006 fc0c 	bl	7d78 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
	}
    1560:	b005      	add	sp, #20
    1562:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1564:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ?
    1566:	2800      	cmp	r0, #0
    1568:	d0fa      	beq.n	1560 <SDFile::setModifyTime(DateTimeFields const&)+0x34>
           m_xFile->timestamp(flags, year, month, day, hour, minute, second) :
    156a:	9601      	str	r6, [sp, #4]
    156c:	9500      	str	r5, [sp, #0]
    156e:	e9cd 7102 	strd	r7, r1, [sp, #8]
    1572:	2104      	movs	r1, #4
    1574:	f004 fc4c 	bl	5e10 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
    1578:	b005      	add	sp, #20
    157a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (tm.year < 80 || tm.year > 207) return false;
    157c:	2000      	movs	r0, #0
	}
    157e:	4770      	bx	lr

00001580 <SDFile::getModifyTime(DateTimeFields&)>:
    return m_fFile ? m_fFile->getModifyDateTime(pdate, ptime) :
    1580:	6d03      	ldr	r3, [r0, #80]	; 0x50
	virtual bool getModifyTime(DateTimeFields &tm) {
    1582:	b510      	push	{r4, lr}
    1584:	460c      	mov	r4, r1
    1586:	b082      	sub	sp, #8
    1588:	b32b      	cbz	r3, 15d6 <SDFile::getModifyTime(DateTimeFields&)+0x56>
    158a:	f10d 0206 	add.w	r2, sp, #6
    158e:	a901      	add	r1, sp, #4
    1590:	4618      	mov	r0, r3
    1592:	f005 fe61 	bl	7258 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>
		if (!sdfatfile.getModifyDateTime(&fat_date, &fat_time)) return false;
    1596:	b338      	cbz	r0, 15e8 <SDFile::getModifyTime(DateTimeFields&)+0x68>
		if ((fat_date == 0) && (fat_time == 0)) return false;
    1598:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    159c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    15a0:	ea53 0102 	orrs.w	r1, r3, r2
    15a4:	d020      	beq.n	15e8 <SDFile::getModifyTime(DateTimeFields&)+0x68>
 * \param[in] fatTime Time in packed dir format.
 *
 * \return Extracted minute [0,59]
 */
static inline uint8_t FS_MINUTE(uint16_t fatTime) {
  return (fatTime >> 5) & 0X3F;
    15a6:	f3c2 1c45 	ubfx	ip, r2, #5, #6
 * \param[in] fatTime Time in packed dir format.
 *
 * \return Extracted second [0,58]
 */
static inline uint8_t FS_SECOND(uint16_t fatTime) {
  return 2*(fatTime & 0X1F);
    15aa:	f002 001f 	and.w	r0, r2, #31
  return fatTime >> 11;
    15ae:	0ad2      	lsrs	r2, r2, #11
  return (fatDate >> 5) & 0XF;
    15b0:	f3c3 1143 	ubfx	r1, r3, #5, #4
  return 2*(fatTime & 0X1F);
    15b4:	0040      	lsls	r0, r0, #1
		tm.min = FS_MINUTE(fat_time);
    15b6:	f884 c001 	strb.w	ip, [r4, #1]
  return fatTime >> 11;
    15ba:	70a2      	strb	r2, [r4, #2]
  return 1980 + (fatDate >> 9);
    15bc:	0a5a      	lsrs	r2, r3, #9
		tm.mon = FS_MONTH(fat_date) - 1;
    15be:	3901      	subs	r1, #1
  return fatDate & 0X1F;
    15c0:	f003 031f 	and.w	r3, r3, #31
		tm.year = FS_YEAR(fat_date) - 1900;
    15c4:	f502 62ea 	add.w	r2, r2, #1872	; 0x750
		tm.sec = FS_SECOND(fat_time);
    15c8:	7020      	strb	r0, [r4, #0]
		return true;
    15ca:	2001      	movs	r0, #1
		tm.mon = FS_MONTH(fat_date) - 1;
    15cc:	7161      	strb	r1, [r4, #5]
		tm.mday = FS_DAY(fat_date);
    15ce:	7123      	strb	r3, [r4, #4]
		tm.year = FS_YEAR(fat_date) - 1900;
    15d0:	71a2      	strb	r2, [r4, #6]
	}
    15d2:	b002      	add	sp, #8
    15d4:	bd10      	pop	{r4, pc}
    15d6:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->getModifyDateTime(pdate, ptime) : false;
    15d8:	b130      	cbz	r0, 15e8 <SDFile::getModifyTime(DateTimeFields&)+0x68>
    15da:	f10d 0206 	add.w	r2, sp, #6
    15de:	a901      	add	r1, sp, #4
    15e0:	f003 fcfe 	bl	4fe0 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>
    15e4:	2800      	cmp	r0, #0
    15e6:	d1d7      	bne.n	1598 <SDFile::getModifyTime(DateTimeFields&)+0x18>
		if (!sdfatfile.getModifyDateTime(&fat_date, &fat_time)) return false;
    15e8:	2000      	movs	r0, #0
	}
    15ea:	b002      	add	sp, #8
    15ec:	bd10      	pop	{r4, pc}
    15ee:	bf00      	nop

000015f0 <SDFile::getCreateTime(DateTimeFields&)>:
    return m_fFile ? m_fFile->getCreateDateTime(pdate, ptime) :
    15f0:	6d03      	ldr	r3, [r0, #80]	; 0x50
	virtual bool getCreateTime(DateTimeFields &tm) {
    15f2:	b510      	push	{r4, lr}
    15f4:	460c      	mov	r4, r1
    15f6:	b082      	sub	sp, #8
    15f8:	b32b      	cbz	r3, 1646 <SDFile::getCreateTime(DateTimeFields&)+0x56>
    15fa:	f10d 0206 	add.w	r2, sp, #6
    15fe:	a901      	add	r1, sp, #4
    1600:	4618      	mov	r0, r3
    1602:	f005 fe19 	bl	7238 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>
		if (!sdfatfile.getCreateDateTime(&fat_date, &fat_time)) return false;
    1606:	b338      	cbz	r0, 1658 <SDFile::getCreateTime(DateTimeFields&)+0x68>
		if ((fat_date == 0) && (fat_time == 0)) return false;
    1608:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    160c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    1610:	ea53 0102 	orrs.w	r1, r3, r2
    1614:	d020      	beq.n	1658 <SDFile::getCreateTime(DateTimeFields&)+0x68>
  return (fatTime >> 5) & 0X3F;
    1616:	f3c2 1c45 	ubfx	ip, r2, #5, #6
  return 2*(fatTime & 0X1F);
    161a:	f002 001f 	and.w	r0, r2, #31
  return fatTime >> 11;
    161e:	0ad2      	lsrs	r2, r2, #11
  return (fatDate >> 5) & 0XF;
    1620:	f3c3 1143 	ubfx	r1, r3, #5, #4
  return 2*(fatTime & 0X1F);
    1624:	0040      	lsls	r0, r0, #1
		tm.min = FS_MINUTE(fat_time);
    1626:	f884 c001 	strb.w	ip, [r4, #1]
  return fatTime >> 11;
    162a:	70a2      	strb	r2, [r4, #2]
  return 1980 + (fatDate >> 9);
    162c:	0a5a      	lsrs	r2, r3, #9
		tm.mon = FS_MONTH(fat_date) - 1;
    162e:	3901      	subs	r1, #1
  return fatDate & 0X1F;
    1630:	f003 031f 	and.w	r3, r3, #31
		tm.year = FS_YEAR(fat_date) - 1900;
    1634:	f502 62ea 	add.w	r2, r2, #1872	; 0x750
		tm.sec = FS_SECOND(fat_time);
    1638:	7020      	strb	r0, [r4, #0]
		return true;
    163a:	2001      	movs	r0, #1
		tm.mon = FS_MONTH(fat_date) - 1;
    163c:	7161      	strb	r1, [r4, #5]
		tm.mday = FS_DAY(fat_date);
    163e:	7123      	strb	r3, [r4, #4]
		tm.year = FS_YEAR(fat_date) - 1900;
    1640:	71a2      	strb	r2, [r4, #6]
	}
    1642:	b002      	add	sp, #8
    1644:	bd10      	pop	{r4, pc}
    1646:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->getCreateDateTime(pdate, ptime) : false;
    1648:	b130      	cbz	r0, 1658 <SDFile::getCreateTime(DateTimeFields&)+0x68>
    164a:	f10d 0206 	add.w	r2, sp, #6
    164e:	a901      	add	r1, sp, #4
    1650:	f003 fcb4 	bl	4fbc <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>
    1654:	2800      	cmp	r0, #0
    1656:	d1d7      	bne.n	1608 <SDFile::getCreateTime(DateTimeFields&)+0x18>
		if (!sdfatfile.getCreateDateTime(&fat_date, &fat_time)) return false;
    1658:	2000      	movs	r0, #0
	}
    165a:	b002      	add	sp, #8
    165c:	bd10      	pop	{r4, pc}
    165e:	bf00      	nop

00001660 <SDClass::mkdir(char const*)>:
	bool exists(const char *filepath) {
		return sdfs.exists(filepath);
	}
	bool mkdir(const char *filepath) {
    1660:	b530      	push	{r4, r5, lr}
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
    1662:	f8d0 4484 	ldr.w	r4, [r0, #1156]	; 0x484
    1666:	b08f      	sub	sp, #60	; 0x3c
    1668:	460a      	mov	r2, r1
    166a:	b14c      	cbz	r4, 1680 <SDClass::mkdir(char const*)+0x20>
  FatFile() {}
    166c:	2500      	movs	r5, #0
    return sub.mkdir(vwd(), path, pFlag);
    166e:	2301      	movs	r3, #1
    1670:	f504 6189 	add.w	r1, r4, #1096	; 0x448
    1674:	4668      	mov	r0, sp
    1676:	9500      	str	r5, [sp, #0]
    1678:	f005 feb4 	bl	73e4 <FatFile::mkdir(FatFile*, char const*, bool)>
		return sdfs.mkdir(filepath);
	}
    167c:	b00f      	add	sp, #60	; 0x3c
    167e:	bd30      	pop	{r4, r5, pc}
    1680:	f8d0 0488 	ldr.w	r0, [r0, #1160]	; 0x488
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    1684:	2800      	cmp	r0, #0
    1686:	d0f9      	beq.n	167c <SDClass::mkdir(char const*)+0x1c>
    return sub.mkdir(vwd(), path, pFlag);
    1688:	f500 6189 	add.w	r1, r0, #1096	; 0x448
    168c:	2301      	movs	r3, #1
    168e:	4668      	mov	r0, sp
  ExFatFile() {}
    1690:	940c      	str	r4, [sp, #48]	; 0x30
    1692:	f004 fb51 	bl	5d38 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    1696:	b00f      	add	sp, #60	; 0x3c
    1698:	bd30      	pop	{r4, r5, pc}
    169a:	bf00      	nop

0000169c <File::available()>:
		return (f) ? f->available() : 0;
    169c:	6900      	ldr	r0, [r0, #16]
    169e:	b190      	cbz	r0, 16c6 <File::available()+0x2a>
    16a0:	6803      	ldr	r3, [r0, #0]
    16a2:	4a15      	ldr	r2, [pc, #84]	; (16f8 <File::available()+0x5c>)
    16a4:	691b      	ldr	r3, [r3, #16]
    16a6:	4293      	cmp	r3, r2
    16a8:	d125      	bne.n	16f6 <File::available()+0x5a>
    return m_fFile ? m_fFile->available() :
    16aa:	6d03      	ldr	r3, [r0, #80]	; 0x50
    16ac:	b163      	cbz	r3, 16c8 <File::available()+0x2c>
    return isFile() ? fileSize() - curPosition() : 0;
    16ae:	7818      	ldrb	r0, [r3, #0]
    16b0:	f010 0008 	ands.w	r0, r0, #8
    16b4:	d007      	beq.n	16c6 <File::available()+0x2a>
    16b6:	69d8      	ldr	r0, [r3, #28]
    16b8:	695b      	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
    16ba:	1ac0      	subs	r0, r0, r3
    16bc:	bf48      	it	mi
    16be:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
    16c2:	4770      	bx	lr
    16c4:	4618      	mov	r0, r3
	}
    16c6:	4770      	bx	lr
    16c8:	6d43      	ldr	r3, [r0, #84]	; 0x54
           m_xFile ? m_xFile->available() : 0;
    16ca:	2b00      	cmp	r3, #0
    16cc:	d0fa      	beq.n	16c4 <File::available()+0x28>
    return isFile() ? fileSize() - curPosition() : 0;
    16ce:	f893 0031 	ldrb.w	r0, [r3, #49]	; 0x31
    16d2:	f010 0008 	ands.w	r0, r0, #8
    16d6:	d0f6      	beq.n	16c6 <File::available()+0x2a>
    16d8:	6918      	ldr	r0, [r3, #16]
    16da:	6819      	ldr	r1, [r3, #0]
    16dc:	695a      	ldr	r2, [r3, #20]
    16de:	1a40      	subs	r0, r0, r1
    16e0:	685b      	ldr	r3, [r3, #4]
    16e2:	eb62 0303 	sbc.w	r3, r2, r3
    return n > INT_MAX ? INT_MAX : n;
    16e6:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    16ea:	f173 0300 	sbcs.w	r3, r3, #0
    16ee:	d3ea      	bcc.n	16c6 <File::available()+0x2a>
    16f0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    16f4:	4770      	bx	lr
		return (f) ? f->available() : 0;
    16f6:	4718      	bx	r3
    16f8:	00001b39 	.word	0x00001b39

000016fc <File::peek()>:
		return (f) ? f->peek() : -1;
    16fc:	6903      	ldr	r3, [r0, #16]
    16fe:	b173      	cbz	r3, 171e <File::peek()+0x22>
    1700:	681a      	ldr	r2, [r3, #0]
    1702:	4908      	ldr	r1, [pc, #32]	; (1724 <File::peek()+0x28>)
    1704:	6952      	ldr	r2, [r2, #20]
    1706:	428a      	cmp	r2, r1
    1708:	d107      	bne.n	171a <File::peek()+0x1e>
    return m_fFile ? m_fFile->peek() :
    170a:	6d18      	ldr	r0, [r3, #80]	; 0x50
    170c:	b108      	cbz	r0, 1712 <File::peek()+0x16>
    170e:	f006 b889 	b.w	7824 <FatFile::peek()>
    1712:	6d58      	ldr	r0, [r3, #84]	; 0x54
           m_xFile ? m_xFile->peek() : -1;
    1714:	b118      	cbz	r0, 171e <File::peek()+0x22>
    1716:	f003 bda7 	b.w	5268 <ExFatFile::peek()>
    171a:	4618      	mov	r0, r3
    171c:	4710      	bx	r2
	}
    171e:	f04f 30ff 	mov.w	r0, #4294967295
    1722:	4770      	bx	lr
    1724:	000018c5 	.word	0x000018c5

00001728 <File::flush()>:
		if (f) f->flush();
    1728:	6903      	ldr	r3, [r0, #16]
    172a:	b163      	cbz	r3, 1746 <File::flush()+0x1e>
    172c:	681a      	ldr	r2, [r3, #0]
    172e:	4907      	ldr	r1, [pc, #28]	; (174c <File::flush()+0x24>)
    1730:	6992      	ldr	r2, [r2, #24]
    1732:	428a      	cmp	r2, r1
    1734:	d108      	bne.n	1748 <File::flush()+0x20>
    return m_fFile ? m_fFile->sync() :
    1736:	6d18      	ldr	r0, [r3, #80]	; 0x50
    1738:	b108      	cbz	r0, 173e <File::flush()+0x16>
    173a:	f006 bb17 	b.w	7d6c <FatFile::sync()>
    173e:	6d58      	ldr	r0, [r3, #84]	; 0x54
           m_xFile ? m_xFile->sync() : false;
    1740:	b108      	cbz	r0, 1746 <File::flush()+0x1e>
    1742:	f004 b9ef 	b.w	5b24 <ExFatFile::sync()>
	}
    1746:	4770      	bx	lr
		if (f) f->flush();
    1748:	4618      	mov	r0, r3
    174a:	4710      	bx	r2
    174c:	00001a09 	.word	0x00001a09

00001750 <File::write(unsigned char)>:
	size_t write(uint8_t b) {
    1750:	b500      	push	{lr}
		return (f) ? f->write(&b, 1) : 0;
    1752:	6900      	ldr	r0, [r0, #16]
	size_t write(uint8_t b) {
    1754:	b083      	sub	sp, #12
    1756:	f88d 1007 	strb.w	r1, [sp, #7]
		return (f) ? f->write(&b, 1) : 0;
    175a:	b160      	cbz	r0, 1776 <File::write(unsigned char)+0x26>
    175c:	6803      	ldr	r3, [r0, #0]
    175e:	4a10      	ldr	r2, [pc, #64]	; (17a0 <File::write(unsigned char)+0x50>)
    1760:	68db      	ldr	r3, [r3, #12]
    1762:	4293      	cmp	r3, r2
    1764:	d115      	bne.n	1792 <File::write(unsigned char)+0x42>
    return m_fFile ? m_fFile->write(buf, count) :
    1766:	6d03      	ldr	r3, [r0, #80]	; 0x50
    1768:	b143      	cbz	r3, 177c <File::write(unsigned char)+0x2c>
    176a:	2201      	movs	r2, #1
    176c:	f10d 0107 	add.w	r1, sp, #7
    1770:	4618      	mov	r0, r3
    1772:	f006 fba7 	bl	7ec4 <FatFile::write(void const*, unsigned int)>
	}
    1776:	b003      	add	sp, #12
    1778:	f85d fb04 	ldr.w	pc, [sp], #4
    177c:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->write(buf, count) : 0;
    177e:	2800      	cmp	r0, #0
    1780:	d0f9      	beq.n	1776 <File::write(unsigned char)+0x26>
    1782:	2201      	movs	r2, #1
    1784:	f10d 0107 	add.w	r1, sp, #7
    1788:	f004 fc70 	bl	606c <ExFatFile::write(void const*, unsigned int)>
    178c:	b003      	add	sp, #12
    178e:	f85d fb04 	ldr.w	pc, [sp], #4
		return (f) ? f->write(&b, 1) : 0;
    1792:	2201      	movs	r2, #1
    1794:	f10d 0107 	add.w	r1, sp, #7
    1798:	4798      	blx	r3
	}
    179a:	b003      	add	sp, #12
    179c:	f85d fb04 	ldr.w	pc, [sp], #4
    17a0:	00001a89 	.word	0x00001a89

000017a4 <SDFile::position()>:
    return m_fFile ? m_fFile->curPosition() :
    17a4:	6d03      	ldr	r3, [r0, #80]	; 0x50
    17a6:	b113      	cbz	r3, 17ae <SDFile::position()+0xa>
    17a8:	6958      	ldr	r0, [r3, #20]
    17aa:	2100      	movs	r1, #0
    17ac:	4770      	bx	lr
    17ae:	6d43      	ldr	r3, [r0, #84]	; 0x54
           m_xFile ? m_xFile->curPosition() : 0;
    17b0:	b113      	cbz	r3, 17b8 <SDFile::position()+0x14>
  uint64_t curPosition() const {return m_curPosition;}
    17b2:	e9d3 0100 	ldrd	r0, r1, [r3]
    17b6:	4770      	bx	lr
    17b8:	4618      	mov	r0, r3
    17ba:	4619      	mov	r1, r3
	}
    17bc:	4770      	bx	lr
    17be:	bf00      	nop

000017c0 <SDFile::size()>:
    return m_fFile ? m_fFile->fileSize() :
    17c0:	6d03      	ldr	r3, [r0, #80]	; 0x50
    17c2:	b113      	cbz	r3, 17ca <SDFile::size()+0xa>
    17c4:	69d8      	ldr	r0, [r3, #28]
    17c6:	2100      	movs	r1, #0
    17c8:	4770      	bx	lr
    17ca:	6d43      	ldr	r3, [r0, #84]	; 0x54
           m_xFile ? m_xFile->fileSize() : 0;
    17cc:	b113      	cbz	r3, 17d4 <SDFile::size()+0x14>
  uint64_t fileSize() const {return m_validLength;}
    17ce:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
    17d2:	4770      	bx	lr
    17d4:	4618      	mov	r0, r3
    17d6:	4619      	mov	r1, r3
	}
    17d8:	4770      	bx	lr
    17da:	bf00      	nop

000017dc <SDFile::openNextFile(unsigned char)>:
	virtual File openNextFile(uint8_t mode=0) {
    17dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    17de:	b095      	sub	sp, #84	; 0x54
    17e0:	2200      	movs	r2, #0
    17e2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    17e6:	4f24      	ldr	r7, [pc, #144]	; (1878 <SDFile::openNextFile(unsigned char)+0x9c>)
    tmpFile.openNext(this, oflag);
    17e8:	3118      	adds	r1, #24
    17ea:	4605      	mov	r5, r0
    17ec:	a804      	add	r0, sp, #16
    17ee:	f88d 200c 	strb.w	r2, [sp, #12]
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    17f2:	9700      	str	r7, [sp, #0]
    17f4:	e9cd 2401 	strd	r2, r4, [sp, #4]
  FsBaseFile() {}
    17f8:	e9cd 2212 	strd	r2, r2, [sp, #72]	; 0x48
    tmpFile.openNext(this, oflag);
    17fc:	f008 f866 	bl	98cc <FsBaseFile::openNext(FsBaseFile*, int)>
  bool isOpen() const {return m_fFile || m_xFile;}
    1800:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1802:	2b00      	cmp	r3, #0
    1804:	d02d      	beq.n	1862 <SDFile::openNextFile(unsigned char)+0x86>
		if (file) return File(new SDFile(file));
    1806:	205c      	movs	r0, #92	; 0x5c
class FileImpl {
    1808:	2600      	movs	r6, #0
    180a:	f00b ff3b 	bl	d684 <operator new(unsigned int)>
class Print
    180e:	9b01      	ldr	r3, [sp, #4]
    1810:	4604      	mov	r4, r0
    1812:	6046      	str	r6, [r0, #4]
    1814:	60c3      	str	r3, [r0, #12]
    1816:	a904      	add	r1, sp, #16
class Stream : public Print
    1818:	9b02      	ldr	r3, [sp, #8]
    181a:	3018      	adds	r0, #24
    181c:	f840 3c08 	str.w	r3, [r0, #-8]
    1820:	f89d 300c 	ldrb.w	r3, [sp, #12]
    1824:	f800 3c04 	strb.w	r3, [r0, #-4]
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    1828:	4b14      	ldr	r3, [pc, #80]	; (187c <SDFile::openNextFile(unsigned char)+0xa0>)
    182a:	f840 3c18 	str.w	r3, [r0, #-24]
    182e:	4b14      	ldr	r3, [pc, #80]	; (1880 <SDFile::openNextFile(unsigned char)+0xa4>)
    1830:	f840 3c10 	str.w	r3, [r0, #-16]
    1834:	f007 ff9c 	bl	9770 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
	File(FileImpl *file) {
    1838:	4b12      	ldr	r3, [pc, #72]	; (1884 <SDFile::openNextFile(unsigned char)+0xa8>)
	constexpr Stream() : _timeout(1000), read_error(0) {}
    183a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    183e:	60a7      	str	r7, [r4, #8]
    1840:	602b      	str	r3, [r5, #0]
		if (f) f->refcount++;
    1842:	6863      	ldr	r3, [r4, #4]
    1844:	65a6      	str	r6, [r4, #88]	; 0x58
    1846:	3301      	adds	r3, #1
	constexpr Print() : write_error(0) {}
    1848:	606e      	str	r6, [r5, #4]
    184a:	732e      	strb	r6, [r5, #12]
    184c:	60aa      	str	r2, [r5, #8]
		f = file;
    184e:	612c      	str	r4, [r5, #16]
		if (f) f->refcount++;
    1850:	6063      	str	r3, [r4, #4]
    1852:	4b0d      	ldr	r3, [pc, #52]	; (1888 <SDFile::openNextFile(unsigned char)+0xac>)
  ~FsBaseFile() {close();}
    1854:	a804      	add	r0, sp, #16
    1856:	9300      	str	r3, [sp, #0]
    1858:	f007 ffcc 	bl	97f4 <FsBaseFile::close()>
	}
    185c:	4628      	mov	r0, r5
    185e:	b015      	add	sp, #84	; 0x54
    1860:	bdf0      	pop	{r4, r5, r6, r7, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
    1862:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1864:	2b00      	cmp	r3, #0
    1866:	d1ce      	bne.n	1806 <SDFile::openNextFile(unsigned char)+0x2a>
	constexpr File() : f(nullptr) { }
    1868:	4a06      	ldr	r2, [pc, #24]	; (1884 <SDFile::openNextFile(unsigned char)+0xa8>)
    186a:	732b      	strb	r3, [r5, #12]
    186c:	602a      	str	r2, [r5, #0]
    186e:	612b      	str	r3, [r5, #16]
    1870:	e9c5 3401 	strd	r3, r4, [r5, #4]
    1874:	e7ed      	b.n	1852 <SDFile::openNextFile(unsigned char)+0x76>
    1876:	bf00      	nop
    1878:	20003334 	.word	0x20003334
    187c:	20003358 	.word	0x20003358
    1880:	200033b4 	.word	0x200033b4
    1884:	20003308 	.word	0x20003308
    1888:	20003240 	.word	0x20003240

0000188c <SDClass::exists(char const*)>:
	bool exists(const char *filepath) {
    188c:	b510      	push	{r4, lr}
    return m_fVol ? m_fVol->exists(path) :
    188e:	f8d0 4484 	ldr.w	r4, [r0, #1156]	; 0x484
    1892:	b08e      	sub	sp, #56	; 0x38
    1894:	460a      	mov	r2, r1
    1896:	b13c      	cbz	r4, 18a8 <SDClass::exists(char const*)+0x1c>
  FatFile() {}
    1898:	2300      	movs	r3, #0
    return tmp.open(this, path, O_RDONLY);
    189a:	4621      	mov	r1, r4
    189c:	4668      	mov	r0, sp
    189e:	9300      	str	r3, [sp, #0]
    18a0:	f005 fe98 	bl	75d4 <FatFile::open(FatVolume*, char const*, int)>
	}
    18a4:	b00e      	add	sp, #56	; 0x38
    18a6:	bd10      	pop	{r4, pc}
    18a8:	f8d0 1488 	ldr.w	r1, [r0, #1160]	; 0x488
           m_xVol ? m_xVol->exists(path) : false;
    18ac:	b131      	cbz	r1, 18bc <SDClass::exists(char const*)+0x30>
    return tmp.open(this, path, O_RDONLY);
    18ae:	4623      	mov	r3, r4
    18b0:	4668      	mov	r0, sp
  ExFatFile() {}
    18b2:	940c      	str	r4, [sp, #48]	; 0x30
    18b4:	f003 ffac 	bl	5810 <ExFatFile::open(ExFatVolume*, char const*, int)>
    18b8:	b00e      	add	sp, #56	; 0x38
    18ba:	bd10      	pop	{r4, pc}
    18bc:	4608      	mov	r0, r1
    18be:	b00e      	add	sp, #56	; 0x38
    18c0:	bd10      	pop	{r4, pc}
    18c2:	bf00      	nop

000018c4 <SDFile::peek()>:
    return m_fFile ? m_fFile->peek() :
    18c4:	6d03      	ldr	r3, [r0, #80]	; 0x50
    18c6:	b113      	cbz	r3, 18ce <SDFile::peek()+0xa>
    18c8:	4618      	mov	r0, r3
    18ca:	f005 bfab 	b.w	7824 <FatFile::peek()>
    18ce:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->peek() : -1;
    18d0:	b108      	cbz	r0, 18d6 <SDFile::peek()+0x12>
    18d2:	f003 bcc9 	b.w	5268 <ExFatFile::peek()>
	}
    18d6:	f04f 30ff 	mov.w	r0, #4294967295
    18da:	4770      	bx	lr

000018dc <StreamFile<FsBaseFile, unsigned long long>::peek()>:
    return m_fFile ? m_fFile->peek() :
    18dc:	6c83      	ldr	r3, [r0, #72]	; 0x48
    18de:	b113      	cbz	r3, 18e6 <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
    18e0:	4618      	mov	r0, r3
    18e2:	f005 bf9f 	b.w	7824 <FatFile::peek()>
    18e6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->peek() : -1;
    18e8:	b108      	cbz	r0, 18ee <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
    18ea:	f003 bcbd 	b.w	5268 <ExFatFile::peek()>
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return BaseFile::peek();
  }
    18ee:	f04f 30ff 	mov.w	r0, #4294967295
    18f2:	4770      	bx	lr

000018f4 <SDClass::remove(char const*)>:
	bool rename(const char *oldfilepath, const char *newfilepath) {
		return sdfs.rename(oldfilepath, newfilepath);
	}
	bool remove(const char *filepath) {
    18f4:	b510      	push	{r4, lr}
    return m_fVol ? m_fVol->remove(path) :
    18f6:	f8d0 4484 	ldr.w	r4, [r0, #1156]	; 0x484
    18fa:	b08e      	sub	sp, #56	; 0x38
    18fc:	460a      	mov	r2, r1
    18fe:	b14c      	cbz	r4, 1914 <SDClass::remove(char const*)+0x20>
    1900:	2000      	movs	r0, #0
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    1902:	2301      	movs	r3, #1
    1904:	4621      	mov	r1, r4
    1906:	9000      	str	r0, [sp, #0]
    1908:	4668      	mov	r0, sp
    190a:	f005 fe63 	bl	75d4 <FatFile::open(FatVolume*, char const*, int)>
    190e:	b980      	cbnz	r0, 1932 <SDClass::remove(char const*)+0x3e>
		return sdfs.remove(filepath);
	}
    1910:	b00e      	add	sp, #56	; 0x38
    1912:	bd10      	pop	{r4, pc}
    1914:	f8d0 1488 	ldr.w	r1, [r0, #1160]	; 0x488
           m_xVol ? m_xVol->remove(path) : false;
    1918:	b141      	cbz	r1, 192c <SDClass::remove(char const*)+0x38>
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    191a:	2301      	movs	r3, #1
    191c:	4668      	mov	r0, sp
    191e:	940c      	str	r4, [sp, #48]	; 0x30
    1920:	f003 ff76 	bl	5810 <ExFatFile::open(ExFatVolume*, char const*, int)>
    1924:	b950      	cbnz	r0, 193c <SDClass::remove(char const*)+0x48>
    1926:	2000      	movs	r0, #0
    1928:	b00e      	add	sp, #56	; 0x38
    192a:	bd10      	pop	{r4, pc}
    192c:	4608      	mov	r0, r1
    192e:	b00e      	add	sp, #56	; 0x38
    1930:	bd10      	pop	{r4, pc}
    1932:	4668      	mov	r0, sp
    1934:	f006 ff54 	bl	87e0 <FatFile::remove()>
    1938:	b00e      	add	sp, #56	; 0x38
    193a:	bd10      	pop	{r4, pc}
    193c:	4668      	mov	r0, sp
    193e:	f003 ffcb 	bl	58d8 <ExFatFile::remove()>
    1942:	2800      	cmp	r0, #0
    1944:	d0ef      	beq.n	1926 <SDClass::remove(char const*)+0x32>
    1946:	e7e3      	b.n	1910 <SDClass::remove(char const*)+0x1c>

00001948 <SDFile::isDirectory()>:
    return m_fFile ? m_fFile->isDir() :
    1948:	6d03      	ldr	r3, [r0, #80]	; 0x50
    194a:	b133      	cbz	r3, 195a <SDFile::isDirectory()+0x12>
  bool isDir() const {return m_attributes & FILE_ATTR_DIR;}
    194c:	781b      	ldrb	r3, [r3, #0]
    194e:	f013 0f70 	tst.w	r3, #112	; 0x70
    1952:	bf14      	ite	ne
    1954:	2001      	movne	r0, #1
    1956:	2000      	moveq	r0, #0
    1958:	4770      	bx	lr
    195a:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->isDir() : false;
    195c:	b130      	cbz	r0, 196c <SDFile::isDirectory()+0x24>
    195e:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    1962:	f013 0f50 	tst.w	r3, #80	; 0x50
    1966:	bf14      	ite	ne
    1968:	2001      	movne	r0, #1
    196a:	2000      	moveq	r0, #0
	}
    196c:	4770      	bx	lr
    196e:	bf00      	nop

00001970 <SDFile::rewindDirectory()>:
	virtual void rewindDirectory(void) {
    1970:	b510      	push	{r4, lr}
    1972:	4604      	mov	r4, r0
    return m_fFile ? m_fFile->isDir() :
    1974:	6d00      	ldr	r0, [r0, #80]	; 0x50
    1976:	b180      	cbz	r0, 199a <SDFile::rewindDirectory()+0x2a>
  int read() {
    return BaseFile::read();
  }
  /** Rewind a file if it is a directory */
  void rewindDirectory() {
    if (BaseFile::isDir()) {
    1978:	7803      	ldrb	r3, [r0, #0]
    197a:	f013 0f70 	tst.w	r3, #112	; 0x70
    197e:	d100      	bne.n	1982 <SDFile::rewindDirectory()+0x12>
	}
    1980:	bd10      	pop	{r4, pc}
    seekSet(0);
    1982:	2100      	movs	r1, #0
    1984:	f006 f8c2 	bl	7b0c <FatFile::seekSet(unsigned long)>
    if (m_xFile) m_xFile->rewind();
    1988:	6d60      	ldr	r0, [r4, #84]	; 0x54
    198a:	2800      	cmp	r0, #0
    198c:	d0f8      	beq.n	1980 <SDFile::rewindDirectory()+0x10>
    seekSet(0);
    198e:	2200      	movs	r2, #0
    1990:	2300      	movs	r3, #0
    1992:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1996:	f003 bc7d 	b.w	5294 <ExFatFile::seekSet(unsigned long long)>
    199a:	6d60      	ldr	r0, [r4, #84]	; 0x54
           m_xFile ? m_xFile->isDir() : false;
    199c:	2800      	cmp	r0, #0
    199e:	d0ef      	beq.n	1980 <SDFile::rewindDirectory()+0x10>
    19a0:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    19a4:	f013 0f50 	tst.w	r3, #80	; 0x50
    19a8:	d0ea      	beq.n	1980 <SDFile::rewindDirectory()+0x10>
    19aa:	2200      	movs	r2, #0
    19ac:	2300      	movs	r3, #0
    19ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    19b2:	f003 bc6f 	b.w	5294 <ExFatFile::seekSet(unsigned long long)>
    19b6:	bf00      	nop

000019b8 <SDFile::read(void*, unsigned int)>:
    return m_fFile ? m_fFile->read(buf, count) :
    19b8:	6d03      	ldr	r3, [r0, #80]	; 0x50
    19ba:	b113      	cbz	r3, 19c2 <SDFile::read(void*, unsigned int)+0xa>
    19bc:	4618      	mov	r0, r3
    19be:	f005 be5d 	b.w	767c <FatFile::read(void*, unsigned int)>
    19c2:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->read(buf, count) : -1;
    19c4:	b108      	cbz	r0, 19ca <SDFile::read(void*, unsigned int)+0x12>
    19c6:	f003 bb7f 	b.w	50c8 <ExFatFile::read(void*, unsigned int)>
	}
    19ca:	f04f 30ff 	mov.w	r0, #4294967295
    19ce:	4770      	bx	lr

000019d0 <StreamFile<FsBaseFile, unsigned long long>::read()>:
    return m_fFile ? m_fFile->read(buf, count) :
    19d0:	6c83      	ldr	r3, [r0, #72]	; 0x48
  int read() {
    19d2:	b500      	push	{lr}
    19d4:	b083      	sub	sp, #12
    19d6:	b163      	cbz	r3, 19f2 <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
    19d8:	2201      	movs	r2, #1
    19da:	f10d 0107 	add.w	r1, sp, #7
    19de:	4618      	mov	r0, r3
    19e0:	f005 fe4c 	bl	767c <FatFile::read(void*, unsigned int)>
    return read(&b, 1) == 1 ? b : -1;
    19e4:	2801      	cmp	r0, #1
    19e6:	d10c      	bne.n	1a02 <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
    19e8:	f89d 0007 	ldrb.w	r0, [sp, #7]
  }
    19ec:	b003      	add	sp, #12
    19ee:	f85d fb04 	ldr.w	pc, [sp], #4
    19f2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->read(buf, count) : -1;
    19f4:	b128      	cbz	r0, 1a02 <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
    19f6:	2201      	movs	r2, #1
    19f8:	f10d 0107 	add.w	r1, sp, #7
    19fc:	f003 fb64 	bl	50c8 <ExFatFile::read(void*, unsigned int)>
    1a00:	e7f0      	b.n	19e4 <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
    return read(&b, 1) == 1 ? b : -1;
    1a02:	f04f 30ff 	mov.w	r0, #4294967295
    1a06:	e7f1      	b.n	19ec <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

00001a08 <SDFile::flush()>:
    return m_fFile ? m_fFile->sync() :
    1a08:	6d03      	ldr	r3, [r0, #80]	; 0x50
    1a0a:	b113      	cbz	r3, 1a12 <SDFile::flush()+0xa>
    1a0c:	4618      	mov	r0, r3
    1a0e:	f006 b9ad 	b.w	7d6c <FatFile::sync()>
    1a12:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->sync() : false;
    1a14:	b108      	cbz	r0, 1a1a <SDFile::flush()+0x12>
    1a16:	f004 b885 	b.w	5b24 <ExFatFile::sync()>
	}
    1a1a:	4770      	bx	lr

00001a1c <StreamFile<FsBaseFile, unsigned long long>::flush()>:
    return m_fFile ? m_fFile->sync() :
    1a1c:	6c83      	ldr	r3, [r0, #72]	; 0x48
    1a1e:	b113      	cbz	r3, 1a26 <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
    1a20:	4618      	mov	r0, r3
    1a22:	f006 b9a3 	b.w	7d6c <FatFile::sync()>
    1a26:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->sync() : false;
    1a28:	b108      	cbz	r0, 1a2e <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
    1a2a:	f004 b87b 	b.w	5b24 <ExFatFile::sync()>
  }
    1a2e:	4770      	bx	lr

00001a30 <File::read()>:
		if (!f) return -1;
    1a30:	6903      	ldr	r3, [r0, #16]
    1a32:	b323      	cbz	r3, 1a7e <File::read()+0x4e>
		if (f->read(&b, 1) < 1) return -1;
    1a34:	6819      	ldr	r1, [r3, #0]
    1a36:	4a13      	ldr	r2, [pc, #76]	; (1a84 <File::read()+0x54>)
	int read() {
    1a38:	b510      	push	{r4, lr}
		if (f->read(&b, 1) < 1) return -1;
    1a3a:	688c      	ldr	r4, [r1, #8]
	int read() {
    1a3c:	b082      	sub	sp, #8
    1a3e:	4294      	cmp	r4, r2
    1a40:	d114      	bne.n	1a6c <File::read()+0x3c>
    return m_fFile ? m_fFile->read(buf, count) :
    1a42:	6d18      	ldr	r0, [r3, #80]	; 0x50
    1a44:	b148      	cbz	r0, 1a5a <File::read()+0x2a>
    1a46:	2201      	movs	r2, #1
    1a48:	f10d 0107 	add.w	r1, sp, #7
    1a4c:	f005 fe16 	bl	767c <FatFile::read(void*, unsigned int)>
		if (f->read(&b, 1) < 1) return -1;
    1a50:	b190      	cbz	r0, 1a78 <File::read()+0x48>
		return b;
    1a52:	f89d 0007 	ldrb.w	r0, [sp, #7]
	}
    1a56:	b002      	add	sp, #8
    1a58:	bd10      	pop	{r4, pc}
    1a5a:	6d58      	ldr	r0, [r3, #84]	; 0x54
           m_xFile ? m_xFile->read(buf, count) : -1;
    1a5c:	2800      	cmp	r0, #0
    1a5e:	d0f8      	beq.n	1a52 <File::read()+0x22>
    1a60:	2201      	movs	r2, #1
    1a62:	f10d 0107 	add.w	r1, sp, #7
    1a66:	f003 fb2f 	bl	50c8 <ExFatFile::read(void*, unsigned int)>
    1a6a:	e7f1      	b.n	1a50 <File::read()+0x20>
		if (f->read(&b, 1) < 1) return -1;
    1a6c:	2201      	movs	r2, #1
    1a6e:	f10d 0107 	add.w	r1, sp, #7
    1a72:	4618      	mov	r0, r3
    1a74:	47a0      	blx	r4
    1a76:	e7eb      	b.n	1a50 <File::read()+0x20>
		if (!f) return -1;
    1a78:	f04f 30ff 	mov.w	r0, #4294967295
    1a7c:	e7eb      	b.n	1a56 <File::read()+0x26>
    1a7e:	f04f 30ff 	mov.w	r0, #4294967295
	}
    1a82:	4770      	bx	lr
    1a84:	000019b9 	.word	0x000019b9

00001a88 <SDFile::write(void const*, unsigned int)>:
    return m_fFile ? m_fFile->write(buf, count) :
    1a88:	6d03      	ldr	r3, [r0, #80]	; 0x50
    1a8a:	b113      	cbz	r3, 1a92 <SDFile::write(void const*, unsigned int)+0xa>
    1a8c:	4618      	mov	r0, r3
    1a8e:	f006 ba19 	b.w	7ec4 <FatFile::write(void const*, unsigned int)>
    1a92:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->write(buf, count) : 0;
    1a94:	b108      	cbz	r0, 1a9a <SDFile::write(void const*, unsigned int)+0x12>
    1a96:	f004 bae9 	b.w	606c <ExFatFile::write(void const*, unsigned int)>
	}
    1a9a:	4770      	bx	lr

00001a9c <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
    return m_fFile ? m_fFile->write(buf, count) :
    1a9c:	6c83      	ldr	r3, [r0, #72]	; 0x48
    1a9e:	b113      	cbz	r3, 1aa6 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xa>
    1aa0:	4618      	mov	r0, r3
    1aa2:	f006 ba0f 	b.w	7ec4 <FatFile::write(void const*, unsigned int)>
    1aa6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
    1aa8:	b108      	cbz	r0, 1aae <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x12>
    1aaa:	f004 badf 	b.w	606c <ExFatFile::write(void const*, unsigned int)>
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
    return BaseFile::write(buffer, size);
  }
    1aae:	4770      	bx	lr

00001ab0 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  size_t write(uint8_t b) {
    1ab0:	b500      	push	{lr}
    return m_fFile ? m_fFile->write(buf, count) :
    1ab2:	6c83      	ldr	r3, [r0, #72]	; 0x48
    1ab4:	b083      	sub	sp, #12
    1ab6:	f88d 1007 	strb.w	r1, [sp, #7]
    1aba:	b143      	cbz	r3, 1ace <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
    1abc:	2201      	movs	r2, #1
    1abe:	f10d 0107 	add.w	r1, sp, #7
    1ac2:	4618      	mov	r0, r3
    1ac4:	f006 f9fe 	bl	7ec4 <FatFile::write(void const*, unsigned int)>
  }
    1ac8:	b003      	add	sp, #12
    1aca:	f85d fb04 	ldr.w	pc, [sp], #4
    1ace:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
    1ad0:	2800      	cmp	r0, #0
    1ad2:	d0f9      	beq.n	1ac8 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
    1ad4:	2201      	movs	r2, #1
    1ad6:	f10d 0107 	add.w	r1, sp, #7
    1ada:	f004 fac7 	bl	606c <ExFatFile::write(void const*, unsigned int)>
    1ade:	b003      	add	sp, #12
    1ae0:	f85d fb04 	ldr.w	pc, [sp], #4

00001ae4 <SDFile::setCreateTime(DateTimeFields const&)>:
		if (tm.year < 80 || tm.year > 207) return false;
    1ae4:	798a      	ldrb	r2, [r1, #6]
    1ae6:	f1a2 0350 	sub.w	r3, r2, #80	; 0x50
    1aea:	061b      	lsls	r3, r3, #24
    1aec:	d422      	bmi.n	1b34 <SDFile::setCreateTime(DateTimeFields const&)+0x50>
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
    1aee:	f202 726c 	addw	r2, r2, #1900	; 0x76c
	virtual bool setCreateTime(const DateTimeFields &tm) {
    1af2:	b5f0      	push	{r4, r5, r6, r7, lr}
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
    1af4:	794b      	ldrb	r3, [r1, #5]
	virtual bool setCreateTime(const DateTimeFields &tm) {
    1af6:	b085      	sub	sp, #20
    return m_fFile ?
    1af8:	6d04      	ldr	r4, [r0, #80]	; 0x50
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
    1afa:	3301      	adds	r3, #1
			tm.mday, tm.hour, tm.min, tm.sec);
    1afc:	790d      	ldrb	r5, [r1, #4]
    1afe:	788e      	ldrb	r6, [r1, #2]
    1b00:	784f      	ldrb	r7, [r1, #1]
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
    1b02:	b2db      	uxtb	r3, r3
			tm.mday, tm.hour, tm.min, tm.sec);
    1b04:	7809      	ldrb	r1, [r1, #0]
    1b06:	b14c      	cbz	r4, 1b1c <SDFile::setCreateTime(DateTimeFields const&)+0x38>
           m_fFile->timestamp(flags, year, month, day, hour, minute, second) :
    1b08:	4620      	mov	r0, r4
    1b0a:	9601      	str	r6, [sp, #4]
    1b0c:	9500      	str	r5, [sp, #0]
    1b0e:	e9cd 7102 	strd	r7, r1, [sp, #8]
    1b12:	2102      	movs	r1, #2
    1b14:	f006 f930 	bl	7d78 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
	}
    1b18:	b005      	add	sp, #20
    1b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b1c:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ?
    1b1e:	2800      	cmp	r0, #0
    1b20:	d0fa      	beq.n	1b18 <SDFile::setCreateTime(DateTimeFields const&)+0x34>
           m_xFile->timestamp(flags, year, month, day, hour, minute, second) :
    1b22:	9601      	str	r6, [sp, #4]
    1b24:	9500      	str	r5, [sp, #0]
    1b26:	e9cd 7102 	strd	r7, r1, [sp, #8]
    1b2a:	2102      	movs	r1, #2
    1b2c:	f004 f970 	bl	5e10 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
    1b30:	b005      	add	sp, #20
    1b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (tm.year < 80 || tm.year > 207) return false;
    1b34:	2000      	movs	r0, #0
	}
    1b36:	4770      	bx	lr

00001b38 <SDFile::available()>:
    return m_fFile ? m_fFile->available() :
    1b38:	6d03      	ldr	r3, [r0, #80]	; 0x50
    1b3a:	b153      	cbz	r3, 1b52 <SDFile::available()+0x1a>
    return isFile() ? fileSize() - curPosition() : 0;
    1b3c:	7818      	ldrb	r0, [r3, #0]
    1b3e:	f010 0008 	ands.w	r0, r0, #8
    1b42:	d00d      	beq.n	1b60 <SDFile::available()+0x28>
    1b44:	69d8      	ldr	r0, [r3, #28]
    1b46:	695b      	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
    1b48:	1ac0      	subs	r0, r0, r3
    1b4a:	bf48      	it	mi
    1b4c:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
    1b50:	4770      	bx	lr
    1b52:	6d43      	ldr	r3, [r0, #84]	; 0x54
           m_xFile ? m_xFile->available() : 0;
    1b54:	b1a3      	cbz	r3, 1b80 <SDFile::available()+0x48>
    return isFile() ? fileSize() - curPosition() : 0;
    1b56:	f893 0031 	ldrb.w	r0, [r3, #49]	; 0x31
    1b5a:	f010 0008 	ands.w	r0, r0, #8
    1b5e:	d100      	bne.n	1b62 <SDFile::available()+0x2a>
	}
    1b60:	4770      	bx	lr
    1b62:	6918      	ldr	r0, [r3, #16]
    1b64:	6819      	ldr	r1, [r3, #0]
    1b66:	695a      	ldr	r2, [r3, #20]
    1b68:	1a40      	subs	r0, r0, r1
    1b6a:	685b      	ldr	r3, [r3, #4]
    1b6c:	eb62 0303 	sbc.w	r3, r2, r3
    return n > INT_MAX ? INT_MAX : n;
    1b70:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    1b74:	f173 0300 	sbcs.w	r3, r3, #0
    1b78:	d3f2      	bcc.n	1b60 <SDFile::available()+0x28>
    1b7a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    1b7e:	4770      	bx	lr
    1b80:	4618      	mov	r0, r3
		return sdfatfile.available();
    1b82:	e7ed      	b.n	1b60 <SDFile::available()+0x28>

00001b84 <StreamFile<FsBaseFile, unsigned long long>::available()>:
    return m_fFile ? m_fFile->available() :
    1b84:	6c83      	ldr	r3, [r0, #72]	; 0x48
    1b86:	b153      	cbz	r3, 1b9e <StreamFile<FsBaseFile, unsigned long long>::available()+0x1a>
    return isFile() ? fileSize() - curPosition() : 0;
    1b88:	7818      	ldrb	r0, [r3, #0]
    1b8a:	f010 0008 	ands.w	r0, r0, #8
    1b8e:	d00d      	beq.n	1bac <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>
    1b90:	69d8      	ldr	r0, [r3, #28]
    1b92:	695b      	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
    1b94:	1ac0      	subs	r0, r0, r3
    1b96:	bf48      	it	mi
    1b98:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
    1b9c:	4770      	bx	lr
    1b9e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->available() : 0;
    1ba0:	b1a3      	cbz	r3, 1bcc <StreamFile<FsBaseFile, unsigned long long>::available()+0x48>
    return isFile() ? fileSize() - curPosition() : 0;
    1ba2:	f893 0031 	ldrb.w	r0, [r3, #49]	; 0x31
    1ba6:	f010 0008 	ands.w	r0, r0, #8
    1baa:	d100      	bne.n	1bae <StreamFile<FsBaseFile, unsigned long long>::available()+0x2a>
  }
    1bac:	4770      	bx	lr
    1bae:	6918      	ldr	r0, [r3, #16]
    1bb0:	6819      	ldr	r1, [r3, #0]
    1bb2:	695a      	ldr	r2, [r3, #20]
    1bb4:	1a40      	subs	r0, r0, r1
    1bb6:	685b      	ldr	r3, [r3, #4]
    1bb8:	eb62 0303 	sbc.w	r3, r2, r3
    return n > INT_MAX ? INT_MAX : n;
    1bbc:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    1bc0:	f173 0300 	sbcs.w	r3, r3, #0
    1bc4:	d3f2      	bcc.n	1bac <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>
    1bc6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    1bca:	4770      	bx	lr
    1bcc:	4618      	mov	r0, r3
    return BaseFile::available();
    1bce:	e7ed      	b.n	1bac <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>

00001bd0 <File::write(unsigned char const*, unsigned int)>:
		return (f) ? f->write((void*)buf, size) : 0;
    1bd0:	6903      	ldr	r3, [r0, #16]
    1bd2:	b1d3      	cbz	r3, 1c0a <File::write(unsigned char const*, unsigned int)+0x3a>
    1bd4:	480e      	ldr	r0, [pc, #56]	; (1c10 <File::write(unsigned char const*, unsigned int)+0x40>)
	virtual size_t write(const uint8_t *buf, size_t size) {
    1bd6:	b410      	push	{r4}
		return (f) ? f->write((void*)buf, size) : 0;
    1bd8:	681c      	ldr	r4, [r3, #0]
    1bda:	68e4      	ldr	r4, [r4, #12]
    1bdc:	4284      	cmp	r4, r0
    1bde:	d10f      	bne.n	1c00 <File::write(unsigned char const*, unsigned int)+0x30>
    return m_fFile ? m_fFile->write(buf, count) :
    1be0:	6d18      	ldr	r0, [r3, #80]	; 0x50
    1be2:	b118      	cbz	r0, 1bec <File::write(unsigned char const*, unsigned int)+0x1c>
	}
    1be4:	f85d 4b04 	ldr.w	r4, [sp], #4
    1be8:	f006 b96c 	b.w	7ec4 <FatFile::write(void const*, unsigned int)>
    1bec:	6d58      	ldr	r0, [r3, #84]	; 0x54
           m_xFile ? m_xFile->write(buf, count) : 0;
    1bee:	b118      	cbz	r0, 1bf8 <File::write(unsigned char const*, unsigned int)+0x28>
    1bf0:	f85d 4b04 	ldr.w	r4, [sp], #4
    1bf4:	f004 ba3a 	b.w	606c <ExFatFile::write(void const*, unsigned int)>
    1bf8:	2000      	movs	r0, #0
    1bfa:	f85d 4b04 	ldr.w	r4, [sp], #4
    1bfe:	4770      	bx	lr
		return (f) ? f->write((void*)buf, size) : 0;
    1c00:	4618      	mov	r0, r3
    1c02:	4623      	mov	r3, r4
	}
    1c04:	f85d 4b04 	ldr.w	r4, [sp], #4
		return (f) ? f->write((void*)buf, size) : 0;
    1c08:	4718      	bx	r3
	}
    1c0a:	2000      	movs	r0, #0
    1c0c:	4770      	bx	lr
    1c0e:	bf00      	nop
    1c10:	00001a89 	.word	0x00001a89

00001c14 <SDFile::~SDFile()>:
	virtual ~SDFile(void) {
    1c14:	b538      	push	{r3, r4, r5, lr}
    1c16:	4604      	mov	r4, r0
    1c18:	4b0c      	ldr	r3, [pc, #48]	; (1c4c <SDFile::~SDFile()+0x38>)
		if (filename) {
    1c1a:	6d80      	ldr	r0, [r0, #88]	; 0x58
	virtual ~SDFile(void) {
    1c1c:	6023      	str	r3, [r4, #0]
		if (filename) {
    1c1e:	b118      	cbz	r0, 1c28 <SDFile::~SDFile()+0x14>
			free(filename);
    1c20:	f00d fa64 	bl	f0ec <free>
			filename = nullptr;
    1c24:	2300      	movs	r3, #0
    1c26:	65a3      	str	r3, [r4, #88]	; 0x58
  bool isOpen() const {return m_fFile || m_xFile;}
    1c28:	6d23      	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
    1c2a:	f104 0518 	add.w	r5, r4, #24
    1c2e:	b14b      	cbz	r3, 1c44 <SDFile::~SDFile()+0x30>
    1c30:	4628      	mov	r0, r5
    1c32:	f007 fddf 	bl	97f4 <FsBaseFile::close()>
class StreamFile : public stream_t, public BaseFile {
    1c36:	4b06      	ldr	r3, [pc, #24]	; (1c50 <SDFile::~SDFile()+0x3c>)
  ~FsBaseFile() {close();}
    1c38:	4628      	mov	r0, r5
    1c3a:	60a3      	str	r3, [r4, #8]
    1c3c:	f007 fdda 	bl	97f4 <FsBaseFile::close()>
	}
    1c40:	4620      	mov	r0, r4
    1c42:	bd38      	pop	{r3, r4, r5, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
    1c44:	6d63      	ldr	r3, [r4, #84]	; 0x54
    1c46:	2b00      	cmp	r3, #0
    1c48:	d1f2      	bne.n	1c30 <SDFile::~SDFile()+0x1c>
    1c4a:	e7f4      	b.n	1c36 <SDFile::~SDFile()+0x22>
    1c4c:	20003358 	.word	0x20003358
    1c50:	20003240 	.word	0x20003240

00001c54 <SDFile::~SDFile()>:
	virtual ~SDFile(void) {
    1c54:	b538      	push	{r3, r4, r5, lr}
    1c56:	4604      	mov	r4, r0
    1c58:	4b0e      	ldr	r3, [pc, #56]	; (1c94 <SDFile::~SDFile()+0x40>)
		if (filename) {
    1c5a:	6d80      	ldr	r0, [r0, #88]	; 0x58
	virtual ~SDFile(void) {
    1c5c:	6023      	str	r3, [r4, #0]
		if (filename) {
    1c5e:	b118      	cbz	r0, 1c68 <SDFile::~SDFile()+0x14>
			free(filename);
    1c60:	f00d fa44 	bl	f0ec <free>
			filename = nullptr;
    1c64:	2300      	movs	r3, #0
    1c66:	65a3      	str	r3, [r4, #88]	; 0x58
    1c68:	6d23      	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
    1c6a:	f104 0518 	add.w	r5, r4, #24
    1c6e:	b16b      	cbz	r3, 1c8c <SDFile::~SDFile()+0x38>
    1c70:	4628      	mov	r0, r5
    1c72:	f007 fdbf 	bl	97f4 <FsBaseFile::close()>
    1c76:	4b08      	ldr	r3, [pc, #32]	; (1c98 <SDFile::~SDFile()+0x44>)
  ~FsBaseFile() {close();}
    1c78:	4628      	mov	r0, r5
    1c7a:	60a3      	str	r3, [r4, #8]
    1c7c:	f007 fdba 	bl	97f4 <FsBaseFile::close()>
	}
    1c80:	4620      	mov	r0, r4
    1c82:	215c      	movs	r1, #92	; 0x5c
    1c84:	f00b fd00 	bl	d688 <operator delete(void*, unsigned int)>
    1c88:	4620      	mov	r0, r4
    1c8a:	bd38      	pop	{r3, r4, r5, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
    1c8c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    1c8e:	2b00      	cmp	r3, #0
    1c90:	d1ee      	bne.n	1c70 <SDFile::~SDFile()+0x1c>
    1c92:	e7f0      	b.n	1c76 <SDFile::~SDFile()+0x22>
    1c94:	20003358 	.word	0x20003358
    1c98:	20003240 	.word	0x20003240

00001c9c <SDFile::seek(unsigned long long, int)>:
	virtual bool seek(uint64_t pos, int mode = SeekSet) {
    1c9c:	b430      	push	{r4, r5}
    1c9e:	9c02      	ldr	r4, [sp, #8]
    1ca0:	4611      	mov	r1, r2
    1ca2:	469c      	mov	ip, r3
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
    1ca4:	b134      	cbz	r4, 1cb4 <SDFile::seek(unsigned long long, int)+0x18>
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
    1ca6:	2c01      	cmp	r4, #1
    1ca8:	d01c      	beq.n	1ce4 <SDFile::seek(unsigned long long, int)+0x48>
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
    1caa:	2c02      	cmp	r4, #2
    1cac:	d00e      	beq.n	1ccc <SDFile::seek(unsigned long long, int)+0x30>
	}
    1cae:	2000      	movs	r0, #0
    1cb0:	bc30      	pop	{r4, r5}
    1cb2:	4770      	bx	lr
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    1cb4:	6d05      	ldr	r5, [r0, #80]	; 0x50
    1cb6:	b1f5      	cbz	r5, 1cf6 <SDFile::seek(unsigned long long, int)+0x5a>
    1cb8:	f04f 33ff 	mov.w	r3, #4294967295
    1cbc:	4293      	cmp	r3, r2
    1cbe:	eb74 040c 	sbcs.w	r4, r4, ip
    1cc2:	d3f4      	bcc.n	1cae <SDFile::seek(unsigned long long, int)+0x12>
    1cc4:	4628      	mov	r0, r5
    1cc6:	bc30      	pop	{r4, r5}
    1cc8:	f005 bf20 	b.w	7b0c <FatFile::seekSet(unsigned long)>
    return m_fFile ? m_fFile->fileSize() :
    1ccc:	6d02      	ldr	r2, [r0, #80]	; 0x50
    1cce:	b30a      	cbz	r2, 1d14 <SDFile::seek(unsigned long long, int)+0x78>
    1cd0:	69d3      	ldr	r3, [r2, #28]
    return seekSet(fileSize() + offset);
    1cd2:	1859      	adds	r1, r3, r1
    1cd4:	f14c 0300 	adc.w	r3, ip, #0
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    1cd8:	2b00      	cmp	r3, #0
    1cda:	d1e8      	bne.n	1cae <SDFile::seek(unsigned long long, int)+0x12>
    1cdc:	4610      	mov	r0, r2
    1cde:	bc30      	pop	{r4, r5}
    1ce0:	f005 bf14 	b.w	7b0c <FatFile::seekSet(unsigned long)>
    return m_fFile ? m_fFile->curPosition() :
    1ce4:	6d02      	ldr	r2, [r0, #80]	; 0x50
    1ce6:	b162      	cbz	r2, 1d02 <SDFile::seek(unsigned long long, int)+0x66>
    1ce8:	6953      	ldr	r3, [r2, #20]
    return seekSet(curPosition() + offset);
    1cea:	1859      	adds	r1, r3, r1
    1cec:	f14c 0300 	adc.w	r3, ip, #0
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    1cf0:	2b00      	cmp	r3, #0
    1cf2:	d1dc      	bne.n	1cae <SDFile::seek(unsigned long long, int)+0x12>
    1cf4:	e7f2      	b.n	1cdc <SDFile::seek(unsigned long long, int)+0x40>
    1cf6:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->seekSet(pos) : false;
    1cf8:	2800      	cmp	r0, #0
    1cfa:	d0d8      	beq.n	1cae <SDFile::seek(unsigned long long, int)+0x12>
    1cfc:	bc30      	pop	{r4, r5}
    1cfe:	f003 bac9 	b.w	5294 <ExFatFile::seekSet(unsigned long long)>
    1d02:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->curPosition() : 0;
    1d04:	2800      	cmp	r0, #0
    1d06:	d0d2      	beq.n	1cae <SDFile::seek(unsigned long long, int)+0x12>
    return seekSet(curPosition() + offset);
    1d08:	e9d0 2300 	ldrd	r2, r3, [r0]
    1d0c:	188a      	adds	r2, r1, r2
           m_xFile ? m_xFile->seekSet(pos) : false;
    1d0e:	eb4c 0303 	adc.w	r3, ip, r3
    1d12:	e7f3      	b.n	1cfc <SDFile::seek(unsigned long long, int)+0x60>
    1d14:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->fileSize() : 0;
    1d16:	2800      	cmp	r0, #0
    1d18:	d0c9      	beq.n	1cae <SDFile::seek(unsigned long long, int)+0x12>
    return seekSet(fileSize() + offset);
    1d1a:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
    1d1e:	bc30      	pop	{r4, r5}
    1d20:	188a      	adds	r2, r1, r2
           m_xFile ? m_xFile->seekSet(pos) : false;
    1d22:	eb4c 0303 	adc.w	r3, ip, r3
    1d26:	f003 bab5 	b.w	5294 <ExFatFile::seekSet(unsigned long long)>
    1d2a:	bf00      	nop

00001d2c <SearchForLetter()>:
{
    1d2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   uint8_t SearchFor = IO1[wRegSearchLetterWAIT];
    1d30:	4a23      	ldr	r2, [pc, #140]	; (1dc0 <SearchForLetter()+0x94>)
   while (ItemNum < NumItemsFull)
    1d32:	4b24      	ldr	r3, [pc, #144]	; (1dc4 <SearchForLetter()+0x98>)
   uint8_t SearchFor = IO1[wRegSearchLetterWAIT];
    1d34:	f8d2 8000 	ldr.w	r8, [r2]
   while (ItemNum < NumItemsFull)
    1d38:	881f      	ldrh	r7, [r3, #0]
   uint8_t SearchFor = IO1[wRegSearchLetterWAIT];
    1d3a:	f898 9015 	ldrb.w	r9, [r8, #21]
   while (ItemNum < NumItemsFull)
    1d3e:	2f00      	cmp	r7, #0
    1d40:	d039      	beq.n	1db6 <SearchForLetter()+0x8a>
      if (toupper(MenuSource[ItemNum].Name[0]) >= SearchFor)
    1d42:	4b21      	ldr	r3, [pc, #132]	; (1dc8 <SearchForLetter()+0x9c>)
    1d44:	2400      	movs	r4, #0
    1d46:	fa5f f989 	uxtb.w	r9, r9
    1d4a:	681d      	ldr	r5, [r3, #0]
    1d4c:	4626      	mov	r6, r4
    1d4e:	e002      	b.n	1d56 <SearchForLetter()+0x2a>
   while (ItemNum < NumItemsFull)
    1d50:	b2a6      	uxth	r6, r4
    1d52:	42be      	cmp	r6, r7
    1d54:	d22f      	bcs.n	1db6 <SearchForLetter()+0x8a>
      if (toupper(MenuSource[ItemNum].Name[0]) >= SearchFor)
    1d56:	686b      	ldr	r3, [r5, #4]
   while (ItemNum < NumItemsFull)
    1d58:	3401      	adds	r4, #1
    1d5a:	3510      	adds	r5, #16
      if (toupper(MenuSource[ItemNum].Name[0]) >= SearchFor)
    1d5c:	7818      	ldrb	r0, [r3, #0]
    1d5e:	f00e fe79 	bl	10a54 <toupper>
    1d62:	4548      	cmp	r0, r9
    1d64:	dbf4      	blt.n	1d50 <SearchForLetter()+0x24>
   IO1[rwRegPageNumber] = ItemNum/MaxItemsPerPage +1;
    1d66:	4b19      	ldr	r3, [pc, #100]	; (1dcc <SearchForLetter()+0xa0>)
    1d68:	fba3 2306 	umull	r2, r3, r3, r6
    1d6c:	1af2      	subs	r2, r6, r3
    1d6e:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    1d72:	091b      	lsrs	r3, r3, #4
    1d74:	1c5a      	adds	r2, r3, #1
    1d76:	b2d2      	uxtb	r2, r2
    1d78:	f888 200e 	strb.w	r2, [r8, #14]
   IO1[rwRegCursorItemOnPg] = ItemNum % MaxItemsPerPage;
    1d7c:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
    1d80:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    1d84:	1af6      	subs	r6, r6, r3
    1d86:	b2f6      	uxtb	r6, r6
    1d88:	f888 600c 	strb.w	r6, [r8, #12]
   IO1[rRegNumItemsOnPage] = (NumItemsFull > IO1[rwRegPageNumber]*MaxItemsPerPage ? MaxItemsPerPage : NumItemsFull-(IO1[rwRegPageNumber]-1)*MaxItemsPerPage);
    1d8c:	f898 300e 	ldrb.w	r3, [r8, #14]
    1d90:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
    1d94:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    1d98:	429f      	cmp	r7, r3
    1d9a:	dc0e      	bgt.n	1dba <SearchForLetter()+0x8e>
    1d9c:	f898 300e 	ldrb.w	r3, [r8, #14]
    1da0:	3713      	adds	r7, #19
    1da2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    1da6:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
    1daa:	ebc3 0383 	rsb	r3, r3, r3, lsl #2
    1dae:	443b      	add	r3, r7
    1db0:	b2db      	uxtb	r3, r3
    1db2:	f888 300d 	strb.w	r3, [r8, #13]
}
    1db6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   IO1[rRegNumItemsOnPage] = (NumItemsFull > IO1[rwRegPageNumber]*MaxItemsPerPage ? MaxItemsPerPage : NumItemsFull-(IO1[rwRegPageNumber]-1)*MaxItemsPerPage);
    1dba:	2313      	movs	r3, #19
    1dbc:	e7f9      	b.n	1db2 <SearchForLetter()+0x86>
    1dbe:	bf00      	nop
    1dc0:	2000dae4 	.word	0x2000dae4
    1dc4:	2005e524 	.word	0x2005e524
    1dc8:	2000daf0 	.word	0x2000daf0
    1dcc:	af286bcb 	.word	0xaf286bcb

00001dd0 <File::~File()>:
	virtual ~File() {
    1dd0:	b570      	push	{r4, r5, r6, lr}
    1dd2:	4b24      	ldr	r3, [pc, #144]	; (1e64 <File::~File()+0x94>)
    1dd4:	4604      	mov	r4, r0
		if (f) dec_refcount();
    1dd6:	6905      	ldr	r5, [r0, #16]
	virtual ~File() {
    1dd8:	6003      	str	r3, [r0, #0]
		if (f) dec_refcount();
    1dda:	2d00      	cmp	r5, #0
    1ddc:	d032      	beq.n	1e44 <File::~File()+0x74>
		if (--(f->refcount) == 0) {
    1dde:	686e      	ldr	r6, [r5, #4]
    1de0:	3e01      	subs	r6, #1
    1de2:	606e      	str	r6, [r5, #4]
    1de4:	bb76      	cbnz	r6, 1e44 <File::~File()+0x74>
			f->close();
    1de6:	682b      	ldr	r3, [r5, #0]
    1de8:	4a1f      	ldr	r2, [pc, #124]	; (1e68 <File::~File()+0x98>)
    1dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1dec:	4293      	cmp	r3, r2
    1dee:	d12f      	bne.n	1e50 <File::~File()+0x80>
		if (filename) {
    1df0:	6da8      	ldr	r0, [r5, #88]	; 0x58
    1df2:	b110      	cbz	r0, 1dfa <File::~File()+0x2a>
			free(filename);
    1df4:	f00d f97a 	bl	f0ec <free>
			filename = nullptr;
    1df8:	65ae      	str	r6, [r5, #88]	; 0x58
  bool isOpen() const {return m_fFile || m_xFile;}
    1dfa:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    1dfc:	b323      	cbz	r3, 1e48 <File::~File()+0x78>
			sdfatfile.close();
    1dfe:	f105 0018 	add.w	r0, r5, #24
    1e02:	f007 fcf7 	bl	97f4 <FsBaseFile::close()>
			delete f;
    1e06:	6925      	ldr	r5, [r4, #16]
    1e08:	b1e5      	cbz	r5, 1e44 <File::~File()+0x74>
    1e0a:	682b      	ldr	r3, [r5, #0]
    1e0c:	4a17      	ldr	r2, [pc, #92]	; (1e6c <File::~File()+0x9c>)
    1e0e:	685b      	ldr	r3, [r3, #4]
    1e10:	4293      	cmp	r3, r2
    1e12:	d124      	bne.n	1e5e <File::~File()+0x8e>
	virtual ~SDFile(void) {
    1e14:	4b16      	ldr	r3, [pc, #88]	; (1e70 <File::~File()+0xa0>)
		if (filename) {
    1e16:	6da8      	ldr	r0, [r5, #88]	; 0x58
	virtual ~SDFile(void) {
    1e18:	602b      	str	r3, [r5, #0]
		if (filename) {
    1e1a:	b118      	cbz	r0, 1e24 <File::~File()+0x54>
			free(filename);
    1e1c:	f00d f966 	bl	f0ec <free>
			filename = nullptr;
    1e20:	2300      	movs	r3, #0
    1e22:	65ab      	str	r3, [r5, #88]	; 0x58
    1e24:	6d2b      	ldr	r3, [r5, #80]	; 0x50
			sdfatfile.close();
    1e26:	f105 0618 	add.w	r6, r5, #24
    1e2a:	b1a3      	cbz	r3, 1e56 <File::~File()+0x86>
    1e2c:	4630      	mov	r0, r6
    1e2e:	f007 fce1 	bl	97f4 <FsBaseFile::close()>
    1e32:	4b10      	ldr	r3, [pc, #64]	; (1e74 <File::~File()+0xa4>)
  ~FsBaseFile() {close();}
    1e34:	4630      	mov	r0, r6
    1e36:	60ab      	str	r3, [r5, #8]
    1e38:	f007 fcdc 	bl	97f4 <FsBaseFile::close()>
	}
    1e3c:	215c      	movs	r1, #92	; 0x5c
    1e3e:	4628      	mov	r0, r5
    1e40:	f00b fc22 	bl	d688 <operator delete(void*, unsigned int)>
	}
    1e44:	4620      	mov	r0, r4
    1e46:	bd70      	pop	{r4, r5, r6, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
    1e48:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    1e4a:	2b00      	cmp	r3, #0
    1e4c:	d1d7      	bne.n	1dfe <File::~File()+0x2e>
    1e4e:	e7da      	b.n	1e06 <File::~File()+0x36>
			f->close();
    1e50:	4628      	mov	r0, r5
    1e52:	4798      	blx	r3
    1e54:	e7d7      	b.n	1e06 <File::~File()+0x36>
    1e56:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    1e58:	2b00      	cmp	r3, #0
    1e5a:	d1e7      	bne.n	1e2c <File::~File()+0x5c>
    1e5c:	e7e9      	b.n	1e32 <File::~File()+0x62>
			delete f;
    1e5e:	4628      	mov	r0, r5
    1e60:	4798      	blx	r3
    1e62:	e7ef      	b.n	1e44 <File::~File()+0x74>
    1e64:	20003308 	.word	0x20003308
    1e68:	00000e69 	.word	0x00000e69
    1e6c:	00001c55 	.word	0x00001c55
    1e70:	20003358 	.word	0x20003358
    1e74:	20003240 	.word	0x20003240

00001e78 <File::~File()>:
	virtual ~File() {
    1e78:	b570      	push	{r4, r5, r6, lr}
    1e7a:	4b26      	ldr	r3, [pc, #152]	; (1f14 <File::~File()+0x9c>)
    1e7c:	4604      	mov	r4, r0
		if (f) dec_refcount();
    1e7e:	6905      	ldr	r5, [r0, #16]
	virtual ~File() {
    1e80:	6003      	str	r3, [r0, #0]
		if (f) dec_refcount();
    1e82:	2d00      	cmp	r5, #0
    1e84:	d032      	beq.n	1eec <File::~File()+0x74>
		if (--(f->refcount) == 0) {
    1e86:	686e      	ldr	r6, [r5, #4]
    1e88:	3e01      	subs	r6, #1
    1e8a:	606e      	str	r6, [r5, #4]
    1e8c:	bb76      	cbnz	r6, 1eec <File::~File()+0x74>
			f->close();
    1e8e:	682b      	ldr	r3, [r5, #0]
    1e90:	4a21      	ldr	r2, [pc, #132]	; (1f18 <File::~File()+0xa0>)
    1e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1e94:	4293      	cmp	r3, r2
    1e96:	d133      	bne.n	1f00 <File::~File()+0x88>
		if (filename) {
    1e98:	6da8      	ldr	r0, [r5, #88]	; 0x58
    1e9a:	b110      	cbz	r0, 1ea2 <File::~File()+0x2a>
			free(filename);
    1e9c:	f00d f926 	bl	f0ec <free>
			filename = nullptr;
    1ea0:	65ae      	str	r6, [r5, #88]	; 0x58
    1ea2:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    1ea4:	b343      	cbz	r3, 1ef8 <File::~File()+0x80>
			sdfatfile.close();
    1ea6:	f105 0018 	add.w	r0, r5, #24
    1eaa:	f007 fca3 	bl	97f4 <FsBaseFile::close()>
			delete f;
    1eae:	6925      	ldr	r5, [r4, #16]
    1eb0:	b1e5      	cbz	r5, 1eec <File::~File()+0x74>
    1eb2:	682b      	ldr	r3, [r5, #0]
    1eb4:	4a19      	ldr	r2, [pc, #100]	; (1f1c <File::~File()+0xa4>)
    1eb6:	685b      	ldr	r3, [r3, #4]
    1eb8:	4293      	cmp	r3, r2
    1eba:	d128      	bne.n	1f0e <File::~File()+0x96>
	virtual ~SDFile(void) {
    1ebc:	4b18      	ldr	r3, [pc, #96]	; (1f20 <File::~File()+0xa8>)
		if (filename) {
    1ebe:	6da8      	ldr	r0, [r5, #88]	; 0x58
	virtual ~SDFile(void) {
    1ec0:	602b      	str	r3, [r5, #0]
		if (filename) {
    1ec2:	b118      	cbz	r0, 1ecc <File::~File()+0x54>
			free(filename);
    1ec4:	f00d f912 	bl	f0ec <free>
			filename = nullptr;
    1ec8:	2300      	movs	r3, #0
    1eca:	65ab      	str	r3, [r5, #88]	; 0x58
    1ecc:	6d2b      	ldr	r3, [r5, #80]	; 0x50
			sdfatfile.close();
    1ece:	f105 0618 	add.w	r6, r5, #24
    1ed2:	b1c3      	cbz	r3, 1f06 <File::~File()+0x8e>
    1ed4:	4630      	mov	r0, r6
    1ed6:	f007 fc8d 	bl	97f4 <FsBaseFile::close()>
    1eda:	4b12      	ldr	r3, [pc, #72]	; (1f24 <File::~File()+0xac>)
  ~FsBaseFile() {close();}
    1edc:	4630      	mov	r0, r6
    1ede:	60ab      	str	r3, [r5, #8]
    1ee0:	f007 fc88 	bl	97f4 <FsBaseFile::close()>
	}
    1ee4:	215c      	movs	r1, #92	; 0x5c
    1ee6:	4628      	mov	r0, r5
    1ee8:	f00b fbce 	bl	d688 <operator delete(void*, unsigned int)>
	}
    1eec:	4620      	mov	r0, r4
    1eee:	2114      	movs	r1, #20
    1ef0:	f00b fbca 	bl	d688 <operator delete(void*, unsigned int)>
    1ef4:	4620      	mov	r0, r4
    1ef6:	bd70      	pop	{r4, r5, r6, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
    1ef8:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    1efa:	2b00      	cmp	r3, #0
    1efc:	d1d3      	bne.n	1ea6 <File::~File()+0x2e>
    1efe:	e7d6      	b.n	1eae <File::~File()+0x36>
			f->close();
    1f00:	4628      	mov	r0, r5
    1f02:	4798      	blx	r3
    1f04:	e7d3      	b.n	1eae <File::~File()+0x36>
    1f06:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    1f08:	2b00      	cmp	r3, #0
    1f0a:	d1e3      	bne.n	1ed4 <File::~File()+0x5c>
    1f0c:	e7e5      	b.n	1eda <File::~File()+0x62>
			delete f;
    1f0e:	4628      	mov	r0, r5
    1f10:	4798      	blx	r3
    1f12:	e7eb      	b.n	1eec <File::~File()+0x74>
    1f14:	20003308 	.word	0x20003308
    1f18:	00000e69 	.word	0x00000e69
    1f1c:	00001c55 	.word	0x00001c55
    1f20:	20003358 	.word	0x20003358
    1f24:	20003240 	.word	0x20003240

00001f28 <InitDriveDirMenu()>:
{
    1f28:	b570      	push	{r4, r5, r6, lr}
   if (DriveDirMenu == NULL) 
    1f2a:	4e10      	ldr	r6, [pc, #64]	; (1f6c <InitDriveDirMenu()+0x44>)
    1f2c:	6833      	ldr	r3, [r6, #0]
    1f2e:	b19b      	cbz	r3, 1f58 <InitDriveDirMenu()+0x30>
      for(uint16_t Num=0; Num < NumDrvDirMenuItems; Num++) free(DriveDirMenu[Num].Name);
    1f30:	4d0f      	ldr	r5, [pc, #60]	; (1f70 <InitDriveDirMenu()+0x48>)
    1f32:	882a      	ldrh	r2, [r5, #0]
    1f34:	b16a      	cbz	r2, 1f52 <InitDriveDirMenu()+0x2a>
    1f36:	2400      	movs	r4, #0
    1f38:	e000      	b.n	1f3c <InitDriveDirMenu()+0x14>
    1f3a:	6833      	ldr	r3, [r6, #0]
    1f3c:	b2a2      	uxth	r2, r4
    1f3e:	3401      	adds	r4, #1
    1f40:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    1f44:	6858      	ldr	r0, [r3, #4]
    1f46:	f00d f8d1 	bl	f0ec <free>
    1f4a:	882a      	ldrh	r2, [r5, #0]
    1f4c:	b2a3      	uxth	r3, r4
    1f4e:	429a      	cmp	r2, r3
    1f50:	d8f3      	bhi.n	1f3a <InitDriveDirMenu()+0x12>
   NumDrvDirMenuItems = 0;
    1f52:	2300      	movs	r3, #0
    1f54:	802b      	strh	r3, [r5, #0]
}
    1f56:	bd70      	pop	{r4, r5, r6, pc}
      DriveDirMenu = (StructMenuItem*)malloc(MaxMenuItems*sizeof(StructMenuItem));
    1f58:	f64b 3080 	movw	r0, #48000	; 0xbb80
    1f5c:	4d04      	ldr	r5, [pc, #16]	; (1f70 <InitDriveDirMenu()+0x48>)
    1f5e:	f00d f8bd 	bl	f0dc <malloc>
   NumDrvDirMenuItems = 0;
    1f62:	2300      	movs	r3, #0
      DriveDirMenu = (StructMenuItem*)malloc(MaxMenuItems*sizeof(StructMenuItem));
    1f64:	6030      	str	r0, [r6, #0]
   NumDrvDirMenuItems = 0;
    1f66:	802b      	strh	r3, [r5, #0]
}
    1f68:	bd70      	pop	{r4, r5, r6, pc}
    1f6a:	bf00      	nop
    1f6c:	2000d8b0 	.word	0x2000d8b0
    1f70:	2005e522 	.word	0x2005e522

00001f74 <AddDirEntry(char const*)>:
{
    1f74:	b570      	push	{r4, r5, r6, lr}
    1f76:	b082      	sub	sp, #8
   DriveDirMenu[NumDrvDirMenuItems].Name = (char*)malloc(strlen(EntryString)+1);
    1f78:	4e09      	ldr	r6, [pc, #36]	; (1fa0 <AddDirEntry(char const*)+0x2c>)
{
    1f7a:	9001      	str	r0, [sp, #4]
   DriveDirMenu[NumDrvDirMenuItems].Name = (char*)malloc(strlen(EntryString)+1);
    1f7c:	f00f fcc0 	bl	11900 <strlen>
    1f80:	4b08      	ldr	r3, [pc, #32]	; (1fa4 <AddDirEntry(char const*)+0x30>)
    1f82:	3001      	adds	r0, #1
    1f84:	8834      	ldrh	r4, [r6, #0]
    1f86:	681d      	ldr	r5, [r3, #0]
    1f88:	f00d f8a8 	bl	f0dc <malloc>
   strcpy(DriveDirMenu[NumDrvDirMenuItems].Name, EntryString);
    1f8c:	9901      	ldr	r1, [sp, #4]
   DriveDirMenu[NumDrvDirMenuItems].Name = (char*)malloc(strlen(EntryString)+1);
    1f8e:	eb05 1504 	add.w	r5, r5, r4, lsl #4
   NumDrvDirMenuItems++;
    1f92:	3401      	adds	r4, #1
   DriveDirMenu[NumDrvDirMenuItems].Name = (char*)malloc(strlen(EntryString)+1);
    1f94:	6068      	str	r0, [r5, #4]
   strcpy(DriveDirMenu[NumDrvDirMenuItems].Name, EntryString);
    1f96:	f00f fc01 	bl	1179c <strcpy>
   NumDrvDirMenuItems++;
    1f9a:	8034      	strh	r4, [r6, #0]
}
    1f9c:	b002      	add	sp, #8
    1f9e:	bd70      	pop	{r4, r5, r6, pc}
    1fa0:	2005e522 	.word	0x2005e522
    1fa4:	2000d8b0 	.word	0x2000d8b0

00001fa8 <Assoc_Ext_ItemType(char*)>:
}

uint8_t Assoc_Ext_ItemType(char * FileName)
{ //returns ItemType from enum regItemTypes
    1fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1faa:	4604      	mov	r4, r0

   uint32_t Length = strlen(FileName);
    1fac:	f00f fca8 	bl	11900 <strlen>
   
   if (Length < 4) return rtUnknown;
    1fb0:	2803      	cmp	r0, #3
    1fb2:	d91d      	bls.n	1ff0 <Assoc_Ext_ItemType(char*)+0x48>

   char* Extension = FileName + Length - 4;
    1fb4:	1f03      	subs	r3, r0, #4
   if (Extension[0] != '.') return rtUnknown;
    1fb6:	5ce2      	ldrb	r2, [r4, r3]
   char* Extension = FileName + Length - 4;
    1fb8:	441c      	add	r4, r3
   if (Extension[0] != '.') return rtUnknown;
    1fba:	2a2e      	cmp	r2, #46	; 0x2e
    1fbc:	d118      	bne.n	1ff0 <Assoc_Ext_ItemType(char*)+0x48>
   
   Extension++; //skip '.'
    1fbe:	4622      	mov	r2, r4
    1fc0:	3401      	adds	r4, #1
   //convert to lower case:
   for(uint8_t cnt=0; cnt<3; cnt++) if(Extension[cnt]>='A' && Extension[cnt]<='Z') Extension[cnt]+=32;
    1fc2:	1cd0      	adds	r0, r2, #3
    1fc4:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    1fc8:	f1a3 0141 	sub.w	r1, r3, #65	; 0x41
    1fcc:	3320      	adds	r3, #32
    1fce:	2919      	cmp	r1, #25
    1fd0:	bf98      	it	ls
    1fd2:	7013      	strbls	r3, [r2, #0]
    1fd4:	4282      	cmp	r2, r0
    1fd6:	d1f5      	bne.n	1fc4 <Assoc_Ext_ItemType(char*)+0x1c>
    1fd8:	4f09      	ldr	r7, [pc, #36]	; (2000 <Assoc_Ext_ItemType(char*)+0x58>)
    1fda:	2500      	movs	r5, #0
    1fdc:	463e      	mov	r6, r7
   
   uint8_t Num = 0;
   
   while (Num < sizeof(Ext_ItemType_Assoc)/sizeof(Ext_ItemType_Assoc[0]))
   {
      if (strcmp(Extension, Ext_ItemType_Assoc[Num].Extension)==0) return Ext_ItemType_Assoc[Num].ItemType;
    1fde:	4631      	mov	r1, r6
    1fe0:	4620      	mov	r0, r4
   while (Num < sizeof(Ext_ItemType_Assoc)/sizeof(Ext_ItemType_Assoc[0]))
    1fe2:	3605      	adds	r6, #5
      if (strcmp(Extension, Ext_ItemType_Assoc[Num].Extension)==0) return Ext_ItemType_Assoc[Num].ItemType;
    1fe4:	f00f fa70 	bl	114c8 <strcmp>
    1fe8:	b120      	cbz	r0, 1ff4 <Assoc_Ext_ItemType(char*)+0x4c>
   while (Num < sizeof(Ext_ItemType_Assoc)/sizeof(Ext_ItemType_Assoc[0]))
    1fea:	3501      	adds	r5, #1
    1fec:	2d0a      	cmp	r5, #10
    1fee:	d1f6      	bne.n	1fde <Assoc_Ext_ItemType(char*)+0x36>
   if (Length < 4) return rtUnknown;
    1ff0:	2001      	movs	r0, #1
      Num++;
   }
   return rtUnknown;
}
    1ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (strcmp(Extension, Ext_ItemType_Assoc[Num].Extension)==0) return Ext_ItemType_Assoc[Num].ItemType;
    1ff4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    1ff8:	442f      	add	r7, r5
    1ffa:	7938      	ldrb	r0, [r7, #4]
}
    1ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1ffe:	bf00      	nop
    2000:	2000bcec 	.word	0x2000bcec

00002004 <SetDriveDirMenuNameType(unsigned short, char const*)>:
{
    2004:	b570      	push	{r4, r5, r6, lr}
    2006:	b082      	sub	sp, #8
    2008:	4604      	mov	r4, r0
   DriveDirMenu[ItemNum].Name = (char*)malloc(strlen(filename)+1);
    200a:	4608      	mov	r0, r1
    200c:	9101      	str	r1, [sp, #4]
    200e:	f00f fc77 	bl	11900 <strlen>
    2012:	4b09      	ldr	r3, [pc, #36]	; (2038 <SetDriveDirMenuNameType(unsigned short, char const*)+0x34>)
    2014:	0126      	lsls	r6, r4, #4
    2016:	3001      	adds	r0, #1
    2018:	681d      	ldr	r5, [r3, #0]
    201a:	f00d f85f 	bl	f0dc <malloc>
   strcpy(DriveDirMenu[ItemNum].Name, filename);
    201e:	9901      	ldr	r1, [sp, #4]
   DriveDirMenu[ItemNum].Name = (char*)malloc(strlen(filename)+1);
    2020:	eb05 1404 	add.w	r4, r5, r4, lsl #4
    2024:	6060      	str	r0, [r4, #4]
   strcpy(DriveDirMenu[ItemNum].Name, filename);
    2026:	f00f fbb9 	bl	1179c <strcpy>
      Assoc_Ext_ItemType(DriveDirMenu[ItemNum].Name);
    202a:	6860      	ldr	r0, [r4, #4]
    202c:	f7ff ffbc 	bl	1fa8 <Assoc_Ext_ItemType(char*)>
   DriveDirMenu[ItemNum].ItemType = 
    2030:	55a8      	strb	r0, [r5, r6]
}
    2032:	b002      	add	sp, #8
    2034:	bd70      	pop	{r4, r5, r6, pc}
    2036:	bf00      	nop
    2038:	2000d8b0 	.word	0x2000d8b0

0000203c <LoadDirectory(FS*)>:
{
    203c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2040:	4604      	mov	r4, r0
    2042:	b0a1      	sub	sp, #132	; 0x84
   InitDriveDirMenu();
    2044:	f7ff ff70 	bl	1f28 <InitDriveDirMenu()>
   File dir = sourceFS->open(DriveDirPath);
    2048:	4baf      	ldr	r3, [pc, #700]	; (2308 <LoadDirectory(FS*)+0x2cc>)
    204a:	6822      	ldr	r2, [r4, #0]
    204c:	6815      	ldr	r5, [r2, #0]
		SDFAT_FILE file = sdfs.open(filepath, flags);
    204e:	4aaf      	ldr	r2, [pc, #700]	; (230c <LoadDirectory(FS*)+0x2d0>)
    2050:	429d      	cmp	r5, r3
    2052:	f04f 0300 	mov.w	r3, #0
    2056:	f040 8371 	bne.w	273c <LoadDirectory(FS*)+0x700>
    205a:	1d21      	adds	r1, r4, #4
    205c:	a80c      	add	r0, sp, #48	; 0x30
    205e:	f007 fce3 	bl	9a28 <FsVolume::open(char const*, int)>
    2062:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    2064:	2b00      	cmp	r3, #0
    2066:	f000 8359 	beq.w	271c <LoadDirectory(FS*)+0x6e0>
		if (file) return File(new SDFile(file));
    206a:	205c      	movs	r0, #92	; 0x5c
class FileImpl {
    206c:	2500      	movs	r5, #0
    206e:	f00b fb09 	bl	d684 <operator new(unsigned int)>
class Print
    2072:	990d      	ldr	r1, [sp, #52]	; 0x34
class Stream : public Print
    2074:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    2076:	ae10      	add	r6, sp, #64	; 0x40
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    2078:	4ba5      	ldr	r3, [pc, #660]	; (2310 <LoadDirectory(FS*)+0x2d4>)
		if (file) return File(new SDFile(file));
    207a:	4604      	mov	r4, r0
    207c:	6045      	str	r5, [r0, #4]
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    207e:	6003      	str	r3, [r0, #0]
    2080:	4ba4      	ldr	r3, [pc, #656]	; (2314 <LoadDirectory(FS*)+0x2d8>)
    2082:	e9c0 1203 	strd	r1, r2, [r0, #12]
    2086:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
    208a:	4631      	mov	r1, r6
    208c:	6083      	str	r3, [r0, #8]
    208e:	3018      	adds	r0, #24
    2090:	f800 2c04 	strb.w	r2, [r0, #-4]
    2094:	f007 fb6c 	bl	9770 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		if (f) f->refcount++;
    2098:	6863      	ldr	r3, [r4, #4]
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    209a:	4a9f      	ldr	r2, [pc, #636]	; (2318 <LoadDirectory(FS*)+0x2dc>)
	File(FileImpl *file) {
    209c:	499f      	ldr	r1, [pc, #636]	; (231c <LoadDirectory(FS*)+0x2e0>)
		if (f) f->refcount++;
    209e:	3301      	adds	r3, #1
    20a0:	60a2      	str	r2, [r4, #8]
	constexpr Stream() : _timeout(1000), read_error(0) {}
    20a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    20a6:	65a5      	str	r5, [r4, #88]	; 0x58
	constexpr Print() : write_error(0) {}
    20a8:	9503      	str	r5, [sp, #12]
    20aa:	f88d 5014 	strb.w	r5, [sp, #20]
	File(FileImpl *file) {
    20ae:	9100      	str	r1, [sp, #0]
    20b0:	9204      	str	r2, [sp, #16]
		f = file;
    20b2:	9406      	str	r4, [sp, #24]
	File(FileImpl *file) {
    20b4:	9102      	str	r1, [sp, #8]
		if (f) f->refcount++;
    20b6:	6063      	str	r3, [r4, #4]
    20b8:	4b99      	ldr	r3, [pc, #612]	; (2320 <LoadDirectory(FS*)+0x2e4>)
  ~FsBaseFile() {close();}
    20ba:	4630      	mov	r0, r6
    20bc:	930c      	str	r3, [sp, #48]	; 0x30
    20be:	f007 fb99 	bl	97f4 <FsBaseFile::close()>
   return (strlen(DriveDirPath) == 1 && DriveDirPath[0] == '/');
    20c2:	4c92      	ldr	r4, [pc, #584]	; (230c <LoadDirectory(FS*)+0x2d0>)
    20c4:	4620      	mov	r0, r4
    20c6:	f00f fc1b 	bl	11900 <strlen>
    20ca:	2801      	cmp	r0, #1
    20cc:	f000 831e 	beq.w	270c <LoadDirectory(FS*)+0x6d0>
      DriveDirMenu[0].ItemType = rtDirectory;
    20d0:	4b94      	ldr	r3, [pc, #592]	; (2324 <LoadDirectory(FS*)+0x2e8>)
    20d2:	2206      	movs	r2, #6
      AddDirEntry(UpDirString);
    20d4:	4894      	ldr	r0, [pc, #592]	; (2328 <LoadDirectory(FS*)+0x2ec>)
      DriveDirMenu[0].ItemType = rtDirectory;
    20d6:	681b      	ldr	r3, [r3, #0]
    20d8:	701a      	strb	r2, [r3, #0]
      AddDirEntry(UpDirString);
    20da:	f7ff ff4b 	bl	1f74 <AddDirEntry(char const*)>
    20de:	f8df b268 	ldr.w	fp, [pc, #616]	; 2348 <LoadDirectory(FS*)+0x30c>
    20e2:	4d92      	ldr	r5, [pc, #584]	; (232c <LoadDirectory(FS*)+0x2f0>)
    20e4:	4e92      	ldr	r6, [pc, #584]	; (2330 <LoadDirectory(FS*)+0x2f4>)
				filename = &zeroterm;
    20e6:	f8df 8264 	ldr.w	r8, [pc, #612]	; 234c <LoadDirectory(FS*)+0x310>
    20ea:	f8db 3000 	ldr.w	r3, [fp]
   while (File entry = dir.openNextFile()) 
    20ee:	9906      	ldr	r1, [sp, #24]
		return (f) ? f->openNextFile(mode) : *this;
    20f0:	2900      	cmp	r1, #0
    20f2:	f000 8159 	beq.w	23a8 <LoadDirectory(FS*)+0x36c>
    20f6:	680b      	ldr	r3, [r1, #0]
    20f8:	2200      	movs	r2, #0
    20fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    20fc:	42b3      	cmp	r3, r6
    20fe:	f040 82c6 	bne.w	268e <LoadDirectory(FS*)+0x652>
    tmpFile.openNext(this, oflag);
    2102:	f10d 0940 	add.w	r9, sp, #64	; 0x40
    2106:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    210a:	4f83      	ldr	r7, [pc, #524]	; (2318 <LoadDirectory(FS*)+0x2dc>)
    tmpFile.openNext(this, oflag);
    210c:	3118      	adds	r1, #24
    210e:	4648      	mov	r0, r9
    2110:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    2114:	970c      	str	r7, [sp, #48]	; 0x30
    2116:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
  FsBaseFile() {}
    211a:	e9cd 221e 	strd	r2, r2, [sp, #120]	; 0x78
    tmpFile.openNext(this, oflag);
    211e:	f007 fbd5 	bl	98cc <FsBaseFile::openNext(FsBaseFile*, int)>
  bool isOpen() const {return m_fFile || m_xFile;}
    2122:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    2124:	2b00      	cmp	r3, #0
    2126:	f000 8263 	beq.w	25f0 <LoadDirectory(FS*)+0x5b4>
		if (file) return File(new SDFile(file));
    212a:	205c      	movs	r0, #92	; 0x5c
class FileImpl {
    212c:	f04f 0a00 	mov.w	sl, #0
    2130:	f00b faa8 	bl	d684 <operator new(unsigned int)>
    2134:	4604      	mov	r4, r0
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    2136:	4976      	ldr	r1, [pc, #472]	; (2310 <LoadDirectory(FS*)+0x2d4>)
class Stream : public Print
    2138:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    213c:	6021      	str	r1, [r4, #0]
    213e:	4649      	mov	r1, r9
    2140:	7520      	strb	r0, [r4, #20]
    2142:	f104 0018 	add.w	r0, r4, #24
    2146:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
    214a:	e9c4 2303 	strd	r2, r3, [r4, #12]
    214e:	4b71      	ldr	r3, [pc, #452]	; (2314 <LoadDirectory(FS*)+0x2d8>)
    2150:	e9c4 a301 	strd	sl, r3, [r4, #4]
    2154:	f007 fb0c 	bl	9770 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		if (f) f->refcount++;
    2158:	6863      	ldr	r3, [r4, #4]
	constexpr Stream() : _timeout(1000), read_error(0) {}
    215a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    215e:	60a7      	str	r7, [r4, #8]
    2160:	3301      	adds	r3, #1
    2162:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
    2166:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
		f = file;
    216a:	940b      	str	r4, [sp, #44]	; 0x2c
		if (f) f->refcount++;
    216c:	6063      	str	r3, [r4, #4]
    216e:	e9cd a208 	strd	sl, r2, [sp, #32]
	File(FileImpl *file) {
    2172:	9a00      	ldr	r2, [sp, #0]
    2174:	9207      	str	r2, [sp, #28]
    2176:	4b6a      	ldr	r3, [pc, #424]	; (2320 <LoadDirectory(FS*)+0x2e4>)
  ~FsBaseFile() {close();}
    2178:	4648      	mov	r0, r9
    217a:	930c      	str	r3, [sp, #48]	; 0x30
    217c:	f007 fb3a 	bl	97f4 <FsBaseFile::close()>
    2180:	980b      	ldr	r0, [sp, #44]	; 0x2c
    2182:	4604      	mov	r4, r0
		return (f) ? f->isOpen() : false;
    2184:	2800      	cmp	r0, #0
    2186:	f000 810f 	beq.w	23a8 <LoadDirectory(FS*)+0x36c>
    218a:	6803      	ldr	r3, [r0, #0]
    218c:	4969      	ldr	r1, [pc, #420]	; (2334 <LoadDirectory(FS*)+0x2f8>)
    218e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    2190:	428a      	cmp	r2, r1
    2192:	f040 8260 	bne.w	2656 <LoadDirectory(FS*)+0x61a>
  bool isOpen() const {return m_fFile || m_xFile;}
    2196:	6d02      	ldr	r2, [r0, #80]	; 0x50
    2198:	2a00      	cmp	r2, #0
    219a:	f000 81d1 	beq.w	2540 <LoadDirectory(FS*)+0x504>
		return (f) ? f->name() : "";
    219e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    21a0:	4a65      	ldr	r2, [pc, #404]	; (2338 <LoadDirectory(FS*)+0x2fc>)
    21a2:	4293      	cmp	r3, r2
    21a4:	f040 826e 	bne.w	2684 <LoadDirectory(FS*)+0x648>
		if (!filename) {
    21a8:	6da7      	ldr	r7, [r4, #88]	; 0x58
    21aa:	2f00      	cmp	r7, #0
    21ac:	f000 81a9 	beq.w	2502 <LoadDirectory(FS*)+0x4c6>
		return (f) ? f->isDirectory() : false;
    21b0:	2c00      	cmp	r4, #0
    21b2:	f000 81c0 	beq.w	2536 <LoadDirectory(FS*)+0x4fa>
    21b6:	6823      	ldr	r3, [r4, #0]
    21b8:	4a60      	ldr	r2, [pc, #384]	; (233c <LoadDirectory(FS*)+0x300>)
    21ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    21bc:	4293      	cmp	r3, r2
    21be:	f040 826c 	bne.w	269a <LoadDirectory(FS*)+0x65e>
    return m_fFile ? m_fFile->isDir() :
    21c2:	6d23      	ldr	r3, [r4, #80]	; 0x50
    21c4:	2b00      	cmp	r3, #0
    21c6:	f000 821f 	beq.w	2608 <LoadDirectory(FS*)+0x5cc>
    21ca:	781b      	ldrb	r3, [r3, #0]
    21cc:	f013 0f70 	tst.w	r3, #112	; 0x70
    21d0:	f000 81b1 	beq.w	2536 <LoadDirectory(FS*)+0x4fa>
         DriveDirMenu[NumDrvDirMenuItems].Name = (char*)malloc(strlen(filename)+2);
    21d4:	f8df 914c 	ldr.w	r9, [pc, #332]	; 2324 <LoadDirectory(FS*)+0x2e8>
    21d8:	4638      	mov	r0, r7
    21da:	f00f fb91 	bl	11900 <strlen>
    21de:	882b      	ldrh	r3, [r5, #0]
    21e0:	f8d9 4000 	ldr.w	r4, [r9]
    21e4:	3002      	adds	r0, #2
    21e6:	eb04 1403 	add.w	r4, r4, r3, lsl #4
    21ea:	f00c ff77 	bl	f0dc <malloc>
         DriveDirMenu[NumDrvDirMenuItems].Name[0] = '/';
    21ee:	232f      	movs	r3, #47	; 0x2f
         DriveDirMenu[NumDrvDirMenuItems].Name = (char*)malloc(strlen(filename)+2);
    21f0:	6060      	str	r0, [r4, #4]
         strcpy(DriveDirMenu[NumDrvDirMenuItems].Name+1, filename);
    21f2:	4639      	mov	r1, r7
         DriveDirMenu[NumDrvDirMenuItems].Name[0] = '/';
    21f4:	7003      	strb	r3, [r0, #0]
         strcpy(DriveDirMenu[NumDrvDirMenuItems].Name+1, filename);
    21f6:	6860      	ldr	r0, [r4, #4]
    21f8:	3001      	adds	r0, #1
    21fa:	f00f facf 	bl	1179c <strcpy>
         DriveDirMenu[NumDrvDirMenuItems].ItemType = rtDirectory;
    21fe:	882b      	ldrh	r3, [r5, #0]
    2200:	f8d9 2000 	ldr.w	r2, [r9]
    2204:	2106      	movs	r1, #6
    2206:	011b      	lsls	r3, r3, #4
    2208:	54d1      	strb	r1, [r2, r3]
		if (f) {
    220a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    220c:	2c00      	cmp	r4, #0
    220e:	d056      	beq.n	22be <LoadDirectory(FS*)+0x282>
			f->close();
    2210:	6823      	ldr	r3, [r4, #0]
    2212:	4f4b      	ldr	r7, [pc, #300]	; (2340 <LoadDirectory(FS*)+0x304>)
    2214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2216:	42bb      	cmp	r3, r7
    2218:	f040 823c 	bne.w	2694 <LoadDirectory(FS*)+0x658>
		if (filename) {
    221c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    221e:	b118      	cbz	r0, 2228 <LoadDirectory(FS*)+0x1ec>
			free(filename);
    2220:	f00c ff64 	bl	f0ec <free>
			filename = nullptr;
    2224:	2300      	movs	r3, #0
    2226:	65a3      	str	r3, [r4, #88]	; 0x58
  bool isOpen() const {return m_fFile || m_xFile;}
    2228:	6d23      	ldr	r3, [r4, #80]	; 0x50
    222a:	2b00      	cmp	r3, #0
    222c:	f000 820e 	beq.w	264c <LoadDirectory(FS*)+0x610>
			sdfatfile.close();
    2230:	f104 0018 	add.w	r0, r4, #24
    2234:	f007 fade 	bl	97f4 <FsBaseFile::close()>
		if (--(f->refcount) == 0) {
    2238:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    223c:	f8d9 4004 	ldr.w	r4, [r9, #4]
    2240:	3c01      	subs	r4, #1
    2242:	f8c9 4004 	str.w	r4, [r9, #4]
    2246:	2c00      	cmp	r4, #0
    2248:	d137      	bne.n	22ba <LoadDirectory(FS*)+0x27e>
			f->close();
    224a:	f8d9 3000 	ldr.w	r3, [r9]
    224e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2250:	42bb      	cmp	r3, r7
    2252:	f040 8232 	bne.w	26ba <LoadDirectory(FS*)+0x67e>
		if (filename) {
    2256:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
    225a:	b118      	cbz	r0, 2264 <LoadDirectory(FS*)+0x228>
			free(filename);
    225c:	f00c ff46 	bl	f0ec <free>
			filename = nullptr;
    2260:	f8c9 4058 	str.w	r4, [r9, #88]	; 0x58
    2264:	f8d9 3050 	ldr.w	r3, [r9, #80]	; 0x50
    2268:	2b00      	cmp	r3, #0
    226a:	f000 8220 	beq.w	26ae <LoadDirectory(FS*)+0x672>
			sdfatfile.close();
    226e:	f109 0018 	add.w	r0, r9, #24
    2272:	f007 fabf 	bl	97f4 <FsBaseFile::close()>
			delete f;
    2276:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    2278:	b1fc      	cbz	r4, 22ba <LoadDirectory(FS*)+0x27e>
    227a:	6823      	ldr	r3, [r4, #0]
    227c:	4a31      	ldr	r2, [pc, #196]	; (2344 <LoadDirectory(FS*)+0x308>)
    227e:	685b      	ldr	r3, [r3, #4]
    2280:	4293      	cmp	r3, r2
    2282:	f040 823b 	bne.w	26fc <LoadDirectory(FS*)+0x6c0>
	virtual ~SDFile(void) {
    2286:	4b22      	ldr	r3, [pc, #136]	; (2310 <LoadDirectory(FS*)+0x2d4>)
		if (filename) {
    2288:	6da0      	ldr	r0, [r4, #88]	; 0x58
	virtual ~SDFile(void) {
    228a:	6023      	str	r3, [r4, #0]
		if (filename) {
    228c:	b118      	cbz	r0, 2296 <LoadDirectory(FS*)+0x25a>
			free(filename);
    228e:	f00c ff2d 	bl	f0ec <free>
			filename = nullptr;
    2292:	2300      	movs	r3, #0
    2294:	65a3      	str	r3, [r4, #88]	; 0x58
    2296:	6d23      	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
    2298:	f104 0718 	add.w	r7, r4, #24
    229c:	2b00      	cmp	r3, #0
    229e:	f000 8214 	beq.w	26ca <LoadDirectory(FS*)+0x68e>
    22a2:	4638      	mov	r0, r7
    22a4:	f007 faa6 	bl	97f4 <FsBaseFile::close()>
    22a8:	4b1d      	ldr	r3, [pc, #116]	; (2320 <LoadDirectory(FS*)+0x2e4>)
  ~FsBaseFile() {close();}
    22aa:	4638      	mov	r0, r7
    22ac:	60a3      	str	r3, [r4, #8]
    22ae:	f007 faa1 	bl	97f4 <FsBaseFile::close()>
	}
    22b2:	215c      	movs	r1, #92	; 0x5c
    22b4:	4620      	mov	r0, r4
    22b6:	f00b f9e7 	bl	d688 <operator delete(void*, unsigned int)>
		f = nullptr;
    22ba:	2300      	movs	r3, #0
    22bc:	930b      	str	r3, [sp, #44]	; 0x2c
      if (++NumDrvDirMenuItems == MaxMenuItems)
    22be:	882b      	ldrh	r3, [r5, #0]
    22c0:	f640 32b8 	movw	r2, #3000	; 0xbb8
    22c4:	3301      	adds	r3, #1
    22c6:	b29b      	uxth	r3, r3
    22c8:	4293      	cmp	r3, r2
    22ca:	802b      	strh	r3, [r5, #0]
    22cc:	f000 820b 	beq.w	26e6 <LoadDirectory(FS*)+0x6aa>
	virtual ~File() {
    22d0:	9b00      	ldr	r3, [sp, #0]
		if (f) dec_refcount();
    22d2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
	virtual ~File() {
    22d4:	9307      	str	r3, [sp, #28]
		if (f) dec_refcount();
    22d6:	2c00      	cmp	r4, #0
    22d8:	f43f af09 	beq.w	20ee <LoadDirectory(FS*)+0xb2>
		if (--(f->refcount) == 0) {
    22dc:	6867      	ldr	r7, [r4, #4]
    22de:	3f01      	subs	r7, #1
    22e0:	6067      	str	r7, [r4, #4]
    22e2:	2f00      	cmp	r7, #0
    22e4:	f47f af03 	bne.w	20ee <LoadDirectory(FS*)+0xb2>
			f->close();
    22e8:	6823      	ldr	r3, [r4, #0]
    22ea:	4a15      	ldr	r2, [pc, #84]	; (2340 <LoadDirectory(FS*)+0x304>)
    22ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    22ee:	4293      	cmp	r3, r2
    22f0:	f040 8201 	bne.w	26f6 <LoadDirectory(FS*)+0x6ba>
		if (filename) {
    22f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    22f6:	b110      	cbz	r0, 22fe <LoadDirectory(FS*)+0x2c2>
			free(filename);
    22f8:	f00c fef8 	bl	f0ec <free>
			filename = nullptr;
    22fc:	65a7      	str	r7, [r4, #88]	; 0x58
  bool isOpen() const {return m_fFile || m_xFile;}
    22fe:	6d23      	ldr	r3, [r4, #80]	; 0x50
    2300:	2b00      	cmp	r3, #0
    2302:	f000 81dd 	beq.w	26c0 <LoadDirectory(FS*)+0x684>
    2306:	e023      	b.n	2350 <LoadDirectory(FS*)+0x314>
    2308:	00000e91 	.word	0x00000e91
    230c:	2000d8b4 	.word	0x2000d8b4
    2310:	20003358 	.word	0x20003358
    2314:	200033b4 	.word	0x200033b4
    2318:	20003334 	.word	0x20003334
    231c:	20003308 	.word	0x20003308
    2320:	20003240 	.word	0x20003240
    2324:	2000d8b0 	.word	0x2000d8b0
    2328:	20001838 	.word	0x20001838
    232c:	2005e522 	.word	0x2005e522
    2330:	000017dd 	.word	0x000017dd
    2334:	000004c5 	.word	0x000004c5
    2338:	000014a1 	.word	0x000014a1
    233c:	00001949 	.word	0x00001949
    2340:	00000e69 	.word	0x00000e69
    2344:	00001c55 	.word	0x00001c55
    2348:	2005e500 	.word	0x2005e500
    234c:	2005e541 	.word	0x2005e541
			sdfatfile.close();
    2350:	f104 0018 	add.w	r0, r4, #24
    2354:	f007 fa4e 	bl	97f4 <FsBaseFile::close()>
			delete f;
    2358:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    235a:	2c00      	cmp	r4, #0
    235c:	f43f aec7 	beq.w	20ee <LoadDirectory(FS*)+0xb2>
    2360:	6823      	ldr	r3, [r4, #0]
    2362:	4ab0      	ldr	r2, [pc, #704]	; (2624 <LoadDirectory(FS*)+0x5e8>)
    2364:	685b      	ldr	r3, [r3, #4]
    2366:	4293      	cmp	r3, r2
    2368:	f040 81d5 	bne.w	2716 <LoadDirectory(FS*)+0x6da>
	virtual ~SDFile(void) {
    236c:	4bae      	ldr	r3, [pc, #696]	; (2628 <LoadDirectory(FS*)+0x5ec>)
		if (filename) {
    236e:	6da0      	ldr	r0, [r4, #88]	; 0x58
	virtual ~SDFile(void) {
    2370:	6023      	str	r3, [r4, #0]
		if (filename) {
    2372:	b118      	cbz	r0, 237c <LoadDirectory(FS*)+0x340>
			free(filename);
    2374:	f00c feba 	bl	f0ec <free>
			filename = nullptr;
    2378:	2300      	movs	r3, #0
    237a:	65a3      	str	r3, [r4, #88]	; 0x58
    237c:	6d23      	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
    237e:	f104 0718 	add.w	r7, r4, #24
    2382:	2b00      	cmp	r3, #0
    2384:	f000 81bd 	beq.w	2702 <LoadDirectory(FS*)+0x6c6>
    2388:	4638      	mov	r0, r7
    238a:	f007 fa33 	bl	97f4 <FsBaseFile::close()>
    238e:	4ba7      	ldr	r3, [pc, #668]	; (262c <LoadDirectory(FS*)+0x5f0>)
  ~FsBaseFile() {close();}
    2390:	4638      	mov	r0, r7
    2392:	60a3      	str	r3, [r4, #8]
    2394:	f007 fa2e 	bl	97f4 <FsBaseFile::close()>
	}
    2398:	215c      	movs	r1, #92	; 0x5c
    239a:	4620      	mov	r0, r4
    239c:	f00b f974 	bl	d688 <operator delete(void*, unsigned int)>
   while (File entry = dir.openNextFile()) 
    23a0:	9906      	ldr	r1, [sp, #24]
		return (f) ? f->openNextFile(mode) : *this;
    23a2:	2900      	cmp	r1, #0
    23a4:	f47f aea7 	bne.w	20f6 <LoadDirectory(FS*)+0xba>
   Printf_dbg("Loaded %d items in %lumS from %s\n", NumDrvDirMenuItems, (millis()-beginWait), DriveDirPath);
    23a8:	f8b5 a000 	ldrh.w	sl, [r5]
    23ac:	f8db 3000 	ldr.w	r3, [fp]
   for(uint16_t i=0; i<NumDrvDirMenuItems; i++)
    23b0:	f1ba 0f00 	cmp.w	sl, #0
    23b4:	f000 8112 	beq.w	25dc <LoadDirectory(FS*)+0x5a0>
    23b8:	f10a 33ff 	add.w	r3, sl, #4294967295
    23bc:	f04f 0801 	mov.w	r8, #1
    23c0:	f04f 0900 	mov.w	r9, #0
      DriveDirMenu[0].ItemType = rtNone;
    23c4:	f8df b27c 	ldr.w	fp, [pc, #636]	; 2644 <LoadDirectory(FS*)+0x608>
    23c8:	9301      	str	r3, [sp, #4]
    23ca:	fa1f f388 	uxth.w	r3, r8
              TempMenuItem    = DriveDirMenu[i];
    23ce:	ae0c      	add	r6, sp, #48	; 0x30
      for(uint16_t j=i+1; j<NumDrvDirMenuItems; j++)
    23d0:	459a      	cmp	sl, r3
    23d2:	d92e      	bls.n	2432 <LoadDirectory(FS*)+0x3f6>
    23d4:	9a01      	ldr	r2, [sp, #4]
      DriveDirMenu[0].ItemType = rtNone;
    23d6:	f8db 5000 	ldr.w	r5, [fp]
    23da:	1ad3      	subs	r3, r2, r3
    23dc:	f109 0214 	add.w	r2, r9, #20
    23e0:	f105 0714 	add.w	r7, r5, #20
           if(strcasecmp(DriveDirMenu[i].Name,DriveDirMenu[j].Name)>0)
    23e4:	eb05 0409 	add.w	r4, r5, r9
    23e8:	fa18 f383 	uxtah	r3, r8, r3
    23ec:	4415      	add	r5, r2
    23ee:	eb07 1703 	add.w	r7, r7, r3, lsl #4
    23f2:	6829      	ldr	r1, [r5, #0]
    23f4:	6860      	ldr	r0, [r4, #4]
    23f6:	f00e fe2f 	bl	11058 <strcasecmp>
    23fa:	2800      	cmp	r0, #0
              DriveDirMenu[i] = DriveDirMenu[j];
    23fc:	f1a5 0c04 	sub.w	ip, r5, #4
      for(uint16_t j=i+1; j<NumDrvDirMenuItems; j++)
    2400:	f105 0510 	add.w	r5, r5, #16
           if(strcasecmp(DriveDirMenu[i].Name,DriveDirMenu[j].Name)>0)
    2404:	dd0b      	ble.n	241e <LoadDirectory(FS*)+0x3e2>
              TempMenuItem    = DriveDirMenu[i];
    2406:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    240a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
              DriveDirMenu[i] = DriveDirMenu[j];
    240e:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
    2412:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
              DriveDirMenu[j] = TempMenuItem;
    2416:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    241a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
      for(uint16_t j=i+1; j<NumDrvDirMenuItems; j++)
    241e:	42af      	cmp	r7, r5
    2420:	d1e7      	bne.n	23f2 <LoadDirectory(FS*)+0x3b6>
    2422:	f108 0801 	add.w	r8, r8, #1
    2426:	f109 0910 	add.w	r9, r9, #16
    242a:	fa1f f388 	uxth.w	r3, r8
    242e:	459a      	cmp	sl, r3
    2430:	d8d0      	bhi.n	23d4 <LoadDirectory(FS*)+0x398>
//}

void SetNumItems(uint16_t NumItems)
{
   NumItemsFull = NumItems;
   IO1[rRegNumItemsOnPage] = (NumItemsFull > MaxItemsPerPage ? MaxItemsPerPage : NumItemsFull);
    2432:	4652      	mov	r2, sl
	virtual ~File() {
    2434:	9b00      	ldr	r3, [sp, #0]
    2436:	497e      	ldr	r1, [pc, #504]	; (2630 <LoadDirectory(FS*)+0x5f4>)
    2438:	2a13      	cmp	r2, #19
    243a:	9302      	str	r3, [sp, #8]
   IO1[rwRegPageNumber] = 1;
   IO1[rRegNumPages] = 
      NumItems/MaxItemsPerPage + 
    243c:	4b7d      	ldr	r3, [pc, #500]	; (2634 <LoadDirectory(FS*)+0x5f8>)
   IO1[rRegNumItemsOnPage] = (NumItemsFull > MaxItemsPerPage ? MaxItemsPerPage : NumItemsFull);
    243e:	bf28      	it	cs
    2440:	2213      	movcs	r2, #19
    2442:	6809      	ldr	r1, [r1, #0]
      NumItems/MaxItemsPerPage + 
    2444:	fba3 030a 	umull	r0, r3, r3, sl
   IO1[rwRegPageNumber] = 1;
    2448:	2001      	movs	r0, #1
   IO1[rRegNumItemsOnPage] = (NumItemsFull > MaxItemsPerPage ? MaxItemsPerPage : NumItemsFull);
    244a:	b2d2      	uxtb	r2, r2
   NumItemsFull = NumItems;
    244c:	4c7a      	ldr	r4, [pc, #488]	; (2638 <LoadDirectory(FS*)+0x5fc>)
   IO1[rRegNumItemsOnPage] = (NumItemsFull > MaxItemsPerPage ? MaxItemsPerPage : NumItemsFull);
    244e:	734a      	strb	r2, [r1, #13]
      NumItems/MaxItemsPerPage + 
    2450:	ebaa 0203 	sub.w	r2, sl, r3
   IO1[rwRegPageNumber] = 1;
    2454:	7388      	strb	r0, [r1, #14]
      NumItems/MaxItemsPerPage + 
    2456:	eb03 0352 	add.w	r3, r3, r2, lsr #1
   NumItemsFull = NumItems;
    245a:	f8a4 a000 	strh.w	sl, [r4]
      NumItems/MaxItemsPerPage + 
    245e:	091b      	lsrs	r3, r3, #4
      (NumItems%MaxItemsPerPage!=0 ? 1 : 0) +
    2460:	eb03 00c3 	add.w	r0, r3, r3, lsl #3
    2464:	f1ba 0f00 	cmp.w	sl, #0
    2468:	bf14      	ite	ne
    246a:	461a      	movne	r2, r3
    246c:	1c5a      	addeq	r2, r3, #1
    246e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    2472:	ebaa 0303 	sub.w	r3, sl, r3
      NumItems/MaxItemsPerPage + 
    2476:	b29b      	uxth	r3, r3
      (NumItems%MaxItemsPerPage!=0 ? 1 : 0) +
    2478:	2b00      	cmp	r3, #0
    247a:	bf18      	it	ne
    247c:	3201      	addne	r2, #1
    247e:	b2d3      	uxtb	r3, r2
   IO1[rRegNumPages] = 
    2480:	73cb      	strb	r3, [r1, #15]
		if (f) dec_refcount();
    2482:	9c06      	ldr	r4, [sp, #24]
    2484:	2c00      	cmp	r4, #0
    2486:	d039      	beq.n	24fc <LoadDirectory(FS*)+0x4c0>
		if (--(f->refcount) == 0) {
    2488:	6865      	ldr	r5, [r4, #4]
    248a:	3d01      	subs	r5, #1
    248c:	6065      	str	r5, [r4, #4]
    248e:	2d00      	cmp	r5, #0
    2490:	d134      	bne.n	24fc <LoadDirectory(FS*)+0x4c0>
			f->close();
    2492:	6823      	ldr	r3, [r4, #0]
    2494:	4a69      	ldr	r2, [pc, #420]	; (263c <LoadDirectory(FS*)+0x600>)
    2496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2498:	4293      	cmp	r3, r2
    249a:	f040 8162 	bne.w	2762 <LoadDirectory(FS*)+0x726>
		if (filename) {
    249e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    24a0:	b110      	cbz	r0, 24a8 <LoadDirectory(FS*)+0x46c>
			free(filename);
    24a2:	f00c fe23 	bl	f0ec <free>
			filename = nullptr;
    24a6:	65a5      	str	r5, [r4, #88]	; 0x58
  bool isOpen() const {return m_fFile || m_xFile;}
    24a8:	6d23      	ldr	r3, [r4, #80]	; 0x50
    24aa:	2b00      	cmp	r3, #0
    24ac:	f000 814c 	beq.w	2748 <LoadDirectory(FS*)+0x70c>
			sdfatfile.close();
    24b0:	f104 0018 	add.w	r0, r4, #24
    24b4:	f007 f99e 	bl	97f4 <FsBaseFile::close()>
			delete f;
    24b8:	9c06      	ldr	r4, [sp, #24]
    24ba:	b1fc      	cbz	r4, 24fc <LoadDirectory(FS*)+0x4c0>
    24bc:	6823      	ldr	r3, [r4, #0]
    24be:	4a59      	ldr	r2, [pc, #356]	; (2624 <LoadDirectory(FS*)+0x5e8>)
    24c0:	685b      	ldr	r3, [r3, #4]
    24c2:	4293      	cmp	r3, r2
    24c4:	f040 815d 	bne.w	2782 <LoadDirectory(FS*)+0x746>
	virtual ~SDFile(void) {
    24c8:	4b57      	ldr	r3, [pc, #348]	; (2628 <LoadDirectory(FS*)+0x5ec>)
		if (filename) {
    24ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
	virtual ~SDFile(void) {
    24cc:	6023      	str	r3, [r4, #0]
		if (filename) {
    24ce:	b118      	cbz	r0, 24d8 <LoadDirectory(FS*)+0x49c>
			free(filename);
    24d0:	f00c fe0c 	bl	f0ec <free>
			filename = nullptr;
    24d4:	2300      	movs	r3, #0
    24d6:	65a3      	str	r3, [r4, #88]	; 0x58
    24d8:	6d23      	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
    24da:	f104 0518 	add.w	r5, r4, #24
    24de:	2b00      	cmp	r3, #0
    24e0:	f000 8142 	beq.w	2768 <LoadDirectory(FS*)+0x72c>
    24e4:	4628      	mov	r0, r5
    24e6:	f007 f985 	bl	97f4 <FsBaseFile::close()>
    24ea:	4b50      	ldr	r3, [pc, #320]	; (262c <LoadDirectory(FS*)+0x5f0>)
  ~FsBaseFile() {close();}
    24ec:	4628      	mov	r0, r5
    24ee:	60a3      	str	r3, [r4, #8]
    24f0:	f007 f980 	bl	97f4 <FsBaseFile::close()>
	}
    24f4:	215c      	movs	r1, #92	; 0x5c
    24f6:	4620      	mov	r0, r4
    24f8:	f00b f8c6 	bl	d688 <operator delete(void*, unsigned int)>
}
    24fc:	b021      	add	sp, #132	; 0x84
    24fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			filename = (char *)malloc(MAX_FILENAME_LEN);
    2502:	f44f 7080 	mov.w	r0, #256	; 0x100
    2506:	f00c fde9 	bl	f0dc <malloc>
    250a:	4601      	mov	r1, r0
    250c:	65a0      	str	r0, [r4, #88]	; 0x58
			if (filename) {
    250e:	2800      	cmp	r0, #0
    2510:	f000 813a 	beq.w	2788 <LoadDirectory(FS*)+0x74c>
    *name = 0;
    2514:	7007      	strb	r7, [r0, #0]
    return m_fFile ? m_fFile->getName(name, len) :
    2516:	6d20      	ldr	r0, [r4, #80]	; 0x50
    2518:	2800      	cmp	r0, #0
    251a:	f000 80db 	beq.w	26d4 <LoadDirectory(FS*)+0x698>
    251e:	f44f 7280 	mov.w	r2, #256	; 0x100
    2522:	f006 fdb7 	bl	9094 <FatFile::getName(char*, unsigned int)>
		return filename;
    2526:	6da7      	ldr	r7, [r4, #88]	; 0x58
    2528:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    252a:	e641      	b.n	21b0 <LoadDirectory(FS*)+0x174>
      filename = entry.name();
    252c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		return (f) ? f->name() : "";
    252e:	2c00      	cmp	r4, #0
    2530:	f040 80a2 	bne.w	2678 <LoadDirectory(FS*)+0x63c>
    2534:	4f42      	ldr	r7, [pc, #264]	; (2640 <LoadDirectory(FS*)+0x604>)
         SetDriveDirMenuNameType(NumDrvDirMenuItems, filename);
    2536:	4639      	mov	r1, r7
    2538:	8828      	ldrh	r0, [r5, #0]
    253a:	f7ff fd63 	bl	2004 <SetDriveDirMenuNameType(unsigned short, char const*)>
    253e:	e664      	b.n	220a <LoadDirectory(FS*)+0x1ce>
  bool isOpen() const {return m_fFile || m_xFile;}
    2540:	6d42      	ldr	r2, [r0, #84]	; 0x54
    2542:	2a00      	cmp	r2, #0
    2544:	f47f ae2b 	bne.w	219e <LoadDirectory(FS*)+0x162>
    2548:	4603      	mov	r3, r0
	virtual ~File() {
    254a:	9a00      	ldr	r2, [sp, #0]
		if (--(f->refcount) == 0) {
    254c:	685c      	ldr	r4, [r3, #4]
	virtual ~File() {
    254e:	9207      	str	r2, [sp, #28]
		if (--(f->refcount) == 0) {
    2550:	3c01      	subs	r4, #1
    2552:	605c      	str	r4, [r3, #4]
    2554:	2c00      	cmp	r4, #0
    2556:	f47f af27 	bne.w	23a8 <LoadDirectory(FS*)+0x36c>
			f->close();
    255a:	681a      	ldr	r2, [r3, #0]
    255c:	4937      	ldr	r1, [pc, #220]	; (263c <LoadDirectory(FS*)+0x600>)
    255e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    2560:	428a      	cmp	r2, r1
    2562:	f040 80fb 	bne.w	275c <LoadDirectory(FS*)+0x720>
		if (filename) {
    2566:	6d98      	ldr	r0, [r3, #88]	; 0x58
    2568:	b120      	cbz	r0, 2574 <LoadDirectory(FS*)+0x538>
    256a:	9301      	str	r3, [sp, #4]
			free(filename);
    256c:	f00c fdbe 	bl	f0ec <free>
			filename = nullptr;
    2570:	9b01      	ldr	r3, [sp, #4]
    2572:	659c      	str	r4, [r3, #88]	; 0x58
    2574:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    2576:	2a00      	cmp	r2, #0
    2578:	f000 80eb 	beq.w	2752 <LoadDirectory(FS*)+0x716>
			sdfatfile.close();
    257c:	f103 0018 	add.w	r0, r3, #24
    2580:	f007 f938 	bl	97f4 <FsBaseFile::close()>
			delete f;
    2584:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    2586:	2c00      	cmp	r4, #0
    2588:	f43f af0e 	beq.w	23a8 <LoadDirectory(FS*)+0x36c>
    258c:	6823      	ldr	r3, [r4, #0]
    258e:	4a25      	ldr	r2, [pc, #148]	; (2624 <LoadDirectory(FS*)+0x5e8>)
    2590:	685b      	ldr	r3, [r3, #4]
    2592:	4293      	cmp	r3, r2
    2594:	f040 80f2 	bne.w	277c <LoadDirectory(FS*)+0x740>
	virtual ~SDFile(void) {
    2598:	4b23      	ldr	r3, [pc, #140]	; (2628 <LoadDirectory(FS*)+0x5ec>)
		if (filename) {
    259a:	6da0      	ldr	r0, [r4, #88]	; 0x58
	virtual ~SDFile(void) {
    259c:	6023      	str	r3, [r4, #0]
		if (filename) {
    259e:	b118      	cbz	r0, 25a8 <LoadDirectory(FS*)+0x56c>
			free(filename);
    25a0:	f00c fda4 	bl	f0ec <free>
			filename = nullptr;
    25a4:	2300      	movs	r3, #0
    25a6:	65a3      	str	r3, [r4, #88]	; 0x58
    25a8:	6d23      	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
    25aa:	f104 0618 	add.w	r6, r4, #24
    25ae:	2b00      	cmp	r3, #0
    25b0:	f000 80df 	beq.w	2772 <LoadDirectory(FS*)+0x736>
    25b4:	4630      	mov	r0, r6
    25b6:	f007 f91d 	bl	97f4 <FsBaseFile::close()>
    25ba:	4b1c      	ldr	r3, [pc, #112]	; (262c <LoadDirectory(FS*)+0x5f0>)
  ~FsBaseFile() {close();}
    25bc:	4630      	mov	r0, r6
    25be:	60a3      	str	r3, [r4, #8]
    25c0:	f007 f918 	bl	97f4 <FsBaseFile::close()>
	}
    25c4:	215c      	movs	r1, #92	; 0x5c
    25c6:	4620      	mov	r0, r4
    25c8:	f00b f85e 	bl	d688 <operator delete(void*, unsigned int)>
   Printf_dbg("Loaded %d items in %lumS from %s\n", NumDrvDirMenuItems, (millis()-beginWait), DriveDirPath);
    25cc:	f8b5 a000 	ldrh.w	sl, [r5]
    25d0:	f8db 3000 	ldr.w	r3, [fp]
   for(uint16_t i=0; i<NumDrvDirMenuItems; i++)
    25d4:	f1ba 0f00 	cmp.w	sl, #0
    25d8:	f47f aeee 	bne.w	23b8 <LoadDirectory(FS*)+0x37c>
      DriveDirMenu[0].ItemType = rtNone;
    25dc:	4b19      	ldr	r3, [pc, #100]	; (2644 <LoadDirectory(FS*)+0x608>)
      AddDirEntry("<Empty>");
    25de:	481a      	ldr	r0, [pc, #104]	; (2648 <LoadDirectory(FS*)+0x60c>)
      DriveDirMenu[0].ItemType = rtNone;
    25e0:	681b      	ldr	r3, [r3, #0]
    25e2:	f883 a000 	strb.w	sl, [r3]
      AddDirEntry("<Empty>");
    25e6:	f7ff fcc5 	bl	1f74 <AddDirEntry(char const*)>
   SetNumItems(NumDrvDirMenuItems);
    25ea:	f8b5 a000 	ldrh.w	sl, [r5]
    25ee:	e720      	b.n	2432 <LoadDirectory(FS*)+0x3f6>
  bool isOpen() const {return m_fFile || m_xFile;}
    25f0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    25f2:	2b00      	cmp	r3, #0
    25f4:	f47f ad99 	bne.w	212a <LoadDirectory(FS*)+0xee>
    25f8:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
	constexpr File() : f(nullptr) { }
    25fc:	930b      	str	r3, [sp, #44]	; 0x2c
    25fe:	e9cd 3408 	strd	r3, r4, [sp, #32]
    2602:	9b00      	ldr	r3, [sp, #0]
    2604:	9307      	str	r3, [sp, #28]
    2606:	e5b6      	b.n	2176 <LoadDirectory(FS*)+0x13a>
    2608:	6d63      	ldr	r3, [r4, #84]	; 0x54
           m_xFile ? m_xFile->isDir() : false;
    260a:	2b00      	cmp	r3, #0
    260c:	d093      	beq.n	2536 <LoadDirectory(FS*)+0x4fa>
    260e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
    2612:	f013 0f50 	tst.w	r3, #80	; 0x50
    2616:	f47f addd 	bne.w	21d4 <LoadDirectory(FS*)+0x198>
         SetDriveDirMenuNameType(NumDrvDirMenuItems, filename);
    261a:	4639      	mov	r1, r7
    261c:	8828      	ldrh	r0, [r5, #0]
    261e:	f7ff fcf1 	bl	2004 <SetDriveDirMenuNameType(unsigned short, char const*)>
    2622:	e5f2      	b.n	220a <LoadDirectory(FS*)+0x1ce>
    2624:	00001c55 	.word	0x00001c55
    2628:	20003358 	.word	0x20003358
    262c:	20003240 	.word	0x20003240
    2630:	2000dae4 	.word	0x2000dae4
    2634:	af286bcb 	.word	0xaf286bcb
    2638:	2005e524 	.word	0x2005e524
    263c:	00000e69 	.word	0x00000e69
    2640:	2000b0f8 	.word	0x2000b0f8
    2644:	2000d8b0 	.word	0x2000d8b0
    2648:	20001858 	.word	0x20001858
  bool isOpen() const {return m_fFile || m_xFile;}
    264c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    264e:	2b00      	cmp	r3, #0
    2650:	f47f adee 	bne.w	2230 <LoadDirectory(FS*)+0x1f4>
    2654:	e5f0      	b.n	2238 <LoadDirectory(FS*)+0x1fc>
		return (f) ? f->isOpen() : false;
    2656:	4790      	blx	r2
    2658:	2800      	cmp	r0, #0
    265a:	f47f af67 	bne.w	252c <LoadDirectory(FS*)+0x4f0>
	virtual ~File() {
    265e:	9a00      	ldr	r2, [sp, #0]
		if (f) dec_refcount();
    2660:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	virtual ~File() {
    2662:	9207      	str	r2, [sp, #28]
		if (f) dec_refcount();
    2664:	2b00      	cmp	r3, #0
    2666:	f43f ae9f 	beq.w	23a8 <LoadDirectory(FS*)+0x36c>
		if (--(f->refcount) == 0) {
    266a:	685c      	ldr	r4, [r3, #4]
    266c:	3c01      	subs	r4, #1
    266e:	605c      	str	r4, [r3, #4]
    2670:	2c00      	cmp	r4, #0
    2672:	f47f ae99 	bne.w	23a8 <LoadDirectory(FS*)+0x36c>
    2676:	e770      	b.n	255a <LoadDirectory(FS*)+0x51e>
		return (f) ? f->name() : "";
    2678:	6823      	ldr	r3, [r4, #0]
    267a:	4a46      	ldr	r2, [pc, #280]	; (2794 <LoadDirectory(FS*)+0x758>)
    267c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    267e:	4293      	cmp	r3, r2
    2680:	f43f ad92 	beq.w	21a8 <LoadDirectory(FS*)+0x16c>
    2684:	4620      	mov	r0, r4
    2686:	4798      	blx	r3
    2688:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    268a:	4607      	mov	r7, r0
    268c:	e590      	b.n	21b0 <LoadDirectory(FS*)+0x174>
		return (f) ? f->openNextFile(mode) : *this;
    268e:	a807      	add	r0, sp, #28
    2690:	4798      	blx	r3
    2692:	e575      	b.n	2180 <LoadDirectory(FS*)+0x144>
			f->close();
    2694:	4620      	mov	r0, r4
    2696:	4798      	blx	r3
    2698:	e5ce      	b.n	2238 <LoadDirectory(FS*)+0x1fc>
		return (f) ? f->isDirectory() : false;
    269a:	4620      	mov	r0, r4
    269c:	4798      	blx	r3
    269e:	2800      	cmp	r0, #0
    26a0:	f47f ad98 	bne.w	21d4 <LoadDirectory(FS*)+0x198>
    26a4:	4639      	mov	r1, r7
    26a6:	8828      	ldrh	r0, [r5, #0]
    26a8:	f7ff fcac 	bl	2004 <SetDriveDirMenuNameType(unsigned short, char const*)>
    26ac:	e5ad      	b.n	220a <LoadDirectory(FS*)+0x1ce>
    26ae:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
    26b2:	2b00      	cmp	r3, #0
    26b4:	f47f addb 	bne.w	226e <LoadDirectory(FS*)+0x232>
    26b8:	e5dd      	b.n	2276 <LoadDirectory(FS*)+0x23a>
			f->close();
    26ba:	4648      	mov	r0, r9
    26bc:	4798      	blx	r3
    26be:	e5da      	b.n	2276 <LoadDirectory(FS*)+0x23a>
    26c0:	6d63      	ldr	r3, [r4, #84]	; 0x54
    26c2:	2b00      	cmp	r3, #0
    26c4:	f47f ae44 	bne.w	2350 <LoadDirectory(FS*)+0x314>
    26c8:	e646      	b.n	2358 <LoadDirectory(FS*)+0x31c>
    26ca:	6d63      	ldr	r3, [r4, #84]	; 0x54
    26cc:	2b00      	cmp	r3, #0
    26ce:	f47f ade8 	bne.w	22a2 <LoadDirectory(FS*)+0x266>
    26d2:	e5e9      	b.n	22a8 <LoadDirectory(FS*)+0x26c>
    26d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
           m_xFile ? m_xFile->getName(name, len) : 0;
    26d6:	b118      	cbz	r0, 26e0 <LoadDirectory(FS*)+0x6a4>
    return getName8(name, size);
    26d8:	f44f 7280 	mov.w	r2, #256	; 0x100
    26dc:	f004 f988 	bl	69f0 <ExFatFile::getName8(char*, unsigned int)>
		return filename;
    26e0:	6da7      	ldr	r7, [r4, #88]	; 0x58
    26e2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    26e4:	e564      	b.n	21b0 <LoadDirectory(FS*)+0x174>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    26e6:	210f      	movs	r1, #15
    26e8:	482b      	ldr	r0, [pc, #172]	; (2798 <LoadDirectory(FS*)+0x75c>)
    26ea:	f00c f91d 	bl	e928 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    26ee:	482b      	ldr	r0, [pc, #172]	; (279c <LoadDirectory(FS*)+0x760>)
    26f0:	f00a f83e 	bl	c770 <Print::println()>
    26f4:	e7b3      	b.n	265e <LoadDirectory(FS*)+0x622>
    26f6:	4620      	mov	r0, r4
    26f8:	4798      	blx	r3
    26fa:	e62d      	b.n	2358 <LoadDirectory(FS*)+0x31c>
			delete f;
    26fc:	4620      	mov	r0, r4
    26fe:	4798      	blx	r3
    2700:	e5db      	b.n	22ba <LoadDirectory(FS*)+0x27e>
  bool isOpen() const {return m_fFile || m_xFile;}
    2702:	6d63      	ldr	r3, [r4, #84]	; 0x54
    2704:	2b00      	cmp	r3, #0
    2706:	f47f ae3f 	bne.w	2388 <LoadDirectory(FS*)+0x34c>
    270a:	e640      	b.n	238e <LoadDirectory(FS*)+0x352>
   return (strlen(DriveDirPath) == 1 && DriveDirPath[0] == '/');
    270c:	7823      	ldrb	r3, [r4, #0]
    270e:	2b2f      	cmp	r3, #47	; 0x2f
    2710:	f47f acde 	bne.w	20d0 <LoadDirectory(FS*)+0x94>
    2714:	e4e3      	b.n	20de <LoadDirectory(FS*)+0xa2>
    2716:	4620      	mov	r0, r4
    2718:	4798      	blx	r3
		f = nullptr;
    271a:	e4e8      	b.n	20ee <LoadDirectory(FS*)+0xb2>
    271c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    271e:	2b00      	cmp	r3, #0
    2720:	f47f aca3 	bne.w	206a <LoadDirectory(FS*)+0x2e>
	constexpr File() : f(nullptr) { }
    2724:	491e      	ldr	r1, [pc, #120]	; (27a0 <LoadDirectory(FS*)+0x764>)
    2726:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    272a:	ae10      	add	r6, sp, #64	; 0x40
    272c:	f88d 3014 	strb.w	r3, [sp, #20]
    2730:	9100      	str	r1, [sp, #0]
    2732:	9102      	str	r1, [sp, #8]
    2734:	9306      	str	r3, [sp, #24]
    2736:	e9cd 3203 	strd	r3, r2, [sp, #12]
    273a:	e4bd      	b.n	20b8 <LoadDirectory(FS*)+0x7c>
   File dir = sourceFS->open(DriveDirPath);
    273c:	4621      	mov	r1, r4
    273e:	a802      	add	r0, sp, #8
    2740:	47a8      	blx	r5
    2742:	4b17      	ldr	r3, [pc, #92]	; (27a0 <LoadDirectory(FS*)+0x764>)
    2744:	9300      	str	r3, [sp, #0]
    2746:	e4bc      	b.n	20c2 <LoadDirectory(FS*)+0x86>
    2748:	6d63      	ldr	r3, [r4, #84]	; 0x54
    274a:	2b00      	cmp	r3, #0
    274c:	f47f aeb0 	bne.w	24b0 <LoadDirectory(FS*)+0x474>
    2750:	e6b2      	b.n	24b8 <LoadDirectory(FS*)+0x47c>
    2752:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    2754:	2a00      	cmp	r2, #0
    2756:	f47f af11 	bne.w	257c <LoadDirectory(FS*)+0x540>
    275a:	e713      	b.n	2584 <LoadDirectory(FS*)+0x548>
			f->close();
    275c:	4618      	mov	r0, r3
    275e:	4790      	blx	r2
    2760:	e710      	b.n	2584 <LoadDirectory(FS*)+0x548>
    2762:	4620      	mov	r0, r4
    2764:	4798      	blx	r3
    2766:	e6a7      	b.n	24b8 <LoadDirectory(FS*)+0x47c>
    2768:	6d63      	ldr	r3, [r4, #84]	; 0x54
    276a:	2b00      	cmp	r3, #0
    276c:	f47f aeba 	bne.w	24e4 <LoadDirectory(FS*)+0x4a8>
    2770:	e6bb      	b.n	24ea <LoadDirectory(FS*)+0x4ae>
    2772:	6d63      	ldr	r3, [r4, #84]	; 0x54
    2774:	2b00      	cmp	r3, #0
    2776:	f47f af1d 	bne.w	25b4 <LoadDirectory(FS*)+0x578>
    277a:	e71e      	b.n	25ba <LoadDirectory(FS*)+0x57e>
			delete f;
    277c:	4620      	mov	r0, r4
    277e:	4798      	blx	r3
    2780:	e612      	b.n	23a8 <LoadDirectory(FS*)+0x36c>
    2782:	4620      	mov	r0, r4
    2784:	4798      	blx	r3
}
    2786:	e6b9      	b.n	24fc <LoadDirectory(FS*)+0x4c0>
				filename = &zeroterm;
    2788:	f8c4 8058 	str.w	r8, [r4, #88]	; 0x58
    278c:	4647      	mov	r7, r8
		return filename;
    278e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    2790:	e50e      	b.n	21b0 <LoadDirectory(FS*)+0x174>
    2792:	bf00      	nop
    2794:	000014a1 	.word	0x000014a1
    2798:	20001848 	.word	0x20001848
    279c:	2000bfd8 	.word	0x2000bfd8
    27a0:	20003308 	.word	0x20003308

000027a4 <MenuChange()>:
{
    27a4:	b510      	push	{r4, lr}
   switch(IO1[rWRegCurrMenuWAIT])
    27a6:	4c15      	ldr	r4, [pc, #84]	; (27fc <MenuChange()+0x58>)
   strcpy(DriveDirPath, "/");
    27a8:	212f      	movs	r1, #47	; 0x2f
    27aa:	4a15      	ldr	r2, [pc, #84]	; (2800 <MenuChange()+0x5c>)
   switch(IO1[rWRegCurrMenuWAIT])
    27ac:	6823      	ldr	r3, [r4, #0]
   strcpy(DriveDirPath, "/");
    27ae:	8011      	strh	r1, [r2, #0]
   switch(IO1[rWRegCurrMenuWAIT])
    27b0:	7a9a      	ldrb	r2, [r3, #10]
    27b2:	2a01      	cmp	r2, #1
    27b4:	b2d1      	uxtb	r1, r2
    27b6:	d005      	beq.n	27c4 <MenuChange()+0x20>
    27b8:	f011 0ffd 	tst.w	r1, #253	; 0xfd
    27bc:	d00e      	beq.n	27dc <MenuChange()+0x38>
   IO1[rwRegCursorItemOnPg] = 0;
    27be:	2200      	movs	r2, #0
    27c0:	731a      	strb	r2, [r3, #12]
}
    27c2:	bd10      	pop	{r4, pc}
         MenuSource = TeensyROMMenu; 
    27c4:	480f      	ldr	r0, [pc, #60]	; (2804 <MenuChange()+0x60>)
   NumItemsFull = NumItems;
    27c6:	2202      	movs	r2, #2
    27c8:	4c0f      	ldr	r4, [pc, #60]	; (2808 <MenuChange()+0x64>)
   IO1[rRegNumItemsOnPage] = (NumItemsFull > MaxItemsPerPage ? MaxItemsPerPage : NumItemsFull);
    27ca:	735a      	strb	r2, [r3, #13]
    27cc:	6004      	str	r4, [r0, #0]
   NumItemsFull = NumItems;
    27ce:	480f      	ldr	r0, [pc, #60]	; (280c <MenuChange()+0x68>)
   IO1[rwRegPageNumber] = 1;
    27d0:	7399      	strb	r1, [r3, #14]
   NumItemsFull = NumItems;
    27d2:	8002      	strh	r2, [r0, #0]
   IO1[rwRegCursorItemOnPg] = 0;
    27d4:	2200      	movs	r2, #0
   IO1[rRegNumPages] = 
    27d6:	73d9      	strb	r1, [r3, #15]
    27d8:	731a      	strb	r2, [r3, #12]
}
    27da:	bd10      	pop	{r4, pc}
         SD.begin(BUILTIN_SDCARD); // refresh, takes 3 seconds for fail/unpopulated, 20-200mS populated
    27dc:	21fe      	movs	r1, #254	; 0xfe
    27de:	480c      	ldr	r0, [pc, #48]	; (2810 <MenuChange()+0x6c>)
    27e0:	f002 fb1a 	bl	4e18 <SDClass::begin(unsigned char)>
         LoadDirectory(&SD); //do this regardless of SD.begin result to populate one entry w/ message
    27e4:	480a      	ldr	r0, [pc, #40]	; (2810 <MenuChange()+0x6c>)
    27e6:	f7ff fc29 	bl	203c <LoadDirectory(FS*)>
         MenuSource = DriveDirMenu; 
    27ea:	490a      	ldr	r1, [pc, #40]	; (2814 <MenuChange()+0x70>)
    27ec:	4a05      	ldr	r2, [pc, #20]	; (2804 <MenuChange()+0x60>)
    27ee:	6809      	ldr	r1, [r1, #0]
   IO1[rwRegCursorItemOnPg] = 0;
    27f0:	6823      	ldr	r3, [r4, #0]
         MenuSource = DriveDirMenu; 
    27f2:	6011      	str	r1, [r2, #0]
   IO1[rwRegCursorItemOnPg] = 0;
    27f4:	2200      	movs	r2, #0
    27f6:	731a      	strb	r2, [r3, #12]
}
    27f8:	bd10      	pop	{r4, pc}
    27fa:	bf00      	nop
    27fc:	2000dae4 	.word	0x2000dae4
    2800:	2000d8b4 	.word	0x2000d8b4
    2804:	2000daf0 	.word	0x2000daf0
    2808:	2000c140 	.word	0x2000c140
    280c:	2005e524 	.word	0x2005e524
    2810:	2005daf4 	.word	0x2005daf4
    2814:	2000d8b0 	.word	0x2000d8b0

00002818 <SetUpMainMenuROM()>:
{
    2818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   SetIRQDeassert;
    281c:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
    2820:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   SetGameDeassert;
    2824:	4b2d      	ldr	r3, [pc, #180]	; (28dc <SetUpMainMenuROM()+0xc4>)
   SetNMIDeassert;
    2826:	f44f 5400 	mov.w	r4, #8192	; 0x2000
   SetExROMAssert; //emulate 8k cart ROM
    282a:	f44f 6000 	mov.w	r0, #2048	; 0x800
   SetIRQDeassert;
    282e:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
   SetNMIDeassert;
    2832:	f8c1 4084 	str.w	r4, [r1, #132]	; 0x84
   HIROM_Image = NULL;
    2836:	2400      	movs	r4, #0
   SetGameDeassert;
    2838:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   LOROM_Image = TeensyROMC64_bin;
    283c:	4928      	ldr	r1, [pc, #160]	; (28e0 <SetUpMainMenuROM()+0xc8>)
   SetExROMAssert; //emulate 8k cart ROM
    283e:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
   HIROM_Image = NULL;
    2842:	4a28      	ldr	r2, [pc, #160]	; (28e4 <SetUpMainMenuROM()+0xcc>)
   LOROM_Image = TeensyROMC64_bin;
    2844:	4b28      	ldr	r3, [pc, #160]	; (28e8 <SetUpMainMenuROM()+0xd0>)
   HIROM_Image = NULL;
    2846:	6014      	str	r4, [r2, #0]
   LOROM_Image = TeensyROMC64_bin;
    2848:	6019      	str	r1, [r3, #0]
   LOROM_Mask = HIROM_Mask = 0x1fff;
    284a:	f641 73ff 	movw	r3, #8191	; 0x1fff
    284e:	4a27      	ldr	r2, [pc, #156]	; (28ec <SetUpMainMenuROM()+0xd4>)
   for(uint16_t cnt=0; cnt < NumCrtChips; cnt++) 
    2850:	4e27      	ldr	r6, [pc, #156]	; (28f0 <SetUpMainMenuROM()+0xd8>)
    2852:	4928      	ldr	r1, [pc, #160]	; (28f4 <SetUpMainMenuROM()+0xdc>)
    2854:	8013      	strh	r3, [r2, #0]
    2856:	800b      	strh	r3, [r1, #0]
   EmulateVicCycles = false;
    2858:	4a27      	ldr	r2, [pc, #156]	; (28f8 <SetUpMainMenuROM()+0xe0>)
    285a:	7833      	ldrb	r3, [r6, #0]
    285c:	7014      	strb	r4, [r2, #0]
    285e:	b1a3      	cbz	r3, 288a <SetUpMainMenuROM()+0x72>
    2860:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 2920 <SetUpMainMenuROM()+0x108>
    2864:	4625      	mov	r5, r4
      if((uint32_t)CrtChips[cnt].ChipROM >= 0x20200000) free(CrtChips[cnt].ChipROM);
    2866:	4f25      	ldr	r7, [pc, #148]	; (28fc <SetUpMainMenuROM()+0xe4>)
    2868:	e003      	b.n	2872 <SetUpMainMenuROM()+0x5a>
   for(uint16_t cnt=0; cnt < NumCrtChips; cnt++) 
    286a:	7832      	ldrb	r2, [r6, #0]
    286c:	b2ab      	uxth	r3, r5
    286e:	429a      	cmp	r2, r3
    2870:	d90b      	bls.n	288a <SetUpMainMenuROM()+0x72>
      if((uint32_t)CrtChips[cnt].ChipROM >= 0x20200000) free(CrtChips[cnt].ChipROM);
    2872:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
   for(uint16_t cnt=0; cnt < NumCrtChips; cnt++) 
    2876:	3501      	adds	r5, #1
    2878:	3403      	adds	r4, #3
      if((uint32_t)CrtChips[cnt].ChipROM >= 0x20200000) free(CrtChips[cnt].ChipROM);
    287a:	42b8      	cmp	r0, r7
    287c:	d9f5      	bls.n	286a <SetUpMainMenuROM()+0x52>
    287e:	f00c fc35 	bl	f0ec <free>
   for(uint16_t cnt=0; cnt < NumCrtChips; cnt++) 
    2882:	7832      	ldrb	r2, [r6, #0]
    2884:	b2ab      	uxth	r3, r5
    2886:	429a      	cmp	r2, r3
    2888:	d8f3      	bhi.n	2872 <SetUpMainMenuROM()+0x5a>
   if((IO1[rWRegCurrMenuWAIT] == rmtSD || IO1[rWRegCurrMenuWAIT] == rmtUSBDrive) && DriveDirMenu == NULL)
    288a:	4b1d      	ldr	r3, [pc, #116]	; (2900 <SetUpMainMenuROM()+0xe8>)
   NumCrtChips = 0;
    288c:	2200      	movs	r2, #0
   if((IO1[rWRegCurrMenuWAIT] == rmtSD || IO1[rWRegCurrMenuWAIT] == rmtUSBDrive) && DriveDirMenu == NULL)
    288e:	681b      	ldr	r3, [r3, #0]
   NumCrtChips = 0;
    2890:	7032      	strb	r2, [r6, #0]
   if((IO1[rWRegCurrMenuWAIT] == rmtSD || IO1[rWRegCurrMenuWAIT] == rmtUSBDrive) && DriveDirMenu == NULL)
    2892:	7a9a      	ldrb	r2, [r3, #10]
    2894:	b1c2      	cbz	r2, 28c8 <SetUpMainMenuROM()+0xb0>
    2896:	7a9a      	ldrb	r2, [r3, #10]
    2898:	2a02      	cmp	r2, #2
    289a:	d015      	beq.n	28c8 <SetUpMainMenuROM()+0xb0>
{ //called from above and directly from SetUpMainMenuROM
   //SetMIDIHandlersNULL();
   //MIDIRxIRQEnabled = false;
   //MIDIRxBytesToSend = 0;
   //rIORegMIDIStatus = 0;
   BigBufCount = 0;
    289c:	4b19      	ldr	r3, [pc, #100]	; (2904 <SetUpMainMenuROM()+0xec>)
    289e:	2000      	movs	r0, #0
   {
      Serial.println("***IOHandler out of range");
      return;
   }
   
   Serial.printf("Loading IO handler: %s\n", IOHandler[NewIOHandler]->Name);
    28a0:	4c19      	ldr	r4, [pc, #100]	; (2908 <SetUpMainMenuROM()+0xf0>)
   BigBufCount = 0;
    28a2:	8018      	strh	r0, [r3, #0]
   Serial.printf("Loading IO handler: %s\n", IOHandler[NewIOHandler]->Name);
    28a4:	4919      	ldr	r1, [pc, #100]	; (290c <SetUpMainMenuROM()+0xf4>)
    28a6:	6862      	ldr	r2, [r4, #4]
    28a8:	4819      	ldr	r0, [pc, #100]	; (2910 <SetUpMainMenuROM()+0xf8>)
    28aa:	f009 ff7d 	bl	c7a8 <Print::printf(char const*, ...)>
   
   if (IOHandler[NewIOHandler]->InitHndlr != NULL) IOHandler[NewIOHandler]->InitHndlr();
    28ae:	6863      	ldr	r3, [r4, #4]
    28b0:	695b      	ldr	r3, [r3, #20]
    28b2:	b103      	cbz	r3, 28b6 <SetUpMainMenuROM()+0x9e>
    28b4:	4798      	blx	r3
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    28b6:	f00c f86b 	bl	e990 <usb_serial_flush_output>
   
   Serial.flush();
   CurrentIOHandler = NewIOHandler;
    28ba:	2301      	movs	r3, #1
    28bc:	4915      	ldr	r1, [pc, #84]	; (2914 <SetUpMainMenuROM()+0xfc>)
   doReset = true;
    28be:	4a16      	ldr	r2, [pc, #88]	; (2918 <SetUpMainMenuROM()+0x100>)
    28c0:	700b      	strb	r3, [r1, #0]
    28c2:	7013      	strb	r3, [r2, #0]
}
    28c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    28c8:	4a14      	ldr	r2, [pc, #80]	; (291c <SetUpMainMenuROM()+0x104>)
    28ca:	6812      	ldr	r2, [r2, #0]
    28cc:	2a00      	cmp	r2, #0
    28ce:	d1e5      	bne.n	289c <SetUpMainMenuROM()+0x84>
      IO1[rWRegCurrMenuWAIT] = rmtTeensy;
    28d0:	2201      	movs	r2, #1
    28d2:	729a      	strb	r2, [r3, #10]
      MenuChange();
    28d4:	f7ff ff66 	bl	27a4 <MenuChange()>
    28d8:	e7e0      	b.n	289c <SetUpMainMenuROM()+0x84>
    28da:	bf00      	nop
    28dc:	42004000 	.word	0x42004000
    28e0:	20001df0 	.word	0x20001df0
    28e4:	2000dae0 	.word	0x2000dae0
    28e8:	2000dae8 	.word	0x2000dae8
    28ec:	2005e520 	.word	0x2005e520
    28f0:	2005e536 	.word	0x2005e536
    28f4:	2005e51e 	.word	0x2005e51e
    28f8:	2005e535 	.word	0x2005e535
    28fc:	201fffff 	.word	0x201fffff
    2900:	2000dae4 	.word	0x2000dae4
    2904:	2005e51c 	.word	0x2005e51c
    2908:	2000bd4c 	.word	0x2000bd4c
    290c:	20001b84 	.word	0x20001b84
    2910:	2000bfd8 	.word	0x2000bfd8
    2914:	2005e534 	.word	0x2005e534
    2918:	2000c987 	.word	0x2000c987
    291c:	2000d8b0 	.word	0x2000d8b0
    2920:	2000d2ac 	.word	0x2000d2ac

00002924 <UpDirectory()>:
{
    2924:	b538      	push	{r3, r4, r5, lr}
   return (strlen(DriveDirPath) == 1 && DriveDirPath[0] == '/');
    2926:	4c13      	ldr	r4, [pc, #76]	; (2974 <UpDirectory()+0x50>)
    2928:	4620      	mov	r0, r4
    292a:	f00e ffe9 	bl	11900 <strlen>
    292e:	2801      	cmp	r0, #1
    2930:	d014      	beq.n	295c <UpDirectory()+0x38>
   if(IO1[rWRegCurrMenuWAIT] == rmtTeensy) MenuChange(); //back to root, only 1 dir level
    2932:	4c11      	ldr	r4, [pc, #68]	; (2978 <UpDirectory()+0x54>)
    2934:	6823      	ldr	r3, [r4, #0]
    2936:	7a9b      	ldrb	r3, [r3, #10]
    2938:	2b01      	cmp	r3, #1
    293a:	d017      	beq.n	296c <UpDirectory()+0x48>
      char * LastSlash = strrchr(DriveDirPath, '/'); //find last slash
    293c:	212f      	movs	r1, #47	; 0x2f
    293e:	480d      	ldr	r0, [pc, #52]	; (2974 <UpDirectory()+0x50>)
    2940:	f00e fce0 	bl	11304 <strrchr>
      if (LastSlash == NULL) return;
    2944:	4603      	mov	r3, r0
    2946:	b140      	cbz	r0, 295a <UpDirectory()+0x36>
      LastSlash[0] = 0;  //terminate it there 
    2948:	2500      	movs	r5, #0
      LoadDirectory(&SD); 
    294a:	480c      	ldr	r0, [pc, #48]	; (297c <UpDirectory()+0x58>)
      LastSlash[0] = 0;  //terminate it there 
    294c:	701d      	strb	r5, [r3, #0]
      LoadDirectory(&SD); 
    294e:	f7ff fb75 	bl	203c <LoadDirectory(FS*)>
      IO1[rwRegCursorItemOnPg] = 0;
    2952:	6823      	ldr	r3, [r4, #0]
      IO1[rwRegPageNumber]     = 1;
    2954:	2201      	movs	r2, #1
      IO1[rwRegCursorItemOnPg] = 0;
    2956:	731d      	strb	r5, [r3, #12]
      IO1[rwRegPageNumber]     = 1;
    2958:	739a      	strb	r2, [r3, #14]
}
    295a:	bd38      	pop	{r3, r4, r5, pc}
    295c:	7823      	ldrb	r3, [r4, #0]
    295e:	2b2f      	cmp	r3, #47	; 0x2f
    2960:	d0fb      	beq.n	295a <UpDirectory()+0x36>
   if(IO1[rWRegCurrMenuWAIT] == rmtTeensy) MenuChange(); //back to root, only 1 dir level
    2962:	4c05      	ldr	r4, [pc, #20]	; (2978 <UpDirectory()+0x54>)
    2964:	6823      	ldr	r3, [r4, #0]
    2966:	7a9b      	ldrb	r3, [r3, #10]
    2968:	2b01      	cmp	r3, #1
    296a:	d1e7      	bne.n	293c <UpDirectory()+0x18>
}
    296c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   if(IO1[rWRegCurrMenuWAIT] == rmtTeensy) MenuChange(); //back to root, only 1 dir level
    2970:	f7ff bf18 	b.w	27a4 <MenuChange()>
    2974:	2000d8b4 	.word	0x2000d8b4
    2978:	2000dae4 	.word	0x2000dae4
    297c:	2005daf4 	.word	0x2005daf4

00002980 <SendMsgSerialStringBuf()>:
   SendMsgSerialStringBuf() ;
}

void SendMsgSerialStringBuf() 
{  //SerialStringBuf already populated
   Serial.printf("%s<--", SerialStringBuf);
    2980:	4a0f      	ldr	r2, [pc, #60]	; (29c0 <SendMsgSerialStringBuf()+0x40>)
    2982:	4910      	ldr	r1, [pc, #64]	; (29c4 <SendMsgSerialStringBuf()+0x44>)
    2984:	4810      	ldr	r0, [pc, #64]	; (29c8 <SendMsgSerialStringBuf()+0x48>)
{  //SerialStringBuf already populated
    2986:	b510      	push	{r4, lr}
   Serial.printf("%s<--", SerialStringBuf);
    2988:	f009 ff0e 	bl	c7a8 <Print::printf(char const*, ...)>
    298c:	f00c f800 	bl	e990 <usb_serial_flush_output>
   Serial.flush();
   IO1[rwRegStatus] = rsC64Message; //tell C64 there's a message
    2990:	4b0e      	ldr	r3, [pc, #56]	; (29cc <SendMsgSerialStringBuf()+0x4c>)
    2992:	20a5      	movs	r0, #165	; 0xa5
    2994:	4a0e      	ldr	r2, [pc, #56]	; (29d0 <SendMsgSerialStringBuf()+0x50>)
    2996:	6819      	ldr	r1, [r3, #0]
    2998:	7048      	strb	r0, [r1, #1]
   uint32_t beginWait = millis();
   //wait up to 3 sec for C64 to read message:
   while (millis()-beginWait<3000) if(IO1[rwRegStatus] == rsContinue) return;
    299a:	f640 30b7 	movw	r0, #2999	; 0xbb7
    299e:	6811      	ldr	r1, [r2, #0]
    29a0:	681c      	ldr	r4, [r3, #0]
    29a2:	e002      	b.n	29aa <SendMsgSerialStringBuf()+0x2a>
    29a4:	7863      	ldrb	r3, [r4, #1]
    29a6:	2bc3      	cmp	r3, #195	; 0xc3
    29a8:	d009      	beq.n	29be <SendMsgSerialStringBuf()+0x3e>
    29aa:	6813      	ldr	r3, [r2, #0]
    29ac:	1a5b      	subs	r3, r3, r1
    29ae:	4283      	cmp	r3, r0
    29b0:	d9f8      	bls.n	29a4 <SendMsgSerialStringBuf()+0x24>
   Serial.printf("\nTimeout!\n");
    29b2:	4908      	ldr	r1, [pc, #32]	; (29d4 <SendMsgSerialStringBuf()+0x54>)
    29b4:	4804      	ldr	r0, [pc, #16]	; (29c8 <SendMsgSerialStringBuf()+0x48>)
}
    29b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   Serial.printf("\nTimeout!\n");
    29ba:	f009 bef5 	b.w	c7a8 <Print::printf(char const*, ...)>
}
    29be:	bd10      	pop	{r4, pc}
    29c0:	2000bfe8 	.word	0x2000bfe8
    29c4:	20001c2c 	.word	0x20001c2c
    29c8:	2000bfd8 	.word	0x2000bfd8
    29cc:	2000dae4 	.word	0x2000dae4
    29d0:	2005e500 	.word	0x2005e500
    29d4:	20001c34 	.word	0x20001c34

000029d8 <SendMsgPrintfln(char const*, ...)>:
{
    29d8:	b40f      	push	{r0, r1, r2, r3}
    29da:	b510      	push	{r4, lr}
    29dc:	b082      	sub	sp, #8
   vsprintf(SerialStringBuf, Fmt, ap); 
    29de:	4c0f      	ldr	r4, [pc, #60]	; (2a1c <SendMsgPrintfln(char const*, ...)+0x44>)
{
    29e0:	aa04      	add	r2, sp, #16
   vsprintf(SerialStringBuf, Fmt, ap); 
    29e2:	4620      	mov	r0, r4
{
    29e4:	f852 1b04 	ldr.w	r1, [r2], #4
   va_start(ap,Fmt);
    29e8:	9201      	str	r2, [sp, #4]
   vsprintf(SerialStringBuf, Fmt, ap); 
    29ea:	f00e f9e9 	bl	10dc0 <vsprintf>
   for(uint16_t pos=strlen(SerialStringBuf)+2; pos>1; pos--) SerialStringBuf[pos]=SerialStringBuf[pos-2];
    29ee:	4620      	mov	r0, r4
    29f0:	f00e ff86 	bl	11900 <strlen>
    29f4:	1c83      	adds	r3, r0, #2
    29f6:	1c42      	adds	r2, r0, #1
    29f8:	b29b      	uxth	r3, r3
    29fa:	1a18      	subs	r0, r3, r0
    29fc:	1e81      	subs	r1, r0, #2
    29fe:	4420      	add	r0, r4
    2a00:	4421      	add	r1, r4
    2a02:	f00e fa5b 	bl	10ebc <memmove>
   SerialStringBuf[0] = '\r';
    2a06:	f640 230d 	movw	r3, #2573	; 0xa0d
    2a0a:	8023      	strh	r3, [r4, #0]
   SendMsgSerialStringBuf();
    2a0c:	f7ff ffb8 	bl	2980 <SendMsgSerialStringBuf()>
}
    2a10:	b002      	add	sp, #8
    2a12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2a16:	b004      	add	sp, #16
    2a18:	4770      	bx	lr
    2a1a:	bf00      	nop
    2a1c:	2000bfe8 	.word	0x2000bfe8

00002a20 <ParseCRTHeader(StructMenuItem*, unsigned char*, unsigned char*)>:
{  
    2a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a22:	4607      	mov	r7, r0
   SendMsgPrintfln("Parsing CRT File");
    2a24:	4833      	ldr	r0, [pc, #204]	; (2af4 <ParseCRTHeader(StructMenuItem*, unsigned char*, unsigned char*)+0xd4>)
{  
    2a26:	460d      	mov	r5, r1
    2a28:	4616      	mov	r6, r2
   uint8_t* CRT_Image = MyMenuItem->Code_Image;
    2a2a:	68bc      	ldr	r4, [r7, #8]
   SendMsgPrintfln("Parsing CRT File");
    2a2c:	f7ff ffd4 	bl	29d8 <SendMsgPrintfln(char const*, ...)>
   SendMsgPrintfln("CRT image size: %luK  $%08x", MyMenuItem->Size/1024, MyMenuItem->Size);
    2a30:	68fa      	ldr	r2, [r7, #12]
    2a32:	4831      	ldr	r0, [pc, #196]	; (2af8 <ParseCRTHeader(StructMenuItem*, unsigned char*, unsigned char*)+0xd8>)
    2a34:	0a91      	lsrs	r1, r2, #10
    2a36:	f7ff ffcf 	bl	29d8 <SendMsgPrintfln(char const*, ...)>
   if (memcmp(CRT_Image, "C128 CARTRIDGE", 14)==0) SendMsgPrintfln("C128 crt");
    2a3a:	220e      	movs	r2, #14
    2a3c:	492f      	ldr	r1, [pc, #188]	; (2afc <ParseCRTHeader(StructMenuItem*, unsigned char*, unsigned char*)+0xdc>)
    2a3e:	4620      	mov	r0, r4
    2a40:	f00e fa0c 	bl	10e5c <memcmp>
    2a44:	2800      	cmp	r0, #0
    2a46:	d051      	beq.n	2aec <ParseCRTHeader(StructMenuItem*, unsigned char*, unsigned char*)+0xcc>
   else if (memcmp(CRT_Image, "C64 CARTRIDGE", 13)==0) SendMsgPrintfln("C64 crt");
    2a48:	220d      	movs	r2, #13
    2a4a:	492d      	ldr	r1, [pc, #180]	; (2b00 <ParseCRTHeader(StructMenuItem*, unsigned char*, unsigned char*)+0xe0>)
    2a4c:	4620      	mov	r0, r4
    2a4e:	f00e fa05 	bl	10e5c <memcmp>
    2a52:	b998      	cbnz	r0, 2a7c <ParseCRTHeader(StructMenuItem*, unsigned char*, unsigned char*)+0x5c>
    2a54:	482b      	ldr	r0, [pc, #172]	; (2b04 <ParseCRTHeader(StructMenuItem*, unsigned char*, unsigned char*)+0xe4>)
    2a56:	f7ff ffbf 	bl	29d8 <SendMsgPrintfln(char const*, ...)>
      ((uint32_t)src[1]<<16) + 
    2a5a:	7c63      	ldrb	r3, [r4, #17]
      ((uint32_t)src[0]<<24) + 
    2a5c:	7c22      	ldrb	r2, [r4, #16]
      ((uint32_t)src[1]<<16) + 
    2a5e:	041b      	lsls	r3, r3, #16
      ((uint32_t)src[0]<<24) + 
    2a60:	eb03 6302 	add.w	r3, r3, r2, lsl #24
      ((uint32_t)src[3]    ) ;
    2a64:	7ce2      	ldrb	r2, [r4, #19]
    2a66:	4413      	add	r3, r2
      ((uint32_t)src[2]<<8 ) + 
    2a68:	7ca2      	ldrb	r2, [r4, #18]
      ((uint32_t)src[3]    ) ;
    2a6a:	eb03 2102 	add.w	r1, r3, r2, lsl #8
   if (toU32(CRT_Image+0x10) != CRT_MAIN_HDR_LEN) //Header Length
    2a6e:	2940      	cmp	r1, #64	; 0x40
    2a70:	d009      	beq.n	2a86 <ParseCRTHeader(StructMenuItem*, unsigned char*, unsigned char*)+0x66>
      SendMsgPrintfln("Unexp Header Len: $%08x", toU32(CRT_Image+0x10));
    2a72:	4825      	ldr	r0, [pc, #148]	; (2b08 <ParseCRTHeader(StructMenuItem*, unsigned char*, unsigned char*)+0xe8>)
    2a74:	f7ff ffb0 	bl	29d8 <SendMsgPrintfln(char const*, ...)>
      return false;
    2a78:	2000      	movs	r0, #0
}
    2a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SendMsgPrintfln("\"C64/128 CARTRIDGE\" not found");
    2a7c:	4823      	ldr	r0, [pc, #140]	; (2b0c <ParseCRTHeader(StructMenuItem*, unsigned char*, unsigned char*)+0xec>)
    2a7e:	f7ff ffab 	bl	29d8 <SendMsgPrintfln(char const*, ...)>
      return false;
    2a82:	2000      	movs	r0, #0
}
    2a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   SendMsgPrintfln("Ver: %02x.%02x", CRT_Image[0x14], CRT_Image[0x15]);
    2a86:	7d62      	ldrb	r2, [r4, #21]
    2a88:	7d21      	ldrb	r1, [r4, #20]
    2a8a:	4821      	ldr	r0, [pc, #132]	; (2b10 <ParseCRTHeader(StructMenuItem*, unsigned char*, unsigned char*)+0xf0>)
    2a8c:	f7ff ffa4 	bl	29d8 <SendMsgPrintfln(char const*, ...)>
      ((uint16_t)src[0]<<8 ) + 
    2a90:	7da3      	ldrb	r3, [r4, #22]
      ((uint16_t)src[1]    ) ;
    2a92:	7de1      	ldrb	r1, [r4, #23]
   SendMsgPrintfln("HW Type: %d ($%04x)", (int16_t)HWType, HWType);
    2a94:	481f      	ldr	r0, [pc, #124]	; (2b14 <ParseCRTHeader(StructMenuItem*, unsigned char*, unsigned char*)+0xf4>)
      ((uint16_t)src[1]    ) ;
    2a96:	eb01 2103 	add.w	r1, r1, r3, lsl #8
    2a9a:	b28f      	uxth	r7, r1
   SendMsgPrintfln("HW Type: %d ($%04x)", (int16_t)HWType, HWType);
    2a9c:	b209      	sxth	r1, r1
    2a9e:	463a      	mov	r2, r7
    2aa0:	f7ff ff9a 	bl	29d8 <SendMsgPrintfln(char const*, ...)>
   if (HWType != Cart_Generic) //leave IOH as default/user set for generic
    2aa4:	b19f      	cbz	r7, 2ace <ParseCRTHeader(StructMenuItem*, unsigned char*, unsigned char*)+0xae>
    2aa6:	2300      	movs	r3, #0
    2aa8:	4a1b      	ldr	r2, [pc, #108]	; (2b18 <ParseCRTHeader(StructMenuItem*, unsigned char*, unsigned char*)+0xf8>)
      if (HWType == HWID_IOH_Assoc[Num].HWID)
    2aaa:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
    2aae:	42b9      	cmp	r1, r7
    2ab0:	d007      	beq.n	2ac2 <ParseCRTHeader(StructMenuItem*, unsigned char*, unsigned char*)+0xa2>
   while (Num < sizeof(HWID_IOH_Assoc)/sizeof(HWID_IOH_Assoc[0]))
    2ab2:	3301      	adds	r3, #1
    2ab4:	2b09      	cmp	r3, #9
    2ab6:	d1f8      	bne.n	2aaa <ParseCRTHeader(StructMenuItem*, unsigned char*, unsigned char*)+0x8a>
         SendMsgPrintfln("Unsupported HW Type (so far)");
    2ab8:	4818      	ldr	r0, [pc, #96]	; (2b1c <ParseCRTHeader(StructMenuItem*, unsigned char*, unsigned char*)+0xfc>)
    2aba:	f7ff ff8d 	bl	29d8 <SendMsgPrintfln(char const*, ...)>
         return false;         
    2abe:	2000      	movs	r0, #0
}
    2ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
         IO1[rwRegNextIOHndlr] = HWID_IOH_Assoc[Num].IOH;
    2ac2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    2ac6:	4b16      	ldr	r3, [pc, #88]	; (2b20 <ParseCRTHeader(StructMenuItem*, unsigned char*, unsigned char*)+0x100>)
    2ac8:	7892      	ldrb	r2, [r2, #2]
    2aca:	681b      	ldr	r3, [r3, #0]
    2acc:	74da      	strb	r2, [r3, #19]
   *EXROM = CRT_Image[0x18];
    2ace:	7e23      	ldrb	r3, [r4, #24]
   SendMsgPrintfln("EXROM: %d   GAME: %d", *EXROM, *GAME);
    2ad0:	4814      	ldr	r0, [pc, #80]	; (2b24 <ParseCRTHeader(StructMenuItem*, unsigned char*, unsigned char*)+0x104>)
   *EXROM = CRT_Image[0x18];
    2ad2:	702b      	strb	r3, [r5, #0]
   *GAME = CRT_Image[0x19];
    2ad4:	7e62      	ldrb	r2, [r4, #25]
    2ad6:	7032      	strb	r2, [r6, #0]
   SendMsgPrintfln("EXROM: %d   GAME: %d", *EXROM, *GAME);
    2ad8:	7829      	ldrb	r1, [r5, #0]
    2ada:	f7ff ff7d 	bl	29d8 <SendMsgPrintfln(char const*, ...)>
   SendMsgPrintfln("Name: %s", (CRT_Image+0x20));
    2ade:	f104 0120 	add.w	r1, r4, #32
    2ae2:	4811      	ldr	r0, [pc, #68]	; (2b28 <ParseCRTHeader(StructMenuItem*, unsigned char*, unsigned char*)+0x108>)
    2ae4:	f7ff ff78 	bl	29d8 <SendMsgPrintfln(char const*, ...)>
   return true;
    2ae8:	2001      	movs	r0, #1
}
    2aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   if (memcmp(CRT_Image, "C128 CARTRIDGE", 14)==0) SendMsgPrintfln("C128 crt");
    2aec:	480f      	ldr	r0, [pc, #60]	; (2b2c <ParseCRTHeader(StructMenuItem*, unsigned char*, unsigned char*)+0x10c>)
    2aee:	f7ff ff73 	bl	29d8 <SendMsgPrintfln(char const*, ...)>
    2af2:	e7b2      	b.n	2a5a <ParseCRTHeader(StructMenuItem*, unsigned char*, unsigned char*)+0x3a>
    2af4:	20001868 	.word	0x20001868
    2af8:	2000187c 	.word	0x2000187c
    2afc:	20001898 	.word	0x20001898
    2b00:	200018b4 	.word	0x200018b4
    2b04:	200018c4 	.word	0x200018c4
    2b08:	200018ec 	.word	0x200018ec
    2b0c:	200018cc 	.word	0x200018cc
    2b10:	20001904 	.word	0x20001904
    2b14:	20001914 	.word	0x20001914
    2b18:	2000bd28 	.word	0x2000bd28
    2b1c:	20001928 	.word	0x20001928
    2b20:	2000dae4 	.word	0x2000dae4
    2b24:	20001948 	.word	0x20001948
    2b28:	20001960 	.word	0x20001960
    2b2c:	200018a8 	.word	0x200018a8

00002b30 <ParseChipHeader(unsigned char*)>:
{
    2b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   if (memcmp(ChipHeader, "CHIP", 4)!=0)
    2b34:	7803      	ldrb	r3, [r0, #0]
    2b36:	2b43      	cmp	r3, #67	; 0x43
    2b38:	d007      	beq.n	2b4a <ParseChipHeader(unsigned char*)+0x1a>
      SendMsgPrintfln("\"CHIP\" not found in #%d", NumCrtChips);
    2b3a:	4b3e      	ldr	r3, [pc, #248]	; (2c34 <ParseChipHeader(unsigned char*)+0x104>)
    2b3c:	483e      	ldr	r0, [pc, #248]	; (2c38 <ParseChipHeader(unsigned char*)+0x108>)
    2b3e:	7819      	ldrb	r1, [r3, #0]
    2b40:	f7ff ff4a 	bl	29d8 <SendMsgPrintfln(char const*, ...)>
      return false;
    2b44:	2000      	movs	r0, #0
}
    2b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   if (memcmp(ChipHeader, "CHIP", 4)!=0)
    2b4a:	7843      	ldrb	r3, [r0, #1]
    2b4c:	1c42      	adds	r2, r0, #1
    2b4e:	2b48      	cmp	r3, #72	; 0x48
    2b50:	d1f3      	bne.n	2b3a <ParseChipHeader(unsigned char*)+0xa>
    2b52:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    2b56:	2b49      	cmp	r3, #73	; 0x49
    2b58:	d1ef      	bne.n	2b3a <ParseChipHeader(unsigned char*)+0xa>
    2b5a:	7853      	ldrb	r3, [r2, #1]
    2b5c:	2b50      	cmp	r3, #80	; 0x50
    2b5e:	d1ec      	bne.n	2b3a <ParseChipHeader(unsigned char*)+0xa>
   Printf_dbg(" #%03d $%08x $%04x $%04x $%04x $%04x in RAM", 
    2b60:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 2c34 <ParseChipHeader(unsigned char*)+0x104>
      ((uint16_t)src[0]<<8 ) + 
    2b64:	7a82      	ldrb	r2, [r0, #10]
      ((uint16_t)src[1]    ) ;
    2b66:	7ac3      	ldrb	r3, [r0, #11]
   Printf_dbg(" #%03d $%08x $%04x $%04x $%04x $%04x in RAM", 
    2b68:	f899 7000 	ldrb.w	r7, [r9]
      ((uint16_t)src[1]    ) ;
    2b6c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   CrtChips[NumCrtChips].BankNum = toU16(ChipHeader+0x0A);
    2b70:	4e32      	ldr	r6, [pc, #200]	; (2c3c <ParseChipHeader(unsigned char*)+0x10c>)
    2b72:	eb07 0247 	add.w	r2, r7, r7, lsl #1
    2b76:	007c      	lsls	r4, r7, #1
    2b78:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    2b7c:	8113      	strh	r3, [r2, #8]
      ((uint16_t)src[0]<<8 ) + 
    2b7e:	7b01      	ldrb	r1, [r0, #12]
      ((uint16_t)src[1]    ) ;
    2b80:	7b43      	ldrb	r3, [r0, #13]
    2b82:	eb03 2301 	add.w	r3, r3, r1, lsl #8
   CrtChips[NumCrtChips].LoadAddress = toU16(ChipHeader+0x0C);
    2b86:	8093      	strh	r3, [r2, #4]
      ((uint16_t)src[0]<<8 ) + 
    2b88:	7b81      	ldrb	r1, [r0, #14]
      ((uint16_t)src[1]    ) ;
    2b8a:	7bc3      	ldrb	r3, [r0, #15]
    2b8c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
    2b90:	b298      	uxth	r0, r3
   CrtChips[NumCrtChips].ROMSize = toU16(ChipHeader+0x0E);
    2b92:	80d0      	strh	r0, [r2, #6]
   if (NumCrtChips == 0) ptrRAM_ImageEnd = RAM_Image; //init RAM1 Buffer pointer
    2b94:	b9b7      	cbnz	r7, 2bc4 <ParseChipHeader(unsigned char*)+0x94>
    2b96:	4b2a      	ldr	r3, [pc, #168]	; (2c40 <ParseChipHeader(unsigned char*)+0x110>)
    2b98:	492a      	ldr	r1, [pc, #168]	; (2c44 <ParseChipHeader(unsigned char*)+0x114>)
    2b9a:	461a      	mov	r2, r3
    2b9c:	600b      	str	r3, [r1, #0]
   if (CrtChips[NumCrtChips].ROMSize + (uint32_t)ptrRAM_ImageEnd - (uint32_t)RAM_Image <= RAM_ImageSize)
    2b9e:	1ac3      	subs	r3, r0, r3
    2ba0:	4413      	add	r3, r2
    2ba2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
    2ba6:	d915      	bls.n	2bd4 <ParseChipHeader(unsigned char*)+0xa4>
         if (DriveDirMenu == NULL)
    2ba8:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 2c50 <ParseChipHeader(unsigned char*)+0x120>
      free(DriveDirMenu); DriveDirMenu = NULL;
    2bac:	f04f 0a00 	mov.w	sl, #0
      for(uint16_t Num=0; Num < NumDrvDirMenuItems; Num++) free(DriveDirMenu[Num].Name);
    2bb0:	4d25      	ldr	r5, [pc, #148]	; (2c48 <ParseChipHeader(unsigned char*)+0x118>)
      while(NULL == (CrtChips[NumCrtChips].ChipROM = (uint8_t*)malloc(CrtChips[NumCrtChips].ROMSize)))
    2bb2:	443c      	add	r4, r7
    2bb4:	f00c fa92 	bl	f0dc <malloc>
    2bb8:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
    2bbc:	b190      	cbz	r0, 2be4 <ParseChipHeader(unsigned char*)+0xb4>
   return true;
    2bbe:	2001      	movs	r0, #1
}
    2bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   if (CrtChips[NumCrtChips].ROMSize + (uint32_t)ptrRAM_ImageEnd - (uint32_t)RAM_Image <= RAM_ImageSize)
    2bc4:	491f      	ldr	r1, [pc, #124]	; (2c44 <ParseChipHeader(unsigned char*)+0x114>)
    2bc6:	4b1e      	ldr	r3, [pc, #120]	; (2c40 <ParseChipHeader(unsigned char*)+0x110>)
    2bc8:	680a      	ldr	r2, [r1, #0]
    2bca:	1ac3      	subs	r3, r0, r3
    2bcc:	4413      	add	r3, r2
    2bce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
    2bd2:	d8e9      	bhi.n	2ba8 <ParseChipHeader(unsigned char*)+0x78>
      ptrRAM_ImageEnd += CrtChips[NumCrtChips].ROMSize;
    2bd4:	1813      	adds	r3, r2, r0
      CrtChips[NumCrtChips].ChipROM = ptrRAM_ImageEnd;
    2bd6:	443c      	add	r4, r7
   return true;
    2bd8:	2001      	movs	r0, #1
      CrtChips[NumCrtChips].ChipROM = ptrRAM_ImageEnd;
    2bda:	f846 2024 	str.w	r2, [r6, r4, lsl #2]
      ptrRAM_ImageEnd += CrtChips[NumCrtChips].ROMSize;
    2bde:	600b      	str	r3, [r1, #0]
}
    2be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
         if (DriveDirMenu == NULL)
    2be4:	f8d8 4000 	ldr.w	r4, [r8]
    2be8:	b1ec      	cbz	r4, 2c26 <ParseChipHeader(unsigned char*)+0xf6>
      for(uint16_t Num=0; Num < NumDrvDirMenuItems; Num++) free(DriveDirMenu[Num].Name);
    2bea:	882b      	ldrh	r3, [r5, #0]
    2bec:	4604      	mov	r4, r0
    2bee:	b163      	cbz	r3, 2c0a <ParseChipHeader(unsigned char*)+0xda>
    2bf0:	b2a2      	uxth	r2, r4
    2bf2:	f8d8 3000 	ldr.w	r3, [r8]
    2bf6:	3401      	adds	r4, #1
    2bf8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    2bfc:	6858      	ldr	r0, [r3, #4]
    2bfe:	f00c fa75 	bl	f0ec <free>
    2c02:	882a      	ldrh	r2, [r5, #0]
    2c04:	b2a3      	uxth	r3, r4
    2c06:	429a      	cmp	r2, r3
    2c08:	d8f2      	bhi.n	2bf0 <ParseChipHeader(unsigned char*)+0xc0>
      free(DriveDirMenu); DriveDirMenu = NULL;
    2c0a:	f8d8 0000 	ldr.w	r0, [r8]
    2c0e:	f00c fa6d 	bl	f0ec <free>
      while(NULL == (CrtChips[NumCrtChips].ChipROM = (uint8_t*)malloc(CrtChips[NumCrtChips].ROMSize)))
    2c12:	f899 7000 	ldrb.w	r7, [r9]
    2c16:	230c      	movs	r3, #12
      free(DriveDirMenu); DriveDirMenu = NULL;
    2c18:	f8c8 a000 	str.w	sl, [r8]
    2c1c:	007c      	lsls	r4, r7, #1
      while(NULL == (CrtChips[NumCrtChips].ChipROM = (uint8_t*)malloc(CrtChips[NumCrtChips].ROMSize)))
    2c1e:	fb03 6307 	mla	r3, r3, r7, r6
    2c22:	88d8      	ldrh	r0, [r3, #6]
}
    2c24:	e7c5      	b.n	2bb2 <ParseChipHeader(unsigned char*)+0x82>
            SendMsgPrintfln("Not enough room: %d", NumCrtChips); 
    2c26:	4809      	ldr	r0, [pc, #36]	; (2c4c <ParseChipHeader(unsigned char*)+0x11c>)
    2c28:	4639      	mov	r1, r7
    2c2a:	f7ff fed5 	bl	29d8 <SendMsgPrintfln(char const*, ...)>
            return false;         
    2c2e:	4620      	mov	r0, r4
    2c30:	e789      	b.n	2b46 <ParseChipHeader(unsigned char*)+0x16>
    2c32:	bf00      	nop
    2c34:	2005e536 	.word	0x2005e536
    2c38:	20001a68 	.word	0x20001a68
    2c3c:	2000d2ac 	.word	0x2000d2ac
    2c40:	2000daf4 	.word	0x2000daf4
    2c44:	2005e068 	.word	0x2005e068
    2c48:	2005e522 	.word	0x2005e522
    2c4c:	20001a80 	.word	0x20001a80
    2c50:	2000d8b0 	.word	0x2000d8b0

00002c54 <SetTypeFromCRT(StructMenuItem*, unsigned char, unsigned char)>:
{
    2c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   SendMsgPrintfln("%d Chip(s) found/loaded", NumCrtChips); 
    2c56:	4b23      	ldr	r3, [pc, #140]	; (2ce4 <SetTypeFromCRT(StructMenuItem*, unsigned char, unsigned char)+0x90>)
{
    2c58:	4605      	mov	r5, r0
    2c5a:	460e      	mov	r6, r1
   SendMsgPrintfln("%d Chip(s) found/loaded", NumCrtChips); 
    2c5c:	4822      	ldr	r0, [pc, #136]	; (2ce8 <SetTypeFromCRT(StructMenuItem*, unsigned char, unsigned char)+0x94>)
    2c5e:	7819      	ldrb	r1, [r3, #0]
{
    2c60:	4614      	mov	r4, r2
   SendMsgPrintfln("%d Chip(s) found/loaded", NumCrtChips); 
    2c62:	f7ff feb9 	bl	29d8 <SendMsgPrintfln(char const*, ...)>
   MyMenuItem->Code_Image = CrtChips[0].ChipROM;
    2c66:	4b21      	ldr	r3, [pc, #132]	; (2cec <SetTypeFromCRT(StructMenuItem*, unsigned char, unsigned char)+0x98>)
   if(CrtChips[0].LoadAddress == 0x8000 && CrtChips[0].ROMSize == 0x2000) 
    2c68:	4921      	ldr	r1, [pc, #132]	; (2cf0 <SetTypeFromCRT(StructMenuItem*, unsigned char, unsigned char)+0x9c>)
   MyMenuItem->Code_Image = CrtChips[0].ChipROM;
    2c6a:	681a      	ldr	r2, [r3, #0]
    2c6c:	60aa      	str	r2, [r5, #8]
   if(CrtChips[0].LoadAddress == 0x8000 && CrtChips[0].ROMSize == 0x2000) 
    2c6e:	685a      	ldr	r2, [r3, #4]
    2c70:	428a      	cmp	r2, r1
    2c72:	d02f      	beq.n	2cd4 <SetTypeFromCRT(StructMenuItem*, unsigned char, unsigned char)+0x80>
   if(                                     CrtChips[0].ROMSize == 0x2000 && EXROM==1 && GAME==0)
    2c74:	88d9      	ldrh	r1, [r3, #6]
    2c76:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
    2c7a:	d00e      	beq.n	2c9a <SetTypeFromCRT(StructMenuItem*, unsigned char, unsigned char)+0x46>
   if(CrtChips[0].LoadAddress == 0x8000                                  && EXROM==0 && GAME==0) //Zaxxon ROMSize is 0x1000, all others 0x4000
    2c7c:	889b      	ldrh	r3, [r3, #4]
    2c7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    2c82:	d017      	beq.n	2cb4 <SetTypeFromCRT(StructMenuItem*, unsigned char, unsigned char)+0x60>
   if(CrtChips[0].LoadAddress == 0x0000 && CrtChips[0].ROMSize == 0x2000 && EXROM==0 && GAME==0)
    2c84:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
    2c88:	d101      	bne.n	2c8e <SetTypeFromCRT(StructMenuItem*, unsigned char, unsigned char)+0x3a>
    2c8a:	4334      	orrs	r4, r6
    2c8c:	d01b      	beq.n	2cc6 <SetTypeFromCRT(StructMenuItem*, unsigned char, unsigned char)+0x72>
   SendMsgPrintfln("HW config unknown");
    2c8e:	4819      	ldr	r0, [pc, #100]	; (2cf4 <SetTypeFromCRT(StructMenuItem*, unsigned char, unsigned char)+0xa0>)
   return false;
    2c90:	2700      	movs	r7, #0
   SendMsgPrintfln("HW config unknown");
    2c92:	f7ff fea1 	bl	29d8 <SendMsgPrintfln(char const*, ...)>
}
    2c96:	4638      	mov	r0, r7
    2c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   if(                                     CrtChips[0].ROMSize == 0x2000 && EXROM==1 && GAME==0)
    2c9a:	2e01      	cmp	r6, #1
    2c9c:	bf08      	it	eq
    2c9e:	2c00      	cmpeq	r4, #0
    2ca0:	bf0c      	ite	eq
    2ca2:	2701      	moveq	r7, #1
    2ca4:	2700      	movne	r7, #0
    2ca6:	d1e9      	bne.n	2c7c <SetTypeFromCRT(StructMenuItem*, unsigned char, unsigned char)+0x28>
      MyMenuItem->ItemType = rtBin8kHi;
    2ca8:	2303      	movs	r3, #3
      SendMsgPrintfln(" 8kHi/Ultimax config");
    2caa:	4813      	ldr	r0, [pc, #76]	; (2cf8 <SetTypeFromCRT(StructMenuItem*, unsigned char, unsigned char)+0xa4>)
      MyMenuItem->ItemType = rtBin8kHi;
    2cac:	702b      	strb	r3, [r5, #0]
      SendMsgPrintfln(" 8kHi/Ultimax config");
    2cae:	f7ff fe93 	bl	29d8 <SendMsgPrintfln(char const*, ...)>
      return true;
    2cb2:	e7f0      	b.n	2c96 <SetTypeFromCRT(StructMenuItem*, unsigned char, unsigned char)+0x42>
   if(CrtChips[0].LoadAddress == 0x8000                                  && EXROM==0 && GAME==0) //Zaxxon ROMSize is 0x1000, all others 0x4000
    2cb4:	4334      	orrs	r4, r6
    2cb6:	d1ea      	bne.n	2c8e <SetTypeFromCRT(StructMenuItem*, unsigned char, unsigned char)+0x3a>
      MyMenuItem->ItemType = rtBin16k;
    2cb8:	2302      	movs	r3, #2
      SendMsgPrintfln(" 16k config");
    2cba:	4810      	ldr	r0, [pc, #64]	; (2cfc <SetTypeFromCRT(StructMenuItem*, unsigned char, unsigned char)+0xa8>)
      return true;
    2cbc:	2701      	movs	r7, #1
      MyMenuItem->ItemType = rtBin16k;
    2cbe:	702b      	strb	r3, [r5, #0]
      SendMsgPrintfln(" 16k config");
    2cc0:	f7ff fe8a 	bl	29d8 <SendMsgPrintfln(char const*, ...)>
      return true;
    2cc4:	e7e7      	b.n	2c96 <SetTypeFromCRT(StructMenuItem*, unsigned char, unsigned char)+0x42>
      MyMenuItem->ItemType = rtBinC128;
    2cc6:	2305      	movs	r3, #5
      SendMsgPrintfln(" C128 config");
    2cc8:	480d      	ldr	r0, [pc, #52]	; (2d00 <SetTypeFromCRT(StructMenuItem*, unsigned char, unsigned char)+0xac>)
      return true;
    2cca:	2701      	movs	r7, #1
      MyMenuItem->ItemType = rtBinC128;
    2ccc:	702b      	strb	r3, [r5, #0]
      SendMsgPrintfln(" C128 config");
    2cce:	f7ff fe83 	bl	29d8 <SendMsgPrintfln(char const*, ...)>
      return true;
    2cd2:	e7e0      	b.n	2c96 <SetTypeFromCRT(StructMenuItem*, unsigned char, unsigned char)+0x42>
      MyMenuItem->ItemType = rtBin8kLo;
    2cd4:	2304      	movs	r3, #4
      return true;
    2cd6:	2701      	movs	r7, #1
      SendMsgPrintfln(" 8kLo config");
    2cd8:	480a      	ldr	r0, [pc, #40]	; (2d04 <SetTypeFromCRT(StructMenuItem*, unsigned char, unsigned char)+0xb0>)
      MyMenuItem->ItemType = rtBin8kLo;
    2cda:	702b      	strb	r3, [r5, #0]
      SendMsgPrintfln(" 8kLo config");
    2cdc:	f7ff fe7c 	bl	29d8 <SendMsgPrintfln(char const*, ...)>
}
    2ce0:	4638      	mov	r0, r7
    2ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2ce4:	2005e536 	.word	0x2005e536
    2ce8:	2000196c 	.word	0x2000196c
    2cec:	2000d2ac 	.word	0x2000d2ac
    2cf0:	20008000 	.word	0x20008000
    2cf4:	200019c8 	.word	0x200019c8
    2cf8:	20001994 	.word	0x20001994
    2cfc:	200019ac 	.word	0x200019ac
    2d00:	200019b8 	.word	0x200019b8
    2d04:	20001984 	.word	0x20001984

00002d08 <LoadFile(StructMenuItem*, FS*)>:
{
    2d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   return (strlen(DriveDirPath) == 1 && DriveDirPath[0] == '/');
    2d0c:	4c90      	ldr	r4, [pc, #576]	; (2f50 <LoadFile(StructMenuItem*, FS*)+0x248>)
{
    2d0e:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
    2d12:	4682      	mov	sl, r0
    2d14:	460d      	mov	r5, r1
   return (strlen(DriveDirPath) == 1 && DriveDirPath[0] == '/');
    2d16:	4620      	mov	r0, r4
   if (PathIsRoot()) sprintf(FullFilePath, "%s%s", DriveDirPath, MyMenuItem->Name);  // at root
    2d18:	ae1d      	add	r6, sp, #116	; 0x74
   return (strlen(DriveDirPath) == 1 && DriveDirPath[0] == '/');
    2d1a:	f00e fdf1 	bl	11900 <strlen>
    2d1e:	2801      	cmp	r0, #1
    2d20:	f000 824f 	beq.w	31c2 <LoadFile(StructMenuItem*, FS*)+0x4ba>
   else sprintf(FullFilePath, "%s/%s", DriveDirPath, MyMenuItem->Name);
    2d24:	f8da 3004 	ldr.w	r3, [sl, #4]
    2d28:	4630      	mov	r0, r6
    2d2a:	4a89      	ldr	r2, [pc, #548]	; (2f50 <LoadFile(StructMenuItem*, FS*)+0x248>)
    2d2c:	4989      	ldr	r1, [pc, #548]	; (2f54 <LoadFile(StructMenuItem*, FS*)+0x24c>)
    2d2e:	f00d ff7f 	bl	10c30 <sprintf>
   SendMsgPrintfln("Loading:\r\n%s", FullFilePath);
    2d32:	4631      	mov	r1, r6
    2d34:	4888      	ldr	r0, [pc, #544]	; (2f58 <LoadFile(StructMenuItem*, FS*)+0x250>)
    2d36:	f7ff fe4f 	bl	29d8 <SendMsgPrintfln(char const*, ...)>
   File myFile = sourceFS->open(FullFilePath, FILE_READ);
    2d3a:	682a      	ldr	r2, [r5, #0]
    2d3c:	4b87      	ldr	r3, [pc, #540]	; (2f5c <LoadFile(StructMenuItem*, FS*)+0x254>)
    2d3e:	6817      	ldr	r7, [r2, #0]
    2d40:	429f      	cmp	r7, r3
    2d42:	f040 825a 	bne.w	31fa <LoadFile(StructMenuItem*, FS*)+0x4f2>
		SDFAT_FILE file = sdfs.open(filepath, flags);
    2d46:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
    2d4a:	2300      	movs	r3, #0
    2d4c:	4632      	mov	r2, r6
    2d4e:	1d29      	adds	r1, r5, #4
    2d50:	4658      	mov	r0, fp
    2d52:	f006 fe69 	bl	9a28 <FsVolume::open(char const*, int)>
    2d56:	f8db 3048 	ldr.w	r3, [fp, #72]	; 0x48
    2d5a:	2b00      	cmp	r3, #0
    2d5c:	f000 823d 	beq.w	31da <LoadFile(StructMenuItem*, FS*)+0x4d2>
		if (file) return File(new SDFile(file));
    2d60:	205c      	movs	r0, #92	; 0x5c
class FileImpl {
    2d62:	2600      	movs	r6, #0
    2d64:	f00a fc8e 	bl	d684 <operator new(unsigned int)>
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    2d68:	4b7d      	ldr	r3, [pc, #500]	; (2f60 <LoadFile(StructMenuItem*, FS*)+0x258>)
    2d6a:	af0d      	add	r7, sp, #52	; 0x34
		if (file) return File(new SDFile(file));
    2d6c:	4605      	mov	r5, r0
	constexpr Print() : write_error(0) {}
    2d6e:	ac04      	add	r4, sp, #16
    2d70:	4639      	mov	r1, r7
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    2d72:	e9c0 3600 	strd	r3, r6, [r0]
class Print
    2d76:	f8db 3004 	ldr.w	r3, [fp, #4]
    2d7a:	3018      	adds	r0, #24
    2d7c:	f840 3c0c 	str.w	r3, [r0, #-12]
class Stream : public Print
    2d80:	4b78      	ldr	r3, [pc, #480]	; (2f64 <LoadFile(StructMenuItem*, FS*)+0x25c>)
    2d82:	f840 3c10 	str.w	r3, [r0, #-16]
    2d86:	f8db 3008 	ldr.w	r3, [fp, #8]
    2d8a:	f840 3c08 	str.w	r3, [r0, #-8]
    2d8e:	f89b 300c 	ldrb.w	r3, [fp, #12]
    2d92:	f800 3c04 	strb.w	r3, [r0, #-4]
    2d96:	f006 fceb 	bl	9770 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		if (f) f->refcount++;
    2d9a:	686b      	ldr	r3, [r5, #4]
    2d9c:	65ae      	str	r6, [r5, #88]	; 0x58
    2d9e:	3301      	adds	r3, #1
	constexpr Print() : write_error(0) {}
    2da0:	6066      	str	r6, [r4, #4]
	constexpr Stream() : _timeout(1000), read_error(0) {}
    2da2:	7326      	strb	r6, [r4, #12]
    2da4:	606b      	str	r3, [r5, #4]
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    2da6:	4b70      	ldr	r3, [pc, #448]	; (2f68 <LoadFile(StructMenuItem*, FS*)+0x260>)
		f = file;
    2da8:	6125      	str	r5, [r4, #16]
    2daa:	60ab      	str	r3, [r5, #8]
    2dac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    2db0:	60a3      	str	r3, [r4, #8]
	File(FileImpl *file) {
    2db2:	4b6e      	ldr	r3, [pc, #440]	; (2f6c <LoadFile(StructMenuItem*, FS*)+0x264>)
    2db4:	6023      	str	r3, [r4, #0]
    2db6:	4b6e      	ldr	r3, [pc, #440]	; (2f70 <LoadFile(StructMenuItem*, FS*)+0x268>)
  ~FsBaseFile() {close();}
    2db8:	4638      	mov	r0, r7
    2dba:	f8cb 3000 	str.w	r3, [fp]
    2dbe:	f006 fd19 	bl	97f4 <FsBaseFile::close()>
   if (!myFile) 
    2dc2:	6920      	ldr	r0, [r4, #16]
		return (f) ? f->isOpen() : false;
    2dc4:	2800      	cmp	r0, #0
    2dc6:	f000 81b7 	beq.w	3138 <LoadFile(StructMenuItem*, FS*)+0x430>
    2dca:	6802      	ldr	r2, [r0, #0]
    2dcc:	4969      	ldr	r1, [pc, #420]	; (2f74 <LoadFile(StructMenuItem*, FS*)+0x26c>)
    2dce:	6b13      	ldr	r3, [r2, #48]	; 0x30
    2dd0:	428b      	cmp	r3, r1
    2dd2:	f040 81ad 	bne.w	3130 <LoadFile(StructMenuItem*, FS*)+0x428>
  bool isOpen() const {return m_fFile || m_xFile;}
    2dd6:	6d03      	ldr	r3, [r0, #80]	; 0x50
    2dd8:	2b00      	cmp	r3, #0
    2dda:	f000 8228 	beq.w	322e <LoadFile(StructMenuItem*, FS*)+0x526>
		return (f) ? f->size() : 0;
    2dde:	6a92      	ldr	r2, [r2, #40]	; 0x28
    2de0:	4965      	ldr	r1, [pc, #404]	; (2f78 <LoadFile(StructMenuItem*, FS*)+0x270>)
    2de2:	428a      	cmp	r2, r1
    2de4:	f040 843a 	bne.w	365c <LoadFile(StructMenuItem*, FS*)+0x954>
  uint32_t fileSize() const {return m_fileSize;}
    2de8:	69d8      	ldr	r0, [r3, #28]
   if (MyMenuItem->ItemType == rtFileCrt)
    2dea:	f89a 3000 	ldrb.w	r3, [sl]
   MyMenuItem->Size = myFile.size();
    2dee:	f8ca 000c 	str.w	r0, [sl, #12]
   if (MyMenuItem->ItemType == rtFileCrt)
    2df2:	2b08      	cmp	r3, #8
    2df4:	f000 8276 	beq.w	32e4 <LoadFile(StructMenuItem*, FS*)+0x5dc>
      if (MyMenuItem->Size > RAM_ImageSize)
    2df8:	f5b0 2fa0 	cmp.w	r0, #327680	; 0x50000
    2dfc:	f200 8238 	bhi.w	3270 <LoadFile(StructMenuItem*, FS*)+0x568>
		return (f) ? f->available() : 0;
    2e00:	6923      	ldr	r3, [r4, #16]
    2e02:	2b00      	cmp	r3, #0
    2e04:	f000 8596 	beq.w	3934 <LoadFile(StructMenuItem*, FS*)+0xc2c>
    2e08:	4a5c      	ldr	r2, [pc, #368]	; (2f7c <LoadFile(StructMenuItem*, FS*)+0x274>)
   for(uint16_t cnt=0; cnt < NumCrtChips; cnt++) 
    2e0a:	2700      	movs	r7, #0
    2e0c:	4d5c      	ldr	r5, [pc, #368]	; (2f80 <LoadFile(StructMenuItem*, FS*)+0x278>)
    2e0e:	4e5d      	ldr	r6, [pc, #372]	; (2f84 <LoadFile(StructMenuItem*, FS*)+0x27c>)
    2e10:	4690      	mov	r8, r2
    2e12:	681a      	ldr	r2, [r3, #0]
    2e14:	6912      	ldr	r2, [r2, #16]
    2e16:	4542      	cmp	r2, r8
    2e18:	f040 817c 	bne.w	3114 <LoadFile(StructMenuItem*, FS*)+0x40c>
    return m_fFile ? m_fFile->available() :
    2e1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    2e1e:	2a00      	cmp	r2, #0
    2e20:	f000 80b8 	beq.w	2f94 <LoadFile(StructMenuItem*, FS*)+0x28c>
    return isFile() ? fileSize() - curPosition() : 0;
    2e24:	7813      	ldrb	r3, [r2, #0]
    2e26:	0719      	lsls	r1, r3, #28
    2e28:	f140 80bb 	bpl.w	2fa2 <LoadFile(StructMenuItem*, FS*)+0x29a>
    2e2c:	69d0      	ldr	r0, [r2, #28]
    2e2e:	6953      	ldr	r3, [r2, #20]
    return n > INT_MAX ? INT_MAX : n;
    2e30:	1ac0      	subs	r0, r0, r3
    2e32:	f140 8171 	bpl.w	3118 <LoadFile(StructMenuItem*, FS*)+0x410>
      while (myFile.available() && count < MyMenuItem->Size) RAM_Image[count++]=myFile.read();
    2e36:	f8da 300c 	ldr.w	r3, [sl, #12]
    2e3a:	42bb      	cmp	r3, r7
    2e3c:	f240 80b1 	bls.w	2fa2 <LoadFile(StructMenuItem*, FS*)+0x29a>
		if (!f) return -1;
    2e40:	6923      	ldr	r3, [r4, #16]
    2e42:	2b00      	cmp	r3, #0
    2e44:	f000 852e 	beq.w	38a4 <LoadFile(StructMenuItem*, FS*)+0xb9c>
		if (f->read(&b, 1) < 1) return -1;
    2e48:	681a      	ldr	r2, [r3, #0]
    2e4a:	f8d2 b008 	ldr.w	fp, [r2, #8]
    2e4e:	45b3      	cmp	fp, r6
    2e50:	f040 8166 	bne.w	3120 <LoadFile(StructMenuItem*, FS*)+0x418>
    return m_fFile ? m_fFile->read(buf, count) :
    2e54:	6d18      	ldr	r0, [r3, #80]	; 0x50
    2e56:	2800      	cmp	r0, #0
    2e58:	d06e      	beq.n	2f38 <LoadFile(StructMenuItem*, FS*)+0x230>
    2e5a:	f10d 0924 	add.w	r9, sp, #36	; 0x24
    2e5e:	2201      	movs	r2, #1
    2e60:	4649      	mov	r1, r9
    2e62:	f004 fc0b 	bl	767c <FatFile::read(void*, unsigned int)>
		return (f) ? f->available() : 0;
    2e66:	6923      	ldr	r3, [r4, #16]
		if (f->read(&b, 1) < 1) return -1;
    2e68:	2800      	cmp	r0, #0
    2e6a:	f000 84e5 	beq.w	3838 <LoadFile(StructMenuItem*, FS*)+0xb30>
		return b;
    2e6e:	f899 2000 	ldrb.w	r2, [r9]
    2e72:	3701      	adds	r7, #1
    2e74:	f805 2b01 	strb.w	r2, [r5], #1
		return (f) ? f->available() : 0;
    2e78:	2b00      	cmp	r3, #0
    2e7a:	d1ca      	bne.n	2e12 <LoadFile(StructMenuItem*, FS*)+0x10a>
      if (count != MyMenuItem->Size)
    2e7c:	f8da 000c 	ldr.w	r0, [sl, #12]
    2e80:	4287      	cmp	r7, r0
    2e82:	f040 80ee 	bne.w	3062 <LoadFile(StructMenuItem*, FS*)+0x35a>
   SendMsgPrintfln("Done");
    2e86:	4840      	ldr	r0, [pc, #256]	; (2f88 <LoadFile(StructMenuItem*, FS*)+0x280>)
    2e88:	f7ff fda6 	bl	29d8 <SendMsgPrintfln(char const*, ...)>
		if (f) {
    2e8c:	6925      	ldr	r5, [r4, #16]
    2e8e:	2d00      	cmp	r5, #0
    2e90:	d04d      	beq.n	2f2e <LoadFile(StructMenuItem*, FS*)+0x226>
			f->close();
    2e92:	682b      	ldr	r3, [r5, #0]
    2e94:	4e3d      	ldr	r6, [pc, #244]	; (2f8c <LoadFile(StructMenuItem*, FS*)+0x284>)
    2e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2e98:	42b3      	cmp	r3, r6
    2e9a:	f040 84bc 	bne.w	3816 <LoadFile(StructMenuItem*, FS*)+0xb0e>
		if (filename) {
    2e9e:	6da8      	ldr	r0, [r5, #88]	; 0x58
    2ea0:	b118      	cbz	r0, 2eaa <LoadFile(StructMenuItem*, FS*)+0x1a2>
			free(filename);
    2ea2:	f00c f923 	bl	f0ec <free>
			filename = nullptr;
    2ea6:	2300      	movs	r3, #0
    2ea8:	65ab      	str	r3, [r5, #88]	; 0x58
  bool isOpen() const {return m_fFile || m_xFile;}
    2eaa:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    2eac:	2b00      	cmp	r3, #0
    2eae:	f000 84a7 	beq.w	3800 <LoadFile(StructMenuItem*, FS*)+0xaf8>
			sdfatfile.close();
    2eb2:	f105 0018 	add.w	r0, r5, #24
    2eb6:	f006 fc9d 	bl	97f4 <FsBaseFile::close()>
		if (--(f->refcount) == 0) {
    2eba:	6927      	ldr	r7, [r4, #16]
    2ebc:	687d      	ldr	r5, [r7, #4]
    2ebe:	3d01      	subs	r5, #1
    2ec0:	607d      	str	r5, [r7, #4]
    2ec2:	2d00      	cmp	r5, #0
    2ec4:	d133      	bne.n	2f2e <LoadFile(StructMenuItem*, FS*)+0x226>
			f->close();
    2ec6:	683b      	ldr	r3, [r7, #0]
    2ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2eca:	42b3      	cmp	r3, r6
    2ecc:	f040 84cd 	bne.w	386a <LoadFile(StructMenuItem*, FS*)+0xb62>
		if (filename) {
    2ed0:	6db8      	ldr	r0, [r7, #88]	; 0x58
    2ed2:	b110      	cbz	r0, 2eda <LoadFile(StructMenuItem*, FS*)+0x1d2>
			free(filename);
    2ed4:	f00c f90a 	bl	f0ec <free>
			filename = nullptr;
    2ed8:	65bd      	str	r5, [r7, #88]	; 0x58
    2eda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    2edc:	2b00      	cmp	r3, #0
    2ede:	f000 84b9 	beq.w	3854 <LoadFile(StructMenuItem*, FS*)+0xb4c>
			sdfatfile.close();
    2ee2:	f107 0018 	add.w	r0, r7, #24
    2ee6:	f006 fc85 	bl	97f4 <FsBaseFile::close()>
			delete f;
    2eea:	6924      	ldr	r4, [r4, #16]
    2eec:	b1fc      	cbz	r4, 2f2e <LoadFile(StructMenuItem*, FS*)+0x226>
    2eee:	6823      	ldr	r3, [r4, #0]
    2ef0:	4a27      	ldr	r2, [pc, #156]	; (2f90 <LoadFile(StructMenuItem*, FS*)+0x288>)
    2ef2:	685b      	ldr	r3, [r3, #4]
    2ef4:	4293      	cmp	r3, r2
    2ef6:	f040 84ce 	bne.w	3896 <LoadFile(StructMenuItem*, FS*)+0xb8e>
	virtual ~SDFile(void) {
    2efa:	4b19      	ldr	r3, [pc, #100]	; (2f60 <LoadFile(StructMenuItem*, FS*)+0x258>)
		if (filename) {
    2efc:	6da0      	ldr	r0, [r4, #88]	; 0x58
	virtual ~SDFile(void) {
    2efe:	6023      	str	r3, [r4, #0]
		if (filename) {
    2f00:	b118      	cbz	r0, 2f0a <LoadFile(StructMenuItem*, FS*)+0x202>
			free(filename);
    2f02:	f00c f8f3 	bl	f0ec <free>
			filename = nullptr;
    2f06:	2300      	movs	r3, #0
    2f08:	65a3      	str	r3, [r4, #88]	; 0x58
    2f0a:	6d23      	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
    2f0c:	f104 0518 	add.w	r5, r4, #24
    2f10:	2b00      	cmp	r3, #0
    2f12:	f000 846f 	beq.w	37f4 <LoadFile(StructMenuItem*, FS*)+0xaec>
    2f16:	4628      	mov	r0, r5
    2f18:	f006 fc6c 	bl	97f4 <FsBaseFile::close()>
    2f1c:	4b14      	ldr	r3, [pc, #80]	; (2f70 <LoadFile(StructMenuItem*, FS*)+0x268>)
  ~FsBaseFile() {close();}
    2f1e:	4628      	mov	r0, r5
    2f20:	60a3      	str	r3, [r4, #8]
    2f22:	f006 fc67 	bl	97f4 <FsBaseFile::close()>
	}
    2f26:	215c      	movs	r1, #92	; 0x5c
    2f28:	4620      	mov	r0, r4
    2f2a:	f00a fbad 	bl	d688 <operator delete(void*, unsigned int)>
   return true;      
    2f2e:	2001      	movs	r0, #1
}
    2f30:	f50d 7d03 	add.w	sp, sp, #524	; 0x20c
    2f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2f38:	6d58      	ldr	r0, [r3, #84]	; 0x54
           m_xFile ? m_xFile->read(buf, count) : -1;
    2f3a:	f10d 0924 	add.w	r9, sp, #36	; 0x24
    2f3e:	2800      	cmp	r0, #0
    2f40:	d095      	beq.n	2e6e <LoadFile(StructMenuItem*, FS*)+0x166>
    2f42:	2201      	movs	r2, #1
    2f44:	4649      	mov	r1, r9
    2f46:	f002 f8bf 	bl	50c8 <ExFatFile::read(void*, unsigned int)>
		return (f) ? f->available() : 0;
    2f4a:	6923      	ldr	r3, [r4, #16]
    2f4c:	e78c      	b.n	2e68 <LoadFile(StructMenuItem*, FS*)+0x160>
    2f4e:	bf00      	nop
    2f50:	2000d8b4 	.word	0x2000d8b4
    2f54:	20001c48 	.word	0x20001c48
    2f58:	20001c50 	.word	0x20001c50
    2f5c:	00000e91 	.word	0x00000e91
    2f60:	20003358 	.word	0x20003358
    2f64:	200033b4 	.word	0x200033b4
    2f68:	20003334 	.word	0x20003334
    2f6c:	20003308 	.word	0x20003308
    2f70:	20003240 	.word	0x20003240
    2f74:	000004c5 	.word	0x000004c5
    2f78:	000017c1 	.word	0x000017c1
    2f7c:	00001b39 	.word	0x00001b39
    2f80:	2000daf4 	.word	0x2000daf4
    2f84:	000019b9 	.word	0x000019b9
    2f88:	20001cac 	.word	0x20001cac
    2f8c:	00000e69 	.word	0x00000e69
    2f90:	00001c55 	.word	0x00001c55
    2f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
           m_xFile ? m_xFile->available() : 0;
    2f96:	b123      	cbz	r3, 2fa2 <LoadFile(StructMenuItem*, FS*)+0x29a>
    return isFile() ? fileSize() - curPosition() : 0;
    2f98:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
    2f9c:	0712      	lsls	r2, r2, #28
    2f9e:	f100 8133 	bmi.w	3208 <LoadFile(StructMenuItem*, FS*)+0x500>
		if (f) {
    2fa2:	6925      	ldr	r5, [r4, #16]
    2fa4:	2d00      	cmp	r5, #0
    2fa6:	f43f af69 	beq.w	2e7c <LoadFile(StructMenuItem*, FS*)+0x174>
			f->close();
    2faa:	682b      	ldr	r3, [r5, #0]
    2fac:	4ea7      	ldr	r6, [pc, #668]	; (324c <LoadFile(StructMenuItem*, FS*)+0x544>)
    2fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2fb0:	42b3      	cmp	r3, r6
    2fb2:	f040 8409 	bne.w	37c8 <LoadFile(StructMenuItem*, FS*)+0xac0>
		if (filename) {
    2fb6:	6da8      	ldr	r0, [r5, #88]	; 0x58
    2fb8:	b118      	cbz	r0, 2fc2 <LoadFile(StructMenuItem*, FS*)+0x2ba>
			free(filename);
    2fba:	f00c f897 	bl	f0ec <free>
			filename = nullptr;
    2fbe:	2300      	movs	r3, #0
    2fc0:	65ab      	str	r3, [r5, #88]	; 0x58
  bool isOpen() const {return m_fFile || m_xFile;}
    2fc2:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    2fc4:	2b00      	cmp	r3, #0
    2fc6:	f000 8377 	beq.w	36b8 <LoadFile(StructMenuItem*, FS*)+0x9b0>
			sdfatfile.close();
    2fca:	f105 0018 	add.w	r0, r5, #24
    2fce:	f006 fc11 	bl	97f4 <FsBaseFile::close()>
		if (--(f->refcount) == 0) {
    2fd2:	f8d4 8010 	ldr.w	r8, [r4, #16]
    2fd6:	f8d8 5004 	ldr.w	r5, [r8, #4]
    2fda:	3d01      	subs	r5, #1
    2fdc:	f8c8 5004 	str.w	r5, [r8, #4]
    2fe0:	2d00      	cmp	r5, #0
    2fe2:	d137      	bne.n	3054 <LoadFile(StructMenuItem*, FS*)+0x34c>
			f->close();
    2fe4:	f8d8 3000 	ldr.w	r3, [r8]
    2fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2fea:	42b3      	cmp	r3, r6
    2fec:	f040 842e 	bne.w	384c <LoadFile(StructMenuItem*, FS*)+0xb44>
		if (filename) {
    2ff0:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
    2ff4:	b118      	cbz	r0, 2ffe <LoadFile(StructMenuItem*, FS*)+0x2f6>
			free(filename);
    2ff6:	f00c f879 	bl	f0ec <free>
			filename = nullptr;
    2ffa:	f8c8 5058 	str.w	r5, [r8, #88]	; 0x58
    2ffe:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
    3002:	2b00      	cmp	r3, #0
    3004:	f000 841b 	beq.w	383e <LoadFile(StructMenuItem*, FS*)+0xb36>
			sdfatfile.close();
    3008:	f108 0018 	add.w	r0, r8, #24
    300c:	f006 fbf2 	bl	97f4 <FsBaseFile::close()>
			delete f;
    3010:	6925      	ldr	r5, [r4, #16]
    3012:	b1fd      	cbz	r5, 3054 <LoadFile(StructMenuItem*, FS*)+0x34c>
    3014:	682b      	ldr	r3, [r5, #0]
    3016:	4a8e      	ldr	r2, [pc, #568]	; (3250 <LoadFile(StructMenuItem*, FS*)+0x548>)
    3018:	685b      	ldr	r3, [r3, #4]
    301a:	4293      	cmp	r3, r2
    301c:	f040 8431 	bne.w	3882 <LoadFile(StructMenuItem*, FS*)+0xb7a>
	virtual ~SDFile(void) {
    3020:	4b8c      	ldr	r3, [pc, #560]	; (3254 <LoadFile(StructMenuItem*, FS*)+0x54c>)
		if (filename) {
    3022:	6da8      	ldr	r0, [r5, #88]	; 0x58
	virtual ~SDFile(void) {
    3024:	602b      	str	r3, [r5, #0]
		if (filename) {
    3026:	b118      	cbz	r0, 3030 <LoadFile(StructMenuItem*, FS*)+0x328>
			free(filename);
    3028:	f00c f860 	bl	f0ec <free>
			filename = nullptr;
    302c:	2300      	movs	r3, #0
    302e:	65ab      	str	r3, [r5, #88]	; 0x58
    3030:	6d2b      	ldr	r3, [r5, #80]	; 0x50
			sdfatfile.close();
    3032:	f105 0618 	add.w	r6, r5, #24
    3036:	2b00      	cmp	r3, #0
    3038:	f000 83cd 	beq.w	37d6 <LoadFile(StructMenuItem*, FS*)+0xace>
    303c:	4630      	mov	r0, r6
    303e:	f006 fbd9 	bl	97f4 <FsBaseFile::close()>
    3042:	4b85      	ldr	r3, [pc, #532]	; (3258 <LoadFile(StructMenuItem*, FS*)+0x550>)
  ~FsBaseFile() {close();}
    3044:	4630      	mov	r0, r6
    3046:	60ab      	str	r3, [r5, #8]
    3048:	f006 fbd4 	bl	97f4 <FsBaseFile::close()>
	}
    304c:	215c      	movs	r1, #92	; 0x5c
    304e:	4628      	mov	r0, r5
    3050:	f00a fb1a 	bl	d688 <operator delete(void*, unsigned int)>
      if (count != MyMenuItem->Size)
    3054:	f8da 000c 	ldr.w	r0, [sl, #12]
		f = nullptr;
    3058:	2300      	movs	r3, #0
    305a:	4287      	cmp	r7, r0
    305c:	6123      	str	r3, [r4, #16]
    305e:	f43f af12 	beq.w	2e86 <LoadFile(StructMenuItem*, FS*)+0x17e>
         SendMsgPrintfln("Size Mismatch");
    3062:	487e      	ldr	r0, [pc, #504]	; (325c <LoadFile(StructMenuItem*, FS*)+0x554>)
    3064:	f7ff fcb8 	bl	29d8 <SendMsgPrintfln(char const*, ...)>
		if (f) {
    3068:	6925      	ldr	r5, [r4, #16]
    306a:	2d00      	cmp	r5, #0
    306c:	d04d      	beq.n	310a <LoadFile(StructMenuItem*, FS*)+0x402>
			f->close();
    306e:	682b      	ldr	r3, [r5, #0]
    3070:	4e76      	ldr	r6, [pc, #472]	; (324c <LoadFile(StructMenuItem*, FS*)+0x544>)
    3072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3074:	42b3      	cmp	r3, r6
    3076:	f040 8408 	bne.w	388a <LoadFile(StructMenuItem*, FS*)+0xb82>
		if (filename) {
    307a:	6da8      	ldr	r0, [r5, #88]	; 0x58
    307c:	b118      	cbz	r0, 3086 <LoadFile(StructMenuItem*, FS*)+0x37e>
			free(filename);
    307e:	f00c f835 	bl	f0ec <free>
			filename = nullptr;
    3082:	2300      	movs	r3, #0
    3084:	65ab      	str	r3, [r5, #88]	; 0x58
  bool isOpen() const {return m_fFile || m_xFile;}
    3086:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    3088:	2b00      	cmp	r3, #0
    308a:	f000 83a9 	beq.w	37e0 <LoadFile(StructMenuItem*, FS*)+0xad8>
			sdfatfile.close();
    308e:	f105 0018 	add.w	r0, r5, #24
    3092:	f006 fbaf 	bl	97f4 <FsBaseFile::close()>
		if (--(f->refcount) == 0) {
    3096:	6927      	ldr	r7, [r4, #16]
    3098:	687d      	ldr	r5, [r7, #4]
    309a:	3d01      	subs	r5, #1
    309c:	607d      	str	r5, [r7, #4]
    309e:	2d00      	cmp	r5, #0
    30a0:	d133      	bne.n	310a <LoadFile(StructMenuItem*, FS*)+0x402>
			f->close();
    30a2:	683b      	ldr	r3, [r7, #0]
    30a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    30a6:	42b3      	cmp	r3, r6
    30a8:	f040 841d 	bne.w	38e6 <LoadFile(StructMenuItem*, FS*)+0xbde>
		if (filename) {
    30ac:	6db8      	ldr	r0, [r7, #88]	; 0x58
    30ae:	b110      	cbz	r0, 30b6 <LoadFile(StructMenuItem*, FS*)+0x3ae>
			free(filename);
    30b0:	f00c f81c 	bl	f0ec <free>
			filename = nullptr;
    30b4:	65bd      	str	r5, [r7, #88]	; 0x58
    30b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    30b8:	2b00      	cmp	r3, #0
    30ba:	f000 840e 	beq.w	38da <LoadFile(StructMenuItem*, FS*)+0xbd2>
			sdfatfile.close();
    30be:	f107 0018 	add.w	r0, r7, #24
    30c2:	f006 fb97 	bl	97f4 <FsBaseFile::close()>
			delete f;
    30c6:	6924      	ldr	r4, [r4, #16]
    30c8:	b1fc      	cbz	r4, 310a <LoadFile(StructMenuItem*, FS*)+0x402>
    30ca:	6823      	ldr	r3, [r4, #0]
    30cc:	4a60      	ldr	r2, [pc, #384]	; (3250 <LoadFile(StructMenuItem*, FS*)+0x548>)
    30ce:	685b      	ldr	r3, [r3, #4]
    30d0:	4293      	cmp	r3, r2
    30d2:	f040 83dd 	bne.w	3890 <LoadFile(StructMenuItem*, FS*)+0xb88>
	virtual ~SDFile(void) {
    30d6:	4b5f      	ldr	r3, [pc, #380]	; (3254 <LoadFile(StructMenuItem*, FS*)+0x54c>)
		if (filename) {
    30d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
	virtual ~SDFile(void) {
    30da:	6023      	str	r3, [r4, #0]
		if (filename) {
    30dc:	b118      	cbz	r0, 30e6 <LoadFile(StructMenuItem*, FS*)+0x3de>
			free(filename);
    30de:	f00c f805 	bl	f0ec <free>
			filename = nullptr;
    30e2:	2300      	movs	r3, #0
    30e4:	65a3      	str	r3, [r4, #88]	; 0x58
    30e6:	6d23      	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
    30e8:	f104 0518 	add.w	r5, r4, #24
    30ec:	2b00      	cmp	r3, #0
    30ee:	f000 83c3 	beq.w	3878 <LoadFile(StructMenuItem*, FS*)+0xb70>
    30f2:	4628      	mov	r0, r5
    30f4:	f006 fb7e 	bl	97f4 <FsBaseFile::close()>
    30f8:	4b57      	ldr	r3, [pc, #348]	; (3258 <LoadFile(StructMenuItem*, FS*)+0x550>)
  ~FsBaseFile() {close();}
    30fa:	4628      	mov	r0, r5
    30fc:	60a3      	str	r3, [r4, #8]
    30fe:	f006 fb79 	bl	97f4 <FsBaseFile::close()>
	}
    3102:	215c      	movs	r1, #92	; 0x5c
    3104:	4620      	mov	r0, r4
    3106:	f00a fabf 	bl	d688 <operator delete(void*, unsigned int)>
    310a:	2000      	movs	r0, #0
}
    310c:	f50d 7d03 	add.w	sp, sp, #524	; 0x20c
    3110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return (f) ? f->available() : 0;
    3114:	4618      	mov	r0, r3
    3116:	4790      	blx	r2
      while (myFile.available() && count < MyMenuItem->Size) RAM_Image[count++]=myFile.read();
    3118:	2800      	cmp	r0, #0
    311a:	f47f ae8c 	bne.w	2e36 <LoadFile(StructMenuItem*, FS*)+0x12e>
    311e:	e740      	b.n	2fa2 <LoadFile(StructMenuItem*, FS*)+0x29a>
		if (f->read(&b, 1) < 1) return -1;
    3120:	f10d 0924 	add.w	r9, sp, #36	; 0x24
    3124:	4618      	mov	r0, r3
    3126:	2201      	movs	r2, #1
    3128:	4649      	mov	r1, r9
    312a:	47d8      	blx	fp
		return (f) ? f->available() : 0;
    312c:	6923      	ldr	r3, [r4, #16]
    312e:	e69b      	b.n	2e68 <LoadFile(StructMenuItem*, FS*)+0x160>
		return (f) ? f->isOpen() : false;
    3130:	4798      	blx	r3
    3132:	2800      	cmp	r0, #0
    3134:	f040 8239 	bne.w	35aa <LoadFile(StructMenuItem*, FS*)+0x8a2>
      SendMsgPrintfln("File Not Found");
    3138:	4849      	ldr	r0, [pc, #292]	; (3260 <LoadFile(StructMenuItem*, FS*)+0x558>)
    313a:	f7ff fc4d 	bl	29d8 <SendMsgPrintfln(char const*, ...)>
		if (f) dec_refcount();
    313e:	6925      	ldr	r5, [r4, #16]
	virtual ~File() {
    3140:	4b48      	ldr	r3, [pc, #288]	; (3264 <LoadFile(StructMenuItem*, FS*)+0x55c>)
    3142:	6023      	str	r3, [r4, #0]
		if (f) dec_refcount();
    3144:	2d00      	cmp	r5, #0
    3146:	d0e0      	beq.n	310a <LoadFile(StructMenuItem*, FS*)+0x402>
		if (--(f->refcount) == 0) {
    3148:	686e      	ldr	r6, [r5, #4]
    314a:	3e01      	subs	r6, #1
    314c:	606e      	str	r6, [r5, #4]
    314e:	2e00      	cmp	r6, #0
    3150:	d1db      	bne.n	310a <LoadFile(StructMenuItem*, FS*)+0x402>
			f->close();
    3152:	682b      	ldr	r3, [r5, #0]
    3154:	4a3d      	ldr	r2, [pc, #244]	; (324c <LoadFile(StructMenuItem*, FS*)+0x544>)
    3156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3158:	4293      	cmp	r3, r2
    315a:	f040 8332 	bne.w	37c2 <LoadFile(StructMenuItem*, FS*)+0xaba>
		if (filename) {
    315e:	6da8      	ldr	r0, [r5, #88]	; 0x58
    3160:	b110      	cbz	r0, 3168 <LoadFile(StructMenuItem*, FS*)+0x460>
			free(filename);
    3162:	f00b ffc3 	bl	f0ec <free>
			filename = nullptr;
    3166:	65ae      	str	r6, [r5, #88]	; 0x58
  bool isOpen() const {return m_fFile || m_xFile;}
    3168:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    316a:	2b00      	cmp	r3, #0
    316c:	f000 80b5 	beq.w	32da <LoadFile(StructMenuItem*, FS*)+0x5d2>
			sdfatfile.close();
    3170:	f105 0018 	add.w	r0, r5, #24
    3174:	f006 fb3e 	bl	97f4 <FsBaseFile::close()>
			delete f;
    3178:	6925      	ldr	r5, [r4, #16]
    317a:	2d00      	cmp	r5, #0
    317c:	d0c5      	beq.n	310a <LoadFile(StructMenuItem*, FS*)+0x402>
    317e:	682b      	ldr	r3, [r5, #0]
    3180:	4a33      	ldr	r2, [pc, #204]	; (3250 <LoadFile(StructMenuItem*, FS*)+0x548>)
    3182:	685b      	ldr	r3, [r3, #4]
    3184:	4293      	cmp	r3, r2
    3186:	f040 834a 	bne.w	381e <LoadFile(StructMenuItem*, FS*)+0xb16>
	virtual ~SDFile(void) {
    318a:	4b32      	ldr	r3, [pc, #200]	; (3254 <LoadFile(StructMenuItem*, FS*)+0x54c>)
		if (filename) {
    318c:	6da8      	ldr	r0, [r5, #88]	; 0x58
	virtual ~SDFile(void) {
    318e:	602b      	str	r3, [r5, #0]
		if (filename) {
    3190:	b118      	cbz	r0, 319a <LoadFile(StructMenuItem*, FS*)+0x492>
			free(filename);
    3192:	f00b ffab 	bl	f0ec <free>
			filename = nullptr;
    3196:	2300      	movs	r3, #0
    3198:	65ab      	str	r3, [r5, #88]	; 0x58
    319a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
			sdfatfile.close();
    319c:	f105 0418 	add.w	r4, r5, #24
    31a0:	2b00      	cmp	r3, #0
    31a2:	f000 8333 	beq.w	380c <LoadFile(StructMenuItem*, FS*)+0xb04>
    31a6:	4620      	mov	r0, r4
    31a8:	f006 fb24 	bl	97f4 <FsBaseFile::close()>
    31ac:	4b2a      	ldr	r3, [pc, #168]	; (3258 <LoadFile(StructMenuItem*, FS*)+0x550>)
  ~FsBaseFile() {close();}
    31ae:	4620      	mov	r0, r4
    31b0:	60ab      	str	r3, [r5, #8]
    31b2:	f006 fb1f 	bl	97f4 <FsBaseFile::close()>
	}
    31b6:	4628      	mov	r0, r5
    31b8:	215c      	movs	r1, #92	; 0x5c
    31ba:	f00a fa65 	bl	d688 <operator delete(void*, unsigned int)>
    31be:	2000      	movs	r0, #0
    31c0:	e7a4      	b.n	310c <LoadFile(StructMenuItem*, FS*)+0x404>
   return (strlen(DriveDirPath) == 1 && DriveDirPath[0] == '/');
    31c2:	7823      	ldrb	r3, [r4, #0]
    31c4:	2b2f      	cmp	r3, #47	; 0x2f
    31c6:	f47f adad 	bne.w	2d24 <LoadFile(StructMenuItem*, FS*)+0x1c>
   if (PathIsRoot()) sprintf(FullFilePath, "%s%s", DriveDirPath, MyMenuItem->Name);  // at root
    31ca:	f8da 3004 	ldr.w	r3, [sl, #4]
    31ce:	4622      	mov	r2, r4
    31d0:	4925      	ldr	r1, [pc, #148]	; (3268 <LoadFile(StructMenuItem*, FS*)+0x560>)
    31d2:	4630      	mov	r0, r6
    31d4:	f00d fd2c 	bl	10c30 <sprintf>
    31d8:	e5ab      	b.n	2d32 <LoadFile(StructMenuItem*, FS*)+0x2a>
  bool isOpen() const {return m_fFile || m_xFile;}
    31da:	f8db 304c 	ldr.w	r3, [fp, #76]	; 0x4c
    31de:	2b00      	cmp	r3, #0
    31e0:	f47f adbe 	bne.w	2d60 <LoadFile(StructMenuItem*, FS*)+0x58>
    31e4:	ac04      	add	r4, sp, #16
    31e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    31ea:	af0d      	add	r7, sp, #52	; 0x34
    31ec:	7323      	strb	r3, [r4, #12]
	constexpr File() : f(nullptr) { }
    31ee:	6123      	str	r3, [r4, #16]
    31f0:	e9c4 3201 	strd	r3, r2, [r4, #4]
    31f4:	4a1b      	ldr	r2, [pc, #108]	; (3264 <LoadFile(StructMenuItem*, FS*)+0x55c>)
    31f6:	6022      	str	r2, [r4, #0]
    31f8:	e5dd      	b.n	2db6 <LoadFile(StructMenuItem*, FS*)+0xae>
   File myFile = sourceFS->open(FullFilePath, FILE_READ);
    31fa:	ac04      	add	r4, sp, #16
    31fc:	4632      	mov	r2, r6
    31fe:	4629      	mov	r1, r5
    3200:	2300      	movs	r3, #0
    3202:	4620      	mov	r0, r4
    3204:	47b8      	blx	r7
    3206:	e5dc      	b.n	2dc2 <LoadFile(StructMenuItem*, FS*)+0xba>
    3208:	681a      	ldr	r2, [r3, #0]
    320a:	6918      	ldr	r0, [r3, #16]
    320c:	1a80      	subs	r0, r0, r2
    320e:	695a      	ldr	r2, [r3, #20]
    3210:	685b      	ldr	r3, [r3, #4]
    3212:	eb62 0303 	sbc.w	r3, r2, r3
    return n > INT_MAX ? INT_MAX : n;
    3216:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    321a:	f173 0300 	sbcs.w	r3, r3, #0
    321e:	f4ff af7b 	bcc.w	3118 <LoadFile(StructMenuItem*, FS*)+0x410>
    3222:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
      while (myFile.available() && count < MyMenuItem->Size) RAM_Image[count++]=myFile.read();
    3226:	2800      	cmp	r0, #0
    3228:	f47f ae05 	bne.w	2e36 <LoadFile(StructMenuItem*, FS*)+0x12e>
    322c:	e6b9      	b.n	2fa2 <LoadFile(StructMenuItem*, FS*)+0x29a>
    322e:	6d43      	ldr	r3, [r0, #84]	; 0x54
    3230:	2b00      	cmp	r3, #0
    3232:	d081      	beq.n	3138 <LoadFile(StructMenuItem*, FS*)+0x430>
		return (f) ? f->size() : 0;
    3234:	6a92      	ldr	r2, [r2, #40]	; 0x28
    3236:	4b0d      	ldr	r3, [pc, #52]	; (326c <LoadFile(StructMenuItem*, FS*)+0x564>)
    3238:	429a      	cmp	r2, r3
    323a:	f040 820f 	bne.w	365c <LoadFile(StructMenuItem*, FS*)+0x954>
    323e:	6d43      	ldr	r3, [r0, #84]	; 0x54
           m_xFile ? m_xFile->fileSize() : 0;
    3240:	2b00      	cmp	r3, #0
    3242:	f000 82ef 	beq.w	3824 <LoadFile(StructMenuItem*, FS*)+0xb1c>
   MyMenuItem->Size = myFile.size();
    3246:	6918      	ldr	r0, [r3, #16]
    3248:	e5cf      	b.n	2dea <LoadFile(StructMenuItem*, FS*)+0xe2>
    324a:	bf00      	nop
    324c:	00000e69 	.word	0x00000e69
    3250:	00001c55 	.word	0x00001c55
    3254:	20003358 	.word	0x20003358
    3258:	20003240 	.word	0x20003240
    325c:	20001c9c 	.word	0x20001c9c
    3260:	20001c60 	.word	0x20001c60
    3264:	20003308 	.word	0x20003308
    3268:	20001c40 	.word	0x20001c40
    326c:	000017c1 	.word	0x000017c1
         SendMsgPrintfln("Non-CRT file too large");
    3270:	483b      	ldr	r0, [pc, #236]	; (3360 <LoadFile(StructMenuItem*, FS*)+0x658>)
    3272:	f7ff fbb1 	bl	29d8 <SendMsgPrintfln(char const*, ...)>
		if (f) {
    3276:	6925      	ldr	r5, [r4, #16]
    3278:	2d00      	cmp	r5, #0
    327a:	f43f af46 	beq.w	310a <LoadFile(StructMenuItem*, FS*)+0x402>
			f->close();
    327e:	682b      	ldr	r3, [r5, #0]
    3280:	4e38      	ldr	r6, [pc, #224]	; (3364 <LoadFile(StructMenuItem*, FS*)+0x65c>)
    3282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3284:	42b3      	cmp	r3, r6
    3286:	f040 82f4 	bne.w	3872 <LoadFile(StructMenuItem*, FS*)+0xb6a>
		if (filename) {
    328a:	6da8      	ldr	r0, [r5, #88]	; 0x58
    328c:	b118      	cbz	r0, 3296 <LoadFile(StructMenuItem*, FS*)+0x58e>
			free(filename);
    328e:	f00b ff2d 	bl	f0ec <free>
			filename = nullptr;
    3292:	2300      	movs	r3, #0
    3294:	65ab      	str	r3, [r5, #88]	; 0x58
  bool isOpen() const {return m_fFile || m_xFile;}
    3296:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    3298:	2b00      	cmp	r3, #0
    329a:	f000 82e1 	beq.w	3860 <LoadFile(StructMenuItem*, FS*)+0xb58>
			sdfatfile.close();
    329e:	f105 0018 	add.w	r0, r5, #24
    32a2:	f006 faa7 	bl	97f4 <FsBaseFile::close()>
		if (--(f->refcount) == 0) {
    32a6:	6925      	ldr	r5, [r4, #16]
    32a8:	686f      	ldr	r7, [r5, #4]
    32aa:	3f01      	subs	r7, #1
    32ac:	606f      	str	r7, [r5, #4]
    32ae:	2f00      	cmp	r7, #0
    32b0:	f47f af2b 	bne.w	310a <LoadFile(StructMenuItem*, FS*)+0x402>
			f->close();
    32b4:	682b      	ldr	r3, [r5, #0]
    32b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    32b8:	42b3      	cmp	r3, r6
    32ba:	f040 82f0 	bne.w	389e <LoadFile(StructMenuItem*, FS*)+0xb96>
		if (filename) {
    32be:	6da8      	ldr	r0, [r5, #88]	; 0x58
    32c0:	b110      	cbz	r0, 32c8 <LoadFile(StructMenuItem*, FS*)+0x5c0>
			free(filename);
    32c2:	f00b ff13 	bl	f0ec <free>
			filename = nullptr;
    32c6:	65af      	str	r7, [r5, #88]	; 0x58
    32c8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    32ca:	2b00      	cmp	r3, #0
    32cc:	f000 828d 	beq.w	37ea <LoadFile(StructMenuItem*, FS*)+0xae2>
			sdfatfile.close();
    32d0:	f105 0018 	add.w	r0, r5, #24
    32d4:	f006 fa8e 	bl	97f4 <FsBaseFile::close()>
    32d8:	e6f5      	b.n	30c6 <LoadFile(StructMenuItem*, FS*)+0x3be>
    32da:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    32dc:	2b00      	cmp	r3, #0
    32de:	f47f af47 	bne.w	3170 <LoadFile(StructMenuItem*, FS*)+0x468>
    32e2:	e749      	b.n	3178 <LoadFile(StructMenuItem*, FS*)+0x470>
      if (MyMenuItem->Size < 0x1000)
    32e4:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    32e8:	f0c0 816a 	bcc.w	35c0 <LoadFile(StructMenuItem*, FS*)+0x8b8>
    32ec:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
    32f0:	f10d 0563 	add.w	r5, sp, #99	; 0x63
    32f4:	4e1c      	ldr	r6, [pc, #112]	; (3368 <LoadFile(StructMenuItem*, FS*)+0x660>)
    32f6:	f10d 0723 	add.w	r7, sp, #35	; 0x23
		if (!f) return -1;
    32fa:	6923      	ldr	r3, [r4, #16]
    32fc:	2b00      	cmp	r3, #0
    32fe:	f000 814c 	beq.w	359a <LoadFile(StructMenuItem*, FS*)+0x892>
		if (f->read(&b, 1) < 1) return -1;
    3302:	681a      	ldr	r2, [r3, #0]
    3304:	f8d2 8008 	ldr.w	r8, [r2, #8]
    3308:	45b0      	cmp	r8, r6
    330a:	f040 8148 	bne.w	359e <LoadFile(StructMenuItem*, FS*)+0x896>
    return m_fFile ? m_fFile->read(buf, count) :
    330e:	6d18      	ldr	r0, [r3, #80]	; 0x50
    3310:	2800      	cmp	r0, #0
    3312:	f000 8136 	beq.w	3582 <LoadFile(StructMenuItem*, FS*)+0x87a>
    3316:	2201      	movs	r2, #1
    3318:	f10d 010f 	add.w	r1, sp, #15
    331c:	f004 f9ae 	bl	767c <FatFile::read(void*, unsigned int)>
    3320:	2800      	cmp	r0, #0
    3322:	f000 813a 	beq.w	359a <LoadFile(StructMenuItem*, FS*)+0x892>
		return b;
    3326:	f89d 300f 	ldrb.w	r3, [sp, #15]
      for (count = 0; count < CRT_MAIN_HDR_LEN; count++) lclBuf[count]=myFile.read(); //Read main header
    332a:	f807 3f01 	strb.w	r3, [r7, #1]!
    332e:	42bd      	cmp	r5, r7
    3330:	d1e3      	bne.n	32fa <LoadFile(StructMenuItem*, FS*)+0x5f2>
      if (!ParseCRTHeader(MyMenuItem, &EXROM, &GAME)) //sends error messages
    3332:	4650      	mov	r0, sl
    3334:	f10d 020e 	add.w	r2, sp, #14
    3338:	f10d 010d 	add.w	r1, sp, #13
      MyMenuItem->Code_Image = lclBuf;
    333c:	f8ca b008 	str.w	fp, [sl, #8]
      if (!ParseCRTHeader(MyMenuItem, &EXROM, &GAME)) //sends error messages
    3340:	f7ff fb6e 	bl	2a20 <ParseCRTHeader(StructMenuItem*, unsigned char*, unsigned char*)>
    3344:	4605      	mov	r5, r0
    3346:	2800      	cmp	r0, #0
    3348:	f000 819e 	beq.w	3688 <LoadFile(StructMenuItem*, FS*)+0x980>
   for(uint16_t cnt=0; cnt < NumCrtChips; cnt++) 
    334c:	4f07      	ldr	r7, [pc, #28]	; (336c <LoadFile(StructMenuItem*, FS*)+0x664>)
    334e:	783b      	ldrb	r3, [r7, #0]
    3350:	b313      	cbz	r3, 3398 <LoadFile(StructMenuItem*, FS*)+0x690>
    3352:	2500      	movs	r5, #0
    3354:	f8df 8018 	ldr.w	r8, [pc, #24]	; 3370 <LoadFile(StructMenuItem*, FS*)+0x668>
      if((uint32_t)CrtChips[cnt].ChipROM >= 0x20200000) free(CrtChips[cnt].ChipROM);
    3358:	f8df 9018 	ldr.w	r9, [pc, #24]	; 3374 <LoadFile(StructMenuItem*, FS*)+0x66c>
   for(uint16_t cnt=0; cnt < NumCrtChips; cnt++) 
    335c:	462e      	mov	r6, r5
    335e:	e00f      	b.n	3380 <LoadFile(StructMenuItem*, FS*)+0x678>
    3360:	20001c84 	.word	0x20001c84
    3364:	00000e69 	.word	0x00000e69
    3368:	000019b9 	.word	0x000019b9
    336c:	2005e536 	.word	0x2005e536
    3370:	2000d2ac 	.word	0x2000d2ac
    3374:	201fffff 	.word	0x201fffff
    3378:	783a      	ldrb	r2, [r7, #0]
    337a:	b2b3      	uxth	r3, r6
    337c:	429a      	cmp	r2, r3
    337e:	d90b      	bls.n	3398 <LoadFile(StructMenuItem*, FS*)+0x690>
      if((uint32_t)CrtChips[cnt].ChipROM >= 0x20200000) free(CrtChips[cnt].ChipROM);
    3380:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
   for(uint16_t cnt=0; cnt < NumCrtChips; cnt++) 
    3384:	3601      	adds	r6, #1
    3386:	3503      	adds	r5, #3
      if((uint32_t)CrtChips[cnt].ChipROM >= 0x20200000) free(CrtChips[cnt].ChipROM);
    3388:	4548      	cmp	r0, r9
    338a:	d9f5      	bls.n	3378 <LoadFile(StructMenuItem*, FS*)+0x670>
    338c:	f00b feae 	bl	f0ec <free>
   for(uint16_t cnt=0; cnt < NumCrtChips; cnt++) 
    3390:	783a      	ldrb	r2, [r7, #0]
    3392:	b2b3      	uxth	r3, r6
    3394:	429a      	cmp	r2, r3
    3396:	d8f3      	bhi.n	3380 <LoadFile(StructMenuItem*, FS*)+0x678>
   NumCrtChips = 0;
    3398:	2300      	movs	r3, #0
		return (f) ? f->available() : 0;
    339a:	6920      	ldr	r0, [r4, #16]
    339c:	703b      	strb	r3, [r7, #0]
    339e:	2800      	cmp	r0, #0
    33a0:	d06f      	beq.n	3482 <LoadFile(StructMenuItem*, FS*)+0x77a>
    33a2:	4bb0      	ldr	r3, [pc, #704]	; (3664 <LoadFile(StructMenuItem*, FS*)+0x95c>)
    33a4:	4eb0      	ldr	r6, [pc, #704]	; (3668 <LoadFile(StructMenuItem*, FS*)+0x960>)
         for (count = 0; count < CrtChips[NumCrtChips].ROMSize; count++) CrtChips[NumCrtChips].ChipROM[count]=myFile.read();//read in ROM info:
    33a6:	f8df 92d8 	ldr.w	r9, [pc, #728]	; 3680 <LoadFile(StructMenuItem*, FS*)+0x978>
    33aa:	9301      	str	r3, [sp, #4]
    33ac:	6803      	ldr	r3, [r0, #0]
    33ae:	9a01      	ldr	r2, [sp, #4]
    33b0:	691b      	ldr	r3, [r3, #16]
    33b2:	4293      	cmp	r3, r2
    33b4:	f040 8130 	bne.w	3618 <LoadFile(StructMenuItem*, FS*)+0x910>
    return m_fFile ? m_fFile->available() :
    33b8:	6d03      	ldr	r3, [r0, #80]	; 0x50
    33ba:	2b00      	cmp	r3, #0
    33bc:	f000 8131 	beq.w	3622 <LoadFile(StructMenuItem*, FS*)+0x91a>
    return isFile() ? fileSize() - curPosition() : 0;
    33c0:	781a      	ldrb	r2, [r3, #0]
    33c2:	0715      	lsls	r5, r2, #28
    33c4:	d55d      	bpl.n	3482 <LoadFile(StructMenuItem*, FS*)+0x77a>
    33c6:	69d8      	ldr	r0, [r3, #28]
    33c8:	695b      	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
    33ca:	1ac0      	subs	r0, r0, r3
    33cc:	f140 8125 	bpl.w	361a <LoadFile(StructMenuItem*, FS*)+0x912>
    33d0:	f10b 080f 	add.w	r8, fp, #15
   for(uint16_t cnt=0; cnt < NumCrtChips; cnt++) 
    33d4:	f10d 0523 	add.w	r5, sp, #35	; 0x23
		if (!f) return -1;
    33d8:	6922      	ldr	r2, [r4, #16]
    33da:	2a00      	cmp	r2, #0
    33dc:	f000 8104 	beq.w	35e8 <LoadFile(StructMenuItem*, FS*)+0x8e0>
		if (f->read(&b, 1) < 1) return -1;
    33e0:	6813      	ldr	r3, [r2, #0]
    33e2:	689b      	ldr	r3, [r3, #8]
    33e4:	42b3      	cmp	r3, r6
    33e6:	f040 8101 	bne.w	35ec <LoadFile(StructMenuItem*, FS*)+0x8e4>
    return m_fFile ? m_fFile->read(buf, count) :
    33ea:	6d10      	ldr	r0, [r2, #80]	; 0x50
    33ec:	2800      	cmp	r0, #0
    33ee:	f000 80ef 	beq.w	35d0 <LoadFile(StructMenuItem*, FS*)+0x8c8>
    33f2:	2201      	movs	r2, #1
    33f4:	f10d 010f 	add.w	r1, sp, #15
    33f8:	f004 f940 	bl	767c <FatFile::read(void*, unsigned int)>
    33fc:	2800      	cmp	r0, #0
    33fe:	f000 80f3 	beq.w	35e8 <LoadFile(StructMenuItem*, FS*)+0x8e0>
		return b;
    3402:	f89d 300f 	ldrb.w	r3, [sp, #15]
         for (count = 0; count < CRT_CHIP_HDR_LEN; count++) lclBuf[count]=myFile.read(); //Read chip header
    3406:	f805 3f01 	strb.w	r3, [r5, #1]!
    340a:	4545      	cmp	r5, r8
    340c:	d1e4      	bne.n	33d8 <LoadFile(StructMenuItem*, FS*)+0x6d0>
         if (!ParseChipHeader(lclBuf)) //sends error messages
    340e:	4658      	mov	r0, fp
    3410:	f7ff fb8e 	bl	2b30 <ParseChipHeader(unsigned char*)>
    3414:	2800      	cmp	r0, #0
    3416:	f000 8154 	beq.w	36c2 <LoadFile(StructMenuItem*, FS*)+0x9ba>
         for (count = 0; count < CrtChips[NumCrtChips].ROMSize; count++) CrtChips[NumCrtChips].ChipROM[count]=myFile.read();//read in ROM info:
    341a:	783a      	ldrb	r2, [r7, #0]
    341c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    3420:	eb09 0383 	add.w	r3, r9, r3, lsl #2
    3424:	88db      	ldrh	r3, [r3, #6]
    3426:	b33b      	cbz	r3, 3478 <LoadFile(StructMenuItem*, FS*)+0x770>
    3428:	2500      	movs	r5, #0
		if (!f) return -1;
    342a:	6923      	ldr	r3, [r4, #16]
    342c:	2b00      	cmp	r3, #0
    342e:	f000 8113 	beq.w	3658 <LoadFile(StructMenuItem*, FS*)+0x950>
		if (f->read(&b, 1) < 1) return -1;
    3432:	681a      	ldr	r2, [r3, #0]
    3434:	f8d2 8008 	ldr.w	r8, [r2, #8]
    3438:	45b0      	cmp	r8, r6
    343a:	f040 80e7 	bne.w	360c <LoadFile(StructMenuItem*, FS*)+0x904>
    343e:	6d18      	ldr	r0, [r3, #80]	; 0x50
    3440:	2800      	cmp	r0, #0
    3442:	f000 80d9 	beq.w	35f8 <LoadFile(StructMenuItem*, FS*)+0x8f0>
    3446:	2201      	movs	r2, #1
    3448:	f10d 010f 	add.w	r1, sp, #15
    344c:	f004 f916 	bl	767c <FatFile::read(void*, unsigned int)>
    3450:	2800      	cmp	r0, #0
    3452:	f000 8101 	beq.w	3658 <LoadFile(StructMenuItem*, FS*)+0x950>
		return b;
    3456:	f89d 200f 	ldrb.w	r2, [sp, #15]
    345a:	783b      	ldrb	r3, [r7, #0]
    345c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3460:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
    3464:	555a      	strb	r2, [r3, r5]
    3466:	3501      	adds	r5, #1
    3468:	783a      	ldrb	r2, [r7, #0]
    346a:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    346e:	eb09 0383 	add.w	r3, r9, r3, lsl #2
    3472:	88db      	ldrh	r3, [r3, #6]
    3474:	42ab      	cmp	r3, r5
    3476:	d8d8      	bhi.n	342a <LoadFile(StructMenuItem*, FS*)+0x722>
         NumCrtChips++;
    3478:	3201      	adds	r2, #1
		return (f) ? f->available() : 0;
    347a:	6920      	ldr	r0, [r4, #16]
    347c:	703a      	strb	r2, [r7, #0]
    347e:	2800      	cmp	r0, #0
    3480:	d194      	bne.n	33ac <LoadFile(StructMenuItem*, FS*)+0x6a4>
      if (!SetTypeFromCRT(MyMenuItem, EXROM, GAME)) //sends error messages
    3482:	f89d 200e 	ldrb.w	r2, [sp, #14]
    3486:	4650      	mov	r0, sl
    3488:	f89d 100d 	ldrb.w	r1, [sp, #13]
    348c:	f7ff fbe2 	bl	2c54 <SetTypeFromCRT(StructMenuItem*, unsigned char, unsigned char)>
    3490:	4605      	mov	r5, r0
    3492:	2800      	cmp	r0, #0
    3494:	f47f acf7 	bne.w	2e86 <LoadFile(StructMenuItem*, FS*)+0x17e>
		if (f) {
    3498:	f8d4 8010 	ldr.w	r8, [r4, #16]
    349c:	f1b8 0f00 	cmp.w	r8, #0
    34a0:	d056      	beq.n	3550 <LoadFile(StructMenuItem*, FS*)+0x848>
			f->close();
    34a2:	f8d8 3000 	ldr.w	r3, [r8]
    34a6:	4e71      	ldr	r6, [pc, #452]	; (366c <LoadFile(StructMenuItem*, FS*)+0x964>)
    34a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    34aa:	42b3      	cmp	r3, r6
    34ac:	f040 8234 	bne.w	3918 <LoadFile(StructMenuItem*, FS*)+0xc10>
		if (filename) {
    34b0:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
    34b4:	b118      	cbz	r0, 34be <LoadFile(StructMenuItem*, FS*)+0x7b6>
			free(filename);
    34b6:	f00b fe19 	bl	f0ec <free>
			filename = nullptr;
    34ba:	f8c8 5058 	str.w	r5, [r8, #88]	; 0x58
  bool isOpen() const {return m_fFile || m_xFile;}
    34be:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
    34c2:	2b00      	cmp	r3, #0
    34c4:	f000 822b 	beq.w	391e <LoadFile(StructMenuItem*, FS*)+0xc16>
			sdfatfile.close();
    34c8:	f108 0018 	add.w	r0, r8, #24
    34cc:	f006 f992 	bl	97f4 <FsBaseFile::close()>
		if (--(f->refcount) == 0) {
    34d0:	6925      	ldr	r5, [r4, #16]
    34d2:	686b      	ldr	r3, [r5, #4]
    34d4:	f103 38ff 	add.w	r8, r3, #4294967295
    34d8:	f8c5 8004 	str.w	r8, [r5, #4]
    34dc:	f1b8 0f00 	cmp.w	r8, #0
    34e0:	d134      	bne.n	354c <LoadFile(StructMenuItem*, FS*)+0x844>
			f->close();
    34e2:	682b      	ldr	r3, [r5, #0]
    34e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    34e6:	42b3      	cmp	r3, r6
    34e8:	f040 823a 	bne.w	3960 <LoadFile(StructMenuItem*, FS*)+0xc58>
		if (filename) {
    34ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
    34ee:	b118      	cbz	r0, 34f8 <LoadFile(StructMenuItem*, FS*)+0x7f0>
			free(filename);
    34f0:	f00b fdfc 	bl	f0ec <free>
			filename = nullptr;
    34f4:	f8c5 8058 	str.w	r8, [r5, #88]	; 0x58
    34f8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    34fa:	2b00      	cmp	r3, #0
    34fc:	f000 8207 	beq.w	390e <LoadFile(StructMenuItem*, FS*)+0xc06>
			sdfatfile.close();
    3500:	f105 0018 	add.w	r0, r5, #24
    3504:	f006 f976 	bl	97f4 <FsBaseFile::close()>
			delete f;
    3508:	6925      	ldr	r5, [r4, #16]
    350a:	b1fd      	cbz	r5, 354c <LoadFile(StructMenuItem*, FS*)+0x844>
    350c:	682b      	ldr	r3, [r5, #0]
    350e:	4a58      	ldr	r2, [pc, #352]	; (3670 <LoadFile(StructMenuItem*, FS*)+0x968>)
    3510:	685b      	ldr	r3, [r3, #4]
    3512:	4293      	cmp	r3, r2
    3514:	f040 8211 	bne.w	393a <LoadFile(StructMenuItem*, FS*)+0xc32>
	virtual ~SDFile(void) {
    3518:	4b56      	ldr	r3, [pc, #344]	; (3674 <LoadFile(StructMenuItem*, FS*)+0x96c>)
		if (filename) {
    351a:	6da8      	ldr	r0, [r5, #88]	; 0x58
	virtual ~SDFile(void) {
    351c:	602b      	str	r3, [r5, #0]
		if (filename) {
    351e:	b118      	cbz	r0, 3528 <LoadFile(StructMenuItem*, FS*)+0x820>
			free(filename);
    3520:	f00b fde4 	bl	f0ec <free>
			filename = nullptr;
    3524:	2300      	movs	r3, #0
    3526:	65ab      	str	r3, [r5, #88]	; 0x58
    3528:	6d2b      	ldr	r3, [r5, #80]	; 0x50
			sdfatfile.close();
    352a:	f105 0618 	add.w	r6, r5, #24
    352e:	2b00      	cmp	r3, #0
    3530:	f000 81fb 	beq.w	392a <LoadFile(StructMenuItem*, FS*)+0xc22>
    3534:	4630      	mov	r0, r6
    3536:	f006 f95d 	bl	97f4 <FsBaseFile::close()>
    353a:	4b4f      	ldr	r3, [pc, #316]	; (3678 <LoadFile(StructMenuItem*, FS*)+0x970>)
  ~FsBaseFile() {close();}
    353c:	4630      	mov	r0, r6
    353e:	60ab      	str	r3, [r5, #8]
    3540:	f006 f958 	bl	97f4 <FsBaseFile::close()>
	}
    3544:	215c      	movs	r1, #92	; 0x5c
    3546:	4628      	mov	r0, r5
    3548:	f00a f89e 	bl	d688 <operator delete(void*, unsigned int)>
		f = nullptr;
    354c:	2300      	movs	r3, #0
    354e:	6123      	str	r3, [r4, #16]
   for(uint16_t cnt=0; cnt < NumCrtChips; cnt++) 
    3550:	783b      	ldrb	r3, [r7, #0]
    3552:	2b00      	cmp	r3, #0
    3554:	f000 8128 	beq.w	37a8 <LoadFile(StructMenuItem*, FS*)+0xaa0>
    3558:	2500      	movs	r5, #0
    355a:	f8df 8124 	ldr.w	r8, [pc, #292]	; 3680 <LoadFile(StructMenuItem*, FS*)+0x978>
      if((uint32_t)CrtChips[cnt].ChipROM >= 0x20200000) free(CrtChips[cnt].ChipROM);
    355e:	f8df 9124 	ldr.w	r9, [pc, #292]	; 3684 <LoadFile(StructMenuItem*, FS*)+0x97c>
   for(uint16_t cnt=0; cnt < NumCrtChips; cnt++) 
    3562:	462e      	mov	r6, r5
    3564:	e004      	b.n	3570 <LoadFile(StructMenuItem*, FS*)+0x868>
    3566:	783a      	ldrb	r2, [r7, #0]
    3568:	b2b3      	uxth	r3, r6
    356a:	429a      	cmp	r2, r3
    356c:	f240 811c 	bls.w	37a8 <LoadFile(StructMenuItem*, FS*)+0xaa0>
      if((uint32_t)CrtChips[cnt].ChipROM >= 0x20200000) free(CrtChips[cnt].ChipROM);
    3570:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
   for(uint16_t cnt=0; cnt < NumCrtChips; cnt++) 
    3574:	3601      	adds	r6, #1
    3576:	3503      	adds	r5, #3
      if((uint32_t)CrtChips[cnt].ChipROM >= 0x20200000) free(CrtChips[cnt].ChipROM);
    3578:	4548      	cmp	r0, r9
    357a:	d9f4      	bls.n	3566 <LoadFile(StructMenuItem*, FS*)+0x85e>
    357c:	f00b fdb6 	bl	f0ec <free>
    3580:	e7f1      	b.n	3566 <LoadFile(StructMenuItem*, FS*)+0x85e>
    3582:	6d58      	ldr	r0, [r3, #84]	; 0x54
           m_xFile ? m_xFile->read(buf, count) : -1;
    3584:	2800      	cmp	r0, #0
    3586:	f43f aece 	beq.w	3326 <LoadFile(StructMenuItem*, FS*)+0x61e>
    358a:	2201      	movs	r2, #1
    358c:	f10d 010f 	add.w	r1, sp, #15
    3590:	f001 fd9a 	bl	50c8 <ExFatFile::read(void*, unsigned int)>
		if (f->read(&b, 1) < 1) return -1;
    3594:	2800      	cmp	r0, #0
    3596:	f47f aec6 	bne.w	3326 <LoadFile(StructMenuItem*, FS*)+0x61e>
      if (MyMenuItem->Size < 0x1000)
    359a:	23ff      	movs	r3, #255	; 0xff
    359c:	e6c5      	b.n	332a <LoadFile(StructMenuItem*, FS*)+0x622>
    359e:	4618      	mov	r0, r3
    35a0:	2201      	movs	r2, #1
    35a2:	f10d 010f 	add.w	r1, sp, #15
    35a6:	47c0      	blx	r8
    35a8:	e6ba      	b.n	3320 <LoadFile(StructMenuItem*, FS*)+0x618>
   MyMenuItem->Size = myFile.size();
    35aa:	6920      	ldr	r0, [r4, #16]
		return (f) ? f->size() : 0;
    35ac:	2800      	cmp	r0, #0
    35ae:	f040 81da 	bne.w	3966 <LoadFile(StructMenuItem*, FS*)+0xc5e>
   if (MyMenuItem->ItemType == rtFileCrt)
    35b2:	f89a 3000 	ldrb.w	r3, [sl]
   MyMenuItem->Size = myFile.size();
    35b6:	f8ca 000c 	str.w	r0, [sl, #12]
   if (MyMenuItem->ItemType == rtFileCrt)
    35ba:	2b08      	cmp	r3, #8
    35bc:	f47f ac63 	bne.w	2e86 <LoadFile(StructMenuItem*, FS*)+0x17e>
         SendMsgPrintfln("Too Short for CRT");
    35c0:	482e      	ldr	r0, [pc, #184]	; (367c <LoadFile(StructMenuItem*, FS*)+0x974>)
    35c2:	f7ff fa09 	bl	29d8 <SendMsgPrintfln(char const*, ...)>
		if (f) {
    35c6:	6925      	ldr	r5, [r4, #16]
    35c8:	2d00      	cmp	r5, #0
    35ca:	f47f ae58 	bne.w	327e <LoadFile(StructMenuItem*, FS*)+0x576>
    35ce:	e59c      	b.n	310a <LoadFile(StructMenuItem*, FS*)+0x402>
    35d0:	6d50      	ldr	r0, [r2, #84]	; 0x54
    35d2:	2800      	cmp	r0, #0
    35d4:	f43f af15 	beq.w	3402 <LoadFile(StructMenuItem*, FS*)+0x6fa>
    35d8:	2201      	movs	r2, #1
    35da:	f10d 010f 	add.w	r1, sp, #15
    35de:	f001 fd73 	bl	50c8 <ExFatFile::read(void*, unsigned int)>
		if (f->read(&b, 1) < 1) return -1;
    35e2:	2800      	cmp	r0, #0
    35e4:	f47f af0d 	bne.w	3402 <LoadFile(StructMenuItem*, FS*)+0x6fa>
   for(uint16_t cnt=0; cnt < NumCrtChips; cnt++) 
    35e8:	23ff      	movs	r3, #255	; 0xff
    35ea:	e70c      	b.n	3406 <LoadFile(StructMenuItem*, FS*)+0x6fe>
    35ec:	4610      	mov	r0, r2
    35ee:	f10d 010f 	add.w	r1, sp, #15
    35f2:	2201      	movs	r2, #1
    35f4:	4798      	blx	r3
    35f6:	e701      	b.n	33fc <LoadFile(StructMenuItem*, FS*)+0x6f4>
    35f8:	6d58      	ldr	r0, [r3, #84]	; 0x54
    35fa:	2800      	cmp	r0, #0
    35fc:	f43f af2b 	beq.w	3456 <LoadFile(StructMenuItem*, FS*)+0x74e>
    3600:	2201      	movs	r2, #1
    3602:	f10d 010f 	add.w	r1, sp, #15
    3606:	f001 fd5f 	bl	50c8 <ExFatFile::read(void*, unsigned int)>
    360a:	e721      	b.n	3450 <LoadFile(StructMenuItem*, FS*)+0x748>
    360c:	4618      	mov	r0, r3
    360e:	2201      	movs	r2, #1
    3610:	f10d 010f 	add.w	r1, sp, #15
    3614:	47c0      	blx	r8
    3616:	e71b      	b.n	3450 <LoadFile(StructMenuItem*, FS*)+0x748>
		return (f) ? f->available() : 0;
    3618:	4798      	blx	r3
      while (myFile.available())
    361a:	2800      	cmp	r0, #0
    361c:	f47f aed8 	bne.w	33d0 <LoadFile(StructMenuItem*, FS*)+0x6c8>
    3620:	e72f      	b.n	3482 <LoadFile(StructMenuItem*, FS*)+0x77a>
    3622:	6d43      	ldr	r3, [r0, #84]	; 0x54
           m_xFile ? m_xFile->available() : 0;
    3624:	2b00      	cmp	r3, #0
    3626:	f43f af2c 	beq.w	3482 <LoadFile(StructMenuItem*, FS*)+0x77a>
    return isFile() ? fileSize() - curPosition() : 0;
    362a:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
    362e:	0710      	lsls	r0, r2, #28
    3630:	f57f af27 	bpl.w	3482 <LoadFile(StructMenuItem*, FS*)+0x77a>
    3634:	681a      	ldr	r2, [r3, #0]
    3636:	6918      	ldr	r0, [r3, #16]
    3638:	1a80      	subs	r0, r0, r2
    363a:	695a      	ldr	r2, [r3, #20]
    363c:	685b      	ldr	r3, [r3, #4]
    363e:	eb62 0303 	sbc.w	r3, r2, r3
    return n > INT_MAX ? INT_MAX : n;
    3642:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    3646:	f173 0300 	sbcs.w	r3, r3, #0
    364a:	d3e6      	bcc.n	361a <LoadFile(StructMenuItem*, FS*)+0x912>
    364c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    3650:	2800      	cmp	r0, #0
    3652:	f47f aebd 	bne.w	33d0 <LoadFile(StructMenuItem*, FS*)+0x6c8>
    3656:	e714      	b.n	3482 <LoadFile(StructMenuItem*, FS*)+0x77a>
         for (count = 0; count < CrtChips[NumCrtChips].ROMSize; count++) CrtChips[NumCrtChips].ChipROM[count]=myFile.read();//read in ROM info:
    3658:	22ff      	movs	r2, #255	; 0xff
    365a:	e6fe      	b.n	345a <LoadFile(StructMenuItem*, FS*)+0x752>
		return (f) ? f->size() : 0;
    365c:	4790      	blx	r2
    365e:	f7ff bbc4 	b.w	2dea <LoadFile(StructMenuItem*, FS*)+0xe2>
    3662:	bf00      	nop
    3664:	00001b39 	.word	0x00001b39
    3668:	000019b9 	.word	0x000019b9
    366c:	00000e69 	.word	0x00000e69
    3670:	00001c55 	.word	0x00001c55
    3674:	20003358 	.word	0x20003358
    3678:	20003240 	.word	0x20003240
    367c:	20001c70 	.word	0x20001c70
    3680:	2000d2ac 	.word	0x2000d2ac
    3684:	201fffff 	.word	0x201fffff
		if (f) {
    3688:	6927      	ldr	r7, [r4, #16]
    368a:	2f00      	cmp	r7, #0
    368c:	f43f ac50 	beq.w	2f30 <LoadFile(StructMenuItem*, FS*)+0x228>
			f->close();
    3690:	683b      	ldr	r3, [r7, #0]
    3692:	4eab      	ldr	r6, [pc, #684]	; (3940 <LoadFile(StructMenuItem*, FS*)+0xc38>)
    3694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3696:	42b3      	cmp	r3, r6
    3698:	f040 811c 	bne.w	38d4 <LoadFile(StructMenuItem*, FS*)+0xbcc>
		if (filename) {
    369c:	6db8      	ldr	r0, [r7, #88]	; 0x58
    369e:	b110      	cbz	r0, 36a6 <LoadFile(StructMenuItem*, FS*)+0x99e>
			free(filename);
    36a0:	f00b fd24 	bl	f0ec <free>
			filename = nullptr;
    36a4:	65bd      	str	r5, [r7, #88]	; 0x58
  bool isOpen() const {return m_fFile || m_xFile;}
    36a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    36a8:	2b00      	cmp	r3, #0
    36aa:	f000 8100 	beq.w	38ae <LoadFile(StructMenuItem*, FS*)+0xba6>
			sdfatfile.close();
    36ae:	f107 0018 	add.w	r0, r7, #24
    36b2:	f006 f89f 	bl	97f4 <FsBaseFile::close()>
    36b6:	e5f6      	b.n	32a6 <LoadFile(StructMenuItem*, FS*)+0x59e>
    36b8:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    36ba:	2b00      	cmp	r3, #0
    36bc:	f47f ac85 	bne.w	2fca <LoadFile(StructMenuItem*, FS*)+0x2c2>
    36c0:	e487      	b.n	2fd2 <LoadFile(StructMenuItem*, FS*)+0x2ca>
		if (f) {
    36c2:	f8d4 8010 	ldr.w	r8, [r4, #16]
    36c6:	4605      	mov	r5, r0
    36c8:	f1b8 0f00 	cmp.w	r8, #0
    36cc:	d056      	beq.n	377c <LoadFile(StructMenuItem*, FS*)+0xa74>
			f->close();
    36ce:	f8d8 3000 	ldr.w	r3, [r8]
    36d2:	4e9b      	ldr	r6, [pc, #620]	; (3940 <LoadFile(StructMenuItem*, FS*)+0xc38>)
    36d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    36d6:	42b3      	cmp	r3, r6
    36d8:	f040 80f9 	bne.w	38ce <LoadFile(StructMenuItem*, FS*)+0xbc6>
		if (filename) {
    36dc:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
    36e0:	b118      	cbz	r0, 36ea <LoadFile(StructMenuItem*, FS*)+0x9e2>
			free(filename);
    36e2:	f00b fd03 	bl	f0ec <free>
			filename = nullptr;
    36e6:	f8c8 5058 	str.w	r5, [r8, #88]	; 0x58
    36ea:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
    36ee:	2b00      	cmp	r3, #0
    36f0:	f000 80e7 	beq.w	38c2 <LoadFile(StructMenuItem*, FS*)+0xbba>
			sdfatfile.close();
    36f4:	f108 0018 	add.w	r0, r8, #24
    36f8:	f006 f87c 	bl	97f4 <FsBaseFile::close()>
		if (--(f->refcount) == 0) {
    36fc:	6925      	ldr	r5, [r4, #16]
    36fe:	686b      	ldr	r3, [r5, #4]
    3700:	f103 38ff 	add.w	r8, r3, #4294967295
    3704:	f8c5 8004 	str.w	r8, [r5, #4]
    3708:	f1b8 0f00 	cmp.w	r8, #0
    370c:	d134      	bne.n	3778 <LoadFile(StructMenuItem*, FS*)+0xa70>
			f->close();
    370e:	682b      	ldr	r3, [r5, #0]
    3710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3712:	42b3      	cmp	r3, r6
    3714:	f040 80f0 	bne.w	38f8 <LoadFile(StructMenuItem*, FS*)+0xbf0>
		if (filename) {
    3718:	6da8      	ldr	r0, [r5, #88]	; 0x58
    371a:	b118      	cbz	r0, 3724 <LoadFile(StructMenuItem*, FS*)+0xa1c>
			free(filename);
    371c:	f00b fce6 	bl	f0ec <free>
			filename = nullptr;
    3720:	f8c5 8058 	str.w	r8, [r5, #88]	; 0x58
    3724:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    3726:	2b00      	cmp	r3, #0
    3728:	f000 80e1 	beq.w	38ee <LoadFile(StructMenuItem*, FS*)+0xbe6>
			sdfatfile.close();
    372c:	f105 0018 	add.w	r0, r5, #24
    3730:	f006 f860 	bl	97f4 <FsBaseFile::close()>
			delete f;
    3734:	6925      	ldr	r5, [r4, #16]
    3736:	b1fd      	cbz	r5, 3778 <LoadFile(StructMenuItem*, FS*)+0xa70>
    3738:	682b      	ldr	r3, [r5, #0]
    373a:	4a82      	ldr	r2, [pc, #520]	; (3944 <LoadFile(StructMenuItem*, FS*)+0xc3c>)
    373c:	685b      	ldr	r3, [r3, #4]
    373e:	4293      	cmp	r3, r2
    3740:	f040 80dd 	bne.w	38fe <LoadFile(StructMenuItem*, FS*)+0xbf6>
	virtual ~SDFile(void) {
    3744:	4b80      	ldr	r3, [pc, #512]	; (3948 <LoadFile(StructMenuItem*, FS*)+0xc40>)
		if (filename) {
    3746:	6da8      	ldr	r0, [r5, #88]	; 0x58
	virtual ~SDFile(void) {
    3748:	602b      	str	r3, [r5, #0]
		if (filename) {
    374a:	b118      	cbz	r0, 3754 <LoadFile(StructMenuItem*, FS*)+0xa4c>
			free(filename);
    374c:	f00b fcce 	bl	f0ec <free>
			filename = nullptr;
    3750:	2300      	movs	r3, #0
    3752:	65ab      	str	r3, [r5, #88]	; 0x58
    3754:	6d2b      	ldr	r3, [r5, #80]	; 0x50
			sdfatfile.close();
    3756:	f105 0618 	add.w	r6, r5, #24
    375a:	2b00      	cmp	r3, #0
    375c:	f000 80d2 	beq.w	3904 <LoadFile(StructMenuItem*, FS*)+0xbfc>
    3760:	4630      	mov	r0, r6
    3762:	f006 f847 	bl	97f4 <FsBaseFile::close()>
    3766:	4b79      	ldr	r3, [pc, #484]	; (394c <LoadFile(StructMenuItem*, FS*)+0xc44>)
  ~FsBaseFile() {close();}
    3768:	4630      	mov	r0, r6
    376a:	60ab      	str	r3, [r5, #8]
    376c:	f006 f842 	bl	97f4 <FsBaseFile::close()>
	}
    3770:	215c      	movs	r1, #92	; 0x5c
    3772:	4628      	mov	r0, r5
    3774:	f009 ff88 	bl	d688 <operator delete(void*, unsigned int)>
		f = nullptr;
    3778:	2300      	movs	r3, #0
    377a:	6123      	str	r3, [r4, #16]
   for(uint16_t cnt=0; cnt < NumCrtChips; cnt++) 
    377c:	783b      	ldrb	r3, [r7, #0]
    377e:	b19b      	cbz	r3, 37a8 <LoadFile(StructMenuItem*, FS*)+0xaa0>
    3780:	2500      	movs	r5, #0
    3782:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 3958 <LoadFile(StructMenuItem*, FS*)+0xc50>
      if((uint32_t)CrtChips[cnt].ChipROM >= 0x20200000) free(CrtChips[cnt].ChipROM);
    3786:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 395c <LoadFile(StructMenuItem*, FS*)+0xc54>
   for(uint16_t cnt=0; cnt < NumCrtChips; cnt++) 
    378a:	462e      	mov	r6, r5
    378c:	e003      	b.n	3796 <LoadFile(StructMenuItem*, FS*)+0xa8e>
    378e:	783a      	ldrb	r2, [r7, #0]
    3790:	b2b3      	uxth	r3, r6
    3792:	429a      	cmp	r2, r3
    3794:	d908      	bls.n	37a8 <LoadFile(StructMenuItem*, FS*)+0xaa0>
      if((uint32_t)CrtChips[cnt].ChipROM >= 0x20200000) free(CrtChips[cnt].ChipROM);
    3796:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
   for(uint16_t cnt=0; cnt < NumCrtChips; cnt++) 
    379a:	3601      	adds	r6, #1
    379c:	3503      	adds	r5, #3
      if((uint32_t)CrtChips[cnt].ChipROM >= 0x20200000) free(CrtChips[cnt].ChipROM);
    379e:	4548      	cmp	r0, r9
    37a0:	d9f5      	bls.n	378e <LoadFile(StructMenuItem*, FS*)+0xa86>
    37a2:	f00b fca3 	bl	f0ec <free>
    37a6:	e7f2      	b.n	378e <LoadFile(StructMenuItem*, FS*)+0xa86>
         IO1[rwRegNextIOHndlr] = IOH_None;  //EEPROM.read(eepAdNextIOHndlr);  //in case it was over-ridden by .crt
    37a8:	4b69      	ldr	r3, [pc, #420]	; (3950 <LoadFile(StructMenuItem*, FS*)+0xc48>)
   NumCrtChips = 0;
    37aa:	2200      	movs	r2, #0
         IO1[rwRegNextIOHndlr] = IOH_None;  //EEPROM.read(eepAdNextIOHndlr);  //in case it was over-ridden by .crt
    37ac:	681b      	ldr	r3, [r3, #0]
   NumCrtChips = 0;
    37ae:	703a      	strb	r2, [r7, #0]
         IO1[rwRegNextIOHndlr] = IOH_None;  //EEPROM.read(eepAdNextIOHndlr);  //in case it was over-ridden by .crt
    37b0:	74da      	strb	r2, [r3, #19]
   if((IO1[rWRegCurrMenuWAIT] == rmtSD || IO1[rWRegCurrMenuWAIT] == rmtUSBDrive) && DriveDirMenu == NULL)
    37b2:	7a9a      	ldrb	r2, [r3, #10]
    37b4:	b95a      	cbnz	r2, 37ce <LoadFile(StructMenuItem*, FS*)+0xac6>
    37b6:	4a67      	ldr	r2, [pc, #412]	; (3954 <LoadFile(StructMenuItem*, FS*)+0xc4c>)
    37b8:	6812      	ldr	r2, [r2, #0]
    37ba:	2a00      	cmp	r2, #0
    37bc:	d07c      	beq.n	38b8 <LoadFile(StructMenuItem*, FS*)+0xbb0>
		if (f) dec_refcount();
    37be:	6925      	ldr	r5, [r4, #16]
    37c0:	e4be      	b.n	3140 <LoadFile(StructMenuItem*, FS*)+0x438>
			f->close();
    37c2:	4628      	mov	r0, r5
    37c4:	4798      	blx	r3
    37c6:	e4d7      	b.n	3178 <LoadFile(StructMenuItem*, FS*)+0x470>
			f->close();
    37c8:	4628      	mov	r0, r5
    37ca:	4798      	blx	r3
    37cc:	e401      	b.n	2fd2 <LoadFile(StructMenuItem*, FS*)+0x2ca>
    37ce:	7a9a      	ldrb	r2, [r3, #10]
    37d0:	2a02      	cmp	r2, #2
    37d2:	d1f4      	bne.n	37be <LoadFile(StructMenuItem*, FS*)+0xab6>
    37d4:	e7ef      	b.n	37b6 <LoadFile(StructMenuItem*, FS*)+0xaae>
  bool isOpen() const {return m_fFile || m_xFile;}
    37d6:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    37d8:	2b00      	cmp	r3, #0
    37da:	f47f ac2f 	bne.w	303c <LoadFile(StructMenuItem*, FS*)+0x334>
    37de:	e430      	b.n	3042 <LoadFile(StructMenuItem*, FS*)+0x33a>
    37e0:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    37e2:	2b00      	cmp	r3, #0
    37e4:	f47f ac53 	bne.w	308e <LoadFile(StructMenuItem*, FS*)+0x386>
    37e8:	e455      	b.n	3096 <LoadFile(StructMenuItem*, FS*)+0x38e>
    37ea:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    37ec:	2b00      	cmp	r3, #0
    37ee:	f47f ad6f 	bne.w	32d0 <LoadFile(StructMenuItem*, FS*)+0x5c8>
    37f2:	e468      	b.n	30c6 <LoadFile(StructMenuItem*, FS*)+0x3be>
    37f4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    37f6:	2b00      	cmp	r3, #0
    37f8:	f47f ab8d 	bne.w	2f16 <LoadFile(StructMenuItem*, FS*)+0x20e>
    37fc:	f7ff bb8e 	b.w	2f1c <LoadFile(StructMenuItem*, FS*)+0x214>
    3800:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    3802:	2b00      	cmp	r3, #0
    3804:	f47f ab55 	bne.w	2eb2 <LoadFile(StructMenuItem*, FS*)+0x1aa>
    3808:	f7ff bb57 	b.w	2eba <LoadFile(StructMenuItem*, FS*)+0x1b2>
    380c:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    380e:	2b00      	cmp	r3, #0
    3810:	f47f acc9 	bne.w	31a6 <LoadFile(StructMenuItem*, FS*)+0x49e>
    3814:	e4ca      	b.n	31ac <LoadFile(StructMenuItem*, FS*)+0x4a4>
    3816:	4628      	mov	r0, r5
    3818:	4798      	blx	r3
    381a:	f7ff bb4e 	b.w	2eba <LoadFile(StructMenuItem*, FS*)+0x1b2>
			delete f;
    381e:	4628      	mov	r0, r5
    3820:	4798      	blx	r3
    3822:	e472      	b.n	310a <LoadFile(StructMenuItem*, FS*)+0x402>
   if (MyMenuItem->ItemType == rtFileCrt)
    3824:	f89a 2000 	ldrb.w	r2, [sl]
   MyMenuItem->Size = myFile.size();
    3828:	f8ca 300c 	str.w	r3, [sl, #12]
   if (MyMenuItem->ItemType == rtFileCrt)
    382c:	2a08      	cmp	r2, #8
    382e:	f43f aec7 	beq.w	35c0 <LoadFile(StructMenuItem*, FS*)+0x8b8>
		return (f) ? f->available() : 0;
    3832:	6923      	ldr	r3, [r4, #16]
    3834:	f7ff bae8 	b.w	2e08 <LoadFile(StructMenuItem*, FS*)+0x100>
    3838:	22ff      	movs	r2, #255	; 0xff
    383a:	f7ff bb1a 	b.w	2e72 <LoadFile(StructMenuItem*, FS*)+0x16a>
    383e:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
    3842:	2b00      	cmp	r3, #0
    3844:	f47f abe0 	bne.w	3008 <LoadFile(StructMenuItem*, FS*)+0x300>
    3848:	f7ff bbe2 	b.w	3010 <LoadFile(StructMenuItem*, FS*)+0x308>
			f->close();
    384c:	4640      	mov	r0, r8
    384e:	4798      	blx	r3
    3850:	f7ff bbde 	b.w	3010 <LoadFile(StructMenuItem*, FS*)+0x308>
    3854:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3856:	2b00      	cmp	r3, #0
    3858:	f47f ab43 	bne.w	2ee2 <LoadFile(StructMenuItem*, FS*)+0x1da>
    385c:	f7ff bb45 	b.w	2eea <LoadFile(StructMenuItem*, FS*)+0x1e2>
    3860:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    3862:	2b00      	cmp	r3, #0
    3864:	f47f ad1b 	bne.w	329e <LoadFile(StructMenuItem*, FS*)+0x596>
    3868:	e51d      	b.n	32a6 <LoadFile(StructMenuItem*, FS*)+0x59e>
    386a:	4638      	mov	r0, r7
    386c:	4798      	blx	r3
    386e:	f7ff bb3c 	b.w	2eea <LoadFile(StructMenuItem*, FS*)+0x1e2>
			f->close();
    3872:	4628      	mov	r0, r5
    3874:	4798      	blx	r3
    3876:	e516      	b.n	32a6 <LoadFile(StructMenuItem*, FS*)+0x59e>
    3878:	6d63      	ldr	r3, [r4, #84]	; 0x54
    387a:	2b00      	cmp	r3, #0
    387c:	f47f ac39 	bne.w	30f2 <LoadFile(StructMenuItem*, FS*)+0x3ea>
    3880:	e43a      	b.n	30f8 <LoadFile(StructMenuItem*, FS*)+0x3f0>
			delete f;
    3882:	4628      	mov	r0, r5
    3884:	4798      	blx	r3
    3886:	f7ff bbe5 	b.w	3054 <LoadFile(StructMenuItem*, FS*)+0x34c>
			f->close();
    388a:	4628      	mov	r0, r5
    388c:	4798      	blx	r3
    388e:	e402      	b.n	3096 <LoadFile(StructMenuItem*, FS*)+0x38e>
			delete f;
    3890:	4620      	mov	r0, r4
    3892:	4798      	blx	r3
		if (f) dec_refcount();
    3894:	e439      	b.n	310a <LoadFile(StructMenuItem*, FS*)+0x402>
			delete f;
    3896:	4620      	mov	r0, r4
    3898:	4798      	blx	r3
		if (f) dec_refcount();
    389a:	f7ff bb48 	b.w	2f2e <LoadFile(StructMenuItem*, FS*)+0x226>
			f->close();
    389e:	4628      	mov	r0, r5
    38a0:	4798      	blx	r3
    38a2:	e410      	b.n	30c6 <LoadFile(StructMenuItem*, FS*)+0x3be>
      while (myFile.available() && count < MyMenuItem->Size) RAM_Image[count++]=myFile.read();
    38a4:	23ff      	movs	r3, #255	; 0xff
    38a6:	3701      	adds	r7, #1
    38a8:	702b      	strb	r3, [r5, #0]
		return (f) ? f->available() : 0;
    38aa:	f7ff bae7 	b.w	2e7c <LoadFile(StructMenuItem*, FS*)+0x174>
    38ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    38b0:	2b00      	cmp	r3, #0
    38b2:	f47f aefc 	bne.w	36ae <LoadFile(StructMenuItem*, FS*)+0x9a6>
    38b6:	e4f6      	b.n	32a6 <LoadFile(StructMenuItem*, FS*)+0x59e>
      IO1[rWRegCurrMenuWAIT] = rmtTeensy;
    38b8:	2201      	movs	r2, #1
    38ba:	729a      	strb	r2, [r3, #10]
      MenuChange();
    38bc:	f7fe ff72 	bl	27a4 <MenuChange()>
    38c0:	e77d      	b.n	37be <LoadFile(StructMenuItem*, FS*)+0xab6>
    38c2:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
    38c6:	2b00      	cmp	r3, #0
    38c8:	f47f af14 	bne.w	36f4 <LoadFile(StructMenuItem*, FS*)+0x9ec>
    38cc:	e716      	b.n	36fc <LoadFile(StructMenuItem*, FS*)+0x9f4>
			f->close();
    38ce:	4640      	mov	r0, r8
    38d0:	4798      	blx	r3
    38d2:	e713      	b.n	36fc <LoadFile(StructMenuItem*, FS*)+0x9f4>
    38d4:	4638      	mov	r0, r7
    38d6:	4798      	blx	r3
    38d8:	e4e5      	b.n	32a6 <LoadFile(StructMenuItem*, FS*)+0x59e>
    38da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    38dc:	2b00      	cmp	r3, #0
    38de:	f47f abee 	bne.w	30be <LoadFile(StructMenuItem*, FS*)+0x3b6>
    38e2:	f7ff bbf0 	b.w	30c6 <LoadFile(StructMenuItem*, FS*)+0x3be>
			f->close();
    38e6:	4638      	mov	r0, r7
    38e8:	4798      	blx	r3
    38ea:	f7ff bbec 	b.w	30c6 <LoadFile(StructMenuItem*, FS*)+0x3be>
    38ee:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    38f0:	2b00      	cmp	r3, #0
    38f2:	f47f af1b 	bne.w	372c <LoadFile(StructMenuItem*, FS*)+0xa24>
    38f6:	e71d      	b.n	3734 <LoadFile(StructMenuItem*, FS*)+0xa2c>
    38f8:	4628      	mov	r0, r5
    38fa:	4798      	blx	r3
    38fc:	e71a      	b.n	3734 <LoadFile(StructMenuItem*, FS*)+0xa2c>
			delete f;
    38fe:	4628      	mov	r0, r5
    3900:	4798      	blx	r3
    3902:	e739      	b.n	3778 <LoadFile(StructMenuItem*, FS*)+0xa70>
    3904:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    3906:	2b00      	cmp	r3, #0
    3908:	f47f af2a 	bne.w	3760 <LoadFile(StructMenuItem*, FS*)+0xa58>
    390c:	e72b      	b.n	3766 <LoadFile(StructMenuItem*, FS*)+0xa5e>
    390e:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    3910:	2b00      	cmp	r3, #0
    3912:	f47f adf5 	bne.w	3500 <LoadFile(StructMenuItem*, FS*)+0x7f8>
    3916:	e5f7      	b.n	3508 <LoadFile(StructMenuItem*, FS*)+0x800>
			f->close();
    3918:	4640      	mov	r0, r8
    391a:	4798      	blx	r3
    391c:	e5d8      	b.n	34d0 <LoadFile(StructMenuItem*, FS*)+0x7c8>
    391e:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
    3922:	2b00      	cmp	r3, #0
    3924:	f47f add0 	bne.w	34c8 <LoadFile(StructMenuItem*, FS*)+0x7c0>
    3928:	e5d2      	b.n	34d0 <LoadFile(StructMenuItem*, FS*)+0x7c8>
    392a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    392c:	2b00      	cmp	r3, #0
    392e:	f47f ae01 	bne.w	3534 <LoadFile(StructMenuItem*, FS*)+0x82c>
    3932:	e602      	b.n	353a <LoadFile(StructMenuItem*, FS*)+0x832>
		return (f) ? f->available() : 0;
    3934:	461f      	mov	r7, r3
    3936:	f7ff baa3 	b.w	2e80 <LoadFile(StructMenuItem*, FS*)+0x178>
			delete f;
    393a:	4628      	mov	r0, r5
    393c:	4798      	blx	r3
    393e:	e605      	b.n	354c <LoadFile(StructMenuItem*, FS*)+0x844>
    3940:	00000e69 	.word	0x00000e69
    3944:	00001c55 	.word	0x00001c55
    3948:	20003358 	.word	0x20003358
    394c:	20003240 	.word	0x20003240
    3950:	2000dae4 	.word	0x2000dae4
    3954:	2000d8b0 	.word	0x2000d8b0
    3958:	2000d2ac 	.word	0x2000d2ac
    395c:	201fffff 	.word	0x201fffff
			f->close();
    3960:	4628      	mov	r0, r5
    3962:	4798      	blx	r3
    3964:	e5d0      	b.n	3508 <LoadFile(StructMenuItem*, FS*)+0x800>
		return (f) ? f->size() : 0;
    3966:	6802      	ldr	r2, [r0, #0]
    3968:	4b04      	ldr	r3, [pc, #16]	; (397c <LoadFile(StructMenuItem*, FS*)+0xc74>)
    396a:	6a92      	ldr	r2, [r2, #40]	; 0x28
    396c:	429a      	cmp	r2, r3
    396e:	f47f ae75 	bne.w	365c <LoadFile(StructMenuItem*, FS*)+0x954>
    return m_fFile ? m_fFile->fileSize() :
    3972:	6d03      	ldr	r3, [r0, #80]	; 0x50
    3974:	2b00      	cmp	r3, #0
    3976:	f47f aa37 	bne.w	2de8 <LoadFile(StructMenuItem*, FS*)+0xe0>
    397a:	e460      	b.n	323e <LoadFile(StructMenuItem*, FS*)+0x536>
    397c:	000017c1 	.word	0x000017c1

00003980 <SendMsgPrintf(char const*, ...)>:
{
    3980:	b40f      	push	{r0, r1, r2, r3}
    3982:	b500      	push	{lr}
    3984:	b083      	sub	sp, #12
   vsprintf(SerialStringBuf, Fmt, ap); 
    3986:	4807      	ldr	r0, [pc, #28]	; (39a4 <SendMsgPrintf(char const*, ...)+0x24>)
{
    3988:	aa04      	add	r2, sp, #16
    398a:	f852 1b04 	ldr.w	r1, [r2], #4
   va_start(ap,Fmt);
    398e:	9201      	str	r2, [sp, #4]
   vsprintf(SerialStringBuf, Fmt, ap); 
    3990:	f00d fa16 	bl	10dc0 <vsprintf>
   SendMsgSerialStringBuf() ;
    3994:	f7fe fff4 	bl	2980 <SendMsgSerialStringBuf()>
}
    3998:	b003      	add	sp, #12
    399a:	f85d eb04 	ldr.w	lr, [sp], #4
    399e:	b004      	add	sp, #16
    39a0:	4770      	bx	lr
    39a2:	bf00      	nop
    39a4:	2000bfe8 	.word	0x2000bfe8

000039a8 <read_ascii_line(Stream*, char*, int)>:
{
    39a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int c=0, nchar=0;
    39ac:	2400      	movs	r4, #0
{
    39ae:	4605      	mov	r5, r0
    39b0:	4688      	mov	r8, r1
    39b2:	4617      	mov	r7, r2
  while (serial->available()) {
    39b4:	682b      	ldr	r3, [r5, #0]
    39b6:	4628      	mov	r0, r5
    39b8:	691b      	ldr	r3, [r3, #16]
    39ba:	4798      	blx	r3
    39bc:	4606      	mov	r6, r0
    c = serial->read();
    39be:	4628      	mov	r0, r5
  while (serial->available()) {
    39c0:	b156      	cbz	r6, 39d8 <read_ascii_line(Stream*, char*, int)+0x30>
    c = serial->read();
    39c2:	682b      	ldr	r3, [r5, #0]
    39c4:	695b      	ldr	r3, [r3, #20]
    39c6:	4798      	blx	r3
    if (c == '\n' || c == '\r')
    39c8:	280a      	cmp	r0, #10
    c = serial->read();
    39ca:	4604      	mov	r4, r0
    if (c == '\n' || c == '\r')
    39cc:	d0f2      	beq.n	39b4 <read_ascii_line(Stream*, char*, int)+0xc>
    39ce:	280d      	cmp	r0, #13
    39d0:	d0f0      	beq.n	39b4 <read_ascii_line(Stream*, char*, int)+0xc>
      line[nchar++] = c;
    39d2:	2601      	movs	r6, #1
    39d4:	f888 0000 	strb.w	r0, [r8]
      break;
    39d8:	f106 39ff 	add.w	r9, r6, #4294967295
    39dc:	44c1      	add	r9, r8
    39de:	e007      	b.n	39f0 <read_ascii_line(Stream*, char*, int)+0x48>
  while (nchar < maxbytes && !(c == '\n' || c == '\r')) {
    39e0:	2c0a      	cmp	r4, #10
    39e2:	d008      	beq.n	39f6 <read_ascii_line(Stream*, char*, int)+0x4e>
    39e4:	2c0d      	cmp	r4, #13
    39e6:	d006      	beq.n	39f6 <read_ascii_line(Stream*, char*, int)+0x4e>
    if (serial->available()) {
    39e8:	682b      	ldr	r3, [r5, #0]
    39ea:	691b      	ldr	r3, [r3, #16]
    39ec:	4798      	blx	r3
    39ee:	b940      	cbnz	r0, 3a02 <read_ascii_line(Stream*, char*, int)+0x5a>
  while (nchar < maxbytes && !(c == '\n' || c == '\r')) {
    39f0:	42be      	cmp	r6, r7
    if (serial->available()) {
    39f2:	4628      	mov	r0, r5
  while (nchar < maxbytes && !(c == '\n' || c == '\r')) {
    39f4:	dbf4      	blt.n	39e0 <read_ascii_line(Stream*, char*, int)+0x38>
  line[nchar-1] = 0;	// null-terminate
    39f6:	4446      	add	r6, r8
    39f8:	2300      	movs	r3, #0
    39fa:	f806 3c01 	strb.w	r3, [r6, #-1]
}
    39fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      c = serial->read();
    3a02:	682b      	ldr	r3, [r5, #0]
    3a04:	4628      	mov	r0, r5
      line[nchar++] = c;
    3a06:	3601      	adds	r6, #1
      c = serial->read();
    3a08:	695b      	ldr	r3, [r3, #20]
    3a0a:	4798      	blx	r3
    3a0c:	4604      	mov	r4, r0
      line[nchar++] = c;
    3a0e:	f809 0f01 	strb.w	r0, [r9, #1]!
    3a12:	e7ed      	b.n	39f0 <read_ascii_line(Stream*, char*, int)+0x48>

00003a14 <process_hex_record(hex_info_t*)>:
  if (hex->code==0) { // data -- update min/max address so far
    3a14:	6882      	ldr	r2, [r0, #8]
{
    3a16:	4603      	mov	r3, r0
  if (hex->code==0) { // data -- update min/max address so far
    3a18:	b992      	cbnz	r2, 3a40 <process_hex_record(hex_info_t*)+0x2c>
    if (hex->base + hex->addr + hex->num > hex->max)
    3a1a:	e9d0 1203 	ldrd	r1, r2, [r0, #12]
{
    3a1e:	b410      	push	{r4}
    if (hex->base + hex->addr + hex->num > hex->max)
    3a20:	685c      	ldr	r4, [r3, #4]
    3a22:	6980      	ldr	r0, [r0, #24]
    3a24:	4422      	add	r2, r4
    3a26:	4411      	add	r1, r2
    3a28:	4281      	cmp	r1, r0
  return 0;
    3a2a:	f04f 0000 	mov.w	r0, #0
      hex->max = hex->base + hex->addr + hex->num;
    3a2e:	bf88      	it	hi
    3a30:	6199      	strhi	r1, [r3, #24]
    if (hex->base + hex->addr < hex->min)
    3a32:	6959      	ldr	r1, [r3, #20]
    3a34:	428a      	cmp	r2, r1
    3a36:	d200      	bcs.n	3a3a <process_hex_record(hex_info_t*)+0x26>
      hex->min = hex->base + hex->addr;
    3a38:	615a      	str	r2, [r3, #20]
}
    3a3a:	f85d 4b04 	ldr.w	r4, [sp], #4
    3a3e:	4770      	bx	lr
  else if (hex->code==1) { // EOF (:flash command not received yet)
    3a40:	3a01      	subs	r2, #1
    3a42:	2a04      	cmp	r2, #4
    3a44:	d81d      	bhi.n	3a82 <process_hex_record(hex_info_t*)+0x6e>
    3a46:	e8df f002 	tbb	[pc, r2]
    3a4a:	0d09      	.short	0x0d09
    3a4c:	151c      	.short	0x151c
    3a4e:	03          	.byte	0x03
    3a4f:	00          	.byte	0x00
    hex->base = (hex->data[0] << 24) | (hex->data[1] << 16)
    3a50:	6802      	ldr	r2, [r0, #0]
  return 0;
    3a52:	2000      	movs	r0, #0
    3a54:	6812      	ldr	r2, [r2, #0]
    3a56:	ba12      	rev	r2, r2
    hex->base = (hex->data[0] << 24) | (hex->data[1] << 16)
    3a58:	611a      	str	r2, [r3, #16]
    3a5a:	4770      	bx	lr
    hex->eof = 1;
    3a5c:	2201      	movs	r2, #1
  return 0;
    3a5e:	2000      	movs	r0, #0
    hex->eof = 1;
    3a60:	61da      	str	r2, [r3, #28]
    3a62:	4770      	bx	lr
    hex->base = ((hex->data[0] << 8) | hex->data[1]) << 4;
    3a64:	6802      	ldr	r2, [r0, #0]
  return 0;
    3a66:	2000      	movs	r0, #0
    hex->base = ((hex->data[0] << 8) | hex->data[1]) << 4;
    3a68:	8812      	ldrh	r2, [r2, #0]
    3a6a:	ba52      	rev16	r2, r2
    3a6c:	b292      	uxth	r2, r2
    3a6e:	0112      	lsls	r2, r2, #4
    3a70:	611a      	str	r2, [r3, #16]
    3a72:	4770      	bx	lr
    hex->base = ((hex->data[0] << 8) | hex->data[1]) << 16;
    3a74:	6802      	ldr	r2, [r0, #0]
  return 0;
    3a76:	2000      	movs	r0, #0
    hex->base = ((hex->data[0] << 8) | hex->data[1]) << 16;
    3a78:	8812      	ldrh	r2, [r2, #0]
    3a7a:	ba52      	rev16	r2, r2
    3a7c:	0412      	lsls	r2, r2, #16
    3a7e:	611a      	str	r2, [r3, #16]
    3a80:	4770      	bx	lr
  if (hex->code==0) { // data -- update min/max address so far
    3a82:	2001      	movs	r0, #1
}
    3a84:	4770      	bx	lr
    3a86:	bf00      	nop

00003a88 <flash_write_block>:

//******************************************************************************
// take a 32-bit aligned array of 32-bit values and write it to erased flash
//******************************************************************************
int flash_write_block( uint32_t addr, char *data, uint32_t count )
{
    3a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  static uint32_t next_addr = 0;			// expected address
  
  int ret = 0;						// return value
  uint32_t data_i = 0;					// index to data array

  if ((addr % 4) != 0 || (count % 4) != 0) {		// if not 32-bit aligned
    3a8c:	ea40 0302 	orr.w	r3, r0, r2
    3a90:	079b      	lsls	r3, r3, #30
    3a92:	d002      	beq.n	3a9a <flash_write_block+0x12>
    return 1;	// "flash_block align error\n"		//   return error code 1
    3a94:	2001      	movs	r0, #1
    }
    buf_count = 0;					//   re-init buf count
    addr += FLASH_WRITE_SIZE;				//   advance address
  }  
  return 0;						// return success
}
    3a96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (buf_count > 0 && addr != next_addr) {		// if unexpected address   
    3a9a:	4f15      	ldr	r7, [pc, #84]	; (3af0 <flash_write_block+0x68>)
    3a9c:	4c15      	ldr	r4, [pc, #84]	; (3af4 <flash_write_block+0x6c>)
    3a9e:	683b      	ldr	r3, [r7, #0]
    3aa0:	b113      	cbz	r3, 3aa8 <flash_write_block+0x20>
    3aa2:	6825      	ldr	r5, [r4, #0]
    3aa4:	42a8      	cmp	r0, r5
    3aa6:	d120      	bne.n	3aea <flash_write_block+0x62>
  next_addr = addr + count;				//   compute next address
    3aa8:	1885      	adds	r5, r0, r2
    3aaa:	6025      	str	r5, [r4, #0]
  addr -= buf_count;					//   address of data[0]
    3aac:	1ac5      	subs	r5, r0, r3
  while (data_i < count) {				// while more data
    3aae:	b1ca      	cbz	r2, 3ae4 <flash_write_block+0x5c>
    3ab0:	1e4c      	subs	r4, r1, #1
    3ab2:	f8df 8044 	ldr.w	r8, [pc, #68]	; 3af8 <flash_write_block+0x70>
    buf_count = 0;					//   re-init buf count
    3ab6:	f04f 0900 	mov.w	r9, #0
    3aba:	18a6      	adds	r6, r4, r2
    3abc:	e000      	b.n	3ac0 <flash_write_block+0x38>
    ((char*)&buf)[buf_count++] = data[data_i++];	//   copy a byte to buf
    3abe:	683b      	ldr	r3, [r7, #0]
    3ac0:	1c59      	adds	r1, r3, #1
    3ac2:	f814 cf01 	ldrb.w	ip, [r4, #1]!
      eepromemu_flash_write((void*)addr,(void*)&buf,4);	//     flash_write()
    3ac6:	4628      	mov	r0, r5
    3ac8:	2204      	movs	r2, #4
    if (buf_count < FLASH_WRITE_SIZE) {			//   if buf not complete
    3aca:	2903      	cmp	r1, #3
    ((char*)&buf)[buf_count++] = data[data_i++];	//   copy a byte to buf
    3acc:	6039      	str	r1, [r7, #0]
    3ace:	f808 c003 	strb.w	ip, [r8, r3]
      eepromemu_flash_write((void*)addr,(void*)&buf,4);	//     flash_write()
    3ad2:	4641      	mov	r1, r8
    if (buf_count < FLASH_WRITE_SIZE) {			//   if buf not complete
    3ad4:	d904      	bls.n	3ae0 <flash_write_block+0x58>
    addr += FLASH_WRITE_SIZE;				//   advance address
    3ad6:	4415      	add	r5, r2
      eepromemu_flash_write((void*)addr,(void*)&buf,4);	//     flash_write()
    3ad8:	f009 fb32 	bl	d140 <eepromemu_flash_write>
    buf_count = 0;					//   re-init buf count
    3adc:	f8c7 9000 	str.w	r9, [r7]
  while (data_i < count) {				// while more data
    3ae0:	42b4      	cmp	r4, r6
    3ae2:	d1ec      	bne.n	3abe <flash_write_block+0x36>
  return 0;						// return success
    3ae4:	2000      	movs	r0, #0
}
    3ae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return 2;	// "unexpected address\n"		//   return error code 2   
    3aea:	2002      	movs	r0, #2
    3aec:	e7d3      	b.n	3a96 <flash_write_block+0xe>
    3aee:	bf00      	nop
    3af0:	2005e0d0 	.word	0x2005e0d0
    3af4:	2005e0d4 	.word	0x2005e0d4
    3af8:	2005e0cc 	.word	0x2005e0cc

00003afc <update_firmware(Stream*, Stream*, unsigned long, unsigned long)>:
{
    3afc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  hex_info_t hex = {					// intel hex info struct
    3b00:	4f59      	ldr	r7, [pc, #356]	; (3c68 <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0x16c>)
{
    3b02:	b08d      	sub	sp, #52	; 0x34
    3b04:	4606      	mov	r6, r0
    3b06:	4615      	mov	r5, r2
  hex_info_t hex = {					// intel hex info struct
    3b08:	ac03      	add	r4, sp, #12
{
    3b0a:	4698      	mov	r8, r3
  hex_info_t hex = {					// intel hex info struct
    3b0c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    3b0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3b10:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    3b12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3b14:	683b      	ldr	r3, [r7, #0]
  SendMsgPrintfln("Reading hex file");  
    3b16:	4855      	ldr	r0, [pc, #340]	; (3c6c <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0x170>)
  hex_info_t hex = {					// intel hex info struct
    3b18:	6023      	str	r3, [r4, #0]
  SendMsgPrintfln("Reading hex file");  
    3b1a:	f7fe ff5d 	bl	29d8 <SendMsgPrintfln(char const*, ...)>
  while (!hex.eof)  {
    3b1e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    3b20:	2f00      	cmp	r7, #0
    3b22:	d14e      	bne.n	3bc2 <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0xc6>
    3b24:	4c52      	ldr	r4, [pc, #328]	; (3c70 <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0x174>)
    3b26:	e031      	b.n	3b8c <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0x90>
  if (strlen (theline) < 11)
    3b28:	4620      	mov	r0, r4
    3b2a:	f00d fee9 	bl	11900 <strlen>
    3b2e:	280a      	cmp	r0, #10
    3b30:	d937      	bls.n	3ba2 <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0xa6>
    3b32:	f10d 0c14 	add.w	ip, sp, #20
    3b36:	ab06      	add	r3, sp, #24
    3b38:	aa04      	add	r2, sp, #16
    3b3a:	4649      	mov	r1, r9
    3b3c:	4620      	mov	r0, r4
    3b3e:	f8cd c000 	str.w	ip, [sp]
    3b42:	f7fd fc4d 	bl	13e0 <parse_hex_line(char const*, char*, unsigned int*, unsigned int*, unsigned int*) [clone .part.0] [clone .constprop.0]>
    if (parse_hex_line( (const char*)line, hex.data, &hex.addr, &hex.num, &hex.code ) == 0) 
    3b46:	b360      	cbz	r0, 3ba2 <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0xa6>
    else if (process_hex_record( &hex ) != 0) 
    3b48:	a803      	add	r0, sp, #12
    3b4a:	f7ff ff63 	bl	3a14 <process_hex_record(hex_info_t*)>
    3b4e:	2800      	cmp	r0, #0
    3b50:	d17c      	bne.n	3c4c <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0x150>
    else if (hex.code == 0) 
    3b52:	9b05      	ldr	r3, [sp, #20]
    3b54:	b9ab      	cbnz	r3, 3b82 <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0x86>
      uint32_t addr = buffer_addr + hex.base + hex.addr - FLASH_BASE_ADDR;
    3b56:	9807      	ldr	r0, [sp, #28]
      if (hex.max > (FLASH_BASE_ADDR + buffer_size)) 
    3b58:	f108 43c0 	add.w	r3, r8, #1610612736	; 0x60000000
      uint32_t addr = buffer_addr + hex.base + hex.addr - FLASH_BASE_ADDR;
    3b5c:	9a04      	ldr	r2, [sp, #16]
      if (hex.max > (FLASH_BASE_ADDR + buffer_size)) 
    3b5e:	9909      	ldr	r1, [sp, #36]	; 0x24
      uint32_t addr = buffer_addr + hex.base + hex.addr - FLASH_BASE_ADDR;
    3b60:	eb00 0c02 	add.w	ip, r0, r2
      if (hex.max > (FLASH_BASE_ADDR + buffer_size)) 
    3b64:	4299      	cmp	r1, r3
      uint32_t addr = buffer_addr + hex.base + hex.addr - FLASH_BASE_ADDR;
    3b66:	f10c 4c20 	add.w	ip, ip, #2684354560	; 0xa0000000
    3b6a:	eb0c 0005 	add.w	r0, ip, r5
      if (hex.max > (FLASH_BASE_ADDR + buffer_size)) 
    3b6e:	d874      	bhi.n	3c5a <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0x15e>
      else if (!IN_FLASH(buffer_addr)) 
    3b70:	f105 4320 	add.w	r3, r5, #2684354560	; 0xa0000000
        memcpy( (void*)addr, (void*)hex.data, hex.num );
    3b74:	9a06      	ldr	r2, [sp, #24]
    3b76:	9903      	ldr	r1, [sp, #12]
      else if (!IN_FLASH(buffer_addr)) 
    3b78:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    3b7c:	d318      	bcc.n	3bb0 <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0xb4>
        memcpy( (void*)addr, (void*)hex.data, hex.num );
    3b7e:	f009 fce7 	bl	d550 <memcpy>
  while (!hex.eof)  {
    3b82:	e9dd 310a 	ldrd	r3, r1, [sp, #40]	; 0x28
    hex.lines++;
    3b86:	3101      	adds	r1, #1
    3b88:	910b      	str	r1, [sp, #44]	; 0x2c
  while (!hex.eof)  {
    3b8a:	b9db      	cbnz	r3, 3bc4 <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0xc8>
    read_ascii_line( in, line, sizeof(line) );
    3b8c:	2260      	movs	r2, #96	; 0x60
    3b8e:	4621      	mov	r1, r4
    3b90:	4630      	mov	r0, r6
    3b92:	f7ff ff09 	bl	39a8 <read_ascii_line(Stream*, char*, int)>
  if (theline[0] != ':')
    3b96:	7823      	ldrb	r3, [r4, #0]
    if (parse_hex_line( (const char*)line, hex.data, &hex.addr, &hex.num, &hex.code ) == 0) 
    3b98:	f8dd 900c 	ldr.w	r9, [sp, #12]
  if (theline[0] != ':')
    3b9c:	2b3a      	cmp	r3, #58	; 0x3a
  *num = 0;
    3b9e:	9706      	str	r7, [sp, #24]
  if (theline[0] != ':')
    3ba0:	d0c2      	beq.n	3b28 <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0x2c>
      SendMsgPrintfln("Bad hex line: %s", line);
    3ba2:	4933      	ldr	r1, [pc, #204]	; (3c70 <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0x174>)
    3ba4:	4833      	ldr	r0, [pc, #204]	; (3c74 <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0x178>)
    3ba6:	f7fe ff17 	bl	29d8 <SendMsgPrintfln(char const*, ...)>
}
    3baa:	b00d      	add	sp, #52	; 0x34
    3bac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        int error = flash_write_block( addr, hex.data, hex.num );
    3bb0:	f7ff ff6a 	bl	3a88 <flash_write_block>
        if (error) 
    3bb4:	2800      	cmp	r0, #0
    3bb6:	d0e4      	beq.n	3b82 <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0x86>
           SendMsgPrintfln("Error %02X in flash_write_block", error);
    3bb8:	4601      	mov	r1, r0
    3bba:	482f      	ldr	r0, [pc, #188]	; (3c78 <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0x17c>)
    3bbc:	f7fe ff0c 	bl	29d8 <SendMsgPrintfln(char const*, ...)>
           return;
    3bc0:	e7f3      	b.n	3baa <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0xae>
  SendMsgPrintfln("Hex file: %1d lines, %1luK\r\n(%08lX - %08lX)",
    3bc2:	990b      	ldr	r1, [sp, #44]	; 0x2c
			hex.lines, (hex.max-hex.min)/1024, hex.min, hex.max );
    3bc4:	e9dd 3008 	ldrd	r3, r0, [sp, #32]
    3bc8:	1ac2      	subs	r2, r0, r3
  SendMsgPrintfln("Hex file: %1d lines, %1luK\r\n(%08lX - %08lX)",
    3bca:	9000      	str	r0, [sp, #0]
    3bcc:	482b      	ldr	r0, [pc, #172]	; (3c7c <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0x180>)
    3bce:	0a92      	lsrs	r2, r2, #10
    3bd0:	f7fe ff02 	bl	29d8 <SendMsgPrintfln(char const*, ...)>
  SendMsgPrintfln("Verifying file is for TeensyROM ");
    3bd4:	482a      	ldr	r0, [pc, #168]	; (3c80 <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0x184>)
    3bd6:	f7fe feff 	bl	29d8 <SendMsgPrintfln(char const*, ...)>
  for (uint32_t i = buffer; i < buffer + size - strlen(FLASH_ID); ++i) {
    3bda:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    3bde:	f1a3 061a 	sub.w	r6, r3, #26
    3be2:	1ab6      	subs	r6, r6, r2
    3be4:	442e      	add	r6, r5
    3be6:	42ae      	cmp	r6, r5
    3be8:	d92a      	bls.n	3c40 <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0x144>
    3bea:	462c      	mov	r4, r5
    if (strncmp((char *)i, FLASH_ID, strlen(FLASH_ID)) == 0)
    3bec:	4f25      	ldr	r7, [pc, #148]	; (3c84 <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0x188>)
    3bee:	e002      	b.n	3bf6 <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0xfa>
  for (uint32_t i = buffer; i < buffer + size - strlen(FLASH_ID); ++i) {
    3bf0:	3401      	adds	r4, #1
    3bf2:	42a6      	cmp	r6, r4
    3bf4:	d024      	beq.n	3c40 <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0x144>
    if (strncmp((char *)i, FLASH_ID, strlen(FLASH_ID)) == 0)
    3bf6:	221a      	movs	r2, #26
    3bf8:	4639      	mov	r1, r7
    3bfa:	4620      	mov	r0, r4
    3bfc:	f00d fb0a 	bl	11214 <strncmp>
    3c00:	2800      	cmp	r0, #0
    3c02:	d1f5      	bne.n	3bf0 <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0xf4>
   SendMsgPrintf("OK");
    3c04:	4820      	ldr	r0, [pc, #128]	; (3c88 <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0x18c>)
    3c06:	f7ff febb 	bl	3980 <SendMsgPrintf(char const*, ...)>
  SendMsgPrintfln("Copying Buffer over main Flash area\r\n");
    3c0a:	4820      	ldr	r0, [pc, #128]	; (3c8c <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0x190>)
    3c0c:	f7fe fee4 	bl	29d8 <SendMsgPrintfln(char const*, ...)>
  detachInterrupt(digitalPinToInterrupt(Reset_Btn_In_PIN));
    3c10:	201f      	movs	r0, #31
    3c12:	f009 fc85 	bl	d520 <detachInterrupt>
  detachInterrupt(digitalPinToInterrupt(PHI2_PIN));
    3c16:	2001      	movs	r0, #1
    3c18:	f009 fc82 	bl	d520 <detachInterrupt>
  NVIC_DISABLE_IRQ(IRQ_ENET); 
    3c1c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3c20:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  NVIC_DISABLE_IRQ(IRQ_PIT);
    3c24:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  flash_move( FLASH_BASE_ADDR, buffer_addr, hex.max-hex.min );
    3c28:	4629      	mov	r1, r5
  NVIC_DISABLE_IRQ(IRQ_ENET); 
    3c2a:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
  flash_move( FLASH_BASE_ADDR, buffer_addr, hex.max-hex.min );
    3c2e:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
  NVIC_DISABLE_IRQ(IRQ_PIT);
    3c32:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
  flash_move( FLASH_BASE_ADDR, buffer_addr, hex.max-hex.min );
    3c36:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
    3c3a:	1ad2      	subs	r2, r2, r3
    3c3c:	f7fc fb7c 	bl	338 <flash_move>
   SendMsgPrintf("Failed!");
    3c40:	4813      	ldr	r0, [pc, #76]	; (3c90 <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0x194>)
    3c42:	f7ff fe9d 	bl	3980 <SendMsgPrintf(char const*, ...)>
}
    3c46:	b00d      	add	sp, #52	; 0x34
    3c48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      SendMsgPrintfln("Invalid hex code %d", hex.code);
    3c4c:	9905      	ldr	r1, [sp, #20]
    3c4e:	4811      	ldr	r0, [pc, #68]	; (3c94 <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0x198>)
    3c50:	f7fe fec2 	bl	29d8 <SendMsgPrintfln(char const*, ...)>
}
    3c54:	b00d      	add	sp, #52	; 0x34
    3c56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        SendMsgPrintfln("Max address %08lX too large", hex.max);
    3c5a:	480f      	ldr	r0, [pc, #60]	; (3c98 <update_firmware(Stream*, Stream*, unsigned long, unsigned long)+0x19c>)
    3c5c:	f7fe febc 	bl	29d8 <SendMsgPrintfln(char const*, ...)>
}
    3c60:	b00d      	add	sp, #52	; 0x34
    3c62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3c66:	bf00      	nop
    3c68:	20001740 	.word	0x20001740
    3c6c:	20001a94 	.word	0x20001a94
    3c70:	2005e06c 	.word	0x2005e06c
    3c74:	20001aa8 	.word	0x20001aa8
    3c78:	20001aec 	.word	0x20001aec
    3c7c:	20001b0c 	.word	0x20001b0c
    3c80:	20001b38 	.word	0x20001b38
    3c84:	2000882c 	.word	0x2000882c
    3c88:	20001cb4 	.word	0x20001cb4
    3c8c:	20001b5c 	.word	0x20001b5c
    3c90:	20001860 	.word	0x20001860
    3c94:	20001abc 	.word	0x20001abc
    3c98:	20001ad0 	.word	0x20001ad0

00003c9c <DoFlashUpdate(FS*, char const*)>:
  #include "Flash/FlashTxx.c"
}


void DoFlashUpdate(FS *sourceFS, const char *FilePathName)
{
    3c9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3ca0:	4605      	mov	r5, r0
    3ca2:	b09d      	sub	sp, #116	; 0x74
   uint32_t buffer_addr, buffer_size;

   //Serial.printf( "target = %s (%dK flash in %dK sectors)\n", FLASH_ID, FLASH_SIZE/1024, FLASH_SECTOR_SIZE/1024);
   
   // create flash buffer to hold new firmware
   SendMsgPrintfln("Create buffer ");
    3ca4:	489c      	ldr	r0, [pc, #624]	; (3f18 <DoFlashUpdate(FS*, char const*)+0x27c>)
{
    3ca6:	460e      	mov	r6, r1
   SendMsgPrintfln("Create buffer ");
    3ca8:	f7fe fe96 	bl	29d8 <SendMsgPrintfln(char const*, ...)>
  *buffer_addr = FLASH_BASE_ADDR + FLASH_SIZE - FLASH_RESERVE - 4;
    3cac:	4b9b      	ldr	r3, [pc, #620]	; (3f1c <DoFlashUpdate(FS*, char const*)+0x280>)
  while (*buffer_addr > 0 && *((uint32_t *)*buffer_addr) == 0xFFFFFFFF) *buffer_addr -= 4;
    3cae:	681a      	ldr	r2, [r3, #0]
    3cb0:	3201      	adds	r2, #1
    3cb2:	f040 8092 	bne.w	3dda <DoFlashUpdate(FS*, char const*)+0x13e>
    3cb6:	3b04      	subs	r3, #4
    3cb8:	d1f9      	bne.n	3cae <DoFlashUpdate(FS*, char const*)+0x12>
   SendMsgPrintf("OK");
    3cba:	4899      	ldr	r0, [pc, #612]	; (3f20 <DoFlashUpdate(FS*, char const*)+0x284>)
    3cbc:	f44f 5480 	mov.w	r4, #4096	; 0x1000
    3cc0:	f7ff fe5e 	bl	3980 <SendMsgPrintf(char const*, ...)>
    3cc4:	4f97      	ldr	r7, [pc, #604]	; (3f24 <DoFlashUpdate(FS*, char const*)+0x288>)
    3cc6:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 3f80 <DoFlashUpdate(FS*, char const*)+0x2e4>
    3cca:	f8df 92b8 	ldr.w	r9, [pc, #696]	; 3f84 <DoFlashUpdate(FS*, char const*)+0x2e8>
     SendMsgFailed();
     return;
   }
   SendMsgOK();
   
   SendMsgPrintfln("%s Buffer = %1luK of %1dK total\r\n(%08lX - %08lX)", 
    3cce:	4996      	ldr	r1, [pc, #600]	; (3f28 <DoFlashUpdate(FS*, char const*)+0x28c>)
    3cd0:	4b96      	ldr	r3, [pc, #600]	; (3f2c <DoFlashUpdate(FS*, char const*)+0x290>)
    3cd2:	464a      	mov	r2, r9
    3cd4:	4896      	ldr	r0, [pc, #600]	; (3f30 <DoFlashUpdate(FS*, char const*)+0x294>)
    3cd6:	9301      	str	r3, [sp, #4]
    3cd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    3cdc:	9400      	str	r4, [sp, #0]
    3cde:	f7fe fe7b 	bl	29d8 <SendMsgPrintfln(char const*, ...)>
   //   SendMsgFailed();
   //   return;
   //}
   //SendMsgOK();

   SendMsgPrintfln("Open: %s%s ", sourceFS==&SD ? "SD" : "USB", FilePathName); 
    3ce2:	4b94      	ldr	r3, [pc, #592]	; (3f34 <DoFlashUpdate(FS*, char const*)+0x298>)
    3ce4:	4a94      	ldr	r2, [pc, #592]	; (3f38 <DoFlashUpdate(FS*, char const*)+0x29c>)
    3ce6:	4995      	ldr	r1, [pc, #596]	; (3f3c <DoFlashUpdate(FS*, char const*)+0x2a0>)
    3ce8:	4895      	ldr	r0, [pc, #596]	; (3f40 <DoFlashUpdate(FS*, char const*)+0x2a4>)
    3cea:	428d      	cmp	r5, r1
    3cec:	bf0c      	ite	eq
    3cee:	4611      	moveq	r1, r2
    3cf0:	4619      	movne	r1, r3
    3cf2:	4632      	mov	r2, r6
    3cf4:	f7fe fe70 	bl	29d8 <SendMsgPrintfln(char const*, ...)>

   File hexFile = sourceFS->open(FilePathName, FILE_READ );
    3cf8:	682b      	ldr	r3, [r5, #0]
		SDFAT_FILE file = sdfs.open(filepath, flags);
    3cfa:	4632      	mov	r2, r6
    3cfc:	f8d3 9000 	ldr.w	r9, [r3]
    3d00:	4b90      	ldr	r3, [pc, #576]	; (3f44 <DoFlashUpdate(FS*, char const*)+0x2a8>)
    3d02:	4599      	cmp	r9, r3
    3d04:	f040 80d3 	bne.w	3eae <DoFlashUpdate(FS*, char const*)+0x212>
    3d08:	2300      	movs	r3, #0
    3d0a:	1d29      	adds	r1, r5, #4
    3d0c:	a808      	add	r0, sp, #32
    3d0e:	f005 fe8b 	bl	9a28 <FsVolume::open(char const*, int)>
  bool isOpen() const {return m_fFile || m_xFile;}
    3d12:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    3d14:	2b00      	cmp	r3, #0
    3d16:	f000 80d5 	beq.w	3ec4 <DoFlashUpdate(FS*, char const*)+0x228>
		if (file) return File(new SDFile(file));
    3d1a:	205c      	movs	r0, #92	; 0x5c
class FileImpl {
    3d1c:	2600      	movs	r6, #0
    3d1e:	f009 fcb1 	bl	d684 <operator new(unsigned int)>
class Print
    3d22:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3d24:	f10d 0930 	add.w	r9, sp, #48	; 0x30
    3d28:	4605      	mov	r5, r0
    3d2a:	60c3      	str	r3, [r0, #12]
    3d2c:	3018      	adds	r0, #24
class Stream : public Print
    3d2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3d30:	4649      	mov	r1, r9
    3d32:	f840 6c14 	str.w	r6, [r0, #-20]
    3d36:	f840 3c08 	str.w	r3, [r0, #-8]
    3d3a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    3d3e:	f800 3c04 	strb.w	r3, [r0, #-4]
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    3d42:	4b81      	ldr	r3, [pc, #516]	; (3f48 <DoFlashUpdate(FS*, char const*)+0x2ac>)
    3d44:	f840 3c18 	str.w	r3, [r0, #-24]
    3d48:	4b80      	ldr	r3, [pc, #512]	; (3f4c <DoFlashUpdate(FS*, char const*)+0x2b0>)
    3d4a:	f840 3c10 	str.w	r3, [r0, #-16]
    3d4e:	f005 fd0f 	bl	9770 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		if (f) f->refcount++;
    3d52:	686b      	ldr	r3, [r5, #4]
    3d54:	65ae      	str	r6, [r5, #88]	; 0x58
    3d56:	3301      	adds	r3, #1
	constexpr Print() : write_error(0) {}
    3d58:	9604      	str	r6, [sp, #16]
	constexpr Stream() : _timeout(1000), read_error(0) {}
    3d5a:	f88d 6018 	strb.w	r6, [sp, #24]
    3d5e:	606b      	str	r3, [r5, #4]
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    3d60:	4b7b      	ldr	r3, [pc, #492]	; (3f50 <DoFlashUpdate(FS*, char const*)+0x2b4>)
	File(FileImpl *file) {
    3d62:	4e7c      	ldr	r6, [pc, #496]	; (3f54 <DoFlashUpdate(FS*, char const*)+0x2b8>)
    3d64:	60ab      	str	r3, [r5, #8]
    3d66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
		f = file;
    3d6a:	9507      	str	r5, [sp, #28]
    3d6c:	9305      	str	r3, [sp, #20]
	File(FileImpl *file) {
    3d6e:	9603      	str	r6, [sp, #12]
    3d70:	4b79      	ldr	r3, [pc, #484]	; (3f58 <DoFlashUpdate(FS*, char const*)+0x2bc>)
  ~FsBaseFile() {close();}
    3d72:	4648      	mov	r0, r9
    3d74:	9308      	str	r3, [sp, #32]
    3d76:	f005 fd3d 	bl	97f4 <FsBaseFile::close()>
      
   if (!hexFile) {
    3d7a:	9807      	ldr	r0, [sp, #28]
		return (f) ? f->isOpen() : false;
    3d7c:	2800      	cmp	r0, #0
    3d7e:	d046      	beq.n	3e0e <DoFlashUpdate(FS*, char const*)+0x172>
    3d80:	6803      	ldr	r3, [r0, #0]
    3d82:	4a76      	ldr	r2, [pc, #472]	; (3f5c <DoFlashUpdate(FS*, char const*)+0x2c0>)
    3d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3d86:	4293      	cmp	r3, r2
    3d88:	d13e      	bne.n	3e08 <DoFlashUpdate(FS*, char const*)+0x16c>
  bool isOpen() const {return m_fFile || m_xFile;}
    3d8a:	6d03      	ldr	r3, [r0, #80]	; 0x50
    3d8c:	2b00      	cmp	r3, #0
    3d8e:	f000 8094 	beq.w	3eba <DoFlashUpdate(FS*, char const*)+0x21e>
    3d92:	4863      	ldr	r0, [pc, #396]	; (3f20 <DoFlashUpdate(FS*, char const*)+0x284>)
    3d94:	f7ff fdf4 	bl	3980 <SendMsgPrintf(char const*, ...)>
      return;
   }
   SendMsgOK();
   
   // read hex file, write new firmware to flash, clean up, reboot
   update_firmware( &hexFile, &Serial, buffer_addr, buffer_size );
    3d98:	463b      	mov	r3, r7
    3d9a:	4622      	mov	r2, r4
    3d9c:	a803      	add	r0, sp, #12
    3d9e:	4970      	ldr	r1, [pc, #448]	; (3f60 <DoFlashUpdate(FS*, char const*)+0x2c4>)
    3da0:	f7ff feac 	bl	3afc <update_firmware(Stream*, Stream*, unsigned long, unsigned long)>
  
   // return from update_firmware() means error or user abort, so clean up and
   // reboot to ensure that static vars get boot-up initialized before retry(? nah)
   SendMsgPrintfln( "Erasing Flash buffer ");  
    3da4:	486f      	ldr	r0, [pc, #444]	; (3f64 <DoFlashUpdate(FS*, char const*)+0x2c8>)
    3da6:	f7fe fe17 	bl	29d8 <SendMsgPrintfln(char const*, ...)>
  if (IN_FLASH(buffer_addr))
    3daa:	f5b8 0f00 	cmp.w	r8, #8388608	; 0x800000
    3dae:	d26e      	bcs.n	3e8e <DoFlashUpdate(FS*, char const*)+0x1f2>
  while (address < (start + size) && error == 0) { 
    3db0:	4d6d      	ldr	r5, [pc, #436]	; (3f68 <DoFlashUpdate(FS*, char const*)+0x2cc>)
    3db2:	42ac      	cmp	r4, r5
    3db4:	d904      	bls.n	3dc0 <DoFlashUpdate(FS*, char const*)+0x124>
    3db6:	e06d      	b.n	3e94 <DoFlashUpdate(FS*, char const*)+0x1f8>
    address += FLASH_SECTOR_SIZE;
    3db8:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
  while (address < (start + size) && error == 0) { 
    3dbc:	42ac      	cmp	r4, r5
    3dbe:	d869      	bhi.n	3e94 <DoFlashUpdate(FS*, char const*)+0x1f8>
    if ((address & (FLASH_SECTOR_SIZE - 1)) == 0) {
    3dc0:	f3c4 030b 	ubfx	r3, r4, #0, #12
      if (flash_sector_not_erased( address )) {
    3dc4:	4620      	mov	r0, r4
    if ((address & (FLASH_SECTOR_SIZE - 1)) == 0) {
    3dc6:	2b00      	cmp	r3, #0
    3dc8:	d1f6      	bne.n	3db8 <DoFlashUpdate(FS*, char const*)+0x11c>
      if (flash_sector_not_erased( address )) {
    3dca:	f7fc faa5 	bl	318 <flash_sector_not_erased>
    3dce:	2800      	cmp	r0, #0
    3dd0:	d0f2      	beq.n	3db8 <DoFlashUpdate(FS*, char const*)+0x11c>
          eepromemu_flash_erase_sector( (void*)address );
    3dd2:	4620      	mov	r0, r4
    3dd4:	f009 fa2a 	bl	d22c <eepromemu_flash_erase_sector>
    3dd8:	e7ee      	b.n	3db8 <DoFlashUpdate(FS*, char const*)+0x11c>
  *buffer_addr += 4; // first address above code
    3dda:	1d1c      	adds	r4, r3, #4
  if ((*buffer_addr % FLASH_SECTOR_SIZE) > 0)
    3ddc:	f3c4 020b 	ubfx	r2, r4, #0, #12
    3de0:	2a00      	cmp	r2, #0
    3de2:	f040 808d 	bne.w	3f00 <DoFlashUpdate(FS*, char const*)+0x264>
  *buffer_size = FLASH_BASE_ADDR - *buffer_addr + FLASH_SIZE - FLASH_RESERVE;
    3de6:	4f51      	ldr	r7, [pc, #324]	; (3f2c <DoFlashUpdate(FS*, char const*)+0x290>)
      IN_FLASH(buffer_addr) ? "Flash" : "RAM", buffer_size/1024, FLASH_SIZE/1024, 
    3de8:	f8df 819c 	ldr.w	r8, [pc, #412]	; 3f88 <DoFlashUpdate(FS*, char const*)+0x2ec>
    3dec:	1b3f      	subs	r7, r7, r4
    3dee:	4498      	add	r8, r3
   SendMsgPrintfln("%s Buffer = %1luK of %1dK total\r\n(%08lX - %08lX)", 
    3df0:	ea4f 2997 	mov.w	r9, r7, lsr #10
    3df4:	484a      	ldr	r0, [pc, #296]	; (3f20 <DoFlashUpdate(FS*, char const*)+0x284>)
    3df6:	f7ff fdc3 	bl	3980 <SendMsgPrintf(char const*, ...)>
    3dfa:	495c      	ldr	r1, [pc, #368]	; (3f6c <DoFlashUpdate(FS*, char const*)+0x2d0>)
    3dfc:	4b4a      	ldr	r3, [pc, #296]	; (3f28 <DoFlashUpdate(FS*, char const*)+0x28c>)
    3dfe:	f5b8 0f00 	cmp.w	r8, #8388608	; 0x800000
    3e02:	bf28      	it	cs
    3e04:	4619      	movcs	r1, r3
    3e06:	e763      	b.n	3cd0 <DoFlashUpdate(FS*, char const*)+0x34>
    3e08:	4798      	blx	r3
    3e0a:	2800      	cmp	r0, #0
    3e0c:	d1c1      	bne.n	3d92 <DoFlashUpdate(FS*, char const*)+0xf6>
   SendMsgPrintf("Failed!");
    3e0e:	4858      	ldr	r0, [pc, #352]	; (3f70 <DoFlashUpdate(FS*, char const*)+0x2d4>)
    3e10:	f7ff fdb6 	bl	3980 <SendMsgPrintf(char const*, ...)>
		if (f) dec_refcount();
    3e14:	9c07      	ldr	r4, [sp, #28]
	virtual ~File() {
    3e16:	9603      	str	r6, [sp, #12]
		if (f) dec_refcount();
    3e18:	2c00      	cmp	r4, #0
    3e1a:	d035      	beq.n	3e88 <DoFlashUpdate(FS*, char const*)+0x1ec>
		if (--(f->refcount) == 0) {
    3e1c:	6865      	ldr	r5, [r4, #4]
    3e1e:	3d01      	subs	r5, #1
    3e20:	6065      	str	r5, [r4, #4]
    3e22:	2d00      	cmp	r5, #0
    3e24:	d130      	bne.n	3e88 <DoFlashUpdate(FS*, char const*)+0x1ec>
			f->close();
    3e26:	6823      	ldr	r3, [r4, #0]
    3e28:	4a52      	ldr	r2, [pc, #328]	; (3f74 <DoFlashUpdate(FS*, char const*)+0x2d8>)
    3e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3e2c:	4293      	cmp	r3, r2
    3e2e:	d15d      	bne.n	3eec <DoFlashUpdate(FS*, char const*)+0x250>
		if (filename) {
    3e30:	6da0      	ldr	r0, [r4, #88]	; 0x58
    3e32:	b110      	cbz	r0, 3e3a <DoFlashUpdate(FS*, char const*)+0x19e>
			free(filename);
    3e34:	f00b f95a 	bl	f0ec <free>
			filename = nullptr;
    3e38:	65a5      	str	r5, [r4, #88]	; 0x58
    3e3a:	6d23      	ldr	r3, [r4, #80]	; 0x50
    3e3c:	2b00      	cmp	r3, #0
    3e3e:	d051      	beq.n	3ee4 <DoFlashUpdate(FS*, char const*)+0x248>
			sdfatfile.close();
    3e40:	f104 0018 	add.w	r0, r4, #24
    3e44:	f005 fcd6 	bl	97f4 <FsBaseFile::close()>
			delete f;
    3e48:	9c07      	ldr	r4, [sp, #28]
    3e4a:	b1ec      	cbz	r4, 3e88 <DoFlashUpdate(FS*, char const*)+0x1ec>
    3e4c:	6823      	ldr	r3, [r4, #0]
    3e4e:	4a4a      	ldr	r2, [pc, #296]	; (3f78 <DoFlashUpdate(FS*, char const*)+0x2dc>)
    3e50:	685b      	ldr	r3, [r3, #4]
    3e52:	4293      	cmp	r3, r2
    3e54:	d151      	bne.n	3efa <DoFlashUpdate(FS*, char const*)+0x25e>
	virtual ~SDFile(void) {
    3e56:	4b3c      	ldr	r3, [pc, #240]	; (3f48 <DoFlashUpdate(FS*, char const*)+0x2ac>)
		if (filename) {
    3e58:	6da0      	ldr	r0, [r4, #88]	; 0x58
	virtual ~SDFile(void) {
    3e5a:	6023      	str	r3, [r4, #0]
		if (filename) {
    3e5c:	b118      	cbz	r0, 3e66 <DoFlashUpdate(FS*, char const*)+0x1ca>
			free(filename);
    3e5e:	f00b f945 	bl	f0ec <free>
			filename = nullptr;
    3e62:	2300      	movs	r3, #0
    3e64:	65a3      	str	r3, [r4, #88]	; 0x58
    3e66:	6d23      	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
    3e68:	f104 0518 	add.w	r5, r4, #24
    3e6c:	2b00      	cmp	r3, #0
    3e6e:	d040      	beq.n	3ef2 <DoFlashUpdate(FS*, char const*)+0x256>
    3e70:	4628      	mov	r0, r5
    3e72:	f005 fcbf 	bl	97f4 <FsBaseFile::close()>
    3e76:	4b38      	ldr	r3, [pc, #224]	; (3f58 <DoFlashUpdate(FS*, char const*)+0x2bc>)
  ~FsBaseFile() {close();}
    3e78:	4628      	mov	r0, r5
    3e7a:	60a3      	str	r3, [r4, #8]
    3e7c:	f005 fcba 	bl	97f4 <FsBaseFile::close()>
	}
    3e80:	215c      	movs	r1, #92	; 0x5c
    3e82:	4620      	mov	r0, r4
    3e84:	f009 fc00 	bl	d688 <operator delete(void*, unsigned int)>
   firmware_buffer_free( buffer_addr, buffer_size );
   SendMsgOK();
   
   //SendMsgPrintfln( "Rebooting  Teensy");  
   //REBOOT;
}
    3e88:	b01d      	add	sp, #116	; 0x74
    3e8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    free( (void*)buffer_addr );
    3e8e:	4620      	mov	r0, r4
    3e90:	f00b f92c 	bl	f0ec <free>
   SendMsgPrintf("OK");
    3e94:	4822      	ldr	r0, [pc, #136]	; (3f20 <DoFlashUpdate(FS*, char const*)+0x284>)
    3e96:	f7ff fd73 	bl	3980 <SendMsgPrintf(char const*, ...)>
		if (f) dec_refcount();
    3e9a:	9c07      	ldr	r4, [sp, #28]
	virtual ~File() {
    3e9c:	9603      	str	r6, [sp, #12]
		if (f) dec_refcount();
    3e9e:	2c00      	cmp	r4, #0
    3ea0:	d0f2      	beq.n	3e88 <DoFlashUpdate(FS*, char const*)+0x1ec>
		if (--(f->refcount) == 0) {
    3ea2:	6865      	ldr	r5, [r4, #4]
    3ea4:	3d01      	subs	r5, #1
    3ea6:	6065      	str	r5, [r4, #4]
    3ea8:	2d00      	cmp	r5, #0
    3eaa:	d1ed      	bne.n	3e88 <DoFlashUpdate(FS*, char const*)+0x1ec>
    3eac:	e7bb      	b.n	3e26 <DoFlashUpdate(FS*, char const*)+0x18a>
   File hexFile = sourceFS->open(FilePathName, FILE_READ );
    3eae:	4629      	mov	r1, r5
    3eb0:	2300      	movs	r3, #0
    3eb2:	a803      	add	r0, sp, #12
    3eb4:	4e27      	ldr	r6, [pc, #156]	; (3f54 <DoFlashUpdate(FS*, char const*)+0x2b8>)
    3eb6:	47c8      	blx	r9
    3eb8:	e75f      	b.n	3d7a <DoFlashUpdate(FS*, char const*)+0xde>
  bool isOpen() const {return m_fFile || m_xFile;}
    3eba:	6d43      	ldr	r3, [r0, #84]	; 0x54
    3ebc:	2b00      	cmp	r3, #0
    3ebe:	f47f af68 	bne.w	3d92 <DoFlashUpdate(FS*, char const*)+0xf6>
    3ec2:	e7a4      	b.n	3e0e <DoFlashUpdate(FS*, char const*)+0x172>
    3ec4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    3ec6:	2b00      	cmp	r3, #0
    3ec8:	f47f af27 	bne.w	3d1a <DoFlashUpdate(FS*, char const*)+0x7e>
    3ecc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	constexpr File() : f(nullptr) { }
    3ed0:	4e20      	ldr	r6, [pc, #128]	; (3f54 <DoFlashUpdate(FS*, char const*)+0x2b8>)
    3ed2:	f10d 0930 	add.w	r9, sp, #48	; 0x30
    3ed6:	9304      	str	r3, [sp, #16]
    3ed8:	f88d 3018 	strb.w	r3, [sp, #24]
    3edc:	9307      	str	r3, [sp, #28]
    3ede:	9205      	str	r2, [sp, #20]
    3ee0:	9603      	str	r6, [sp, #12]
    3ee2:	e745      	b.n	3d70 <DoFlashUpdate(FS*, char const*)+0xd4>
    3ee4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    3ee6:	2b00      	cmp	r3, #0
    3ee8:	d1aa      	bne.n	3e40 <DoFlashUpdate(FS*, char const*)+0x1a4>
    3eea:	e7ad      	b.n	3e48 <DoFlashUpdate(FS*, char const*)+0x1ac>
			f->close();
    3eec:	4620      	mov	r0, r4
    3eee:	4798      	blx	r3
    3ef0:	e7aa      	b.n	3e48 <DoFlashUpdate(FS*, char const*)+0x1ac>
    3ef2:	6d63      	ldr	r3, [r4, #84]	; 0x54
    3ef4:	2b00      	cmp	r3, #0
    3ef6:	d1bb      	bne.n	3e70 <DoFlashUpdate(FS*, char const*)+0x1d4>
    3ef8:	e7bd      	b.n	3e76 <DoFlashUpdate(FS*, char const*)+0x1da>
			delete f;
    3efa:	4620      	mov	r0, r4
    3efc:	4798      	blx	r3
    3efe:	e7c3      	b.n	3e88 <DoFlashUpdate(FS*, char const*)+0x1ec>
    *buffer_addr += FLASH_SECTOR_SIZE - (*buffer_addr % FLASH_SECTOR_SIZE);
    3f00:	4b1e      	ldr	r3, [pc, #120]	; (3f7c <DoFlashUpdate(FS*, char const*)+0x2e0>)
  *buffer_size = FLASH_BASE_ADDR - *buffer_addr + FLASH_SIZE - FLASH_RESERVE;
    3f02:	4f0a      	ldr	r7, [pc, #40]	; (3f2c <DoFlashUpdate(FS*, char const*)+0x290>)
    *buffer_addr += FLASH_SECTOR_SIZE - (*buffer_addr % FLASH_SECTOR_SIZE);
    3f04:	4023      	ands	r3, r4
      IN_FLASH(buffer_addr) ? "Flash" : "RAM", buffer_size/1024, FLASH_SIZE/1024, 
    3f06:	f8df 8078 	ldr.w	r8, [pc, #120]	; 3f80 <DoFlashUpdate(FS*, char const*)+0x2e4>
    3f0a:	f503 5480 	add.w	r4, r3, #4096	; 0x1000
    3f0e:	4498      	add	r8, r3
  *buffer_size = FLASH_BASE_ADDR - *buffer_addr + FLASH_SIZE - FLASH_RESERVE;
    3f10:	1b3f      	subs	r7, r7, r4
   SendMsgPrintfln("%s Buffer = %1luK of %1dK total\r\n(%08lX - %08lX)", 
    3f12:	ea4f 2997 	mov.w	r9, r7, lsr #10
    *buffer_addr += FLASH_SECTOR_SIZE - (*buffer_addr % FLASH_SECTOR_SIZE);
    3f16:	e76d      	b.n	3df4 <DoFlashUpdate(FS*, char const*)+0x158>
    3f18:	200017b4 	.word	0x200017b4
    3f1c:	607bfffc 	.word	0x607bfffc
    3f20:	20001cb4 	.word	0x20001cb4
    3f24:	607bf000 	.word	0x607bf000
    3f28:	200017b0 	.word	0x200017b0
    3f2c:	607c0000 	.word	0x607c0000
    3f30:	200017c4 	.word	0x200017c4
    3f34:	2000a8d8 	.word	0x2000a8d8
    3f38:	2000a8d4 	.word	0x2000a8d4
    3f3c:	2005daf4 	.word	0x2005daf4
    3f40:	200017f8 	.word	0x200017f8
    3f44:	00000e91 	.word	0x00000e91
    3f48:	20003358 	.word	0x20003358
    3f4c:	200033b4 	.word	0x200033b4
    3f50:	20003334 	.word	0x20003334
    3f54:	20003308 	.word	0x20003308
    3f58:	20003240 	.word	0x20003240
    3f5c:	000004c5 	.word	0x000004c5
    3f60:	2000bfd8 	.word	0x2000bfd8
    3f64:	20001804 	.word	0x20001804
    3f68:	607bffff 	.word	0x607bffff
    3f6c:	200017a8 	.word	0x200017a8
    3f70:	20001860 	.word	0x20001860
    3f74:	00000e69 	.word	0x00000e69
    3f78:	00001c55 	.word	0x00001c55
    3f7c:	fffff000 	.word	0xfffff000
    3f80:	a0001000 	.word	0xa0001000
    3f84:	00181efc 	.word	0x00181efc
    3f88:	a0000004 	.word	0xa0000004

00003f8c <IOHandlerInit(unsigned char)>:
{ //called from above and directly from SetUpMainMenuROM
    3f8c:	b538      	push	{r3, r4, r5, lr}
   BigBufCount = 0;
    3f8e:	2200      	movs	r2, #0
    3f90:	4b0f      	ldr	r3, [pc, #60]	; (3fd0 <IOHandlerInit(unsigned char)+0x44>)
   if (NewIOHandler>=IOH_Num_Handlers)
    3f92:	280a      	cmp	r0, #10
   BigBufCount = 0;
    3f94:	801a      	strh	r2, [r3, #0]
   if (NewIOHandler>=IOH_Num_Handlers)
    3f96:	d811      	bhi.n	3fbc <IOHandlerInit(unsigned char)+0x30>
   Serial.printf("Loading IO handler: %s\n", IOHandler[NewIOHandler]->Name);
    3f98:	4604      	mov	r4, r0
    3f9a:	4d0e      	ldr	r5, [pc, #56]	; (3fd4 <IOHandlerInit(unsigned char)+0x48>)
    3f9c:	490e      	ldr	r1, [pc, #56]	; (3fd8 <IOHandlerInit(unsigned char)+0x4c>)
    3f9e:	480f      	ldr	r0, [pc, #60]	; (3fdc <IOHandlerInit(unsigned char)+0x50>)
    3fa0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
    3fa4:	f008 fc00 	bl	c7a8 <Print::printf(char const*, ...)>
   if (IOHandler[NewIOHandler]->InitHndlr != NULL) IOHandler[NewIOHandler]->InitHndlr();
    3fa8:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    3fac:	695b      	ldr	r3, [r3, #20]
    3fae:	b103      	cbz	r3, 3fb2 <IOHandlerInit(unsigned char)+0x26>
    3fb0:	4798      	blx	r3
    3fb2:	f00a fced 	bl	e990 <usb_serial_flush_output>
   CurrentIOHandler = NewIOHandler;
    3fb6:	4b0a      	ldr	r3, [pc, #40]	; (3fe0 <IOHandlerInit(unsigned char)+0x54>)
    3fb8:	701c      	strb	r4, [r3, #0]
}
    3fba:	bd38      	pop	{r3, r4, r5, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    3fbc:	2119      	movs	r1, #25
    3fbe:	4809      	ldr	r0, [pc, #36]	; (3fe4 <IOHandlerInit(unsigned char)+0x58>)
    3fc0:	f00a fcb2 	bl	e928 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    3fc4:	4805      	ldr	r0, [pc, #20]	; (3fdc <IOHandlerInit(unsigned char)+0x50>)
    3fc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    3fca:	f008 bbd1 	b.w	c770 <Print::println()>
    3fce:	bf00      	nop
    3fd0:	2005e51c 	.word	0x2005e51c
    3fd4:	2000bd4c 	.word	0x2000bd4c
    3fd8:	20001b84 	.word	0x20001b84
    3fdc:	2000bfd8 	.word	0x2000bfd8
    3fe0:	2005e534 	.word	0x2005e534
    3fe4:	2000181c 	.word	0x2000181c

00003fe8 <IOHandlerInitToNext()>:
{ //called after cart loaded, PRG x-fer finished, or exit to basic (rsIOHWinit)
    3fe8:	b538      	push	{r3, r4, r5, lr}
   if (IO1[rWRegCurrMenuWAIT] == rmtTeensy && MenuSource[SelItemFullIdx].IOHndlrAssoc != IOH_None)
    3fea:	4b11      	ldr	r3, [pc, #68]	; (4030 <IOHandlerInitToNext()+0x48>)
    3fec:	681b      	ldr	r3, [r3, #0]
    3fee:	7a9a      	ldrb	r2, [r3, #10]
    3ff0:	2a01      	cmp	r2, #1
    3ff2:	d107      	bne.n	4004 <IOHandlerInitToNext()+0x1c>
    3ff4:	4c0f      	ldr	r4, [pc, #60]	; (4034 <IOHandlerInitToNext()+0x4c>)
    3ff6:	4d10      	ldr	r5, [pc, #64]	; (4038 <IOHandlerInitToNext()+0x50>)
    3ff8:	6822      	ldr	r2, [r4, #0]
    3ffa:	8829      	ldrh	r1, [r5, #0]
    3ffc:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    4000:	7852      	ldrb	r2, [r2, #1]
    4002:	b922      	cbnz	r2, 400e <IOHandlerInitToNext()+0x26>
      IOHandlerInit(IO1[rwRegNextIOHndlr]);
    4004:	7cd8      	ldrb	r0, [r3, #19]
}
    4006:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      IOHandlerInit(IO1[rwRegNextIOHndlr]);
    400a:	f7ff bfbf 	b.w	3f8c <IOHandlerInit(unsigned char)>
    400e:	211d      	movs	r1, #29
    4010:	480a      	ldr	r0, [pc, #40]	; (403c <IOHandlerInitToNext()+0x54>)
    4012:	f00a fc89 	bl	e928 <usb_serial_write>
    4016:	480a      	ldr	r0, [pc, #40]	; (4040 <IOHandlerInitToNext()+0x58>)
    4018:	f008 fbaa 	bl	c770 <Print::println()>
      IOHandlerInit(MenuSource[SelItemFullIdx].IOHndlrAssoc); 
    401c:	882a      	ldrh	r2, [r5, #0]
    401e:	6823      	ldr	r3, [r4, #0]
    4020:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    4024:	7858      	ldrb	r0, [r3, #1]
}
    4026:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      IOHandlerInit(MenuSource[SelItemFullIdx].IOHndlrAssoc); 
    402a:	f7ff bfaf 	b.w	3f8c <IOHandlerInit(unsigned char)>
    402e:	bf00      	nop
    4030:	2000dae4 	.word	0x2000dae4
    4034:	2000daf0 	.word	0x2000daf0
    4038:	2005e526 	.word	0x2005e526
    403c:	20001bc8 	.word	0x20001bc8
    4040:	2000bfd8 	.word	0x2000bfd8

00004044 <HandleExecution()>:
{
    4044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   StructMenuItem MenuSelCpy = MenuSource[SelItemFullIdx]; //local copy selected menu item to modify
    4048:	4ba9      	ldr	r3, [pc, #676]	; (42f0 <HandleExecution()+0x2ac>)
{
    404a:	b0ed      	sub	sp, #436	; 0x1b4
   StructMenuItem MenuSelCpy = MenuSource[SelItemFullIdx]; //local copy selected menu item to modify
    404c:	4ea9      	ldr	r6, [pc, #676]	; (42f4 <HandleExecution()+0x2b0>)
    404e:	881a      	ldrh	r2, [r3, #0]
    4050:	ac03      	add	r4, sp, #12
    4052:	6833      	ldr	r3, [r6, #0]
    4054:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    4058:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    405a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   if (MenuSelCpy.ItemType == rtNone) //should no longer reach here
    405e:	7825      	ldrb	r5, [r4, #0]
    4060:	2d00      	cmp	r5, #0
    4062:	d047      	beq.n	40f4 <HandleExecution()+0xb0>
   if (MenuSelCpy.ItemType == rtUnknown)
    4064:	2d01      	cmp	r5, #1
    4066:	f000 8083 	beq.w	4170 <HandleExecution()+0x12c>
   switch(IO1[rWRegCurrMenuWAIT]) 
    406a:	f8df 82f0 	ldr.w	r8, [pc, #752]	; 435c <HandleExecution()+0x318>
    406e:	f8d8 7000 	ldr.w	r7, [r8]
    4072:	7abb      	ldrb	r3, [r7, #10]
    4074:	2b01      	cmp	r3, #1
    4076:	fa5f f983 	uxtb.w	r9, r3
    407a:	d017      	beq.n	40ac <HandleExecution()+0x68>
    407c:	f019 0ffd 	tst.w	r9, #253	; 0xfd
    4080:	d026      	beq.n	40d0 <HandleExecution()+0x8c>
   if (MenuSelCpy.ItemType == rtFileP00) ParseP00File(&MenuSelCpy); 
    4082:	2d0a      	cmp	r5, #10
    4084:	d049      	beq.n	411a <HandleExecution()+0xd6>
   switch(MenuSelCpy.ItemType)
    4086:	1e6b      	subs	r3, r5, #1
    4088:	2b0c      	cmp	r3, #12
    408a:	f200 80a8 	bhi.w	41de <HandleExecution()+0x19a>
    408e:	e8df f013 	tbh	[pc, r3, lsl #1]
    4092:	01aa      	.short	0x01aa
    4094:	010c0193 	.word	0x010c0193
    4098:	00f5011f 	.word	0x00f5011f
    409c:	005400a6 	.word	0x005400a6
    40a0:	00a600a6 	.word	0x00a600a6
    40a4:	017c00a6 	.word	0x017c00a6
    40a8:	01690188 	.word	0x01690188
         if (MenuSelCpy.ItemType == rtDirectory)
    40ac:	2d06      	cmp	r5, #6
    40ae:	d027      	beq.n	4100 <HandleExecution()+0xbc>
         SendMsgPrintfln(MenuSelCpy.Name); 
    40b0:	4608      	mov	r0, r1
    40b2:	f7fe fc91 	bl	29d8 <SendMsgPrintfln(char const*, ...)>
         if (MenuSelCpy.ItemType == rtFileCrt)
    40b6:	2d08      	cmp	r5, #8
    40b8:	d066      	beq.n	4188 <HandleExecution()+0x144>
            memcpy(RAM_Image, MenuSelCpy.Code_Image, MenuSelCpy.Size);
    40ba:	4b8f      	ldr	r3, [pc, #572]	; (42f8 <HandleExecution()+0x2b4>)
    40bc:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
    40c0:	4618      	mov	r0, r3
    40c2:	f009 fa45 	bl	d550 <memcpy>
            MenuSelCpy.Code_Image = RAM_Image;   
    40c6:	60a0      	str	r0, [r4, #8]
         SendMsgPrintfln("Copied to RAM"); 
    40c8:	488c      	ldr	r0, [pc, #560]	; (42fc <HandleExecution()+0x2b8>)
    40ca:	f7fe fc85 	bl	29d8 <SendMsgPrintfln(char const*, ...)>
         break;
    40ce:	e7d8      	b.n	4082 <HandleExecution()+0x3e>
         if (MenuSelCpy.ItemType == rtFileHex)  //FW update from hex file
    40d0:	2d09      	cmp	r5, #9
    40d2:	f000 8087 	beq.w	41e4 <HandleExecution()+0x1a0>
         if (MenuSelCpy.ItemType == rtDirectory)
    40d6:	2d06      	cmp	r5, #6
    40d8:	d14c      	bne.n	4174 <HandleExecution()+0x130>
            if(strcmp(MenuSelCpy.Name, UpDirString)==0)
    40da:	460c      	mov	r4, r1
    40dc:	4988      	ldr	r1, [pc, #544]	; (4300 <HandleExecution()+0x2bc>)
    40de:	4620      	mov	r0, r4
    40e0:	f00d f9f2 	bl	114c8 <strcmp>
    40e4:	2800      	cmp	r0, #0
    40e6:	f040 8091 	bne.w	420c <HandleExecution()+0x1c8>
}
    40ea:	b06d      	add	sp, #436	; 0x1b4
    40ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
               UpDirectory();
    40f0:	f7fe bc18 	b.w	2924 <UpDirectory()>
      SendMsgPrintfln("%s\r\nis not a valid item", MenuSelCpy.Name);
    40f4:	4883      	ldr	r0, [pc, #524]	; (4304 <HandleExecution()+0x2c0>)
}
    40f6:	b06d      	add	sp, #436	; 0x1b4
    40f8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      SendMsgPrintfln("%s\r\nUnknown File Type", MenuSelCpy.Name);
    40fc:	f7fe bc6c 	b.w	29d8 <SendMsgPrintfln(char const*, ...)>
            if(strcmp(MenuSelCpy.Name, UpDirString)==0) MenuChange(); //only 1 level, returning to root
    4100:	460d      	mov	r5, r1
    4102:	497f      	ldr	r1, [pc, #508]	; (4300 <HandleExecution()+0x2bc>)
    4104:	4628      	mov	r0, r5
    4106:	f00d f9df 	bl	114c8 <strcmp>
    410a:	2800      	cmp	r0, #0
    410c:	f040 8088 	bne.w	4220 <HandleExecution()+0x1dc>
}
    4110:	b06d      	add	sp, #436	; 0x1b4
    4112:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            if(strcmp(MenuSelCpy.Name, UpDirString)==0) MenuChange(); //only 1 level, returning to root
    4116:	f7fe bb45 	b.w	27a4 <MenuChange()>
   SendMsgPrintfln("Parsing P00 File ");
    411a:	487b      	ldr	r0, [pc, #492]	; (4308 <HandleExecution()+0x2c4>)
    411c:	f7fe fc5c 	bl	29d8 <SendMsgPrintfln(char const*, ...)>
   if(strcmp((char*)MyMenuItem->Code_Image, "C64File") == 0)
    4120:	68a5      	ldr	r5, [r4, #8]
    4122:	497a      	ldr	r1, [pc, #488]	; (430c <HandleExecution()+0x2c8>)
    4124:	4628      	mov	r0, r5
    4126:	f00d f9cf 	bl	114c8 <strcmp>
    412a:	2800      	cmp	r0, #0
    412c:	f040 8155 	bne.w	43da <HandleExecution()+0x396>
      MyMenuItem->Code_Image += 26;
    4130:	351a      	adds	r5, #26
   SendMsgPrintf("OK");
    4132:	4877      	ldr	r0, [pc, #476]	; (4310 <HandleExecution()+0x2cc>)
      MyMenuItem->Code_Image += 26;
    4134:	60a5      	str	r5, [r4, #8]
   SendMsgPrintf("OK");
    4136:	f7ff fc23 	bl	3980 <SendMsgPrintf(char const*, ...)>
         SendMsgPrintfln("PRG xfer %luK to $%04x:$%04x\n", 
    413a:	4876      	ldr	r0, [pc, #472]	; (4314 <HandleExecution()+0x2d0>)
            MenuSelCpy.Size/1024,
    413c:	e9d4 5402 	ldrd	r5, r4, [r4, #8]
            256*MenuSelCpy.Code_Image[1]+MenuSelCpy.Code_Image[0], 
    4140:	782a      	ldrb	r2, [r5, #0]
         SendMsgPrintfln("PRG xfer %luK to $%04x:$%04x\n", 
    4142:	0aa1      	lsrs	r1, r4, #10
            256*MenuSelCpy.Code_Image[1]+MenuSelCpy.Code_Image[0], 
    4144:	786b      	ldrb	r3, [r5, #1]
         SendMsgPrintfln("PRG xfer %luK to $%04x:$%04x\n", 
    4146:	1916      	adds	r6, r2, r4
    4148:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    414c:	eb06 2303 	add.w	r3, r6, r3, lsl #8
    4150:	f7fe fc42 	bl	29d8 <SendMsgPrintfln(char const*, ...)>
         XferImage = MenuSelCpy.Code_Image; 
    4154:	4a70      	ldr	r2, [pc, #448]	; (4318 <HandleExecution()+0x2d4>)
         StreamOffsetAddr = 0; //set to start of data
    4156:	2100      	movs	r1, #0
         XferSize  = MenuSelCpy.Size; 
    4158:	4870      	ldr	r0, [pc, #448]	; (431c <HandleExecution()+0x2d8>)
         XferImage = MenuSelCpy.Code_Image; 
    415a:	6015      	str	r5, [r2, #0]
         StreamOffsetAddr = 0; //set to start of data
    415c:	4a70      	ldr	r2, [pc, #448]	; (4320 <HandleExecution()+0x2dc>)
         IO1[rRegStrAvailable] = 0xff;
    415e:	f8d8 3000 	ldr.w	r3, [r8]
         StreamOffsetAddr = 0; //set to start of data
    4162:	8011      	strh	r1, [r2, #0]
         IO1[rRegStrAvailable] = 0xff;
    4164:	22ff      	movs	r2, #255	; 0xff
         XferSize  = MenuSelCpy.Size; 
    4166:	6004      	str	r4, [r0, #0]
         IO1[rRegStrAvailable] = 0xff;
    4168:	709a      	strb	r2, [r3, #2]
}
    416a:	b06d      	add	sp, #436	; 0x1b4
    416c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      SendMsgPrintfln("%s\r\nUnknown File Type", MenuSelCpy.Name);
    4170:	486c      	ldr	r0, [pc, #432]	; (4324 <HandleExecution()+0x2e0>)
    4172:	e7c0      	b.n	40f6 <HandleExecution()+0xb2>
         if(!LoadFile(&MenuSelCpy, sourceFS)) return;     
    4174:	496c      	ldr	r1, [pc, #432]	; (4328 <HandleExecution()+0x2e4>)
    4176:	4620      	mov	r0, r4
    4178:	f7fe fdc6 	bl	2d08 <LoadFile(StructMenuItem*, FS*)>
    417c:	2800      	cmp	r0, #0
    417e:	d0f4      	beq.n	416a <HandleExecution()+0x126>
         MenuSelCpy.Code_Image = RAM_Image;
    4180:	4b5d      	ldr	r3, [pc, #372]	; (42f8 <HandleExecution()+0x2b4>)
   if (MenuSelCpy.ItemType == rtFileP00) ParseP00File(&MenuSelCpy); 
    4182:	7825      	ldrb	r5, [r4, #0]
         MenuSelCpy.Code_Image = RAM_Image;
    4184:	60a3      	str	r3, [r4, #8]
         break;
    4186:	e77c      	b.n	4082 <HandleExecution()+0x3e>
            if (!ParseCRTHeader(&MenuSelCpy, &EXROM, &GAME)) return;
    4188:	f10d 0b1c 	add.w	fp, sp, #28
    418c:	f10d 010b 	add.w	r1, sp, #11
    4190:	4620      	mov	r0, r4
    4192:	465a      	mov	r2, fp
    4194:	f7fe fc44 	bl	2a20 <ParseCRTHeader(StructMenuItem*, unsigned char*, unsigned char*)>
    4198:	2800      	cmp	r0, #0
    419a:	d0e6      	beq.n	416a <HandleExecution()+0x126>
            uint8_t *ptrChipOffset = MenuSelCpy.Code_Image + CRT_MAIN_HDR_LEN; //Skip header
    419c:	68a3      	ldr	r3, [r4, #8]
   for(uint16_t cnt=0; cnt < NumCrtChips; cnt++) 
    419e:	4e63      	ldr	r6, [pc, #396]	; (432c <HandleExecution()+0x2e8>)
            uint8_t *ptrChipOffset = MenuSelCpy.Code_Image + CRT_MAIN_HDR_LEN; //Skip header
    41a0:	461a      	mov	r2, r3
    41a2:	9301      	str	r3, [sp, #4]
   for(uint16_t cnt=0; cnt < NumCrtChips; cnt++) 
    41a4:	7833      	ldrb	r3, [r6, #0]
            uint8_t *ptrChipOffset = MenuSelCpy.Code_Image + CRT_MAIN_HDR_LEN; //Skip header
    41a6:	f102 0540 	add.w	r5, r2, #64	; 0x40
   for(uint16_t cnt=0; cnt < NumCrtChips; cnt++) 
    41aa:	2b00      	cmp	r3, #0
    41ac:	f000 8121 	beq.w	43f2 <HandleExecution()+0x3ae>
    41b0:	2700      	movs	r7, #0
    41b2:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 4360 <HandleExecution()+0x31c>
      if((uint32_t)CrtChips[cnt].ChipROM >= 0x20200000) free(CrtChips[cnt].ChipROM);
    41b6:	4a5e      	ldr	r2, [pc, #376]	; (4330 <HandleExecution()+0x2ec>)
   for(uint16_t cnt=0; cnt < NumCrtChips; cnt++) 
    41b8:	46b9      	mov	r9, r7
    41ba:	e005      	b.n	41c8 <HandleExecution()+0x184>
    41bc:	7830      	ldrb	r0, [r6, #0]
    41be:	fa1f f189 	uxth.w	r1, r9
    41c2:	4288      	cmp	r0, r1
    41c4:	f240 8115 	bls.w	43f2 <HandleExecution()+0x3ae>
      if((uint32_t)CrtChips[cnt].ChipROM >= 0x20200000) free(CrtChips[cnt].ChipROM);
    41c8:	f85a 0027 	ldr.w	r0, [sl, r7, lsl #2]
   for(uint16_t cnt=0; cnt < NumCrtChips; cnt++) 
    41cc:	f109 0901 	add.w	r9, r9, #1
    41d0:	3703      	adds	r7, #3
      if((uint32_t)CrtChips[cnt].ChipROM >= 0x20200000) free(CrtChips[cnt].ChipROM);
    41d2:	4290      	cmp	r0, r2
    41d4:	d9f2      	bls.n	41bc <HandleExecution()+0x178>
    41d6:	f00a ff89 	bl	f0ec <free>
    41da:	4a55      	ldr	r2, [pc, #340]	; (4330 <HandleExecution()+0x2ec>)
    41dc:	e7ee      	b.n	41bc <HandleExecution()+0x178>
         SendMsgPrintfln("Unk Item Type: %d", MenuSelCpy.ItemType);
    41de:	4629      	mov	r1, r5
    41e0:	4854      	ldr	r0, [pc, #336]	; (4334 <HandleExecution()+0x2f0>)
    41e2:	e788      	b.n	40f6 <HandleExecution()+0xb2>
   return (strlen(DriveDirPath) == 1 && DriveDirPath[0] == '/');
    41e4:	4d54      	ldr	r5, [pc, #336]	; (4338 <HandleExecution()+0x2f4>)
            if (PathIsRoot()) sprintf(FullFilePath, "/%s", MenuSelCpy.Name);  // at root
    41e6:	f10d 0b1c 	add.w	fp, sp, #28
   return (strlen(DriveDirPath) == 1 && DriveDirPath[0] == '/');
    41ea:	4628      	mov	r0, r5
    41ec:	f00d fb88 	bl	11900 <strlen>
    41f0:	2801      	cmp	r0, #1
    41f2:	f000 813b 	beq.w	446c <HandleExecution()+0x428>
            else sprintf(FullFilePath, "%s/%s", DriveDirPath, MenuSelCpy.Name);
    41f6:	6863      	ldr	r3, [r4, #4]
    41f8:	4658      	mov	r0, fp
    41fa:	4a4f      	ldr	r2, [pc, #316]	; (4338 <HandleExecution()+0x2f4>)
    41fc:	494f      	ldr	r1, [pc, #316]	; (433c <HandleExecution()+0x2f8>)
    41fe:	f00c fd17 	bl	10c30 <sprintf>
            DoFlashUpdate(sourceFS, FullFilePath);
    4202:	4659      	mov	r1, fp
    4204:	4848      	ldr	r0, [pc, #288]	; (4328 <HandleExecution()+0x2e4>)
    4206:	f7ff fd49 	bl	3c9c <DoFlashUpdate(FS*, char const*)>
            return;  //we're done here...
    420a:	e7ae      	b.n	416a <HandleExecution()+0x126>
            strcat(DriveDirPath, MenuSelCpy.Name); //append selected dir name
    420c:	4621      	mov	r1, r4
    420e:	484a      	ldr	r0, [pc, #296]	; (4338 <HandleExecution()+0x2f4>)
    4210:	f00c ff4c 	bl	110ac <strcat>
            LoadDirectory(sourceFS); 
    4214:	4844      	ldr	r0, [pc, #272]	; (4328 <HandleExecution()+0x2e4>)
}
    4216:	b06d      	add	sp, #436	; 0x1b4
    4218:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            LoadDirectory(sourceFS); 
    421c:	f7fd bf0e 	b.w	203c <LoadDirectory(FS*)>
               MenuSource = (StructMenuItem*)MenuSelCpy.Code_Image;
    4220:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
               strcat(DriveDirPath, MenuSelCpy.Name); //append selected dir name
    4224:	4629      	mov	r1, r5
               SetNumItems(MenuSelCpy.Size/sizeof(StructMenuItem));
    4226:	f3c2 120f 	ubfx	r2, r2, #4, #16
               MenuSource = (StructMenuItem*)MenuSelCpy.Code_Image;
    422a:	6033      	str	r3, [r6, #0]
   NumItemsFull = NumItems;
    422c:	4b44      	ldr	r3, [pc, #272]	; (4340 <HandleExecution()+0x2fc>)
   IO1[rRegNumItemsOnPage] = (NumItemsFull > MaxItemsPerPage ? MaxItemsPerPage : NumItemsFull);
    422e:	2a13      	cmp	r2, #19
   NumItemsFull = NumItems;
    4230:	801a      	strh	r2, [r3, #0]
   IO1[rRegNumItemsOnPage] = (NumItemsFull > MaxItemsPerPage ? MaxItemsPerPage : NumItemsFull);
    4232:	4613      	mov	r3, r2
    4234:	bf28      	it	cs
    4236:	2313      	movcs	r3, #19
    4238:	b2db      	uxtb	r3, r3
    423a:	737b      	strb	r3, [r7, #13]
      NumItems/MaxItemsPerPage + 
    423c:	4b41      	ldr	r3, [pc, #260]	; (4344 <HandleExecution()+0x300>)
   IO1[rwRegPageNumber] = 1;
    423e:	f887 900e 	strb.w	r9, [r7, #14]
      NumItems/MaxItemsPerPage + 
    4242:	fba3 0302 	umull	r0, r3, r3, r2
      (NumItems%MaxItemsPerPage!=0 ? 1 : 0) +
    4246:	fab2 f082 	clz	r0, r2
      NumItems/MaxItemsPerPage + 
    424a:	1ad4      	subs	r4, r2, r3
      (NumItems%MaxItemsPerPage!=0 ? 1 : 0) +
    424c:	0940      	lsrs	r0, r0, #5
      NumItems/MaxItemsPerPage + 
    424e:	eb03 0354 	add.w	r3, r3, r4, lsr #1
      (NumItems%MaxItemsPerPage!=0 ? 1 : 0) +
    4252:	eb00 1413 	add.w	r4, r0, r3, lsr #4
               strcat(DriveDirPath, MenuSelCpy.Name); //append selected dir name
    4256:	4838      	ldr	r0, [pc, #224]	; (4338 <HandleExecution()+0x2f4>)
      NumItems/MaxItemsPerPage + 
    4258:	091b      	lsrs	r3, r3, #4
      (NumItems%MaxItemsPerPage!=0 ? 1 : 0) +
    425a:	eb03 05c3 	add.w	r5, r3, r3, lsl #3
    425e:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    4262:	1ad2      	subs	r2, r2, r3
      NumItems/MaxItemsPerPage + 
    4264:	b292      	uxth	r2, r2
      (NumItems%MaxItemsPerPage!=0 ? 1 : 0) +
    4266:	2a00      	cmp	r2, #0
    4268:	bf0c      	ite	eq
    426a:	4623      	moveq	r3, r4
    426c:	1c63      	addne	r3, r4, #1
    426e:	b2db      	uxtb	r3, r3
   IO1[rRegNumPages] = 
    4270:	73fb      	strb	r3, [r7, #15]
}
    4272:	b06d      	add	sp, #436	; 0x1b4
    4274:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
               strcat(DriveDirPath, MenuSelCpy.Name); //append selected dir name
    4278:	f00c bf18 	b.w	110ac <strcat>
         SetGameDeassert;
    427c:	4b32      	ldr	r3, [pc, #200]	; (4348 <HandleExecution()+0x304>)
         SetExROMDeassert;
    427e:	f44f 6200 	mov.w	r2, #2048	; 0x800
         SetGameDeassert;
    4282:	f44f 5580 	mov.w	r5, #4096	; 0x1000
         LOROM_Image = MenuSelCpy.Code_Image;
    4286:	68a0      	ldr	r0, [r4, #8]
    4288:	4930      	ldr	r1, [pc, #192]	; (434c <HandleExecution()+0x308>)
         SetGameDeassert;
    428a:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
         SetExROMDeassert;
    428e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
         HIROM_Image = NULL;
    4292:	2200      	movs	r2, #0
    4294:	4b2e      	ldr	r3, [pc, #184]	; (4350 <HandleExecution()+0x30c>)
         LOROM_Image = MenuSelCpy.Code_Image;
    4296:	6008      	str	r0, [r1, #0]
         HIROM_Image = NULL;
    4298:	601a      	str	r2, [r3, #0]
      doReset=true;
    429a:	4b2e      	ldr	r3, [pc, #184]	; (4354 <HandleExecution()+0x310>)
    429c:	2201      	movs	r2, #1
    429e:	701a      	strb	r2, [r3, #0]
}
    42a0:	b06d      	add	sp, #436	; 0x1b4
    42a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      IOHandlerInitToNext();
    42a6:	f7ff be9f 	b.w	3fe8 <IOHandlerInitToNext()>
         SetGameAssert;
    42aa:	4b27      	ldr	r3, [pc, #156]	; (4348 <HandleExecution()+0x304>)
         SetExROMDeassert;
    42ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
         SetGameAssert;
    42b0:	f44f 5580 	mov.w	r5, #4096	; 0x1000
         HIROM_Image = MenuSelCpy.Code_Image;
    42b4:	68a1      	ldr	r1, [r4, #8]
         LOROM_Image = NULL;
    42b6:	4825      	ldr	r0, [pc, #148]	; (434c <HandleExecution()+0x308>)
    42b8:	2400      	movs	r4, #0
         SetGameAssert;
    42ba:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
         SetExROMDeassert;
    42be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
         HIROM_Image = MenuSelCpy.Code_Image;
    42c2:	4a23      	ldr	r2, [pc, #140]	; (4350 <HandleExecution()+0x30c>)
         EmulateVicCycles = true;
    42c4:	4b24      	ldr	r3, [pc, #144]	; (4358 <HandleExecution()+0x314>)
         HIROM_Image = MenuSelCpy.Code_Image;
    42c6:	6011      	str	r1, [r2, #0]
         EmulateVicCycles = true;
    42c8:	2201      	movs	r2, #1
         LOROM_Image = NULL;
    42ca:	6004      	str	r4, [r0, #0]
         EmulateVicCycles = true;
    42cc:	701a      	strb	r2, [r3, #0]
   if (CartLoaded)
    42ce:	e7e4      	b.n	429a <HandleExecution()+0x256>
         SetGameDeassert;
    42d0:	4b1d      	ldr	r3, [pc, #116]	; (4348 <HandleExecution()+0x304>)
         SetExROMAssert;
    42d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
         SetGameDeassert;
    42d6:	f44f 5580 	mov.w	r5, #4096	; 0x1000
         LOROM_Image = MenuSelCpy.Code_Image;
    42da:	68a0      	ldr	r0, [r4, #8]
    42dc:	491b      	ldr	r1, [pc, #108]	; (434c <HandleExecution()+0x308>)
         SetGameDeassert;
    42de:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
         SetExROMAssert;
    42e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
         HIROM_Image = NULL;
    42e6:	2200      	movs	r2, #0
    42e8:	4b19      	ldr	r3, [pc, #100]	; (4350 <HandleExecution()+0x30c>)
         LOROM_Image = MenuSelCpy.Code_Image;
    42ea:	6008      	str	r0, [r1, #0]
         HIROM_Image = NULL;
    42ec:	601a      	str	r2, [r3, #0]
   if (CartLoaded)
    42ee:	e7d4      	b.n	429a <HandleExecution()+0x256>
    42f0:	2005e526 	.word	0x2005e526
    42f4:	2000daf0 	.word	0x2000daf0
    42f8:	2000daf4 	.word	0x2000daf4
    42fc:	20001a18 	.word	0x20001a18
    4300:	20001838 	.word	0x20001838
    4304:	200019e4 	.word	0x200019e4
    4308:	20001778 	.word	0x20001778
    430c:	2000178c 	.word	0x2000178c
    4310:	20001cb4 	.word	0x20001cb4
    4314:	20001a28 	.word	0x20001a28
    4318:	2005dfe4 	.word	0x2005dfe4
    431c:	2005dfe8 	.word	0x2005dfe8
    4320:	2005e528 	.word	0x2005e528
    4324:	200019fc 	.word	0x200019fc
    4328:	2005daf4 	.word	0x2005daf4
    432c:	2005e536 	.word	0x2005e536
    4330:	201fffff 	.word	0x201fffff
    4334:	20001a4c 	.word	0x20001a4c
    4338:	2000d8b4 	.word	0x2000d8b4
    433c:	20001c48 	.word	0x20001c48
    4340:	2005e524 	.word	0x2005e524
    4344:	af286bcb 	.word	0xaf286bcb
    4348:	42004000 	.word	0x42004000
    434c:	2000dae8 	.word	0x2000dae8
    4350:	2000dae0 	.word	0x2000dae0
    4354:	2000c987 	.word	0x2000c987
    4358:	2005e535 	.word	0x2005e535
    435c:	2000dae4 	.word	0x2000dae4
    4360:	2000d2ac 	.word	0x2000d2ac
         XferSize = MenuSelCpy.Size;
    4364:	e9d4 0202 	ldrd	r0, r2, [r4, #8]
         XferImage = MenuSelCpy.Code_Image;
    4368:	494f      	ldr	r1, [pc, #316]	; (44a8 <HandleExecution()+0x464>)
         XferSize = MenuSelCpy.Size;
    436a:	4b50      	ldr	r3, [pc, #320]	; (44ac <HandleExecution()+0x468>)
         XferImage = MenuSelCpy.Code_Image;
    436c:	6008      	str	r0, [r1, #0]
         XferSize = MenuSelCpy.Size;
    436e:	601a      	str	r2, [r3, #0]
         if(!ParseARTHeader()) return;
    4370:	f015 fc76 	bl	19c60 <___Z14ParseARTHeaderv_veneer>
    4374:	2800      	cmp	r0, #0
    4376:	f43f aef8 	beq.w	416a <HandleExecution()+0x126>
         StreamOffsetAddr = 0; //set to start of data
    437a:	494d      	ldr	r1, [pc, #308]	; (44b0 <HandleExecution()+0x46c>)
    437c:	2000      	movs	r0, #0
         IO1[rRegStrAvailable] = 0xff;    // transfer start flag, set last    
    437e:	f8d8 3000 	ldr.w	r3, [r8]
    4382:	22ff      	movs	r2, #255	; 0xff
         StreamOffsetAddr = 0; //set to start of data
    4384:	8008      	strh	r0, [r1, #0]
         IO1[rRegStrAvailable] = 0xff;    // transfer start flag, set last    
    4386:	709a      	strb	r2, [r3, #2]
   if (CartLoaded)
    4388:	e6ef      	b.n	416a <HandleExecution()+0x126>
         XferImage = MenuSelCpy.Code_Image;
    438a:	4947      	ldr	r1, [pc, #284]	; (44a8 <HandleExecution()+0x464>)
    438c:	68a5      	ldr	r5, [r4, #8]
         XferSize = MenuSelCpy.Size;
    438e:	4b47      	ldr	r3, [pc, #284]	; (44ac <HandleExecution()+0x468>)
    4390:	68e2      	ldr	r2, [r4, #12]
         ParseSIDHeader(MenuSelCpy.Name); //Parse SID File & set up to transfer to C64 RAM
    4392:	6860      	ldr	r0, [r4, #4]
         XferImage = MenuSelCpy.Code_Image;
    4394:	600d      	str	r5, [r1, #0]
         XferSize = MenuSelCpy.Size;
    4396:	601a      	str	r2, [r3, #0]
}
    4398:	b06d      	add	sp, #436	; 0x1b4
    439a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
         ParseSIDHeader(MenuSelCpy.Name); //Parse SID File & set up to transfer to C64 RAM
    439e:	f015 bc67 	b.w	19c70 <___Z14ParseSIDHeaderPKc_veneer>
         XferSize = MenuSelCpy.Size;
    43a2:	e9d4 0202 	ldrd	r0, r2, [r4, #8]
         XferImage = MenuSelCpy.Code_Image;
    43a6:	4940      	ldr	r1, [pc, #256]	; (44a8 <HandleExecution()+0x464>)
         XferSize = MenuSelCpy.Size;
    43a8:	4b40      	ldr	r3, [pc, #256]	; (44ac <HandleExecution()+0x468>)
         XferImage = MenuSelCpy.Code_Image;
    43aa:	6008      	str	r0, [r1, #0]
         XferSize = MenuSelCpy.Size;
    43ac:	601a      	str	r2, [r3, #0]
         if(!ParseKLAHeader()) return;
    43ae:	f015 fc63 	bl	19c78 <___Z14ParseKLAHeaderv_veneer>
    43b2:	2800      	cmp	r0, #0
    43b4:	d1e1      	bne.n	437a <HandleExecution()+0x336>
    43b6:	e6d8      	b.n	416a <HandleExecution()+0x126>
         LOROM_Image = MenuSelCpy.Code_Image;
    43b8:	68a3      	ldr	r3, [r4, #8]
         SetExROMAssert;
    43ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
         SetGameAssert;
    43be:	4a3d      	ldr	r2, [pc, #244]	; (44b4 <HandleExecution()+0x470>)
    43c0:	f44f 5480 	mov.w	r4, #4096	; 0x1000
         LOROM_Image = MenuSelCpy.Code_Image;
    43c4:	483c      	ldr	r0, [pc, #240]	; (44b8 <HandleExecution()+0x474>)
         SetGameAssert;
    43c6:	f8c2 4088 	str.w	r4, [r2, #136]	; 0x88
         SetExROMAssert;
    43ca:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
         HIROM_Image = MenuSelCpy.Code_Image+0x2000;
    43ce:	f503 5100 	add.w	r1, r3, #8192	; 0x2000
    43d2:	4a3a      	ldr	r2, [pc, #232]	; (44bc <HandleExecution()+0x478>)
         LOROM_Image = MenuSelCpy.Code_Image;
    43d4:	6003      	str	r3, [r0, #0]
         HIROM_Image = MenuSelCpy.Code_Image+0x2000;
    43d6:	6011      	str	r1, [r2, #0]
   if (CartLoaded)
    43d8:	e75f      	b.n	429a <HandleExecution()+0x256>
      SendMsgPrintfln("\"C64File\" not found");
    43da:	4839      	ldr	r0, [pc, #228]	; (44c0 <HandleExecution()+0x47c>)
    43dc:	f7fe fafc 	bl	29d8 <SendMsgPrintfln(char const*, ...)>
   SendMsgPrintf("OK");
    43e0:	4838      	ldr	r0, [pc, #224]	; (44c4 <HandleExecution()+0x480>)
    43e2:	f7ff facd 	bl	3980 <SendMsgPrintf(char const*, ...)>
         SendMsgPrintfln(" :(");
    43e6:	4838      	ldr	r0, [pc, #224]	; (44c8 <HandleExecution()+0x484>)
}
    43e8:	b06d      	add	sp, #436	; 0x1b4
    43ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
         SendMsgPrintfln(" :(");
    43ee:	f7fe baf3 	b.w	29d8 <SendMsgPrintfln(char const*, ...)>
   NumCrtChips = 0;
    43f2:	2300      	movs	r3, #0
            while (MenuSelCpy.Code_Image + MenuSelCpy.Size - ptrChipOffset > 1) //allow for off by 1 sometimes caused by bin2header
    43f4:	9a01      	ldr	r2, [sp, #4]
   NumCrtChips = 0;
    43f6:	7033      	strb	r3, [r6, #0]
            while (MenuSelCpy.Code_Image + MenuSelCpy.Size - ptrChipOffset > 1) //allow for off by 1 sometimes caused by bin2header
    43f8:	68e3      	ldr	r3, [r4, #12]
    43fa:	441a      	add	r2, r3
    43fc:	2b41      	cmp	r3, #65	; 0x41
    43fe:	4692      	mov	sl, r2
    4400:	dd3e      	ble.n	4480 <HandleExecution()+0x43c>
               memcpy(CrtChips[NumCrtChips].ChipROM, ptrChipOffset, CrtChips[NumCrtChips].ROMSize);
    4402:	4f32      	ldr	r7, [pc, #200]	; (44cc <HandleExecution()+0x488>)
    4404:	e016      	b.n	4434 <HandleExecution()+0x3f0>
    4406:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    440a:	4649      	mov	r1, r9
    440c:	eb07 0283 	add.w	r2, r7, r3, lsl #2
    4410:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
    4414:	88d2      	ldrh	r2, [r2, #6]
    4416:	f009 f89b 	bl	d550 <memcpy>
               ptrChipOffset += CrtChips[NumCrtChips].ROMSize;
    441a:	7833      	ldrb	r3, [r6, #0]
    441c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
               NumCrtChips++;
    4420:	3301      	adds	r3, #1
    4422:	7033      	strb	r3, [r6, #0]
               ptrChipOffset += CrtChips[NumCrtChips].ROMSize;
    4424:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    4428:	88dd      	ldrh	r5, [r3, #6]
    442a:	444d      	add	r5, r9
            while (MenuSelCpy.Code_Image + MenuSelCpy.Size - ptrChipOffset > 1) //allow for off by 1 sometimes caused by bin2header
    442c:	ebaa 0305 	sub.w	r3, sl, r5
    4430:	2b01      	cmp	r3, #1
    4432:	dd25      	ble.n	4480 <HandleExecution()+0x43c>
               if (!ParseChipHeader(ptrChipOffset)) //sends error messages
    4434:	4628      	mov	r0, r5
               ptrChipOffset += CRT_CHIP_HDR_LEN;
    4436:	f105 0910 	add.w	r9, r5, #16
               if (!ParseChipHeader(ptrChipOffset)) //sends error messages
    443a:	f7fe fb79 	bl	2b30 <ParseChipHeader(unsigned char*)>
   for(uint16_t cnt=0; cnt < NumCrtChips; cnt++) 
    443e:	7833      	ldrb	r3, [r6, #0]
               if (!ParseChipHeader(ptrChipOffset)) //sends error messages
    4440:	2800      	cmp	r0, #0
    4442:	d1e0      	bne.n	4406 <HandleExecution()+0x3c2>
   for(uint16_t cnt=0; cnt < NumCrtChips; cnt++) 
    4444:	b333      	cbz	r3, 4494 <HandleExecution()+0x450>
    4446:	4604      	mov	r4, r0
    4448:	f8df a080 	ldr.w	sl, [pc, #128]	; 44cc <HandleExecution()+0x488>
      if((uint32_t)CrtChips[cnt].ChipROM >= 0x20200000) free(CrtChips[cnt].ChipROM);
    444c:	4f20      	ldr	r7, [pc, #128]	; (44d0 <HandleExecution()+0x48c>)
   for(uint16_t cnt=0; cnt < NumCrtChips; cnt++) 
    444e:	4605      	mov	r5, r0
    4450:	e003      	b.n	445a <HandleExecution()+0x416>
    4452:	7831      	ldrb	r1, [r6, #0]
    4454:	b2aa      	uxth	r2, r5
    4456:	4291      	cmp	r1, r2
    4458:	d91c      	bls.n	4494 <HandleExecution()+0x450>
      if((uint32_t)CrtChips[cnt].ChipROM >= 0x20200000) free(CrtChips[cnt].ChipROM);
    445a:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
   for(uint16_t cnt=0; cnt < NumCrtChips; cnt++) 
    445e:	3501      	adds	r5, #1
    4460:	3403      	adds	r4, #3
      if((uint32_t)CrtChips[cnt].ChipROM >= 0x20200000) free(CrtChips[cnt].ChipROM);
    4462:	42b8      	cmp	r0, r7
    4464:	d9f5      	bls.n	4452 <HandleExecution()+0x40e>
    4466:	f00a fe41 	bl	f0ec <free>
    446a:	e7f2      	b.n	4452 <HandleExecution()+0x40e>
   return (strlen(DriveDirPath) == 1 && DriveDirPath[0] == '/');
    446c:	782b      	ldrb	r3, [r5, #0]
    446e:	2b2f      	cmp	r3, #47	; 0x2f
    4470:	f47f aec1 	bne.w	41f6 <HandleExecution()+0x1b2>
            if (PathIsRoot()) sprintf(FullFilePath, "/%s", MenuSelCpy.Name);  // at root
    4474:	6862      	ldr	r2, [r4, #4]
    4476:	4658      	mov	r0, fp
    4478:	4916      	ldr	r1, [pc, #88]	; (44d4 <HandleExecution()+0x490>)
    447a:	f00c fbd9 	bl	10c30 <sprintf>
    447e:	e6c0      	b.n	4202 <HandleExecution()+0x1be>
            if (!SetTypeFromCRT(&MenuSelCpy, EXROM, GAME)) 
    4480:	f89b 2000 	ldrb.w	r2, [fp]
    4484:	4620      	mov	r0, r4
    4486:	f89d 100b 	ldrb.w	r1, [sp, #11]
    448a:	f7fe fbe3 	bl	2c54 <SetTypeFromCRT(StructMenuItem*, unsigned char, unsigned char)>
    448e:	b138      	cbz	r0, 44a0 <HandleExecution()+0x45c>
   if (MenuSelCpy.ItemType == rtFileP00) ParseP00File(&MenuSelCpy); 
    4490:	7825      	ldrb	r5, [r4, #0]
    4492:	e619      	b.n	40c8 <HandleExecution()+0x84>
   NumCrtChips = 0;
    4494:	2300      	movs	r3, #0
                  IO1[rwRegNextIOHndlr] = IOH_None;  //EEPROM.read(eepAdNextIOHndlr);  //in case it was over-ridden by .crt
    4496:	f8d8 2000 	ldr.w	r2, [r8]
   NumCrtChips = 0;
    449a:	7033      	strb	r3, [r6, #0]
                  IO1[rwRegNextIOHndlr] = IOH_None;  //EEPROM.read(eepAdNextIOHndlr);  //in case it was over-ridden by .crt
    449c:	74d3      	strb	r3, [r2, #19]
                  return;        
    449e:	e664      	b.n	416a <HandleExecution()+0x126>
               IO1[rwRegNextIOHndlr] = IOH_None;  //EEPROM.read(eepAdNextIOHndlr);  //in case it was over-ridden by .crt
    44a0:	f8d8 3000 	ldr.w	r3, [r8]
    44a4:	74d8      	strb	r0, [r3, #19]
               return;
    44a6:	e660      	b.n	416a <HandleExecution()+0x126>
    44a8:	2005dfe4 	.word	0x2005dfe4
    44ac:	2005dfe8 	.word	0x2005dfe8
    44b0:	2005e528 	.word	0x2005e528
    44b4:	42004000 	.word	0x42004000
    44b8:	2000dae8 	.word	0x2000dae8
    44bc:	2000dae0 	.word	0x2000dae0
    44c0:	20001794 	.word	0x20001794
    44c4:	20001cb4 	.word	0x20001cb4
    44c8:	20001a48 	.word	0x20001a48
    44cc:	2000d2ac 	.word	0x2000d2ac
    44d0:	201fffff 	.word	0x201fffff
    44d4:	20001a14 	.word	0x20001a14

000044d8 <DoC64IRQ()>:
}

bool DoC64IRQ()
{
   uint32_t beginWait = millis();
   IO1[wRegIRQ_ACK] = ricmdNone;
    44d8:	4a1e      	ldr	r2, [pc, #120]	; (4554 <DoC64IRQ()+0x7c>)
    44da:	f04f 0c00 	mov.w	ip, #0
    44de:	491e      	ldr	r1, [pc, #120]	; (4558 <DoC64IRQ()+0x80>)
   SetIRQAssert;
    44e0:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
   IO1[wRegIRQ_ACK] = ricmdNone;
    44e4:	6812      	ldr	r2, [r2, #0]
    44e6:	6808      	ldr	r0, [r1, #0]
{
    44e8:	b410      	push	{r4}
   SetIRQAssert;
    44ea:	f44f 5480 	mov.w	r4, #4096	; 0x1000
   IO1[wRegIRQ_ACK] = ricmdNone;
    44ee:	f882 c01d 	strb.w	ip, [r2, #29]
   SetIRQAssert;
    44f2:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
   
   //wait for C64 app to respond from IRQ 
   while (IO1[wRegIRQ_ACK] != ricmdAck1) 
    44f6:	e003      	b.n	4500 <DoC64IRQ()+0x28>
    44f8:	680b      	ldr	r3, [r1, #0]
   {
      if (millis()-beginWait > 50) 
    44fa:	1a1b      	subs	r3, r3, r0
    44fc:	2b32      	cmp	r3, #50	; 0x32
    44fe:	d81a      	bhi.n	4536 <DoC64IRQ()+0x5e>
   while (IO1[wRegIRQ_ACK] != ricmdAck1) 
    4500:	7f53      	ldrb	r3, [r2, #29]
    4502:	2b01      	cmp	r3, #1
    4504:	d1f8      	bne.n	44f8 <DoC64IRQ()+0x20>
         SetIRQDeassert;
         Printf_dbg("Ack1 Timeout\n");
         return false; // Timeout, Ack 1 (from IRQ)
      }
   }
   SetIRQDeassert;
    4506:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    450a:	f44f 5480 	mov.w	r4, #4096	; 0x1000
    450e:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
    4512:	680b      	ldr	r3, [r1, #0]
    4514:	e002      	b.n	451c <DoC64IRQ()+0x44>
   Printf_dbg("Ack 1 took %lumS\n", (millis()-beginWait));
   
   //now wait for it to respond from main loop
   while (IO1[wRegIRQ_ACK] == ricmdAck1) 
   {
      if (millis()-beginWait > 200) 
    4516:	1a1b      	subs	r3, r3, r0
    4518:	2bc8      	cmp	r3, #200	; 0xc8
    451a:	d816      	bhi.n	454a <DoC64IRQ()+0x72>
   while (IO1[wRegIRQ_ACK] == ricmdAck1) 
    451c:	7f53      	ldrb	r3, [r2, #29]
    451e:	2b01      	cmp	r3, #1
    4520:	680b      	ldr	r3, [r1, #0]
    4522:	d0f8      	beq.n	4516 <DoC64IRQ()+0x3e>
         return false; // Timeout, Ack 2 (from main code)
      }
   }
   Printf_dbg("Ack 1+2 took %lumS\n", (millis()-beginWait));
   
   if (IO1[wRegIRQ_ACK] != IO1[rwRegIRQ_CMD]) //mismatch!
    4524:	7f50      	ldrb	r0, [r2, #29]
    4526:	7f93      	ldrb	r3, [r2, #30]
      Printf_dbg("Mismatch\n");
      return false; // echoed ack2 does not match command sent
   }
   
   return true;
}
    4528:	f85d 4b04 	ldr.w	r4, [sp], #4
   if (IO1[wRegIRQ_ACK] != IO1[rwRegIRQ_CMD]) //mismatch!
    452c:	1ac0      	subs	r0, r0, r3
    452e:	fab0 f080 	clz	r0, r0
    4532:	0940      	lsrs	r0, r0, #5
}
    4534:	4770      	bx	lr
         SetIRQDeassert;
    4536:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    453a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
         return false; // Timeout, Ack 1 (from IRQ)
    453e:	2000      	movs	r0, #0
}
    4540:	f85d 4b04 	ldr.w	r4, [sp], #4
         SetIRQDeassert;
    4544:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    4548:	4770      	bx	lr
         return false; // Timeout, Ack 2 (from main code)
    454a:	2000      	movs	r0, #0
}
    454c:	f85d 4b04 	ldr.w	r4, [sp], #4
    4550:	4770      	bx	lr
    4552:	bf00      	nop
    4554:	2000dae4 	.word	0x2000dae4
    4558:	2005e500 	.word	0x2005e500

0000455c <RemoteLaunch(bool, char const*)>:
}

void RemoteLaunch(bool SD_nUSB, const char *FileNamePath)
{  //assumes file exists & TR is not "busy" (Handler active)
   
   RemoteLaunched = true;
    455c:	4b39      	ldr	r3, [pc, #228]	; (4644 <RemoteLaunch(bool, char const*)+0xe8>)
    455e:	2201      	movs	r2, #1
{  //assumes file exists & TR is not "busy" (Handler active)
    4560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4564:	460f      	mov	r7, r1
   RemoteLaunched = true;
    4566:	701a      	strb	r2, [r3, #0]
   //Set selected drive
   IO1[rWRegCurrMenuWAIT] = SD_nUSB ? rmtSD : rmtUSBDrive;
    4568:	2800      	cmp	r0, #0
    456a:	d055      	beq.n	4618 <RemoteLaunch(bool, char const*)+0xbc>
    456c:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 466c <RemoteLaunch(bool, char const*)+0x110>
    4570:	2200      	movs	r2, #0
   if (SD_nUSB) SD.begin(BUILTIN_SDCARD); // refresh, takes 3 seconds for fail/unpopulated, 20-200mS populated
    4572:	21fe      	movs	r1, #254	; 0xfe
    4574:	4834      	ldr	r0, [pc, #208]	; (4648 <RemoteLaunch(bool, char const*)+0xec>)
   IO1[rWRegCurrMenuWAIT] = SD_nUSB ? rmtSD : rmtUSBDrive;
    4576:	f8d8 3000 	ldr.w	r3, [r8]
    457a:	729a      	strb	r2, [r3, #10]
   if (SD_nUSB) SD.begin(BUILTIN_SDCARD); // refresh, takes 3 seconds for fail/unpopulated, 20-200mS populated
    457c:	f000 fc4c 	bl	4e18 <SDClass::begin(unsigned char)>
   
   //set path & filename
   strcpy(DriveDirPath, FileNamePath);
    4580:	4c32      	ldr	r4, [pc, #200]	; (464c <RemoteLaunch(bool, char const*)+0xf0>)
    4582:	4639      	mov	r1, r7
    4584:	4620      	mov	r0, r4
    4586:	f00d f909 	bl	1179c <strcpy>
   char* ptrFilename = strrchr(DriveDirPath, '/'); //pointer file name, find last slash
    458a:	212f      	movs	r1, #47	; 0x2f
    458c:	4620      	mov	r0, r4
    458e:	f00c feb9 	bl	11304 <strrchr>
   if (ptrFilename == NULL) 
    4592:	2800      	cmp	r0, #0
    4594:	d052      	beq.n	463c <RemoteLaunch(bool, char const*)+0xe0>
      strcpy(DriveDirPath, "/");
      ptrFilename = (char*)FileNamePath; 
   }
   else
   {  //separate path/filename
      *ptrFilename = 0; //terminate DriveDirPath
    4596:	2300      	movs	r3, #0
    4598:	4607      	mov	r7, r0
    459a:	f807 3b01 	strb.w	r3, [r7], #1
   for(uint16_t cnt=0; cnt < NumCrtChips; cnt++) 
    459e:	4e2c      	ldr	r6, [pc, #176]	; (4650 <RemoteLaunch(bool, char const*)+0xf4>)
    45a0:	7833      	ldrb	r3, [r6, #0]
    45a2:	b1b3      	cbz	r3, 45d2 <RemoteLaunch(bool, char const*)+0x76>
    45a4:	2400      	movs	r4, #0
    45a6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 4670 <RemoteLaunch(bool, char const*)+0x114>
      if((uint32_t)CrtChips[cnt].ChipROM >= 0x20200000) free(CrtChips[cnt].ChipROM);
    45aa:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 4674 <RemoteLaunch(bool, char const*)+0x118>
   for(uint16_t cnt=0; cnt < NumCrtChips; cnt++) 
    45ae:	4625      	mov	r5, r4
    45b0:	e003      	b.n	45ba <RemoteLaunch(bool, char const*)+0x5e>
    45b2:	7832      	ldrb	r2, [r6, #0]
    45b4:	b2ab      	uxth	r3, r5
    45b6:	429a      	cmp	r2, r3
    45b8:	d90b      	bls.n	45d2 <RemoteLaunch(bool, char const*)+0x76>
      if((uint32_t)CrtChips[cnt].ChipROM >= 0x20200000) free(CrtChips[cnt].ChipROM);
    45ba:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
   for(uint16_t cnt=0; cnt < NumCrtChips; cnt++) 
    45be:	3501      	adds	r5, #1
    45c0:	3403      	adds	r4, #3
      if((uint32_t)CrtChips[cnt].ChipROM >= 0x20200000) free(CrtChips[cnt].ChipROM);
    45c2:	4548      	cmp	r0, r9
    45c4:	d9f5      	bls.n	45b2 <RemoteLaunch(bool, char const*)+0x56>
    45c6:	f00a fd91 	bl	f0ec <free>
   for(uint16_t cnt=0; cnt < NumCrtChips; cnt++) 
    45ca:	7832      	ldrb	r2, [r6, #0]
    45cc:	b2ab      	uxth	r3, r5
    45ce:	429a      	cmp	r2, r3
    45d0:	d8f3      	bhi.n	45ba <RemoteLaunch(bool, char const*)+0x5e>
   NumCrtChips = 0;
    45d2:	2400      	movs	r4, #0
    45d4:	7034      	strb	r4, [r6, #0]
   FreeCrtChips();
   //FreeSwiftlinkBuffs();

   // Set up DriveDirMenu to point to file to load
   //    without doing LoadDirectory(&SD/&firstPartition);
   InitDriveDirMenu();
    45d6:	f7fd fca7 	bl	1f28 <InitDriveDirMenu()>
   SetDriveDirMenuNameType(0, ptrFilename);
    45da:	4639      	mov	r1, r7
    45dc:	4620      	mov	r0, r4
    45de:	f7fd fd11 	bl	2004 <SetDriveDirMenuNameType(unsigned short, char const*)>
   NumDrvDirMenuItems = 1;
    45e2:	2201      	movs	r2, #1
   MenuSource = DriveDirMenu; 
    45e4:	491b      	ldr	r1, [pc, #108]	; (4654 <RemoteLaunch(bool, char const*)+0xf8>)
   NumDrvDirMenuItems = 1;
    45e6:	481c      	ldr	r0, [pc, #112]	; (4658 <RemoteLaunch(bool, char const*)+0xfc>)
   SelItemFullIdx = 0;  //  "Select" item
   
   Printf_dbg("Remote Launch:\nP: %s\nF: %s\n", DriveDirPath, ptrFilename);
   
   //Get the attention of the C64 via IRQ or reset:
   if(CurrentIOHandler == IOH_TeensyROM)
    45e8:	4b1c      	ldr	r3, [pc, #112]	; (465c <RemoteLaunch(bool, char const*)+0x100>)
   NumDrvDirMenuItems = 1;
    45ea:	8002      	strh	r2, [r0, #0]
   MenuSource = DriveDirMenu; 
    45ec:	680d      	ldr	r5, [r1, #0]
    45ee:	481c      	ldr	r0, [pc, #112]	; (4660 <RemoteLaunch(bool, char const*)+0x104>)
   if(CurrentIOHandler == IOH_TeensyROM)
    45f0:	7819      	ldrb	r1, [r3, #0]
   MenuSource = DriveDirMenu; 
    45f2:	6005      	str	r5, [r0, #0]
   IO1[rRegNumItemsOnPage] = (NumItemsFull > MaxItemsPerPage ? MaxItemsPerPage : NumItemsFull);
    45f4:	f8d8 3000 	ldr.w	r3, [r8]
   if(CurrentIOHandler == IOH_TeensyROM)
    45f8:	2901      	cmp	r1, #1
   NumItemsFull = NumItems;
    45fa:	481a      	ldr	r0, [pc, #104]	; (4664 <RemoteLaunch(bool, char const*)+0x108>)
   IO1[rRegNumItemsOnPage] = (NumItemsFull > MaxItemsPerPage ? MaxItemsPerPage : NumItemsFull);
    45fc:	735a      	strb	r2, [r3, #13]
   NumItemsFull = NumItems;
    45fe:	8002      	strh	r2, [r0, #0]
   IO1[rwRegPageNumber] = 1;
    4600:	739a      	strb	r2, [r3, #14]
   IO1[rRegNumPages] = 
    4602:	73da      	strb	r2, [r3, #15]
   SelItemFullIdx = 0;  //  "Select" item
    4604:	4a18      	ldr	r2, [pc, #96]	; (4668 <RemoteLaunch(bool, char const*)+0x10c>)
   IO1[rwRegCursorItemOnPg] = 0;
    4606:	731c      	strb	r4, [r3, #12]
   SelItemFullIdx = 0;  //  "Select" item
    4608:	8014      	strh	r4, [r2, #0]
   if(CurrentIOHandler == IOH_TeensyROM)
    460a:	d00c      	beq.n	4626 <RemoteLaunch(bool, char const*)+0xca>
      if(InterruptC64(ricmdLaunch)) return;
   }

   //force reset then launch
   Printf_dbg("Reset/launch"); 
   IO1[rwRegIRQ_CMD] = ricmdLaunch;
    460c:	2202      	movs	r2, #2
    460e:	779a      	strb	r2, [r3, #30]
   SetUpMainMenuROM(); //includes DoReset flag set
   
}
    4610:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   SetUpMainMenuROM(); //includes DoReset flag set
    4614:	f7fe b900 	b.w	2818 <SetUpMainMenuROM()>
   IO1[rWRegCurrMenuWAIT] = SD_nUSB ? rmtSD : rmtUSBDrive;
    4618:	f8df 8050 	ldr.w	r8, [pc, #80]	; 466c <RemoteLaunch(bool, char const*)+0x110>
    461c:	2202      	movs	r2, #2
    461e:	f8d8 3000 	ldr.w	r3, [r8]
    4622:	729a      	strb	r2, [r3, #10]
   if (SD_nUSB) SD.begin(BUILTIN_SDCARD); // refresh, takes 3 seconds for fail/unpopulated, 20-200mS populated
    4624:	e7ac      	b.n	4580 <RemoteLaunch(bool, char const*)+0x24>
   IO1[rwRegIRQ_CMD] = IRQCommand;
    4626:	2202      	movs	r2, #2
    4628:	779a      	strb	r2, [r3, #30]
   bool IRQSuccess = DoC64IRQ();
    462a:	f7ff ff55 	bl	44d8 <DoC64IRQ()>
   IO1[rwRegIRQ_CMD] = ricmdNone; //always set back to none/0 for default/protection 
    462e:	f8d8 3000 	ldr.w	r3, [r8]
    4632:	779c      	strb	r4, [r3, #30]
      if(InterruptC64(ricmdLaunch)) return;
    4634:	2800      	cmp	r0, #0
    4636:	d0e9      	beq.n	460c <RemoteLaunch(bool, char const*)+0xb0>
}
    4638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      strcpy(DriveDirPath, "/");
    463c:	232f      	movs	r3, #47	; 0x2f
    463e:	8023      	strh	r3, [r4, #0]
      ptrFilename = (char*)FileNamePath; 
    4640:	e7ad      	b.n	459e <RemoteLaunch(bool, char const*)+0x42>
    4642:	bf00      	nop
    4644:	2005e537 	.word	0x2005e537
    4648:	2005daf4 	.word	0x2005daf4
    464c:	2000d8b4 	.word	0x2000d8b4
    4650:	2005e536 	.word	0x2005e536
    4654:	2000d8b0 	.word	0x2000d8b0
    4658:	2005e522 	.word	0x2005e522
    465c:	2005e534 	.word	0x2005e534
    4660:	2000daf0 	.word	0x2000daf0
    4664:	2005e524 	.word	0x2005e524
    4668:	2005e526 	.word	0x2005e526
    466c:	2000dae4 	.word	0x2000dae4
    4670:	2000d2ac 	.word	0x2000d2ac
    4674:	201fffff 	.word	0x201fffff

00004678 <loop>:
{
    4678:	b570      	push	{r4, r5, r6, lr}
   if (BtnPressed)
    467a:	4c23      	ldr	r4, [pc, #140]	; (4708 <loop+0x90>)
    467c:	7823      	ldrb	r3, [r4, #0]
    467e:	b98b      	cbnz	r3, 46a4 <loop+0x2c>
   if (doReset)
    4680:	4d22      	ldr	r5, [pc, #136]	; (470c <loop+0x94>)
    4682:	782b      	ldrb	r3, [r5, #0]
    4684:	b9d3      	cbnz	r3, 46bc <loop+0x44>
        virtual int available() { return usb_serial_available(); }
    4686:	f00a f8e5 	bl	e854 <usb_serial_available>
   if (Serial.available()) ServiceSerial();
    468a:	2800      	cmp	r0, #0
    468c:	d137      	bne.n	46fe <loop+0x86>
   if (IOHandler[CurrentIOHandler]->PollingHndlr != NULL) IOHandler[CurrentIOHandler]->PollingHndlr();
    468e:	4a20      	ldr	r2, [pc, #128]	; (4710 <loop+0x98>)
    4690:	4b20      	ldr	r3, [pc, #128]	; (4714 <loop+0x9c>)
    4692:	7812      	ldrb	r2, [r2, #0]
    4694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    469a:	2b00      	cmp	r3, #0
    469c:	d032      	beq.n	4704 <loop+0x8c>
}
    469e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   if (IOHandler[CurrentIOHandler]->PollingHndlr != NULL) IOHandler[CurrentIOHandler]->PollingHndlr();
    46a2:	4718      	bx	r3
      runApp(UpperAddr); 
    46a4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   if (doReset)
    46a8:	4d18      	ldr	r5, [pc, #96]	; (470c <loop+0x94>)
      runApp(UpperAddr); 
    46aa:	f015 fae9 	bl	19c80 <___Z6runAppm_veneer>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    46ae:	211a      	movs	r1, #26
    46b0:	4819      	ldr	r0, [pc, #100]	; (4718 <loop+0xa0>)
    46b2:	f00a f939 	bl	e928 <usb_serial_write>
   if (doReset)
    46b6:	782b      	ldrb	r3, [r5, #0]
    46b8:	2b00      	cmp	r3, #0
    46ba:	d0e4      	beq.n	4686 <loop+0xe>
      SetResetAssert; 
    46bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    46c0:	4b16      	ldr	r3, [pc, #88]	; (471c <loop+0xa4>)
    46c2:	210d      	movs	r1, #13
    46c4:	4816      	ldr	r0, [pc, #88]	; (4720 <loop+0xa8>)
    46c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    46ca:	f00a f92d 	bl	e928 <usb_serial_write>
    46ce:	4815      	ldr	r0, [pc, #84]	; (4724 <loop+0xac>)
    46d0:	f008 f84e 	bl	c770 <Print::println()>
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    46d4:	f00a f95c 	bl	e990 <usb_serial_flush_output>
      delay(50); 
    46d8:	2032      	movs	r0, #50	; 0x32
    46da:	f008 fbaf 	bl	ce3c <delay>
      while(ReadButton==0); //avoid self reset detection
    46de:	4a12      	ldr	r2, [pc, #72]	; (4728 <loop+0xb0>)
    46e0:	6813      	ldr	r3, [r2, #0]
    46e2:	025b      	lsls	r3, r3, #9
    46e4:	d5fc      	bpl.n	46e0 <loop+0x68>
      doReset=false;
    46e6:	2300      	movs	r3, #0
      SetResetDeassert;
    46e8:	4a0c      	ldr	r2, [pc, #48]	; (471c <loop+0xa4>)
    46ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
      doReset=false;
    46ee:	702b      	strb	r3, [r5, #0]
      BtnPressed = false;
    46f0:	7023      	strb	r3, [r4, #0]
      SetResetDeassert;
    46f2:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
        virtual int available() { return usb_serial_available(); }
    46f6:	f00a f8ad 	bl	e854 <usb_serial_available>
   if (Serial.available()) ServiceSerial();
    46fa:	2800      	cmp	r0, #0
    46fc:	d0c7      	beq.n	468e <loop+0x16>
    46fe:	f015 faa7 	bl	19c50 <___Z13ServiceSerialv_veneer>
    4702:	e7c4      	b.n	468e <loop+0x16>
}
    4704:	bd70      	pop	{r4, r5, r6, pc}
    4706:	bf00      	nop
    4708:	2005e533 	.word	0x2005e533
    470c:	2000c987 	.word	0x2000c987
    4710:	2005e534 	.word	0x2005e534
    4714:	2000bd4c 	.word	0x2000bd4c
    4718:	2000a65c 	.word	0x2000a65c
    471c:	42004000 	.word	0x42004000
    4720:	2000a678 	.word	0x2000a678
    4724:	2000bfd8 	.word	0x2000bfd8
    4728:	42008000 	.word	0x42008000

0000472c <_GLOBAL__sub_I_strVersionNumber>:
***/

struct EEPROMClass{

#if defined(__arm__) && defined(TEENSYDUINO)
    EEPROMClass()                        { eeprom_initialize(); }
    472c:	f008 bca6 	b.w	d07c <eeprom_initialize>

00004730 <setup>:
{
    4730:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
		uint32_t millis_begin = systick_millis_count;
    4734:	4d85      	ldr	r5, [pc, #532]	; (494c <setup+0x21c>)
    4736:	b087      	sub	sp, #28
   set_arm_clock(816000000);  //slight overclocking, no cooling required
    4738:	4885      	ldr	r0, [pc, #532]	; (4950 <setup+0x220>)
				if (elapsed > 750) break;
    473a:	f240 28ee 	movw	r8, #750	; 0x2ee
    473e:	f008 fa05 	bl	cb4c <set_arm_clock>
		uint32_t millis_begin = systick_millis_count;
    4742:	4c84      	ldr	r4, [pc, #528]	; (4954 <setup+0x224>)
    4744:	682e      	ldr	r6, [r5, #0]
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    4746:	4f84      	ldr	r7, [pc, #528]	; (4958 <setup+0x228>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    4748:	f8df 9270 	ldr.w	r9, [pc, #624]	; 49bc <setup+0x28c>
		yield();
    474c:	f00a f96a 	bl	ea24 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    4750:	7823      	ldrb	r3, [r4, #0]
    4752:	2b00      	cmp	r3, #0
    4754:	f000 80dc 	beq.w	4910 <setup+0x1e0>
    4758:	783b      	ldrb	r3, [r7, #0]
    475a:	07db      	lsls	r3, r3, #31
    475c:	f140 80d8 	bpl.w	4910 <setup+0x1e0>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    4760:	682b      	ldr	r3, [r5, #0]
    4762:	f8d9 2000 	ldr.w	r2, [r9]
    4766:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    4768:	2b0e      	cmp	r3, #14
    476a:	f240 80d1 	bls.w	4910 <setup+0x1e0>
   if (CrashReport) Serial.print(CrashReport);
    476e:	487b      	ldr	r0, [pc, #492]	; (495c <setup+0x22c>)
    4770:	f015 fa72 	bl	19c58 <___ZN16CrashReportClasscvbEv_veneer>
    4774:	2800      	cmp	r0, #0
    4776:	f040 80de 	bne.w	4936 <setup+0x206>
    477a:	4c79      	ldr	r4, [pc, #484]	; (4960 <setup+0x230>)
{
    477c:	2023      	movs	r0, #35	; 0x23
    477e:	f104 0508 	add.w	r5, r4, #8
    4782:	e001      	b.n	4788 <setup+0x58>
   for(uint8_t PinNum=0; PinNum<sizeof(OutputPins); PinNum++) pinMode(OutputPins[PinNum], OUTPUT); 
    4784:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    4788:	2101      	movs	r1, #1
    478a:	f008 fc11 	bl	cfb0 <pinMode>
    478e:	42ac      	cmp	r4, r5
    4790:	d1f8      	bne.n	4784 <setup+0x54>
   DataBufDisable; //buffer disabled
    4792:	4b74      	ldr	r3, [pc, #464]	; (4964 <setup+0x234>)
    4794:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   SetDMADeassert;
    4798:	4873      	ldr	r0, [pc, #460]	; (4968 <setup+0x238>)
   SetIRQDeassert;
    479a:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
   DataBufDisable; //buffer disabled
    479e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   SetDataPortDirOut; //default to output (for C64 Read)
    47a2:	685a      	ldr	r2, [r3, #4]
    47a4:	4c71      	ldr	r4, [pc, #452]	; (496c <setup+0x23c>)
    47a6:	f042 120f 	orr.w	r2, r2, #983055	; 0xf000f
    47aa:	f104 0519 	add.w	r5, r4, #25
    47ae:	605a      	str	r2, [r3, #4]
   SetDMADeassert;
    47b0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    47b4:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
   SetIRQDeassert;
    47b8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   SetNMIDeassert;
    47bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   SetIRQDeassert;
    47c0:	f8c1 0084 	str.w	r0, [r1, #132]	; 0x84
   SetLEDOn;
    47c4:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
   SetNMIDeassert;
    47c8:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
   SetDebugDeassert;
    47cc:	2180      	movs	r1, #128	; 0x80
    47ce:	4a68      	ldr	r2, [pc, #416]	; (4970 <setup+0x240>)
   SetLEDOn;
    47d0:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
   SetDebugDeassert;
    47d4:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
   SetResetAssert; //assert reset until main loop()
    47d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    47dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   for(uint8_t PinNum=0; PinNum<sizeof(InputPins); PinNum++) pinMode(InputPins[PinNum], INPUT); 
    47e0:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    47e4:	2100      	movs	r1, #0
    47e6:	f008 fbe3 	bl	cfb0 <pinMode>
    47ea:	42a5      	cmp	r5, r4
    47ec:	d1f8      	bne.n	47e0 <setup+0xb0>
   pinMode(Reset_Btn_In_PIN, INPUT_PULLUP);  //also makes it Schmitt triggered (PAD_HYS)
    47ee:	2102      	movs	r1, #2
    47f0:	201f      	movs	r0, #31
    47f2:	f008 fbdd 	bl	cfb0 <pinMode>
   pinMode(PHI2_PIN, INPUT_PULLUP);   //also makes it Schmitt triggered (PAD_HYS)
    47f6:	2102      	movs	r1, #2
    47f8:	2001      	movs	r0, #1
    template< typename T > T &get( int idx, T &t ){
        #if defined(__has_include) && __has_include(<type_traits>)
        static_assert(std::is_trivially_copyable<T>::value,"You can not use this type with EEPROM.get" ); // the code below only makes sense if you can "memcpy" T
        #endif
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
    47fa:	ad05      	add	r5, sp, #20
    47fc:	f008 fbd8 	bl	cfb0 <pinMode>
   attachInterrupt( digitalPinToInterrupt(Reset_Btn_In_PIN), isrButton, FALLING );
    4800:	2202      	movs	r2, #2
    4802:	495c      	ldr	r1, [pc, #368]	; (4974 <setup+0x244>)
    4804:	201f      	movs	r0, #31
    4806:	f008 fe09 	bl	d41c <attachInterrupt>
   attachInterrupt( digitalPinToInterrupt(PHI2_PIN), isrPHI2, RISING );
    480a:	2203      	movs	r2, #3
    480c:	495a      	ldr	r1, [pc, #360]	; (4978 <setup+0x248>)
    480e:	2001      	movs	r0, #1
    4810:	f008 fe04 	bl	d41c <attachInterrupt>
        : index( index )                {}
    4814:	2400      	movs	r4, #0
   NVIC_SET_PRIORITY(IRQ_GPIO6789,16); //set HW ints as high priority, otherwise ethernet int timer causes misses
    4816:	4b59      	ldr	r3, [pc, #356]	; (497c <setup+0x24c>)
    4818:	2210      	movs	r2, #16
    481a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    481e:	4620      	mov	r0, r4
    EEPtr& operator++()                 { return ++index, *this; }
    4820:	3401      	adds	r4, #1
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    4822:	f008 fc4f 	bl	d0c4 <eeprom_read_byte>
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
    4826:	f805 0b01 	strb.w	r0, [r5], #1
    482a:	2c04      	cmp	r4, #4
    482c:	d1f7      	bne.n	481e <setup+0xee>
   if (MagNumRead != eepMagicNum) runApp(UpperAddr); //jump to main app if EEP not initialized
    482e:	4b54      	ldr	r3, [pc, #336]	; (4980 <setup+0x250>)
    4830:	9a05      	ldr	r2, [sp, #20]
    4832:	429a      	cmp	r2, r3
    4834:	d003      	beq.n	483e <setup+0x10e>
    4836:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    483a:	f015 fa21 	bl	19c80 <___Z6runAppm_veneer>
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    483e:	f640 405b 	movw	r0, #3163	; 0xc5b
    4842:	f008 fc3f 	bl	d0c4 <eeprom_read_byte>
   if (EEPROM.read(eepAdCrtBootName) == 0) runApp(UpperAddr); //jump to main app if not booting a CRT
    4846:	2800      	cmp	r0, #0
    4848:	d07a      	beq.n	4940 <setup+0x210>
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    484a:	2100      	movs	r1, #0
    484c:	f640 405b 	movw	r0, #3163	; 0xc5b
    4850:	f008 fd48 	bl	d2e4 <eeprom_write_byte>
   IO1 = (uint8_t*)calloc(IO1Size, sizeof(uint8_t)); //allocate IO1 space and init to 0
    4854:	2101      	movs	r1, #1
    4856:	2068      	movs	r0, #104	; 0x68
   IO1[rWRegCurrMenuWAIT] = rmtTeensy;
    4858:	2401      	movs	r4, #1
   IO1 = (uint8_t*)calloc(IO1Size, sizeof(uint8_t)); //allocate IO1 space and init to 0
    485a:	f00a fbf7 	bl	f04c <calloc>
   IO1[rwRegStatus]        = rsReady;
    485e:	235a      	movs	r3, #90	; 0x5a
   IO1[rRegPresence1]     = 0x55;   
    4860:	2155      	movs	r1, #85	; 0x55
   IO1 = (uint8_t*)calloc(IO1Size, sizeof(uint8_t)); //allocate IO1 space and init to 0
    4862:	4a48      	ldr	r2, [pc, #288]	; (4984 <setup+0x254>)
   IO1[rwRegStatus]        = rsReady;
    4864:	7043      	strb	r3, [r0, #1]
   IO1[rWRegCurrMenuWAIT] = rmtTeensy;
    4866:	7284      	strb	r4, [r0, #10]
   IO1[rRegPresence2]     = 0xAA;   
    4868:	24aa      	movs	r4, #170	; 0xaa
   IO1[rRegPresence1]     = 0x55;   
    486a:	7141      	strb	r1, [r0, #5]
   for (uint16_t reg=rRegSIDStrStart; reg<rRegSIDStringTerm; reg++) IO1[reg]=' '; 
    486c:	2120      	movs	r1, #32
   IO1 = (uint8_t*)calloc(IO1Size, sizeof(uint8_t)); //allocate IO1 space and init to 0
    486e:	6010      	str	r0, [r2, #0]
   IO1[rRegPresence2]     = 0xAA;   
    4870:	7184      	strb	r4, [r0, #6]
   for (uint16_t reg=rRegSIDStrStart; reg<rRegSIDStringTerm; reg++) IO1[reg]=' '; 
    4872:	e000      	b.n	4876 <setup+0x146>
   IO1[rRegSIDStringTerm] = 0;   
    4874:	6810      	ldr	r0, [r2, #0]
   for (uint16_t reg=rRegSIDStrStart; reg<rRegSIDStringTerm; reg++) IO1[reg]=' '; 
    4876:	54c1      	strb	r1, [r0, r3]
    4878:	3301      	adds	r3, #1
    487a:	2b67      	cmp	r3, #103	; 0x67
    487c:	d1fa      	bne.n	4874 <setup+0x144>
   IO1[rRegSIDStringTerm] = 0;   
    487e:	6814      	ldr	r4, [r2, #0]
    4880:	2300      	movs	r3, #0
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    4882:	2004      	movs	r0, #4
    4884:	4e40      	ldr	r6, [pc, #256]	; (4988 <setup+0x258>)
    4886:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
    488a:	f008 fc1b 	bl	d0c4 <eeprom_read_byte>
    488e:	4603      	mov	r3, r0
    4890:	2005      	movs	r0, #5
    4892:	f106 072c 	add.w	r7, r6, #44	; 0x2c
   IO1[rwRegPwrUpDefaults]= EEPROM.read(eepAdPwrUpDefaults);
    4896:	7463      	strb	r3, [r4, #17]
    4898:	f008 fc14 	bl	d0c4 <eeprom_read_byte>
   IO1[rwRegTimezone]     = EEPROM.read(eepAdTimezone);  
    489c:	74a0      	strb	r0, [r4, #18]
   while(strlen(StrToPad)<PadToLength) strcat(StrToPad, " ");
    489e:	4d3b      	ldr	r5, [pc, #236]	; (498c <setup+0x25c>)
   SetUpMainMenuROM();
    48a0:	f7fd ffba 	bl	2818 <SetUpMainMenuROM()>
   MenuChange(); //set up drive path, menu source/size
    48a4:	f7fd ff7e 	bl	27a4 <MenuChange()>
   for(uint8_t cnt=0; cnt<IOH_Num_Handlers; cnt++) PadSpace(IOHandler[cnt]->Name, IOHNameLength-1); //done so selection shown on c64 overwrites previous
    48a8:	f856 4b04 	ldr.w	r4, [r6], #4
void PadSpace(char* StrToPad, uint8_t PadToLength)
    48ac:	e001      	b.n	48b2 <setup+0x182>
   while(strlen(StrToPad)<PadToLength) strcat(StrToPad, " ");
    48ae:	882b      	ldrh	r3, [r5, #0]
    48b0:	5223      	strh	r3, [r4, r0]
    48b2:	4620      	mov	r0, r4
    48b4:	f00d f824 	bl	11900 <strlen>
    48b8:	2812      	cmp	r0, #18
    48ba:	d9f8      	bls.n	48ae <setup+0x17e>
   for(uint8_t cnt=0; cnt<IOH_Num_Handlers; cnt++) PadSpace(IOHandler[cnt]->Name, IOHNameLength-1); //done so selection shown on c64 overwrites previous
    48bc:	42be      	cmp	r6, r7
    48be:	d1f3      	bne.n	48a8 <setup+0x178>
   StrSIDInfo = (char*)calloc(StrSIDInfoSize, sizeof(char)); //SID header info storage
    48c0:	2101      	movs	r1, #1
    48c2:	20cd      	movs	r0, #205	; 0xcd
    48c4:	f00a fbc2 	bl	f04c <calloc>
    48c8:	4b31      	ldr	r3, [pc, #196]	; (4990 <setup+0x260>)
    48ca:	4602      	mov	r2, r0
   BigBuf = (uint32_t*)malloc(BigBufSize*sizeof(uint32_t));
    48cc:	2014      	movs	r0, #20
   StrSIDInfo = (char*)calloc(StrSIDInfoSize, sizeof(char)); //SID header info storage
    48ce:	601a      	str	r2, [r3, #0]
   BigBuf = (uint32_t*)malloc(BigBufSize*sizeof(uint32_t));
    48d0:	f00a fc04 	bl	f0dc <malloc>
    48d4:	4a2f      	ldr	r2, [pc, #188]	; (4994 <setup+0x264>)
   sprintf(SerialStringBuf, "       FW: %s, %s\r\n   Teensy: %luMHz  %.1fC", __DATE__, __TIME__, (F_CPU_ACTUAL/1000000), tempmonGetTemp());
    48d6:	4b30      	ldr	r3, [pc, #192]	; (4998 <setup+0x268>)
    48d8:	6010      	str	r0, [r2, #0]
    48da:	681c      	ldr	r4, [r3, #0]
    48dc:	f009 f812 	bl	d904 <tempmonGetTemp>
    48e0:	492e      	ldr	r1, [pc, #184]	; (499c <setup+0x26c>)
    48e2:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    48e6:	4b2e      	ldr	r3, [pc, #184]	; (49a0 <setup+0x270>)
    48e8:	fba1 1404 	umull	r1, r4, r1, r4
    48ec:	4a2d      	ldr	r2, [pc, #180]	; (49a4 <setup+0x274>)
    48ee:	492e      	ldr	r1, [pc, #184]	; (49a8 <setup+0x278>)
    48f0:	0ca4      	lsrs	r4, r4, #18
    48f2:	482e      	ldr	r0, [pc, #184]	; (49ac <setup+0x27c>)
    48f4:	ed8d 0b02 	vstr	d0, [sp, #8]
    48f8:	9400      	str	r4, [sp, #0]
    48fa:	f00c f999 	bl	10c30 <sprintf>
   Serial.printf("\n%sTeensyROM %s is on-line\n", SerialStringBuf, strVersionNumber);
    48fe:	4b2c      	ldr	r3, [pc, #176]	; (49b0 <setup+0x280>)
    4900:	4a2a      	ldr	r2, [pc, #168]	; (49ac <setup+0x27c>)
    4902:	492c      	ldr	r1, [pc, #176]	; (49b4 <setup+0x284>)
    4904:	482c      	ldr	r0, [pc, #176]	; (49b8 <setup+0x288>)
} 
    4906:	b007      	add	sp, #28
    4908:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   Serial.printf("\n%sTeensyROM %s is on-line\n", SerialStringBuf, strVersionNumber);
    490c:	f007 bf4c 	b.w	c7a8 <Print::printf(char const*, ...)>
			uint32_t elapsed = systick_millis_count - millis_begin;
    4910:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
    4912:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
    4914:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
    4916:	b132      	cbz	r2, 4926 <setup+0x1f6>
				if (elapsed > 2000) break;
    4918:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    491c:	f63f af27 	bhi.w	476e <setup+0x3e>
			yield();
    4920:	f00a f880 	bl	ea24 <yield>
    4924:	e712      	b.n	474c <setup+0x1c>
				if (elapsed > 750) break;
    4926:	4543      	cmp	r3, r8
    4928:	d9fa      	bls.n	4920 <setup+0x1f0>
   if (CrashReport) Serial.print(CrashReport);
    492a:	480c      	ldr	r0, [pc, #48]	; (495c <setup+0x22c>)
    492c:	f015 f994 	bl	19c58 <___ZN16CrashReportClasscvbEv_veneer>
    4930:	2800      	cmp	r0, #0
    4932:	f43f af22 	beq.w	477a <setup+0x4a>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
    4936:	4920      	ldr	r1, [pc, #128]	; (49b8 <setup+0x288>)
    4938:	4808      	ldr	r0, [pc, #32]	; (495c <setup+0x22c>)
    493a:	f015 f985 	bl	19c48 <___ZNK16CrashReportClass7printToER5Print_veneer>
    493e:	e71c      	b.n	477a <setup+0x4a>
   if (EEPROM.read(eepAdCrtBootName) == 0) runApp(UpperAddr); //jump to main app if not booting a CRT
    4940:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    4944:	f015 f99c 	bl	19c80 <___Z6runAppm_veneer>
    4948:	e77f      	b.n	484a <setup+0x11a>
    494a:	bf00      	nop
    494c:	2005e500 	.word	0x2005e500
    4950:	30a32c00 	.word	0x30a32c00
    4954:	2005e54e 	.word	0x2005e54e
    4958:	2005e54d 	.word	0x2005e54d
    495c:	2000bce8 	.word	0x2000bce8
    4960:	20001cb8 	.word	0x20001cb8
    4964:	42004000 	.word	0x42004000
    4968:	42008000 	.word	0x42008000
    496c:	200030cf 	.word	0x200030cf
    4970:	4200c000 	.word	0x4200c000
    4974:	00000021 	.word	0x00000021
    4978:	0000002d 	.word	0x0000002d
    497c:	e000e400 	.word	0xe000e400
    4980:	feed6407 	.word	0xfeed6407
    4984:	2000dae4 	.word	0x2000dae4
    4988:	2000bd4c 	.word	0x2000bd4c
    498c:	20001788 	.word	0x20001788
    4990:	2005dfe0 	.word	0x2005dfe0
    4994:	2000d2a8 	.word	0x2000d2a8
    4998:	2000bd24 	.word	0x2000bd24
    499c:	431bde83 	.word	0x431bde83
    49a0:	2000a6b0 	.word	0x2000a6b0
    49a4:	2000a6bc 	.word	0x2000a6bc
    49a8:	2000a6c8 	.word	0x2000a6c8
    49ac:	2000bfe8 	.word	0x2000bfe8
    49b0:	2000c960 	.word	0x2000c960
    49b4:	2000a694 	.word	0x2000a694
    49b8:	2000bfd8 	.word	0x2000bfd8
    49bc:	2005e510 	.word	0x2005e510

000049c0 <SDClass::~SDClass()>:
class SDClass : public FS
    49c0:	4770      	bx	lr
    49c2:	bf00      	nop

000049c4 <SDClass::dateTime(unsigned short*, unsigned short*)>:
{
    49c4:	b530      	push	{r4, r5, lr}
    49c6:	b083      	sub	sp, #12
    49c8:	4605      	mov	r5, r0
    49ca:	460c      	mov	r4, r1
uint32_t makeTime(const DateTimeFields &tm); // convert DateTimeFields to 32 bit time

class teensy3_clock_class
{
public:
        static unsigned long get(void) __attribute__((always_inline)) { return rtc_get(); }
    49cc:	f008 fe90 	bl	d6f0 <rtc_get>
	if (now < 315532800) { // before 1980
    49d0:	4b1c      	ldr	r3, [pc, #112]	; (4a44 <SDClass::dateTime(unsigned short*, unsigned short*)+0x80>)
    49d2:	4298      	cmp	r0, r3
    49d4:	d804      	bhi.n	49e0 <SDClass::dateTime(unsigned short*, unsigned short*)+0x1c>
		*date = 0;
    49d6:	2300      	movs	r3, #0
    49d8:	802b      	strh	r3, [r5, #0]
		*time = 0;
    49da:	8023      	strh	r3, [r4, #0]
}
    49dc:	b003      	add	sp, #12
    49de:	bd30      	pop	{r4, r5, pc}
		breakTime(now, datetime);
    49e0:	4669      	mov	r1, sp
    49e2:	f008 f807 	bl	c9f4 <breakTime(unsigned long, DateTimeFields&)>
		*date = FS_DATE(datetime.year + 1900, datetime.mon + 1, datetime.mday);
    49e6:	f89d 3005 	ldrb.w	r3, [sp, #5]
    49ea:	f89d 2006 	ldrb.w	r2, [sp, #6]
    49ee:	3301      	adds	r3, #1
    49f0:	f89d 1004 	ldrb.w	r1, [sp, #4]
  year -= 1980;
    49f4:	3a50      	subs	r2, #80	; 0x50
    49f6:	b2db      	uxtb	r3, r3
    49f8:	b292      	uxth	r2, r2
  return year > 127 || month > 12 || day > 31 ? 0 :
    49fa:	291f      	cmp	r1, #31
    49fc:	bf98      	it	ls
    49fe:	2b0c      	cmpls	r3, #12
    4a00:	d801      	bhi.n	4a06 <SDClass::dateTime(unsigned short*, unsigned short*)+0x42>
    4a02:	2a7f      	cmp	r2, #127	; 0x7f
    4a04:	d918      	bls.n	4a38 <SDClass::dateTime(unsigned short*, unsigned short*)+0x74>
         year << 9 | month << 5 | day;
    4a06:	2100      	movs	r1, #0
		*time = FS_TIME(datetime.hour, datetime.min, datetime.sec);
    4a08:	f89d 2002 	ldrb.w	r2, [sp, #2]
    4a0c:	f89d 3001 	ldrb.w	r3, [sp, #1]
		*date = FS_DATE(datetime.year + 1900, datetime.mon + 1, datetime.mday);
    4a10:	8029      	strh	r1, [r5, #0]
  return hour > 23 || minute > 59 || second > 59 ? 0 :
    4a12:	2a17      	cmp	r2, #23
    4a14:	bf98      	it	ls
    4a16:	2b3b      	cmpls	r3, #59	; 0x3b
		*time = FS_TIME(datetime.hour, datetime.min, datetime.sec);
    4a18:	f89d 1000 	ldrb.w	r1, [sp]
    4a1c:	d801      	bhi.n	4a22 <SDClass::dateTime(unsigned short*, unsigned short*)+0x5e>
    4a1e:	293b      	cmp	r1, #59	; 0x3b
    4a20:	d903      	bls.n	4a2a <SDClass::dateTime(unsigned short*, unsigned short*)+0x66>
         hour << 11 | minute << 5 | second >> 1;
    4a22:	2300      	movs	r3, #0
    4a24:	8023      	strh	r3, [r4, #0]
}
    4a26:	b003      	add	sp, #12
    4a28:	bd30      	pop	{r4, r5, pc}
    4a2a:	015b      	lsls	r3, r3, #5
    4a2c:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
    4a30:	ea43 0351 	orr.w	r3, r3, r1, lsr #1
    4a34:	b29b      	uxth	r3, r3
    4a36:	e7f5      	b.n	4a24 <SDClass::dateTime(unsigned short*, unsigned short*)+0x60>
         year << 9 | month << 5 | day;
    4a38:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
    4a3c:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
    4a40:	b289      	uxth	r1, r1
    4a42:	e7e1      	b.n	4a08 <SDClass::dateTime(unsigned short*, unsigned short*)+0x44>
    4a44:	12cea5ff 	.word	0x12cea5ff

00004a48 <SDClass::rmdir(char const*)>:
	bool rmdir(const char *filepath) {
    4a48:	b510      	push	{r4, lr}
   * The subdirectory file will be removed only if it is empty.
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
    4a4a:	f8d0 4484 	ldr.w	r4, [r0, #1156]	; 0x484
    4a4e:	b08e      	sub	sp, #56	; 0x38
    4a50:	460a      	mov	r2, r1
    4a52:	b144      	cbz	r4, 4a66 <SDClass::rmdir(char const*)+0x1e>
  FatFile() {}
    4a54:	2300      	movs	r3, #0
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    FatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    4a56:	4621      	mov	r1, r4
    4a58:	4668      	mov	r0, sp
    4a5a:	9300      	str	r3, [sp, #0]
    4a5c:	f002 fdba 	bl	75d4 <FatFile::open(FatVolume*, char const*, int)>
    4a60:	b980      	cbnz	r0, 4a84 <SDClass::rmdir(char const*)+0x3c>
		return sdfs.rmdir(filepath);
	}
    4a62:	b00e      	add	sp, #56	; 0x38
    4a64:	bd10      	pop	{r4, pc}
    4a66:	f8d0 1488 	ldr.w	r1, [r0, #1160]	; 0x488
           m_xVol ? m_xVol->rmdir(path) : false;
    4a6a:	b141      	cbz	r1, 4a7e <SDClass::rmdir(char const*)+0x36>
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    4a6c:	4623      	mov	r3, r4
    4a6e:	4668      	mov	r0, sp
  ExFatFile() {}
    4a70:	940c      	str	r4, [sp, #48]	; 0x30
    4a72:	f000 fecd 	bl	5810 <ExFatFile::open(ExFatVolume*, char const*, int)>
    4a76:	b950      	cbnz	r0, 4a8e <SDClass::rmdir(char const*)+0x46>
    4a78:	2000      	movs	r0, #0
    4a7a:	b00e      	add	sp, #56	; 0x38
    4a7c:	bd10      	pop	{r4, pc}
    4a7e:	4608      	mov	r0, r1
    4a80:	b00e      	add	sp, #56	; 0x38
    4a82:	bd10      	pop	{r4, pc}
    4a84:	4668      	mov	r0, sp
    4a86:	f002 fff9 	bl	7a7c <FatFile::rmdir()>
    4a8a:	b00e      	add	sp, #56	; 0x38
    4a8c:	bd10      	pop	{r4, pc}
    4a8e:	4668      	mov	r0, sp
    4a90:	f000 ff7c 	bl	598c <ExFatFile::rmdir()>
    4a94:	2800      	cmp	r0, #0
    4a96:	d0ef      	beq.n	4a78 <SDClass::rmdir(char const*)+0x30>
    4a98:	e7e3      	b.n	4a62 <SDClass::rmdir(char const*)+0x1a>
    4a9a:	bf00      	nop

00004a9c <SDClass::rename(char const*, char const*)>:
	bool rename(const char *oldfilepath, const char *newfilepath) {
    4a9c:	b570      	push	{r4, r5, r6, lr}
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
    4a9e:	f8d0 5484 	ldr.w	r5, [r0, #1156]	; 0x484
    4aa2:	b08e      	sub	sp, #56	; 0x38
    4aa4:	4616      	mov	r6, r2
    4aa6:	b15d      	cbz	r5, 4ac0 <SDClass::rename(char const*, char const*)+0x24>
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() {return m_cwv;}
  FatFile* vwd() {return &m_vwd;}
    4aa8:	f505 6589 	add.w	r5, r5, #1096	; 0x448
    4aac:	2300      	movs	r3, #0
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    4aae:	460a      	mov	r2, r1
    4ab0:	4668      	mov	r0, sp
    4ab2:	4629      	mov	r1, r5
    4ab4:	9300      	str	r3, [sp, #0]
    4ab6:	f002 fd0b 	bl	74d0 <FatFile::open(FatFile*, char const*, int)>
    4aba:	b990      	cbnz	r0, 4ae2 <SDClass::rename(char const*, char const*)+0x46>
	}
    4abc:	b00e      	add	sp, #56	; 0x38
    4abe:	bd70      	pop	{r4, r5, r6, pc}
    4ac0:	f8d0 0488 	ldr.w	r0, [r0, #1160]	; 0x488
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
    4ac4:	2800      	cmp	r0, #0
    4ac6:	d0f9      	beq.n	4abc <SDClass::rename(char const*, char const*)+0x20>
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() {return m_cwv;}
  ExFatFile* vwd() {return &m_vwd;}
    4ac8:	f500 6489 	add.w	r4, r0, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    4acc:	460a      	mov	r2, r1
    4ace:	462b      	mov	r3, r5
    4ad0:	4668      	mov	r0, sp
    4ad2:	4621      	mov	r1, r4
    4ad4:	950c      	str	r5, [sp, #48]	; 0x30
    4ad6:	f000 fe1f 	bl	5718 <ExFatFile::open(ExFatFile*, char const*, int)>
    4ada:	b948      	cbnz	r0, 4af0 <SDClass::rename(char const*, char const*)+0x54>
    4adc:	2000      	movs	r0, #0
    4ade:	b00e      	add	sp, #56	; 0x38
    4ae0:	bd70      	pop	{r4, r5, r6, pc}
    4ae2:	4632      	mov	r2, r6
    4ae4:	4629      	mov	r1, r5
    4ae6:	4668      	mov	r0, sp
    4ae8:	f002 fed2 	bl	7890 <FatFile::rename(FatFile*, char const*)>
    4aec:	b00e      	add	sp, #56	; 0x38
    4aee:	bd70      	pop	{r4, r5, r6, pc}
    4af0:	4632      	mov	r2, r6
    4af2:	4621      	mov	r1, r4
    4af4:	4668      	mov	r0, sp
    4af6:	f001 f89d 	bl	5c34 <ExFatFile::rename(ExFatFile*, char const*)>
    4afa:	2800      	cmp	r0, #0
    4afc:	d0ee      	beq.n	4adc <SDClass::rename(char const*, char const*)+0x40>
    4afe:	e7dd      	b.n	4abc <SDClass::rename(char const*, char const*)+0x20>

00004b00 <SDClass::usedSize()>:
	uint64_t usedSize() {
    4b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4b02:	4605      	mov	r5, r0
		if (!cardPreviouslyPresent) return (uint64_t)0;
    4b04:	f890 04d0 	ldrb.w	r0, [r0, #1232]	; 0x4d0
    4b08:	b908      	cbnz	r0, 4b0e <SDClass::usedSize()+0xe>
    4b0a:	4601      	mov	r1, r0
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
		  * (uint64_t)sdfs.bytesPerCluster();
	}
    4b0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return m_fVol ? m_fVol->clusterCount() :
    4b0e:	f8d5 3484 	ldr.w	r3, [r5, #1156]	; 0x484
    4b12:	2b00      	cmp	r3, #0
    4b14:	d04c      	beq.n	4bb0 <SDClass::usedSize()+0xb0>
  uint8_t* cacheClear() {
    return m_cache.clear();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
    4b16:	69dc      	ldr	r4, [r3, #28]
    4b18:	f8d5 0490 	ldr.w	r0, [r5, #1168]	; 0x490
    4b1c:	3c01      	subs	r4, #1
    }
    return rtn;
  }
  //----------------------------------------------------------------------------
  /** \return true if can be in dedicated SPI state */
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
    4b1e:	2800      	cmp	r0, #0
    4b20:	d054      	beq.n	4bcc <SDClass::usedSize()+0xcc>
    4b22:	6803      	ldr	r3, [r0, #0]
    4b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4b26:	4798      	blx	r3
    4b28:	b1e0      	cbz	r0, 4b64 <SDClass::usedSize()+0x64>
    4b2a:	f8d5 0490 	ldr.w	r0, [r5, #1168]	; 0x490
    }
    errorPrint(pr);
  }
  //----------------------------------------------------------------------------
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() {return m_card ? m_card->isDedicatedSpi() : false;}
    4b2e:	b378      	cbz	r0, 4b90 <SDClass::usedSize()+0x90>
    4b30:	6803      	ldr	r3, [r0, #0]
    4b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4b34:	4798      	blx	r3
    4b36:	b9a8      	cbnz	r0, 4b64 <SDClass::usedSize()+0x64>
    4b38:	f8d5 0490 	ldr.w	r0, [r5, #1168]	; 0x490
  /** Set SPI sharing state
   * \param[in] value desired state.
   * \return true for success else false;
   */
  bool setDedicatedSpi(bool value) {
    if (m_card) {
    4b3c:	b340      	cbz	r0, 4b90 <SDClass::usedSize()+0x90>
      return m_card->setDedicatedSpi(value);
    4b3e:	6803      	ldr	r3, [r0, #0]
    4b40:	2101      	movs	r1, #1
    4b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4b44:	4798      	blx	r3
    if (switchSpi && !setDedicatedSpi(true)) {
    4b46:	4607      	mov	r7, r0
    4b48:	b310      	cbz	r0, 4b90 <SDClass::usedSize()+0x90>
    return m_fVol ? m_fVol->freeClusterCount() :
    4b4a:	f8d5 0484 	ldr.w	r0, [r5, #1156]	; 0x484
    4b4e:	bb58      	cbnz	r0, 4ba8 <SDClass::usedSize()+0xa8>
    4b50:	f8d5 6488 	ldr.w	r6, [r5, #1160]	; 0x488
    4b54:	4633      	mov	r3, r6
           m_xVol ? m_xVol->freeClusterCount() : 0;
    4b56:	b96e      	cbnz	r6, 4b74 <SDClass::usedSize()+0x74>
    4b58:	f8d5 0490 	ldr.w	r0, [r5, #1168]	; 0x490
    if (m_card) {
    4b5c:	b990      	cbnz	r0, 4b84 <SDClass::usedSize()+0x84>
  uint32_t bytesPerCluster() const {
    4b5e:	2000      	movs	r0, #0
    4b60:	4601      	mov	r1, r0
    4b62:	e7d3      	b.n	4b0c <SDClass::usedSize()+0xc>
    return m_fVol ? m_fVol->freeClusterCount() :
    4b64:	f8d5 0484 	ldr.w	r0, [r5, #1156]	; 0x484
    4b68:	b9e8      	cbnz	r0, 4ba6 <SDClass::usedSize()+0xa6>
    4b6a:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
           m_xVol ? m_xVol->freeClusterCount() : 0;
    4b6e:	2b00      	cmp	r3, #0
    4b70:	d0f5      	beq.n	4b5e <SDClass::usedSize()+0x5e>
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    4b72:	4607      	mov	r7, r0
    4b74:	4618      	mov	r0, r3
    4b76:	f002 f9b3 	bl	6ee0 <ExFatPartition::freeClusterCount()>
    4b7a:	4606      	mov	r6, r0
    if (switchSpi && !setDedicatedSpi(false)) {
    4b7c:	b13f      	cbz	r7, 4b8e <SDClass::usedSize()+0x8e>
    4b7e:	f8d5 0490 	ldr.w	r0, [r5, #1168]	; 0x490
    if (m_card) {
    4b82:	b128      	cbz	r0, 4b90 <SDClass::usedSize()+0x90>
      return m_card->setDedicatedSpi(value);
    4b84:	6803      	ldr	r3, [r0, #0]
    4b86:	2100      	movs	r1, #0
    4b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4b8a:	4798      	blx	r3
    if (switchSpi && !setDedicatedSpi(false)) {
    4b8c:	b100      	cbz	r0, 4b90 <SDClass::usedSize()+0x90>
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
    4b8e:	1ba4      	subs	r4, r4, r6
    return m_fVol ? m_fVol->bytesPerCluster() :
    4b90:	f8d5 3484 	ldr.w	r3, [r5, #1156]	; 0x484
    4b94:	b1fb      	cbz	r3, 4bd6 <SDClass::usedSize()+0xd6>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    4b96:	799b      	ldrb	r3, [r3, #6]
    4b98:	f44f 7100 	mov.w	r1, #512	; 0x200
    4b9c:	4099      	lsls	r1, r3
		  * (uint64_t)sdfs.bytesPerCluster();
    4b9e:	b289      	uxth	r1, r1
    4ba0:	fba1 0104 	umull	r0, r1, r1, r4
	}
    4ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    4ba6:	2700      	movs	r7, #0
    return m_fVol ? m_fVol->freeClusterCount() :
    4ba8:	f004 fc6c 	bl	9484 <FatPartition::freeClusterCount()>
    4bac:	4606      	mov	r6, r0
    4bae:	e7e5      	b.n	4b7c <SDClass::usedSize()+0x7c>
    4bb0:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
  uint32_t clusterCount() const {
    4bb4:	f8d5 0490 	ldr.w	r0, [r5, #1168]	; 0x490
           m_xVol ? m_xVol->clusterCount() : 0;
    4bb8:	b1b3      	cbz	r3, 4be8 <SDClass::usedSize()+0xe8>
   */
  uint8_t* cacheClear() {
    return m_dataCache.clear();
  }
  /** \return the cluster count for the partition. */
  uint32_t clusterCount() const {return m_clusterCount;}
    4bba:	f8d3 4430 	ldr.w	r4, [r3, #1072]	; 0x430
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
    4bbe:	2800      	cmp	r0, #0
    4bc0:	d1af      	bne.n	4b22 <SDClass::usedSize()+0x22>
           m_xVol ? m_xVol->freeClusterCount() : 0;
    4bc2:	4618      	mov	r0, r3
    4bc4:	f002 f98c 	bl	6ee0 <ExFatPartition::freeClusterCount()>
    4bc8:	4606      	mov	r6, r0
    4bca:	e7e0      	b.n	4b8e <SDClass::usedSize()+0x8e>
    return m_fVol ? m_fVol->freeClusterCount() :
    4bcc:	4618      	mov	r0, r3
    4bce:	f004 fc59 	bl	9484 <FatPartition::freeClusterCount()>
    4bd2:	4606      	mov	r6, r0
    4bd4:	e7db      	b.n	4b8e <SDClass::usedSize()+0x8e>
    4bd6:	f8d5 6488 	ldr.w	r6, [r5, #1160]	; 0x488
           m_xVol ? m_xVol->bytesPerCluster() : 0;
    4bda:	2e00      	cmp	r6, #0
    4bdc:	d0bf      	beq.n	4b5e <SDClass::usedSize()+0x5e>
		  * (uint64_t)sdfs.bytesPerCluster();
    4bde:	f8d6 143c 	ldr.w	r1, [r6, #1084]	; 0x43c
    4be2:	fba1 0104 	umull	r0, r1, r1, r4
	}
    4be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4be8:	2800      	cmp	r0, #0
    4bea:	d0b8      	beq.n	4b5e <SDClass::usedSize()+0x5e>
           m_xVol ? m_xVol->clusterCount() : 0;
    4bec:	461c      	mov	r4, r3
    4bee:	e798      	b.n	4b22 <SDClass::usedSize()+0x22>

00004bf0 <SDClass::totalSize()>:
	uint64_t totalSize() {
		if (!cardPreviouslyPresent) return (uint64_t)0;
    4bf0:	f890 34d0 	ldrb.w	r3, [r0, #1232]	; 0x4d0
    4bf4:	b163      	cbz	r3, 4c10 <SDClass::totalSize()+0x20>
    return m_fVol ? m_fVol->clusterCount() :
    4bf6:	f8d0 3484 	ldr.w	r3, [r0, #1156]	; 0x484
    4bfa:	b163      	cbz	r3, 4c16 <SDClass::totalSize()+0x26>
    4bfc:	799a      	ldrb	r2, [r3, #6]
    4bfe:	f44f 7000 	mov.w	r0, #512	; 0x200
    return m_lastCluster - 1;
    4c02:	69d9      	ldr	r1, [r3, #28]
    return m_bytesPerSector << m_sectorsPerClusterShift;
    4c04:	4090      	lsls	r0, r2
    return m_lastCluster - 1;
    4c06:	3901      	subs	r1, #1
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
    4c08:	b280      	uxth	r0, r0
    4c0a:	fba0 0101 	umull	r0, r1, r0, r1
    4c0e:	4770      	bx	lr
		if (!cardPreviouslyPresent) return (uint64_t)0;
    4c10:	4618      	mov	r0, r3
    4c12:	4601      	mov	r1, r0
	}
    4c14:	4770      	bx	lr
    4c16:	f8d0 0488 	ldr.w	r0, [r0, #1160]	; 0x488
           m_xVol ? m_xVol->clusterCount() : 0;
    4c1a:	2800      	cmp	r0, #0
    4c1c:	d0f9      	beq.n	4c12 <SDClass::totalSize()+0x22>
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
    4c1e:	f8d0 143c 	ldr.w	r1, [r0, #1084]	; 0x43c
    4c22:	f8d0 0430 	ldr.w	r0, [r0, #1072]	; 0x430
    4c26:	fba1 0100 	umull	r0, r1, r1, r0
    4c2a:	4770      	bx	lr

00004c2c <SDClass::format(int, char, Print&)>:
{
    4c2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  SdCard* card() {return m_card;}
    4c30:	f8d0 5490 	ldr.w	r5, [r0, #1168]	; 0x490
    4c34:	b08d      	sub	sp, #52	; 0x34
	if (!card) return false; // no SD card
    4c36:	b14d      	cbz	r5, 4c4c <SDClass::format(int, char, Print&)+0x20>
    4c38:	4698      	mov	r8, r3
	uint32_t sectors = card->sectorCount();
    4c3a:	682b      	ldr	r3, [r5, #0]
    4c3c:	4604      	mov	r4, r0
    4c3e:	4628      	mov	r0, r5
    4c40:	69db      	ldr	r3, [r3, #28]
    4c42:	4798      	blx	r3
	if (sectors <= 12288) return false; // card too small
    4c44:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
	uint32_t sectors = card->sectorCount();
    4c48:	4606      	mov	r6, r0
	if (sectors <= 12288) return false; // card too small
    4c4a:	d804      	bhi.n	4c56 <SDClass::format(int, char, Print&)+0x2a>
	if (!card) return false; // no SD card
    4c4c:	2600      	movs	r6, #0
}
    4c4e:	4630      	mov	r0, r6
    4c50:	b00d      	add	sp, #52	; 0x34
    4c52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t *buf = (uint8_t *)malloc(512);
    4c56:	f44f 7000 	mov.w	r0, #512	; 0x200
    4c5a:	f00a fa3f 	bl	f0dc <malloc>
	if (!buf) return false; // unable to allocate memory
    4c5e:	4607      	mov	r7, r0
    4c60:	2800      	cmp	r0, #0
    4c62:	d0f3      	beq.n	4c4c <SDClass::format(int, char, Print&)+0x20>
		ret = exFatFormatter.format(card, buf, &pr);
    4c64:	f10d 0904 	add.w	r9, sp, #4
	if (sectors > 67108864) {
    4c68:	f1b6 6f80 	cmp.w	r6, #67108864	; 0x4000000
		ret = exFatFormatter.format(card, buf, &pr);
    4c6c:	4602      	mov	r2, r0
    4c6e:	4643      	mov	r3, r8
    4c70:	4629      	mov	r1, r5
    4c72:	4648      	mov	r0, r9
	if (sectors > 67108864) {
    4c74:	d92e      	bls.n	4cd4 <SDClass::format(int, char, Print&)+0xa8>
		ret = exFatFormatter.format(card, buf, &pr);
    4c76:	f001 fbff 	bl	6478 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>
    4c7a:	4606      	mov	r6, r0
	free(buf);
    4c7c:	4638      	mov	r0, r7
    4c7e:	f00a fa35 	bl	f0ec <free>
	if (ret) {
    4c82:	2e00      	cmp	r6, #0
    4c84:	d0e2      	beq.n	4c4c <SDClass::format(int, char, Print&)+0x20>
		card->syncDevice();
    4c86:	682b      	ldr	r3, [r5, #0]
    4c88:	4628      	mov	r0, r5
		sdfs.restart(); // TODO: is sdfs.volumeBegin() enough??
    4c8a:	1d27      	adds	r7, r4, #4
		card->syncDevice();
    4c8c:	6a1b      	ldr	r3, [r3, #32]
    4c8e:	4798      	blx	r3
    if (spiConfigBackupPin == 255) {
    4c90:	f894 34c0 	ldrb.w	r3, [r4, #1216]	; 0x4c0
    4c94:	2bff      	cmp	r3, #255	; 0xff
    4c96:	d021      	beq.n	4cdc <SDClass::format(int, char, Print&)+0xb0>
      SdSpiConfig spiConfig(spiConfigBackupPin, spiConfigBackupOptions,
    4c98:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
   *
   * \param[in] config SPI configuration.
   * \return generic card pointer.
   */
  SdCard* newCard(SdSpiConfig config) {
    m_spiCard.begin(config);
    4c9c:	f504 6594 	add.w	r5, r4, #1184	; 0x4a0
    4ca0:	9302      	str	r3, [sp, #8]
    4ca2:	4628      	mov	r0, r5
    4ca4:	f8d4 34c8 	ldr.w	r3, [r4, #1224]	; 0x4c8
  bool cardBegin(SdSpiConfig spiConfig) {
    4ca8:	9303      	str	r3, [sp, #12]
    4caa:	f8b4 34c0 	ldrh.w	r3, [r4, #1216]	; 0x4c0
    4cae:	f8ad 3004 	strh.w	r3, [sp, #4]
    4cb2:	e899 000e 	ldmia.w	r9, {r1, r2, r3}
    4cb6:	f005 fd7d 	bl	a7b4 <DedicatedSpiCard::begin(SdSpiConfig)>
    return m_card && !m_card->errorCode();
    4cba:	f894 34b1 	ldrb.w	r3, [r4, #1201]	; 0x4b1
    m_card = m_cardFactory.newCard(spiConfig);
    4cbe:	f8c4 5490 	str.w	r5, [r4, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    4cc2:	2b00      	cmp	r3, #0
    4cc4:	d1c3      	bne.n	4c4e <SDClass::format(int, char, Print&)+0x22>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    4cc6:	2301      	movs	r3, #1
    4cc8:	4629      	mov	r1, r5
    4cca:	4638      	mov	r0, r7
    4ccc:	461a      	mov	r2, r3
    4cce:	f004 fe39 	bl	9944 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    4cd2:	e7bc      	b.n	4c4e <SDClass::format(int, char, Print&)+0x22>
		ret = fatFormatter.format(card, buf, &pr);
    4cd4:	f004 f89c 	bl	8e10 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>
    4cd8:	4606      	mov	r6, r0
    4cda:	e7cf      	b.n	4c7c <SDClass::format(int, char, Print&)+0x50>
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
    4cdc:	f204 4594 	addw	r5, r4, #1172	; 0x494
    4ce0:	f894 14cc 	ldrb.w	r1, [r4, #1228]	; 0x4cc
    4ce4:	4628      	mov	r0, r5
    4ce6:	f006 fbad 	bl	b444 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
    4cea:	4628      	mov	r0, r5
    m_card = m_cardFactory.newCard(sdioConfig);
    4cec:	f8c4 5490 	str.w	r5, [r4, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    4cf0:	f005 fe0a 	bl	a908 <SdioCard::errorCode() const>
    4cf4:	2800      	cmp	r0, #0
    4cf6:	d1aa      	bne.n	4c4e <SDClass::format(int, char, Print&)+0x22>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    4cf8:	2301      	movs	r3, #1
    4cfa:	f8d4 1490 	ldr.w	r1, [r4, #1168]	; 0x490
    4cfe:	4638      	mov	r0, r7
    4d00:	461a      	mov	r2, r3
    4d02:	f004 fe1f 	bl	9944 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    4d06:	e7a2      	b.n	4c4e <SDClass::format(int, char, Print&)+0x22>

00004d08 <SDClass::mediaPresent()>:
{
    4d08:	b5f0      	push	{r4, r5, r6, r7, lr}
  SdCard* card() {return m_card;}
    4d0a:	f8d0 6490 	ldr.w	r6, [r0, #1168]	; 0x490
    4d0e:	b085      	sub	sp, #20
    4d10:	4604      	mov	r4, r0
	if (card) {
    4d12:	2e00      	cmp	r6, #0
    4d14:	d042      	beq.n	4d9c <SDClass::mediaPresent()+0x94>
		if (cardPreviouslyPresent) {
    4d16:	f890 54d0 	ldrb.w	r5, [r0, #1232]	; 0x4d0
			if (csPin_ == BUILTIN_SDCARD) {
    4d1a:	f890 34d1 	ldrb.w	r3, [r0, #1233]	; 0x4d1
		if (cardPreviouslyPresent) {
    4d1e:	b185      	cbz	r5, 4d42 <SDClass::mediaPresent()+0x3a>
			if (csPin_ == BUILTIN_SDCARD) {
    4d20:	2bfe      	cmp	r3, #254	; 0xfe
    4d22:	d063      	beq.n	4dec <SDClass::mediaPresent()+0xe4>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    4d24:	f894 04d2 	ldrb.w	r0, [r4, #1234]	; 0x4d2
    4d28:	2836      	cmp	r0, #54	; 0x36
    4d2a:	d93d      	bls.n	4da8 <SDClass::mediaPresent()+0xa0>
					ret = card->readCID(&cid);
    4d2c:	6833      	ldr	r3, [r6, #0]
    4d2e:	4669      	mov	r1, sp
    4d30:	4630      	mov	r0, r6
    4d32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4d34:	4798      	blx	r3
    4d36:	4605      	mov	r5, r0
}
    4d38:	4628      	mov	r0, r5
	cardPreviouslyPresent = ret;
    4d3a:	f884 54d0 	strb.w	r5, [r4, #1232]	; 0x4d0
}
    4d3e:	b005      	add	sp, #20
    4d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (csPin_ == BUILTIN_SDCARD) ret = digitalReadFast(_SD_DAT3);
    4d42:	2bfe      	cmp	r3, #254	; 0xfe
    4d44:	d026      	beq.n	4d94 <SDClass::mediaPresent()+0x8c>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    4d46:	f890 04d2 	ldrb.w	r0, [r0, #1234]	; 0x4d2
    4d4a:	2836      	cmp	r0, #54	; 0x36
    4d4c:	d949      	bls.n	4de2 <SDClass::mediaPresent()+0xda>
    if (spiConfigBackupPin == 255) {
    4d4e:	f894 34c0 	ldrb.w	r3, [r4, #1216]	; 0x4c0
				ret = sdfs.restart();
    4d52:	1d27      	adds	r7, r4, #4
    4d54:	2bff      	cmp	r3, #255	; 0xff
    4d56:	d02d      	beq.n	4db4 <SDClass::mediaPresent()+0xac>
      SdSpiConfig spiConfig(spiConfigBackupPin, spiConfigBackupOptions,
    4d58:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    m_spiCard.begin(config);
    4d5c:	f504 6694 	add.w	r6, r4, #1184	; 0x4a0
    4d60:	f8d4 24c8 	ldr.w	r2, [r4, #1224]	; 0x4c8
  bool cardBegin(SdSpiConfig spiConfig) {
    4d64:	9301      	str	r3, [sp, #4]
    4d66:	4630      	mov	r0, r6
    4d68:	f8b4 34c0 	ldrh.w	r3, [r4, #1216]	; 0x4c0
    4d6c:	9202      	str	r2, [sp, #8]
    4d6e:	f8ad 3000 	strh.w	r3, [sp]
    4d72:	466b      	mov	r3, sp
    4d74:	cb0e      	ldmia	r3, {r1, r2, r3}
    4d76:	f005 fd1d 	bl	a7b4 <DedicatedSpiCard::begin(SdSpiConfig)>
    return m_card && !m_card->errorCode();
    4d7a:	f894 34b1 	ldrb.w	r3, [r4, #1201]	; 0x4b1
    m_card = m_cardFactory.newCard(spiConfig);
    4d7e:	f8c4 6490 	str.w	r6, [r4, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    4d82:	b963      	cbnz	r3, 4d9e <SDClass::mediaPresent()+0x96>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    4d84:	2301      	movs	r3, #1
    4d86:	4631      	mov	r1, r6
    4d88:	4638      	mov	r0, r7
    4d8a:	461a      	mov	r2, r3
    4d8c:	f004 fdda 	bl	9944 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    4d90:	4605      	mov	r5, r0
    4d92:	e004      	b.n	4d9e <SDClass::mediaPresent()+0x96>
			return (CORE_PIN46_PINREG & CORE_PIN46_BITMASK) ? 1 : 0;
    4d94:	4b1f      	ldr	r3, [pc, #124]	; (4e14 <SDClass::mediaPresent()+0x10c>)
    4d96:	689b      	ldr	r3, [r3, #8]
			if (ret)
    4d98:	039b      	lsls	r3, r3, #14
    4d9a:	d4d8      	bmi.n	4d4e <SDClass::mediaPresent()+0x46>
		ret = false;
    4d9c:	2500      	movs	r5, #0
}
    4d9e:	4628      	mov	r0, r5
	cardPreviouslyPresent = ret;
    4da0:	f884 54d0 	strb.w	r5, [r4, #1232]	; 0x4d0
}
    4da4:	b005      	add	sp, #20
    4da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    4da8:	f008 f8f0 	bl	cf8c <digitalRead>
    4dac:	1e05      	subs	r5, r0, #0
    4dae:	bf18      	it	ne
    4db0:	2501      	movne	r5, #1
    4db2:	e7f4      	b.n	4d9e <SDClass::mediaPresent()+0x96>
    m_sdioCard.begin(config);
    4db4:	f204 4694 	addw	r6, r4, #1172	; 0x494
    4db8:	f894 14cc 	ldrb.w	r1, [r4, #1228]	; 0x4cc
    4dbc:	4630      	mov	r0, r6
    4dbe:	f006 fb41 	bl	b444 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
    4dc2:	4630      	mov	r0, r6
    m_card = m_cardFactory.newCard(sdioConfig);
    4dc4:	f8c4 6490 	str.w	r6, [r4, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    4dc8:	f005 fd9e 	bl	a908 <SdioCard::errorCode() const>
    4dcc:	2800      	cmp	r0, #0
    4dce:	d1e6      	bne.n	4d9e <SDClass::mediaPresent()+0x96>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    4dd0:	2301      	movs	r3, #1
    4dd2:	f8d4 1490 	ldr.w	r1, [r4, #1168]	; 0x490
    4dd6:	4638      	mov	r0, r7
    4dd8:	461a      	mov	r2, r3
    4dda:	f004 fdb3 	bl	9944 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    4dde:	4605      	mov	r5, r0
    4de0:	e7dd      	b.n	4d9e <SDClass::mediaPresent()+0x96>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    4de2:	f008 f8d3 	bl	cf8c <digitalRead>
			if (ret)
    4de6:	2800      	cmp	r0, #0
    4de8:	d1b1      	bne.n	4d4e <SDClass::mediaPresent()+0x46>
    4dea:	e7d7      	b.n	4d9c <SDClass::mediaPresent()+0x94>
				s = card->status();
    4dec:	6833      	ldr	r3, [r6, #0]
    4dee:	4630      	mov	r0, r6
    4df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    4df2:	4798      	blx	r3
			if (s == 0xFFFFFFFF) {
    4df4:	1c42      	adds	r2, r0, #1
				s = card->status();
    4df6:	4603      	mov	r3, r0
			if (s == 0xFFFFFFFF) {
    4df8:	d094      	beq.n	4d24 <SDClass::mediaPresent()+0x1c>
			} else if (s == 0) {
    4dfa:	2800      	cmp	r0, #0
    4dfc:	d1cf      	bne.n	4d9e <SDClass::mediaPresent()+0x96>
				if (csPin_ == BUILTIN_SDCARD) 
    4dfe:	f894 24d1 	ldrb.w	r2, [r4, #1233]	; 0x4d1
    4e02:	2afe      	cmp	r2, #254	; 0xfe
    4e04:	d1ca      	bne.n	4d9c <SDClass::mediaPresent()+0x94>
					pinMode(_SD_DAT3, INPUT_PULLDOWN);
    4e06:	2103      	movs	r1, #3
    4e08:	202e      	movs	r0, #46	; 0x2e
				ret = false;
    4e0a:	461d      	mov	r5, r3
					pinMode(_SD_DAT3, INPUT_PULLDOWN);
    4e0c:	f008 f8d0 	bl	cfb0 <pinMode>
    4e10:	e7c5      	b.n	4d9e <SDClass::mediaPresent()+0x96>
    4e12:	bf00      	nop
    4e14:	42008000 	.word	0x42008000

00004e18 <SDClass::begin(unsigned char)>:
bool SDClass::begin(uint8_t csPin) {
    4e18:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e1a:	460d      	mov	r5, r1
    4e1c:	4604      	mov	r4, r0
    4e1e:	b085      	sub	sp, #20
	FsDateTime::setCallback(dateTime);
    4e20:	4830      	ldr	r0, [pc, #192]	; (4ee4 <SDClass::begin(unsigned char)+0xcc>)
    4e22:	f007 f84f 	bl	bec4 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))>
	if (csPin == BUILTIN_SDCARD) {
    4e26:	2dfe      	cmp	r5, #254	; 0xfe
	csPin_ = csPin; // remember which one passed in. 
    4e28:	f884 54d1 	strb.w	r5, [r4, #1233]	; 0x4d1
	if (csPin == BUILTIN_SDCARD) {
    4e2c:	d026      	beq.n	4e7c <SDClass::begin(unsigned char)+0x64>
	if (csPin < NUM_DIGITAL_PINS) {
    4e2e:	2d36      	cmp	r5, #54	; 0x36
    4e30:	d902      	bls.n	4e38 <SDClass::begin(unsigned char)+0x20>
	return false;
    4e32:	2000      	movs	r0, #0
}
    4e34:	b005      	add	sp, #20
    4e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    spiConfigBackupOptions = spiConfig.options;
    4e38:	2600      	movs	r6, #0
    spiConfigBackupClock = spiConfig.maxSck;
    4e3a:	4b2b      	ldr	r3, [pc, #172]	; (4ee8 <SDClass::begin(unsigned char)+0xd0>)
    m_spiCard.begin(config);
    4e3c:	f504 6794 	add.w	r7, r4, #1184	; 0x4a0
    4e40:	f88d 5004 	strb.w	r5, [sp, #4]
    4e44:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
    4e48:	f88d 6005 	strb.w	r6, [sp, #5]
    4e4c:	4638      	mov	r0, r7
    spiConfigBackupPin = spiConfig.csPin;
    4e4e:	f884 54c0 	strb.w	r5, [r4, #1216]	; 0x4c0
    spiConfigBackupOptions = spiConfig.options;
    4e52:	f884 64c1 	strb.w	r6, [r4, #1217]	; 0x4c1
    spiConfigBackupPort = spiConfig.spiPort;
    4e56:	f8c4 64c8 	str.w	r6, [r4, #1224]	; 0x4c8
    4e5a:	e9cd 3602 	strd	r3, r6, [sp, #8]
    4e5e:	ab04      	add	r3, sp, #16
    4e60:	e913 000e 	ldmdb	r3, {r1, r2, r3}
    4e64:	f005 fca6 	bl	a7b4 <DedicatedSpiCard::begin(SdSpiConfig)>
    return m_card && !m_card->errorCode();
    4e68:	f894 34b1 	ldrb.w	r3, [r4, #1201]	; 0x4b1
    m_card = m_cardFactory.newCard(spiConfig);
    4e6c:	f8c4 7490 	str.w	r7, [r4, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    4e70:	b383      	cbz	r3, 4ed4 <SDClass::begin(unsigned char)+0xbc>
    return cardBegin(spiConfig) && Vol::begin(m_card);
    4e72:	4630      	mov	r0, r6
		cardPreviouslyPresent = ret;
    4e74:	f884 04d0 	strb.w	r0, [r4, #1232]	; 0x4d0
}
    4e78:	b005      	add	sp, #20
    4e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    m_sdioCard.begin(config);
    4e7c:	f204 4594 	addw	r5, r4, #1172	; 0x494
    sdioConfigBackup = sdioConfig;
    4e80:	2300      	movs	r3, #0
    spiConfigBackupPin = 255;
    4e82:	22ff      	movs	r2, #255	; 0xff
    4e84:	4619      	mov	r1, r3
    4e86:	4628      	mov	r0, r5
    sdioConfigBackup = sdioConfig;
    4e88:	f884 34cc 	strb.w	r3, [r4, #1228]	; 0x4cc
    spiConfigBackupPin = 255;
    4e8c:	f884 24c0 	strb.w	r2, [r4, #1216]	; 0x4c0
    4e90:	f006 fad8 	bl	b444 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
    4e94:	4628      	mov	r0, r5
    m_card = m_cardFactory.newCard(sdioConfig);
    4e96:	f8c4 5490 	str.w	r5, [r4, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    4e9a:	f005 fd35 	bl	a908 <SdioCard::errorCode() const>
    4e9e:	b970      	cbnz	r0, 4ebe <SDClass::begin(unsigned char)+0xa6>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    4ea0:	2301      	movs	r3, #1
    4ea2:	f8d4 1490 	ldr.w	r1, [r4, #1168]	; 0x490
    4ea6:	1d20      	adds	r0, r4, #4
    4ea8:	461a      	mov	r2, r3
    4eaa:	f004 fd4b 	bl	9944 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    4eae:	b130      	cbz	r0, 4ebe <SDClass::begin(unsigned char)+0xa6>
		cardPreviouslyPresent = ret;
    4eb0:	2201      	movs	r2, #1
		cdPin_ = _SD_DAT3;
    4eb2:	232e      	movs	r3, #46	; 0x2e
		cardPreviouslyPresent = ret;
    4eb4:	f884 24d0 	strb.w	r2, [r4, #1232]	; 0x4d0
		cdPin_ = _SD_DAT3;
    4eb8:	f884 34d2 	strb.w	r3, [r4, #1234]	; 0x4d2
		if (!ret) pinMode(_SD_DAT3, INPUT_PULLDOWN);
    4ebc:	e7ba      	b.n	4e34 <SDClass::begin(unsigned char)+0x1c>
		cdPin_ = _SD_DAT3;
    4ebe:	202e      	movs	r0, #46	; 0x2e
		cardPreviouslyPresent = ret;
    4ec0:	2500      	movs	r5, #0
		if (!ret) pinMode(_SD_DAT3, INPUT_PULLDOWN);
    4ec2:	2103      	movs	r1, #3
		cdPin_ = _SD_DAT3;
    4ec4:	f884 04d2 	strb.w	r0, [r4, #1234]	; 0x4d2
		cardPreviouslyPresent = ret;
    4ec8:	f884 54d0 	strb.w	r5, [r4, #1232]	; 0x4d0
		if (!ret) pinMode(_SD_DAT3, INPUT_PULLDOWN);
    4ecc:	f008 f870 	bl	cfb0 <pinMode>
    4ed0:	4628      	mov	r0, r5
    4ed2:	e7af      	b.n	4e34 <SDClass::begin(unsigned char)+0x1c>
    4ed4:	2301      	movs	r3, #1
    4ed6:	4639      	mov	r1, r7
    4ed8:	1d20      	adds	r0, r4, #4
    4eda:	461a      	mov	r2, r3
    4edc:	f004 fd32 	bl	9944 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    4ee0:	e7c8      	b.n	4e74 <SDClass::begin(unsigned char)+0x5c>
    4ee2:	bf00      	nop
    4ee4:	000049c5 	.word	0x000049c5
    4ee8:	017d7840 	.word	0x017d7840

00004eec <_GLOBAL__sub_I_SD>:
	SDClass() { }
    4eec:	4818      	ldr	r0, [pc, #96]	; (4f50 <_GLOBAL__sub_I_SD+0x64>)
  /** SD is in multi-sector read state. */
  static const uint8_t READ_STATE = 1;
  /** SD is in multi-sector write state. */
  static const uint8_t WRITE_STATE = 2;
  /** Construct an instance of SharedSpiCard. */
  SharedSpiCard() {}
    4eee:	f04f 0c29 	mov.w	ip, #41	; 0x29
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    4ef2:	4a18      	ldr	r2, [pc, #96]	; (4f54 <_GLOBAL__sub_I_SD+0x68>)
  FsVolume() {}
    4ef4:	2300      	movs	r3, #0
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
		init_AlwaysInline(bitOrderIn, dataModeIn);
	}

	SPISettings() : _clock(4000000) {
    4ef6:	4918      	ldr	r1, [pc, #96]	; (4f58 <_GLOBAL__sub_I_SD+0x6c>)
	}
	return true;
}
    4ef8:	b410      	push	{r4}
    4efa:	f8c0 2494 	str.w	r2, [r0, #1172]	; 0x494
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    4efe:	2207      	movs	r2, #7
    4f00:	f880 c4b1 	strb.w	ip, [r0, #1201]	; 0x4b1
    4f04:	f04f 0cff 	mov.w	ip, #255	; 0xff
	SPISettings() : _clock(4000000) {
    4f08:	f8c0 14a8 	str.w	r1, [r0, #1192]	; 0x4a8
    4f0c:	f44f 417f 	mov.w	r1, #65280	; 0xff00
    4f10:	4c12      	ldr	r4, [pc, #72]	; (4f5c <_GLOBAL__sub_I_SD+0x70>)
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    4f12:	f8c0 24ac 	str.w	r2, [r0, #1196]	; 0x4ac
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() {}
    4f16:	4a12      	ldr	r2, [pc, #72]	; (4f60 <_GLOBAL__sub_I_SD+0x74>)
    4f18:	f8a0 14d0 	strh.w	r1, [r0, #1232]	; 0x4d0
  SdioConfig() {}
    4f1c:	f8a0 349c 	strh.w	r3, [r0, #1180]	; 0x49c
  SharedSpiCard() {}
    4f20:	f880 34b5 	strb.w	r3, [r0, #1205]	; 0x4b5
    4f24:	f880 34cc 	strb.w	r3, [r0, #1228]	; 0x4cc
    4f28:	f880 c4d2 	strb.w	ip, [r0, #1234]	; 0x4d2
    4f2c:	6004      	str	r4, [r0, #0]
  DedicatedSpiCard() {}
    4f2e:	f8c0 24a0 	str.w	r2, [r0, #1184]	; 0x4a0
SDClass SD;
    4f32:	490c      	ldr	r1, [pc, #48]	; (4f64 <_GLOBAL__sub_I_SD+0x78>)
    4f34:	4a0c      	ldr	r2, [pc, #48]	; (4f68 <_GLOBAL__sub_I_SD+0x7c>)
}
    4f36:	f85d 4b04 	ldr.w	r4, [sp], #4
    4f3a:	f8c0 3484 	str.w	r3, [r0, #1156]	; 0x484
    4f3e:	f8c0 3488 	str.w	r3, [r0, #1160]	; 0x488
class SdBase : public Vol {
    4f42:	f8c0 3490 	str.w	r3, [r0, #1168]	; 0x490
    4f46:	f880 34bc 	strb.w	r3, [r0, #1212]	; 0x4bc
SDClass SD;
    4f4a:	f009 bef7 	b.w	ed3c <__aeabi_atexit>
    4f4e:	bf00      	nop
    4f50:	2005daf4 	.word	0x2005daf4
    4f54:	20003408 	.word	0x20003408
    4f58:	003d0900 	.word	0x003d0900
    4f5c:	200033d8 	.word	0x200033d8
    4f60:	20003270 	.word	0x20003270
    4f64:	000049c1 	.word	0x000049c1
    4f68:	2000c168 	.word	0x2000c168

00004f6c <ExFatFile::dirCache(unsigned char, unsigned char)>:
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    4f6c:	b570      	push	{r4, r5, r6, lr}
  DirPos_t pos = m_dirPos;
    4f6e:	f100 0324 	add.w	r3, r0, #36	; 0x24
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    4f72:	b084      	sub	sp, #16
    4f74:	468c      	mov	ip, r1
    4f76:	4604      	mov	r4, r0
  DirPos_t pos = m_dirPos;
    4f78:	ad01      	add	r5, sp, #4
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    4f7a:	4616      	mov	r6, r2
  DirPos_t pos = m_dirPos;
    4f7c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    4f80:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE*set) != 1) {
    4f84:	ea4f 124c 	mov.w	r2, ip, lsl #5
    4f88:	4629      	mov	r1, r5
    4f8a:	6a20      	ldr	r0, [r4, #32]
    4f8c:	f001 fec4 	bl	6d18 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    4f90:	2801      	cmp	r0, #1
    4f92:	d106      	bne.n	4fa2 <ExFatFile::dirCache(unsigned char, unsigned char)+0x36>
  return m_vol->dirCache(&pos, options);
    4f94:	4632      	mov	r2, r6
    4f96:	4629      	mov	r1, r5
    4f98:	6a20      	ldr	r0, [r4, #32]
    4f9a:	f001 fea1 	bl	6ce0 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
}
    4f9e:	b004      	add	sp, #16
    4fa0:	bd70      	pop	{r4, r5, r6, pc}
    return nullptr;
    4fa2:	2000      	movs	r0, #0
}
    4fa4:	b004      	add	sp, #16
    4fa6:	bd70      	pop	{r4, r5, r6, pc}

00004fa8 <ExFatFile::close()>:
bool ExFatFile::close() {
    4fa8:	b510      	push	{r4, lr}
    4faa:	4604      	mov	r4, r0
  bool rtn = sync();
    4fac:	f000 fdba 	bl	5b24 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    4fb0:	2300      	movs	r3, #0
    4fb2:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    4fb6:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    4fba:	bd10      	pop	{r4, pc}

00004fbc <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    4fbc:	b538      	push	{r3, r4, r5, lr}
    4fbe:	4614      	mov	r4, r2
    4fc0:	460d      	mov	r5, r1
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    4fc2:	2200      	movs	r2, #0
    4fc4:	f100 0124 	add.w	r1, r0, #36	; 0x24
    4fc8:	6a00      	ldr	r0, [r0, #32]
    4fca:	f001 fe89 	bl	6ce0 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    4fce:	4603      	mov	r3, r0
    4fd0:	b120      	cbz	r0, 4fdc <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x20>
    4fd2:	8942      	ldrh	r2, [r0, #10]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->createDate);
  *ptime = getLe16(df->createTime);
  return true;
    4fd4:	2001      	movs	r0, #1
  *pdate = getLe16(df->createDate);
    4fd6:	802a      	strh	r2, [r5, #0]
    4fd8:	891b      	ldrh	r3, [r3, #8]
  *ptime = getLe16(df->createTime);
    4fda:	8023      	strh	r3, [r4, #0]

 fail:
  return false;
}
    4fdc:	bd38      	pop	{r3, r4, r5, pc}
    4fde:	bf00      	nop

00004fe0 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
//------------------------------------------------------------------------------
bool ExFatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    4fe0:	b538      	push	{r3, r4, r5, lr}
    4fe2:	4614      	mov	r4, r2
    4fe4:	460d      	mov	r5, r1
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    4fe6:	2200      	movs	r2, #0
    4fe8:	f100 0124 	add.w	r1, r0, #36	; 0x24
    4fec:	6a00      	ldr	r0, [r0, #32]
    4fee:	f001 fe77 	bl	6ce0 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    4ff2:	4603      	mov	r3, r0
    4ff4:	b120      	cbz	r0, 5000 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x20>
    4ff6:	89c2      	ldrh	r2, [r0, #14]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->modifyDate);
  *ptime = getLe16(df->modifyTime);
  return true;
    4ff8:	2001      	movs	r0, #1
  *pdate = getLe16(df->modifyDate);
    4ffa:	802a      	strh	r2, [r5, #0]
    4ffc:	899b      	ldrh	r3, [r3, #12]
  *ptime = getLe16(df->modifyTime);
    4ffe:	8023      	strh	r3, [r4, #0]

 fail:
  return false;
}
    5000:	bd38      	pop	{r3, r4, r5, pc}
    5002:	bf00      	nop

00005004 <ExFatFile::openRoot(ExFatVolume*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    5004:	b538      	push	{r3, r4, r5, lr}
    5006:	460d      	mov	r5, r1
  if (isOpen()) {
    5008:	f890 1031 	ldrb.w	r1, [r0, #49]	; 0x31
    500c:	b109      	cbz	r1, 5012 <ExFatFile::openRoot(ExFatVolume*)+0xe>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    500e:	2000      	movs	r0, #0
}
    5010:	bd38      	pop	{r3, r4, r5, pc}
  memset(this, 0, sizeof(ExFatFile));
    5012:	2238      	movs	r2, #56	; 0x38
    5014:	4604      	mov	r4, r0
    5016:	f00b ffcd 	bl	10fb4 <memset>
  m_flags = FILE_FLAG_READ;
    501a:	2301      	movs	r3, #1
  m_attributes = FILE_ATTR_ROOT;
    501c:	2240      	movs	r2, #64	; 0x40
  m_vol = vol;
    501e:	6225      	str	r5, [r4, #32]
  m_flags = FILE_FLAG_READ;
    5020:	4618      	mov	r0, r3
    5022:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_ROOT;
    5026:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
}
    502a:	bd38      	pop	{r3, r4, r5, pc}

0000502c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const char* path,
                            ExName_t* fname, const char** ptr) {
    502c:	b4f0      	push	{r4, r5, r6, r7}
    502e:	460d      	mov	r5, r1
  // Skip leading spaces.
  while (*path == ' ') {
    5030:	7809      	ldrb	r1, [r1, #0]
    5032:	2920      	cmp	r1, #32
    5034:	d103      	bne.n	503e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x12>
    5036:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    503a:	2c20      	cmp	r4, #32
    503c:	d0fb      	beq.n	5036 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa>
    path++;
  }
  fname->begin = path;
    503e:	6015      	str	r5, [r2, #0]
  fname->end = path;
    5040:	6095      	str	r5, [r2, #8]
  while (*path && !isDirSeparator(*path)) {
    5042:	782c      	ldrb	r4, [r5, #0]
    5044:	2c2f      	cmp	r4, #47	; 0x2f
    5046:	d011      	beq.n	506c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    5048:	b184      	cbz	r4, 506c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    504a:	1c6e      	adds	r6, r5, #1
    504c:	2c3c      	cmp	r4, #60	; 0x3c
    504e:	4f1d      	ldr	r7, [pc, #116]	; (50c4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x98>)
    uint8_t c = *path++;
    5050:	4635      	mov	r5, r6
    if (!lfnLegalChar(c)) {
    5052:	d82a      	bhi.n	50aa <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7e>
    5054:	2c21      	cmp	r4, #33	; 0x21
    5056:	d812      	bhi.n	507e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x52>
    5058:	f104 3cff 	add.w	ip, r4, #4294967295
    505c:	f1bc 0f1e 	cmp.w	ip, #30
    5060:	d816      	bhi.n	5090 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x64>
  *ptr = path;
  return hashName(fname);

 fail:
  return false;
}
    5062:	2000      	movs	r0, #0
    5064:	bcf0      	pop	{r4, r5, r6, r7}
    5066:	4770      	bx	lr
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    5068:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    506c:	2c20      	cmp	r4, #32
    506e:	d0fb      	beq.n	5068 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3c>
    5070:	2c2f      	cmp	r4, #47	; 0x2f
    5072:	d0f9      	beq.n	5068 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3c>
  *ptr = path;
    5074:	601d      	str	r5, [r3, #0]
  return hashName(fname);
    5076:	4611      	mov	r1, r2
}
    5078:	bcf0      	pop	{r4, r5, r6, r7}
  return hashName(fname);
    507a:	f001 bd1f 	b.w	6abc <ExFatFile::hashName(ExName_t*)>
    507e:	f1a4 0c22 	sub.w	ip, r4, #34	; 0x22
    5082:	fa5f fc8c 	uxtb.w	ip, ip
    5086:	fa27 fc0c 	lsr.w	ip, r7, ip
    508a:	f01c 0f01 	tst.w	ip, #1
    508e:	d1e8      	bne.n	5062 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    if (c != '.' && c != ' ') {
    5090:	2c2e      	cmp	r4, #46	; 0x2e
    5092:	d001      	beq.n	5098 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    5094:	2c20      	cmp	r4, #32
    5096:	d10d      	bne.n	50b4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x88>
  while (*path && !isDirSeparator(*path)) {
    5098:	f816 4b01 	ldrb.w	r4, [r6], #1
    509c:	2c00      	cmp	r4, #0
    509e:	d0e5      	beq.n	506c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    50a0:	2c2f      	cmp	r4, #47	; 0x2f
    50a2:	d0e3      	beq.n	506c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    uint8_t c = *path++;
    50a4:	2c3c      	cmp	r4, #60	; 0x3c
    50a6:	4635      	mov	r5, r6
    if (!lfnLegalChar(c)) {
    50a8:	d9d4      	bls.n	5054 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x28>
    50aa:	2c5c      	cmp	r4, #92	; 0x5c
    50ac:	d0d9      	beq.n	5062 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    50ae:	d903      	bls.n	50b8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8c>
    50b0:	2c7c      	cmp	r4, #124	; 0x7c
    50b2:	d0d6      	beq.n	5062 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
      fname->end = path;
    50b4:	6096      	str	r6, [r2, #8]
    50b6:	e7ef      	b.n	5098 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    50b8:	3c3e      	subs	r4, #62	; 0x3e
    50ba:	2c01      	cmp	r4, #1
    50bc:	d8fa      	bhi.n	50b4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x88>
}
    50be:	2000      	movs	r0, #0
    50c0:	bcf0      	pop	{r4, r5, r6, r7}
    50c2:	4770      	bx	lr
    50c4:	05002101 	.word	0x05002101

000050c8 <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    50c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    50cc:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    50d0:	b083      	sub	sp, #12
    50d2:	4605      	mov	r5, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    50d4:	07dc      	lsls	r4, r3, #31
    50d6:	d574      	bpl.n	51c2 <ExFatFile::read(void*, unsigned int)+0xfa>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    50d8:	0658      	lsls	r0, r3, #25
    50da:	460f      	mov	r7, r1
    50dc:	4690      	mov	r8, r2
    50de:	f140 80b0 	bpl.w	5242 <ExFatFile::read(void*, unsigned int)+0x17a>
    if ((m_curPosition + count) > m_validLength) {
    50e2:	e9d5 2300 	ldrd	r2, r3, [r5]
    50e6:	e9d5 1004 	ldrd	r1, r0, [r5, #16]
    50ea:	eb18 0402 	adds.w	r4, r8, r2
    50ee:	f143 0300 	adc.w	r3, r3, #0
    50f2:	42a1      	cmp	r1, r4
    50f4:	eb70 0303 	sbcs.w	r3, r0, r3
    50f8:	f0c0 80a9 	bcc.w	524e <ExFatFile::read(void*, unsigned int)+0x186>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    50fc:	f1b8 0f00 	cmp.w	r8, #0
    5100:	d05b      	beq.n	51ba <ExFatFile::read(void*, unsigned int)+0xf2>
    if ((m_curPosition + count) > m_validLength) {
    5102:	4646      	mov	r6, r8
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5104:	f105 0918 	add.w	r9, r5, #24
    if ((m_curPosition + count) > m_validLength) {
    5108:	e9d5 3200 	ldrd	r3, r2, [r5]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    510c:	f8d5 a020 	ldr.w	sl, [r5, #32]
    5110:	f8da 4438 	ldr.w	r4, [sl, #1080]	; 0x438
    5114:	401c      	ands	r4, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    5116:	f3c4 0b08 	ubfx	fp, r4, #0, #9
    if (clusterOffset == 0) {
    511a:	2c00      	cmp	r4, #0
    511c:	d170      	bne.n	5200 <ExFatFile::read(void*, unsigned int)+0x138>
      if (m_curPosition == 0) {
    511e:	4313      	orrs	r3, r2
    5120:	d170      	bne.n	5204 <ExFatFile::read(void*, unsigned int)+0x13c>
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    5122:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    5126:	065a      	lsls	r2, r3, #25
   *
   * \return true if busy else false.
   */
  bool isBusy() {return m_blockDev->isBusy();}
  /** \return the root directory start cluster number. */
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    5128:	bf4c      	ite	mi
    512a:	f8da 2434 	ldrmi.w	r2, [sl, #1076]	; 0x434
    512e:	69ea      	ldrpl	r2, [r5, #28]
        m_curCluster++;
    5130:	61aa      	str	r2, [r5, #24]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    5132:	f89a 0445 	ldrb.w	r0, [sl, #1093]	; 0x445
    5136:	3a02      	subs	r2, #2
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
    5138:	f8da 142c 	ldr.w	r1, [sl, #1068]	; 0x42c
             (clusterOffset >> m_vol->bytesPerSectorShift());
    513c:	0a63      	lsrs	r3, r4, #9
    513e:	4082      	lsls	r2, r0
    sector = m_vol->clusterStartSector(m_curCluster) +
    5140:	eb01 2154 	add.w	r1, r1, r4, lsr #9
    5144:	4411      	add	r1, r2
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    5146:	f1bb 0f00 	cmp.w	fp, #0
    514a:	d145      	bne.n	51d8 <ExFatFile::read(void*, unsigned int)+0x110>
    514c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    5150:	d342      	bcc.n	51d8 <ExFatFile::read(void*, unsigned int)+0x110>
    return m_sector;
    5152:	f8da 221c 	ldr.w	r2, [sl, #540]	; 0x21c
                          || sector == m_vol->dataCacheSector()) {
    5156:	4291      	cmp	r1, r2
    5158:	d03e      	beq.n	51d8 <ExFatFile::read(void*, unsigned int)+0x110>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    515a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    515e:	d358      	bcc.n	5212 <ExFatFile::read(void*, unsigned int)+0x14a>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    5160:	f04f 0b01 	mov.w	fp, #1
    5164:	fa0b fb00 	lsl.w	fp, fp, r0
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit reads to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    5168:	ebab 0b03 	sub.w	fp, fp, r3
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    516c:	0a73      	lsrs	r3, r6, #9
    516e:	459b      	cmp	fp, r3
    5170:	bf28      	it	cs
    5172:	469b      	movcs	fp, r3
    return sector <= m_sector && m_sector < (sector + count);
    5174:	4291      	cmp	r1, r2
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    5176:	ea4f 244b 	mov.w	r4, fp, lsl #9
    517a:	d80a      	bhi.n	5192 <ExFatFile::read(void*, unsigned int)+0xca>
    517c:	eb01 030b 	add.w	r3, r1, fp
    5180:	429a      	cmp	r2, r3
    5182:	d206      	bcs.n	5192 <ExFatFile::read(void*, unsigned int)+0xca>
    if (isCached(sector, count) && !sync()) {
    5184:	f50a 7004 	add.w	r0, sl, #528	; 0x210
    5188:	9101      	str	r1, [sp, #4]
    518a:	f006 fe3d 	bl	be08 <FsCache::sync()>
    518e:	9901      	ldr	r1, [sp, #4]
    5190:	b1b8      	cbz	r0, 51c2 <ExFatFile::read(void*, unsigned int)+0xfa>
    return m_blockDev->readSectors(sector, dst, count);
    5192:	f8da 0214 	ldr.w	r0, [sl, #532]	; 0x214
    5196:	465b      	mov	r3, fp
    5198:	6802      	ldr	r2, [r0, #0]
    519a:	f8d2 a014 	ldr.w	sl, [r2, #20]
    519e:	463a      	mov	r2, r7
    51a0:	47d0      	blx	sl
     if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    51a2:	b170      	cbz	r0, 51c2 <ExFatFile::read(void*, unsigned int)+0xfa>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    51a4:	4623      	mov	r3, r4
    dst += n;
    51a6:	4427      	add	r7, r4
    m_curPosition += n;
    51a8:	e9d5 1200 	ldrd	r1, r2, [r5]
    51ac:	185b      	adds	r3, r3, r1
    51ae:	f142 0200 	adc.w	r2, r2, #0
  while (toRead) {
    51b2:	1b36      	subs	r6, r6, r4
    m_curPosition += n;
    51b4:	e9c5 3200 	strd	r3, r2, [r5]
  while (toRead) {
    51b8:	d1a8      	bne.n	510c <ExFatFile::read(void*, unsigned int)+0x44>
    toRead -= n;
  }
  return count - toRead;
    51ba:	4640      	mov	r0, r8

 fail:
  m_error |= READ_ERROR;
  return -1;
}
    51bc:	b003      	add	sp, #12
    51be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_error |= READ_ERROR;
    51c2:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
  return -1;
    51c6:	f04f 30ff 	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    51ca:	f043 0302 	orr.w	r3, r3, #2
    51ce:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
}
    51d2:	b003      	add	sp, #12
    51d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      n = m_vol->bytesPerSector() - sectorOffset;
    51d8:	f5cb 7400 	rsb	r4, fp, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    51dc:	2200      	movs	r2, #0
    51de:	f50a 7004 	add.w	r0, sl, #528	; 0x210
    51e2:	42b4      	cmp	r4, r6
    51e4:	bf28      	it	cs
    51e6:	4634      	movcs	r4, r6
    51e8:	f006 fe3a 	bl	be60 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    51ec:	2800      	cmp	r0, #0
    51ee:	d0e8      	beq.n	51c2 <ExFatFile::read(void*, unsigned int)+0xfa>
      memcpy(dst, src, n);
    51f0:	eb00 010b 	add.w	r1, r0, fp
    51f4:	4622      	mov	r2, r4
    51f6:	4638      	mov	r0, r7
    51f8:	f008 f9aa 	bl	d550 <memcpy>
    m_curPosition += n;
    51fc:	4623      	mov	r3, r4
    51fe:	e7d2      	b.n	51a6 <ExFatFile::read(void*, unsigned int)+0xde>
        m_curCluster++;
    5200:	69aa      	ldr	r2, [r5, #24]
    5202:	e796      	b.n	5132 <ExFatFile::read(void*, unsigned int)+0x6a>
      } else if (isContiguous()) {
    5204:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    5208:	065b      	lsls	r3, r3, #25
    520a:	d50e      	bpl.n	522a <ExFatFile::read(void*, unsigned int)+0x162>
        m_curCluster++;
    520c:	69aa      	ldr	r2, [r5, #24]
    520e:	3201      	adds	r2, #1
    5210:	e78e      	b.n	5130 <ExFatFile::read(void*, unsigned int)+0x68>
    return m_blockDev->readSector(sector, dst);
    5212:	f8da 0214 	ldr.w	r0, [sl, #532]	; 0x214
    5216:	463a      	mov	r2, r7
    5218:	6803      	ldr	r3, [r0, #0]
    521a:	691b      	ldr	r3, [r3, #16]
    521c:	4798      	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    521e:	2800      	cmp	r0, #0
    5220:	d0cf      	beq.n	51c2 <ExFatFile::read(void*, unsigned int)+0xfa>
    5222:	f44f 7300 	mov.w	r3, #512	; 0x200
      n = m_vol->bytesPerSector();
    5226:	461c      	mov	r4, r3
    5228:	e7bd      	b.n	51a6 <ExFatFile::read(void*, unsigned int)+0xde>
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    522a:	464a      	mov	r2, r9
    522c:	4650      	mov	r0, sl
    522e:	69a9      	ldr	r1, [r5, #24]
    5230:	f001 fdb4 	bl	6d9c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
        if (fg < 0) {
    5234:	2800      	cmp	r0, #0
    5236:	dbc4      	blt.n	51c2 <ExFatFile::read(void*, unsigned int)+0xfa>
        if (fg == 0) {
    5238:	d00c      	beq.n	5254 <ExFatFile::read(void*, unsigned int)+0x18c>
    sector = m_vol->clusterStartSector(m_curCluster) +
    523a:	f8d5 a020 	ldr.w	sl, [r5, #32]
    523e:	69aa      	ldr	r2, [r5, #24]
    5240:	e777      	b.n	5132 <ExFatFile::read(void*, unsigned int)+0x6a>
  if (isContiguous() || isFile()) {
    5242:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    5246:	0719      	lsls	r1, r3, #28
    5248:	f57f af58 	bpl.w	50fc <ExFatFile::read(void*, unsigned int)+0x34>
    524c:	e749      	b.n	50e2 <ExFatFile::read(void*, unsigned int)+0x1a>
      count = toRead = m_validLength - m_curPosition;
    524e:	eba1 0802 	sub.w	r8, r1, r2
    5252:	e753      	b.n	50fc <ExFatFile::read(void*, unsigned int)+0x34>
          if (isDir()) {
    5254:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    5258:	f013 0f50 	tst.w	r3, #80	; 0x50
    525c:	d0b1      	beq.n	51c2 <ExFatFile::read(void*, unsigned int)+0xfa>
  return count - toRead;
    525e:	eba8 0806 	sub.w	r8, r8, r6
    5262:	4640      	mov	r0, r8
    5264:	e7aa      	b.n	51bc <ExFatFile::read(void*, unsigned int)+0xf4>
    5266:	bf00      	nop

00005268 <ExFatFile::peek()>:
int ExFatFile::peek() {
    5268:	b5f0      	push	{r4, r5, r6, r7, lr}
    526a:	b083      	sub	sp, #12
    return read(&b, 1) == 1 ? b : -1;
    526c:	2201      	movs	r2, #1
    526e:	4604      	mov	r4, r0
  uint32_t curCluster = m_curCluster;
    5270:	6985      	ldr	r5, [r0, #24]
    5272:	f10d 0107 	add.w	r1, sp, #7
  uint64_t curPosition = m_curPosition;
    5276:	e9d0 6700 	ldrd	r6, r7, [r0]
    527a:	f7ff ff25 	bl	50c8 <ExFatFile::read(void*, unsigned int)>
    527e:	2801      	cmp	r0, #1
  m_curCluster = curCluster;
    5280:	61a5      	str	r5, [r4, #24]
    5282:	bf0c      	ite	eq
    5284:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    5288:	f04f 30ff 	movne.w	r0, #4294967295
  m_curPosition = curPosition;
    528c:	e9c4 6700 	strd	r6, r7, [r4]
}
    5290:	b003      	add	sp, #12
    5292:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005294 <ExFatFile::seekSet(unsigned long long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    5294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5298:	461f      	mov	r7, r3
  bool isOpen() const {return m_attributes;}
    529a:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    529e:	b083      	sub	sp, #12
    52a0:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    52a2:	f8d0 8018 	ldr.w	r8, [r0, #24]
  // error if file not open
  if (!isOpen()) {
    52a6:	2b00      	cmp	r3, #0
    52a8:	d051      	beq.n	534e <ExFatFile::seekSet(unsigned long long)+0xba>
    52aa:	4616      	mov	r6, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    52ac:	e9d0 1c00 	ldrd	r1, ip, [r0]
    52b0:	45bc      	cmp	ip, r7
    52b2:	bf08      	it	eq
    52b4:	4291      	cmpeq	r1, r2
    52b6:	d05c      	beq.n	5372 <ExFatFile::seekSet(unsigned long long)+0xde>
    return true;
  }
  if (pos == 0) {
    52b8:	ea56 0207 	orrs.w	r2, r6, r7
    52bc:	d04d      	beq.n	535a <ExFatFile::seekSet(unsigned long long)+0xc6>
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    52be:	071d      	lsls	r5, r3, #28
    52c0:	d504      	bpl.n	52cc <ExFatFile::seekSet(unsigned long long)+0x38>
    if (pos > m_validLength) {
    52c2:	e9d0 0204 	ldrd	r0, r2, [r0, #16]
    52c6:	42b0      	cmp	r0, r6
    52c8:	41ba      	sbcs	r2, r7
    52ca:	d340      	bcc.n	534e <ExFatFile::seekSet(unsigned long long)+0xba>
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
  if (isContiguous()) {
    52cc:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    52d0:	1e75      	subs	r5, r6, #1
    52d2:	f8d4 a020 	ldr.w	sl, [r4, #32]
  if (isContiguous()) {
    52d6:	9201      	str	r2, [sp, #4]
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    52d8:	f147 30ff 	adc.w	r0, r7, #4294967295
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    52dc:	f89a 2445 	ldrb.w	r2, [sl, #1093]	; 0x445
    52e0:	3209      	adds	r2, #9
    52e2:	b2d2      	uxtb	r2, r2
    52e4:	f1c2 0e20 	rsb	lr, r2, #32
    52e8:	40d5      	lsrs	r5, r2
    52ea:	f1a2 0920 	sub.w	r9, r2, #32
    52ee:	fa00 fb0e 	lsl.w	fp, r0, lr
    52f2:	fa20 f009 	lsr.w	r0, r0, r9
    52f6:	ea45 050b 	orr.w	r5, r5, fp
    52fa:	4305      	orrs	r5, r0
  if (isContiguous()) {
    52fc:	9801      	ldr	r0, [sp, #4]
    52fe:	0640      	lsls	r0, r0, #25
    5300:	d433      	bmi.n	536a <ExFatFile::seekSet(unsigned long long)+0xd6>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    5302:	1e48      	subs	r0, r1, #1
    5304:	fa20 f202 	lsr.w	r2, r0, r2
    5308:	f14c 30ff 	adc.w	r0, ip, #4294967295
  if (nNew < nCur || m_curPosition == 0) {
    530c:	ea51 0c0c 	orrs.w	ip, r1, ip
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    5310:	fa00 fe0e 	lsl.w	lr, r0, lr
    5314:	fa20 f009 	lsr.w	r0, r0, r9
    5318:	ea42 020e 	orr.w	r2, r2, lr
    531c:	ea42 0200 	orr.w	r2, r2, r0
  if (nNew < nCur || m_curPosition == 0) {
    5320:	d001      	beq.n	5326 <ExFatFile::seekSet(unsigned long long)+0x92>
    5322:	4295      	cmp	r5, r2
    5324:	d229      	bcs.n	537a <ExFatFile::seekSet(unsigned long long)+0xe6>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    5326:	065b      	lsls	r3, r3, #25
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    5328:	bf4c      	ite	mi
    532a:	f8da 3434 	ldrmi.w	r3, [sl, #1076]	; 0x434
    532e:	69e3      	ldrpl	r3, [r4, #28]
    5330:	61a3      	str	r3, [r4, #24]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    5332:	f104 0918 	add.w	r9, r4, #24
    5336:	e006      	b.n	5346 <ExFatFile::seekSet(unsigned long long)+0xb2>
    5338:	69a1      	ldr	r1, [r4, #24]
    533a:	3d01      	subs	r5, #1
    533c:	6a20      	ldr	r0, [r4, #32]
    533e:	f001 fd2d 	bl	6d9c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    5342:	2800      	cmp	r0, #0
    5344:	dd03      	ble.n	534e <ExFatFile::seekSet(unsigned long long)+0xba>
    5346:	464a      	mov	r2, r9
  while (nNew--) {
    5348:	2d00      	cmp	r5, #0
    534a:	d1f5      	bne.n	5338 <ExFatFile::seekSet(unsigned long long)+0xa4>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

 done:
    534c:	e007      	b.n	535e <ExFatFile::seekSet(unsigned long long)+0xca>
  m_curPosition = pos;
  return true;

 fail:
  m_curCluster = tmp;
  return false;
    534e:	2000      	movs	r0, #0
  m_curCluster = tmp;
    5350:	f8c4 8018 	str.w	r8, [r4, #24]
}
    5354:	b003      	add	sp, #12
    5356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = 0;
    535a:	2300      	movs	r3, #0
    535c:	6183      	str	r3, [r0, #24]
  return true;
    535e:	2001      	movs	r0, #1
  m_curPosition = pos;
    5360:	e9c4 6700 	strd	r6, r7, [r4]
}
    5364:	b003      	add	sp, #12
    5366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = m_firstCluster + nNew;
    536a:	69e3      	ldr	r3, [r4, #28]
    536c:	442b      	add	r3, r5
    536e:	61a3      	str	r3, [r4, #24]
    goto done;
    5370:	e7f5      	b.n	535e <ExFatFile::seekSet(unsigned long long)+0xca>
    return true;
    5372:	2001      	movs	r0, #1
}
    5374:	b003      	add	sp, #12
    5376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nNew -= nCur;
    537a:	1aad      	subs	r5, r5, r2
    537c:	e7d9      	b.n	5332 <ExFatFile::seekSet(unsigned long long)+0x9e>
    537e:	bf00      	nop

00005380 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>:
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
    5380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5384:	4617      	mov	r7, r2
    5386:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
    538a:	b08f      	sub	sp, #60	; 0x3c
    538c:	4605      	mov	r5, r0
  if (isOpen() || !dir->isDir()) {
    538e:	2a00      	cmp	r2, #0
    5390:	f040 80d7 	bne.w	5542 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  bool isDir() const  {return m_attributes & FILE_ATTR_DIR;}
    5394:	468b      	mov	fp, r1
    5396:	f891 1031 	ldrb.w	r1, [r1, #49]	; 0x31
    539a:	f011 0f50 	tst.w	r1, #80	; 0x50
    539e:	f000 80d0 	beq.w	5542 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  switch (oflag & O_ACCMODE) {
    53a2:	f003 0103 	and.w	r1, r3, #3
    53a6:	469a      	mov	sl, r3
    53a8:	2903      	cmp	r1, #3
    53aa:	f000 80ca 	beq.w	5542 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    53ae:	3101      	adds	r1, #1
    53b0:	f003 0008 	and.w	r0, r3, #8
    53b4:	ea41 0300 	orr.w	r3, r1, r0
    53b8:	9302      	str	r3, [sp, #8]
  if (fname) {
    53ba:	2f00      	cmp	r7, #0
    53bc:	f000 80cb 	beq.w	5556 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1d6>
    freeNeed = 2 + (fname->nameLength + 14)/15;
    53c0:	6939      	ldr	r1, [r7, #16]
    53c2:	f101 080e 	add.w	r8, r1, #14
    53c6:	49b6      	ldr	r1, [pc, #728]	; (56a0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x320>)
    53c8:	fba1 1808 	umull	r1, r8, r1, r8
  if (pos == m_curPosition) {
    53cc:	e9db 1000 	ldrd	r1, r0, [fp]
    freeNeed = 2 + (fname->nameLength + 14)/15;
    53d0:	ea4f 08d8 	mov.w	r8, r8, lsr #3
  if (pos == m_curPosition) {
    53d4:	4301      	orrs	r1, r0
    freeNeed = 2 + (fname->nameLength + 14)/15;
    53d6:	f108 0802 	add.w	r8, r8, #2
    53da:	fa5f f888 	uxtb.w	r8, r8
  if (pos == m_curPosition) {
    53de:	d005      	beq.n	53ec <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x6c>
  m_curPosition = pos;
    53e0:	2000      	movs	r0, #0
    53e2:	2100      	movs	r1, #0
    m_curCluster = 0;
    53e4:	f8cb 2018 	str.w	r2, [fp, #24]
  m_curPosition = pos;
    53e8:	e9cb 0100 	strd	r0, r1, [fp]
        inSet = false;
    53ec:	2400      	movs	r4, #0
        m_flags |= FILE_FLAG_CONTIGUOUS;
    53ee:	9b02      	ldr	r3, [sp, #8]
        inSet = false;
    53f0:	4626      	mov	r6, r4
        m_flags |= FILE_FLAG_CONTIGUOUS;
    53f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    53f6:	9303      	str	r3, [sp, #12]
    n = dir->read(buf, FS_DIR_SIZE);
    53f8:	2220      	movs	r2, #32
    53fa:	a906      	add	r1, sp, #24
    53fc:	4658      	mov	r0, fp
    53fe:	f7ff fe63 	bl	50c8 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    5402:	b300      	cbz	r0, 5446 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
    if (n != FS_DIR_SIZE) {
    5404:	2820      	cmp	r0, #32
    5406:	f040 809c 	bne.w	5542 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    if (!(buf[0] & 0x80)) {
    540a:	f99d 2018 	ldrsb.w	r2, [sp, #24]
    540e:	f89d 3018 	ldrb.w	r3, [sp, #24]
    5412:	2a00      	cmp	r2, #0
    5414:	f2c0 80a2 	blt.w	555c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1dc>
      if (freeCount == 0) {
    5418:	b934      	cbnz	r4, 5428 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xa8>
        freePos.position = dir->curPosition() - FS_DIR_SIZE;
    541a:	f8db 2000 	ldr.w	r2, [fp]
    541e:	f1a2 0920 	sub.w	r9, r2, #32
  bool mkdir(ExFatFile* parent, ExName_t* fname);

  bool openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag);
  bool parsePathName(const char* path,
                            ExName_t* fname, const char** ptr);
  uint32_t curCluster() const {return m_curCluster;}
    5422:	f8db 2018 	ldr.w	r2, [fp, #24]
    5426:	9201      	str	r2, [sp, #4]
      if (freeCount < freeNeed) {
    5428:	4544      	cmp	r4, r8
    542a:	d201      	bcs.n	5430 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
        freeCount++;
    542c:	3401      	adds	r4, #1
    542e:	b2e4      	uxtb	r4, r4
      if (!buf[0]) {
    5430:	2b00      	cmp	r3, #0
    5432:	f000 8113 	beq.w	565c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2dc>
    n = dir->read(buf, FS_DIR_SIZE);
    5436:	2220      	movs	r2, #32
    5438:	a906      	add	r1, sp, #24
    543a:	4658      	mov	r0, fp
      inSet = false;
    543c:	2600      	movs	r6, #0
    n = dir->read(buf, FS_DIR_SIZE);
    543e:	f7ff fe43 	bl	50c8 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    5442:	2800      	cmp	r0, #0
    5444:	d1de      	bne.n	5404 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x84>
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
    5446:	f41a 7f00 	tst.w	sl, #512	; 0x200
    544a:	d07a      	beq.n	5542 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    544c:	9b02      	ldr	r3, [sp, #8]
    544e:	079b      	lsls	r3, r3, #30
    5450:	d577      	bpl.n	5542 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    5452:	2f00      	cmp	r7, #0
    5454:	d075      	beq.n	5542 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  while (freeCount < freeNeed) {
    5456:	4544      	cmp	r4, r8
    5458:	d217      	bcs.n	548a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x10a>
    545a:	f8dd a004 	ldr.w	sl, [sp, #4]
    n = dir->read(buf, FS_DIR_SIZE);
    545e:	2220      	movs	r2, #32
    5460:	a906      	add	r1, sp, #24
    5462:	4658      	mov	r0, fp
    5464:	f7ff fe30 	bl	50c8 <ExFatFile::read(void*, unsigned int)>
    freeCount++;
    5468:	1c63      	adds	r3, r4, #1
    if (n == 0) {
    546a:	2800      	cmp	r0, #0
    546c:	d061      	beq.n	5532 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1b2>
    if (n != FS_DIR_SIZE) {
    546e:	2820      	cmp	r0, #32
    5470:	d167      	bne.n	5542 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    if (freeCount == 0) {
    5472:	b92c      	cbnz	r4, 5480 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x100>
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
    5474:	f8db 2000 	ldr.w	r2, [fp]
    5478:	f8db a018 	ldr.w	sl, [fp, #24]
    547c:	f1a2 0920 	sub.w	r9, r2, #32
    freeCount++;
    5480:	b2dc      	uxtb	r4, r3
  while (freeCount < freeNeed) {
    5482:	45a0      	cmp	r8, r4
    5484:	d8eb      	bhi.n	545e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xde>
    5486:	f8cd a004 	str.w	sl, [sp, #4]
  memset(this, 0, sizeof(ExFatFile));
    548a:	2238      	movs	r2, #56	; 0x38
    548c:	2100      	movs	r1, #0
    548e:	4628      	mov	r0, r5
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    5490:	f89b 4033 	ldrb.w	r4, [fp, #51]	; 0x33
    5494:	f00b fd8e 	bl	10fb4 <memset>
  ExFatVolume* volume() const {return m_vol;}
    5498:	f8db 3020 	ldr.w	r3, [fp, #32]
  freePos.isContiguous = dir->isContiguous();
    549c:	f3c4 1480 	ubfx	r4, r4, #6, #1
  m_dirPos = freePos;
    54a0:	9a01      	ldr	r2, [sp, #4]
  m_vol = dir->volume();
    54a2:	622b      	str	r3, [r5, #32]
  m_attributes = FILE_ATTR_FILE;
    54a4:	2308      	movs	r3, #8
  bool atEnd() {
    return !ls && next == end;
  }
  void reset() {
    next = begin;
    ls = 0;  // lowSurrogate
    54a6:	2600      	movs	r6, #0
  m_dirPos = freePos;
    54a8:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
  m_attributes = FILE_ATTR_FILE;
    54ac:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
    next = begin;
    54b0:	683b      	ldr	r3, [r7, #0]
  m_dirPos = freePos;
    54b2:	e9c5 2909 	strd	r2, r9, [r5, #36]	; 0x24
    54b6:	607b      	str	r3, [r7, #4]
    ls = 0;  // lowSurrogate
    54b8:	81be      	strh	r6, [r7, #12]
  for (uint8_t i = 0; i < freeNeed; i++) {
    54ba:	f1b8 0f00 	cmp.w	r8, #0
    54be:	d033      	beq.n	5528 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1a8>
      m_setCount = freeNeed - 1;
    54c0:	f108 39ff 	add.w	r9, r8, #4294967295
    54c4:	46b3      	mov	fp, r6
      if (FsDateTime::callback) {
    54c6:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 56a4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x324>
      m_setCount = freeNeed - 1;
    54ca:	fa5f f989 	uxtb.w	r9, r9
    cache = dirCache(i, FsCache::CACHE_FOR_WRITE);
    54ce:	2201      	movs	r2, #1
    54d0:	4659      	mov	r1, fp
    54d2:	4628      	mov	r0, r5
    54d4:	f7ff fd4a 	bl	4f6c <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    54d8:	4604      	mov	r4, r0
    54da:	b390      	cbz	r0, 5542 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    54dc:	f990 2000 	ldrsb.w	r2, [r0]
    54e0:	2a00      	cmp	r2, #0
    54e2:	db2e      	blt.n	5542 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    memset(cache, 0 , FS_DIR_SIZE);
    54e4:	2220      	movs	r2, #32
    54e6:	2100      	movs	r1, #0
    54e8:	f00b fd64 	bl	10fb4 <memset>
    if (i == 0) {
    54ec:	2e00      	cmp	r6, #0
    54ee:	f000 80bc 	beq.w	566a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2ea>
    } else if (i == 1) {
    54f2:	f1bb 0f01 	cmp.w	fp, #1
    54f6:	f000 80d7 	beq.w	56a8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x328>
      dirName->type = EXFAT_TYPE_NAME;
    54fa:	23c1      	movs	r3, #193	; 0xc1
    54fc:	46a3      	mov	fp, r4
    54fe:	341e      	adds	r4, #30
    5500:	f804 3c1e 	strb.w	r3, [r4, #-30]
    return !ls && next == end;
    5504:	89bb      	ldrh	r3, [r7, #12]
        uint16_t u = fname->get16();
    5506:	4638      	mov	r0, r7
    5508:	b91b      	cbnz	r3, 5512 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x192>
    550a:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
    550e:	429a      	cmp	r2, r3
    5510:	d005      	beq.n	551e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
    5512:	f006 fce3 	bl	bedc <FsName::get16()>
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    5516:	f82b 0f02 	strh.w	r0, [fp, #2]!
      for (size_t k = 0; k < 15; k++) {
    551a:	45a3      	cmp	fp, r4
    551c:	d1f2      	bne.n	5504 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x184>
  for (uint8_t i = 0; i < freeNeed; i++) {
    551e:	3601      	adds	r6, #1
    5520:	fa5f fb86 	uxtb.w	fp, r6
    5524:	45d8      	cmp	r8, fp
    5526:	d8d2      	bhi.n	54ce <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x14e>
  return sync();
    5528:	4628      	mov	r0, r5
    552a:	f000 fafb 	bl	5b24 <ExFatFile::sync()>
    552e:	4606      	mov	r6, r0
    5530:	e00d      	b.n	554e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
      if (!dir->addDirCluster()) {
    5532:	4658      	mov	r0, fp
      curCluster = dir->m_curCluster;
    5534:	f8db 6018 	ldr.w	r6, [fp, #24]
      if (!dir->addDirCluster()) {
    5538:	f000 fb24 	bl	5b84 <ExFatFile::addDirCluster()>
    553c:	2800      	cmp	r0, #0
    553e:	f040 8091 	bne.w	5664 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2e4>
  m_attributes = FILE_ATTR_CLOSED;
    5542:	2300      	movs	r3, #0
  return false;
    5544:	461e      	mov	r6, r3
  m_attributes = FILE_ATTR_CLOSED;
    5546:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
  m_flags = 0;
    554a:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
}
    554e:	4630      	mov	r0, r6
    5550:	b00f      	add	sp, #60	; 0x3c
    5552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t freeNeed = 3;
    5556:	f04f 0803 	mov.w	r8, #3
    555a:	e747      	b.n	53ec <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x6c>
    } else if (!inSet) {
    555c:	bb56      	cbnz	r6, 55b4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x234>
        freeCount = 0;
    555e:	4544      	cmp	r4, r8
    5560:	bf38      	it	cc
    5562:	2400      	movcc	r4, #0
      if (buf[0] != EXFAT_TYPE_FILE) {
    5564:	2b85      	cmp	r3, #133	; 0x85
    5566:	f47f af47 	bne.w	53f8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
      memset(this, 0, sizeof(ExFatFile));
    556a:	4631      	mov	r1, r6
    556c:	2238      	movs	r2, #56	; 0x38
    556e:	4628      	mov	r0, r5
      inSet = true;
    5570:	2601      	movs	r6, #1
      memset(this, 0, sizeof(ExFatFile));
    5572:	f00b fd1f 	bl	10fb4 <memset>
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    5576:	f89d 201c 	ldrb.w	r2, [sp, #28]
      m_setCount = dirFile->setCount;
    557a:	f89d 3019 	ldrb.w	r3, [sp, #25]
    557e:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    5582:	f002 0337 	and.w	r3, r2, #55	; 0x37
      if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    5586:	06d2      	lsls	r2, r2, #27
        m_attributes |= FILE_ATTR_FILE;
    5588:	bf58      	it	pl
    558a:	f043 0308 	orrpl.w	r3, r3, #8
    558e:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
    5592:	f8db 3000 	ldr.w	r3, [fp]
    5596:	f8db 2020 	ldr.w	r2, [fp, #32]
    559a:	3b20      	subs	r3, #32
      m_vol = dir->volume();
    559c:	622a      	str	r2, [r5, #32]
      m_dirPos.cluster = dir->curCluster();
    559e:	f8db 2018 	ldr.w	r2, [fp, #24]
    55a2:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    55a6:	f89b 3033 	ldrb.w	r3, [fp, #51]	; 0x33
    55aa:	f3c3 1380 	ubfx	r3, r3, #6, #1
      m_dirPos.isContiguous = dir->isContiguous();
    55ae:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    55b2:	e721      	b.n	53f8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
    55b4:	2bc0      	cmp	r3, #192	; 0xc0
    55b6:	d028      	beq.n	560a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x28a>
    } else if (buf[0] == EXFAT_TYPE_NAME) {
    55b8:	2bc1      	cmp	r3, #193	; 0xc1
    55ba:	f47f af3c 	bne.w	5436 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
      if (!cmpName(dirName, fname)) {
    55be:	463a      	mov	r2, r7
    55c0:	a906      	add	r1, sp, #24
    55c2:	4628      	mov	r0, r5
    55c4:	f001 f9ee 	bl	69a4 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>
    55c8:	b1e8      	cbz	r0, 5606 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
    55ca:	89bb      	ldrh	r3, [r7, #12]
    55cc:	b9db      	cbnz	r3, 5606 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
    55ce:	e9d7 3201 	ldrd	r3, r2, [r7, #4]
    55d2:	429a      	cmp	r2, r3
    55d4:	d117      	bne.n	5606 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
  if (oflag & O_EXCL) {
    55d6:	f41a 6f00 	tst.w	sl, #2048	; 0x800
    55da:	d1b2      	bne.n	5542 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    55dc:	f41a 4f88 	tst.w	sl, #17408	; 0x4400
    55e0:	d170      	bne.n	56c4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x344>
    55e2:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    55e6:	0798      	lsls	r0, r3, #30
    55e8:	d46c      	bmi.n	56c4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x344>
  if (oflag & O_TRUNC) {
    55ea:	f41a 6f80 	tst.w	sl, #1024	; 0x400
    55ee:	d1a8      	bne.n	5542 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    55f0:	f41a 4f80 	tst.w	sl, #16384	; 0x4000
    55f4:	d0ab      	beq.n	554e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
    55f6:	4628      	mov	r0, r5
    55f8:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
    55fc:	f7ff fe4a 	bl	5294 <ExFatFile::seekSet(unsigned long long)>
    5600:	2800      	cmp	r0, #0
    5602:	d1a4      	bne.n	554e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
    5604:	e79d      	b.n	5542 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    5606:	4606      	mov	r6, r0
    5608:	e6f6      	b.n	53f8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
      m_flags = modeFlags;
    560a:	9b02      	ldr	r3, [sp, #8]
    560c:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    5610:	f89d 3019 	ldrb.w	r3, [sp, #25]
    5614:	079b      	lsls	r3, r3, #30
    5616:	d502      	bpl.n	561e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x29e>
        m_flags |= FILE_FLAG_CONTIGUOUS;
    5618:	9b03      	ldr	r3, [sp, #12]
    561a:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      m_firstCluster = getLe32(dirStream->firstCluster);
    561e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5620:	61eb      	str	r3, [r5, #28]
      m_validLength = getLe64(dirStream->validLength);
    5622:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    5626:	e9c5 2304 	strd	r2, r3, [r5, #16]
      m_dataLength = getLe64(dirStream->dataLength);
    562a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    562e:	e9c5 2302 	strd	r2, r3, [r5, #8]
      if (!fname) {
    5632:	2f00      	cmp	r7, #0
    5634:	d0cf      	beq.n	55d6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x256>
    ls = 0;  // lowSurrogate
    5636:	f04f 0300 	mov.w	r3, #0
      if (fname->nameLength != dirStream->nameLength ||
    563a:	693a      	ldr	r2, [r7, #16]
    563c:	81bb      	strh	r3, [r7, #12]
    next = begin;
    563e:	683b      	ldr	r3, [r7, #0]
    5640:	607b      	str	r3, [r7, #4]
    5642:	f89d 301b 	ldrb.w	r3, [sp, #27]
    5646:	429a      	cmp	r2, r3
    5648:	f47f aef5 	bne.w	5436 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
    564c:	8abe      	ldrh	r6, [r7, #20]
    564e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    5652:	1af6      	subs	r6, r6, r3
    5654:	fab6 f686 	clz	r6, r6
    5658:	0976      	lsrs	r6, r6, #5
    565a:	e6cd      	b.n	53f8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
        if (fname) {
    565c:	2f00      	cmp	r7, #0
    565e:	f47f aef2 	bne.w	5446 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
    5662:	e76e      	b.n	5542 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
      dir->m_curCluster = curCluster;
    5664:	f8cb 6018 	str.w	r6, [fp, #24]
      continue;
    5668:	e70b      	b.n	5482 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x102>
      dirFile->type = EXFAT_TYPE_FILE;
    566a:	2385      	movs	r3, #133	; 0x85
    566c:	7023      	strb	r3, [r4, #0]
      m_setCount = freeNeed - 1;
    566e:	f885 9030 	strb.w	r9, [r5, #48]	; 0x30
      dirFile->setCount = m_setCount;
    5672:	f884 9001 	strb.w	r9, [r4, #1]
      if (FsDateTime::callback) {
    5676:	f8da 3000 	ldr.w	r3, [sl]
    567a:	2b00      	cmp	r3, #0
    567c:	d046      	beq.n	570c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x38c>
        FsDateTime::callback(&date, &time, &ms10);
    567e:	f10d 0213 	add.w	r2, sp, #19
    5682:	f10d 0116 	add.w	r1, sp, #22
    5686:	a805      	add	r0, sp, #20
    5688:	4798      	blx	r3
    568a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    568e:	8163      	strh	r3, [r4, #10]
    5690:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5694:	8123      	strh	r3, [r4, #8]
        dirFile->createTimeMs = ms10;
    5696:	f89d 3013 	ldrb.w	r3, [sp, #19]
    569a:	7523      	strb	r3, [r4, #20]
    569c:	e73f      	b.n	551e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
    569e:	bf00      	nop
    56a0:	88888889 	.word	0x88888889
    56a4:	2005e024 	.word	0x2005e024
      dirStream->type = EXFAT_TYPE_STREAM;
    56a8:	23c0      	movs	r3, #192	; 0xc0
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
    56aa:	f884 b001 	strb.w	fp, [r4, #1]
      dirStream->type = EXFAT_TYPE_STREAM;
    56ae:	7023      	strb	r3, [r4, #0]
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    56b0:	9b02      	ldr	r3, [sp, #8]
    56b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
    56b6:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      dirStream->nameLength = fname->nameLength;
    56ba:	693b      	ldr	r3, [r7, #16]
    56bc:	70e3      	strb	r3, [r4, #3]
      setLe16(dirStream->nameHash, fname->nameHash);
    56be:	8abb      	ldrh	r3, [r7, #20]
    56c0:	80a3      	strh	r3, [r4, #4]
}
    56c2:	e72c      	b.n	551e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
  bool isSubDir() const {return m_attributes & FILE_ATTR_SUBDIR;}
    56c4:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    if (isSubDir() || isReadOnly() || EXFAT_READ_ONLY) {
    56c8:	06d9      	lsls	r1, r3, #27
    56ca:	f53f af3a 	bmi.w	5542 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    56ce:	f013 0101 	ands.w	r1, r3, #1
    56d2:	f47f af36 	bne.w	5542 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if (oflag & O_TRUNC) {
    56d6:	f41a 6f80 	tst.w	sl, #1024	; 0x400
    56da:	d089      	beq.n	55f0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x270>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    56dc:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
    56e0:	0792      	lsls	r2, r2, #30
    56e2:	f57f af2e 	bpl.w	5542 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if (!isOpen()) {
    56e6:	2b00      	cmp	r3, #0
    56e8:	f43f af2b 	beq.w	5542 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if (pos == m_curPosition) {
    56ec:	e9d5 3200 	ldrd	r3, r2, [r5]
    56f0:	4313      	orrs	r3, r2
    56f2:	d004      	beq.n	56fe <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x37e>
  m_curPosition = pos;
    56f4:	2200      	movs	r2, #0
    56f6:	2300      	movs	r3, #0
    m_curCluster = 0;
    56f8:	61a9      	str	r1, [r5, #24]
  m_curPosition = pos;
    56fa:	e9c5 2300 	strd	r2, r3, [r5]
    return seekSet(length) && truncate();
    56fe:	4628      	mov	r0, r5
    5700:	f000 fc42 	bl	5f88 <ExFatFile::truncate()>
    5704:	2800      	cmp	r0, #0
    5706:	f43f af1c 	beq.w	5542 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    570a:	e720      	b.n	554e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
  *reinterpret_cast<uint16_t*>(dst) = src;
    570c:	f645 0321 	movw	r3, #22561	; 0x5821
    5710:	8163      	strh	r3, [r4, #10]
    5712:	81e3      	strh	r3, [r4, #14]
    5714:	8263      	strh	r3, [r4, #18]
       if (FS_DEFAULT_TIME) {
    5716:	e702      	b.n	551e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>

00005718 <ExFatFile::open(ExFatFile*, char const*, int)>:
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    5718:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  ExFatFile() {}
    571c:	2500      	movs	r5, #0
    571e:	b097      	sub	sp, #92	; 0x5c
    5720:	4699      	mov	r9, r3
  if (isOpen() || !dirFile->isDir()) {
    5722:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    5726:	9201      	str	r2, [sp, #4]
    5728:	9514      	str	r5, [sp, #80]	; 0x50
class FsName {
    572a:	f8ad 5014 	strh.w	r5, [sp, #20]
  if (isOpen() || !dirFile->isDir()) {
    572e:	2b00      	cmp	r3, #0
    5730:	d13e      	bne.n	57b0 <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    5732:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    5736:	460f      	mov	r7, r1
    5738:	f013 0f50 	tst.w	r3, #80	; 0x50
    573c:	d038      	beq.n	57b0 <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
  if (isDirSeparator(*path)) {
    573e:	7813      	ldrb	r3, [r2, #0]
    5740:	4604      	mov	r4, r0
    5742:	4616      	mov	r6, r2
    5744:	2b2f      	cmp	r3, #47	; 0x2f
    5746:	d037      	beq.n	57b8 <ExFatFile::open(ExFatFile*, char const*, int)+0xa0>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    5748:	f04f 0800 	mov.w	r8, #0
    if (!parsePathName(path, &fname, &path)) {
    574c:	ab01      	add	r3, sp, #4
    574e:	aa02      	add	r2, sp, #8
    5750:	4631      	mov	r1, r6
    5752:	4620      	mov	r0, r4
    5754:	f7ff fc6a 	bl	502c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    5758:	b350      	cbz	r0, 57b0 <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    if (*path == 0) {
    575a:	9e01      	ldr	r6, [sp, #4]
    575c:	7833      	ldrb	r3, [r6, #0]
    575e:	2b00      	cmp	r3, #0
    5760:	d03e      	beq.n	57e0 <ExFatFile::open(ExFatFile*, char const*, int)+0xc8>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    5762:	2300      	movs	r3, #0
    5764:	aa02      	add	r2, sp, #8
    5766:	4639      	mov	r1, r7
    5768:	4620      	mov	r0, r4
    576a:	f7ff fe09 	bl	5380 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    576e:	b1f8      	cbz	r0, 57b0 <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    tmpDir = *this;
    5770:	46a4      	mov	ip, r4
    5772:	ad08      	add	r5, sp, #32
    5774:	f104 0730 	add.w	r7, r4, #48	; 0x30
    5778:	f8dc 0000 	ldr.w	r0, [ip]
    577c:	f10c 0c10 	add.w	ip, ip, #16
    5780:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    5784:	46ae      	mov	lr, r5
    5786:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    578a:	3510      	adds	r5, #16
    578c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    5790:	45bc      	cmp	ip, r7
    5792:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    5796:	d1ef      	bne.n	5778 <ExFatFile::open(ExFatFile*, char const*, int)+0x60>
    5798:	f8dc 0000 	ldr.w	r0, [ip]
    dirFile = &tmpDir;
    579c:	af08      	add	r7, sp, #32
    tmpDir = *this;
    579e:	6028      	str	r0, [r5, #0]
  bool rtn = sync();
    57a0:	4620      	mov	r0, r4
    57a2:	f000 f9bf 	bl	5b24 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    57a6:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
  m_flags = 0;
    57aa:	f884 8033 	strb.w	r8, [r4, #51]	; 0x33
  return rtn;
    57ae:	e7cd      	b.n	574c <ExFatFile::open(ExFatFile*, char const*, int)+0x34>
  return false;
    57b0:	2000      	movs	r0, #0
}
    57b2:	b017      	add	sp, #92	; 0x5c
    57b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    while (isDirSeparator(*path)) {
    57b8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    57bc:	292f      	cmp	r1, #47	; 0x2f
    57be:	d0fb      	beq.n	57b8 <ExFatFile::open(ExFatFile*, char const*, int)+0xa0>
    57c0:	9601      	str	r6, [sp, #4]
    if (*path == 0) {
    57c2:	b9b1      	cbnz	r1, 57f2 <ExFatFile::open(ExFatFile*, char const*, int)+0xda>
  memset(this, 0, sizeof(ExFatFile));
    57c4:	2238      	movs	r2, #56	; 0x38
    57c6:	4620      	mov	r0, r4
      return openRoot(dirFile->m_vol);
    57c8:	6a3d      	ldr	r5, [r7, #32]
  memset(this, 0, sizeof(ExFatFile));
    57ca:	f00b fbf3 	bl	10fb4 <memset>
  m_flags = FILE_FLAG_READ;
    57ce:	2301      	movs	r3, #1
  m_attributes = FILE_ATTR_ROOT;
    57d0:	2240      	movs	r2, #64	; 0x40
  m_vol = vol;
    57d2:	6225      	str	r5, [r4, #32]
      return openRoot(dirFile->m_vol);
    57d4:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    57d6:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_ROOT;
    57da:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
      return openRoot(dirFile->m_vol);
    57de:	e7e8      	b.n	57b2 <ExFatFile::open(ExFatFile*, char const*, int)+0x9a>
  return openPrivate(dirFile, &fname, oflag);
    57e0:	464b      	mov	r3, r9
    57e2:	aa02      	add	r2, sp, #8
    57e4:	4639      	mov	r1, r7
    57e6:	4620      	mov	r0, r4
    57e8:	f7ff fdca 	bl	5380 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    57ec:	b017      	add	sp, #92	; 0x5c
    57ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  memset(this, 0, sizeof(ExFatFile));
    57f2:	2238      	movs	r2, #56	; 0x38
    57f4:	2100      	movs	r1, #0
    57f6:	a808      	add	r0, sp, #32
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    57f8:	6a3d      	ldr	r5, [r7, #32]
  memset(this, 0, sizeof(ExFatFile));
    57fa:	f00b fbdb 	bl	10fb4 <memset>
  m_flags = FILE_FLAG_READ;
    57fe:	2301      	movs	r3, #1
    dirFile = &tmpDir;
    5800:	af08      	add	r7, sp, #32
  m_vol = vol;
    5802:	9510      	str	r5, [sp, #64]	; 0x40
  m_flags = FILE_FLAG_READ;
    5804:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  m_attributes = FILE_ATTR_ROOT;
    5808:	2340      	movs	r3, #64	; 0x40
    580a:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
  return true;
    580e:	e79b      	b.n	5748 <ExFatFile::open(ExFatFile*, char const*, int)+0x30>

00005810 <ExFatFile::open(ExFatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    5810:	b119      	cbz	r1, 581a <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    5812:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    5816:	f7ff bf7f 	b.w	5718 <ExFatFile::open(ExFatFile*, char const*, int)>
}
    581a:	4608      	mov	r0, r1
    581c:	4770      	bx	lr
    581e:	bf00      	nop

00005820 <ExFatFile::openNext(ExFatFile*, int)>:
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    5820:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    5824:	b963      	cbnz	r3, 5840 <ExFatFile::openNext(ExFatFile*, int)+0x20>
    5826:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    582a:	f013 0f50 	tst.w	r3, #80	; 0x50
    582e:	d007      	beq.n	5840 <ExFatFile::openNext(ExFatFile*, int)+0x20>
    5830:	680b      	ldr	r3, [r1, #0]
    5832:	f013 0c1f 	ands.w	ip, r3, #31
    5836:	d103      	bne.n	5840 <ExFatFile::openNext(ExFatFile*, int)+0x20>
  return openPrivate(dir, nullptr, oflag);
    5838:	4613      	mov	r3, r2
    583a:	4662      	mov	r2, ip
    583c:	f7ff bda0 	b.w	5380 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    5840:	2000      	movs	r0, #0
    5842:	4770      	bx	lr

00005844 <ExFatFile::addCluster()>:
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    5844:	6981      	ldr	r1, [r0, #24]
bool ExFatFile::addCluster() {
    5846:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5848:	4604      	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    584a:	6a00      	ldr	r0, [r0, #32]
    584c:	b101      	cbz	r1, 5850 <ExFatFile::addCluster()+0xc>
    584e:	3101      	adds	r1, #1
    5850:	2201      	movs	r2, #1
    5852:	f001 f969 	bl	6b28 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    5856:	2801      	cmp	r0, #1
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    5858:	4605      	mov	r5, r0
  if (find < 2) {
    585a:	d932      	bls.n	58c2 <ExFatFile::addCluster()+0x7e>
  if (!m_vol->bitmapModify(find, 1, 1)) {
    585c:	2301      	movs	r3, #1
    585e:	4601      	mov	r1, r0
    5860:	6a20      	ldr	r0, [r4, #32]
    5862:	461a      	mov	r2, r3
    5864:	f001 f9c0 	bl	6be8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    5868:	4606      	mov	r6, r0
    586a:	b350      	cbz	r0, 58c2 <ExFatFile::addCluster()+0x7e>
  if (m_curCluster == 0) {
    586c:	69a3      	ldr	r3, [r4, #24]
    586e:	b35b      	cbz	r3, 58c8 <ExFatFile::addCluster()+0x84>
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    5870:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
  if (isContiguous()) {
    5874:	0651      	lsls	r1, r2, #25
    5876:	d512      	bpl.n	589e <ExFatFile::addCluster()+0x5a>
    if (find == (m_curCluster + 1)) {
    5878:	1c59      	adds	r1, r3, #1
    587a:	42a9      	cmp	r1, r5
    587c:	d018      	beq.n	58b0 <ExFatFile::addCluster()+0x6c>
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    587e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    5882:	69e1      	ldr	r1, [r4, #28]
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    5884:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    5888:	e005      	b.n	5896 <ExFatFile::addCluster()+0x52>
      if (!m_vol->fatPut(c, c + 1)) {
    588a:	6a20      	ldr	r0, [r4, #32]
    588c:	f001 faa8 	bl	6de0 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    5890:	4639      	mov	r1, r7
      if (!m_vol->fatPut(c, c + 1)) {
    5892:	b1b0      	cbz	r0, 58c2 <ExFatFile::addCluster()+0x7e>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    5894:	69a3      	ldr	r3, [r4, #24]
      if (!m_vol->fatPut(c, c + 1)) {
    5896:	1c4f      	adds	r7, r1, #1
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    5898:	4299      	cmp	r1, r3
      if (!m_vol->fatPut(c, c + 1)) {
    589a:	463a      	mov	r2, r7
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    589c:	d3f5      	bcc.n	588a <ExFatFile::addCluster()+0x46>
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    589e:	f04f 32ff 	mov.w	r2, #4294967295
    58a2:	4629      	mov	r1, r5
    58a4:	6a20      	ldr	r0, [r4, #32]
    58a6:	f001 fa9b 	bl	6de0 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    58aa:	b150      	cbz	r0, 58c2 <ExFatFile::addCluster()+0x7e>
  if (m_curCluster) {
    58ac:	69a1      	ldr	r1, [r4, #24]
    58ae:	b911      	cbnz	r1, 58b6 <ExFatFile::addCluster()+0x72>
}
    58b0:	4630      	mov	r0, r6
  m_curCluster = find;
    58b2:	61a5      	str	r5, [r4, #24]
}
    58b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!m_vol->fatPut(m_curCluster, find)) {
    58b6:	462a      	mov	r2, r5
    58b8:	6a20      	ldr	r0, [r4, #32]
    58ba:	f001 fa91 	bl	6de0 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    58be:	2800      	cmp	r0, #0
    58c0:	d1f6      	bne.n	58b0 <ExFatFile::addCluster()+0x6c>
  return false;
    58c2:	2600      	movs	r6, #0
}
    58c4:	4630      	mov	r0, r6
    58c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_flags |= FILE_FLAG_CONTIGUOUS;
    58c8:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    58cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    58d0:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    goto done;
    58d4:	e7ec      	b.n	58b0 <ExFatFile::addCluster()+0x6c>
    58d6:	bf00      	nop

000058d8 <ExFatFile::remove()>:
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    58d8:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
  uint8_t* cache;
  if (!isWritable()) {
    58dc:	079a      	lsls	r2, r3, #30
    58de:	d536      	bpl.n	594e <ExFatFile::remove()+0x76>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    58e0:	69c1      	ldr	r1, [r0, #28]
bool ExFatFile::remove() {
    58e2:	b570      	push	{r4, r5, r6, lr}
    58e4:	4605      	mov	r5, r0
  if (m_firstCluster) {
    58e6:	b9a1      	cbnz	r1, 5912 <ExFatFile::remove()+0x3a>
bool ExFatFile::remove() {
    58e8:	2400      	movs	r4, #0
    58ea:	4621      	mov	r1, r4
    58ec:	e007      	b.n	58fe <ExFatFile::remove()+0x26>
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
    58ee:	7803      	ldrb	r3, [r0, #0]
    58f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    58f4:	7003      	strb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
    58f6:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    58fa:	428b      	cmp	r3, r1
    58fc:	d329      	bcc.n	5952 <ExFatFile::remove()+0x7a>
    58fe:	3401      	adds	r4, #1
    cache = dirCache(is, FsCache::CACHE_FOR_WRITE);
    5900:	2201      	movs	r2, #1
    5902:	4628      	mov	r0, r5
    5904:	f7ff fb32 	bl	4f6c <ExFatFile::dirCache(unsigned char, unsigned char)>
  for (uint8_t is = 0; is <= m_setCount; is++) {
    5908:	b2e1      	uxtb	r1, r4
    if (!cache) {
    590a:	2800      	cmp	r0, #0
    590c:	d1ef      	bne.n	58ee <ExFatFile::remove()+0x16>
  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
}
    590e:	2000      	movs	r0, #0
    5910:	bd70      	pop	{r4, r5, r6, pc}
    if (isContiguous()) {
    5912:	065b      	lsls	r3, r3, #25
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    5914:	6a00      	ldr	r0, [r0, #32]
    if (isContiguous()) {
    5916:	d534      	bpl.n	5982 <ExFatFile::remove()+0xaa>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    5918:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    591c:	e9d5 2402 	ldrd	r2, r4, [r5, #8]
    5920:	3309      	adds	r3, #9
    5922:	3a01      	subs	r2, #1
    5924:	b2db      	uxtb	r3, r3
    5926:	f144 34ff 	adc.w	r4, r4, #4294967295
    592a:	f1c3 0c20 	rsb	ip, r3, #32
    592e:	40da      	lsrs	r2, r3
    5930:	3b20      	subs	r3, #32
    5932:	fa04 fc0c 	lsl.w	ip, r4, ip
    5936:	fa24 f303 	lsr.w	r3, r4, r3
    593a:	ea42 020c 	orr.w	r2, r2, ip
    593e:	431a      	orrs	r2, r3
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    5940:	2300      	movs	r3, #0
    5942:	3201      	adds	r2, #1
    5944:	f001 f950 	bl	6be8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    5948:	2800      	cmp	r0, #0
    594a:	d1cd      	bne.n	58e8 <ExFatFile::remove()+0x10>
    594c:	e7df      	b.n	590e <ExFatFile::remove()+0x36>
}
    594e:	2000      	movs	r0, #0
    5950:	4770      	bx	lr
  m_attributes = FILE_ATTR_CLOSED;
    5952:	2300      	movs	r3, #0
  return m_vol->cacheSync();
    5954:	6a2c      	ldr	r4, [r5, #32]
  m_attributes = FILE_ATTR_CLOSED;
    5956:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    595a:	4620      	mov	r0, r4
  m_flags = 0;
    595c:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
    5960:	f006 fa52 	bl	be08 <FsCache::sync()>
    5964:	2800      	cmp	r0, #0
    5966:	d0d2      	beq.n	590e <ExFatFile::remove()+0x36>
    5968:	f504 7004 	add.w	r0, r4, #528	; 0x210
    596c:	f006 fa4c 	bl	be08 <FsCache::sync()>
    5970:	2800      	cmp	r0, #0
    5972:	d0cc      	beq.n	590e <ExFatFile::remove()+0x36>
    5974:	f8d4 0440 	ldr.w	r0, [r4, #1088]	; 0x440
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    5978:	6803      	ldr	r3, [r0, #0]
}
    597a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    597e:	6a1b      	ldr	r3, [r3, #32]
    5980:	4718      	bx	r3
      if (!m_vol->freeChain(m_firstCluster)) {
    5982:	f001 fa4d 	bl	6e20 <ExFatPartition::freeChain(unsigned long)>
    5986:	2800      	cmp	r0, #0
    5988:	d1ae      	bne.n	58e8 <ExFatFile::remove()+0x10>
    598a:	e7c0      	b.n	590e <ExFatFile::remove()+0x36>

0000598c <ExFatFile::rmdir()>:
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
  int n;
  uint8_t dir[FS_DIR_SIZE];
  // must be open subdirectory
  if (!isSubDir()) {
    598c:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    5990:	06db      	lsls	r3, r3, #27
    5992:	d401      	bmi.n	5998 <ExFatFile::rmdir()+0xc>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

 fail:
  return false;
    5994:	2000      	movs	r0, #0
}
    5996:	4770      	bx	lr
bool ExFatFile::rmdir() {
    5998:	b510      	push	{r4, lr}
    seekSet(0);
    599a:	2200      	movs	r2, #0
    599c:	b088      	sub	sp, #32
    599e:	2300      	movs	r3, #0
    59a0:	4604      	mov	r4, r0
    59a2:	f7ff fc77 	bl	5294 <ExFatFile::seekSet(unsigned long long)>
  }
    59a6:	e008      	b.n	59ba <ExFatFile::rmdir()+0x2e>
    if (n != FS_DIR_SIZE || dir[0] & 0X80) {
    59a8:	2820      	cmp	r0, #32
    59aa:	d11b      	bne.n	59e4 <ExFatFile::rmdir()+0x58>
    59ac:	f99d 3000 	ldrsb.w	r3, [sp]
    59b0:	f89d 2000 	ldrb.w	r2, [sp]
    59b4:	2b00      	cmp	r3, #0
    59b6:	db15      	blt.n	59e4 <ExFatFile::rmdir()+0x58>
    if (dir[0] == 0) {
    59b8:	b132      	cbz	r2, 59c8 <ExFatFile::rmdir()+0x3c>
    n = read(dir, FS_DIR_SIZE);
    59ba:	2220      	movs	r2, #32
    59bc:	4669      	mov	r1, sp
    59be:	4620      	mov	r0, r4
    59c0:	f7ff fb82 	bl	50c8 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    59c4:	2800      	cmp	r0, #0
    59c6:	d1ef      	bne.n	59a8 <ExFatFile::rmdir()+0x1c>
  m_flags |= FILE_FLAG_WRITE;
    59c8:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_FILE;
    59cc:	2208      	movs	r2, #8
  return remove();
    59ce:	4620      	mov	r0, r4
  m_flags |= FILE_FLAG_WRITE;
    59d0:	f043 0302 	orr.w	r3, r3, #2
  m_attributes = FILE_ATTR_FILE;
    59d4:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
    59d8:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return remove();
    59dc:	f7ff ff7c 	bl	58d8 <ExFatFile::remove()>
}
    59e0:	b008      	add	sp, #32
    59e2:	bd10      	pop	{r4, pc}
  return false;
    59e4:	2000      	movs	r0, #0
}
    59e6:	b008      	add	sp, #32
    59e8:	bd10      	pop	{r4, pc}
    59ea:	bf00      	nop

000059ec <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    59ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    59f0:	f04f 0800 	mov.w	r8, #0
    59f4:	b082      	sub	sp, #8
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    59f6:	4f4a      	ldr	r7, [pc, #296]	; (5b20 <ExFatFile::syncDir()+0x134>)
bool ExFatFile::syncDir() {
    59f8:	4606      	mov	r6, r0
  uint16_t checksum = 0;
    59fa:	4644      	mov	r4, r8
    59fc:	4641      	mov	r1, r8
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    59fe:	2200      	movs	r2, #0
    5a00:	4630      	mov	r0, r6
    5a02:	f7ff fab3 	bl	4f6c <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    5a06:	4605      	mov	r5, r0
    5a08:	b130      	cbz	r0, 5a18 <ExFatFile::syncDir()+0x2c>
    switch (cache[0]) {
    5a0a:	7801      	ldrb	r1, [r0, #0]
    5a0c:	29c0      	cmp	r1, #192	; 0xc0
    5a0e:	d069      	beq.n	5ae4 <ExFatFile::syncDir()+0xf8>
    5a10:	29c1      	cmp	r1, #193	; 0xc1
    5a12:	d02b      	beq.n	5a6c <ExFatFile::syncDir()+0x80>
    5a14:	2985      	cmp	r1, #133	; 0x85
    5a16:	d009      	beq.n	5a2c <ExFatFile::syncDir()+0x40>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    5a18:	f896 3032 	ldrb.w	r3, [r6, #50]	; 0x32
  return false;
    5a1c:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    5a1e:	f043 0301 	orr.w	r3, r3, #1
    5a22:	f886 3032 	strb.w	r3, [r6, #50]	; 0x32
}
    5a26:	b002      	add	sp, #8
    5a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
    5a2c:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
    5a30:	f003 0337 	and.w	r3, r3, #55	; 0x37
    5a34:	8083      	strh	r3, [r0, #4]
        if (FsDateTime::callback) {
    5a36:	683b      	ldr	r3, [r7, #0]
    5a38:	b183      	cbz	r3, 5a5c <ExFatFile::syncDir()+0x70>
          FsDateTime::callback(&date, &time, &ms10);
    5a3a:	f10d 0203 	add.w	r2, sp, #3
    5a3e:	f10d 0106 	add.w	r1, sp, #6
    5a42:	a801      	add	r0, sp, #4
    5a44:	4798      	blx	r3
          setLe16(df->modifyTime, time);
    5a46:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5a4a:	81ab      	strh	r3, [r5, #12]
    5a4c:	822b      	strh	r3, [r5, #16]
          setLe16(df->modifyDate, date);
    5a4e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    5a52:	81eb      	strh	r3, [r5, #14]
    5a54:	826b      	strh	r3, [r5, #18]
          df->modifyTimeMs = ms10;
    5a56:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5a5a:	756b      	strb	r3, [r5, #21]
        m_vol->dataCacheDirty();
    5a5c:	6a32      	ldr	r2, [r6, #32]
    m_status |= CACHE_STATUS_DIRTY;
    5a5e:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    5a62:	f043 0301 	orr.w	r3, r3, #1
    5a66:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
  bool skip = data[0] == EXFAT_TYPE_FILE;
    5a6a:	7829      	ldrb	r1, [r5, #0]
    5a6c:	f1a1 0085 	sub.w	r0, r1, #133	; 0x85
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    5a70:	2200      	movs	r2, #0
  bool skip = data[0] == EXFAT_TYPE_FILE;
    5a72:	fab0 f080 	clz	r0, r0
    5a76:	0940      	lsrs	r0, r0, #5
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    5a78:	e001      	b.n	5a7e <ExFatFile::syncDir()+0x92>
    5a7a:	2204      	movs	r2, #4
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    5a7c:	5ca9      	ldrb	r1, [r5, r2]
    5a7e:	03e3      	lsls	r3, r4, #15
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    5a80:	2a01      	cmp	r2, #1
    5a82:	f102 0201 	add.w	r2, r2, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    5a86:	ea43 0354 	orr.w	r3, r3, r4, lsr #1
    5a8a:	fa11 f383 	uxtah	r3, r1, r3
    5a8e:	b29c      	uxth	r4, r3
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    5a90:	d101      	bne.n	5a96 <ExFatFile::syncDir()+0xaa>
    5a92:	2800      	cmp	r0, #0
    5a94:	d1f1      	bne.n	5a7a <ExFatFile::syncDir()+0x8e>
    5a96:	2a1f      	cmp	r2, #31
    5a98:	d9f0      	bls.n	5a7c <ExFatFile::syncDir()+0x90>
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    5a9a:	f108 0801 	add.w	r8, r8, #1
    5a9e:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
    5aa2:	fa5f f188 	uxtb.w	r1, r8
    5aa6:	428b      	cmp	r3, r1
    5aa8:	d2a9      	bcs.n	59fe <ExFatFile::syncDir()+0x12>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    5aaa:	2201      	movs	r2, #1
    5aac:	f106 0124 	add.w	r1, r6, #36	; 0x24
    5ab0:	6a30      	ldr	r0, [r6, #32]
    5ab2:	f001 f915 	bl	6ce0 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    5ab6:	2800      	cmp	r0, #0
    5ab8:	d0ae      	beq.n	5a18 <ExFatFile::syncDir()+0x2c>
  if (!m_vol->cacheSync()) {
    5aba:	6a35      	ldr	r5, [r6, #32]
    5abc:	8044      	strh	r4, [r0, #2]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    5abe:	4628      	mov	r0, r5
    5ac0:	f006 f9a2 	bl	be08 <FsCache::sync()>
    5ac4:	2800      	cmp	r0, #0
    5ac6:	d0a7      	beq.n	5a18 <ExFatFile::syncDir()+0x2c>
    5ac8:	f505 7004 	add.w	r0, r5, #528	; 0x210
    5acc:	f006 f99c 	bl	be08 <FsCache::sync()>
    5ad0:	2800      	cmp	r0, #0
    5ad2:	d0a1      	beq.n	5a18 <ExFatFile::syncDir()+0x2c>
    5ad4:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
    return m_blockDev->syncDevice();
    5ad8:	6803      	ldr	r3, [r0, #0]
    5ada:	6a1b      	ldr	r3, [r3, #32]
    5adc:	4798      	blx	r3
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    5ade:	2800      	cmp	r0, #0
    5ae0:	d1a1      	bne.n	5a26 <ExFatFile::syncDir()+0x3a>
    5ae2:	e799      	b.n	5a18 <ExFatFile::syncDir()+0x2c>
        if (isContiguous()) {
    5ae4:	f896 3033 	ldrb.w	r3, [r6, #51]	; 0x33
    5ae8:	f013 0f40 	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    5aec:	7843      	ldrb	r3, [r0, #1]
    5aee:	bf14      	ite	ne
    5af0:	f043 0302 	orrne.w	r3, r3, #2
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    5af4:	f003 03fd 	andeq.w	r3, r3, #253	; 0xfd
    5af8:	7043      	strb	r3, [r0, #1]
        setLe64(ds->validLength, m_validLength);
    5afa:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
        m_vol->dataCacheDirty();
    5afe:	e9d6 3207 	ldrd	r3, r2, [r6, #28]
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    5b02:	e9c5 0102 	strd	r0, r1, [r5, #8]
        setLe64(ds->dataLength, m_dataLength);
    5b06:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
  *reinterpret_cast<uint32_t*>(dst) = src;
    5b0a:	616b      	str	r3, [r5, #20]
  *reinterpret_cast<uint64_t*>(dst) = src;
    5b0c:	e9c5 0106 	strd	r0, r1, [r5, #24]
    5b10:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    5b14:	f043 0301 	orr.w	r3, r3, #1
    5b18:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
  bool skip = data[0] == EXFAT_TYPE_FILE;
    5b1c:	7829      	ldrb	r1, [r5, #0]
  void dataCacheDirty() {m_dataCache.dirty();}
    5b1e:	e7a5      	b.n	5a6c <ExFatFile::syncDir()+0x80>
    5b20:	2005e024 	.word	0x2005e024

00005b24 <ExFatFile::sync()>:
bool ExFatFile::sync() {
    5b24:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    5b26:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    5b2a:	b343      	cbz	r3, 5b7e <ExFatFile::sync()+0x5a>
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    5b2c:	f990 2033 	ldrsb.w	r2, [r0, #51]	; 0x33
    5b30:	4604      	mov	r4, r0
    5b32:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    5b36:	2a00      	cmp	r2, #0
    5b38:	db0c      	blt.n	5b54 <ExFatFile::sync()+0x30>
  if (!m_vol->cacheSync()) {
    5b3a:	6a05      	ldr	r5, [r0, #32]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    5b3c:	4628      	mov	r0, r5
    5b3e:	f006 f963 	bl	be08 <FsCache::sync()>
    5b42:	b978      	cbnz	r0, 5b64 <ExFatFile::sync()+0x40>
  m_error |= WRITE_ERROR;
    5b44:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  return false;
    5b48:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    5b4a:	f043 0301 	orr.w	r3, r3, #1
    5b4e:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
    5b52:	bd38      	pop	{r3, r4, r5, pc}
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    5b54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5b58:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
}
    5b5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return syncDir();
    5b60:	f7ff bf44 	b.w	59ec <ExFatFile::syncDir()>
    5b64:	f505 7004 	add.w	r0, r5, #528	; 0x210
    5b68:	f006 f94e 	bl	be08 <FsCache::sync()>
    5b6c:	2800      	cmp	r0, #0
    5b6e:	d0e9      	beq.n	5b44 <ExFatFile::sync()+0x20>
    5b70:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
    return m_blockDev->syncDevice();
    5b74:	6803      	ldr	r3, [r0, #0]
    5b76:	6a1b      	ldr	r3, [r3, #32]
    5b78:	4798      	blx	r3
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    5b7a:	2800      	cmp	r0, #0
    5b7c:	d0e2      	beq.n	5b44 <ExFatFile::sync()+0x20>
    return true;
    5b7e:	2001      	movs	r0, #1
}
    5b80:	bd38      	pop	{r3, r4, r5, pc}
    5b82:	bf00      	nop

00005b84 <ExFatFile::addDirCluster()>:
bool ExFatFile::addDirCluster() {
    5b84:	b570      	push	{r4, r5, r6, lr}
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    5b86:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::addDirCluster() {
    5b8a:	4605      	mov	r5, r0
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    5b8c:	065a      	lsls	r2, r3, #25
    5b8e:	d44c      	bmi.n	5c2a <ExFatFile::addDirCluster()+0xa6>
    5b90:	6880      	ldr	r0, [r0, #8]
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
    5b92:	6a2b      	ldr	r3, [r5, #32]
  dl += m_vol->bytesPerCluster();
    5b94:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
    5b98:	4418      	add	r0, r3
  if (dl >= 0X4000000) {
    5b9a:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
    5b9e:	d301      	bcc.n	5ba4 <ExFatFile::addDirCluster()+0x20>
}
    5ba0:	2000      	movs	r0, #0
    5ba2:	bd70      	pop	{r4, r5, r6, pc}
  if (!addCluster()) {
    5ba4:	4628      	mov	r0, r5
    5ba6:	f7ff fe4d 	bl	5844 <ExFatFile::addCluster()>
    5baa:	2800      	cmp	r0, #0
    5bac:	d0f8      	beq.n	5ba0 <ExFatFile::addDirCluster()+0x1c>
  sector = m_vol->clusterStartSector(m_curCluster);
    5bae:	6a28      	ldr	r0, [r5, #32]
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    5bb0:	2400      	movs	r4, #0
           ((cluster - 2) << m_sectorsPerClusterShift);
    5bb2:	69ae      	ldr	r6, [r5, #24]
    5bb4:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
    5bb8:	3e02      	subs	r6, #2
    5bba:	409e      	lsls	r6, r3
    5bbc:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    5bc0:	441e      	add	r6, r3
    return m_dataCache.prepare(sector, option);
    5bc2:	1931      	adds	r1, r6, r4
    5bc4:	2205      	movs	r2, #5
    5bc6:	f500 7004 	add.w	r0, r0, #528	; 0x210
    5bca:	3401      	adds	r4, #1
    5bcc:	f006 f948 	bl	be60 <FsCache::prepare(unsigned long, unsigned char)>
    memset(cache, 0, m_vol->bytesPerSector());
    5bd0:	f44f 7200 	mov.w	r2, #512	; 0x200
    5bd4:	2100      	movs	r1, #0
    if (!cache) {
    5bd6:	2800      	cmp	r0, #0
    5bd8:	d0e2      	beq.n	5ba0 <ExFatFile::addDirCluster()+0x1c>
    memset(cache, 0, m_vol->bytesPerSector());
    5bda:	f00b f9eb 	bl	10fb4 <memset>
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    5bde:	6a28      	ldr	r0, [r5, #32]
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    5be0:	2301      	movs	r3, #1
    5be2:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    5be6:	4093      	lsls	r3, r2
    5be8:	429c      	cmp	r4, r3
    5bea:	d3ea      	bcc.n	5bc2 <ExFatFile::addDirCluster()+0x3e>
  if (!isRoot()) {
    5bec:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    5bf0:	065b      	lsls	r3, r3, #25
    5bf2:	d415      	bmi.n	5c20 <ExFatFile::addDirCluster()+0x9c>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5bf4:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
    5bf8:	f062 027f 	orn	r2, r2, #127	; 0x7f
    m_dataLength  += m_vol->bytesPerCluster();
    5bfc:	e9d5 3102 	ldrd	r3, r1, [r5, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5c00:	f885 2033 	strb.w	r2, [r5, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    5c04:	f8d0 243c 	ldr.w	r2, [r0, #1084]	; 0x43c
    5c08:	189b      	adds	r3, r3, r2
    5c0a:	f141 0000 	adc.w	r0, r1, #0
    5c0e:	60ab      	str	r3, [r5, #8]
    m_validLength += m_vol->bytesPerCluster();
    5c10:	e9d5 3104 	ldrd	r3, r1, [r5, #16]
    m_dataLength  += m_vol->bytesPerCluster();
    5c14:	60e8      	str	r0, [r5, #12]
    m_validLength += m_vol->bytesPerCluster();
    5c16:	189b      	adds	r3, r3, r2
    5c18:	f141 0100 	adc.w	r1, r1, #0
    5c1c:	e9c5 3104 	strd	r3, r1, [r5, #16]
  return sync();
    5c20:	4628      	mov	r0, r5
}
    5c22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return sync();
    5c26:	f7ff bf7d 	b.w	5b24 <ExFatFile::sync()>
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    5c2a:	6a00      	ldr	r0, [r0, #32]
    5c2c:	f001 f9fe 	bl	702c <ExFatPartition::rootLength()>
    5c30:	e7af      	b.n	5b92 <ExFatFile::addDirCluster()+0xe>
    5c32:	bf00      	nop

00005c34 <ExFatFile::rename(ExFatFile*, char const*)>:
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    5c34:	b570      	push	{r4, r5, r6, lr}
    5c36:	4604      	mov	r4, r0
  if (!(isFile() || isSubDir())) {
    5c38:	f890 0031 	ldrb.w	r0, [r0, #49]	; 0x31
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    5c3c:	b09c      	sub	sp, #112	; 0x70
  ExFatFile() {}
    5c3e:	2300      	movs	r3, #0
  if (!(isFile() || isSubDir())) {
    5c40:	f010 0f18 	tst.w	r0, #24
    5c44:	930c      	str	r3, [sp, #48]	; 0x30
    5c46:	931a      	str	r3, [sp, #104]	; 0x68
    5c48:	d003      	beq.n	5c52 <ExFatFile::rename(ExFatFile*, char const*)+0x1e>
  if (m_vol != dirFile->m_vol) {
    5c4a:	6a20      	ldr	r0, [r4, #32]
    5c4c:	6a0b      	ldr	r3, [r1, #32]
    5c4e:	4298      	cmp	r0, r3
    5c50:	d002      	beq.n	5c58 <ExFatFile::rename(ExFatFile*, char const*)+0x24>
  return false;
    5c52:	2000      	movs	r0, #0
}
    5c54:	b01c      	add	sp, #112	; 0x70
    5c56:	bd70      	pop	{r4, r5, r6, pc}
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    5c58:	f640 2301 	movw	r3, #2561	; 0xa01
    5c5c:	4668      	mov	r0, sp
    5c5e:	f7ff fd5b 	bl	5718 <ExFatFile::open(ExFatFile*, char const*, int)>
    5c62:	2800      	cmp	r0, #0
    5c64:	d0f5      	beq.n	5c52 <ExFatFile::rename(ExFatFile*, char const*)+0x1e>
  oldFile = *this;
    5c66:	46a4      	mov	ip, r4
    5c68:	f104 0630 	add.w	r6, r4, #48	; 0x30
    5c6c:	ad0e      	add	r5, sp, #56	; 0x38
    5c6e:	f8dc 0000 	ldr.w	r0, [ip]
    5c72:	f10c 0c10 	add.w	ip, ip, #16
    5c76:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    5c7a:	46ae      	mov	lr, r5
    5c7c:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    5c80:	3510      	adds	r5, #16
    5c82:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    5c86:	45b4      	cmp	ip, r6
    5c88:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    5c8c:	d1ef      	bne.n	5c6e <ExFatFile::rename(ExFatFile*, char const*)+0x3a>
    5c8e:	f8dc 0000 	ldr.w	r0, [ip]
  m_dirPos = file.m_dirPos;
    5c92:	aa09      	add	r2, sp, #36	; 0x24
    5c94:	f104 0324 	add.w	r3, r4, #36	; 0x24
  oldFile = *this;
    5c98:	6028      	str	r0, [r5, #0]
  m_setCount = file.m_setCount;
    5c9a:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
  m_dirPos = file.m_dirPos;
    5c9e:	ca07      	ldmia	r2, {r0, r1, r2}
    5ca0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5ca4:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    5ca8:	4620      	mov	r0, r4
  m_setCount = file.m_setCount;
    5caa:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5cae:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5cb2:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    5cb6:	f7ff ff35 	bl	5b24 <ExFatFile::sync()>
    5cba:	2800      	cmp	r0, #0
    5cbc:	d0c9      	beq.n	5c52 <ExFatFile::rename(ExFatFile*, char const*)+0x1e>
  oldFile.m_firstCluster = 0;
    5cbe:	2100      	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    5cc0:	2202      	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    5cc2:	2308      	movs	r3, #8
  return oldFile.remove();
    5cc4:	a80e      	add	r0, sp, #56	; 0x38
  oldFile.m_firstCluster = 0;
    5cc6:	9115      	str	r1, [sp, #84]	; 0x54
  oldFile.m_flags = FILE_FLAG_WRITE;
    5cc8:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
  oldFile.m_attributes = FILE_ATTR_FILE;
    5ccc:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
  return oldFile.remove();
    5cd0:	f7ff fe02 	bl	58d8 <ExFatFile::remove()>
    5cd4:	e7be      	b.n	5c54 <ExFatFile::rename(ExFatFile*, char const*)+0x20>
    5cd6:	bf00      	nop

00005cd8 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    5cd8:	b538      	push	{r3, r4, r5, lr}
  if (!parent->isDir()) {
    5cda:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    5cde:	f013 0f50 	tst.w	r3, #80	; 0x50
    5ce2:	d102      	bne.n	5cea <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x12>
  return false;
    5ce4:	2500      	movs	r5, #0
}
    5ce6:	4628      	mov	r0, r5
    5ce8:	bd38      	pop	{r3, r4, r5, pc}
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    5cea:	f640 2302 	movw	r3, #2562	; 0xa02
    5cee:	4604      	mov	r4, r0
    5cf0:	f7ff fb46 	bl	5380 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    5cf4:	2800      	cmp	r0, #0
    5cf6:	d0f5      	beq.n	5ce4 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
  m_attributes = FILE_ATTR_SUBDIR;
    5cf8:	2310      	movs	r3, #16
  if (!addDirCluster()) {
    5cfa:	4620      	mov	r0, r4
  m_attributes = FILE_ATTR_SUBDIR;
    5cfc:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  if (!addDirCluster()) {
    5d00:	f7ff ff40 	bl	5b84 <ExFatFile::addDirCluster()>
    5d04:	4605      	mov	r5, r0
    5d06:	2800      	cmp	r0, #0
    5d08:	d0ec      	beq.n	5ce4 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
  m_firstCluster = m_curCluster;
    5d0a:	69a1      	ldr	r1, [r4, #24]
    seekSet(0);
    5d0c:	2200      	movs	r2, #0
    5d0e:	2300      	movs	r3, #0
    5d10:	4620      	mov	r0, r4
    5d12:	61e1      	str	r1, [r4, #28]
    5d14:	f7ff fabe 	bl	5294 <ExFatFile::seekSet(unsigned long long)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    5d18:	22c1      	movs	r2, #193	; 0xc1
  if (!isOpen()) {
    5d1a:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    5d1e:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
  if (!isOpen()) {
    5d22:	2b00      	cmp	r3, #0
    5d24:	d0df      	beq.n	5ce6 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xe>
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    5d26:	2341      	movs	r3, #65	; 0x41
    return syncDir();
    5d28:	4620      	mov	r0, r4
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    5d2a:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    5d2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return syncDir();
    5d32:	f7ff be5b 	b.w	59ec <ExFatFile::syncDir()>
    5d36:	bf00      	nop

00005d38 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    5d38:	b5f0      	push	{r4, r5, r6, r7, lr}
    5d3a:	2500      	movs	r5, #0
    5d3c:	b097      	sub	sp, #92	; 0x5c
    5d3e:	461f      	mov	r7, r3
  if (isOpen() || !parent->isDir()) {
    5d40:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    5d44:	9201      	str	r2, [sp, #4]
    5d46:	f8ad 5014 	strh.w	r5, [sp, #20]
  ExFatFile() {}
    5d4a:	9514      	str	r5, [sp, #80]	; 0x50
  if (isOpen() || !parent->isDir()) {
    5d4c:	2b00      	cmp	r3, #0
    5d4e:	d146      	bne.n	5dde <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    5d50:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    5d54:	460e      	mov	r6, r1
    5d56:	f013 0f50 	tst.w	r3, #80	; 0x50
    5d5a:	d040      	beq.n	5dde <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
  if (isDirSeparator(*path)) {
    5d5c:	7813      	ldrb	r3, [r2, #0]
    5d5e:	4604      	mov	r4, r0
    5d60:	4611      	mov	r1, r2
    5d62:	2b2f      	cmp	r3, #47	; 0x2f
    5d64:	d03e      	beq.n	5de4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xac>
    if (!parsePathName(path, &fname, &path)) {
    5d66:	ab01      	add	r3, sp, #4
    5d68:	aa02      	add	r2, sp, #8
    5d6a:	4620      	mov	r0, r4
    5d6c:	f7ff f95e 	bl	502c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    5d70:	2800      	cmp	r0, #0
    5d72:	d034      	beq.n	5dde <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    if (!*path) {
    5d74:	9b01      	ldr	r3, [sp, #4]
    5d76:	781b      	ldrb	r3, [r3, #0]
    5d78:	2b00      	cmp	r3, #0
    5d7a:	d041      	beq.n	5e00 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xc8>
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    5d7c:	2300      	movs	r3, #0
    5d7e:	aa02      	add	r2, sp, #8
    5d80:	4631      	mov	r1, r6
    5d82:	4620      	mov	r0, r4
    5d84:	f7ff fafc 	bl	5380 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    5d88:	b930      	cbnz	r0, 5d98 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x60>
      if (!pFlag || !mkdir(parent, &fname)) {
    5d8a:	b347      	cbz	r7, 5dde <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    5d8c:	aa02      	add	r2, sp, #8
    5d8e:	4631      	mov	r1, r6
    5d90:	4620      	mov	r0, r4
    5d92:	f7ff ffa1 	bl	5cd8 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    5d96:	b310      	cbz	r0, 5dde <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    tmpDir = *this;
    5d98:	46a4      	mov	ip, r4
    5d9a:	ad08      	add	r5, sp, #32
    5d9c:	f104 0630 	add.w	r6, r4, #48	; 0x30
    5da0:	f8dc 0000 	ldr.w	r0, [ip]
    5da4:	f10c 0c10 	add.w	ip, ip, #16
    5da8:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    5dac:	46ae      	mov	lr, r5
    5dae:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    5db2:	3510      	adds	r5, #16
    5db4:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    5db8:	45b4      	cmp	ip, r6
    5dba:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    5dbe:	d1ef      	bne.n	5da0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x68>
    5dc0:	f8dc 0000 	ldr.w	r0, [ip]
    parent = &tmpDir;
    5dc4:	ae08      	add	r6, sp, #32
    tmpDir = *this;
    5dc6:	6028      	str	r0, [r5, #0]
    close();
    5dc8:	4620      	mov	r0, r4
    5dca:	f7ff f8ed 	bl	4fa8 <ExFatFile::close()>
    if (!parsePathName(path, &fname, &path)) {
    5dce:	9901      	ldr	r1, [sp, #4]
    5dd0:	ab01      	add	r3, sp, #4
    5dd2:	aa02      	add	r2, sp, #8
    5dd4:	4620      	mov	r0, r4
    5dd6:	f7ff f929 	bl	502c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    5dda:	2800      	cmp	r0, #0
    5ddc:	d1ca      	bne.n	5d74 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3c>
  return false;
    5dde:	2000      	movs	r0, #0
}
    5de0:	b017      	add	sp, #92	; 0x5c
    5de2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      path++;
    5de4:	3101      	adds	r1, #1
    5de6:	9101      	str	r1, [sp, #4]
    while (isDirSeparator(*path)) {
    5de8:	780b      	ldrb	r3, [r1, #0]
    5dea:	2b2f      	cmp	r3, #47	; 0x2f
    5dec:	d0fa      	beq.n	5de4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xac>
    if (!tmpDir.openRoot(parent->m_vol)) {
    5dee:	6a31      	ldr	r1, [r6, #32]
    5df0:	a808      	add	r0, sp, #32
    5df2:	f7ff f907 	bl	5004 <ExFatFile::openRoot(ExFatVolume*)>
    5df6:	2800      	cmp	r0, #0
    5df8:	d0f1      	beq.n	5dde <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    if (!parsePathName(path, &fname, &path)) {
    5dfa:	9901      	ldr	r1, [sp, #4]
    parent = &tmpDir;
    5dfc:	ae08      	add	r6, sp, #32
    5dfe:	e7b2      	b.n	5d66 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2e>
  return mkdir(parent, &fname);
    5e00:	aa02      	add	r2, sp, #8
    5e02:	4631      	mov	r1, r6
    5e04:	4620      	mov	r0, r4
    5e06:	f7ff ff67 	bl	5cd8 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
}
    5e0a:	b017      	add	sp, #92	; 0x5c
    5e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5e0e:	bf00      	nop

00005e10 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    5e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5e14:	460e      	mov	r6, r1
      || month > 12
      || day < 1
      || day > 31
      || hour > 23
      || minute > 59
      || second > 59) {
    5e16:	f890 1031 	ldrb.w	r1, [r0, #49]	; 0x31
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    5e1a:	b083      	sub	sp, #12
      || second > 59) {
    5e1c:	0709      	lsls	r1, r1, #28
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    5e1e:	f89d b030 	ldrb.w	fp, [sp, #48]	; 0x30
    5e22:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
    5e26:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
    5e2a:	f89d 703c 	ldrb.w	r7, [sp, #60]	; 0x3c
      || second > 59) {
    5e2e:	f140 8085 	bpl.w	5f3c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
      || year > 2107
    5e32:	f2a2 72bc 	subw	r2, r2, #1980	; 0x7bc
    5e36:	b294      	uxth	r4, r2
    5e38:	2c7f      	cmp	r4, #127	; 0x7f
    5e3a:	d87f      	bhi.n	5f3c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
      || month > 12
    5e3c:	1e5a      	subs	r2, r3, #1
    5e3e:	2a0b      	cmp	r2, #11
    5e40:	d87c      	bhi.n	5f3c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
      || day > 31
    5e42:	f10b 32ff 	add.w	r2, fp, #4294967295
    5e46:	2a1e      	cmp	r2, #30
    5e48:	d878      	bhi.n	5f3c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
      || minute > 59
    5e4a:	f1b8 0f3b 	cmp.w	r8, #59	; 0x3b
    5e4e:	bf98      	it	ls
    5e50:	f1b9 0f17 	cmpls.w	r9, #23
    5e54:	bf8c      	ite	hi
    5e56:	f04f 0a01 	movhi.w	sl, #1
    5e5a:	f04f 0a00 	movls.w	sl, #0
    5e5e:	2f3b      	cmp	r7, #59	; 0x3b
    5e60:	bf88      	it	hi
    5e62:	f04a 0a01 	orrhi.w	sl, sl, #1
      || second > 59) {
    5e66:	f1ba 0f00 	cmp.w	sl, #0
    5e6a:	d167      	bne.n	5f3c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // update directory entry
  if (!sync()) {
    5e6c:	4605      	mov	r5, r0
    5e6e:	9301      	str	r3, [sp, #4]
    5e70:	f7ff fe58 	bl	5b24 <ExFatFile::sync()>
    5e74:	2800      	cmp	r0, #0
    5e76:	d061      	beq.n	5f3c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    5e78:	9b01      	ldr	r3, [sp, #4]
    5e7a:	4651      	mov	r1, sl
    5e7c:	ea4b 1b43 	orr.w	fp, fp, r3, lsl #5
         hour << 11 | minute << 5 | second >> 1;
    5e80:	087b      	lsrs	r3, r7, #1
    goto fail;
  }

  date = FS_DATE(year, month, day);
  time = FS_TIME(hour, minute, second);
  ms10 = second & 1 ? 100 : 0;
    5e82:	f017 0701 	ands.w	r7, r7, #1
         year << 9 | month << 5 | day;
    5e86:	ea4b 2444 	orr.w	r4, fp, r4, lsl #9
  uint16_t checksum = 0;
    5e8a:	46d3      	mov	fp, sl
         hour << 11 | minute << 5 | second >> 1;
    5e8c:	ea43 1848 	orr.w	r8, r3, r8, lsl #5
  ms10 = second & 1 ? 100 : 0;
    5e90:	bf18      	it	ne
    5e92:	2764      	movne	r7, #100	; 0x64
         year << 9 | month << 5 | day;
    5e94:	b2a4      	uxth	r4, r4
         hour << 11 | minute << 5 | second >> 1;
    5e96:	ea48 28c9 	orr.w	r8, r8, r9, lsl #11
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        m_vol->dataCacheDirty();
        if (flags & T_ACCESS) {
    5e9a:	f006 0901 	and.w	r9, r6, #1
    5e9e:	fa1f f888 	uxth.w	r8, r8
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    5ea2:	2200      	movs	r2, #0
    5ea4:	4628      	mov	r0, r5
    5ea6:	f7ff f861 	bl	4f6c <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    5eaa:	2800      	cmp	r0, #0
    5eac:	d046      	beq.n	5f3c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    switch (cache[0]) {
    5eae:	f890 c000 	ldrb.w	ip, [r0]
    5eb2:	f1bc 0f85 	cmp.w	ip, #133	; 0x85
    5eb6:	d045      	beq.n	5f44 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x134>
    5eb8:	f10c 0340 	add.w	r3, ip, #64	; 0x40
    5ebc:	b2db      	uxtb	r3, r3
    5ebe:	2b01      	cmp	r3, #1
    5ec0:	d83c      	bhi.n	5f3c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
  bool skip = data[0] == EXFAT_TYPE_FILE;
    5ec2:	f1ac 0185 	sub.w	r1, ip, #133	; 0x85
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    5ec6:	2300      	movs	r3, #0
  bool skip = data[0] == EXFAT_TYPE_FILE;
    5ec8:	fab1 f181 	clz	r1, r1
    5ecc:	0949      	lsrs	r1, r1, #5
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    5ece:	e002      	b.n	5ed6 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xc6>
    5ed0:	2304      	movs	r3, #4
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    5ed2:	f810 c003 	ldrb.w	ip, [r0, r3]
    5ed6:	ea4f 32cb 	mov.w	r2, fp, lsl #15
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    5eda:	2b01      	cmp	r3, #1
    5edc:	f103 0301 	add.w	r3, r3, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    5ee0:	ea42 025b 	orr.w	r2, r2, fp, lsr #1
    5ee4:	fa1c f282 	uxtah	r2, ip, r2
    5ee8:	fa1f fb82 	uxth.w	fp, r2
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    5eec:	d101      	bne.n	5ef2 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe2>
    5eee:	2900      	cmp	r1, #0
    5ef0:	d1ee      	bne.n	5ed0 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xc0>
    5ef2:	2b1f      	cmp	r3, #31
    5ef4:	d9ed      	bls.n	5ed2 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xc2>
  for (uint8_t is = 0; is <= m_setCount; is++) {
    5ef6:	f10a 0a01 	add.w	sl, sl, #1
    5efa:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    5efe:	fa5f f18a 	uxtb.w	r1, sl
    5f02:	428b      	cmp	r3, r1
    5f04:	d2cd      	bcs.n	5ea2 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x92>
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
  }
  df = reinterpret_cast<DirFile_t*>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    5f06:	2201      	movs	r2, #1
    5f08:	f105 0124 	add.w	r1, r5, #36	; 0x24
    5f0c:	6a28      	ldr	r0, [r5, #32]
    5f0e:	f000 fee7 	bl	6ce0 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    5f12:	b198      	cbz	r0, 5f3c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    5f14:	6a2c      	ldr	r4, [r5, #32]
  *reinterpret_cast<uint16_t*>(dst) = src;
    5f16:	f8a0 b002 	strh.w	fp, [r0, #2]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    5f1a:	4620      	mov	r0, r4
    5f1c:	f005 ff74 	bl	be08 <FsCache::sync()>
    5f20:	b160      	cbz	r0, 5f3c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    5f22:	f504 7004 	add.w	r0, r4, #528	; 0x210
    5f26:	f005 ff6f 	bl	be08 <FsCache::sync()>
    5f2a:	b138      	cbz	r0, 5f3c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    5f2c:	f8d4 0440 	ldr.w	r0, [r4, #1088]	; 0x440
    return m_blockDev->syncDevice();
    5f30:	6803      	ldr	r3, [r0, #0]
    5f32:	6a1b      	ldr	r3, [r3, #32]
  }
  return true;

 fail:
  return false;
}
    5f34:	b003      	add	sp, #12
    5f36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5f3a:	4718      	bx	r3
    5f3c:	2000      	movs	r0, #0
    5f3e:	b003      	add	sp, #12
    5f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
    5f44:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
        m_vol->dataCacheDirty();
    5f48:	6a2a      	ldr	r2, [r5, #32]
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
    5f4a:	f003 0337 	and.w	r3, r3, #55	; 0x37
    5f4e:	8083      	strh	r3, [r0, #4]
    5f50:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    5f54:	f043 0301 	orr.w	r3, r3, #1
    5f58:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
        if (flags & T_ACCESS) {
    5f5c:	f1b9 0f00 	cmp.w	r9, #0
    5f60:	d002      	beq.n	5f68 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x158>
    5f62:	f8a0 8010 	strh.w	r8, [r0, #16]
    5f66:	8244      	strh	r4, [r0, #18]
        if (flags & T_CREATE) {
    5f68:	07b2      	lsls	r2, r6, #30
    5f6a:	d503      	bpl.n	5f74 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x164>
          df->createTimeMs = ms10;
    5f6c:	7507      	strb	r7, [r0, #20]
    5f6e:	f8a0 8008 	strh.w	r8, [r0, #8]
    5f72:	8144      	strh	r4, [r0, #10]
        if (flags & T_WRITE) {
    5f74:	0773      	lsls	r3, r6, #29
    5f76:	d503      	bpl.n	5f80 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x170>
          df->modifyTimeMs = ms10;
    5f78:	7547      	strb	r7, [r0, #21]
    5f7a:	f8a0 800c 	strh.w	r8, [r0, #12]
    5f7e:	81c4      	strh	r4, [r0, #14]
  bool skip = data[0] == EXFAT_TYPE_FILE;
    5f80:	f890 c000 	ldrb.w	ip, [r0]
}
    5f84:	e79d      	b.n	5ec2 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xb2>
    5f86:	bf00      	nop

00005f88 <ExFatFile::truncate()>:
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    5f88:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    5f8c:	079a      	lsls	r2, r3, #30
    5f8e:	d562      	bpl.n	6056 <ExFatFile::truncate()+0xce>
bool ExFatFile::truncate() {
    5f90:	b570      	push	{r4, r5, r6, lr}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    5f92:	69c5      	ldr	r5, [r0, #28]
bool ExFatFile::truncate() {
    5f94:	b082      	sub	sp, #8
    5f96:	4604      	mov	r4, r0
  if (m_firstCluster == 0) {
    5f98:	b3a5      	cbz	r5, 6004 <ExFatFile::truncate()+0x7c>
      return true;
  }
  if (isContiguous()) {
    5f9a:	f013 0640 	ands.w	r6, r3, #64	; 0x40
    5f9e:	d034      	beq.n	600a <ExFatFile::truncate()+0x82>
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    5fa0:	6a00      	ldr	r0, [r0, #32]
    5fa2:	68a2      	ldr	r2, [r4, #8]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    5fa4:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
    5fa8:	3a01      	subs	r2, #1
    5faa:	68e1      	ldr	r1, [r4, #12]
    5fac:	f10c 0c09 	add.w	ip, ip, #9
    5fb0:	f141 31ff 	adc.w	r1, r1, #4294967295
    5fb4:	fa5f fc8c 	uxtb.w	ip, ip
    5fb8:	f1cc 0e20 	rsb	lr, ip, #32
    5fbc:	fa22 f20c 	lsr.w	r2, r2, ip
    5fc0:	f1ac 0c20 	sub.w	ip, ip, #32
    5fc4:	fa01 fe0e 	lsl.w	lr, r1, lr
    5fc8:	fa21 fc0c 	lsr.w	ip, r1, ip
    if (m_curCluster) {
    5fcc:	69a1      	ldr	r1, [r4, #24]
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    5fce:	ea42 020e 	orr.w	r2, r2, lr
    5fd2:	ea42 020c 	orr.w	r2, r2, ip
    5fd6:	3201      	adds	r2, #1
    if (m_curCluster) {
    5fd8:	b319      	cbz	r1, 6022 <ExFatFile::truncate()+0x9a>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    5fda:	3d01      	subs	r5, #1
    5fdc:	1a6d      	subs	r5, r5, r1
      toFree = m_curCluster + 1;
    5fde:	3101      	adds	r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    5fe0:	442a      	add	r2, r5
      toFree = m_curCluster + 1;
    5fe2:	9101      	str	r1, [sp, #4]
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    5fe4:	bb72      	cbnz	r2, 6044 <ExFatFile::truncate()+0xbc>
      }
    }
  }
  m_dataLength = m_curPosition;
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5fe6:	f063 037f 	orn	r3, r3, #127	; 0x7f
  return sync();
    5fea:	4620      	mov	r0, r4
  m_dataLength = m_curPosition;
    5fec:	ed94 7b00 	vldr	d7, [r4]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5ff0:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_dataLength = m_curPosition;
    5ff4:	ed84 7b02 	vstr	d7, [r4, #8]
  m_validLength = m_curPosition;
    5ff8:	ed84 7b04 	vstr	d7, [r4, #16]
  return sync();
    5ffc:	f7ff fd92 	bl	5b24 <ExFatFile::sync()>

 fail:
  return false;
}
    6000:	b002      	add	sp, #8
    6002:	bd70      	pop	{r4, r5, r6, pc}
      return true;
    6004:	2001      	movs	r0, #1
}
    6006:	b002      	add	sp, #8
    6008:	bd70      	pop	{r4, r5, r6, pc}
    if (m_curCluster) {
    600a:	6981      	ldr	r1, [r0, #24]
    600c:	b961      	cbnz	r1, 6028 <ExFatFile::truncate()+0xa0>
      toFree = m_firstCluster;
    600e:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    6010:	61c1      	str	r1, [r0, #28]
      if (!m_vol->freeChain(toFree)) {
    6012:	4629      	mov	r1, r5
    6014:	6a20      	ldr	r0, [r4, #32]
    6016:	f000 ff03 	bl	6e20 <ExFatPartition::freeChain(unsigned long)>
    601a:	b1c8      	cbz	r0, 6050 <ExFatFile::truncate()+0xc8>
  m_flags |= FILE_FLAG_DIR_DIRTY;
    601c:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    6020:	e7e1      	b.n	5fe6 <ExFatFile::truncate()+0x5e>
      toFree = m_firstCluster;
    6022:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    6024:	61e1      	str	r1, [r4, #28]
    6026:	e7dd      	b.n	5fe4 <ExFatFile::truncate()+0x5c>
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    6028:	aa01      	add	r2, sp, #4
    602a:	6a00      	ldr	r0, [r0, #32]
      toFree = 0;
    602c:	9601      	str	r6, [sp, #4]
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    602e:	f000 feb5 	bl	6d9c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    6032:	2800      	cmp	r0, #0
    6034:	db0c      	blt.n	6050 <ExFatFile::truncate()+0xc8>
      if (fg) {
    6036:	d110      	bne.n	605a <ExFatFile::truncate()+0xd2>
    if (toFree) {
    6038:	9d01      	ldr	r5, [sp, #4]
    603a:	2d00      	cmp	r5, #0
    603c:	d1e9      	bne.n	6012 <ExFatFile::truncate()+0x8a>
  m_flags |= FILE_FLAG_DIR_DIRTY;
    603e:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    6042:	e7d0      	b.n	5fe6 <ExFatFile::truncate()+0x5e>
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    6044:	2300      	movs	r3, #0
    6046:	9901      	ldr	r1, [sp, #4]
    6048:	f000 fdce 	bl	6be8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    604c:	2800      	cmp	r0, #0
    604e:	d1e5      	bne.n	601c <ExFatFile::truncate()+0x94>
  return false;
    6050:	2000      	movs	r0, #0
}
    6052:	b002      	add	sp, #8
    6054:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    6056:	2000      	movs	r0, #0
}
    6058:	4770      	bx	lr
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    605a:	f04f 32ff 	mov.w	r2, #4294967295
    605e:	69a1      	ldr	r1, [r4, #24]
    6060:	6a20      	ldr	r0, [r4, #32]
    6062:	f000 febd 	bl	6de0 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    6066:	2800      	cmp	r0, #0
    6068:	d1e6      	bne.n	6038 <ExFatFile::truncate()+0xb0>
    606a:	e7f1      	b.n	6050 <ExFatFile::truncate()+0xc8>

0000606c <ExFatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    606c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6070:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    6074:	b083      	sub	sp, #12
    6076:	4604      	mov	r4, r0

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    6078:	079d      	lsls	r5, r3, #30
    607a:	f140 80a1 	bpl.w	61c0 <ExFatFile::write(void const*, unsigned int)+0x154>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    607e:	4691      	mov	r9, r2
    6080:	071a      	lsls	r2, r3, #28
    6082:	460e      	mov	r6, r1
    6084:	f100 8095 	bmi.w	61b2 <ExFatFile::write(void const*, unsigned int)+0x146>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    6088:	f1b9 0f00 	cmp.w	r9, #0
    608c:	f000 8128 	beq.w	62e0 <ExFatFile::write(void const*, unsigned int)+0x274>
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    6090:	6823      	ldr	r3, [r4, #0]
    6092:	464d      	mov	r5, r9
    clusterOffset = m_curPosition & m_vol->clusterMask();
    6094:	6a20      	ldr	r0, [r4, #32]
      if (m_curCluster != 0) {
    6096:	69a1      	ldr	r1, [r4, #24]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    6098:	f8d0 2438 	ldr.w	r2, [r0, #1080]	; 0x438
    609c:	ea02 0803 	and.w	r8, r2, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    60a0:	f3c8 0708 	ubfx	r7, r8, #0, #9
    if (clusterOffset == 0) {
    60a4:	f1b8 0f00 	cmp.w	r8, #0
    60a8:	f040 8094 	bne.w	61d4 <ExFatFile::write(void const*, unsigned int)+0x168>
      if (m_curCluster != 0) {
    60ac:	2900      	cmp	r1, #0
    60ae:	f000 80d4 	beq.w	625a <ExFatFile::write(void const*, unsigned int)+0x1ee>
        if (isContiguous()) {
    60b2:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    60b6:	065b      	lsls	r3, r3, #25
    60b8:	f140 80ec 	bpl.w	6294 <ExFatFile::write(void const*, unsigned int)+0x228>
    60bc:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
    60c0:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    60c4:	f10c 0c09 	add.w	ip, ip, #9
    60c8:	3b01      	subs	r3, #1
    60ca:	fa5f fc8c 	uxtb.w	ip, ip
    60ce:	f142 32ff 	adc.w	r2, r2, #4294967295
    60d2:	f1cc 0e20 	rsb	lr, ip, #32
    60d6:	fa23 f30c 	lsr.w	r3, r3, ip
    60da:	f1ac 0c20 	sub.w	ip, ip, #32
    60de:	fa02 fe0e 	lsl.w	lr, r2, lr
    60e2:	fa22 fc0c 	lsr.w	ip, r2, ip
    60e6:	69e2      	ldr	r2, [r4, #28]
    60e8:	ea43 030e 	orr.w	r3, r3, lr
    60ec:	ea43 030c 	orr.w	r3, r3, ip
    60f0:	4413      	add	r3, r2
          if (m_curCluster < lc) {
    60f2:	4299      	cmp	r1, r3
    60f4:	f080 80d5 	bcs.w	62a2 <ExFatFile::write(void const*, unsigned int)+0x236>
            m_curCluster++;
    60f8:	3101      	adds	r1, #1
    60fa:	61a1      	str	r1, [r4, #24]
           ((cluster - 2) << m_sectorsPerClusterShift);
    60fc:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    6100:	3902      	subs	r1, #2
    sector = m_vol->clusterStartSector(m_curCluster) +
    6102:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    6106:	4091      	lsls	r1, r2
    6108:	4419      	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    610a:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
    610e:	f0c0 808a 	bcc.w	6226 <ExFatFile::write(void const*, unsigned int)+0x1ba>
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    6112:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
    6116:	f0c0 80a6 	bcc.w	6266 <ExFatFile::write(void const*, unsigned int)+0x1fa>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    611a:	2301      	movs	r3, #1
    611c:	4093      	lsls	r3, r2
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    611e:	0a6a      	lsrs	r2, r5, #9
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    6120:	eba3 0308 	sub.w	r3, r3, r8
    6124:	4293      	cmp	r3, r2
    6126:	bf28      	it	cs
    6128:	4613      	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    612a:	f8d0 221c 	ldr.w	r2, [r0, #540]	; 0x21c
    612e:	428a      	cmp	r2, r1
      n = ns << m_vol->bytesPerSectorShift();
    6130:	ea4f 2843 	mov.w	r8, r3, lsl #9
    6134:	d309      	bcc.n	614a <ExFatFile::write(void const*, unsigned int)+0xde>
    6136:	185f      	adds	r7, r3, r1
    6138:	42ba      	cmp	r2, r7
    613a:	d206      	bcs.n	614a <ExFatFile::write(void const*, unsigned int)+0xde>
    m_status = 0;
    613c:	2200      	movs	r2, #0
    613e:	f880 2210 	strb.w	r2, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    6142:	f04f 32ff 	mov.w	r2, #4294967295
    6146:	f8c0 221c 	str.w	r2, [r0, #540]	; 0x21c
    return m_blockDev->writeSectors(sector, src, count);
    614a:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    614e:	4632      	mov	r2, r6
    6150:	6807      	ldr	r7, [r0, #0]
    6152:	6abf      	ldr	r7, [r7, #40]	; 0x28
    6154:	47b8      	blx	r7
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    6156:	b398      	cbz	r0, 61c0 <ExFatFile::write(void const*, unsigned int)+0x154>
    m_curPosition += n;
    6158:	4643      	mov	r3, r8
    src += n;
    615a:	4446      	add	r6, r8
    toWrite -= n;
    615c:	eba5 0508 	sub.w	r5, r5, r8
    m_curPosition += n;
    6160:	e9d4 7200 	ldrd	r7, r2, [r4]
    if (m_curPosition > m_validLength) {
    6164:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    m_curPosition += n;
    6168:	19db      	adds	r3, r3, r7
    616a:	f142 0200 	adc.w	r2, r2, #0
    if (m_curPosition > m_validLength) {
    616e:	4298      	cmp	r0, r3
    6170:	4191      	sbcs	r1, r2
    m_curPosition += n;
    6172:	e9c4 3200 	strd	r3, r2, [r4]
    if (m_curPosition > m_validLength) {
    6176:	d207      	bcs.n	6188 <ExFatFile::write(void const*, unsigned int)+0x11c>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    6178:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    617c:	f061 017f 	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    6180:	e9c4 3204 	strd	r3, r2, [r4, #16]
      m_flags |= FILE_FLAG_DIR_DIRTY;
    6184:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
  while (toWrite) {
    6188:	2d00      	cmp	r5, #0
    618a:	d183      	bne.n	6094 <ExFatFile::write(void const*, unsigned int)+0x28>
  if (m_curPosition > m_dataLength) {
    618c:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
    6190:	4298      	cmp	r0, r3
    6192:	4191      	sbcs	r1, r2
    6194:	f0c0 8096 	bcc.w	62c4 <ExFatFile::write(void const*, unsigned int)+0x258>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    6198:	4b53      	ldr	r3, [pc, #332]	; (62e8 <ExFatFile::write(void const*, unsigned int)+0x27c>)
    619a:	681b      	ldr	r3, [r3, #0]
    619c:	2b00      	cmp	r3, #0
    619e:	f000 809d 	beq.w	62dc <ExFatFile::write(void const*, unsigned int)+0x270>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    61a2:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    61a6:	4648      	mov	r0, r9
    61a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    61ac:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    61b0:	e00d      	b.n	61ce <ExFatFile::write(void const*, unsigned int)+0x162>
    if (!seekSet(m_validLength)) {
    61b2:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
    61b6:	f7ff f86d 	bl	5294 <ExFatFile::seekSet(unsigned long long)>
    61ba:	2800      	cmp	r0, #0
    61bc:	f47f af64 	bne.w	6088 <ExFatFile::write(void const*, unsigned int)+0x1c>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    61c0:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  return 0;
    61c4:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    61c6:	f043 0301 	orr.w	r3, r3, #1
    61ca:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
    61ce:	b003      	add	sp, #12
    61d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
           ((cluster - 2) << m_sectorsPerClusterShift);
    61d4:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    61d8:	3902      	subs	r1, #2
             (clusterOffset >> m_vol->bytesPerSectorShift());
    61da:	ea4f 2858 	mov.w	r8, r8, lsr #9
    sector = m_vol->clusterStartSector(m_curCluster) +
    61de:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    61e2:	4091      	lsls	r1, r2
    61e4:	4441      	add	r1, r8
    61e6:	4419      	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    61e8:	2f00      	cmp	r7, #0
    61ea:	d08e      	beq.n	610a <ExFatFile::write(void const*, unsigned int)+0x9e>
      n = m_vol->bytesPerSector() - sectorOffset;
    61ec:	f5c7 7800 	rsb	r8, r7, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    61f0:	2201      	movs	r2, #1
    61f2:	f500 7004 	add.w	r0, r0, #528	; 0x210
    61f6:	45a8      	cmp	r8, r5
    61f8:	bf28      	it	cs
    61fa:	46a8      	movcs	r8, r5
    61fc:	f005 fe30 	bl	be60 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    6200:	2800      	cmp	r0, #0
    6202:	d0dd      	beq.n	61c0 <ExFatFile::write(void const*, unsigned int)+0x154>
      memcpy(dst, src, n);
    6204:	4438      	add	r0, r7
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    6206:	4447      	add	r7, r8
      memcpy(dst, src, n);
    6208:	4642      	mov	r2, r8
    620a:	4631      	mov	r1, r6
    620c:	f007 f9a0 	bl	d550 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    6210:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    6214:	6a20      	ldr	r0, [r4, #32]
    6216:	d19f      	bne.n	6158 <ExFatFile::write(void const*, unsigned int)+0xec>
  bool dataCacheSync() {return m_dataCache.sync();}
    6218:	f500 7004 	add.w	r0, r0, #528	; 0x210
    621c:	f005 fdf4 	bl	be08 <FsCache::sync()>
        if (!m_vol->dataCacheSync()) {
    6220:	2800      	cmp	r0, #0
    6222:	d199      	bne.n	6158 <ExFatFile::write(void const*, unsigned int)+0xec>
    6224:	e7cc      	b.n	61c0 <ExFatFile::write(void const*, unsigned int)+0x154>
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    6226:	6862      	ldr	r2, [r4, #4]
    6228:	6963      	ldr	r3, [r4, #20]
    622a:	9200      	str	r2, [sp, #0]
    622c:	9301      	str	r3, [sp, #4]
    622e:	6922      	ldr	r2, [r4, #16]
    6230:	6823      	ldr	r3, [r4, #0]
    6232:	4293      	cmp	r3, r2
    6234:	e9dd 2300 	ldrd	r2, r3, [sp]
    6238:	419a      	sbcs	r2, r3
    623a:	d212      	bcs.n	6262 <ExFatFile::write(void const*, unsigned int)+0x1f6>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    623c:	2201      	movs	r2, #1
    return m_dataCache.prepare(sector, option);
    623e:	f500 7004 	add.w	r0, r0, #528	; 0x210
    6242:	f005 fe0d 	bl	be60 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    6246:	2800      	cmp	r0, #0
    6248:	d0ba      	beq.n	61c0 <ExFatFile::write(void const*, unsigned int)+0x154>
      memcpy(dst, src, n);
    624a:	462a      	mov	r2, r5
    624c:	4631      	mov	r1, r6
    624e:	4438      	add	r0, r7
    m_curPosition += n;
    6250:	46a8      	mov	r8, r5
      memcpy(dst, src, n);
    6252:	f007 f97d 	bl	d550 <memcpy>
    m_curPosition += n;
    6256:	462b      	mov	r3, r5
    6258:	e77f      	b.n	615a <ExFatFile::write(void const*, unsigned int)+0xee>
        if (m_firstCluster == 0) {
    625a:	69e1      	ldr	r1, [r4, #28]
    625c:	b349      	cbz	r1, 62b2 <ExFatFile::write(void const*, unsigned int)+0x246>
          m_curCluster = m_firstCluster;
    625e:	61a1      	str	r1, [r4, #24]
    6260:	e74c      	b.n	60fc <ExFatFile::write(void const*, unsigned int)+0x90>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    6262:	2205      	movs	r2, #5
    6264:	e7eb      	b.n	623e <ExFatFile::write(void const*, unsigned int)+0x1d2>
    if (isCached(sector)) {
    6266:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
    626a:	428b      	cmp	r3, r1
    626c:	d106      	bne.n	627c <ExFatFile::write(void const*, unsigned int)+0x210>
    m_status = 0;
    626e:	2300      	movs	r3, #0
    6270:	f880 3210 	strb.w	r3, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    6274:	f04f 33ff 	mov.w	r3, #4294967295
    6278:	f8c0 321c 	str.w	r3, [r0, #540]	; 0x21c
    return m_blockDev->writeSector(sector, src);
    627c:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    6280:	4632      	mov	r2, r6
    6282:	6803      	ldr	r3, [r0, #0]
    6284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6286:	4798      	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    6288:	2800      	cmp	r0, #0
    628a:	d099      	beq.n	61c0 <ExFatFile::write(void const*, unsigned int)+0x154>
    628c:	f44f 7300 	mov.w	r3, #512	; 0x200
      n = m_vol->bytesPerSector();
    6290:	4698      	mov	r8, r3
    6292:	e762      	b.n	615a <ExFatFile::write(void const*, unsigned int)+0xee>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6294:	f104 0218 	add.w	r2, r4, #24
    6298:	f000 fd80 	bl	6d9c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    629c:	2800      	cmp	r0, #0
    629e:	db8f      	blt.n	61c0 <ExFatFile::write(void const*, unsigned int)+0x154>
        if (fg == 0) {
    62a0:	d104      	bne.n	62ac <ExFatFile::write(void const*, unsigned int)+0x240>
          if (!addCluster()) {
    62a2:	4620      	mov	r0, r4
    62a4:	f7ff face 	bl	5844 <ExFatFile::addCluster()>
    62a8:	2800      	cmp	r0, #0
    62aa:	d089      	beq.n	61c0 <ExFatFile::write(void const*, unsigned int)+0x154>
    sector = m_vol->clusterStartSector(m_curCluster) +
    62ac:	69a1      	ldr	r1, [r4, #24]
    62ae:	6a20      	ldr	r0, [r4, #32]
    62b0:	e724      	b.n	60fc <ExFatFile::write(void const*, unsigned int)+0x90>
          if (!addCluster()) {
    62b2:	4620      	mov	r0, r4
    62b4:	f7ff fac6 	bl	5844 <ExFatFile::addCluster()>
    62b8:	2800      	cmp	r0, #0
    62ba:	d081      	beq.n	61c0 <ExFatFile::write(void const*, unsigned int)+0x154>
          m_firstCluster = m_curCluster;
    62bc:	69a1      	ldr	r1, [r4, #24]
    sector = m_vol->clusterStartSector(m_curCluster) +
    62be:	6a20      	ldr	r0, [r4, #32]
          m_firstCluster = m_curCluster;
    62c0:	61e1      	str	r1, [r4, #28]
    62c2:	e71b      	b.n	60fc <ExFatFile::write(void const*, unsigned int)+0x90>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    62c4:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    62c8:	4648      	mov	r0, r9
    m_dataLength = m_curPosition;
    62ca:	e9c4 3202 	strd	r3, r2, [r4, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    62ce:	f061 037f 	orn	r3, r1, #127	; 0x7f
    62d2:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    62d6:	b003      	add	sp, #12
    62d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    62dc:	4648      	mov	r0, r9
    62de:	e776      	b.n	61ce <ExFatFile::write(void const*, unsigned int)+0x162>
  if (m_curPosition > m_dataLength) {
    62e0:	e9d4 3200 	ldrd	r3, r2, [r4]
    62e4:	e752      	b.n	618c <ExFatFile::write(void const*, unsigned int)+0x120>
    62e6:	bf00      	nop
    62e8:	2005e024 	.word	0x2005e024

000062ec <Print::write(char const*) [clone .isra.0]>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    62ec:	b169      	cbz	r1, 630a <Print::write(char const*) [clone .isra.0]+0x1e>
    62ee:	b570      	push	{r4, r5, r6, lr}
    62f0:	4605      	mov	r5, r0
							  return write((const uint8_t *)str, strlen(str)); }
    62f2:	4608      	mov	r0, r1
    62f4:	460c      	mov	r4, r1
    62f6:	f00b fb03 	bl	11900 <strlen>
    62fa:	682b      	ldr	r3, [r5, #0]
    62fc:	4602      	mov	r2, r0
    62fe:	4621      	mov	r1, r4
    6300:	4628      	mov	r0, r5
    6302:	685b      	ldr	r3, [r3, #4]
    6304:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6308:	4718      	bx	r3
    630a:	4770      	bx	lr

0000630c <ExFatFormatter::syncUpcase()>:
  writeMsg(pr, "Format failed\r\n");
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFormatter::syncUpcase() {
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    630c:	6883      	ldr	r3, [r0, #8]
    630e:	f3c3 0308 	ubfx	r3, r3, #0, #9
  if (!index) {
    6312:	b183      	cbz	r3, 6336 <ExFatFormatter::syncUpcase()+0x2a>
    return true;
  }
  for (size_t i = index; i < BYTES_PER_SECTOR; i++) {
    m_secBuf[i] = 0;
    6314:	2100      	movs	r1, #0
bool ExFatFormatter::syncUpcase() {
    6316:	b410      	push	{r4}
    m_secBuf[i] = 0;
    6318:	6902      	ldr	r2, [r0, #16]
    631a:	54d1      	strb	r1, [r2, r3]
  for (size_t i = index; i < BYTES_PER_SECTOR; i++) {
    631c:	3301      	adds	r3, #1
    631e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    6322:	d1f9      	bne.n	6318 <ExFatFormatter::syncUpcase()+0xc>
  }
  return m_dev->writeSector(m_upcaseSector, m_secBuf);
    6324:	6801      	ldr	r1, [r0, #0]
    6326:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
    632a:	681c      	ldr	r4, [r3, #0]
    632c:	4618      	mov	r0, r3
    632e:	6a63      	ldr	r3, [r4, #36]	; 0x24
}
    6330:	f85d 4b04 	ldr.w	r4, [sp], #4
  return m_dev->writeSector(m_upcaseSector, m_secBuf);
    6334:	4718      	bx	r3
}
    6336:	2001      	movs	r0, #1
    6338:	4770      	bx	lr
    633a:	bf00      	nop

0000633c <ExFatFormatter::writeUpcaseByte(unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    633c:	6882      	ldr	r2, [r0, #8]
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
    633e:	4603      	mov	r3, r0
  m_secBuf[index] = b;
    6340:	6900      	ldr	r0, [r0, #16]
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    6342:	f240 1cff 	movw	ip, #511	; 0x1ff
    6346:	f3c2 0208 	ubfx	r2, r2, #0, #9
  m_secBuf[index] = b;
    634a:	5481      	strb	r1, [r0, r2]
  m_upcaseChecksum = exFatChecksum(m_upcaseChecksum, b);
  m_upcaseSize++;
  if (index == SECTOR_MASK) {
    634c:	4562      	cmp	r2, ip
  uint8_t  mustBeZero2[2];
  uint8_t  unicode3[4];
} DirLfn_t;
//=============================================================================
inline uint32_t exFatChecksum(uint32_t sum, uint8_t data) {
  return (sum << 31) + (sum >> 1) + data;
    634e:	6858      	ldr	r0, [r3, #4]
    6350:	eb01 0170 	add.w	r1, r1, r0, ror #1
  m_upcaseSize++;
    6354:	6898      	ldr	r0, [r3, #8]
    6356:	f100 0001 	add.w	r0, r0, #1
    635a:	e9c3 1001 	strd	r1, r0, [r3, #4]
  if (index == SECTOR_MASK) {
    635e:	d001      	beq.n	6364 <ExFatFormatter::writeUpcaseByte(unsigned char)+0x28>
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
  }
  return true;
}
    6360:	2001      	movs	r0, #1
    6362:	4770      	bx	lr
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    6364:	68d8      	ldr	r0, [r3, #12]
    6366:	6819      	ldr	r1, [r3, #0]
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
    6368:	b410      	push	{r4}
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    636a:	6804      	ldr	r4, [r0, #0]
    636c:	1c4a      	adds	r2, r1, #1
    636e:	6a64      	ldr	r4, [r4, #36]	; 0x24
    6370:	601a      	str	r2, [r3, #0]
    6372:	691a      	ldr	r2, [r3, #16]
    6374:	4623      	mov	r3, r4
}
    6376:	f85d 4b04 	ldr.w	r4, [sp], #4
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    637a:	4718      	bx	r3

0000637c <ExFatFormatter::writeUpcaseUnicode(unsigned short)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
    637c:	b538      	push	{r3, r4, r5, lr}
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    637e:	6883      	ldr	r3, [r0, #8]
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    6380:	b2ca      	uxtb	r2, r1
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
    6382:	460d      	mov	r5, r1
  m_secBuf[index] = b;
    6384:	6901      	ldr	r1, [r0, #16]
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    6386:	f3c3 0308 	ubfx	r3, r3, #0, #9
    638a:	f240 1cff 	movw	ip, #511	; 0x1ff
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
    638e:	4604      	mov	r4, r0
  m_secBuf[index] = b;
    6390:	54ca      	strb	r2, [r1, r3]
  if (index == SECTOR_MASK) {
    6392:	4563      	cmp	r3, ip
    6394:	6841      	ldr	r1, [r0, #4]
    6396:	eb02 0271 	add.w	r2, r2, r1, ror #1
  m_upcaseChecksum = exFatChecksum(m_upcaseChecksum, b);
    639a:	6042      	str	r2, [r0, #4]
  m_upcaseSize++;
    639c:	6882      	ldr	r2, [r0, #8]
    639e:	f102 0201 	add.w	r2, r2, #1
    63a2:	6082      	str	r2, [r0, #8]
  if (index == SECTOR_MASK) {
    63a4:	d005      	beq.n	63b2 <ExFatFormatter::writeUpcaseUnicode(unsigned short)+0x36>
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    63a6:	0a29      	lsrs	r1, r5, #8
    63a8:	4620      	mov	r0, r4
}
    63aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    63ae:	f7ff bfc5 	b.w	633c <ExFatFormatter::writeUpcaseByte(unsigned char)>
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    63b2:	6801      	ldr	r1, [r0, #0]
    63b4:	68c0      	ldr	r0, [r0, #12]
    63b6:	1c4a      	adds	r2, r1, #1
    63b8:	6803      	ldr	r3, [r0, #0]
    63ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    63bc:	6022      	str	r2, [r4, #0]
    63be:	6922      	ldr	r2, [r4, #16]
    63c0:	4798      	blx	r3
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    63c2:	2800      	cmp	r0, #0
    63c4:	d1ef      	bne.n	63a6 <ExFatFormatter::writeUpcaseUnicode(unsigned short)+0x2a>
}
    63c6:	bd38      	pop	{r3, r4, r5, pc}

000063c8 <ExFatFormatter::writeUpcase(unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcase(uint32_t sector) {
    63c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t n;
  uint32_t ns;
  uint32_t ch = 0;
  uint16_t uc;

  m_upcaseSize = 0;
    63ca:	2300      	movs	r3, #0
bool ExFatFormatter::writeUpcase(uint32_t sector) {
    63cc:	4606      	mov	r6, r0
  m_upcaseChecksum = 0;
  m_upcaseSector = sector;
    63ce:	6001      	str	r1, [r0, #0]
  uint32_t ch = 0;
    63d0:	461d      	mov	r5, r3
  m_upcaseChecksum = 0;
    63d2:	e9c0 3301 	strd	r3, r3, [r0, #4]

  while (ch < 0X10000) {
    uc = toUpcase(ch);
    63d6:	b2a8      	uxth	r0, r5
    63d8:	f005 fe94 	bl	c104 <toUpcase(unsigned short)>
    if (uc != ch) {
    63dc:	42a8      	cmp	r0, r5
    uc = toUpcase(ch);
    63de:	4604      	mov	r4, r0
    if (uc != ch) {
    63e0:	d007      	beq.n	63f2 <ExFatFormatter::writeUpcase(unsigned long)+0x2a>
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    63e2:	b2c1      	uxtb	r1, r0
    63e4:	4630      	mov	r0, r6
    63e6:	f7ff ffa9 	bl	633c <ExFatFormatter::writeUpcaseByte(unsigned char)>
    63ea:	2800      	cmp	r0, #0
    63ec:	d13b      	bne.n	6466 <ExFatFormatter::writeUpcase(unsigned long)+0x9e>
  }
  return true;

 fail:
  return false;
}
    63ee:	2000      	movs	r0, #0
    63f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      for (n = ch + 1; n < 0X10000 && n == toUpcase(n); n++) {}
    63f2:	1c6c      	adds	r4, r5, #1
    63f4:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    63f8:	d104      	bne.n	6404 <ExFatFormatter::writeUpcase(unsigned long)+0x3c>
    63fa:	e02a      	b.n	6452 <ExFatFormatter::writeUpcase(unsigned long)+0x8a>
    63fc:	3401      	adds	r4, #1
    63fe:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    6402:	d004      	beq.n	640e <ExFatFormatter::writeUpcase(unsigned long)+0x46>
    6404:	b2a0      	uxth	r0, r4
    6406:	f005 fe7d 	bl	c104 <toUpcase(unsigned short)>
    640a:	42a0      	cmp	r0, r4
    640c:	d0f6      	beq.n	63fc <ExFatFormatter::writeUpcase(unsigned long)+0x34>
      ns = n - ch;
    640e:	1b67      	subs	r7, r4, r5
      if (ns >= MINIMUM_UPCASE_SKIP) {
    6410:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    6414:	d31d      	bcc.n	6452 <ExFatFormatter::writeUpcase(unsigned long)+0x8a>
        if (!writeUpcaseUnicode(0XFFFF) || !writeUpcaseUnicode(ns)) {
    6416:	f64f 71ff 	movw	r1, #65535	; 0xffff
    641a:	4630      	mov	r0, r6
    641c:	f7ff ffae 	bl	637c <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    6420:	2800      	cmp	r0, #0
    6422:	d0e4      	beq.n	63ee <ExFatFormatter::writeUpcase(unsigned long)+0x26>
    6424:	b2b9      	uxth	r1, r7
    6426:	4630      	mov	r0, r6
    6428:	f7ff ffa8 	bl	637c <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    642c:	2800      	cmp	r0, #0
    642e:	d0de      	beq.n	63ee <ExFatFormatter::writeUpcase(unsigned long)+0x26>
    6430:	4625      	mov	r5, r4
  while (ch < 0X10000) {
    6432:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
    6436:	d1ce      	bne.n	63d6 <ExFatFormatter::writeUpcase(unsigned long)+0xe>
  if (!syncUpcase()) {
    6438:	4630      	mov	r0, r6
}
    643a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  if (!syncUpcase()) {
    643e:	f7ff bf65 	b.w	630c <ExFatFormatter::syncUpcase()>
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    6442:	f3c5 2107 	ubfx	r1, r5, #8, #8
    6446:	4630      	mov	r0, r6
    6448:	3501      	adds	r5, #1
    644a:	f7ff ff77 	bl	633c <ExFatFormatter::writeUpcaseByte(unsigned char)>
    644e:	2800      	cmp	r0, #0
    6450:	d0cd      	beq.n	63ee <ExFatFormatter::writeUpcase(unsigned long)+0x26>
        while (ch < n) {
    6452:	42a5      	cmp	r5, r4
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    6454:	b2e9      	uxtb	r1, r5
    6456:	4630      	mov	r0, r6
        while (ch < n) {
    6458:	d2eb      	bcs.n	6432 <ExFatFormatter::writeUpcase(unsigned long)+0x6a>
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    645a:	f7ff ff6f 	bl	633c <ExFatFormatter::writeUpcaseByte(unsigned char)>
    645e:	2800      	cmp	r0, #0
    6460:	d1ef      	bne.n	6442 <ExFatFormatter::writeUpcase(unsigned long)+0x7a>
}
    6462:	2000      	movs	r0, #0
    6464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    6466:	f3c4 2107 	ubfx	r1, r4, #8, #8
    646a:	4630      	mov	r0, r6
    646c:	f7ff ff66 	bl	633c <ExFatFormatter::writeUpcaseByte(unsigned char)>
    6470:	2800      	cmp	r0, #0
    6472:	d0bc      	beq.n	63ee <ExFatFormatter::writeUpcase(unsigned long)+0x26>
      ch++;
    6474:	3501      	adds	r5, #1
    6476:	e7dc      	b.n	6432 <ExFatFormatter::writeUpcase(unsigned long)+0x6a>

00006478 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>:
bool ExFatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    6478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    647c:	461f      	mov	r7, r3
    647e:	b089      	sub	sp, #36	; 0x24
  sectorCount = dev->sectorCount();
    6480:	680b      	ldr	r3, [r1, #0]
bool ExFatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    6482:	460d      	mov	r5, r1
    6484:	9004      	str	r0, [sp, #16]
    6486:	4614      	mov	r4, r2
  m_dev = dev;
    6488:	60c1      	str	r1, [r0, #12]
  m_secBuf = secBuf;
    648a:	6102      	str	r2, [r0, #16]
  sectorCount = dev->sectorCount();
    648c:	4608      	mov	r0, r1
    648e:	69db      	ldr	r3, [r3, #28]
    6490:	4798      	blx	r3
  if (sectorCount < 0X100000) {
    6492:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
  sectorCount = dev->sectorCount();
    6496:	9000      	str	r0, [sp, #0]
  if (sectorCount < 0X100000) {
    6498:	f0c0 80d8 	bcc.w	664c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1d4>
  for (m = 1, vs = 0; m && sectorCount > m; m <<= 1, vs++) {}
    649c:	2300      	movs	r3, #0
    649e:	2201      	movs	r2, #1
    64a0:	9e00      	ldr	r6, [sp, #0]
    64a2:	3301      	adds	r3, #1
    64a4:	0052      	lsls	r2, r2, #1
    64a6:	b2db      	uxtb	r3, r3
    64a8:	d001      	beq.n	64ae <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x36>
    64aa:	4296      	cmp	r6, r2
    64ac:	d8f9      	bhi.n	64a2 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x2a>
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
    64ae:	2b1c      	cmp	r3, #28
    64b0:	9600      	str	r6, [sp, #0]
    64b2:	f240 80b7 	bls.w	6624 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1ac>
    64b6:	f1a3 080b 	sub.w	r8, r3, #11
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    64ba:	2201      	movs	r2, #1
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
    64bc:	fa48 f102 	asr.w	r1, r8, r2
    64c0:	f3c8 0847 	ubfx	r8, r8, #1, #8
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    64c4:	408a      	lsls	r2, r1
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
    64c6:	9102      	str	r1, [sp, #8]
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    64c8:	9207      	str	r2, [sp, #28]
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    64ca:	3301      	adds	r3, #1
    64cc:	2201      	movs	r2, #1
    64ce:	105b      	asrs	r3, r3, #1
    64d0:	409a      	lsls	r2, r3
    64d2:	9206      	str	r2, [sp, #24]
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
    64d4:	2204      	movs	r2, #4
    64d6:	409a      	lsls	r2, r3
    64d8:	9203      	str	r2, [sp, #12]
  partitionOffset = 2*fatLength;
    64da:	2202      	movs	r2, #2
    64dc:	fa02 f303 	lsl.w	r3, r2, r3
    64e0:	9301      	str	r3, [sp, #4]
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
    64e2:	9a00      	ldr	r2, [sp, #0]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    64e4:	2100      	movs	r1, #0
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
    64e6:	9b03      	ldr	r3, [sp, #12]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    64e8:	4620      	mov	r0, r4
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
    64ea:	9e02      	ldr	r6, [sp, #8]
  mbr->part->beginCHS[0] = 1;
    64ec:	f04f 0a01 	mov.w	sl, #1
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
    64f0:	1ad3      	subs	r3, r2, r3
  memset(secBuf, 0, BYTES_PER_SECTOR);
    64f2:	f44f 7200 	mov.w	r2, #512	; 0x200
  *reinterpret_cast<uint16_t*>(dst) = src;
    64f6:	f64a 2b55 	movw	fp, #43605	; 0xaa55
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
    64fa:	40f3      	lsrs	r3, r6
  volumeLength = clusterHeapOffset + (clusterCount << sectorsPerClusterShift);
    64fc:	fa03 f906 	lsl.w	r9, r3, r6
    6500:	9305      	str	r3, [sp, #20]
    6502:	9e01      	ldr	r6, [sp, #4]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    6504:	f00a fd56 	bl	10fb4 <memset>
  mbr->part->endCHS[1] = 0XFF;
    6508:	23ff      	movs	r3, #255	; 0xff
  mbr->part->beginCHS[0] = 1;
    650a:	f884 a1bf 	strb.w	sl, [r4, #447]	; 0x1bf
  mbr->part->beginCHS[1] = 1;
    650e:	f884 a1c0 	strb.w	sl, [r4, #448]	; 0x1c0
  volumeLength = clusterHeapOffset + (clusterCount << sectorsPerClusterShift);
    6512:	44b1      	add	r9, r6
  mbr->part->endCHS[1] = 0XFF;
    6514:	f884 31c4 	strb.w	r3, [r4, #452]	; 0x1c4
  if (!dev->writeSector(0, secBuf)) {
    6518:	4622      	mov	r2, r4
  mbr->part->endCHS[2] = 0XFF;
    651a:	f884 31c5 	strb.w	r3, [r4, #453]	; 0x1c5
  mbr->part->type = 7;
    651e:	2307      	movs	r3, #7
  if (!dev->writeSector(0, secBuf)) {
    6520:	2100      	movs	r1, #0
    6522:	4628      	mov	r0, r5
  mbr->part->type = 7;
    6524:	f884 31c2 	strb.w	r3, [r4, #450]	; 0x1c2
  mbr->part->endCHS[0] = 0XFE;
    6528:	23fe      	movs	r3, #254	; 0xfe
  *reinterpret_cast<uint32_t*>(dst) = src;
    652a:	f8c4 61c6 	str.w	r6, [r4, #454]	; 0x1c6
    652e:	f884 31c3 	strb.w	r3, [r4, #451]	; 0x1c3
  if (!dev->writeSector(0, secBuf)) {
    6532:	682b      	ldr	r3, [r5, #0]
    6534:	f8c4 91ca 	str.w	r9, [r4, #458]	; 0x1ca
    6538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  *reinterpret_cast<uint16_t*>(dst) = src;
    653a:	f8a4 b1fe 	strh.w	fp, [r4, #510]	; 0x1fe
    653e:	4798      	blx	r3
    6540:	2800      	cmp	r0, #0
    6542:	d063      	beq.n	660c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    6544:	f44f 7200 	mov.w	r2, #512	; 0x200
    6548:	2100      	movs	r1, #0
    654a:	4620      	mov	r0, r4
    654c:	f00a fd32 	bl	10fb4 <memset>
  *reinterpret_cast<uint32_t*>(dst) = src;
    6550:	9b00      	ldr	r3, [sp, #0]
  pbs->bpb.sectorsPerClusterShift = sectorsPerClusterShift;
    6552:	f884 806d 	strb.w	r8, [r4, #109]	; 0x6d
  for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    6556:	f04f 0800 	mov.w	r8, #0
    655a:	6663      	str	r3, [r4, #100]	; 0x64
    pbs->bootCode[i] = 0XF4;
    655c:	21f4      	movs	r1, #244	; 0xf4
    655e:	9b05      	ldr	r3, [sp, #20]
    6560:	f104 0078 	add.w	r0, r4, #120	; 0x78
    6564:	9a06      	ldr	r2, [sp, #24]
    6566:	65e3      	str	r3, [r4, #92]	; 0x5c
  pbs->oemName[5] = ' ';
    6568:	2320      	movs	r3, #32
  setLe64(pbs->bpb.partitionOffset, partitionOffset);
    656a:	6426      	str	r6, [r4, #64]	; 0x40
  pbs->oemName[5] = ' ';
    656c:	7223      	strb	r3, [r4, #8]
  pbs->oemName[6] = ' ';
    656e:	7263      	strb	r3, [r4, #9]
  pbs->oemName[7] = ' ';
    6570:	72a3      	strb	r3, [r4, #10]
  pbs->jmpInstruction[0] = 0XEB;
    6572:	23eb      	movs	r3, #235	; 0xeb
    6574:	65a6      	str	r6, [r4, #88]	; 0x58
  uint32_t checksum = 0;
    6576:	4646      	mov	r6, r8
  pbs->jmpInstruction[0] = 0XEB;
    6578:	7023      	strb	r3, [r4, #0]
  pbs->jmpInstruction[1] = 0X76;
    657a:	2376      	movs	r3, #118	; 0x76
  setLe64(pbs->bpb.volumeLength, volumeLength);
    657c:	f8c4 9048 	str.w	r9, [r4, #72]	; 0x48
  pbs->jmpInstruction[1] = 0X76;
    6580:	7063      	strb	r3, [r4, #1]
  pbs->jmpInstruction[2] = 0X90;
    6582:	2390      	movs	r3, #144	; 0x90
  pbs->bpb.numberOfFats = 1;
    6584:	f884 a06e 	strb.w	sl, [r4, #110]	; 0x6e
  pbs->jmpInstruction[2] = 0X90;
    6588:	70a3      	strb	r3, [r4, #2]
  pbs->oemName[0] = 'E';
    658a:	2345      	movs	r3, #69	; 0x45
    658c:	70e3      	strb	r3, [r4, #3]
  pbs->oemName[1] = 'X';
    658e:	2358      	movs	r3, #88	; 0x58
    6590:	7123      	strb	r3, [r4, #4]
  pbs->oemName[2] = 'F';
    6592:	2346      	movs	r3, #70	; 0x46
    6594:	7163      	strb	r3, [r4, #5]
  pbs->oemName[3] = 'A';
    6596:	2341      	movs	r3, #65	; 0x41
    6598:	71a3      	strb	r3, [r4, #6]
  pbs->oemName[4] = 'T';
    659a:	2354      	movs	r3, #84	; 0x54
    659c:	71e3      	strb	r3, [r4, #7]
    659e:	2304      	movs	r3, #4
    65a0:	6623      	str	r3, [r4, #96]	; 0x60
  *reinterpret_cast<uint16_t*>(dst) = src;
    65a2:	f44f 7380 	mov.w	r3, #256	; 0x100
    65a6:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  pbs->bpb.bytesPerSectorShift = BYTES_PER_SECTOR_SHIFT;
    65aa:	2309      	movs	r3, #9
    65ac:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
  pbs->bpb.driveSelect = 0X80;
    65b0:	2380      	movs	r3, #128	; 0x80
  *reinterpret_cast<uint32_t*>(dst) = src;
    65b2:	e9c4 2214 	strd	r2, r2, [r4, #80]	; 0x50
    65b6:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
    pbs->bootCode[i] = 0XF4;
    65ba:	f44f 72c3 	mov.w	r2, #390	; 0x186
    65be:	f00a fcf9 	bl	10fb4 <memset>
  *reinterpret_cast<uint16_t*>(dst) = src;
    65c2:	f8a4 b1fe 	strh.w	fp, [r4, #510]	; 0x1fe
    if (i == offsetof(ExFatPbs_t, bpb.volumeFlags[0]) ||
    65c6:	f1a8 036a 	sub.w	r3, r8, #106	; 0x6a
    65ca:	2b01      	cmp	r3, #1
    65cc:	d906      	bls.n	65dc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x164>
    65ce:	f1b8 0f70 	cmp.w	r8, #112	; 0x70
    65d2:	d003      	beq.n	65dc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x164>
  return (sum << 31) + (sum >> 1) + data;
    65d4:	f814 3008 	ldrb.w	r3, [r4, r8]
    65d8:	eb03 0676 	add.w	r6, r3, r6, ror #1
  for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    65dc:	f108 0801 	add.w	r8, r8, #1
    65e0:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
    65e4:	d1ef      	bne.n	65c6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x14e>
  if (!dev->writeSector(sector, secBuf)  ||
    65e6:	682b      	ldr	r3, [r5, #0]
    65e8:	4622      	mov	r2, r4
    65ea:	f8dd 9004 	ldr.w	r9, [sp, #4]
    65ee:	4628      	mov	r0, r5
    65f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    65f2:	4649      	mov	r1, r9
    65f4:	4798      	blx	r3
    65f6:	b148      	cbz	r0, 660c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
      !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    65f8:	682b      	ldr	r3, [r5, #0]
    65fa:	4649      	mov	r1, r9
    65fc:	4622      	mov	r2, r4
    65fe:	4628      	mov	r0, r5
    6600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6602:	310c      	adds	r1, #12
    6604:	f8cd 9004 	str.w	r9, [sp, #4]
    6608:	4798      	blx	r3
  if (!dev->writeSector(sector, secBuf)  ||
    660a:	bb40      	cbnz	r0, 665e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1e6>
  writeMsg(pr, "Format failed\r\n");
    660c:	b12f      	cbz	r7, 661a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a2>
    660e:	683b      	ldr	r3, [r7, #0]
    6610:	220f      	movs	r2, #15
    6612:	49b8      	ldr	r1, [pc, #736]	; (68f4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x47c>)
    6614:	4638      	mov	r0, r7
    6616:	685b      	ldr	r3, [r3, #4]
    6618:	4798      	blx	r3
  return false;
    661a:	2600      	movs	r6, #0
}
    661c:	4630      	mov	r0, r6
    661e:	b009      	add	sp, #36	; 0x24
    6620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    6624:	2b1a      	cmp	r3, #26
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
    6626:	f04f 0808 	mov.w	r8, #8
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    662a:	f200 81a6 	bhi.w	697a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x502>
    662e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    6632:	f8cd 8008 	str.w	r8, [sp, #8]
    6636:	9301      	str	r3, [sp, #4]
    6638:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    663c:	9303      	str	r3, [sp, #12]
    663e:	f44f 7380 	mov.w	r3, #256	; 0x100
    6642:	9307      	str	r3, [sp, #28]
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    6644:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    6648:	9306      	str	r3, [sp, #24]
    664a:	e74a      	b.n	64e2 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6a>
    writeMsg(pr, "Device is too small\r\n");
    664c:	2f00      	cmp	r7, #0
    664e:	d0e4      	beq.n	661a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a2>
    6650:	683b      	ldr	r3, [r7, #0]
    6652:	2215      	movs	r2, #21
    6654:	49a8      	ldr	r1, [pc, #672]	; (68f8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x480>)
    6656:	4638      	mov	r0, r7
    6658:	685b      	ldr	r3, [r3, #4]
    665a:	4798      	blx	r3
  writeMsg(pr, "Format failed\r\n");
    665c:	e7d7      	b.n	660e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x196>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    665e:	4642      	mov	r2, r8
    6660:	2100      	movs	r1, #0
    6662:	4620      	mov	r0, r4
  sector++;
    6664:	f109 0a01 	add.w	sl, r9, #1
  memset(secBuf, 0, BYTES_PER_SECTOR);
    6668:	f00a fca4 	bl	10fb4 <memset>
  *reinterpret_cast<uint16_t*>(dst) = src;
    666c:	f64a 2355 	movw	r3, #43605	; 0xaa55
    6670:	f109 0209 	add.w	r2, r9, #9
    6674:	f204 19ff 	addw	r9, r4, #511	; 0x1ff
    6678:	f8a4 31fe 	strh.w	r3, [r4, #510]	; 0x1fe
    667c:	2300      	movs	r3, #0
    667e:	4693      	mov	fp, r2
  uint32_t checksum = 0;
    6680:	46a0      	mov	r8, r4
    6682:	e001      	b.n	6688 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x210>
      checksum = exFatChecksum(checksum, secBuf[i]);
    6684:	f818 3f01 	ldrb.w	r3, [r8, #1]!
    for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    6688:	45c1      	cmp	r9, r8
  return (sum << 31) + (sum >> 1) + data;
    668a:	eb03 0676 	add.w	r6, r3, r6, ror #1
    668e:	d1f9      	bne.n	6684 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x20c>
    if (!dev->writeSector(sector, secBuf)  ||
    6690:	682b      	ldr	r3, [r5, #0]
    6692:	4622      	mov	r2, r4
    6694:	4651      	mov	r1, sl
    6696:	4628      	mov	r0, r5
    6698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    669a:	4798      	blx	r3
    669c:	2800      	cmp	r0, #0
    669e:	d0b5      	beq.n	660c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
        !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    66a0:	682b      	ldr	r3, [r5, #0]
    66a2:	4622      	mov	r2, r4
    66a4:	f10a 010c 	add.w	r1, sl, #12
    66a8:	4628      	mov	r0, r5
    66aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    66ac:	4798      	blx	r3
    if (!dev->writeSector(sector, secBuf)  ||
    66ae:	2800      	cmp	r0, #0
    66b0:	d0ac      	beq.n	660c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
    sector++;
    66b2:	f10a 0301 	add.w	r3, sl, #1
  for (int j = 0; j < 8; j++) {
    66b6:	459b      	cmp	fp, r3
    66b8:	d002      	beq.n	66c0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x248>
      checksum = exFatChecksum(checksum, secBuf[i]);
    66ba:	469a      	mov	sl, r3
    66bc:	7823      	ldrb	r3, [r4, #0]
    66be:	e7df      	b.n	6680 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x208>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    66c0:	f44f 7200 	mov.w	r2, #512	; 0x200
    66c4:	2100      	movs	r1, #0
    66c6:	4620      	mov	r0, r4
    66c8:	469b      	mov	fp, r3
    66ca:	f00a fc73 	bl	10fb4 <memset>
    66ce:	2200      	movs	r2, #0
    66d0:	f10a 0a03 	add.w	sl, sl, #3
    66d4:	4611      	mov	r1, r2
  *reinterpret_cast<uint16_t*>(dst) = src;
    66d6:	4623      	mov	r3, r4
    66d8:	e001      	b.n	66de <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x266>
      checksum = exFatChecksum(checksum, secBuf[i]);
    66da:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    66de:	4598      	cmp	r8, r3
  return (sum << 31) + (sum >> 1) + data;
    66e0:	eb01 0676 	add.w	r6, r1, r6, ror #1
    66e4:	d1f9      	bne.n	66da <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x262>
    if (!dev->writeSector(sector, secBuf)  ||
    66e6:	682b      	ldr	r3, [r5, #0]
    66e8:	4622      	mov	r2, r4
    66ea:	4659      	mov	r1, fp
    66ec:	4628      	mov	r0, r5
    66ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    66f0:	4798      	blx	r3
    66f2:	2800      	cmp	r0, #0
    66f4:	d08a      	beq.n	660c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
        !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    66f6:	682b      	ldr	r3, [r5, #0]
    66f8:	4622      	mov	r2, r4
    66fa:	f10b 010c 	add.w	r1, fp, #12
    66fe:	4628      	mov	r0, r5
    6700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6702:	4798      	blx	r3
    if (!dev->writeSector(sector, secBuf)  ||
    6704:	2800      	cmp	r0, #0
    6706:	d081      	beq.n	660c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
    sector++;
    6708:	f10b 0101 	add.w	r1, fp, #1
  for (int j = 0; j < 2; j++) {
    670c:	458a      	cmp	sl, r1
    670e:	d16a      	bne.n	67e6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x36e>
    6710:	1f23      	subs	r3, r4, #4
    6712:	f504 72fe 	add.w	r2, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    6716:	f843 6f04 	str.w	r6, [r3, #4]!
  for (size_t i = 0; i < BYTES_PER_SECTOR; i += 4) {
    671a:	429a      	cmp	r2, r3
    671c:	d1fb      	bne.n	6716 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x29e>
  if (!dev->writeSector(sector, secBuf)  ||
    671e:	682b      	ldr	r3, [r5, #0]
    6720:	4622      	mov	r2, r4
    6722:	4628      	mov	r0, r5
    6724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6726:	4798      	blx	r3
    6728:	2800      	cmp	r0, #0
    672a:	f43f af6f 	beq.w	660c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
      !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    672e:	682b      	ldr	r3, [r5, #0]
    6730:	f10b 010d 	add.w	r1, fp, #13
    6734:	4622      	mov	r2, r4
    6736:	4628      	mov	r0, r5
    6738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    673a:	4798      	blx	r3
  if (!dev->writeSector(sector, secBuf)  ||
    673c:	2800      	cmp	r0, #0
    673e:	f43f af65 	beq.w	660c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
  writeMsg(pr, "Writing FAT ");
    6742:	b12f      	cbz	r7, 6750 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x2d8>
    6744:	683b      	ldr	r3, [r7, #0]
    6746:	220c      	movs	r2, #12
    6748:	496c      	ldr	r1, [pc, #432]	; (68fc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x484>)
    674a:	4638      	mov	r0, r7
    674c:	685b      	ldr	r3, [r3, #4]
    674e:	4798      	blx	r3
  sector = partitionOffset + fatOffset;
    6750:	9a06      	ldr	r2, [sp, #24]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    6752:	2100      	movs	r1, #0
  sector = partitionOffset + fatOffset;
    6754:	9b01      	ldr	r3, [sp, #4]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    6756:	4620      	mov	r0, r4
  for (uint32_t i = 0; i < ns; i++) {
    6758:	2600      	movs	r6, #0
  sector = partitionOffset + fatOffset;
    675a:	4413      	add	r3, r2
  memset(secBuf, 0, BYTES_PER_SECTOR);
    675c:	f44f 7200 	mov.w	r2, #512	; 0x200
  sector = partitionOffset + fatOffset;
    6760:	4699      	mov	r9, r3
  ns = ((clusterCount + 2)*4 + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    6762:	9b05      	ldr	r3, [sp, #20]
    6764:	ea4f 0883 	mov.w	r8, r3, lsl #2
  memset(secBuf, 0, BYTES_PER_SECTOR);
    6768:	f00a fc24 	bl	10fb4 <memset>
  secBuf[0] = 0XF8;
    676c:	4623      	mov	r3, r4
    secBuf[i] = 0XFF;
    676e:	f04f 32ff 	mov.w	r2, #4294967295
  ns = ((clusterCount + 2)*4 + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    6772:	f208 2807 	addw	r8, r8, #519	; 0x207
  secBuf[0] = 0XF8;
    6776:	21f8      	movs	r1, #248	; 0xf8
      writeMsg(pr, ".");
    6778:	f1b7 0b00 	subs.w	fp, r7, #0
  ns = ((clusterCount + 2)*4 + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    677c:	ea4f 2a58 	mov.w	sl, r8, lsr #9
  secBuf[0] = 0XF8;
    6780:	f803 1b01 	strb.w	r1, [r3], #1
    if (i%(ns/32) == 0) {
    6784:	ea4f 3898 	mov.w	r8, r8, lsr #14
    secBuf[i] = 0XFF;
    6788:	f8c4 2001 	str.w	r2, [r4, #1]
      writeMsg(pr, ".");
    678c:	bf18      	it	ne
    678e:	f04f 0b01 	movne.w	fp, #1
    secBuf[i] = 0XFF;
    6792:	60da      	str	r2, [r3, #12]
    6794:	605a      	str	r2, [r3, #4]
    6796:	609a      	str	r2, [r3, #8]
    6798:	f8c3 200f 	str.w	r2, [r3, #15]
    679c:	e002      	b.n	67a4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x32c>
  for (uint32_t i = 0; i < ns; i++) {
    679e:	3601      	adds	r6, #1
    67a0:	45b2      	cmp	sl, r6
    67a2:	d023      	beq.n	67ec <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x374>
    if (i%(ns/32) == 0) {
    67a4:	fbb6 f3f8 	udiv	r3, r6, r8
    67a8:	fb08 6313 	mls	r3, r8, r3, r6
      writeMsg(pr, ".");
    67ac:	b943      	cbnz	r3, 67c0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x348>
    67ae:	f1bb 0f00 	cmp.w	fp, #0
    67b2:	d005      	beq.n	67c0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x348>
    67b4:	683b      	ldr	r3, [r7, #0]
    67b6:	2201      	movs	r2, #1
    67b8:	4951      	ldr	r1, [pc, #324]	; (6900 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x488>)
    67ba:	4638      	mov	r0, r7
    67bc:	685b      	ldr	r3, [r3, #4]
    67be:	4798      	blx	r3
    if (!dev->writeSector(sector + i, secBuf)) {
    67c0:	682b      	ldr	r3, [r5, #0]
    67c2:	eb09 0106 	add.w	r1, r9, r6
    67c6:	4622      	mov	r2, r4
    67c8:	4628      	mov	r0, r5
    67ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    67cc:	4798      	blx	r3
    67ce:	2800      	cmp	r0, #0
    67d0:	f43f af1c 	beq.w	660c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
    if (i == 0) {
    67d4:	2e00      	cmp	r6, #0
    67d6:	d1e2      	bne.n	679e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x326>
      memset(secBuf, 0, BYTES_PER_SECTOR);
    67d8:	4631      	mov	r1, r6
    67da:	f44f 7200 	mov.w	r2, #512	; 0x200
    67de:	4620      	mov	r0, r4
    67e0:	f00a fbe8 	bl	10fb4 <memset>
    67e4:	e7db      	b.n	679e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x326>
      checksum = exFatChecksum(checksum, secBuf[i]);
    67e6:	468b      	mov	fp, r1
    67e8:	7821      	ldrb	r1, [r4, #0]
    67ea:	e774      	b.n	66d6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x25e>
  writeMsg(pr, "\r\n");
    67ec:	2f00      	cmp	r7, #0
    67ee:	d034      	beq.n	685a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3e2>
    67f0:	683b      	ldr	r3, [r7, #0]
    67f2:	2202      	movs	r2, #2
    67f4:	4943      	ldr	r1, [pc, #268]	; (6904 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x48c>)
    67f6:	4638      	mov	r0, r7
    67f8:	685b      	ldr	r3, [r3, #4]
    67fa:	4798      	blx	r3
  bitmapSize = (clusterCount + 7)/8;
    67fc:	9e05      	ldr	r6, [sp, #20]
  if (ns > sectorsPerCluster) {
    67fe:	9a07      	ldr	r2, [sp, #28]
  bitmapSize = (clusterCount + 7)/8;
    6800:	3607      	adds	r6, #7
    6802:	08f6      	lsrs	r6, r6, #3
  ns = (bitmapSize + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    6804:	f206 13ff 	addw	r3, r6, #511	; 0x1ff
  if (ns > sectorsPerCluster) {
    6808:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
  ns = (bitmapSize + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    680c:	ea4f 2953 	mov.w	r9, r3, lsr #9
  if (ns > sectorsPerCluster) {
    6810:	f4ff aefd 	bcc.w	660e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x196>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    6814:	f44f 7200 	mov.w	r2, #512	; 0x200
    6818:	2100      	movs	r1, #0
    681a:	4620      	mov	r0, r4
    681c:	f00a fbca 	bl	10fb4 <memset>
  secBuf[0] = 0X7;
    6820:	2307      	movs	r3, #7
    6822:	7023      	strb	r3, [r4, #0]
  for (uint32_t i = 0; i < ns; i++) {
    6824:	f1b9 0f00 	cmp.w	r9, #0
    6828:	f000 808a 	beq.w	6940 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4c8>
    682c:	f04f 0800 	mov.w	r8, #0
    6830:	e008      	b.n	6844 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3cc>
    if (i == 0) {
    6832:	f1b8 0f00 	cmp.w	r8, #0
    6836:	d101      	bne.n	683c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3c4>
      secBuf[0] = 0;
    6838:	f884 8000 	strb.w	r8, [r4]
  for (uint32_t i = 0; i < ns; i++) {
    683c:	f108 0801 	add.w	r8, r8, #1
    6840:	45c1      	cmp	r9, r8
    6842:	d97b      	bls.n	693c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4c4>
    if (!dev->writeSector(sector + i, secBuf)) {
    6844:	9a03      	ldr	r2, [sp, #12]
    6846:	4628      	mov	r0, r5
    6848:	682b      	ldr	r3, [r5, #0]
    684a:	eb02 0108 	add.w	r1, r2, r8
    684e:	4622      	mov	r2, r4
    6850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6852:	4798      	blx	r3
    6854:	2800      	cmp	r0, #0
    6856:	d1ec      	bne.n	6832 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3ba>
    6858:	e6d8      	b.n	660c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
  bitmapSize = (clusterCount + 7)/8;
    685a:	9e05      	ldr	r6, [sp, #20]
  if (ns > sectorsPerCluster) {
    685c:	9a07      	ldr	r2, [sp, #28]
  bitmapSize = (clusterCount + 7)/8;
    685e:	3607      	adds	r6, #7
    6860:	08f6      	lsrs	r6, r6, #3
  ns = (bitmapSize + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    6862:	f206 13ff 	addw	r3, r6, #511	; 0x1ff
  if (ns > sectorsPerCluster) {
    6866:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
  ns = (bitmapSize + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    686a:	ea4f 2953 	mov.w	r9, r3, lsr #9
  if (ns > sectorsPerCluster) {
    686e:	f4ff aed4 	bcc.w	661a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a2>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    6872:	f44f 7200 	mov.w	r2, #512	; 0x200
    6876:	4639      	mov	r1, r7
    6878:	4620      	mov	r0, r4
    687a:	f00a fb9b 	bl	10fb4 <memset>
  secBuf[0] = 0X7;
    687e:	2307      	movs	r3, #7
    6880:	7023      	strb	r3, [r4, #0]
  for (uint32_t i = 0; i < ns; i++) {
    6882:	f1b9 0f00 	cmp.w	r9, #0
    6886:	d1d1      	bne.n	682c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3b4>
  if (!writeUpcase(partitionOffset + clusterHeapOffset + sectorsPerCluster)) {
    6888:	9b03      	ldr	r3, [sp, #12]
    688a:	9a07      	ldr	r2, [sp, #28]
    688c:	9804      	ldr	r0, [sp, #16]
    688e:	1899      	adds	r1, r3, r2
    6890:	f7ff fd9a 	bl	63c8 <ExFatFormatter::writeUpcase(unsigned long)>
    6894:	2800      	cmp	r0, #0
    6896:	f43f aec0 	beq.w	661a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a2>
  if (m_upcaseSize > BYTES_PER_SECTOR*sectorsPerCluster) {
    689a:	9a02      	ldr	r2, [sp, #8]
    689c:	f44f 7300 	mov.w	r3, #512	; 0x200
    68a0:	4093      	lsls	r3, r2
    68a2:	9a04      	ldr	r2, [sp, #16]
    68a4:	6892      	ldr	r2, [r2, #8]
    68a6:	429a      	cmp	r2, r3
    68a8:	f63f aeb7 	bhi.w	661a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a2>
  sector = partitionOffset + clusterHeapOffset + 2*sectorsPerCluster;
    68ac:	f04f 0802 	mov.w	r8, #2
    68b0:	9b02      	ldr	r3, [sp, #8]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    68b2:	f44f 7200 	mov.w	r2, #512	; 0x200
    68b6:	2100      	movs	r1, #0
  sector = partitionOffset + clusterHeapOffset + 2*sectorsPerCluster;
    68b8:	fa08 f903 	lsl.w	r9, r8, r3
    68bc:	9b03      	ldr	r3, [sp, #12]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    68be:	4620      	mov	r0, r4
  sector = partitionOffset + clusterHeapOffset + 2*sectorsPerCluster;
    68c0:	4499      	add	r9, r3
  memset(secBuf, 0, BYTES_PER_SECTOR);
    68c2:	f00a fb77 	bl	10fb4 <memset>
  dbm->type = EXFAT_TYPE_BITMAP;
    68c6:	2281      	movs	r2, #129	; 0x81
  label->type = EXFAT_TYPE_LABEL & 0X7F;
    68c8:	2303      	movs	r3, #3
  setLe32(dup->checksum, m_upcaseChecksum);
    68ca:	9904      	ldr	r1, [sp, #16]
    68cc:	f109 39ff 	add.w	r9, r9, #4294967295
  dbm->type = EXFAT_TYPE_BITMAP;
    68d0:	f884 2020 	strb.w	r2, [r4, #32]
  dup->type = EXFAT_TYPE_UPCASE;
    68d4:	2282      	movs	r2, #130	; 0x82
  label->type = EXFAT_TYPE_LABEL & 0X7F;
    68d6:	7023      	strb	r3, [r4, #0]
  dup->type = EXFAT_TYPE_UPCASE;
    68d8:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  setLe64(dbm->size, bitmapSize);
    68dc:	e9c4 860d 	strd	r8, r6, [r4, #52]	; 0x34
  setLe32(dup->checksum, m_upcaseChecksum);
    68e0:	684a      	ldr	r2, [r1, #4]
  *reinterpret_cast<uint64_t*>(dst) = src;
    68e2:	f04f 0801 	mov.w	r8, #1
  *reinterpret_cast<uint32_t*>(dst) = src;
    68e6:	6563      	str	r3, [r4, #84]	; 0x54
    68e8:	6462      	str	r2, [r4, #68]	; 0x44
  setLe64(dup->size, m_upcaseSize);
    68ea:	688b      	ldr	r3, [r1, #8]
    68ec:	65a3      	str	r3, [r4, #88]	; 0x58
  setLe64(dbm->size, bitmapSize);
    68ee:	2300      	movs	r3, #0
  setLe64(dup->size, m_upcaseSize);
    68f0:	65e3      	str	r3, [r4, #92]	; 0x5c
  for (uint32_t i = 0; i < ns; i++) {
    68f2:	e00e      	b.n	6912 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x49a>
    68f4:	200031a4 	.word	0x200031a4
    68f8:	20003144 	.word	0x20003144
    68fc:	2000315c 	.word	0x2000315c
    6900:	2000b3d4 	.word	0x2000b3d4
    6904:	20003180 	.word	0x20003180
    6908:	9b07      	ldr	r3, [sp, #28]
    690a:	4598      	cmp	r8, r3
    690c:	d23b      	bcs.n	6986 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x50e>
    690e:	f108 0801 	add.w	r8, r8, #1
    if (!dev->writeSector(sector + i, secBuf)) {
    6912:	682b      	ldr	r3, [r5, #0]
    6914:	eb09 0108 	add.w	r1, r9, r8
    6918:	4622      	mov	r2, r4
    691a:	4628      	mov	r0, r5
    691c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    691e:	4798      	blx	r3
    6920:	4606      	mov	r6, r0
    6922:	2800      	cmp	r0, #0
    6924:	f43f ae72 	beq.w	660c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
    if (i == 0) {
    6928:	f1b8 0f01 	cmp.w	r8, #1
    692c:	d1ec      	bne.n	6908 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x490>
      memset(secBuf, 0, BYTES_PER_SECTOR);
    692e:	f44f 7200 	mov.w	r2, #512	; 0x200
    6932:	2100      	movs	r1, #0
    6934:	4620      	mov	r0, r4
    6936:	f00a fb3d 	bl	10fb4 <memset>
  for (uint32_t i = 0; i < ns; i++) {
    693a:	e7e8      	b.n	690e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x496>
  writeMsg(pr, "Writing upcase table\r\n");
    693c:	2f00      	cmp	r7, #0
    693e:	d0a3      	beq.n	6888 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x410>
    6940:	683b      	ldr	r3, [r7, #0]
    6942:	2216      	movs	r2, #22
    6944:	4914      	ldr	r1, [pc, #80]	; (6998 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x520>)
    6946:	4638      	mov	r0, r7
    6948:	685b      	ldr	r3, [r3, #4]
    694a:	4798      	blx	r3
  if (!writeUpcase(partitionOffset + clusterHeapOffset + sectorsPerCluster)) {
    694c:	9b03      	ldr	r3, [sp, #12]
    694e:	9a07      	ldr	r2, [sp, #28]
    6950:	9804      	ldr	r0, [sp, #16]
    6952:	1899      	adds	r1, r3, r2
    6954:	f7ff fd38 	bl	63c8 <ExFatFormatter::writeUpcase(unsigned long)>
    6958:	2800      	cmp	r0, #0
    695a:	f43f ae58 	beq.w	660e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x196>
  if (m_upcaseSize > BYTES_PER_SECTOR*sectorsPerCluster) {
    695e:	9a02      	ldr	r2, [sp, #8]
    6960:	f44f 7300 	mov.w	r3, #512	; 0x200
    6964:	4093      	lsls	r3, r2
    6966:	9a04      	ldr	r2, [sp, #16]
    6968:	6892      	ldr	r2, [r2, #8]
    696a:	429a      	cmp	r2, r3
    696c:	f63f ae4f 	bhi.w	660e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x196>
  writeMsg(pr, "Writing root\r\n");
    6970:	490a      	ldr	r1, [pc, #40]	; (699c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x524>)
    6972:	4638      	mov	r0, r7
    6974:	f7ff fcba 	bl	62ec <Print::write(char const*) [clone .isra.0]>
    6978:	e798      	b.n	68ac <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x434>
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    697a:	f44f 7280 	mov.w	r2, #256	; 0x100
    697e:	f8cd 8008 	str.w	r8, [sp, #8]
    6982:	9207      	str	r2, [sp, #28]
    6984:	e5a1      	b.n	64ca <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x52>
  writeMsg(pr, "Format done\r\n");
    6986:	2f00      	cmp	r7, #0
    6988:	f43f ae48 	beq.w	661c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a4>
    698c:	4904      	ldr	r1, [pc, #16]	; (69a0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x528>)
    698e:	4638      	mov	r0, r7
    6990:	f7ff fcac 	bl	62ec <Print::write(char const*) [clone .isra.0]>
    6994:	e642      	b.n	661c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a4>
    6996:	bf00      	nop
    6998:	2000316c 	.word	0x2000316c
    699c:	20003184 	.word	0x20003184
    69a0:	20003194 	.word	0x20003194

000069a4 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>:
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
    69a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    69a8:	460c      	mov	r4, r1
    69aa:	4615      	mov	r5, r2
    69ac:	f101 081e 	add.w	r8, r1, #30
    return !ls && next == end;
    69b0:	89ab      	ldrh	r3, [r5, #12]
    uint16_t cp = fname->get16();
    69b2:	4628      	mov	r0, r5
  return *reinterpret_cast<const uint16_t*>(src);
    69b4:	f834 7f02 	ldrh.w	r7, [r4, #2]!
    69b8:	b91b      	cbnz	r3, 69c2 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x1e>
    69ba:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
    69be:	429a      	cmp	r2, r3
    69c0:	d00e      	beq.n	69e0 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x3c>
    69c2:	f005 fa8b 	bl	bedc <FsName::get16()>
    if (toUpcase(cp) != toUpcase(u)) {
    69c6:	f005 fb9d 	bl	c104 <toUpcase(unsigned short)>
    69ca:	4606      	mov	r6, r0
    69cc:	4638      	mov	r0, r7
    69ce:	f005 fb99 	bl	c104 <toUpcase(unsigned short)>
    69d2:	4286      	cmp	r6, r0
    69d4:	d109      	bne.n	69ea <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x46>
  for (uint8_t i = 0; i < 15; i++) {
    69d6:	4544      	cmp	r4, r8
    69d8:	d1ea      	bne.n	69b0 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0xc>
  return true;
    69da:	2001      	movs	r0, #1
}
    69dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return u == 0;
    69e0:	fab7 f087 	clz	r0, r7
    69e4:	0940      	lsrs	r0, r0, #5
}
    69e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       return false;
    69ea:	2000      	movs	r0, #0
}
    69ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000069f0 <ExFatFile::getName8(char*, unsigned int)>:
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName8(char* name, size_t count) {
    69f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char* str = name;
  char* ptr;
  DirName_t* dn;
  uint16_t hs = 0;
  uint32_t cp;
  if (!isOpen()) {
    69f4:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
size_t ExFatFile::getName8(char* name, size_t count) {
    69f8:	b083      	sub	sp, #12
    69fa:	4688      	mov	r8, r1
  if (!isOpen()) {
    69fc:	2b00      	cmp	r3, #0
    69fe:	d04f      	beq.n	6aa0 <ExFatFile::getName8(char*, unsigned int)+0xb0>
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 2; is <= m_setCount; is++) {
    6a00:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
    6a04:	4607      	mov	r7, r0
    6a06:	2b01      	cmp	r3, #1
    6a08:	d953      	bls.n	6ab2 <ExFatFile::getName8(char*, unsigned int)+0xc2>
      } else {
        DBG_FAIL_MACRO;
        goto fail;
      }
      // Save space for zero byte.
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    6a0a:	3a01      	subs	r2, #1
  char* str = name;
    6a0c:	460b      	mov	r3, r1
  for (uint8_t is = 2; is <= m_setCount; is++) {
    6a0e:	f04f 0a02 	mov.w	sl, #2
  uint16_t hs = 0;
    6a12:	2400      	movs	r4, #0
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    6a14:	188e      	adds	r6, r1, r2
   * \param[in] hs high surrogate.
   * \param[in] ls low surrogate.
   * \return code point.
   */
  inline uint32_t u16ToCp(uint16_t hs, uint16_t ls) {
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    6a16:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 6ab8 <ExFatFile::getName8(char*, unsigned int)+0xc8>
         (dirCache(is, FsCache::CACHE_FOR_READ));
    6a1a:	2200      	movs	r2, #0
    6a1c:	4651      	mov	r1, sl
    6a1e:	4638      	mov	r0, r7
    6a20:	9301      	str	r3, [sp, #4]
    6a22:	f7fe faa3 	bl	4f6c <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    6a26:	2800      	cmp	r0, #0
    6a28:	d03a      	beq.n	6aa0 <ExFatFile::getName8(char*, unsigned int)+0xb0>
    6a2a:	7802      	ldrb	r2, [r0, #0]
    6a2c:	2ac1      	cmp	r2, #193	; 0xc1
    6a2e:	d137      	bne.n	6aa0 <ExFatFile::getName8(char*, unsigned int)+0xb0>
    6a30:	4605      	mov	r5, r0
    6a32:	f100 091e 	add.w	r9, r0, #30
    6a36:	9b01      	ldr	r3, [sp, #4]
    6a38:	f835 0f02 	ldrh.w	r0, [r5, #2]!
      if (hs) {
    6a3c:	b324      	cbz	r4, 6a88 <ExFatFile::getName8(char*, unsigned int)+0x98>
    return 0XDC00 <= c && c <= 0XDFFF;
    6a3e:	f500 5210 	add.w	r2, r0, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
    6a42:	b292      	uxth	r2, r2
    6a44:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    6a48:	d22a      	bcs.n	6aa0 <ExFatFile::getName8(char*, unsigned int)+0xb0>
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    6a4a:	ea0b 2484 	and.w	r4, fp, r4, lsl #10
    6a4e:	f3c0 0009 	ubfx	r0, r0, #0, #10
    6a52:	4320      	orrs	r0, r4
    6a54:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    6a58:	4619      	mov	r1, r3
    6a5a:	4632      	mov	r2, r6
    6a5c:	f005 fab4 	bl	bfc8 <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    6a60:	4603      	mov	r3, r0
    6a62:	b1e8      	cbz	r0, 6aa0 <ExFatFile::getName8(char*, unsigned int)+0xb0>
    6a64:	2400      	movs	r4, #0
    for (uint8_t in = 0; in < 15; in++) {
    6a66:	454d      	cmp	r5, r9
    6a68:	d1e6      	bne.n	6a38 <ExFatFile::getName8(char*, unsigned int)+0x48>
  for (uint8_t is = 2; is <= m_setCount; is++) {
    6a6a:	f10a 0a01 	add.w	sl, sl, #1
    6a6e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
    6a72:	fa5f fa8a 	uxtb.w	sl, sl
    6a76:	4552      	cmp	r2, sl
    6a78:	d2cf      	bcs.n	6a1a <ExFatFile::getName8(char*, unsigned int)+0x2a>
      str = ptr;
    }
  }
 done:
  *str = '\0';
  return str - name;
    6a7a:	eba3 0008 	sub.w	r0, r3, r8
    6a7e:	4698      	mov	r8, r3
  *str = '\0';
    6a80:	2300      	movs	r3, #0
    6a82:	f888 3000 	strb.w	r3, [r8]
  return str - name;
    6a86:	e00f      	b.n	6aa8 <ExFatFile::getName8(char*, unsigned int)+0xb8>
    return 0XD800 <= c && c <= 0XDFFF;
    6a88:	f500 5220 	add.w	r2, r0, #10240	; 0x2800
    6a8c:	b292      	uxth	r2, r2
      } else if (!FsUtf::isSurrogate(c)) {
    6a8e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
    6a92:	d302      	bcc.n	6a9a <ExFatFile::getName8(char*, unsigned int)+0xaa>
        if (c == 0) {
    6a94:	2800      	cmp	r0, #0
    6a96:	d1df      	bne.n	6a58 <ExFatFile::getName8(char*, unsigned int)+0x68>
    6a98:	e7ef      	b.n	6a7a <ExFatFile::getName8(char*, unsigned int)+0x8a>
      } else if (FsUtf::isHighSurrogate(c)) {
    6a9a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    6a9e:	d306      	bcc.n	6aae <ExFatFile::getName8(char*, unsigned int)+0xbe>

 fail:
  *name = 0;
    6aa0:	2300      	movs	r3, #0
  return 0;
    6aa2:	4618      	mov	r0, r3
  *name = 0;
    6aa4:	f888 3000 	strb.w	r3, [r8]
}
    6aa8:	b003      	add	sp, #12
    6aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6aae:	4604      	mov	r4, r0
    6ab0:	e7d9      	b.n	6a66 <ExFatFile::getName8(char*, unsigned int)+0x76>
  for (uint8_t is = 2; is <= m_setCount; is++) {
    6ab2:	2000      	movs	r0, #0
    6ab4:	e7e4      	b.n	6a80 <ExFatFile::getName8(char*, unsigned int)+0x90>
    6ab6:	bf00      	nop
    6ab8:	000ffc00 	.word	0x000ffc00

00006abc <ExFatFile::hashName(ExName_t*)>:
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
    6abc:	b570      	push	{r4, r5, r6, lr}
    6abe:	460c      	mov	r4, r1
    ls = 0;  // lowSurrogate
    6ac0:	2300      	movs	r3, #0
  fname->reset();
#if USE_UTF8_LONG_NAMES
  fname->nameLength = 0;
  while (!fname->atEnd()) {
    uint16_t u = fname->get16();
    if (u == 0XFFFF) {
    6ac2:	f64f 75ff 	movw	r5, #65535	; 0xffff
    next = begin;
    6ac6:	6822      	ldr	r2, [r4, #0]
  while (!fname->atEnd()) {
    6ac8:	4619      	mov	r1, r3
  uint16_t hash = 0;
    6aca:	461e      	mov	r6, r3
    ls = 0;  // lowSurrogate
    6acc:	81a3      	strh	r3, [r4, #12]
  fname->nameLength = 0;
    6ace:	6123      	str	r3, [r4, #16]
    next = begin;
    6ad0:	6062      	str	r2, [r4, #4]
  while (!fname->atEnd()) {
    6ad2:	e017      	b.n	6b04 <ExFatFile::hashName(ExName_t*)+0x48>
    uint16_t u = fname->get16();
    6ad4:	f005 fa02 	bl	bedc <FsName::get16()>
    if (u == 0XFFFF) {
    6ad8:	42a8      	cmp	r0, r5
    6ada:	d022      	beq.n	6b22 <ExFatFile::hashName(ExName_t*)+0x66>
  uint16_t c = toUpcase(u);
    6adc:	f005 fb12 	bl	c104 <toUpcase(unsigned short)>
    DBG_FAIL_MACRO;
      goto fail;
    }
    hash = exFatHash(u, hash);
    fname->nameLength++;
    6ae0:	6923      	ldr	r3, [r4, #16]
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    6ae2:	03f2      	lsls	r2, r6, #15
    return !ls && next == end;
    6ae4:	89a1      	ldrh	r1, [r4, #12]
    fname->nameLength++;
    6ae6:	3301      	adds	r3, #1
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    6ae8:	ea42 0256 	orr.w	r2, r2, r6, lsr #1
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    6aec:	0a06      	lsrs	r6, r0, #8
    fname->nameLength++;
    6aee:	6123      	str	r3, [r4, #16]
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    6af0:	fa52 f080 	uxtab	r0, r2, r0
    6af4:	b283      	uxth	r3, r0
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    6af6:	f3c0 004e 	ubfx	r0, r0, #1, #15
    6afa:	ea40 30c3 	orr.w	r0, r0, r3, lsl #15
    6afe:	fa16 f080 	uxtah	r0, r6, r0
    6b02:	b286      	uxth	r6, r0
    uint16_t u = fname->get16();
    6b04:	4620      	mov	r0, r4
    6b06:	2900      	cmp	r1, #0
    6b08:	d1e4      	bne.n	6ad4 <ExFatFile::hashName(ExName_t*)+0x18>
    6b0a:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    6b0e:	429a      	cmp	r2, r3
    6b10:	d1e0      	bne.n	6ad4 <ExFatFile::hashName(ExName_t*)+0x18>
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    6b12:	6920      	ldr	r0, [r4, #16]
  fname->nameHash = hash;
    6b14:	82a6      	strh	r6, [r4, #20]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    6b16:	3801      	subs	r0, #1
    6b18:	28fe      	cmp	r0, #254	; 0xfe
    6b1a:	bf8c      	ite	hi
    6b1c:	2000      	movhi	r0, #0
    6b1e:	2001      	movls	r0, #1
  }
  return true;

 fail:
  return false;
}
    6b20:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    6b22:	2000      	movs	r0, #0
}
    6b24:	bd70      	pop	{r4, r5, r6, pc}
    6b26:	bf00      	nop

00006b28 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    6b28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6b2c:	4607      	mov	r7, r0
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    6b2e:	468a      	mov	sl, r1
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    6b30:	4691      	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    6b32:	2900      	cmp	r1, #0
    6b34:	d042      	beq.n	6bbc <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x94>
    6b36:	f1a1 0802 	sub.w	r8, r1, #2
  if (start >= m_clusterCount) {
    6b3a:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    6b3e:	4543      	cmp	r3, r8
    6b40:	d942      	bls.n	6bc8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa0>
  uint8_t mask = 1 << (start & 7);
    6b42:	f008 0307 	and.w	r3, r8, #7
    6b46:	2501      	movs	r5, #1
  size_t i = (start >> 3) & (sectorSize - 1);
    6b48:	f3c8 0bc8 	ubfx	fp, r8, #3, #9
  uint8_t mask = 1 << (start & 7);
    6b4c:	409d      	lsls	r5, r3
    6b4e:	b2ed      	uxtb	r5, r5
  uint32_t bgnAlloc = start;
    6b50:	4646      	mov	r6, r8
  uint32_t endAlloc = start;
    6b52:	4644      	mov	r4, r8
    uint32_t sector = m_clusterHeapStartSector +
    6b54:	f8d7 142c 	ldr.w	r1, [r7, #1068]	; 0x42c
    return m_bitmapCache.prepare(sector, option);
    6b58:	2200      	movs	r2, #0
    6b5a:	4638      	mov	r0, r7
    6b5c:	eb01 3114 	add.w	r1, r1, r4, lsr #12
    6b60:	f005 f97e 	bl	be60 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    6b64:	b1e8      	cbz	r0, 6ba2 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x7a>
    6b66:	f10b 3bff 	add.w	fp, fp, #4294967295
    6b6a:	4483      	add	fp, r0
    6b6c:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
        if (!(mask & cache[i])) {
    6b70:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
    6b74:	e00a      	b.n	6b8c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x64>
          if ((endAlloc - bgnAlloc) == count) {
    6b76:	454a      	cmp	r2, r9
    6b78:	d02b      	beq.n	6bd2 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xaa>
        if (endAlloc == start) {
    6b7a:	45a0      	cmp	r8, r4
    6b7c:	d010      	beq.n	6ba0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x78>
        if (endAlloc >= m_clusterCount) {
    6b7e:	f8d7 5430 	ldr.w	r5, [r7, #1072]	; 0x430
    6b82:	42a5      	cmp	r5, r4
    6b84:	d914      	bls.n	6bb0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
      for (; mask; mask <<= 1) {
    6b86:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
    6b8a:	d00c      	beq.n	6ba6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x7e>
        endAlloc++;
    6b8c:	3401      	adds	r4, #1
        if (!(mask & cache[i])) {
    6b8e:	4229      	tst	r1, r5
      for (; mask; mask <<= 1) {
    6b90:	ea4f 0345 	mov.w	r3, r5, lsl #1
          if ((endAlloc - bgnAlloc) == count) {
    6b94:	eba4 0206 	sub.w	r2, r4, r6
        if (!(mask & cache[i])) {
    6b98:	d0ed      	beq.n	6b76 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4e>
        if (endAlloc == start) {
    6b9a:	45a0      	cmp	r8, r4
        endAlloc++;
    6b9c:	4626      	mov	r6, r4
        if (endAlloc == start) {
    6b9e:	d1ee      	bne.n	6b7e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x56>
          return 1;
    6ba0:	2001      	movs	r0, #1
}
    6ba2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (; i < sectorSize; i++) {
    6ba6:	4558      	cmp	r0, fp
      mask = 1;
    6ba8:	f04f 0501 	mov.w	r5, #1
    for (; i < sectorSize; i++) {
    6bac:	d1e0      	bne.n	6b70 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x48>
    6bae:	e001      	b.n	6bb4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x8c>
          endAlloc = bgnAlloc = 0;
    6bb0:	2600      	movs	r6, #0
    6bb2:	4634      	mov	r4, r6
  uint32_t endAlloc = start;
    6bb4:	2501      	movs	r5, #1
    i = 0;
    6bb6:	f04f 0b00 	mov.w	fp, #0
    6bba:	e7cb      	b.n	6b54 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    6bbc:	f8d0 8420 	ldr.w	r8, [r0, #1056]	; 0x420
  if (start >= m_clusterCount) {
    6bc0:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    6bc4:	4543      	cmp	r3, r8
    6bc6:	d8bc      	bhi.n	6b42 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x1a>
    6bc8:	f04f 0800 	mov.w	r8, #0
    6bcc:	2501      	movs	r5, #1
    start = 0;
    6bce:	46c3      	mov	fp, r8
    6bd0:	e7be      	b.n	6b50 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x28>
            if (cluster == 0 && count == 1) {
    6bd2:	f1ba 0f00 	cmp.w	sl, #0
    6bd6:	d104      	bne.n	6be2 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xba>
    6bd8:	f1b9 0f01 	cmp.w	r9, #1
              m_bitmapStart = bgnAlloc;
    6bdc:	bf08      	it	eq
    6bde:	f8c7 6420 	streq.w	r6, [r7, #1056]	; 0x420
            return bgnAlloc + 2;
    6be2:	1cb0      	adds	r0, r6, #2
}
    6be4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00006be8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
                                  uint32_t count, bool value) {
    6be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6bec:	4680      	mov	r8, r0
  uint32_t start = cluster - 2;
    6bee:	1e88      	subs	r0, r1, #2
                                  uint32_t count, bool value) {
    6bf0:	4615      	mov	r5, r2
    6bf2:	461e      	mov	r6, r3
  if ((start + count) > m_clusterCount) {
    6bf4:	1883      	adds	r3, r0, r2
    6bf6:	f8d8 2430 	ldr.w	r2, [r8, #1072]	; 0x430
    6bfa:	4293      	cmp	r3, r2
    6bfc:	d837      	bhi.n	6c6e <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
  if (value) {
    6bfe:	bbce      	cbnz	r6, 6c74 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start < m_bitmapStart) {
    6c00:	f8d8 3420 	ldr.w	r3, [r8, #1056]	; 0x420
    6c04:	4283      	cmp	r3, r0
      m_bitmapStart = start;
    6c06:	bf88      	it	hi
    6c08:	f8c8 0420 	strhi.w	r0, [r8, #1056]	; 0x420
  mask = 1 << (start & 7);
    6c0c:	f000 0307 	and.w	r3, r0, #7
    6c10:	2401      	movs	r4, #1
  sector = m_clusterHeapStartSector +
    6c12:	f8d8 742c 	ldr.w	r7, [r8, #1068]	; 0x42c
  i = (start >> 3) & m_sectorMask;
    6c16:	f3c0 09c8 	ubfx	r9, r0, #3, #9
  mask = 1 << (start & 7);
    6c1a:	409c      	lsls	r4, r3
  sector = m_clusterHeapStartSector +
    6c1c:	eb07 3110 	add.w	r1, r7, r0, lsr #12
  mask = 1 << (start & 7);
    6c20:	b2e4      	uxtb	r4, r4
    6c22:	2201      	movs	r2, #1
    6c24:	4640      	mov	r0, r8
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    6c26:	188f      	adds	r7, r1, r2
    6c28:	f005 f91a 	bl	be60 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    6c2c:	b1f8      	cbz	r0, 6c6e <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    6c2e:	f109 3eff 	add.w	lr, r9, #4294967295
    6c32:	4486      	add	lr, r0
    6c34:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
        if (value == static_cast<bool>(cache[i] & mask)) {
    6c38:	f81e cf01 	ldrb.w	ip, [lr, #1]!
    6c3c:	ea1c 0f04 	tst.w	ip, r4
        cache[i] ^= mask;
    6c40:	ea8c 0c04 	eor.w	ip, ip, r4
      for (; mask; mask <<= 1) {
    6c44:	ea4f 0444 	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    6c48:	bf14      	ite	ne
    6c4a:	2201      	movne	r2, #1
    6c4c:	2200      	moveq	r2, #0
    6c4e:	42b2      	cmp	r2, r6
    6c50:	d00d      	beq.n	6c6e <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
        if (--count == 0) {
    6c52:	3d01      	subs	r5, #1
        cache[i] ^= mask;
    6c54:	f88e c000 	strb.w	ip, [lr]
        if (--count == 0) {
    6c58:	d018      	beq.n	6c8c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa4>
      for (; mask; mask <<= 1) {
    6c5a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    6c5e:	d1ed      	bne.n	6c3c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x54>
    for (; i < m_bytesPerSector; i++) {
    6c60:	4570      	cmp	r0, lr
    i = 0;
    6c62:	46a1      	mov	r9, r4
    6c64:	f04f 0401 	mov.w	r4, #1
    for (; i < m_bytesPerSector; i++) {
    6c68:	d1e6      	bne.n	6c38 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x50>
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    6c6a:	4639      	mov	r1, r7
    6c6c:	e7d9      	b.n	6c22 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x3a>
  return false;
    6c6e:	2000      	movs	r0, #0
}
    6c70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    6c74:	f8d8 1420 	ldr.w	r1, [r8, #1056]	; 0x420
    6c78:	428b      	cmp	r3, r1
    6c7a:	d9c7      	bls.n	6c0c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
    6c7c:	4281      	cmp	r1, r0
    6c7e:	d3c5      	bcc.n	6c0c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    6c80:	4293      	cmp	r3, r2
    6c82:	bf28      	it	cs
    6c84:	2300      	movcs	r3, #0
    6c86:	f8c8 3420 	str.w	r3, [r8, #1056]	; 0x420
    6c8a:	e7bf      	b.n	6c0c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
          return true;
    6c8c:	2001      	movs	r0, #1
}
    6c8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6c92:	bf00      	nop

00006c94 <ExFatPartition::chainSize(unsigned long)>:
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    6c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (cluster > (m_clusterCount + 1)) {
    6c96:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    6c9a:	3301      	adds	r3, #1
    6c9c:	428b      	cmp	r3, r1
    6c9e:	d201      	bcs.n	6ca4 <ExFatPartition::chainSize(unsigned long)+0x10>
    if (status < 0) return 0;
    6ca0:	2000      	movs	r0, #0
}
    6ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6ca4:	4607      	mov	r7, r0
    6ca6:	460c      	mov	r4, r1
    return m_dataCache.prepare(sector, option);
    6ca8:	f500 7604 	add.w	r6, r0, #528	; 0x210
  uint32_t n = 0;
    6cac:	2500      	movs	r5, #0
    6cae:	e005      	b.n	6cbc <ExFatPartition::chainSize(unsigned long)+0x28>
  if (cluster > (m_clusterCount + 1)) {
    6cb0:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    n++;
    6cb4:	3501      	adds	r5, #1
  if (cluster > (m_clusterCount + 1)) {
    6cb6:	3301      	adds	r3, #1
    6cb8:	42a3      	cmp	r3, r4
    6cba:	d3f1      	bcc.n	6ca0 <ExFatPartition::chainSize(unsigned long)+0xc>
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    6cbc:	f8d7 1424 	ldr.w	r1, [r7, #1060]	; 0x424
    6cc0:	2200      	movs	r2, #0
    6cc2:	4630      	mov	r0, r6
    6cc4:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    6cc8:	f005 f8ca 	bl	be60 <FsCache::prepare(unsigned long, unsigned char)>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    6ccc:	00a4      	lsls	r4, r4, #2
  if (!cache) {
    6cce:	2800      	cmp	r0, #0
    6cd0:	d0e6      	beq.n	6ca0 <ExFatPartition::chainSize(unsigned long)+0xc>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    6cd2:	f3c4 0408 	ubfx	r4, r4, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    6cd6:	5904      	ldr	r4, [r0, r4]
  if (next == EXFAT_EOC) {
    6cd8:	1c63      	adds	r3, r4, #1
    6cda:	d1e9      	bne.n	6cb0 <ExFatPartition::chainSize(unsigned long)+0x1c>
    n++;
    6cdc:	1c68      	adds	r0, r5, #1
}
    6cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006ce0 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    6ce0:	b538      	push	{r3, r4, r5, lr}
    6ce2:	460c      	mov	r4, r1
           ((cluster - 2) << m_sectorsPerClusterShift);
    6ce4:	680b      	ldr	r3, [r1, #0]
    6ce6:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
    return m_dataCache.prepare(sector, option);
    6cea:	f500 7004 	add.w	r0, r0, #528	; 0x210
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    6cee:	f8d0 1228 	ldr.w	r1, [r0, #552]	; 0x228
           ((cluster - 2) << m_sectorsPerClusterShift);
    6cf2:	3b02      	subs	r3, #2
    6cf4:	6865      	ldr	r5, [r4, #4]
    6cf6:	fa03 f30c 	lsl.w	r3, r3, ip
    6cfa:	4029      	ands	r1, r5
    6cfc:	eb03 2351 	add.w	r3, r3, r1, lsr #9
    6d00:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
    return m_dataCache.prepare(sector, option);
    6d04:	4419      	add	r1, r3
    6d06:	f005 f8ab 	bl	be60 <FsCache::prepare(unsigned long, unsigned char)>
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    6d0a:	b118      	cbz	r0, 6d14 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x34>
    6d0c:	6863      	ldr	r3, [r4, #4]
    6d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
    6d12:	4418      	add	r0, r3
}
    6d14:	bd38      	pop	{r3, r4, r5, pc}
    6d16:	bf00      	nop

00006d18 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    6d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6d1c:	460c      	mov	r4, r1
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    6d1e:	f8d0 3438 	ldr.w	r3, [r0, #1080]	; 0x438
    6d22:	6849      	ldr	r1, [r1, #4]
    6d24:	400b      	ands	r3, r1
  pos->position += offset;
    6d26:	4411      	add	r1, r2
    6d28:	6061      	str	r1, [r4, #4]
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    6d2a:	4413      	add	r3, r2
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    6d2c:	f890 1445 	ldrb.w	r1, [r0, #1093]	; 0x445
    6d30:	f101 0209 	add.w	r2, r1, #9
  tmp >>= bytesPerClusterShift();
    6d34:	b2d2      	uxtb	r2, r2
    6d36:	40d3      	lsrs	r3, r2
  while (tmp--) {
    6d38:	b32b      	cbz	r3, 6d86 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x6e>
    6d3a:	4680      	mov	r8, r0
    6d3c:	1e5d      	subs	r5, r3, #1
    return m_dataCache.prepare(sector, option);
    6d3e:	f500 7904 	add.w	r9, r0, #528	; 0x210
    6d42:	e005      	b.n	6d50 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x38>
      pos->cluster++;
    6d44:	6823      	ldr	r3, [r4, #0]
  while (tmp--) {
    6d46:	3d01      	subs	r5, #1
      pos->cluster++;
    6d48:	f103 0301 	add.w	r3, r3, #1
    6d4c:	6023      	str	r3, [r4, #0]
  while (tmp--) {
    6d4e:	d31a      	bcc.n	6d86 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x6e>
    if (pos->isContiguous) {
    6d50:	7a26      	ldrb	r6, [r4, #8]
    6d52:	2e00      	cmp	r6, #0
    6d54:	d1f6      	bne.n	6d44 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
  if (cluster > (m_clusterCount + 1)) {
    6d56:	f8d8 3430 	ldr.w	r3, [r8, #1072]	; 0x430
    6d5a:	4632      	mov	r2, r6
      status = fatGet(pos->cluster, &pos->cluster);
    6d5c:	6827      	ldr	r7, [r4, #0]
    6d5e:	4648      	mov	r0, r9
  if (cluster > (m_clusterCount + 1)) {
    6d60:	3301      	adds	r3, #1
    6d62:	429f      	cmp	r7, r3
    6d64:	d812      	bhi.n	6d8c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x74>
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    6d66:	f8d8 1424 	ldr.w	r1, [r8, #1060]	; 0x424
    6d6a:	eb01 11d7 	add.w	r1, r1, r7, lsr #7
    6d6e:	f005 f877 	bl	be60 <FsCache::prepare(unsigned long, unsigned char)>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    6d72:	00bf      	lsls	r7, r7, #2
  if (!cache) {
    6d74:	b150      	cbz	r0, 6d8c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x74>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    6d76:	f3c7 0708 	ubfx	r7, r7, #0, #9
    6d7a:	59c3      	ldr	r3, [r0, r7]
  if (next == EXFAT_EOC) {
    6d7c:	1c5a      	adds	r2, r3, #1
    6d7e:	d009      	beq.n	6d94 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x7c>
  while (tmp--) {
    6d80:	3d01      	subs	r5, #1
  *value = next;
    6d82:	6023      	str	r3, [r4, #0]
  while (tmp--) {
    6d84:	d2e4      	bcs.n	6d50 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x38>
  return 1;
    6d86:	2001      	movs	r0, #1
}
    6d88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return -1;
    6d8c:	f04f 30ff 	mov.w	r0, #4294967295
}
    6d90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return 0;
    6d94:	4630      	mov	r0, r6
}
    6d96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6d9a:	bf00      	nop

00006d9c <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    6d9c:	b538      	push	{r3, r4, r5, lr}
  if (cluster > (m_clusterCount + 1)) {
    6d9e:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    6da2:	3301      	adds	r3, #1
    6da4:	428b      	cmp	r3, r1
    6da6:	d202      	bcs.n	6dae <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x12>
    return -1;
    6da8:	f04f 30ff 	mov.w	r0, #4294967295
}
    6dac:	bd38      	pop	{r3, r4, r5, pc}
    6dae:	460c      	mov	r4, r1
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    6db0:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    6db4:	4615      	mov	r5, r2
    6db6:	f500 7004 	add.w	r0, r0, #528	; 0x210
    6dba:	2200      	movs	r2, #0
    6dbc:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    6dc0:	f005 f84e 	bl	be60 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    6dc4:	2800      	cmp	r0, #0
    6dc6:	d0ef      	beq.n	6da8 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0xc>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    6dc8:	00a4      	lsls	r4, r4, #2
    6dca:	f3c4 0408 	ubfx	r4, r4, #0, #9
    6dce:	5903      	ldr	r3, [r0, r4]
  if (next == EXFAT_EOC) {
    6dd0:	1c5a      	adds	r2, r3, #1
    6dd2:	d002      	beq.n	6dda <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x3e>
  return 1;
    6dd4:	2001      	movs	r0, #1
  *value = next;
    6dd6:	602b      	str	r3, [r5, #0]
}
    6dd8:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
    6dda:	2000      	movs	r0, #0
}
    6ddc:	bd38      	pop	{r3, r4, r5, pc}
    6dde:	bf00      	nop

00006de0 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    6de0:	2901      	cmp	r1, #1
    6de2:	d91b      	bls.n	6e1c <ExFatPartition::fatPut(unsigned long, unsigned long)+0x3c>
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    6de4:	b538      	push	{r3, r4, r5, lr}
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    6de6:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    6dea:	460c      	mov	r4, r1
    6dec:	3301      	adds	r3, #1
    6dee:	428b      	cmp	r3, r1
    6df0:	d201      	bcs.n	6df6 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x16>
  return false;
    6df2:	2000      	movs	r0, #0
}
    6df4:	bd38      	pop	{r3, r4, r5, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    6df6:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    6dfa:	4615      	mov	r5, r2
    6dfc:	f500 7004 	add.w	r0, r0, #528	; 0x210
    6e00:	2201      	movs	r2, #1
    6e02:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    6e06:	f005 f82b 	bl	be60 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    6e0a:	4603      	mov	r3, r0
    6e0c:	2800      	cmp	r0, #0
    6e0e:	d0f0      	beq.n	6df2 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x12>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    6e10:	00a4      	lsls	r4, r4, #2
  return true;
    6e12:	2001      	movs	r0, #1
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    6e14:	f3c4 0408 	ubfx	r4, r4, #0, #9
  *reinterpret_cast<uint32_t*>(dst) = src;
    6e18:	511d      	str	r5, [r3, r4]
}
    6e1a:	bd38      	pop	{r3, r4, r5, pc}
  return false;
    6e1c:	2000      	movs	r0, #0
}
    6e1e:	4770      	bx	lr

00006e20 <ExFatPartition::freeChain(unsigned long)>:
  if (cluster > (m_clusterCount + 1)) {
    6e20:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    6e24:	3301      	adds	r3, #1
    6e26:	4299      	cmp	r1, r3
    6e28:	d901      	bls.n	6e2e <ExFatPartition::freeChain(unsigned long)+0xe>
}
    6e2a:	2000      	movs	r0, #0
    6e2c:	4770      	bx	lr
bool ExFatPartition::freeChain(uint32_t cluster) {
    6e2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6e32:	4605      	mov	r5, r0
    6e34:	b083      	sub	sp, #12
    6e36:	460c      	mov	r4, r1
    6e38:	f500 7904 	add.w	r9, r0, #528	; 0x210
    6e3c:	460f      	mov	r7, r1
    6e3e:	f04f 0800 	mov.w	r8, #0
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    6e42:	f8d5 1424 	ldr.w	r1, [r5, #1060]	; 0x424
    6e46:	2200      	movs	r2, #0
    6e48:	4648      	mov	r0, r9
    6e4a:	ea4f 1bd4 	mov.w	fp, r4, lsr #7
    6e4e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    6e52:	f005 f805 	bl	be60 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    6e56:	b190      	cbz	r0, 6e7e <ExFatPartition::freeChain(unsigned long)+0x5e>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    6e58:	00a3      	lsls	r3, r4, #2
    6e5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    6e5e:	58c2      	ldr	r2, [r0, r3]
    6e60:	9301      	str	r3, [sp, #4]
  if (next == EXFAT_EOC) {
    6e62:	1c53      	adds	r3, r2, #1
    6e64:	bf16      	itet	ne
    6e66:	4616      	movne	r6, r2
    6e68:	f04f 0a00 	moveq.w	sl, #0
    6e6c:	f04f 0a01 	movne.w	sl, #1
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    6e70:	2c01      	cmp	r4, #1
    6e72:	d904      	bls.n	6e7e <ExFatPartition::freeChain(unsigned long)+0x5e>
    6e74:	f8d5 2430 	ldr.w	r2, [r5, #1072]	; 0x430
    6e78:	3201      	adds	r2, #1
    6e7a:	4294      	cmp	r4, r2
    6e7c:	d903      	bls.n	6e86 <ExFatPartition::freeChain(unsigned long)+0x66>
}
    6e7e:	2000      	movs	r0, #0
    6e80:	b003      	add	sp, #12
    6e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    6e86:	f8d5 1424 	ldr.w	r1, [r5, #1060]	; 0x424
    6e8a:	2201      	movs	r2, #1
    6e8c:	4648      	mov	r0, r9
    6e8e:	4459      	add	r1, fp
    6e90:	f004 ffe6 	bl	be60 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    6e94:	2800      	cmp	r0, #0
    6e96:	d0f2      	beq.n	6e7e <ExFatPartition::freeChain(unsigned long)+0x5e>
  *reinterpret_cast<uint32_t*>(dst) = src;
    6e98:	9b01      	ldr	r3, [sp, #4]
    6e9a:	f840 8003 	str.w	r8, [r0, r3]
    if (status == 0 || (cluster + 1) != next) {
    6e9e:	f1ba 0f00 	cmp.w	sl, #0
    6ea2:	d012      	beq.n	6eca <ExFatPartition::freeChain(unsigned long)+0xaa>
    6ea4:	3401      	adds	r4, #1
    6ea6:	42b4      	cmp	r4, r6
    6ea8:	d008      	beq.n	6ebc <ExFatPartition::freeChain(unsigned long)+0x9c>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    6eaa:	2300      	movs	r3, #0
    6eac:	1be2      	subs	r2, r4, r7
    6eae:	4639      	mov	r1, r7
    6eb0:	4628      	mov	r0, r5
    6eb2:	f7ff fe99 	bl	6be8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    6eb6:	2800      	cmp	r0, #0
    6eb8:	d0e1      	beq.n	6e7e <ExFatPartition::freeChain(unsigned long)+0x5e>
    6eba:	4637      	mov	r7, r6
  if (cluster > (m_clusterCount + 1)) {
    6ebc:	f8d5 3430 	ldr.w	r3, [r5, #1072]	; 0x430
    6ec0:	3301      	adds	r3, #1
    6ec2:	42b3      	cmp	r3, r6
    6ec4:	d3db      	bcc.n	6e7e <ExFatPartition::freeChain(unsigned long)+0x5e>
    6ec6:	4634      	mov	r4, r6
    6ec8:	e7bb      	b.n	6e42 <ExFatPartition::freeChain(unsigned long)+0x22>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    6eca:	1c62      	adds	r2, r4, #1
    6ecc:	4653      	mov	r3, sl
    6ece:	4639      	mov	r1, r7
    6ed0:	4628      	mov	r0, r5
    6ed2:	1bd2      	subs	r2, r2, r7
}
    6ed4:	b003      	add	sp, #12
    6ed6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    6eda:	f7ff be85 	b.w	6be8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    6ede:	bf00      	nop

00006ee0 <ExFatPartition::freeClusterCount()>:
uint32_t ExFatPartition::freeClusterCount() {
    6ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t usedCount = 0;
    6ee4:	2500      	movs	r5, #0
uint32_t ExFatPartition::freeClusterCount() {
    6ee6:	4606      	mov	r6, r0
  uint32_t sector = m_clusterHeapStartSector;
    6ee8:	f8d0 142c 	ldr.w	r1, [r0, #1068]	; 0x42c
    6eec:	f500 7804 	add.w	r8, r0, #528	; 0x210
  uint32_t nc = 0;
    6ef0:	462c      	mov	r4, r5
    6ef2:	2200      	movs	r2, #0
    6ef4:	4640      	mov	r0, r8
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    6ef6:	1c4f      	adds	r7, r1, #1
    6ef8:	f004 ffb2 	bl	be60 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    6efc:	b1a8      	cbz	r0, 6f2a <ExFatPartition::freeClusterCount()+0x4a>
    6efe:	f100 3eff 	add.w	lr, r0, #4294967295
    6f02:	f504 5980 	add.w	r9, r4, #4096	; 0x1000
      if (nc >= m_clusterCount) {
    6f06:	f8d6 0430 	ldr.w	r0, [r6, #1072]	; 0x430
    6f0a:	e005      	b.n	6f18 <ExFatPartition::freeClusterCount()+0x38>
      } else if (cache[i]) {
    6f0c:	b979      	cbnz	r1, 6f2e <ExFatPartition::freeClusterCount()+0x4e>
      nc += 8;
    6f0e:	3408      	adds	r4, #8
      if (nc >= m_clusterCount) {
    6f10:	4284      	cmp	r4, r0
    6f12:	d209      	bcs.n	6f28 <ExFatPartition::freeClusterCount()+0x48>
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    6f14:	454c      	cmp	r4, r9
    6f16:	d016      	beq.n	6f46 <ExFatPartition::freeClusterCount()+0x66>
      if (cache[i] == 0XFF) {
    6f18:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    6f1c:	29ff      	cmp	r1, #255	; 0xff
    6f1e:	d1f5      	bne.n	6f0c <ExFatPartition::freeClusterCount()+0x2c>
      nc += 8;
    6f20:	3408      	adds	r4, #8
        usedCount+= 8;
    6f22:	3508      	adds	r5, #8
      if (nc >= m_clusterCount) {
    6f24:	4284      	cmp	r4, r0
    6f26:	d3f5      	bcc.n	6f14 <ExFatPartition::freeClusterCount()+0x34>
        return m_clusterCount - usedCount;
    6f28:	1b40      	subs	r0, r0, r5
}
    6f2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6f2e:	2208      	movs	r2, #8
        for (uint8_t mask = 1; mask ; mask <<=1) {
    6f30:	2301      	movs	r3, #1
          if ((mask & cache[i])) {
    6f32:	4219      	tst	r1, r3
        for (uint8_t mask = 1; mask ; mask <<=1) {
    6f34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
            usedCount++;
    6f38:	bf18      	it	ne
    6f3a:	3501      	addne	r5, #1
        for (uint8_t mask = 1; mask ; mask <<=1) {
    6f3c:	3a01      	subs	r2, #1
    6f3e:	fa5f f38c 	uxtb.w	r3, ip
    6f42:	d1f6      	bne.n	6f32 <ExFatPartition::freeClusterCount()+0x52>
    6f44:	e7e3      	b.n	6f0e <ExFatPartition::freeClusterCount()+0x2e>
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    6f46:	4639      	mov	r1, r7
    6f48:	e7d3      	b.n	6ef2 <ExFatPartition::freeClusterCount()+0x12>
    6f4a:	bf00      	nop

00006f4c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>:
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    6f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  m_fatType = 0;
    6f4e:	2300      	movs	r3, #0
    m_sector = 0XFFFFFFFF;
    6f50:	f04f 36ff 	mov.w	r6, #4294967295
    6f54:	f500 7704 	add.w	r7, r0, #528	; 0x210
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    6f58:	4615      	mov	r5, r2
  m_blockDev = dev;
    6f5a:	f8c0 1440 	str.w	r1, [r0, #1088]	; 0x440
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    6f5e:	4604      	mov	r4, r0
    m_blockDev = blockDev;
    6f60:	6041      	str	r1, [r0, #4]
    6f62:	461a      	mov	r2, r3
    6f64:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    6f68:	4619      	mov	r1, r3
  m_fatType = 0;
    6f6a:	f880 3444 	strb.w	r3, [r0, #1092]	; 0x444
    m_status = 0;
    6f6e:	7003      	strb	r3, [r0, #0]
    m_sector = 0XFFFFFFFF;
    6f70:	60c6      	str	r6, [r0, #12]
    m_status = 0;
    6f72:	f880 3210 	strb.w	r3, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    6f76:	f8c0 621c 	str.w	r6, [r0, #540]	; 0x21c
    6f7a:	4638      	mov	r0, r7
    6f7c:	f004 ff70 	bl	be60 <FsCache::prepare(unsigned long, unsigned char)>
  if (part > 4 || !cache) {
    6f80:	2d04      	cmp	r5, #4
    6f82:	d80d      	bhi.n	6fa0 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
    6f84:	4606      	mov	r6, r0
    6f86:	b158      	cbz	r0, 6fa0 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
  if (part >= 1) {
    6f88:	b1bd      	cbz	r5, 6fba <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x6e>
    mp = &mbr->part[part - 1];
    6f8a:	1e6b      	subs	r3, r5, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    6f8c:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    6f90:	f893 21be 	ldrb.w	r2, [r3, #446]	; 0x1be
    6f94:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
    6f98:	d102      	bne.n	6fa0 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
    6f9a:	f893 31c2 	ldrb.w	r3, [r3, #450]	; 0x1c2
    6f9e:	b90b      	cbnz	r3, 6fa4 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x58>
  return false;
    6fa0:	2000      	movs	r0, #0
}
    6fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return *reinterpret_cast<const uint32_t*>(src);
    6fa4:	eb00 1605 	add.w	r6, r0, r5, lsl #4
    6fa8:	4638      	mov	r0, r7
    6faa:	f8d6 51b6 	ldr.w	r5, [r6, #438]	; 0x1b6
    6fae:	4629      	mov	r1, r5
    6fb0:	f004 ff56 	bl	be60 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    6fb4:	4606      	mov	r6, r0
    6fb6:	2800      	cmp	r0, #0
    6fb8:	d0f2      	beq.n	6fa0 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    6fba:	2205      	movs	r2, #5
    6fbc:	491a      	ldr	r1, [pc, #104]	; (7028 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xdc>)
    6fbe:	1cf0      	adds	r0, r6, #3
    6fc0:	f00a f928 	bl	11214 <strncmp>
    6fc4:	2800      	cmp	r0, #0
    6fc6:	d1eb      	bne.n	6fa0 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    6fc8:	f896 306c 	ldrb.w	r3, [r6, #108]	; 0x6c
    6fcc:	2b09      	cmp	r3, #9
    6fce:	d1e7      	bne.n	6fa0 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    6fd0:	6d33      	ldr	r3, [r6, #80]	; 0x50
  bitmapFind(0, 1);
    6fd2:	4601      	mov	r1, r0
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    6fd4:	442b      	add	r3, r5
    6fd6:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
    6fda:	6d73      	ldr	r3, [r6, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    6fdc:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    6fe0:	6db3      	ldr	r3, [r6, #88]	; 0x58
    6fe2:	442b      	add	r3, r5
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    6fe4:	2501      	movs	r5, #1
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    6fe6:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    6fea:	6df3      	ldr	r3, [r6, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    6fec:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
    6ff0:	6e33      	ldr	r3, [r6, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    6ff2:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    6ff6:	f896 206d 	ldrb.w	r2, [r6, #109]	; 0x6d
  m_bitmapStart = 0;
    6ffa:	f8c4 0420 	str.w	r0, [r4, #1056]	; 0x420
  bitmapFind(0, 1);
    6ffe:	4620      	mov	r0, r4
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    7000:	f102 0309 	add.w	r3, r2, #9
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    7004:	f884 2445 	strb.w	r2, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    7008:	fa05 f303 	lsl.w	r3, r5, r3
  m_clusterMask = m_bytesPerCluster - 1;
    700c:	1e5a      	subs	r2, r3, #1
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    700e:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    7012:	f8c4 2438 	str.w	r2, [r4, #1080]	; 0x438
  bitmapFind(0, 1);
    7016:	462a      	mov	r2, r5
    7018:	f7ff fd86 	bl	6b28 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    701c:	2340      	movs	r3, #64	; 0x40
  return true;
    701e:	4628      	mov	r0, r5
  m_fatType = FAT_TYPE_EXFAT;
    7020:	f884 3444 	strb.w	r3, [r4, #1092]	; 0x444
}
    7024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7026:	bf00      	nop
    7028:	200031b4 	.word	0x200031b4

0000702c <ExFatPartition::rootLength()>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    702c:	b510      	push	{r4, lr}
    702e:	4604      	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    7030:	f8d0 1434 	ldr.w	r1, [r0, #1076]	; 0x434
    7034:	f7ff fe2e 	bl	6c94 <ExFatPartition::chainSize(unsigned long)>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    7038:	f894 3445 	ldrb.w	r3, [r4, #1093]	; 0x445
    703c:	3309      	adds	r3, #9
  return nc << bytesPerClusterShift();
    703e:	b2db      	uxtb	r3, r3
}
    7040:	4098      	lsls	r0, r3
    7042:	bd10      	pop	{r4, pc}

00007044 <FatFile::sync() [clone .part.0]>:
 fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    7044:	b570      	push	{r4, r5, r6, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    7046:	f990 3002 	ldrsb.w	r3, [r0, #2]
bool FatFile::sync() {
    704a:	b082      	sub	sp, #8
    704c:	4604      	mov	r4, r0
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    704e:	2b00      	cmp	r3, #0
    7050:	db0d      	blt.n	706e <FatFile::sync() [clone .part.0]+0x2a>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    7052:	68a5      	ldr	r5, [r4, #8]
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    7054:	f105 0028 	add.w	r0, r5, #40	; 0x28
    7058:	f004 fed6 	bl	be08 <FsCache::sync()>
    705c:	2800      	cmp	r0, #0
    705e:	d13b      	bne.n	70d8 <FatFile::sync() [clone .part.0]+0x94>
    return true;
  }
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
    7060:	7863      	ldrb	r3, [r4, #1]
  return false;
    7062:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    7064:	f043 0301 	orr.w	r3, r3, #1
    7068:	7063      	strb	r3, [r4, #1]
}
    706a:	b002      	add	sp, #8
    706c:	bd70      	pop	{r4, r5, r6, pc}
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t options) {
    return m_cache.prepare(sector, options);
    706e:	6880      	ldr	r0, [r0, #8]
    7070:	2201      	movs	r2, #1
    7072:	69a1      	ldr	r1, [r4, #24]
    7074:	3028      	adds	r0, #40	; 0x28
    7076:	f004 fef3 	bl	be60 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    707a:	2800      	cmp	r0, #0
    707c:	d0f0      	beq.n	7060 <FatFile::sync() [clone .part.0]+0x1c>
  return dir + (m_dirIndex & 0XF);
    707e:	88a5      	ldrh	r5, [r4, #4]
    7080:	f005 050f 	and.w	r5, r5, #15
    7084:	016b      	lsls	r3, r5, #5
    7086:	eb00 1545 	add.w	r5, r0, r5, lsl #5
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    708a:	5cc3      	ldrb	r3, [r0, r3]
    708c:	2be5      	cmp	r3, #229	; 0xe5
    708e:	d0e7      	beq.n	7060 <FatFile::sync() [clone .part.0]+0x1c>
    if (isFile()) {
    7090:	7823      	ldrb	r3, [r4, #0]
    7092:	071b      	lsls	r3, r3, #28
    7094:	d501      	bpl.n	709a <FatFile::sync() [clone .part.0]+0x56>
      setLe32(dir->fileSize, m_fileSize);
    7096:	69e3      	ldr	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    7098:	61eb      	str	r3, [r5, #28]
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    709a:	6a23      	ldr	r3, [r4, #32]
    if (FsDateTime::callback) {
    709c:	4915      	ldr	r1, [pc, #84]	; (70f4 <FatFile::sync() [clone .part.0]+0xb0>)
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    709e:	0c1a      	lsrs	r2, r3, #16
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    70a0:	836b      	strh	r3, [r5, #26]
    if (FsDateTime::callback) {
    70a2:	680e      	ldr	r6, [r1, #0]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    70a4:	82aa      	strh	r2, [r5, #20]
    if (FsDateTime::callback) {
    70a6:	b166      	cbz	r6, 70c2 <FatFile::sync() [clone .part.0]+0x7e>
      FsDateTime::callback(&date, &time, &ms10);
    70a8:	f10d 0203 	add.w	r2, sp, #3
    70ac:	f10d 0106 	add.w	r1, sp, #6
    70b0:	a801      	add	r0, sp, #4
    70b2:	47b0      	blx	r6
      setLe16(dir->modifyDate, date);
    70b4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
    70b8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    70bc:	832b      	strh	r3, [r5, #24]
    70be:	826b      	strh	r3, [r5, #18]
    70c0:	82ea      	strh	r2, [r5, #22]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    70c2:	78a3      	ldrb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
    70c4:	68a5      	ldr	r5, [r4, #8]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    70c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    70ca:	f105 0028 	add.w	r0, r5, #40	; 0x28
    70ce:	70a3      	strb	r3, [r4, #2]
    70d0:	f004 fe9a 	bl	be08 <FsCache::sync()>
    70d4:	2800      	cmp	r0, #0
    70d6:	d0c3      	beq.n	7060 <FatFile::sync() [clone .part.0]+0x1c>
    70d8:	f505 700e 	add.w	r0, r5, #568	; 0x238
    70dc:	f004 fe94 	bl	be08 <FsCache::sync()>
    70e0:	2800      	cmp	r0, #0
    70e2:	d0bd      	beq.n	7060 <FatFile::sync() [clone .part.0]+0x1c>
    70e4:	6828      	ldr	r0, [r5, #0]
    return m_blockDev->syncDevice();
    70e6:	6803      	ldr	r3, [r0, #0]
    70e8:	6a1b      	ldr	r3, [r3, #32]
    70ea:	4798      	blx	r3
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    70ec:	2800      	cmp	r0, #0
    70ee:	d0b7      	beq.n	7060 <FatFile::sync() [clone .part.0]+0x1c>
    70f0:	e7bb      	b.n	706a <FatFile::sync() [clone .part.0]+0x26>
    70f2:	bf00      	nop
    70f4:	2005e024 	.word	0x2005e024

000070f8 <FatFile::addCluster()>:
  uint32_t cc = m_curCluster;
    70f8:	4602      	mov	r2, r0
bool FatFile::addCluster() {
    70fa:	b538      	push	{r3, r4, r5, lr}
  uint32_t cc = m_curCluster;
    70fc:	f852 5f10 	ldr.w	r5, [r2, #16]!
bool FatFile::addCluster() {
    7100:	4604      	mov	r4, r0
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    7102:	6880      	ldr	r0, [r0, #8]
    7104:	4629      	mov	r1, r5
    7106:	f002 f921 	bl	934c <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    710a:	b150      	cbz	r0, 7122 <FatFile::addCluster()+0x2a>
  if (cc == 0) {
    710c:	b155      	cbz	r5, 7124 <FatFile::addCluster()+0x2c>
  } else if (m_curCluster != (cc + 1)) {
    710e:	6923      	ldr	r3, [r4, #16]
    7110:	3501      	adds	r5, #1
    7112:	42ab      	cmp	r3, r5
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    7114:	78a3      	ldrb	r3, [r4, #2]
    7116:	bf18      	it	ne
    7118:	f003 03bf 	andne.w	r3, r3, #191	; 0xbf
  m_flags |= FILE_FLAG_DIR_DIRTY;
    711c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7120:	70a3      	strb	r3, [r4, #2]
}
    7122:	bd38      	pop	{r3, r4, r5, pc}
    m_flags |= FILE_FLAG_CONTIGUOUS;
    7124:	78a3      	ldrb	r3, [r4, #2]
    7126:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    712a:	e7f7      	b.n	711c <FatFile::addCluster()+0x24>

0000712c <FatFile::addDirCluster()>:
bool FatFile::addDirCluster() {
    712c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (isRootFixed()) {
    712e:	7804      	ldrb	r4, [r0, #0]
    7130:	f014 0420 	ands.w	r4, r4, #32
    7134:	d104      	bne.n	7140 <FatFile::addDirCluster()+0x14>
  if (m_curPosition >= 512UL*4095) {
    7136:	4b1a      	ldr	r3, [pc, #104]	; (71a0 <FatFile::addDirCluster()+0x74>)
    7138:	4605      	mov	r5, r0
    713a:	6942      	ldr	r2, [r0, #20]
    713c:	429a      	cmp	r2, r3
    713e:	d302      	bcc.n	7146 <FatFile::addDirCluster()+0x1a>
  return false;
    7140:	2700      	movs	r7, #0
}
    7142:	4638      	mov	r0, r7
    7144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (!addCluster()) {
    7146:	f7ff ffd7 	bl	70f8 <FatFile::addCluster()>
    714a:	4607      	mov	r7, r0
    714c:	2800      	cmp	r0, #0
    714e:	d0f7      	beq.n	7140 <FatFile::addDirCluster()+0x14>
  sector = m_vol->clusterStartSector(m_curCluster);
    7150:	68a8      	ldr	r0, [r5, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7152:	692e      	ldr	r6, [r5, #16]
    7154:	7982      	ldrb	r2, [r0, #6]
    7156:	3e02      	subs	r6, #2
    7158:	6941      	ldr	r1, [r0, #20]
    715a:	4096      	lsls	r6, r2
    715c:	440e      	add	r6, r1
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    715e:	7901      	ldrb	r1, [r0, #4]
    7160:	b1a9      	cbz	r1, 718e <FatFile::addDirCluster()+0x62>
    7162:	4621      	mov	r1, r4
    7164:	e006      	b.n	7174 <FatFile::addDirCluster()+0x48>
    memset(pc, 0, m_vol->bytesPerSector());
    7166:	f009 ff25 	bl	10fb4 <memset>
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    716a:	68a8      	ldr	r0, [r5, #8]
    716c:	b2e1      	uxtb	r1, r4
    716e:	7902      	ldrb	r2, [r0, #4]
    7170:	428a      	cmp	r2, r1
    7172:	d90b      	bls.n	718c <FatFile::addDirCluster()+0x60>
    return m_cache.prepare(sector, options);
    7174:	4431      	add	r1, r6
    7176:	2205      	movs	r2, #5
    7178:	3028      	adds	r0, #40	; 0x28
    717a:	3401      	adds	r4, #1
    717c:	f004 fe70 	bl	be60 <FsCache::prepare(unsigned long, unsigned char)>
    memset(pc, 0, m_vol->bytesPerSector());
    7180:	f44f 7200 	mov.w	r2, #512	; 0x200
    7184:	2100      	movs	r1, #0
    if (!pc) {
    7186:	2800      	cmp	r0, #0
    7188:	d1ed      	bne.n	7166 <FatFile::addDirCluster()+0x3a>
    718a:	e7d9      	b.n	7140 <FatFile::addDirCluster()+0x14>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    718c:	7982      	ldrb	r2, [r0, #6]
    718e:	f44f 7300 	mov.w	r3, #512	; 0x200
  m_curPosition += m_vol->bytesPerCluster();
    7192:	6969      	ldr	r1, [r5, #20]
}
    7194:	4638      	mov	r0, r7
    7196:	4093      	lsls	r3, r2
  m_curPosition += m_vol->bytesPerCluster();
    7198:	fa11 f383 	uxtah	r3, r1, r3
    719c:	616b      	str	r3, [r5, #20]
}
    719e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    71a0:	001ffe00 	.word	0x001ffe00

000071a4 <FatFile::cacheDirEntry(unsigned char)>:
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    71a4:	b510      	push	{r4, lr}
    71a6:	4604      	mov	r4, r0
    return m_cache.prepare(sector, options);
    71a8:	6880      	ldr	r0, [r0, #8]
    71aa:	460a      	mov	r2, r1
    71ac:	3028      	adds	r0, #40	; 0x28
    71ae:	69a1      	ldr	r1, [r4, #24]
    71b0:	f004 fe56 	bl	be60 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    71b4:	b120      	cbz	r0, 71c0 <FatFile::cacheDirEntry(unsigned char)+0x1c>
  return dir + (m_dirIndex & 0XF);
    71b6:	88a3      	ldrh	r3, [r4, #4]
    71b8:	f003 030f 	and.w	r3, r3, #15
    71bc:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
    71c0:	bd10      	pop	{r4, pc}
    71c2:	bf00      	nop

000071c4 <FatFile::close()>:
bool FatFile::close() {
    71c4:	b510      	push	{r4, lr}
  if (!isOpen()) {
    71c6:	7803      	ldrb	r3, [r0, #0]
bool FatFile::close() {
    71c8:	4604      	mov	r4, r0
  if (!isOpen()) {
    71ca:	b12b      	cbz	r3, 71d8 <FatFile::close()+0x14>
    71cc:	f7ff ff3a 	bl	7044 <FatFile::sync() [clone .part.0]>
  m_attributes = FILE_ATTR_CLOSED;
    71d0:	2300      	movs	r3, #0
    71d2:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    71d4:	70a3      	strb	r3, [r4, #2]
}
    71d6:	bd10      	pop	{r4, pc}
  m_attributes = FILE_ATTR_CLOSED;
    71d8:	2300      	movs	r3, #0
    return true;
    71da:	2001      	movs	r0, #1
  m_attributes = FILE_ATTR_CLOSED;
    71dc:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    71de:	70a3      	strb	r3, [r4, #2]
}
    71e0:	bd10      	pop	{r4, pc}
    71e2:	bf00      	nop

000071e4 <FatFile::dirEntry(DirFat_t*)>:
bool FatFile::dirEntry(DirFat_t* dst) {
    71e4:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    71e6:	7803      	ldrb	r3, [r0, #0]
bool FatFile::dirEntry(DirFat_t* dst) {
    71e8:	4605      	mov	r5, r0
    71ea:	460c      	mov	r4, r1
  if (!isOpen()) {
    71ec:	b113      	cbz	r3, 71f4 <FatFile::dirEntry(DirFat_t*)+0x10>
    71ee:	f7ff ff29 	bl	7044 <FatFile::sync() [clone .part.0]>
  if (!sync()) {
    71f2:	b1f0      	cbz	r0, 7232 <FatFile::dirEntry(DirFat_t*)+0x4e>
    71f4:	68a8      	ldr	r0, [r5, #8]
    71f6:	2200      	movs	r2, #0
    71f8:	69a9      	ldr	r1, [r5, #24]
    71fa:	3028      	adds	r0, #40	; 0x28
    71fc:	f004 fe30 	bl	be60 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    7200:	b1b8      	cbz	r0, 7232 <FatFile::dirEntry(DirFat_t*)+0x4e>
  return dir + (m_dirIndex & 0XF);
    7202:	88aa      	ldrh	r2, [r5, #4]
    7204:	f002 020f 	and.w	r2, r2, #15
    7208:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    720c:	0152      	lsls	r2, r2, #5
  memcpy(dst, dir, sizeof(DirFat_t));
    720e:	685d      	ldr	r5, [r3, #4]
    7210:	5880      	ldr	r0, [r0, r2]
    7212:	6899      	ldr	r1, [r3, #8]
    7214:	68da      	ldr	r2, [r3, #12]
    7216:	6020      	str	r0, [r4, #0]
    7218:	6065      	str	r5, [r4, #4]
    721a:	60a1      	str	r1, [r4, #8]
    721c:	60e2      	str	r2, [r4, #12]
    721e:	6918      	ldr	r0, [r3, #16]
    7220:	695d      	ldr	r5, [r3, #20]
    7222:	6999      	ldr	r1, [r3, #24]
    7224:	69da      	ldr	r2, [r3, #28]
    7226:	6120      	str	r0, [r4, #16]
  return true;
    7228:	2001      	movs	r0, #1
  memcpy(dst, dir, sizeof(DirFat_t));
    722a:	6165      	str	r5, [r4, #20]
    722c:	61a1      	str	r1, [r4, #24]
    722e:	61e2      	str	r2, [r4, #28]
}
    7230:	bd38      	pop	{r3, r4, r5, pc}
  return false;
    7232:	2000      	movs	r0, #0
}
    7234:	bd38      	pop	{r3, r4, r5, pc}
    7236:	bf00      	nop

00007238 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    7238:	b530      	push	{r4, r5, lr}
    723a:	b089      	sub	sp, #36	; 0x24
    723c:	460d      	mov	r5, r1
    723e:	4614      	mov	r4, r2
  if (!dirEntry(&dir)) {
    7240:	4669      	mov	r1, sp
    7242:	f7ff ffcf 	bl	71e4 <FatFile::dirEntry(DirFat_t*)>
    7246:	b128      	cbz	r0, 7254 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.createDate);
    7248:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  *ptime = getLe16(dir.createTime);
    724c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  *pdate = getLe16(dir.createDate);
    7250:	802a      	strh	r2, [r5, #0]
  *ptime = getLe16(dir.createTime);
    7252:	8023      	strh	r3, [r4, #0]
}
    7254:	b009      	add	sp, #36	; 0x24
    7256:	bd30      	pop	{r4, r5, pc}

00007258 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    7258:	b530      	push	{r4, r5, lr}
    725a:	b089      	sub	sp, #36	; 0x24
    725c:	460d      	mov	r5, r1
    725e:	4614      	mov	r4, r2
  if (!dirEntry(&dir)) {
    7260:	4669      	mov	r1, sp
    7262:	f7ff ffbf 	bl	71e4 <FatFile::dirEntry(DirFat_t*)>
    7266:	b128      	cbz	r0, 7274 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.modifyDate);
    7268:	f8bd 2018 	ldrh.w	r2, [sp, #24]
  *ptime = getLe16(dir.modifyTime);
    726c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  *pdate = getLe16(dir.modifyDate);
    7270:	802a      	strh	r2, [r5, #0]
  *ptime = getLe16(dir.modifyTime);
    7272:	8023      	strh	r3, [r4, #0]
}
    7274:	b009      	add	sp, #36	; 0x24
    7276:	bd30      	pop	{r4, r5, pc}

00007278 <FatFile::mkdir(FatFile*, FatLfn_t*)>:
  if (!parent->isDir()) {
    7278:	780b      	ldrb	r3, [r1, #0]
    727a:	f013 0f70 	tst.w	r3, #112	; 0x70
    727e:	d101      	bne.n	7284 <FatFile::mkdir(FatFile*, FatLfn_t*)+0xc>
}
    7280:	2000      	movs	r0, #0
    7282:	4770      	bx	lr
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    7284:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    7286:	f640 2302 	movw	r3, #2562	; 0xa02
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    728a:	b089      	sub	sp, #36	; 0x24
    728c:	460d      	mov	r5, r1
    728e:	4604      	mov	r4, r0
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    7290:	f001 f8f0 	bl	8474 <FatFile::open(FatFile*, FatLfn_t*, int)>
    7294:	b138      	cbz	r0, 72a6 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  m_flags = FILE_FLAG_READ;
    7296:	2201      	movs	r2, #1
  m_attributes = FILE_ATTR_SUBDIR;
    7298:	2310      	movs	r3, #16
  if (!addDirCluster()) {
    729a:	4620      	mov	r0, r4
  m_flags = FILE_FLAG_READ;
    729c:	70a2      	strb	r2, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    729e:	7023      	strb	r3, [r4, #0]
  if (!addDirCluster()) {
    72a0:	f7ff ff44 	bl	712c <FatFile::addDirCluster()>
    72a4:	b910      	cbnz	r0, 72ac <FatFile::mkdir(FatFile*, FatLfn_t*)+0x34>
}
    72a6:	2000      	movs	r0, #0
    72a8:	b009      	add	sp, #36	; 0x24
    72aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  m_firstCluster = m_curCluster;
    72ac:	6922      	ldr	r2, [r4, #16]
  if (!isOpen()) {
    72ae:	7823      	ldrb	r3, [r4, #0]
  m_firstCluster = m_curCluster;
    72b0:	6222      	str	r2, [r4, #32]
  if (!isOpen()) {
    72b2:	b16b      	cbz	r3, 72d0 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x58>
  if (pos == m_curPosition) {
    72b4:	6963      	ldr	r3, [r4, #20]
    72b6:	b133      	cbz	r3, 72c6 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x4e>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    72b8:	78a3      	ldrb	r3, [r4, #2]
    m_curCluster = 0;
    72ba:	2200      	movs	r2, #0
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    72bc:	f023 0320 	bic.w	r3, r3, #32
  m_curPosition = pos;
    72c0:	e9c4 2204 	strd	r2, r2, [r4, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    72c4:	70a3      	strb	r3, [r4, #2]
  if (!isOpen()) {
    72c6:	4620      	mov	r0, r4
    72c8:	f7ff febc 	bl	7044 <FatFile::sync() [clone .part.0]>
  if (!sync()) {
    72cc:	2800      	cmp	r0, #0
    72ce:	d0ea      	beq.n	72a6 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    72d0:	68a0      	ldr	r0, [r4, #8]
    72d2:	2201      	movs	r2, #1
    72d4:	69a1      	ldr	r1, [r4, #24]
    72d6:	3028      	adds	r0, #40	; 0x28
    72d8:	f004 fdc2 	bl	be60 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    72dc:	2800      	cmp	r0, #0
    72de:	d0e2      	beq.n	72a6 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  return dir + (m_dirIndex & 0XF);
    72e0:	f8b4 c004 	ldrh.w	ip, [r4, #4]
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    72e4:	2210      	movs	r2, #16
  return dir + (m_dirIndex & 0XF);
    72e6:	f00c 0c0f 	and.w	ip, ip, #15
    72ea:	ea4f 134c 	mov.w	r3, ip, lsl #5
    72ee:	eb00 1c4c 	add.w	ip, r0, ip, lsl #5
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    72f2:	f88c 200b 	strb.w	r2, [ip, #11]
  memcpy(&dot, dir, sizeof(dot));
    72f6:	58c0      	ldr	r0, [r0, r3]
  sector = m_vol->clusterStartSector(m_firstCluster);
    72f8:	68a7      	ldr	r7, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    72fa:	6a23      	ldr	r3, [r4, #32]
    72fc:	f897 e006 	ldrb.w	lr, [r7, #6]
    7300:	1e9e      	subs	r6, r3, #2
  memcpy(&dot, dir, sizeof(dot));
    7302:	f8dc 1004 	ldr.w	r1, [ip, #4]
    7306:	f8dc 2008 	ldr.w	r2, [ip, #8]
    730a:	f8dc 300c 	ldr.w	r3, [ip, #12]
    730e:	fa06 f60e 	lsl.w	r6, r6, lr
    7312:	46ee      	mov	lr, sp
    7314:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    7318:	f8dc 0010 	ldr.w	r0, [ip, #16]
    731c:	f8dc 1014 	ldr.w	r1, [ip, #20]
    7320:	f8dc 2018 	ldr.w	r2, [ip, #24]
    7324:	f8dc 301c 	ldr.w	r3, [ip, #28]
    7328:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    return m_cache.prepare(sector, options);
    732c:	697b      	ldr	r3, [r7, #20]
    732e:	f107 0028 	add.w	r0, r7, #40	; 0x28
    7332:	2201      	movs	r2, #1
    7334:	18f1      	adds	r1, r6, r3
    dot.name[i] = ' ';
    7336:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
    733a:	f8cd 3001 	str.w	r3, [sp, #1]
    733e:	f8cd 3005 	str.w	r3, [sp, #5]
    7342:	f8ad 3009 	strh.w	r3, [sp, #9]
    7346:	f004 fd8b 	bl	be60 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    734a:	4684      	mov	ip, r0
    734c:	2800      	cmp	r0, #0
    734e:	d0aa      	beq.n	72a6 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  memcpy(&dir[0], &dot, sizeof(dot));
    7350:	272e      	movs	r7, #46	; 0x2e
    7352:	46ee      	mov	lr, sp
    7354:	f88d 7000 	strb.w	r7, [sp]
  memcpy(&dir[1], &dot, sizeof(dot));
    7358:	4676      	mov	r6, lr
  memcpy(&dir[0], &dot, sizeof(dot));
    735a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    735e:	f8cc 0000 	str.w	r0, [ip]
    7362:	f8cc 1004 	str.w	r1, [ip, #4]
    7366:	f8cc 2008 	str.w	r2, [ip, #8]
    736a:	f8cc 300c 	str.w	r3, [ip, #12]
  dot.name[1] = '.';
    736e:	f88d 7001 	strb.w	r7, [sp, #1]
  memcpy(&dir[0], &dot, sizeof(dot));
    7372:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    7376:	f8cc 0010 	str.w	r0, [ip, #16]
    737a:	f8cc 1014 	str.w	r1, [ip, #20]
    737e:	f8cc 2018 	str.w	r2, [ip, #24]
    7382:	f8cc 301c 	str.w	r3, [ip, #28]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    7386:	6a2b      	ldr	r3, [r5, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    7388:	0c1a      	lsrs	r2, r3, #16
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    738a:	f8ad 301a 	strh.w	r3, [sp, #26]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    738e:	f8ad 2014 	strh.w	r2, [sp, #20]
  memcpy(&dir[1], &dot, sizeof(dot));
    7392:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    7394:	f8cc 0020 	str.w	r0, [ip, #32]
    7398:	f8cc 1024 	str.w	r1, [ip, #36]	; 0x24
    739c:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28
    73a0:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
    73a4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    73a6:	f8cc 0030 	str.w	r0, [ip, #48]	; 0x30
    73aa:	f8cc 1034 	str.w	r1, [ip, #52]	; 0x34
    73ae:	f8cc 2038 	str.w	r2, [ip, #56]	; 0x38
    73b2:	f8cc 303c 	str.w	r3, [ip, #60]	; 0x3c
  return m_vol->cacheSync();
    73b6:	68a4      	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    73b8:	f104 0028 	add.w	r0, r4, #40	; 0x28
    73bc:	f004 fd24 	bl	be08 <FsCache::sync()>
    73c0:	2800      	cmp	r0, #0
    73c2:	f43f af70 	beq.w	72a6 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    73c6:	f504 700e 	add.w	r0, r4, #568	; 0x238
    73ca:	f004 fd1d 	bl	be08 <FsCache::sync()>
    73ce:	2800      	cmp	r0, #0
    73d0:	f43f af69 	beq.w	72a6 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    73d4:	6820      	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
    73d6:	6803      	ldr	r3, [r0, #0]
    73d8:	6a1b      	ldr	r3, [r3, #32]
}
    73da:	b009      	add	sp, #36	; 0x24
    73dc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    73e0:	4718      	bx	r3
    73e2:	bf00      	nop

000073e4 <FatFile::mkdir(FatFile*, char const*, bool)>:
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    73e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
class FsName {
    73e8:	2600      	movs	r6, #0
    73ea:	b094      	sub	sp, #80	; 0x50
    73ec:	4698      	mov	r8, r3
  if (isOpen() || !parent->isDir()) {
    73ee:	7803      	ldrb	r3, [r0, #0]
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    73f0:	9201      	str	r2, [sp, #4]
    73f2:	f8ad 6014 	strh.w	r6, [sp, #20]
    73f6:	960b      	str	r6, [sp, #44]	; 0x2c
  if (isOpen() || !parent->isDir()) {
    73f8:	2b00      	cmp	r3, #0
    73fa:	d141      	bne.n	7480 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    73fc:	780b      	ldrb	r3, [r1, #0]
    73fe:	460d      	mov	r5, r1
    7400:	f013 0f70 	tst.w	r3, #112	; 0x70
    7404:	d03c      	beq.n	7480 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
  if (isDirSeparator(*path)) {
    7406:	7813      	ldrb	r3, [r2, #0]
    7408:	4604      	mov	r4, r0
    740a:	4616      	mov	r6, r2
    740c:	2b2f      	cmp	r3, #47	; 0x2f
    740e:	d03b      	beq.n	7488 <FatFile::mkdir(FatFile*, char const*, bool)+0xa4>
    if (!open(parent, &fname, O_RDONLY)) {
    7410:	2700      	movs	r7, #0
    7412:	e028      	b.n	7466 <FatFile::mkdir(FatFile*, char const*, bool)+0x82>
    if (!*path) {
    7414:	9e01      	ldr	r6, [sp, #4]
    7416:	7836      	ldrb	r6, [r6, #0]
    7418:	2e00      	cmp	r6, #0
    741a:	d050      	beq.n	74be <FatFile::mkdir(FatFile*, char const*, bool)+0xda>
    if (!open(parent, &fname, O_RDONLY)) {
    741c:	f001 f82a 	bl	8474 <FatFile::open(FatFile*, FatLfn_t*, int)>
    7420:	4603      	mov	r3, r0
      if (!pFlag || !mkdir(parent, &fname)) {
    7422:	aa02      	add	r2, sp, #8
    7424:	4629      	mov	r1, r5
    7426:	4620      	mov	r0, r4
    if (!open(parent, &fname, O_RDONLY)) {
    7428:	b92b      	cbnz	r3, 7436 <FatFile::mkdir(FatFile*, char const*, bool)+0x52>
      if (!pFlag || !mkdir(parent, &fname)) {
    742a:	f1b8 0f00 	cmp.w	r8, #0
    742e:	d027      	beq.n	7480 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    7430:	f7ff ff22 	bl	7278 <FatFile::mkdir(FatFile*, FatLfn_t*)>
    7434:	b320      	cbz	r0, 7480 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    tmpDir = *this;
    7436:	46a6      	mov	lr, r4
    7438:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
    743c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    7440:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    7444:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    7448:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    744c:	f8de 5000 	ldr.w	r5, [lr]
    7450:	4620      	mov	r0, r4
  if (!isOpen()) {
    7452:	7823      	ldrb	r3, [r4, #0]
    tmpDir = *this;
    7454:	f8cc 5000 	str.w	r5, [ip]
  if (!isOpen()) {
    7458:	b10b      	cbz	r3, 745e <FatFile::mkdir(FatFile*, char const*, bool)+0x7a>
    745a:	f7ff fdf3 	bl	7044 <FatFile::sync() [clone .part.0]>
    if (!parsePathName(path, &fname, &path)) {
    745e:	9e01      	ldr	r6, [sp, #4]
    parent = &tmpDir;
    7460:	ad0b      	add	r5, sp, #44	; 0x2c
  m_attributes = FILE_ATTR_CLOSED;
    7462:	7027      	strb	r7, [r4, #0]
  m_flags = 0;
    7464:	70a7      	strb	r7, [r4, #2]
    if (!parsePathName(path, &fname, &path)) {
    7466:	4631      	mov	r1, r6
    7468:	ab01      	add	r3, sp, #4
    746a:	aa02      	add	r2, sp, #8
    746c:	4620      	mov	r0, r4
    746e:	f001 f94d 	bl	870c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    7472:	4606      	mov	r6, r0
    if (!open(parent, &fname, O_RDONLY)) {
    7474:	aa02      	add	r2, sp, #8
    7476:	4629      	mov	r1, r5
    7478:	2300      	movs	r3, #0
    747a:	4620      	mov	r0, r4
    if (!parsePathName(path, &fname, &path)) {
    747c:	2e00      	cmp	r6, #0
    747e:	d1c9      	bne.n	7414 <FatFile::mkdir(FatFile*, char const*, bool)+0x30>
  switch (vol->fatType()) {
    7480:	2000      	movs	r0, #0
}
    7482:	b014      	add	sp, #80	; 0x50
    7484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      path++;
    7488:	3601      	adds	r6, #1
    748a:	9601      	str	r6, [sp, #4]
    while (isDirSeparator(*path)) {
    748c:	7833      	ldrb	r3, [r6, #0]
    748e:	2b2f      	cmp	r3, #47	; 0x2f
    7490:	d0fa      	beq.n	7488 <FatFile::mkdir(FatFile*, char const*, bool)+0xa4>
    if (!tmpDir.openRoot(parent->m_vol)) {
    7492:	68ad      	ldr	r5, [r5, #8]
  memset(this, 0, sizeof(FatFile));
    7494:	2224      	movs	r2, #36	; 0x24
    7496:	2100      	movs	r1, #0
    7498:	a80b      	add	r0, sp, #44	; 0x2c
    749a:	f009 fd8b 	bl	10fb4 <memset>
  m_vol = vol;
    749e:	950d      	str	r5, [sp, #52]	; 0x34
    return m_fatType;
    74a0:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    74a2:	2b10      	cmp	r3, #16
    74a4:	d003      	beq.n	74ae <FatFile::mkdir(FatFile*, char const*, bool)+0xca>
    74a6:	2b20      	cmp	r3, #32
    74a8:	d00f      	beq.n	74ca <FatFile::mkdir(FatFile*, char const*, bool)+0xe6>
    74aa:	2b0c      	cmp	r3, #12
    74ac:	d1e8      	bne.n	7480 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    74ae:	2320      	movs	r3, #32
    m_attributes = FILE_ATTR_ROOT_FIXED;
    74b0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  m_flags = FILE_FLAG_READ;
    74b4:	2301      	movs	r3, #1
    parent = &tmpDir;
    74b6:	ad0b      	add	r5, sp, #44	; 0x2c
  m_flags = FILE_FLAG_READ;
    74b8:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  return true;
    74bc:	e7a8      	b.n	7410 <FatFile::mkdir(FatFile*, char const*, bool)+0x2c>
  return mkdir(parent, &fname);
    74be:	aa02      	add	r2, sp, #8
    74c0:	f7ff feda 	bl	7278 <FatFile::mkdir(FatFile*, FatLfn_t*)>
}
    74c4:	b014      	add	sp, #80	; 0x50
    74c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (vol->fatType()) {
    74ca:	2340      	movs	r3, #64	; 0x40
    74cc:	e7f0      	b.n	74b0 <FatFile::mkdir(FatFile*, char const*, bool)+0xcc>
    74ce:	bf00      	nop

000074d0 <FatFile::open(FatFile*, char const*, int)>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    74d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    74d4:	2500      	movs	r5, #0
    74d6:	b094      	sub	sp, #80	; 0x50
    74d8:	4698      	mov	r8, r3
  if (isOpen() || !dirFile->isDir()) {
    74da:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    74dc:	9201      	str	r2, [sp, #4]
    74de:	9502      	str	r5, [sp, #8]
    74e0:	f8ad 5038 	strh.w	r5, [sp, #56]	; 0x38
  if (isOpen() || !dirFile->isDir()) {
    74e4:	2b00      	cmp	r3, #0
    74e6:	d137      	bne.n	7558 <FatFile::open(FatFile*, char const*, int)+0x88>
    74e8:	780b      	ldrb	r3, [r1, #0]
    74ea:	460e      	mov	r6, r1
    74ec:	f013 0f70 	tst.w	r3, #112	; 0x70
    74f0:	d032      	beq.n	7558 <FatFile::open(FatFile*, char const*, int)+0x88>
  if (isDirSeparator(*path)) {
    74f2:	7813      	ldrb	r3, [r2, #0]
    74f4:	4604      	mov	r4, r0
    74f6:	4615      	mov	r5, r2
    74f8:	2b2f      	cmp	r3, #47	; 0x2f
    74fa:	d031      	beq.n	7560 <FatFile::open(FatFile*, char const*, int)+0x90>
    if (!open(dirFile, &fname, O_RDONLY)) {
    74fc:	2700      	movs	r7, #0
    74fe:	e01e      	b.n	753e <FatFile::open(FatFile*, char const*, int)+0x6e>
    if (*path == 0) {
    7500:	9d01      	ldr	r5, [sp, #4]
    7502:	782d      	ldrb	r5, [r5, #0]
    7504:	2d00      	cmp	r5, #0
    7506:	d040      	beq.n	758a <FatFile::open(FatFile*, char const*, int)+0xba>
    if (!open(dirFile, &fname, O_RDONLY)) {
    7508:	f000 ffb4 	bl	8474 <FatFile::open(FatFile*, FatLfn_t*, int)>
    tmpDir = *this;
    750c:	46a6      	mov	lr, r4
    750e:	f10d 0c08 	add.w	ip, sp, #8
    if (!open(dirFile, &fname, O_RDONLY)) {
    7512:	b308      	cbz	r0, 7558 <FatFile::open(FatFile*, char const*, int)+0x88>
    dirFile = &tmpDir;
    7514:	4666      	mov	r6, ip
  if (!isOpen()) {
    7516:	7825      	ldrb	r5, [r4, #0]
    tmpDir = *this;
    7518:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    751c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    7520:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    7524:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    7528:	f8de 3000 	ldr.w	r3, [lr]
    752c:	4620      	mov	r0, r4
    752e:	f8cc 3000 	str.w	r3, [ip]
  if (!isOpen()) {
    7532:	b10d      	cbz	r5, 7538 <FatFile::open(FatFile*, char const*, int)+0x68>
    7534:	f7ff fd86 	bl	7044 <FatFile::sync() [clone .part.0]>
    if (!parsePathName(path, &fname, &path)) {
    7538:	9d01      	ldr	r5, [sp, #4]
  m_attributes = FILE_ATTR_CLOSED;
    753a:	7027      	strb	r7, [r4, #0]
  m_flags = 0;
    753c:	70a7      	strb	r7, [r4, #2]
    if (!parsePathName(path, &fname, &path)) {
    753e:	4629      	mov	r1, r5
    7540:	ab01      	add	r3, sp, #4
    7542:	aa0b      	add	r2, sp, #44	; 0x2c
    7544:	4620      	mov	r0, r4
    7546:	f001 f8e1 	bl	870c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    754a:	4605      	mov	r5, r0
    if (!open(dirFile, &fname, O_RDONLY)) {
    754c:	aa0b      	add	r2, sp, #44	; 0x2c
    754e:	4631      	mov	r1, r6
    7550:	2300      	movs	r3, #0
    7552:	4620      	mov	r0, r4
    if (!parsePathName(path, &fname, &path)) {
    7554:	2d00      	cmp	r5, #0
    7556:	d1d3      	bne.n	7500 <FatFile::open(FatFile*, char const*, int)+0x30>
  return false;
    7558:	2000      	movs	r0, #0
}
    755a:	b014      	add	sp, #80	; 0x50
    755c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      path++;
    7560:	3501      	adds	r5, #1
    7562:	9501      	str	r5, [sp, #4]
    while (isDirSeparator(*path)) {
    7564:	7829      	ldrb	r1, [r5, #0]
    7566:	292f      	cmp	r1, #47	; 0x2f
    7568:	d0fa      	beq.n	7560 <FatFile::open(FatFile*, char const*, int)+0x90>
    if (*path == 0) {
    756a:	b9a9      	cbnz	r1, 7598 <FatFile::open(FatFile*, char const*, int)+0xc8>
      return openRoot(dirFile->m_vol);
    756c:	68b5      	ldr	r5, [r6, #8]
  memset(this, 0, sizeof(FatFile));
    756e:	2224      	movs	r2, #36	; 0x24
    7570:	4620      	mov	r0, r4
    7572:	f009 fd1f 	bl	10fb4 <memset>
  m_vol = vol;
    7576:	60a5      	str	r5, [r4, #8]
    7578:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    757a:	2b10      	cmp	r3, #16
    757c:	d003      	beq.n	7586 <FatFile::open(FatFile*, char const*, int)+0xb6>
    757e:	2b20      	cmp	r3, #32
    7580:	d022      	beq.n	75c8 <FatFile::open(FatFile*, char const*, int)+0xf8>
    7582:	2b0c      	cmp	r3, #12
    7584:	d1e8      	bne.n	7558 <FatFile::open(FatFile*, char const*, int)+0x88>
    7586:	2220      	movs	r2, #32
    7588:	e01f      	b.n	75ca <FatFile::open(FatFile*, char const*, int)+0xfa>
  return open(dirFile, &fname, oflag);
    758a:	4643      	mov	r3, r8
    758c:	aa0b      	add	r2, sp, #44	; 0x2c
    758e:	f000 ff71 	bl	8474 <FatFile::open(FatFile*, FatLfn_t*, int)>
}
    7592:	b014      	add	sp, #80	; 0x50
    7594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    7598:	68b6      	ldr	r6, [r6, #8]
  memset(this, 0, sizeof(FatFile));
    759a:	2224      	movs	r2, #36	; 0x24
    759c:	2100      	movs	r1, #0
    759e:	a802      	add	r0, sp, #8
    75a0:	f009 fd08 	bl	10fb4 <memset>
  m_vol = vol;
    75a4:	9604      	str	r6, [sp, #16]
    75a6:	79f3      	ldrb	r3, [r6, #7]
  switch (vol->fatType()) {
    75a8:	2b10      	cmp	r3, #16
    75aa:	d003      	beq.n	75b4 <FatFile::open(FatFile*, char const*, int)+0xe4>
    75ac:	2b20      	cmp	r3, #32
    75ae:	d003      	beq.n	75b8 <FatFile::open(FatFile*, char const*, int)+0xe8>
    75b0:	2b0c      	cmp	r3, #12
    75b2:	d1d1      	bne.n	7558 <FatFile::open(FatFile*, char const*, int)+0x88>
    75b4:	2320      	movs	r3, #32
    75b6:	e000      	b.n	75ba <FatFile::open(FatFile*, char const*, int)+0xea>
    75b8:	2340      	movs	r3, #64	; 0x40
    m_attributes = FILE_ATTR_ROOT_FIXED;
    75ba:	f88d 3008 	strb.w	r3, [sp, #8]
  m_flags = FILE_FLAG_READ;
    75be:	2301      	movs	r3, #1
    dirFile = &tmpDir;
    75c0:	ae02      	add	r6, sp, #8
  m_flags = FILE_FLAG_READ;
    75c2:	f88d 300a 	strb.w	r3, [sp, #10]
  return true;
    75c6:	e799      	b.n	74fc <FatFile::open(FatFile*, char const*, int)+0x2c>
  switch (vol->fatType()) {
    75c8:	2240      	movs	r2, #64	; 0x40
  m_flags = FILE_FLAG_READ;
    75ca:	2301      	movs	r3, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    75cc:	7022      	strb	r2, [r4, #0]
  return true;
    75ce:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    75d0:	70a3      	strb	r3, [r4, #2]
  return true;
    75d2:	e7c2      	b.n	755a <FatFile::open(FatFile*, char const*, int)+0x8a>

000075d4 <FatFile::open(FatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    75d4:	b119      	cbz	r1, 75de <FatFile::open(FatVolume*, char const*, int)+0xa>
    75d6:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    75da:	f7ff bf79 	b.w	74d0 <FatFile::open(FatFile*, char const*, int)>
}
    75de:	4608      	mov	r0, r1
    75e0:	4770      	bx	lr
    75e2:	bf00      	nop

000075e4 <FatFile::openCluster(FatFile*)>:
  if (file->m_dirCluster == 0) {
    75e4:	68cb      	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
    75e6:	b570      	push	{r4, r5, r6, lr}
    75e8:	460d      	mov	r5, r1
    75ea:	4604      	mov	r4, r0
  if (file->m_dirCluster == 0) {
    75ec:	b993      	cbnz	r3, 7614 <FatFile::openCluster(FatFile*)+0x30>
  if (isOpen()) {
    75ee:	7806      	ldrb	r6, [r0, #0]
    75f0:	b10e      	cbz	r6, 75f6 <FatFile::openCluster(FatFile*)+0x12>
  return false;
    75f2:	4618      	mov	r0, r3
}
    75f4:	bd70      	pop	{r4, r5, r6, pc}
    return openRoot(file->m_vol);
    75f6:	688d      	ldr	r5, [r1, #8]
  memset(this, 0, sizeof(FatFile));
    75f8:	2224      	movs	r2, #36	; 0x24
    75fa:	4631      	mov	r1, r6
    75fc:	f009 fcda 	bl	10fb4 <memset>
  m_vol = vol;
    7600:	60a5      	str	r5, [r4, #8]
    7602:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    7604:	2b10      	cmp	r3, #16
    7606:	d018      	beq.n	763a <FatFile::openCluster(FatFile*)+0x56>
    7608:	2b20      	cmp	r3, #32
    760a:	d010      	beq.n	762e <FatFile::openCluster(FatFile*)+0x4a>
    760c:	2b0c      	cmp	r3, #12
    760e:	d014      	beq.n	763a <FatFile::openCluster(FatFile*)+0x56>
    7610:	4630      	mov	r0, r6
}
    7612:	bd70      	pop	{r4, r5, r6, pc}
  memset(this, 0, sizeof(FatFile));
    7614:	2224      	movs	r2, #36	; 0x24
    7616:	2100      	movs	r1, #0
    7618:	f009 fccc 	bl	10fb4 <memset>
  m_flags = FILE_FLAG_READ;
    761c:	2001      	movs	r0, #1
  m_attributes = FILE_ATTR_SUBDIR;
    761e:	2310      	movs	r3, #16
  m_flags = FILE_FLAG_READ;
    7620:	70a0      	strb	r0, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    7622:	7023      	strb	r3, [r4, #0]
  m_firstCluster = file->m_dirCluster;
    7624:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
  m_vol = file->m_vol;
    7628:	60a2      	str	r2, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    762a:	6223      	str	r3, [r4, #32]
}
    762c:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    762e:	2240      	movs	r2, #64	; 0x40
  m_flags = FILE_FLAG_READ;
    7630:	2301      	movs	r3, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    7632:	7022      	strb	r2, [r4, #0]
  return true;
    7634:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    7636:	70a3      	strb	r3, [r4, #2]
}
    7638:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    763a:	2220      	movs	r2, #32
    763c:	e7f8      	b.n	7630 <FatFile::openCluster(FatFile*)+0x4c>
    763e:	bf00      	nop

00007640 <FatFile::openRoot(FatVolume*)>:
bool FatFile::openRoot(FatVolume* vol) {
    7640:	b570      	push	{r4, r5, r6, lr}
  if (isOpen()) {
    7642:	7805      	ldrb	r5, [r0, #0]
    7644:	b10d      	cbz	r5, 764a <FatFile::openRoot(FatVolume*)+0xa>
  return false;
    7646:	2000      	movs	r0, #0
}
    7648:	bd70      	pop	{r4, r5, r6, pc}
    764a:	460e      	mov	r6, r1
    764c:	4604      	mov	r4, r0
  memset(this, 0, sizeof(FatFile));
    764e:	2224      	movs	r2, #36	; 0x24
    7650:	4629      	mov	r1, r5
    7652:	f009 fcaf 	bl	10fb4 <memset>
  m_vol = vol;
    7656:	60a6      	str	r6, [r4, #8]
    7658:	79f3      	ldrb	r3, [r6, #7]
  switch (vol->fatType()) {
    765a:	2b10      	cmp	r3, #16
    765c:	d00b      	beq.n	7676 <FatFile::openRoot(FatVolume*)+0x36>
    765e:	2b20      	cmp	r3, #32
    7660:	d003      	beq.n	766a <FatFile::openRoot(FatVolume*)+0x2a>
    7662:	2b0c      	cmp	r3, #12
    7664:	d007      	beq.n	7676 <FatFile::openRoot(FatVolume*)+0x36>
    7666:	4628      	mov	r0, r5
}
    7668:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    766a:	2240      	movs	r2, #64	; 0x40
  m_flags = FILE_FLAG_READ;
    766c:	2301      	movs	r3, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    766e:	7022      	strb	r2, [r4, #0]
  return true;
    7670:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    7672:	70a3      	strb	r3, [r4, #2]
}
    7674:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    7676:	2220      	movs	r2, #32
    7678:	e7f8      	b.n	766c <FatFile::openRoot(FatVolume*)+0x2c>
    767a:	bf00      	nop

0000767c <FatFile::read(void*, unsigned int)>:
int FatFile::read(void* buf, size_t nbyte) {
    767c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7680:	ed2d 8b02 	vpush	{d8}
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    7684:	7883      	ldrb	r3, [r0, #2]
    7686:	b083      	sub	sp, #12
    7688:	4605      	mov	r5, r0
  if (!isReadable()) {
    768a:	07df      	lsls	r7, r3, #31
    768c:	f140 808c 	bpl.w	77a8 <FatFile::read(void*, unsigned int)+0x12c>
  bool isFile() const {return m_attributes & FILE_ATTR_FILE;}
    7690:	4688      	mov	r8, r1
    7692:	7801      	ldrb	r1, [r0, #0]
    7694:	4692      	mov	sl, r2
  if (isFile()) {
    7696:	070e      	lsls	r6, r1, #28
    7698:	f100 8091 	bmi.w	77be <FatFile::read(void*, unsigned int)+0x142>
  } else if (isRootFixed()) {
    769c:	068c      	lsls	r4, r1, #26
    769e:	d508      	bpl.n	76b2 <FatFile::read(void*, unsigned int)+0x36>
      FS_DIR_SIZE*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    76a0:	6883      	ldr	r3, [r0, #8]
    76a2:	895a      	ldrh	r2, [r3, #10]
    76a4:	6943      	ldr	r3, [r0, #20]
    uint16_t tmp16 =
    76a6:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
    76aa:	b29b      	uxth	r3, r3
    76ac:	459a      	cmp	sl, r3
    76ae:	bf28      	it	cs
    76b0:	469a      	movcs	sl, r3
  while (toRead) {
    76b2:	f1ba 0f00 	cmp.w	sl, #0
    76b6:	f000 80af 	beq.w	7818 <FatFile::read(void*, unsigned int)+0x19c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    76ba:	696a      	ldr	r2, [r5, #20]
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    76bc:	f105 0310 	add.w	r3, r5, #16
    if (isRootFixed()) {
    76c0:	0688      	lsls	r0, r1, #26
    uint32_t tmp32 = m_fileSize - m_curPosition;
    76c2:	4656      	mov	r6, sl
  uint8_t sectorOfCluster = 0;
    76c4:	f04f 0900 	mov.w	r9, #0
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    76c8:	ee08 3a10 	vmov	s16, r3
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    76cc:	68af      	ldr	r7, [r5, #8]
    76ce:	f3c2 0b08 	ubfx	fp, r2, #0, #9
    if (isRootFixed()) {
    76d2:	d53d      	bpl.n	7750 <FatFile::read(void*, unsigned int)+0xd4>
      sector = m_vol->rootDirStart()
    76d4:	6a39      	ldr	r1, [r7, #32]
    76d6:	eb01 2152 	add.w	r1, r1, r2, lsr #9
        || sector == m_vol->cacheSectorNumber()) {
    76da:	f1bb 0f00 	cmp.w	fp, #0
    76de:	d151      	bne.n	7784 <FatFile::read(void*, unsigned int)+0x108>
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    76e0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    76e4:	d34e      	bcc.n	7784 <FatFile::read(void*, unsigned int)+0x108>
    return m_sector;
    76e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
        || sector == m_vol->cacheSectorNumber()) {
    76e8:	4291      	cmp	r1, r2
    76ea:	d04b      	beq.n	7784 <FatFile::read(void*, unsigned int)+0x108>
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    76ec:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    76f0:	f0c0 8082 	bcc.w	77f8 <FatFile::read(void*, unsigned int)+0x17c>
      if (!isRootFixed()) {
    76f4:	7828      	ldrb	r0, [r5, #0]
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    76f6:	0a73      	lsrs	r3, r6, #9
      if (!isRootFixed()) {
    76f8:	0680      	lsls	r0, r0, #26
    76fa:	d405      	bmi.n	7708 <FatFile::read(void*, unsigned int)+0x8c>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    76fc:	7938      	ldrb	r0, [r7, #4]
    76fe:	eba0 0009 	sub.w	r0, r0, r9
    7702:	4283      	cmp	r3, r0
    7704:	bf28      	it	cs
    7706:	4603      	movcs	r3, r0
    return sector <= m_sector && m_sector < (sector + count);
    7708:	4291      	cmp	r1, r2
      n = ns << m_vol->bytesPerSectorShift();
    770a:	ea4f 2443 	mov.w	r4, r3, lsl #9
    770e:	d80c      	bhi.n	772a <FatFile::read(void*, unsigned int)+0xae>
    7710:	18c8      	adds	r0, r1, r3
    7712:	4282      	cmp	r2, r0
    7714:	d209      	bcs.n	772a <FatFile::read(void*, unsigned int)+0xae>
    if (isCached(sector, count) && !sync()) {
    7716:	f107 0028 	add.w	r0, r7, #40	; 0x28
    771a:	e9cd 1300 	strd	r1, r3, [sp]
    771e:	f004 fb73 	bl	be08 <FsCache::sync()>
    7722:	e9dd 1300 	ldrd	r1, r3, [sp]
    7726:	2800      	cmp	r0, #0
    7728:	d03e      	beq.n	77a8 <FatFile::read(void*, unsigned int)+0x12c>
    return m_blockDev->readSectors(sector, dst, count);
    772a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    772c:	6802      	ldr	r2, [r0, #0]
    772e:	6957      	ldr	r7, [r2, #20]
    7730:	4642      	mov	r2, r8
    7732:	47b8      	blx	r7
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    7734:	2800      	cmp	r0, #0
    7736:	d037      	beq.n	77a8 <FatFile::read(void*, unsigned int)+0x12c>
    m_curPosition += n;
    7738:	696a      	ldr	r2, [r5, #20]
  while (toRead) {
    773a:	1b36      	subs	r6, r6, r4
    dst += n;
    773c:	44a0      	add	r8, r4
    m_curPosition += n;
    773e:	4422      	add	r2, r4
    7740:	616a      	str	r2, [r5, #20]
  while (toRead) {
    7742:	d069      	beq.n	7818 <FatFile::read(void*, unsigned int)+0x19c>
  bool isRootFixed() const {return m_attributes & FILE_ATTR_ROOT_FIXED;}
    7744:	7829      	ldrb	r1, [r5, #0]
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    7746:	f3c2 0b08 	ubfx	fp, r2, #0, #9
    774a:	68af      	ldr	r7, [r5, #8]
    if (isRootFixed()) {
    774c:	0688      	lsls	r0, r1, #26
    774e:	d4c1      	bmi.n	76d4 <FatFile::read(void*, unsigned int)+0x58>
    return (position >> 9) & m_clusterSectorMask;
    7750:	f897 9005 	ldrb.w	r9, [r7, #5]
    7754:	ea09 2952 	and.w	r9, r9, r2, lsr #9
      if (offset == 0 && sectorOfCluster == 0) {
    7758:	f1bb 0f00 	cmp.w	fp, #0
    775c:	d136      	bne.n	77cc <FatFile::read(void*, unsigned int)+0x150>
    775e:	f1b9 0f00 	cmp.w	r9, #0
    7762:	d133      	bne.n	77cc <FatFile::read(void*, unsigned int)+0x150>
        if (m_curPosition == 0) {
    7764:	2a00      	cmp	r2, #0
    7766:	d133      	bne.n	77d0 <FatFile::read(void*, unsigned int)+0x154>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    7768:	064a      	lsls	r2, r1, #25
    return m_rootDirStart;
    776a:	bf4c      	ite	mi
    776c:	6a3a      	ldrmi	r2, [r7, #32]
    776e:	6a2a      	ldrpl	r2, [r5, #32]
          m_curCluster++;
    7770:	612a      	str	r2, [r5, #16]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7772:	3a02      	subs	r2, #2
    7774:	79b8      	ldrb	r0, [r7, #6]
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    7776:	6979      	ldr	r1, [r7, #20]
    7778:	4082      	lsls	r2, r0
    777a:	4449      	add	r1, r9
    777c:	4411      	add	r1, r2
        || sector == m_vol->cacheSectorNumber()) {
    777e:	f1bb 0f00 	cmp.w	fp, #0
    7782:	d0ad      	beq.n	76e0 <FatFile::read(void*, unsigned int)+0x64>
      n = m_vol->bytesPerSector() - offset;
    7784:	f5cb 7400 	rsb	r4, fp, #512	; 0x200
    return m_cache.prepare(sector, options);
    7788:	2200      	movs	r2, #0
    778a:	f107 0028 	add.w	r0, r7, #40	; 0x28
    778e:	42b4      	cmp	r4, r6
    7790:	bf28      	it	cs
    7792:	4634      	movcs	r4, r6
    7794:	f004 fb64 	bl	be60 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    7798:	b130      	cbz	r0, 77a8 <FatFile::read(void*, unsigned int)+0x12c>
      memcpy(dst, src, n);
    779a:	eb00 010b 	add.w	r1, r0, fp
    779e:	4622      	mov	r2, r4
    77a0:	4640      	mov	r0, r8
    77a2:	f005 fed5 	bl	d550 <memcpy>
    77a6:	e7c7      	b.n	7738 <FatFile::read(void*, unsigned int)+0xbc>
  m_error |= READ_ERROR;
    77a8:	786b      	ldrb	r3, [r5, #1]
  return -1;
    77aa:	f04f 30ff 	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    77ae:	f043 0302 	orr.w	r3, r3, #2
    77b2:	706b      	strb	r3, [r5, #1]
}
    77b4:	b003      	add	sp, #12
    77b6:	ecbd 8b02 	vpop	{d8}
    77ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint32_t tmp32 = m_fileSize - m_curPosition;
    77be:	69c3      	ldr	r3, [r0, #28]
    77c0:	6942      	ldr	r2, [r0, #20]
    77c2:	1a9b      	subs	r3, r3, r2
    77c4:	459a      	cmp	sl, r3
    77c6:	bf28      	it	cs
    77c8:	469a      	movcs	sl, r3
    77ca:	e772      	b.n	76b2 <FatFile::read(void*, unsigned int)+0x36>
          m_curCluster++;
    77cc:	692a      	ldr	r2, [r5, #16]
    77ce:	e7d0      	b.n	7772 <FatFile::read(void*, unsigned int)+0xf6>
        } else if (isFile() && isContiguous()) {
    77d0:	070b      	lsls	r3, r1, #28
    77d2:	d505      	bpl.n	77e0 <FatFile::read(void*, unsigned int)+0x164>
    77d4:	78aa      	ldrb	r2, [r5, #2]
    77d6:	0654      	lsls	r4, r2, #25
    77d8:	d502      	bpl.n	77e0 <FatFile::read(void*, unsigned int)+0x164>
          m_curCluster++;
    77da:	692a      	ldr	r2, [r5, #16]
    77dc:	3201      	adds	r2, #1
    77de:	e7c7      	b.n	7770 <FatFile::read(void*, unsigned int)+0xf4>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    77e0:	ee18 2a10 	vmov	r2, s16
    77e4:	4638      	mov	r0, r7
    77e6:	6929      	ldr	r1, [r5, #16]
    77e8:	f001 fdfe 	bl	93e8 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    77ec:	2800      	cmp	r0, #0
    77ee:	dbdb      	blt.n	77a8 <FatFile::read(void*, unsigned int)+0x12c>
          if (fg == 0) {
    77f0:	d00c      	beq.n	780c <FatFile::read(void*, unsigned int)+0x190>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    77f2:	68af      	ldr	r7, [r5, #8]
    77f4:	692a      	ldr	r2, [r5, #16]
    77f6:	e7bc      	b.n	7772 <FatFile::read(void*, unsigned int)+0xf6>
    return m_blockDev->readSector(sector, dst);
    77f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    77fa:	4642      	mov	r2, r8
    77fc:	6803      	ldr	r3, [r0, #0]
    77fe:	691b      	ldr	r3, [r3, #16]
    7800:	4798      	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    7802:	2800      	cmp	r0, #0
    7804:	d0d0      	beq.n	77a8 <FatFile::read(void*, unsigned int)+0x12c>
      n = m_vol->bytesPerSector();
    7806:	f44f 7400 	mov.w	r4, #512	; 0x200
    780a:	e795      	b.n	7738 <FatFile::read(void*, unsigned int)+0xbc>
            if (isDir()) {
    780c:	782b      	ldrb	r3, [r5, #0]
    780e:	f013 0f70 	tst.w	r3, #112	; 0x70
    7812:	d0c9      	beq.n	77a8 <FatFile::read(void*, unsigned int)+0x12c>
  return nbyte - toRead;
    7814:	ebaa 0a06 	sub.w	sl, sl, r6
    7818:	4650      	mov	r0, sl
}
    781a:	b003      	add	sp, #12
    781c:	ecbd 8b02 	vpop	{d8}
    7820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00007824 <FatFile::peek()>:
int FatFile::peek() {
    7824:	b570      	push	{r4, r5, r6, lr}
    7826:	b082      	sub	sp, #8
    return read(&b, 1) == 1 ? b : -1;
    7828:	2201      	movs	r2, #1
    782a:	4604      	mov	r4, r0
    782c:	f10d 0107 	add.w	r1, sp, #7
  uint32_t curCluster = m_curCluster;
    7830:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
    7834:	f7ff ff22 	bl	767c <FatFile::read(void*, unsigned int)>
    7838:	2801      	cmp	r0, #1
    783a:	bf0c      	ite	eq
    783c:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    7840:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = curCluster;
    7844:	e9c4 5604 	strd	r5, r6, [r4, #16]
}
    7848:	b002      	add	sp, #8
    784a:	bd70      	pop	{r4, r5, r6, pc}

0000784c <FatFile::readDirCache(bool)>:
  uint8_t i = (m_curPosition >> 5) & 0XF;
    784c:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
    784e:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    7852:	b530      	push	{r4, r5, lr}
    7854:	4604      	mov	r4, r0
    7856:	b083      	sub	sp, #12
  uint8_t i = (m_curPosition >> 5) & 0XF;
    7858:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
    785c:	d009      	beq.n	7872 <FatFile::readDirCache(bool)+0x26>
    785e:	2901      	cmp	r1, #1
    7860:	d107      	bne.n	7872 <FatFile::readDirCache(bool)+0x26>
    m_curPosition += FS_DIR_SIZE;
    7862:	3320      	adds	r3, #32
    7864:	6143      	str	r3, [r0, #20]
    return m_buffer;
    7866:	68a0      	ldr	r0, [r4, #8]
    7868:	3038      	adds	r0, #56	; 0x38
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    786a:	eb00 1045 	add.w	r0, r0, r5, lsl #5
}
    786e:	b003      	add	sp, #12
    7870:	bd30      	pop	{r4, r5, pc}
    int8_t n = read(&n, 1);
    7872:	2201      	movs	r2, #1
    7874:	f10d 0107 	add.w	r1, sp, #7
    7878:	4620      	mov	r0, r4
    787a:	f7ff feff 	bl	767c <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
    787e:	b240      	sxtb	r0, r0
    7880:	2801      	cmp	r0, #1
    7882:	d103      	bne.n	788c <FatFile::readDirCache(bool)+0x40>
    m_curPosition += FS_DIR_SIZE - 1;
    7884:	6963      	ldr	r3, [r4, #20]
    7886:	331f      	adds	r3, #31
    7888:	6163      	str	r3, [r4, #20]
    788a:	e7ec      	b.n	7866 <FatFile::readDirCache(bool)+0x1a>
  return nullptr;
    788c:	2000      	movs	r0, #0
    788e:	e7ee      	b.n	786e <FatFile::readDirCache(bool)+0x22>

00007890 <FatFile::rename(FatFile*, char const*)>:
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    7890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!(isFile() || isSubDir())) {
    7894:	7803      	ldrb	r3, [r0, #0]
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    7896:	b09a      	sub	sp, #104	; 0x68
  FatFile() {}
    7898:	2600      	movs	r6, #0
  if (!(isFile() || isSubDir())) {
    789a:	f013 0f18 	tst.w	r3, #24
    789e:	9608      	str	r6, [sp, #32]
    78a0:	9611      	str	r6, [sp, #68]	; 0x44
    78a2:	d006      	beq.n	78b2 <FatFile::rename(FatFile*, char const*)+0x22>
    78a4:	4617      	mov	r7, r2
  if (m_vol != dirFile->m_vol) {
    78a6:	6883      	ldr	r3, [r0, #8]
    78a8:	688a      	ldr	r2, [r1, #8]
    78aa:	4604      	mov	r4, r0
    78ac:	460d      	mov	r5, r1
    78ae:	429a      	cmp	r2, r3
    78b0:	d003      	beq.n	78ba <FatFile::rename(FatFile*, char const*)+0x2a>
  return false;
    78b2:	2000      	movs	r0, #0
}
    78b4:	b01a      	add	sp, #104	; 0x68
    78b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    78ba:	f7ff fbc3 	bl	7044 <FatFile::sync() [clone .part.0]>
  oldFile = *this;
    78be:	46a6      	mov	lr, r4
    78c0:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
    78c4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    78c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    78cc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    78d0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    78d4:	f8de 3000 	ldr.w	r3, [lr]
    78d8:	4632      	mov	r2, r6
    78da:	69a1      	ldr	r1, [r4, #24]
    78dc:	f8cc 3000 	str.w	r3, [ip]
    78e0:	68a3      	ldr	r3, [r4, #8]
    78e2:	f103 0028 	add.w	r0, r3, #40	; 0x28
    78e6:	f004 fabb 	bl	be60 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    78ea:	2800      	cmp	r0, #0
    78ec:	d0e1      	beq.n	78b2 <FatFile::rename(FatFile*, char const*)+0x22>
  return dir + (m_dirIndex & 0XF);
    78ee:	88a2      	ldrh	r2, [r4, #4]
  memcpy(&entry, dir, sizeof(entry));
    78f0:	46ec      	mov	ip, sp
  if (isFile()) {
    78f2:	f894 8000 	ldrb.w	r8, [r4]
  return dir + (m_dirIndex & 0XF);
    78f6:	f002 020f 	and.w	r2, r2, #15
  memcpy(&entry, dir, sizeof(entry));
    78fa:	eb00 1e42 	add.w	lr, r0, r2, lsl #5
    78fe:	0152      	lsls	r2, r2, #5
    7900:	f8de 1004 	ldr.w	r1, [lr, #4]
    7904:	5880      	ldr	r0, [r0, r2]
    7906:	f8de 300c 	ldr.w	r3, [lr, #12]
    790a:	f8de 2008 	ldr.w	r2, [lr, #8]
    790e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    7912:	f8de 1014 	ldr.w	r1, [lr, #20]
    7916:	f8de 2018 	ldr.w	r2, [lr, #24]
    791a:	f8de 301c 	ldr.w	r3, [lr, #28]
    791e:	f8de 0010 	ldr.w	r0, [lr, #16]
    7922:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
  if (isFile()) {
    7926:	f018 0308 	ands.w	r3, r8, #8
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    792a:	463a      	mov	r2, r7
    792c:	4629      	mov	r1, r5
  if (isFile()) {
    792e:	f040 809b 	bne.w	7a68 <FatFile::rename(FatFile*, char const*)+0x1d8>
    if (!file.mkdir(dirFile, newPath, false)) {
    7932:	a808      	add	r0, sp, #32
    7934:	f7ff fd56 	bl	73e4 <FatFile::mkdir(FatFile*, char const*, bool)>
    7938:	2800      	cmp	r0, #0
    793a:	d0ba      	beq.n	78b2 <FatFile::rename(FatFile*, char const*)+0x22>
    dirCluster = file.m_firstCluster;
    793c:	9e10      	ldr	r6, [sp, #64]	; 0x40
  m_dirIndex = file.m_dirIndex;
    793e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  file.m_attributes = FILE_ATTR_CLOSED;
    7942:	2500      	movs	r5, #0
  m_dirSector = file.m_dirSector;
    7944:	990e      	ldr	r1, [sp, #56]	; 0x38
    7946:	2201      	movs	r2, #1
  m_dirIndex = file.m_dirIndex;
    7948:	80a3      	strh	r3, [r4, #4]
  m_lfnOrd = file.m_lfnOrd;
    794a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    794e:	68a0      	ldr	r0, [r4, #8]
    7950:	70e3      	strb	r3, [r4, #3]
  m_dirCluster = file.m_dirCluster;
    7952:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7954:	3028      	adds	r0, #40	; 0x28
  m_dirSector = file.m_dirSector;
    7956:	61a1      	str	r1, [r4, #24]
  m_dirCluster = file.m_dirCluster;
    7958:	60e3      	str	r3, [r4, #12]
  file.m_attributes = FILE_ATTR_CLOSED;
    795a:	f88d 5020 	strb.w	r5, [sp, #32]
  file.m_flags = 0;
    795e:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
    7962:	f004 fa7d 	bl	be60 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    7966:	2800      	cmp	r0, #0
    7968:	d0a3      	beq.n	78b2 <FatFile::rename(FatFile*, char const*)+0x22>
  return dir + (m_dirIndex & 0XF);
    796a:	88a3      	ldrh	r3, [r4, #4]
    796c:	f003 030f 	and.w	r3, r3, #15
    7970:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
    7974:	f8dd 300d 	ldr.w	r3, [sp, #13]
    7978:	f8c0 300d 	str.w	r3, [r0, #13]
    797c:	f8dd 3011 	ldr.w	r3, [sp, #17]
    7980:	f8c0 3011 	str.w	r3, [r0, #17]
    7984:	f8dd 3015 	ldr.w	r3, [sp, #21]
    7988:	f8c0 3015 	str.w	r3, [r0, #21]
    798c:	f8dd 3019 	ldr.w	r3, [sp, #25]
    7990:	f8c0 3019 	str.w	r3, [r0, #25]
    7994:	f8bd 301d 	ldrh.w	r3, [sp, #29]
    7998:	f8a0 301d 	strh.w	r3, [r0, #29]
    799c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    79a0:	77c3      	strb	r3, [r0, #31]
  dir->attributes = entry.attributes;
    79a2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    79a6:	72c3      	strb	r3, [r0, #11]
  if (dirCluster) {
    79a8:	2e00      	cmp	r6, #0
    79aa:	d03b      	beq.n	7a24 <FatFile::rename(FatFile*, char const*)+0x194>
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    79ac:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    79ae:	1eb3      	subs	r3, r6, #2
    return m_cache.prepare(sector, options);
    79b0:	462a      	mov	r2, r5
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    79b2:	7981      	ldrb	r1, [r0, #6]
    return m_cache.prepare(sector, options);
    79b4:	3028      	adds	r0, #40	; 0x28
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    79b6:	408b      	lsls	r3, r1
    79b8:	f850 1c14 	ldr.w	r1, [r0, #-20]
    return m_cache.prepare(sector, options);
    79bc:	4419      	add	r1, r3
    79be:	f004 fa4f 	bl	be60 <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    79c2:	4605      	mov	r5, r0
    79c4:	2800      	cmp	r0, #0
    79c6:	f43f af74 	beq.w	78b2 <FatFile::rename(FatFile*, char const*)+0x22>
    memcpy(&entry, &dir[1], sizeof(entry));
    79ca:	6a00      	ldr	r0, [r0, #32]
    79cc:	466f      	mov	r7, sp
    79ce:	6a69      	ldr	r1, [r5, #36]	; 0x24
    79d0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    79d2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    79d4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    79d6:	6b28      	ldr	r0, [r5, #48]	; 0x30
    79d8:	6b69      	ldr	r1, [r5, #52]	; 0x34
    79da:	6baa      	ldr	r2, [r5, #56]	; 0x38
    79dc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    79de:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    if (!m_vol->freeChain(dirCluster)) {
    79e0:	4631      	mov	r1, r6
    79e2:	68a0      	ldr	r0, [r4, #8]
    79e4:	f001 fd22 	bl	942c <FatPartition::freeChain(unsigned long)>
    79e8:	2800      	cmp	r0, #0
    79ea:	f43f af62 	beq.w	78b2 <FatFile::rename(FatFile*, char const*)+0x22>
    sector = m_vol->clusterStartSector(m_firstCluster);
    79ee:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    79f0:	6a23      	ldr	r3, [r4, #32]
    79f2:	7982      	ldrb	r2, [r0, #6]
    return m_cache.prepare(sector, options);
    79f4:	3028      	adds	r0, #40	; 0x28
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    79f6:	3b02      	subs	r3, #2
    79f8:	f850 1c14 	ldr.w	r1, [r0, #-20]
    79fc:	4093      	lsls	r3, r2
    return m_cache.prepare(sector, options);
    79fe:	2201      	movs	r2, #1
    7a00:	4419      	add	r1, r3
    7a02:	f004 fa2d 	bl	be60 <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    7a06:	4606      	mov	r6, r0
    7a08:	2800      	cmp	r0, #0
    7a0a:	f43f af52 	beq.w	78b2 <FatFile::rename(FatFile*, char const*)+0x22>
    memcpy(&dir[1], &entry, sizeof(entry));
    7a0e:	466d      	mov	r5, sp
    7a10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7a12:	6230      	str	r0, [r6, #32]
    7a14:	6271      	str	r1, [r6, #36]	; 0x24
    7a16:	62b2      	str	r2, [r6, #40]	; 0x28
    7a18:	62f3      	str	r3, [r6, #44]	; 0x2c
    7a1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7a1c:	6330      	str	r0, [r6, #48]	; 0x30
    7a1e:	6371      	str	r1, [r6, #52]	; 0x34
    7a20:	63b2      	str	r2, [r6, #56]	; 0x38
    7a22:	63f3      	str	r3, [r6, #60]	; 0x3c
  oldFile.m_firstCluster = 0;
    7a24:	2100      	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    7a26:	2202      	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    7a28:	2308      	movs	r3, #8
  if (!oldFile.remove()) {
    7a2a:	a811      	add	r0, sp, #68	; 0x44
  oldFile.m_firstCluster = 0;
    7a2c:	9119      	str	r1, [sp, #100]	; 0x64
  oldFile.m_flags = FILE_FLAG_WRITE;
    7a2e:	f88d 2046 	strb.w	r2, [sp, #70]	; 0x46
  oldFile.m_attributes = FILE_ATTR_FILE;
    7a32:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
  if (!oldFile.remove()) {
    7a36:	f000 fed3 	bl	87e0 <FatFile::remove()>
    7a3a:	2800      	cmp	r0, #0
    7a3c:	f43f af39 	beq.w	78b2 <FatFile::rename(FatFile*, char const*)+0x22>
  return m_vol->cacheSync();
    7a40:	68a4      	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    7a42:	f104 0028 	add.w	r0, r4, #40	; 0x28
    7a46:	f004 f9df 	bl	be08 <FsCache::sync()>
    7a4a:	2800      	cmp	r0, #0
    7a4c:	f43f af31 	beq.w	78b2 <FatFile::rename(FatFile*, char const*)+0x22>
    7a50:	f504 700e 	add.w	r0, r4, #568	; 0x238
    7a54:	f004 f9d8 	bl	be08 <FsCache::sync()>
    7a58:	2800      	cmp	r0, #0
    7a5a:	f43f af2a 	beq.w	78b2 <FatFile::rename(FatFile*, char const*)+0x22>
    7a5e:	6820      	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
    7a60:	6803      	ldr	r3, [r0, #0]
    7a62:	6a1b      	ldr	r3, [r3, #32]
    7a64:	4798      	blx	r3
    7a66:	e725      	b.n	78b4 <FatFile::rename(FatFile*, char const*)+0x24>
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    7a68:	f640 2301 	movw	r3, #2561	; 0xa01
    7a6c:	4660      	mov	r0, ip
    7a6e:	f7ff fd2f 	bl	74d0 <FatFile::open(FatFile*, char const*, int)>
    7a72:	2800      	cmp	r0, #0
    7a74:	f47f af63 	bne.w	793e <FatFile::rename(FatFile*, char const*)+0xae>
    7a78:	e71b      	b.n	78b2 <FatFile::rename(FatFile*, char const*)+0x22>
    7a7a:	bf00      	nop

00007a7c <FatFile::rmdir()>:
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    7a7c:	7803      	ldrb	r3, [r0, #0]
    7a7e:	06da      	lsls	r2, r3, #27
    7a80:	d401      	bmi.n	7a86 <FatFile::rmdir()+0xa>
}
    7a82:	2000      	movs	r0, #0
    7a84:	4770      	bx	lr
  if (pos == m_curPosition) {
    7a86:	6943      	ldr	r3, [r0, #20]
bool FatFile::rmdir() {
    7a88:	b530      	push	{r4, r5, lr}
    7a8a:	4604      	mov	r4, r0
    7a8c:	b083      	sub	sp, #12
  if (pos == m_curPosition) {
    7a8e:	b133      	cbz	r3, 7a9e <FatFile::rmdir()+0x22>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    7a90:	7883      	ldrb	r3, [r0, #2]
    m_curCluster = 0;
    7a92:	2200      	movs	r2, #0
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    7a94:	f023 0320 	bic.w	r3, r3, #32
  m_curPosition = pos;
    7a98:	e9c0 2204 	strd	r2, r2, [r0, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    7a9c:	7083      	strb	r3, [r0, #2]
bool FatFile::rmdir() {
    7a9e:	2300      	movs	r3, #0
    7aa0:	e00f      	b.n	7ac2 <FatFile::rmdir()+0x46>
    m_curPosition += FS_DIR_SIZE;
    7aa2:	6163      	str	r3, [r4, #20]
    7aa4:	68a3      	ldr	r3, [r4, #8]
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    7aa6:	016a      	lsls	r2, r5, #5
    7aa8:	3338      	adds	r3, #56	; 0x38
    if (dir->name[0] == FAT_NAME_FREE) {
    7aaa:	5c9a      	ldrb	r2, [r3, r2]
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    7aac:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    if (dir->name[0] == FAT_NAME_FREE) {
    7ab0:	b1ea      	cbz	r2, 7aee <FatFile::rmdir()+0x72>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    7ab2:	2ae5      	cmp	r2, #229	; 0xe5
    7ab4:	d004      	beq.n	7ac0 <FatFile::rmdir()+0x44>
    7ab6:	2a2e      	cmp	r2, #46	; 0x2e
    7ab8:	d002      	beq.n	7ac0 <FatFile::rmdir()+0x44>
    if (isFileOrSubdir(dir)) {
    7aba:	7adb      	ldrb	r3, [r3, #11]
    7abc:	071b      	lsls	r3, r3, #28
    7abe:	d522      	bpl.n	7b06 <FatFile::rmdir()+0x8a>
  uint8_t i = (m_curPosition >> 5) & 0XF;
    7ac0:	6963      	ldr	r3, [r4, #20]
  if (i == 0 || !skipReadOk) {
    7ac2:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
  uint8_t i = (m_curPosition >> 5) & 0XF;
    7ac6:	f3c3 1543 	ubfx	r5, r3, #5, #4
    m_curPosition += FS_DIR_SIZE;
    7aca:	f103 0320 	add.w	r3, r3, #32
  if (i == 0 || !skipReadOk) {
    7ace:	d1e8      	bne.n	7aa2 <FatFile::rmdir()+0x26>
    int8_t n = read(&n, 1);
    7ad0:	2201      	movs	r2, #1
    7ad2:	f10d 0107 	add.w	r1, sp, #7
    7ad6:	4620      	mov	r0, r4
    7ad8:	f7ff fdd0 	bl	767c <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
    7adc:	b240      	sxtb	r0, r0
    7ade:	2801      	cmp	r0, #1
    7ae0:	d103      	bne.n	7aea <FatFile::rmdir()+0x6e>
    m_curPosition += FS_DIR_SIZE - 1;
    7ae2:	6963      	ldr	r3, [r4, #20]
    7ae4:	331f      	adds	r3, #31
    7ae6:	6163      	str	r3, [r4, #20]
    7ae8:	e7dc      	b.n	7aa4 <FatFile::rmdir()+0x28>
      if (!getError()) {
    7aea:	7863      	ldrb	r3, [r4, #1]
    7aec:	b95b      	cbnz	r3, 7b06 <FatFile::rmdir()+0x8a>
  m_flags |= FILE_FLAG_WRITE;
    7aee:	78a3      	ldrb	r3, [r4, #2]
  m_attributes = FILE_ATTR_FILE;
    7af0:	2208      	movs	r2, #8
  return remove();
    7af2:	4620      	mov	r0, r4
  m_flags |= FILE_FLAG_WRITE;
    7af4:	f043 0302 	orr.w	r3, r3, #2
  m_attributes = FILE_ATTR_FILE;
    7af8:	7022      	strb	r2, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
    7afa:	70a3      	strb	r3, [r4, #2]
}
    7afc:	b003      	add	sp, #12
    7afe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return remove();
    7b02:	f000 be6d 	b.w	87e0 <FatFile::remove()>
}
    7b06:	2000      	movs	r0, #0
    7b08:	b003      	add	sp, #12
    7b0a:	bd30      	pop	{r4, r5, pc}

00007b0c <FatFile::seekSet(unsigned long)>:
bool FatFile::seekSet(uint32_t pos) {
    7b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  bool isOpen() const {return m_attributes;}
    7b10:	7803      	ldrb	r3, [r0, #0]
    7b12:	4604      	mov	r4, r0
  uint32_t tmp = m_curCluster;
    7b14:	6907      	ldr	r7, [r0, #16]
  if (!isOpen()) {
    7b16:	2b00      	cmp	r3, #0
    7b18:	d039      	beq.n	7b8e <FatFile::seekSet(unsigned long)+0x82>
    7b1a:	460d      	mov	r5, r1
  if (pos == m_curPosition) {
    7b1c:	6941      	ldr	r1, [r0, #20]
    7b1e:	42a9      	cmp	r1, r5
    7b20:	d042      	beq.n	7ba8 <FatFile::seekSet(unsigned long)+0x9c>
  if (pos == 0) {
    7b22:	2d00      	cmp	r5, #0
    7b24:	d037      	beq.n	7b96 <FatFile::seekSet(unsigned long)+0x8a>
  if (isFile()) {
    7b26:	0718      	lsls	r0, r3, #28
    7b28:	d52a      	bpl.n	7b80 <FatFile::seekSet(unsigned long)+0x74>
    if (pos > m_fileSize) {
    7b2a:	69e2      	ldr	r2, [r4, #28]
    7b2c:	42aa      	cmp	r2, r5
    7b2e:	d32e      	bcc.n	7b8e <FatFile::seekSet(unsigned long)+0x82>
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    7b30:	f8d4 c008 	ldr.w	ip, [r4, #8]
    7b34:	1e6e      	subs	r6, r5, #1
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    7b36:	78a2      	ldrb	r2, [r4, #2]
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
    7b38:	f89c 0006 	ldrb.w	r0, [ip, #6]
  if (isContiguous()) {
    7b3c:	f012 0f40 	tst.w	r2, #64	; 0x40
    7b40:	f100 0009 	add.w	r0, r0, #9
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    7b44:	b2c0      	uxtb	r0, r0
    7b46:	fa26 f600 	lsr.w	r6, r6, r0
  if (isContiguous()) {
    7b4a:	d130      	bne.n	7bae <FatFile::seekSet(unsigned long)+0xa2>
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    7b4c:	1e4a      	subs	r2, r1, #1
    7b4e:	40c2      	lsrs	r2, r0
  if (nNew < nCur || m_curPosition == 0) {
    7b50:	b109      	cbz	r1, 7b56 <FatFile::seekSet(unsigned long)+0x4a>
    7b52:	4296      	cmp	r6, r2
    7b54:	d22f      	bcs.n	7bb6 <FatFile::seekSet(unsigned long)+0xaa>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    7b56:	065b      	lsls	r3, r3, #25
    return m_rootDirStart;
    7b58:	bf4c      	ite	mi
    7b5a:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
    7b5e:	6a23      	ldrpl	r3, [r4, #32]
    7b60:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    7b62:	f104 0810 	add.w	r8, r4, #16
    7b66:	e006      	b.n	7b76 <FatFile::seekSet(unsigned long)+0x6a>
    7b68:	6921      	ldr	r1, [r4, #16]
    7b6a:	3e01      	subs	r6, #1
    7b6c:	68a0      	ldr	r0, [r4, #8]
    7b6e:	f001 fc3b 	bl	93e8 <FatPartition::fatGet(unsigned long, unsigned long*)>
    7b72:	2800      	cmp	r0, #0
    7b74:	dd0b      	ble.n	7b8e <FatFile::seekSet(unsigned long)+0x82>
    7b76:	4642      	mov	r2, r8
  while (nNew--) {
    7b78:	2e00      	cmp	r6, #0
    7b7a:	d1f5      	bne.n	7b68 <FatFile::seekSet(unsigned long)+0x5c>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    7b7c:	78a2      	ldrb	r2, [r4, #2]
    7b7e:	e00c      	b.n	7b9a <FatFile::seekSet(unsigned long)+0x8e>
  } else if (isRootFixed()) {
    7b80:	069a      	lsls	r2, r3, #26
    7b82:	d5d5      	bpl.n	7b30 <FatFile::seekSet(unsigned long)+0x24>
    return m_rootDirEntryCount;
    7b84:	68a3      	ldr	r3, [r4, #8]
    if (pos <= FS_DIR_SIZE*m_vol->rootDirEntryCount()) {
    7b86:	895b      	ldrh	r3, [r3, #10]
    7b88:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
    7b8c:	d9f6      	bls.n	7b7c <FatFile::seekSet(unsigned long)+0x70>
  return false;
    7b8e:	2000      	movs	r0, #0
  m_curCluster = tmp;
    7b90:	6127      	str	r7, [r4, #16]
}
    7b92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7b96:	7882      	ldrb	r2, [r0, #2]
    m_curCluster = 0;
    7b98:	6105      	str	r5, [r0, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    7b9a:	f022 0220 	bic.w	r2, r2, #32
  return true;
    7b9e:	2001      	movs	r0, #1
  m_curPosition = pos;
    7ba0:	6165      	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    7ba2:	70a2      	strb	r2, [r4, #2]
}
    7ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return true;
    7ba8:	2001      	movs	r0, #1
}
    7baa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_curCluster = m_firstCluster + nNew;
    7bae:	6a23      	ldr	r3, [r4, #32]
    7bb0:	4433      	add	r3, r6
    7bb2:	6123      	str	r3, [r4, #16]
    goto done;
    7bb4:	e7f1      	b.n	7b9a <FatFile::seekSet(unsigned long)+0x8e>
    nNew -= nCur;
    7bb6:	1ab6      	subs	r6, r6, r2
    7bb8:	e7d3      	b.n	7b62 <FatFile::seekSet(unsigned long)+0x56>
    7bba:	bf00      	nop

00007bbc <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
                              oflag_t oflag, uint8_t lfnOrd) {
    7bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7bc0:	460e      	mov	r6, r1
    7bc2:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
    7bc4:	2100      	movs	r1, #0
    7bc6:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
    7bc8:	4604      	mov	r4, r0
    7bca:	4698      	mov	r8, r3
    7bcc:	f89d 7018 	ldrb.w	r7, [sp, #24]
  memset(this, 0, sizeof(FatFile));
    7bd0:	f009 f9f0 	bl	10fb4 <memset>
  m_vol = dirFile->m_vol;
    7bd4:	68b0      	ldr	r0, [r6, #8]
  m_dirCluster = dirFile->m_firstCluster;
    7bd6:	6a33      	ldr	r3, [r6, #32]
    7bd8:	f100 0238 	add.w	r2, r0, #56	; 0x38
  m_dirIndex = dirIndex;
    7bdc:	80a5      	strh	r5, [r4, #4]
  dir += 0XF & dirIndex;
    7bde:	f005 050f 	and.w	r5, r5, #15
    7be2:	eb02 1245 	add.w	r2, r2, r5, lsl #5
  m_vol = dirFile->m_vol;
    7be6:	e9c4 0302 	strd	r0, r3, [r4, #8]
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    7bea:	7ad1      	ldrb	r1, [r2, #11]
  if (!isFileOrSubdir(dir)) {
    7bec:	070b      	lsls	r3, r1, #28
    7bee:	d411      	bmi.n	7c14 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    7bf0:	f001 0117 	and.w	r1, r1, #23
    7bf4:	7021      	strb	r1, [r4, #0]
  if (isFileDir(dir)) {
    7bf6:	7ad3      	ldrb	r3, [r2, #11]
    7bf8:	f013 0f18 	tst.w	r3, #24
    7bfc:	d102      	bne.n	7c04 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x48>
    m_attributes |= FILE_ATTR_FILE;
    7bfe:	f041 0108 	orr.w	r1, r1, #8
    7c02:	7021      	strb	r1, [r4, #0]
  switch (oflag & O_ACCMODE) {
    7c04:	f008 0303 	and.w	r3, r8, #3
  m_lfnOrd = lfnOrd;
    7c08:	70e7      	strb	r7, [r4, #3]
  switch (oflag & O_ACCMODE) {
    7c0a:	2b01      	cmp	r3, #1
    7c0c:	d038      	beq.n	7c80 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc4>
    7c0e:	2b02      	cmp	r3, #2
    7c10:	d006      	beq.n	7c20 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x64>
    7c12:	b1f3      	cbz	r3, 7c52 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x96>
  m_attributes = FILE_ATTR_CLOSED;
    7c14:	2300      	movs	r3, #0
  return false;
    7c16:	4618      	mov	r0, r3
  m_attributes = FILE_ATTR_CLOSED;
    7c18:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    7c1a:	70a3      	strb	r3, [r4, #2]
}
    7c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (oflag & O_ACCMODE) {
    7c20:	2303      	movs	r3, #3
  bool isSubDir() const {return m_attributes & FILE_ATTR_SUBDIR;}
    7c22:	7821      	ldrb	r1, [r4, #0]
    if (isSubDir() || isReadOnly()) {
    7c24:	06cd      	lsls	r5, r1, #27
    7c26:	d4f5      	bmi.n	7c14 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    7c28:	07ce      	lsls	r6, r1, #31
    7c2a:	d4f3      	bmi.n	7c14 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    7c2c:	f008 0108 	and.w	r1, r8, #8
  if (oflag & O_TRUNC) {
    7c30:	f418 6f80 	tst.w	r8, #1024	; 0x400
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    7c34:	ea43 0301 	orr.w	r3, r3, r1
    7c38:	70a3      	strb	r3, [r4, #2]
    return m_sector;
    7c3a:	6b41      	ldr	r1, [r0, #52]	; 0x34
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    7c3c:	8a95      	ldrh	r5, [r2, #20]
  m_dirSector = m_vol->cacheSectorNumber();
    7c3e:	61a1      	str	r1, [r4, #24]
                 | getLe16(dir->firstClusterLow);
    7c40:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    7c42:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
  if (oflag & O_TRUNC) {
    7c46:	d012      	beq.n	7c6e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb2>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    7c48:	bb19      	cbnz	r1, 7c92 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xd6>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    7c4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7c4e:	70a3      	strb	r3, [r4, #2]
    7c50:	e010      	b.n	7c74 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb8>
      if (oflag & O_TRUNC) {
    7c52:	f418 6f80 	tst.w	r8, #1024	; 0x400
    7c56:	d1dd      	bne.n	7c14 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    7c58:	f008 0308 	and.w	r3, r8, #8
    7c5c:	f043 0301 	orr.w	r3, r3, #1
    7c60:	70a3      	strb	r3, [r4, #2]
    7c62:	6b41      	ldr	r1, [r0, #52]	; 0x34
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    7c64:	8a93      	ldrh	r3, [r2, #20]
  m_dirSector = m_vol->cacheSectorNumber();
    7c66:	61a1      	str	r1, [r4, #24]
                 | getLe16(dir->firstClusterLow);
    7c68:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    7c6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    m_firstCluster = firstCluster;
    7c6e:	6221      	str	r1, [r4, #32]
  return *reinterpret_cast<const uint32_t*>(src);
    7c70:	69d3      	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    7c72:	61e3      	str	r3, [r4, #28]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    7c74:	f418 4f80 	tst.w	r8, #16384	; 0x4000
    7c78:	d104      	bne.n	7c84 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc8>
  return true;
    7c7a:	2001      	movs	r0, #1
}
    7c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (oflag & O_ACCMODE) {
    7c80:	2302      	movs	r3, #2
    7c82:	e7ce      	b.n	7c22 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    7c84:	69e1      	ldr	r1, [r4, #28]
    7c86:	4620      	mov	r0, r4
    7c88:	f7ff ff40 	bl	7b0c <FatFile::seekSet(unsigned long)>
    7c8c:	2800      	cmp	r0, #0
    7c8e:	d1f4      	bne.n	7c7a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xbe>
    7c90:	e7c0      	b.n	7c14 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    7c92:	f001 fbcb 	bl	942c <FatPartition::freeChain(unsigned long)>
    7c96:	2800      	cmp	r0, #0
    7c98:	d0bc      	beq.n	7c14 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    7c9a:	78a3      	ldrb	r3, [r4, #2]
    7c9c:	e7d5      	b.n	7c4a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x8e>
    7c9e:	bf00      	nop

00007ca0 <FatFile::openNext(FatFile*, int)>:
  bool isOpen() const {return m_attributes;}
    7ca0:	7803      	ldrb	r3, [r0, #0]
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    7ca2:	2b00      	cmp	r3, #0
    7ca4:	d145      	bne.n	7d32 <FatFile::openNext(FatFile*, int)+0x92>
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    7ca6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    7caa:	780b      	ldrb	r3, [r1, #0]
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    7cac:	b084      	sub	sp, #16
    7cae:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    7cb0:	f013 0f70 	tst.w	r3, #112	; 0x70
    7cb4:	d030      	beq.n	7d18 <FatFile::openNext(FatFile*, int)+0x78>
  uint32_t curPosition() const {return m_curPosition;}
    7cb6:	694b      	ldr	r3, [r1, #20]
    7cb8:	f013 051f 	ands.w	r5, r3, #31
    7cbc:	d12c      	bne.n	7d18 <FatFile::openNext(FatFile*, int)+0x78>
    7cbe:	4606      	mov	r6, r0
    7cc0:	4690      	mov	r8, r2
    7cc2:	46a9      	mov	r9, r5
    int8_t n = read(&n, 1);
    7cc4:	2201      	movs	r2, #1
    7cc6:	f10d 010f 	add.w	r1, sp, #15
    7cca:	4620      	mov	r0, r4
  uint8_t i = (m_curPosition >> 5) & 0XF;
    7ccc:	f3c3 1a43 	ubfx	sl, r3, #5, #4
    index = dirFile->curPosition()/FS_DIR_SIZE;
    7cd0:	095f      	lsrs	r7, r3, #5
    int8_t n = read(&n, 1);
    7cd2:	f7ff fcd3 	bl	767c <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
    7cd6:	b240      	sxtb	r0, r0
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    7cd8:	ea4f 124a 	mov.w	r2, sl, lsl #5
    if  (n != 1) {
    7cdc:	2801      	cmp	r0, #1
    7cde:	d11b      	bne.n	7d18 <FatFile::openNext(FatFile*, int)+0x78>
    m_curPosition += FS_DIR_SIZE - 1;
    7ce0:	6963      	ldr	r3, [r4, #20]
    return m_buffer;
    7ce2:	68a1      	ldr	r1, [r4, #8]
    7ce4:	331f      	adds	r3, #31
    7ce6:	f101 0c38 	add.w	ip, r1, #56	; 0x38
    7cea:	6163      	str	r3, [r4, #20]
    if (dir->name[0] == FAT_NAME_FREE) {
    7cec:	f81c 2002 	ldrb.w	r2, [ip, r2]
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    7cf0:	eb0c 1c4a 	add.w	ip, ip, sl, lsl #5
    if (dir->name[0] == FAT_NAME_FREE) {
    7cf4:	b182      	cbz	r2, 7d18 <FatFile::openNext(FatFile*, int)+0x78>
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    7cf6:	2a2e      	cmp	r2, #46	; 0x2e
    7cf8:	d012      	beq.n	7d20 <FatFile::openNext(FatFile*, int)+0x80>
    7cfa:	f1a2 00e5 	sub.w	r0, r2, #229	; 0xe5
    7cfe:	fab0 f080 	clz	r0, r0
    7d02:	0940      	lsrs	r0, r0, #5
    7d04:	b960      	cbnz	r0, 7d20 <FatFile::openNext(FatFile*, int)+0x80>
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    7d06:	f89c 100b 	ldrb.w	r1, [ip, #11]
    } else if (isFileOrSubdir(dir)) {
    7d0a:	f011 0e08 	ands.w	lr, r1, #8
    7d0e:	d012      	beq.n	7d36 <FatFile::openNext(FatFile*, int)+0x96>
    } else if (isLongName(dir)) {
    7d10:	290f      	cmp	r1, #15
    7d12:	d007      	beq.n	7d24 <FatFile::openNext(FatFile*, int)+0x84>
      lfnOrd = 0;
    7d14:	4605      	mov	r5, r0
    7d16:	e7d5      	b.n	7cc4 <FatFile::openNext(FatFile*, int)+0x24>
  return false;
    7d18:	2000      	movs	r0, #0
}
    7d1a:	b004      	add	sp, #16
    7d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      lfnOrd = 0;
    7d20:	2500      	movs	r5, #0
    7d22:	e7cf      	b.n	7cc4 <FatFile::openNext(FatFile*, int)+0x24>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    7d24:	0651      	lsls	r1, r2, #25
    7d26:	d5cd      	bpl.n	7cc4 <FatFile::openNext(FatFile*, int)+0x24>
        lfnOrd = ldir->order & 0X1F;
    7d28:	f002 051f 	and.w	r5, r2, #31
        checksum = ldir->checksum;
    7d2c:	f89c 900d 	ldrb.w	r9, [ip, #13]
    7d30:	e7c8      	b.n	7cc4 <FatFile::openNext(FatFile*, int)+0x24>
  return false;
    7d32:	2000      	movs	r0, #0
}
    7d34:	4770      	bx	lr
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    7d36:	b185      	cbz	r5, 7d5a <FatFile::openNext(FatFile*, int)+0xba>
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
    7d38:	f10c 010a 	add.w	r1, ip, #10
    7d3c:	e001      	b.n	7d42 <FatFile::openNext(FatFile*, int)+0xa2>
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    7d3e:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
    7d42:	ea4f 13ce 	mov.w	r3, lr, lsl #7
    for (uint8_t i = 0; i < 11; i++) {
    7d46:	4561      	cmp	r1, ip
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    7d48:	ea43 035e 	orr.w	r3, r3, lr, lsr #1
    7d4c:	fa52 f383 	uxtab	r3, r2, r3
    7d50:	fa5f fe83 	uxtb.w	lr, r3
    for (uint8_t i = 0; i < 11; i++) {
    7d54:	d1f3      	bne.n	7d3e <FatFile::openNext(FatFile*, int)+0x9e>
    7d56:	45ce      	cmp	lr, r9
    7d58:	d1de      	bne.n	7d18 <FatFile::openNext(FatFile*, int)+0x78>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    7d5a:	4643      	mov	r3, r8
    7d5c:	b2ba      	uxth	r2, r7
    7d5e:	4621      	mov	r1, r4
    7d60:	4630      	mov	r0, r6
    7d62:	9500      	str	r5, [sp, #0]
    7d64:	f7ff ff2a 	bl	7bbc <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    7d68:	e7d7      	b.n	7d1a <FatFile::openNext(FatFile*, int)+0x7a>
    7d6a:	bf00      	nop

00007d6c <FatFile::sync()>:
  if (!isOpen()) {
    7d6c:	7803      	ldrb	r3, [r0, #0]
    7d6e:	b10b      	cbz	r3, 7d74 <FatFile::sync()+0x8>
    7d70:	f7ff b968 	b.w	7044 <FatFile::sync() [clone .part.0]>
}
    7d74:	2001      	movs	r0, #1
    7d76:	4770      	bx	lr

00007d78 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    7d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7d7c:	460e      	mov	r6, r1
      || month > 12
      || day < 1
      || day > 31
      || hour > 23
      || minute > 59
      || second > 59) {
    7d7e:	7801      	ldrb	r1, [r0, #0]
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    7d80:	b082      	sub	sp, #8
      || second > 59) {
    7d82:	0709      	lsls	r1, r1, #28
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    7d84:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
    7d88:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
    7d8c:	f89d a030 	ldrb.w	sl, [sp, #48]	; 0x30
    7d90:	f89d 8034 	ldrb.w	r8, [sp, #52]	; 0x34
      || second > 59) {
    7d94:	d518      	bpl.n	7dc8 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
      || year > 2107
    7d96:	f2a2 72bc 	subw	r2, r2, #1980	; 0x7bc
    7d9a:	b294      	uxth	r4, r2
    7d9c:	2c7f      	cmp	r4, #127	; 0x7f
    7d9e:	d813      	bhi.n	7dc8 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
      || month > 12
    7da0:	1e5a      	subs	r2, r3, #1
    7da2:	9301      	str	r3, [sp, #4]
    7da4:	2a0b      	cmp	r2, #11
    7da6:	d80f      	bhi.n	7dc8 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
      || day > 31
    7da8:	1e7a      	subs	r2, r7, #1
    7daa:	2a1e      	cmp	r2, #30
    7dac:	d80c      	bhi.n	7dc8 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
      || second > 59) {
    7dae:	f1ba 0f3b 	cmp.w	sl, #59	; 0x3b
    7db2:	bf98      	it	ls
    7db4:	f1b9 0f17 	cmpls.w	r9, #23
    7db8:	d806      	bhi.n	7dc8 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    7dba:	f1b8 0f3b 	cmp.w	r8, #59	; 0x3b
    7dbe:	d803      	bhi.n	7dc8 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // update directory entry
  if (!sync()) {
    7dc0:	4605      	mov	r5, r0
  if (!isOpen()) {
    7dc2:	f7ff f93f 	bl	7044 <FatFile::sync() [clone .part.0]>
  if (!sync()) {
    7dc6:	b918      	cbnz	r0, 7dd0 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x58>
  }
  return m_vol->cacheSync();

 fail:
  return false;
}
    7dc8:	2000      	movs	r0, #0
    7dca:	b002      	add	sp, #8
    7dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return m_cache.prepare(sector, options);
    7dd0:	68a8      	ldr	r0, [r5, #8]
    7dd2:	2201      	movs	r2, #1
    7dd4:	69a9      	ldr	r1, [r5, #24]
    7dd6:	3028      	adds	r0, #40	; 0x28
    7dd8:	f004 f842 	bl	be60 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    7ddc:	2800      	cmp	r0, #0
    7dde:	d0f3      	beq.n	7dc8 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
         year << 9 | month << 5 | day;
    7de0:	9b01      	ldr	r3, [sp, #4]
         hour << 11 | minute << 5 | second >> 1;
    7de2:	ea4f 0258 	mov.w	r2, r8, lsr #1
  return dir + (m_dirIndex & 0XF);
    7de6:	88a9      	ldrh	r1, [r5, #4]
         year << 9 | month << 5 | day;
    7de8:	ea47 1343 	orr.w	r3, r7, r3, lsl #5
  if (flags & T_ACCESS) {
    7dec:	07f7      	lsls	r7, r6, #31
  return dir + (m_dirIndex & 0XF);
    7dee:	f001 010f 	and.w	r1, r1, #15
         hour << 11 | minute << 5 | second >> 1;
    7df2:	ea42 124a 	orr.w	r2, r2, sl, lsl #5
         year << 9 | month << 5 | day;
    7df6:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
    7dfa:	eb00 1041 	add.w	r0, r0, r1, lsl #5
    7dfe:	b29b      	uxth	r3, r3
         hour << 11 | minute << 5 | second >> 1;
    7e00:	ea42 22c9 	orr.w	r2, r2, r9, lsl #11
  *reinterpret_cast<uint16_t*>(dst) = src;
    7e04:	bf48      	it	mi
    7e06:	8243      	strhmi	r3, [r0, #18]
  if (flags & T_CREATE) {
    7e08:	07b4      	lsls	r4, r6, #30
    7e0a:	b292      	uxth	r2, r2
    7e0c:	d508      	bpl.n	7e20 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xa8>
    dir->createTimeMs = second & 1 ? 100 : 0;
    7e0e:	f018 0801 	ands.w	r8, r8, #1
    7e12:	8203      	strh	r3, [r0, #16]
    7e14:	81c2      	strh	r2, [r0, #14]
    7e16:	bf18      	it	ne
    7e18:	f04f 0864 	movne.w	r8, #100	; 0x64
    7e1c:	f880 800d 	strb.w	r8, [r0, #13]
  if (flags & T_WRITE) {
    7e20:	0771      	lsls	r1, r6, #29
    7e22:	d501      	bpl.n	7e28 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xb0>
    7e24:	8303      	strh	r3, [r0, #24]
    7e26:	82c2      	strh	r2, [r0, #22]
  return m_vol->cacheSync();
    7e28:	68ac      	ldr	r4, [r5, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    7e2a:	f104 0028 	add.w	r0, r4, #40	; 0x28
    7e2e:	f003 ffeb 	bl	be08 <FsCache::sync()>
    7e32:	2800      	cmp	r0, #0
    7e34:	d0c8      	beq.n	7dc8 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    7e36:	f504 700e 	add.w	r0, r4, #568	; 0x238
    7e3a:	f003 ffe5 	bl	be08 <FsCache::sync()>
    7e3e:	2800      	cmp	r0, #0
    7e40:	d0c2      	beq.n	7dc8 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    7e42:	6820      	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
    7e44:	6803      	ldr	r3, [r0, #0]
    7e46:	6a1b      	ldr	r3, [r3, #32]
}
    7e48:	b002      	add	sp, #8
    7e4a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7e4e:	4718      	bx	r3

00007e50 <FatFile::truncate()>:
//------------------------------------------------------------------------------
bool FatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    7e50:	7883      	ldrb	r3, [r0, #2]
    7e52:	079b      	lsls	r3, r3, #30
    7e54:	d527      	bpl.n	7ea6 <FatFile::truncate()+0x56>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    7e56:	6a03      	ldr	r3, [r0, #32]
bool FatFile::truncate() {
    7e58:	b510      	push	{r4, lr}
    7e5a:	4604      	mov	r4, r0
    7e5c:	b082      	sub	sp, #8
  if (m_firstCluster == 0) {
    7e5e:	b1ab      	cbz	r3, 7e8c <FatFile::truncate()+0x3c>
      return true;
  }
  if (m_curCluster) {
    7e60:	6901      	ldr	r1, [r0, #16]
    7e62:	bb11      	cbnz	r1, 7eaa <FatFile::truncate()+0x5a>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  } else {
    toFree = m_firstCluster;
    7e64:	9301      	str	r3, [sp, #4]
    m_firstCluster = 0;
    7e66:	6201      	str	r1, [r0, #32]
  }
  if (toFree) {
    if (!m_vol->freeChain(toFree)) {
    7e68:	4619      	mov	r1, r3
    7e6a:	68a0      	ldr	r0, [r4, #8]
    7e6c:	f001 fade 	bl	942c <FatPartition::freeChain(unsigned long)>
    7e70:	b1b0      	cbz	r0, 7ea0 <FatFile::truncate()+0x50>
    }
  }
  m_fileSize = m_curPosition;

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    7e72:	78a3      	ldrb	r3, [r4, #2]
  m_fileSize = m_curPosition;
    7e74:	6961      	ldr	r1, [r4, #20]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    7e76:	f063 037f 	orn	r3, r3, #127	; 0x7f
  if (!isOpen()) {
    7e7a:	7822      	ldrb	r2, [r4, #0]
  m_fileSize = m_curPosition;
    7e7c:	61e1      	str	r1, [r4, #28]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    7e7e:	70a3      	strb	r3, [r4, #2]
  if (!isOpen()) {
    7e80:	b122      	cbz	r2, 7e8c <FatFile::truncate()+0x3c>
    7e82:	4620      	mov	r0, r4
    7e84:	f7ff f8de 	bl	7044 <FatFile::sync() [clone .part.0]>
  return sync();

 fail:
  return false;
}
    7e88:	b002      	add	sp, #8
    7e8a:	bd10      	pop	{r4, pc}
      return true;
    7e8c:	2001      	movs	r0, #1
}
    7e8e:	b002      	add	sp, #8
    7e90:	bd10      	pop	{r4, pc}
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    7e92:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    7e96:	6921      	ldr	r1, [r4, #16]
    7e98:	68a0      	ldr	r0, [r4, #8]
    7e9a:	f001 fab7 	bl	940c <FatPartition::fatPut(unsigned long, unsigned long)>
      if (!m_vol->fatPutEOC(m_curCluster)) {
    7e9e:	b968      	cbnz	r0, 7ebc <FatFile::truncate()+0x6c>
  return false;
    7ea0:	2000      	movs	r0, #0
}
    7ea2:	b002      	add	sp, #8
    7ea4:	bd10      	pop	{r4, pc}
  return false;
    7ea6:	2000      	movs	r0, #0
}
    7ea8:	4770      	bx	lr
    toFree = 0;
    7eaa:	2300      	movs	r3, #0
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    7eac:	aa01      	add	r2, sp, #4
    7eae:	6880      	ldr	r0, [r0, #8]
    toFree = 0;
    7eb0:	9301      	str	r3, [sp, #4]
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    7eb2:	f001 fa99 	bl	93e8 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    7eb6:	2800      	cmp	r0, #0
    7eb8:	dbf2      	blt.n	7ea0 <FatFile::truncate()+0x50>
    if (fg) {
    7eba:	d1ea      	bne.n	7e92 <FatFile::truncate()+0x42>
  if (toFree) {
    7ebc:	9b01      	ldr	r3, [sp, #4]
    7ebe:	2b00      	cmp	r3, #0
    7ec0:	d0d7      	beq.n	7e72 <FatFile::truncate()+0x22>
    7ec2:	e7d1      	b.n	7e68 <FatFile::truncate()+0x18>

00007ec4 <FatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    7ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    7ec8:	7883      	ldrb	r3, [r0, #2]
    7eca:	4605      	mov	r5, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    7ecc:	079c      	lsls	r4, r3, #30
    7ece:	d577      	bpl.n	7fc0 <FatFile::write(void const*, unsigned int)+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    7ed0:	4688      	mov	r8, r1
    7ed2:	0719      	lsls	r1, r3, #28
    7ed4:	4691      	mov	r9, r2
    7ed6:	f100 80b5 	bmi.w	8044 <FatFile::write(void const*, unsigned int)+0x180>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    7eda:	696b      	ldr	r3, [r5, #20]
    7edc:	eb13 0209 	adds.w	r2, r3, r9
    7ee0:	d26e      	bcs.n	7fc0 <FatFile::write(void const*, unsigned int)+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    7ee2:	f1b9 0f00 	cmp.w	r9, #0
    7ee6:	d040      	beq.n	7f6a <FatFile::write(void const*, unsigned int)+0xa6>
    7ee8:	464f      	mov	r7, r9
    m_status = 0;
    7eea:	f04f 0a00 	mov.w	sl, #0
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    7eee:	68a8      	ldr	r0, [r5, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    7ef0:	f3c3 0608 	ubfx	r6, r3, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    7ef4:	6929      	ldr	r1, [r5, #16]
    return (position >> 9) & m_clusterSectorMask;
    7ef6:	7944      	ldrb	r4, [r0, #5]
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    7ef8:	ea14 2453 	ands.w	r4, r4, r3, lsr #9
    7efc:	d13f      	bne.n	7f7e <FatFile::write(void const*, unsigned int)+0xba>
    7efe:	2e00      	cmp	r6, #0
    7f00:	d13d      	bne.n	7f7e <FatFile::write(void const*, unsigned int)+0xba>
      if (m_curCluster != 0) {
    7f02:	2900      	cmp	r1, #0
    7f04:	d06e      	beq.n	7fe4 <FatFile::write(void const*, unsigned int)+0x120>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    7f06:	78aa      	ldrb	r2, [r5, #2]
    7f08:	0652      	lsls	r2, r2, #25
    7f0a:	d576      	bpl.n	7ffa <FatFile::write(void const*, unsigned int)+0x136>
    7f0c:	69ea      	ldr	r2, [r5, #28]
    7f0e:	429a      	cmp	r2, r3
    7f10:	d973      	bls.n	7ffa <FatFile::write(void const*, unsigned int)+0x136>
          m_curCluster++;
    7f12:	3101      	adds	r1, #1
    7f14:	6129      	str	r1, [r5, #16]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7f16:	3902      	subs	r1, #2
    7f18:	7982      	ldrb	r2, [r0, #6]
    7f1a:	6943      	ldr	r3, [r0, #20]
    7f1c:	4091      	lsls	r1, r2
    7f1e:	4419      	add	r1, r3
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    7f20:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    7f24:	d353      	bcc.n	7fce <FatFile::write(void const*, unsigned int)+0x10a>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    7f26:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
    7f2a:	d370      	bcc.n	800e <FatFile::write(void const*, unsigned int)+0x14a>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    7f2c:	7903      	ldrb	r3, [r0, #4]
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    7f2e:	0a7a      	lsrs	r2, r7, #9
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    7f30:	1b1b      	subs	r3, r3, r4
    7f32:	4293      	cmp	r3, r2
    7f34:	bf28      	it	cs
    7f36:	4613      	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    7f38:	6b42      	ldr	r2, [r0, #52]	; 0x34
    7f3a:	428a      	cmp	r2, r1
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    7f3c:	ea4f 2443 	mov.w	r4, r3, lsl #9
    7f40:	d307      	bcc.n	7f52 <FatFile::write(void const*, unsigned int)+0x8e>
    7f42:	185e      	adds	r6, r3, r1
    7f44:	42b2      	cmp	r2, r6
    7f46:	d204      	bcs.n	7f52 <FatFile::write(void const*, unsigned int)+0x8e>
    m_sector = 0XFFFFFFFF;
    7f48:	f04f 32ff 	mov.w	r2, #4294967295
    m_status = 0;
    7f4c:	f880 a028 	strb.w	sl, [r0, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    7f50:	6342      	str	r2, [r0, #52]	; 0x34
    return m_blockDev->writeSectors(sector, src, count);
    7f52:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    7f54:	4642      	mov	r2, r8
    7f56:	6806      	ldr	r6, [r0, #0]
    7f58:	6ab6      	ldr	r6, [r6, #40]	; 0x28
    7f5a:	47b0      	blx	r6
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
    7f5c:	b380      	cbz	r0, 7fc0 <FatFile::write(void const*, unsigned int)+0xfc>
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    7f5e:	696b      	ldr	r3, [r5, #20]
  while (nToWrite) {
    7f60:	1b3f      	subs	r7, r7, r4
    src += n;
    7f62:	44a0      	add	r8, r4
    m_curPosition += n;
    7f64:	4423      	add	r3, r4
    7f66:	616b      	str	r3, [r5, #20]
  while (nToWrite) {
    7f68:	d1c1      	bne.n	7eee <FatFile::write(void const*, unsigned int)+0x2a>
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    7f6a:	69ea      	ldr	r2, [r5, #28]
    7f6c:	429a      	cmp	r2, r3
    7f6e:	d276      	bcs.n	805e <FatFile::write(void const*, unsigned int)+0x19a>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    7f70:	78aa      	ldrb	r2, [r5, #2]
    7f72:	4648      	mov	r0, r9
    m_fileSize = m_curPosition;
    7f74:	61eb      	str	r3, [r5, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    7f76:	f062 037f 	orn	r3, r2, #127	; 0x7f
    7f7a:	70ab      	strb	r3, [r5, #2]
    7f7c:	e025      	b.n	7fca <FatFile::write(void const*, unsigned int)+0x106>
    7f7e:	7982      	ldrb	r2, [r0, #6]
    7f80:	3902      	subs	r1, #2
    7f82:	6943      	ldr	r3, [r0, #20]
    7f84:	4091      	lsls	r1, r2
    7f86:	4419      	add	r1, r3
                      + sectorOfCluster;
    7f88:	4421      	add	r1, r4
    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    7f8a:	2e00      	cmp	r6, #0
    7f8c:	d0c8      	beq.n	7f20 <FatFile::write(void const*, unsigned int)+0x5c>
      n = m_vol->bytesPerSector() - sectorOffset;
    7f8e:	f5c6 7400 	rsb	r4, r6, #512	; 0x200
        cacheOption = FsCache::CACHE_FOR_WRITE;
    7f92:	2201      	movs	r2, #1
    7f94:	42bc      	cmp	r4, r7
    7f96:	bf28      	it	cs
    7f98:	463c      	movcs	r4, r7
    return m_cache.prepare(sector, options);
    7f9a:	3028      	adds	r0, #40	; 0x28
    7f9c:	f003 ff60 	bl	be60 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    7fa0:	b170      	cbz	r0, 7fc0 <FatFile::write(void const*, unsigned int)+0xfc>
      memcpy(dst, src, n);
    7fa2:	4430      	add	r0, r6
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    7fa4:	4426      	add	r6, r4
      memcpy(dst, src, n);
    7fa6:	4622      	mov	r2, r4
    7fa8:	4641      	mov	r1, r8
    7faa:	f005 fad1 	bl	d550 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    7fae:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    7fb2:	68a8      	ldr	r0, [r5, #8]
    7fb4:	d1d3      	bne.n	7f5e <FatFile::write(void const*, unsigned int)+0x9a>
    return m_cache.sync();
    7fb6:	3028      	adds	r0, #40	; 0x28
    7fb8:	f003 ff26 	bl	be08 <FsCache::sync()>
        if (!m_vol->cacheSyncData()) {
    7fbc:	2800      	cmp	r0, #0
    7fbe:	d1ce      	bne.n	7f5e <FatFile::write(void const*, unsigned int)+0x9a>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    7fc0:	786b      	ldrb	r3, [r5, #1]
  return 0;
    7fc2:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    7fc4:	f043 0301 	orr.w	r3, r3, #1
    7fc8:	706b      	strb	r3, [r5, #1]
}
    7fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      n = m_vol->bytesPerSector() - sectorOffset;
    7fce:	f5c6 7400 	rsb	r4, r6, #512	; 0x200
      if (sectorOffset == 0 &&
    7fd2:	696a      	ldr	r2, [r5, #20]
    7fd4:	69eb      	ldr	r3, [r5, #28]
    7fd6:	42bc      	cmp	r4, r7
    7fd8:	bf28      	it	cs
    7fda:	463c      	movcs	r4, r7
    7fdc:	429a      	cmp	r2, r3
    7fde:	d305      	bcc.n	7fec <FatFile::write(void const*, unsigned int)+0x128>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    7fe0:	2205      	movs	r2, #5
    7fe2:	e7da      	b.n	7f9a <FatFile::write(void const*, unsigned int)+0xd6>
        if (m_firstCluster == 0) {
    7fe4:	6a29      	ldr	r1, [r5, #32]
    7fe6:	b321      	cbz	r1, 8032 <FatFile::write(void const*, unsigned int)+0x16e>
          m_curCluster = m_firstCluster;
    7fe8:	6129      	str	r1, [r5, #16]
    7fea:	e794      	b.n	7f16 <FatFile::write(void const*, unsigned int)+0x52>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    7fec:	78ab      	ldrb	r3, [r5, #2]
        cacheOption = FsCache::CACHE_FOR_WRITE;
    7fee:	f013 0f20 	tst.w	r3, #32
    7ff2:	bf14      	ite	ne
    7ff4:	2205      	movne	r2, #5
    7ff6:	2201      	moveq	r2, #1
    7ff8:	e7cf      	b.n	7f9a <FatFile::write(void const*, unsigned int)+0xd6>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    7ffa:	f105 0210 	add.w	r2, r5, #16
    7ffe:	f001 f9f3 	bl	93e8 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    8002:	2800      	cmp	r0, #0
    8004:	dbdc      	blt.n	7fc0 <FatFile::write(void const*, unsigned int)+0xfc>
        if (fg == 0) {
    8006:	d024      	beq.n	8052 <FatFile::write(void const*, unsigned int)+0x18e>
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    8008:	68a8      	ldr	r0, [r5, #8]
    800a:	6929      	ldr	r1, [r5, #16]
    800c:	e783      	b.n	7f16 <FatFile::write(void const*, unsigned int)+0x52>
    if (isCached(sector)) {
    800e:	6b43      	ldr	r3, [r0, #52]	; 0x34
    8010:	428b      	cmp	r3, r1
    8012:	d104      	bne.n	801e <FatFile::write(void const*, unsigned int)+0x15a>
    m_sector = 0XFFFFFFFF;
    8014:	f04f 33ff 	mov.w	r3, #4294967295
    m_status = 0;
    8018:	f880 a028 	strb.w	sl, [r0, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    801c:	6343      	str	r3, [r0, #52]	; 0x34
    return m_blockDev->writeSector(sector, src);
    801e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    8020:	4642      	mov	r2, r8
    8022:	6803      	ldr	r3, [r0, #0]
    8024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8026:	4798      	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    8028:	2800      	cmp	r0, #0
    802a:	d0c9      	beq.n	7fc0 <FatFile::write(void const*, unsigned int)+0xfc>
      n = m_vol->bytesPerSector();
    802c:	f44f 7400 	mov.w	r4, #512	; 0x200
    8030:	e795      	b.n	7f5e <FatFile::write(void const*, unsigned int)+0x9a>
          if (!addCluster()) {
    8032:	4628      	mov	r0, r5
    8034:	f7ff f860 	bl	70f8 <FatFile::addCluster()>
    8038:	2800      	cmp	r0, #0
    803a:	d0c1      	beq.n	7fc0 <FatFile::write(void const*, unsigned int)+0xfc>
          m_firstCluster = m_curCluster;
    803c:	6929      	ldr	r1, [r5, #16]
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    803e:	68a8      	ldr	r0, [r5, #8]
          m_firstCluster = m_curCluster;
    8040:	6229      	str	r1, [r5, #32]
    8042:	e768      	b.n	7f16 <FatFile::write(void const*, unsigned int)+0x52>
    if (!seekSet(m_fileSize)) {
    8044:	69c1      	ldr	r1, [r0, #28]
    8046:	f7ff fd61 	bl	7b0c <FatFile::seekSet(unsigned long)>
    804a:	2800      	cmp	r0, #0
    804c:	f47f af45 	bne.w	7eda <FatFile::write(void const*, unsigned int)+0x16>
    8050:	e7b6      	b.n	7fc0 <FatFile::write(void const*, unsigned int)+0xfc>
          if (!addCluster()) {
    8052:	4628      	mov	r0, r5
    8054:	f7ff f850 	bl	70f8 <FatFile::addCluster()>
    8058:	2800      	cmp	r0, #0
    805a:	d1d5      	bne.n	8008 <FatFile::write(void const*, unsigned int)+0x144>
    805c:	e7b0      	b.n	7fc0 <FatFile::write(void const*, unsigned int)+0xfc>
  } else if (FsDateTime::callback) {
    805e:	4b05      	ldr	r3, [pc, #20]	; (8074 <FatFile::write(void const*, unsigned int)+0x1b0>)
    8060:	681b      	ldr	r3, [r3, #0]
    8062:	b12b      	cbz	r3, 8070 <FatFile::write(void const*, unsigned int)+0x1ac>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    8064:	78ab      	ldrb	r3, [r5, #2]
    8066:	4648      	mov	r0, r9
    8068:	f063 037f 	orn	r3, r3, #127	; 0x7f
    806c:	70ab      	strb	r3, [r5, #2]
    806e:	e7ac      	b.n	7fca <FatFile::write(void const*, unsigned int)+0x106>
    8070:	4648      	mov	r0, r9
    8072:	e7aa      	b.n	7fca <FatFile::write(void const*, unsigned int)+0x106>
    8074:	2005e024 	.word	0x2005e024

00008078 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>:
    hash = ((hash << 5) + hash) ^ (*bgn++);
  }
  return hash;
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    8078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    807c:	4684      	mov	ip, r0
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    807e:	b08d      	sub	sp, #52	; 0x34
    8080:	4614      	mov	r4, r2
    next = begin;
    8082:	6815      	ldr	r5, [r2, #0]
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    8084:	4698      	mov	r8, r3
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    8086:	4606      	mov	r6, r0
    8088:	4689      	mov	r9, r1
  FatFile dir = *this;
    808a:	af03      	add	r7, sp, #12
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    808c:	9301      	str	r3, [sp, #4]
    ls = 0;  // lowSurrogate
    808e:	f04f 0e00 	mov.w	lr, #0
  FatFile dir = *this;
    8092:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    8096:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    8098:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    809c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    809e:	f8dc 3000 	ldr.w	r3, [ip]
    next = begin;
    80a2:	6065      	str	r5, [r4, #4]
    80a4:	603b      	str	r3, [r7, #0]
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    80a6:	4643      	mov	r3, r8
    ls = 0;  // lowSurrogate
    80a8:	f8a4 e00c 	strh.w	lr, [r4, #12]
    80ac:	2b00      	cmp	r3, #0
    80ae:	d03f      	beq.n	8130 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb8>
    80b0:	f04f 0a01 	mov.w	sl, #1
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    80b4:	eba9 010a 	sub.w	r1, r9, sl
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    80b8:	a803      	add	r0, sp, #12
    80ba:	b289      	uxth	r1, r1
    80bc:	0149      	lsls	r1, r1, #5
    80be:	f7ff fd25 	bl	7b0c <FatFile::seekSet(unsigned long)>
    80c2:	b350      	cbz	r0, 811a <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa2>
    80c4:	2100      	movs	r1, #0
    80c6:	a803      	add	r0, sp, #12
    80c8:	f7ff fbc0 	bl	784c <FatFile::readDirCache(bool)>
    if (!ldir) {
    80cc:	4607      	mov	r7, r0
    80ce:	b320      	cbz	r0, 811a <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa2>
    80d0:	2500      	movs	r5, #0
    80d2:	e00d      	b.n	80f0 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x78>
      uint16_t u = getLfnChar(ldir, i);
      if (fname->atEnd()) {
        return u == 0;
      }
#if USE_UTF8_LONG_NAMES
      uint16_t cp = fname->get16();
    80d4:	f003 ff02 	bl	bedc <FsName::get16()>
    80d8:	4680      	mov	r8, r0
      // Make sure caller checked for valid UTF-8.
      DBG_HALT_IF(cp == 0XFFFF);
      if (toUpcase(u) != toUpcase(cp)) {
    80da:	4658      	mov	r0, fp
    80dc:	f004 f812 	bl	c104 <toUpcase(unsigned short)>
    80e0:	4683      	mov	fp, r0
    80e2:	4640      	mov	r0, r8
    80e4:	f004 f80e 	bl	c104 <toUpcase(unsigned short)>
    80e8:	4583      	cmp	fp, r0
    80ea:	d116      	bne.n	811a <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa2>
    for (uint8_t i = 0; i < 13; i++) {
    80ec:	2d0d      	cmp	r5, #13
    80ee:	d018      	beq.n	8122 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xaa>
      uint16_t u = getLfnChar(ldir, i);
    80f0:	b2ea      	uxtb	r2, r5
    80f2:	4639      	mov	r1, r7
    80f4:	4630      	mov	r0, r6
    for (uint8_t i = 0; i < 13; i++) {
    80f6:	3501      	adds	r5, #1
      uint16_t u = getLfnChar(ldir, i);
    80f8:	f000 fee4 	bl	8ec4 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
    return !ls && next == end;
    80fc:	89a3      	ldrh	r3, [r4, #12]
    80fe:	4683      	mov	fp, r0
      uint16_t cp = fname->get16();
    8100:	4620      	mov	r0, r4
    8102:	2b00      	cmp	r3, #0
    8104:	d1e6      	bne.n	80d4 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x5c>
    8106:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    810a:	4293      	cmp	r3, r2
    810c:	d1e2      	bne.n	80d4 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x5c>
        return u == 0;
    810e:	fabb f08b 	clz	r0, fp
    8112:	0940      	lsrs	r0, r0, #5
  }
  return true;

 fail:
  return false;
}
    8114:	b00d      	add	sp, #52	; 0x34
    8116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
    811a:	2000      	movs	r0, #0
}
    811c:	b00d      	add	sp, #52	; 0x34
    811e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    8122:	f10a 0a01 	add.w	sl, sl, #1
    8126:	9b01      	ldr	r3, [sp, #4]
    8128:	fa5f fa8a 	uxtb.w	sl, sl
    812c:	4553      	cmp	r3, sl
    812e:	d2c1      	bcs.n	80b4 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x3c>
  return true;
    8130:	2001      	movs	r0, #1
    8132:	e7ef      	b.n	8114 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x9c>

00008134 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    8134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    8138:	4607      	mov	r7, r0
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    813a:	b08d      	sub	sp, #52	; 0x34
    813c:	4616      	mov	r6, r2
    813e:	469a      	mov	sl, r3
  FatFile dir = *this;
    8140:	f10d 0c0c 	add.w	ip, sp, #12
    8144:	f102 0415 	add.w	r4, r2, #21
    8148:	f102 0520 	add.w	r5, r2, #32
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    814c:	9101      	str	r1, [sp, #4]
    uint8_t sum = 0;
    814e:	f04f 0900 	mov.w	r9, #0
  FatFile dir = *this;
    8152:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    8154:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    8158:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    815a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    815e:	683b      	ldr	r3, [r7, #0]
    8160:	f8cc 3000 	str.w	r3, [ip]
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    8164:	ea4f 13c9 	mov.w	r3, r9, lsl #7
    8168:	f814 2f01 	ldrb.w	r2, [r4, #1]!
    816c:	ea43 0359 	orr.w	r3, r3, r9, lsr #1
    for (uint8_t i = 0; i < 11; i++) {
    8170:	42a5      	cmp	r5, r4
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    8172:	fa52 f383 	uxtab	r3, r2, r3
    8176:	fa5f f983 	uxtb.w	r9, r3
    for (uint8_t i = 0; i < 11; i++) {
    817a:	d1f3      	bne.n	8164 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x30>
    next = begin;
    817c:	6833      	ldr	r3, [r6, #0]
    ls = 0;  // lowSurrogate
    817e:	f04f 0800 	mov.w	r8, #0
    next = begin;
    8182:	6073      	str	r3, [r6, #4]
    ls = 0;  // lowSurrogate
    8184:	f8a6 800c 	strh.w	r8, [r6, #12]
  DirLfn_t* ldir;
  uint8_t checksum = lfnChecksum(fname->sfn);
  uint8_t fc = 0;
  fname->reset();

  for (uint8_t order = 1; order <= lfnOrd; order++) {
    8188:	f1ba 0f00 	cmp.w	sl, #0
    818c:	d04e      	beq.n	822c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xf8>
    818e:	2701      	movs	r7, #1
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    8190:	9b01      	ldr	r3, [sp, #4]
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    8192:	a803      	add	r0, sp, #12
    8194:	1bd9      	subs	r1, r3, r7
    8196:	b289      	uxth	r1, r1
    8198:	0149      	lsls	r1, r1, #5
    819a:	f7ff fcb7 	bl	7b0c <FatFile::seekSet(unsigned long)>
    819e:	2800      	cmp	r0, #0
    81a0:	d055      	beq.n	824e <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x11a>
    81a2:	2100      	movs	r1, #0
    81a4:	a803      	add	r0, sp, #12
    81a6:	f7ff fb51 	bl	784c <FatFile::readDirCache(bool)>
    if (!ldir) {
    81aa:	2800      	cmp	r0, #0
    81ac:	d04f      	beq.n	824e <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x11a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    81ae:	9a05      	ldr	r2, [sp, #20]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    81b0:	4557      	cmp	r7, sl
    81b2:	f100 0b01 	add.w	fp, r0, #1
    81b6:	f04f 0401 	mov.w	r4, #1
    m_status |= CACHE_STATUS_DIRTY;
    81ba:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
    81be:	f04f 0500 	mov.w	r5, #0
    81c2:	f043 0301 	orr.w	r3, r3, #1
    81c6:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    81ca:	f04f 030f 	mov.w	r3, #15
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    81ce:	bf0c      	ite	eq
    81d0:	f047 0240 	orreq.w	r2, r7, #64	; 0x40
    81d4:	463a      	movne	r2, r7
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    81d6:	72c3      	strb	r3, [r0, #11]
    ldir->mustBeZero1 = 0;
    81d8:	f04f 0300 	mov.w	r3, #0
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    81dc:	7002      	strb	r2, [r0, #0]
    ldir->mustBeZero1 = 0;
    81de:	7303      	strb	r3, [r0, #12]
    81e0:	f04f 0300 	mov.w	r3, #0
    ldir->checksum = checksum;
    81e4:	f880 900d 	strb.w	r9, [r0, #13]
    81e8:	8343      	strh	r3, [r0, #26]
    setLe16(ldir->mustBeZero2, 0);
    for (uint8_t i = 0; i < 13; i++) {
    81ea:	e006      	b.n	81fa <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xc6>
    81ec:	f8ab 0000 	strh.w	r0, [fp]
    81f0:	3401      	adds	r4, #1
    81f2:	3501      	adds	r5, #1
    81f4:	f10b 0b02 	add.w	fp, fp, #2
    81f8:	b2e4      	uxtb	r4, r4
    return !ls && next == end;
    81fa:	89b0      	ldrh	r0, [r6, #12]
    81fc:	b918      	cbnz	r0, 8206 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xd2>
    81fe:	e9d6 2301 	ldrd	r2, r3, [r6, #4]
    8202:	429a      	cmp	r2, r3
    8204:	d016      	beq.n	8234 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x100>
      uint16_t cp;
      if (fname->atEnd()) {
        cp = fc++ ? 0XFFFF : 0;
      } else {
        cp = fname->get16();
    8206:	4630      	mov	r0, r6
    8208:	f003 fe68 	bl	bedc <FsName::get16()>
  if (i < 5) {
    820c:	2d04      	cmp	r5, #4
    820e:	b2eb      	uxtb	r3, r5
    8210:	d9ec      	bls.n	81ec <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xb8>
  } else if (i < 11) {
    8212:	2b0a      	cmp	r3, #10
    8214:	d802      	bhi.n	821c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xe8>
    8216:	f8ab 0003 	strh.w	r0, [fp, #3]
}
    821a:	e7e9      	b.n	81f0 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xbc>
    for (uint8_t i = 0; i < 13; i++) {
    821c:	2c0d      	cmp	r4, #13
  *reinterpret_cast<uint16_t*>(dst) = src;
    821e:	f8ab 0005 	strh.w	r0, [fp, #5]
    8222:	d1e5      	bne.n	81f0 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xbc>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    8224:	3701      	adds	r7, #1
    8226:	b2ff      	uxtb	r7, r7
    8228:	45ba      	cmp	sl, r7
    822a:	d2b1      	bcs.n	8190 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x5c>
        DBG_HALT_IF(cp == 0XFFFF);
      }
      putLfnChar(ldir, i, cp);
    }
  }
  return true;
    822c:	2001      	movs	r0, #1

 fail:
  return false;
}
    822e:	b00d      	add	sp, #52	; 0x34
    8230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cp = fc++ ? 0XFFFF : 0;
    8234:	f1b8 0f00 	cmp.w	r8, #0
    8238:	d006      	beq.n	8248 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x114>
    823a:	f108 0801 	add.w	r8, r8, #1
    823e:	f64f 70ff 	movw	r0, #65535	; 0xffff
    8242:	fa5f f888 	uxtb.w	r8, r8
    8246:	e7e1      	b.n	820c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xd8>
    8248:	f04f 0801 	mov.w	r8, #1
    824c:	e7de      	b.n	820c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xd8>
  return false;
    824e:	2000      	movs	r0, #0
}
    8250:	b00d      	add	sp, #52	; 0x34
    8252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8256:	bf00      	nop

00008258 <FatFile::makeSFN(FatLfn_t*)>:
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
  const char* ptr = fname->begin;
    8258:	4602      	mov	r2, r0
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    825a:	f04f 3120 	mov.w	r1, #538976288	; 0x20202020
  const char* ptr = fname->begin;
    825e:	f852 3b16 	ldr.w	r3, [r2], #22
bool FatFile::makeSFN(FatLfn_t* fname) {
    8262:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fname->sfn[k] = ' ';
    8266:	f8c0 1016 	str.w	r1, [r0, #22]
bool FatFile::makeSFN(FatLfn_t* fname) {
    826a:	4686      	mov	lr, r0
  const char* end = fname->end;
    826c:	6884      	ldr	r4, [r0, #8]
    fname->sfn[k] = ' ';
    826e:	6051      	str	r1, [r2, #4]
    8270:	f8c2 1007 	str.w	r1, [r2, #7]
  }
  // Not 8.3 if starts with dot.
  is83 = *ptr == '.' ? false : true;
    8274:	781a      	ldrb	r2, [r3, #0]
    8276:	2a2e      	cmp	r2, #46	; 0x2e
    8278:	bf14      	ite	ne
    827a:	2001      	movne	r0, #1
    827c:	2000      	moveq	r0, #0
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {}
    827e:	d103      	bne.n	8288 <FatFile::makeSFN(FatLfn_t*)+0x30>
    8280:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    8284:	2a2e      	cmp	r2, #46	; 0x2e
    8286:	d0fb      	beq.n	8280 <FatFile::makeSFN(FatLfn_t*)+0x28>
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {}
    8288:	1e61      	subs	r1, r4, #1
    828a:	4299      	cmp	r1, r3
    828c:	d90b      	bls.n	82a6 <FatFile::makeSFN(FatLfn_t*)+0x4e>
    828e:	460a      	mov	r2, r1
    8290:	e002      	b.n	8298 <FatFile::makeSFN(FatLfn_t*)+0x40>
    8292:	4293      	cmp	r3, r2
    8294:	4611      	mov	r1, r2
    8296:	d006      	beq.n	82a6 <FatFile::makeSFN(FatLfn_t*)+0x4e>
    8298:	4611      	mov	r1, r2
    829a:	3a01      	subs	r2, #1
    829c:	f891 c000 	ldrb.w	ip, [r1]
    82a0:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
    82a4:	d1f5      	bne.n	8292 <FatFile::makeSFN(FatLfn_t*)+0x3a>

  for (; ptr < end; ptr++) {
    82a6:	429c      	cmp	r4, r3
    82a8:	f04f 0500 	mov.w	r5, #0
    82ac:	f240 8086 	bls.w	83bc <FatFile::makeSFN(FatLfn_t*)+0x164>
    82b0:	2607      	movs	r6, #7
    82b2:	2708      	movs	r7, #8
    82b4:	46a9      	mov	r9, r5
    82b6:	46a8      	mov	r8, r5
    82b8:	e006      	b.n	82c8 <FatFile::makeSFN(FatLfn_t*)+0x70>
    82ba:	3301      	adds	r3, #1
    c = *ptr;
    if (c == '.' && ptr == dot) {
      in = 10;  // Max index for full 8.3 name.
    82bc:	260a      	movs	r6, #10
      i = 8;    // Place for extension.
    82be:	f04f 0908 	mov.w	r9, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    82c2:	2710      	movs	r7, #16
  for (; ptr < end; ptr++) {
    82c4:	429c      	cmp	r4, r3
    82c6:	d95b      	bls.n	8380 <FatFile::makeSFN(FatLfn_t*)+0x128>
    c = *ptr;
    82c8:	781a      	ldrb	r2, [r3, #0]
    if (c == '.' && ptr == dot) {
    82ca:	2a2e      	cmp	r2, #46	; 0x2e
    82cc:	bf08      	it	eq
    82ce:	4299      	cmpeq	r1, r3
    82d0:	d0f3      	beq.n	82ba <FatFile::makeSFN(FatLfn_t*)+0x62>
  if (c == '"' || c == '|' || c == '[' || c == '\\' || c == ']') {
    82d2:	2a22      	cmp	r2, #34	; 0x22
    82d4:	d00d      	beq.n	82f2 <FatFile::makeSFN(FatLfn_t*)+0x9a>
    82d6:	2a7c      	cmp	r2, #124	; 0x7c
    82d8:	d00b      	beq.n	82f2 <FatFile::makeSFN(FatLfn_t*)+0x9a>
    82da:	f1a2 0c5b 	sub.w	ip, r2, #91	; 0x5b
    82de:	f1bc 0f02 	cmp.w	ip, #2
    82e2:	d906      	bls.n	82f2 <FatFile::makeSFN(FatLfn_t*)+0x9a>
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
    82e4:	f1a2 0c2a 	sub.w	ip, r2, #42	; 0x2a
    82e8:	f1bc 0f05 	cmp.w	ip, #5
    82ec:	d821      	bhi.n	8332 <FatFile::makeSFN(FatLfn_t*)+0xda>
    82ee:	2a2d      	cmp	r2, #45	; 0x2d
    82f0:	d01f      	beq.n	8332 <FatFile::makeSFN(FatLfn_t*)+0xda>
    } else {
      if (sfnReservedChar(c)) {
        is83 = false;
        // Skip UTF-8 trailing characters.
        if ((c & 0XC0) == 0X80) {
    82f2:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    82f6:	2a80      	cmp	r2, #128	; 0x80
    82f8:	d05d      	beq.n	83b6 <FatFile::makeSFN(FatLfn_t*)+0x15e>
          continue;
        }
        c = '_';
      }
      if (i > in) {
    82fa:	454e      	cmp	r6, r9
    82fc:	d22f      	bcs.n	835e <FatFile::makeSFN(FatLfn_t*)+0x106>
        is83 = false;
        if (in == 10 || ptr > dot) {
    82fe:	4299      	cmp	r1, r3
    8300:	bf2c      	ite	cs
    8302:	2000      	movcs	r0, #0
    8304:	2001      	movcc	r0, #1
    8306:	2e0a      	cmp	r6, #10
    8308:	bf08      	it	eq
    830a:	f040 0001 	orreq.w	r0, r0, #1
    830e:	2800      	cmp	r0, #0
    8310:	d047      	beq.n	83a2 <FatFile::makeSFN(FatLfn_t*)+0x14a>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    8312:	f89e 3016 	ldrb.w	r3, [lr, #22]
    8316:	2b20      	cmp	r3, #32
    8318:	d040      	beq.n	839c <FatFile::makeSFN(FatLfn_t*)+0x144>
  }
  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    831a:	f89e 3014 	ldrb.w	r3, [lr, #20]
    fname->flags = FNAME_FLAG_LOST_CHARS;
    831e:	2001      	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
    8320:	217e      	movs	r1, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
    8322:	2231      	movs	r2, #49	; 0x31
    fname->sfn[fname->seqPos] = '~';
    8324:	4473      	add	r3, lr
    fname->flags = FNAME_FLAG_LOST_CHARS;
    8326:	f88e 0015 	strb.w	r0, [lr, #21]
    fname->sfn[fname->seqPos] = '~';
    832a:	7599      	strb	r1, [r3, #22]
    fname->sfn[fname->seqPos + 1] = '1';
    832c:	75da      	strb	r2, [r3, #23]
  }
  return true;

 fail:
  return false;
}
    832e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    8332:	f1a2 0c3a 	sub.w	ip, r2, #58	; 0x3a
    8336:	f1bc 0f05 	cmp.w	ip, #5
    833a:	d9da      	bls.n	82f2 <FatFile::makeSFN(FatLfn_t*)+0x9a>
      if (sfnReservedChar(c)) {
    833c:	f1a2 0c21 	sub.w	ip, r2, #33	; 0x21
    8340:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
    8344:	d8d5      	bhi.n	82f2 <FatFile::makeSFN(FatLfn_t*)+0x9a>
      if (i > in) {
    8346:	454e      	cmp	r6, r9
    8348:	d3d9      	bcc.n	82fe <FatFile::makeSFN(FatLfn_t*)+0xa6>
      if (isLower(c)) {
    834a:	f1a2 0c61 	sub.w	ip, r2, #97	; 0x61
    834e:	f1bc 0f19 	cmp.w	ip, #25
    8352:	d828      	bhi.n	83a6 <FatFile::makeSFN(FatLfn_t*)+0x14e>
        c += 'A' - 'a';
    8354:	3a20      	subs	r2, #32
        lc |= bit;
    8356:	433d      	orrs	r5, r7
        c += 'A' - 'a';
    8358:	b2d2      	uxtb	r2, r2
        lc |= bit;
    835a:	b2ed      	uxtb	r5, r5
    835c:	e001      	b.n	8362 <FatFile::makeSFN(FatLfn_t*)+0x10a>
        is83 = false;
    835e:	2000      	movs	r0, #0
        c = '_';
    8360:	225f      	movs	r2, #95	; 0x5f
      fname->sfn[i++] = c;
    8362:	f109 0c01 	add.w	ip, r9, #1
    8366:	44f1      	add	r9, lr
  for (; ptr < end; ptr++) {
    8368:	3301      	adds	r3, #1
      fname->sfn[i++] = c;
    836a:	f889 2016 	strb.w	r2, [r9, #22]
    836e:	fa5f f28c 	uxtb.w	r2, ip
      if (i < 7) {
    8372:	2a06      	cmp	r2, #6
        fname->seqPos = i;
    8374:	4691      	mov	r9, r2
    8376:	bf98      	it	ls
    8378:	f88e 2014 	strbls.w	r2, [lr, #20]
  for (; ptr < end; ptr++) {
    837c:	429c      	cmp	r4, r3
    837e:	d8a3      	bhi.n	82c8 <FatFile::makeSFN(FatLfn_t*)+0x70>
  if (fname->sfn[0] == ' ') {
    8380:	f89e 3016 	ldrb.w	r3, [lr, #22]
    8384:	2b20      	cmp	r3, #32
    8386:	d009      	beq.n	839c <FatFile::makeSFN(FatLfn_t*)+0x144>
  if (is83) {
    8388:	2800      	cmp	r0, #0
    838a:	d0c6      	beq.n	831a <FatFile::makeSFN(FatLfn_t*)+0xc2>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    838c:	ea18 0f05 	tst.w	r8, r5
    8390:	bf18      	it	ne
    8392:	2502      	movne	r5, #2
    8394:	f88e 5015 	strb.w	r5, [lr, #21]
}
    8398:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return false;
    839c:	2000      	movs	r0, #0
}
    839e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    83a2:	460b      	mov	r3, r1
    83a4:	e78e      	b.n	82c4 <FatFile::makeSFN(FatLfn_t*)+0x6c>
      } else if (isUpper(c)) {
    83a6:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
    83aa:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
    83ae:	bf98      	it	ls
    83b0:	ea47 0808 	orrls.w	r8, r7, r8
    83b4:	e7d5      	b.n	8362 <FatFile::makeSFN(FatLfn_t*)+0x10a>
  for (; ptr < end; ptr++) {
    83b6:	3301      	adds	r3, #1
        is83 = false;
    83b8:	2000      	movs	r0, #0
    83ba:	e783      	b.n	82c4 <FatFile::makeSFN(FatLfn_t*)+0x6c>
  for (; ptr < end; ptr++) {
    83bc:	46a8      	mov	r8, r5
    83be:	e7df      	b.n	8380 <FatFile::makeSFN(FatLfn_t*)+0x128>

000083c0 <FatFile::makeUniqueSfn(FatLfn_t*)>:
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    83c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
    83c4:	f04f 0962 	mov.w	r9, #98	; 0x62
  DirFat_t* dir;
  uint16_t hex = 0;
    83c8:	2500      	movs	r5, #0
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    83ca:	460f      	mov	r7, r1
    83cc:	4604      	mov	r4, r0
    83ce:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 8470 <FatFile::makeUniqueSfn(FatLfn_t*)+0xb0>
    for (uint8_t i = pos + 4 ; i > pos; i--) {
      uint8_t h = hex & 0XF;
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
      hex >>= 4;
    }
    fname->sfn[pos] = '~';
    83d2:	f04f 0a7e 	mov.w	sl, #126	; 0x7e
  uint8_t pos = fname->seqPos;
    83d6:	f891 8014 	ldrb.w	r8, [r1, #20]
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    83da:	f101 0616 	add.w	r6, r1, #22
	return systick_millis_count;
    83de:	f1b8 0f03 	cmp.w	r8, #3
    83e2:	f8db 3000 	ldr.w	r3, [fp]
    83e6:	bf28      	it	cs
    83e8:	f04f 0803 	movcs.w	r8, #3
    hex += millis();
    83ec:	442b      	add	r3, r5
    83ee:	b29d      	uxth	r5, r3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    83f0:	f108 0304 	add.w	r3, r8, #4
    83f4:	b2db      	uxtb	r3, r3
      uint8_t h = hex & 0XF;
    83f6:	f005 020f 	and.w	r2, r5, #15
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    83fa:	1e58      	subs	r0, r3, #1
      hex >>= 4;
    83fc:	092d      	lsrs	r5, r5, #4
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    83fe:	2a09      	cmp	r2, #9
    8400:	f102 0137 	add.w	r1, r2, #55	; 0x37
    8404:	bf98      	it	ls
    8406:	f102 0130 	addls.w	r1, r2, #48	; 0x30
    840a:	18fa      	adds	r2, r7, r3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    840c:	b2c3      	uxtb	r3, r0
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    840e:	7591      	strb	r1, [r2, #22]
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    8410:	4598      	cmp	r8, r3
    8412:	d1f0      	bne.n	83f6 <FatFile::makeUniqueSfn(FatLfn_t*)+0x36>
    fname->sfn[pos] = '~';
    8414:	eb07 0308 	add.w	r3, r7, r8
    seekSet(0);
    8418:	2100      	movs	r1, #0
    841a:	4620      	mov	r0, r4
    841c:	f883 a016 	strb.w	sl, [r3, #22]
    8420:	f7ff fb74 	bl	7b0c <FatFile::seekSet(unsigned long)>
      dir = readDirCache(true);
    8424:	2101      	movs	r1, #1
    8426:	4620      	mov	r0, r4
    8428:	f7ff fa10 	bl	784c <FatFile::readDirCache(bool)>
    842c:	4603      	mov	r3, r0
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    842e:	220b      	movs	r2, #11
    8430:	4630      	mov	r0, r6
      if (!dir) {
    8432:	b19b      	cbz	r3, 845c <FatFile::makeUniqueSfn(FatLfn_t*)+0x9c>
      if (dir->name[0] == FAT_NAME_FREE) {
    8434:	f893 c000 	ldrb.w	ip, [r3]
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    8438:	4619      	mov	r1, r3
      if (dir->name[0] == FAT_NAME_FREE) {
    843a:	f1bc 0f00 	cmp.w	ip, #0
    843e:	d013      	beq.n	8468 <FatFile::makeUniqueSfn(FatLfn_t*)+0xa8>
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    8440:	7adb      	ldrb	r3, [r3, #11]
    8442:	071b      	lsls	r3, r3, #28
    8444:	d4ee      	bmi.n	8424 <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
    8446:	f008 fd09 	bl	10e5c <memcmp>
    844a:	2800      	cmp	r0, #0
    844c:	d1ea      	bne.n	8424 <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
    844e:	f109 39ff 	add.w	r9, r9, #4294967295
    8452:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
    8456:	d1c2      	bne.n	83de <FatFile::makeUniqueSfn(FatLfn_t*)+0x1e>
  }
  // fall inti fail - too many tries.
  DBG_FAIL_MACRO;

 fail:
  return false;
    8458:	4648      	mov	r0, r9
 fail:
    845a:	e003      	b.n	8464 <FatFile::makeUniqueSfn(FatLfn_t*)+0xa4>
        if (!getError()) {
    845c:	7860      	ldrb	r0, [r4, #1]
    845e:	fab0 f080 	clz	r0, r0
    8462:	0940      	lsrs	r0, r0, #5

 done:
  return true;
}
    8464:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return true;
    8468:	2001      	movs	r0, #1
}
    846a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    846e:	bf00      	nop
    8470:	2005e500 	.word	0x2005e500

00008474 <FatFile::open(FatFile*, FatLfn_t*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    8474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8478:	ed2d 8b02 	vpush	{d8}
    847c:	b08b      	sub	sp, #44	; 0x2c
    847e:	e9cd 0302 	strd	r0, r3, [sp, #8]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;
    8482:	688b      	ldr	r3, [r1, #8]
    8484:	9307      	str	r3, [sp, #28]

  if (!dirFile->isDir() || isOpen()) {
    8486:	780b      	ldrb	r3, [r1, #0]
    8488:	f013 0f70 	tst.w	r3, #112	; 0x70
    848c:	d053      	beq.n	8536 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  bool isOpen() const {return m_attributes;}
    848e:	9b02      	ldr	r3, [sp, #8]
    8490:	781b      	ldrb	r3, [r3, #0]
    8492:	2b00      	cmp	r3, #0
    8494:	d14f      	bne.n	8536 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  nameOrd = (fname->len + 12)/13;
    8496:	6913      	ldr	r3, [r2, #16]
    8498:	4690      	mov	r8, r2
    849a:	4a9a      	ldr	r2, [pc, #616]	; (8704 <FatFile::open(FatFile*, FatLfn_t*, int)+0x290>)
    849c:	460e      	mov	r6, r1
    849e:	330c      	adds	r3, #12
    84a0:	fba2 2303 	umull	r2, r3, r2, r3
    84a4:	f3c3 0287 	ubfx	r2, r3, #2, #8
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    84a8:	f898 3015 	ldrb.w	r3, [r8, #21]
    84ac:	0798      	lsls	r0, r3, #30
  nameOrd = (fname->len + 12)/13;
    84ae:	9204      	str	r2, [sp, #16]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    84b0:	f000 80a7 	beq.w	8602 <FatFile::open(FatFile*, FatLfn_t*, int)+0x18e>
    84b4:	1c57      	adds	r7, r2, #1
    84b6:	b2ff      	uxtb	r7, r7
  uint8_t checksum = 0;
    84b8:	2300      	movs	r3, #0
    seekSet(0);
    84ba:	4630      	mov	r0, r6
    84bc:	4619      	mov	r1, r3
    84be:	461c      	mov	r4, r3
    84c0:	9306      	str	r3, [sp, #24]
    84c2:	f7ff fb23 	bl	7b0c <FatFile::seekSet(unsigned long)>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    84c6:	f108 0316 	add.w	r3, r8, #22
  uint8_t order = 0;
    84ca:	46a3      	mov	fp, r4
  uint8_t lfnOrd = 0;
    84cc:	46a1      	mov	r9, r4
  uint16_t freeIndex = 0;
    84ce:	46a2      	mov	sl, r4
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    84d0:	ee08 3a10 	vmov	s16, r3
  bool fnameFound = false;
    84d4:	9405      	str	r4, [sp, #20]
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    84d6:	6975      	ldr	r5, [r6, #20]
    dir = dirFile->readDirCache();
    84d8:	2100      	movs	r1, #0
    84da:	4630      	mov	r0, r6
    84dc:	f7ff f9b6 	bl	784c <FatFile::readDirCache(bool)>
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    84e0:	f3c5 154f 	ubfx	r5, r5, #5, #16
    if (!dir) {
    84e4:	4603      	mov	r3, r0
    84e6:	b320      	cbz	r0, 8532 <FatFile::open(FatFile*, FatLfn_t*, int)+0xbe>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    84e8:	7802      	ldrb	r2, [r0, #0]
    84ea:	2ae5      	cmp	r2, #229	; 0xe5
    84ec:	d029      	beq.n	8542 <FatFile::open(FatFile*, FatLfn_t*, int)+0xce>
    84ee:	b342      	cbz	r2, 8542 <FatFile::open(FatFile*, FatLfn_t*, int)+0xce>
        freeFound = 0;
    84f0:	42bc      	cmp	r4, r7
    84f2:	bf38      	it	cc
    84f4:	2400      	movcc	r4, #0
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    84f6:	2a2e      	cmp	r2, #46	; 0x2e
    84f8:	d02b      	beq.n	8552 <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
  return dir->attributes == FAT_ATTRIB_LONG_NAME;
    84fa:	f890 c00b 	ldrb.w	ip, [r0, #11]
    } else if (isLongName(dir)) {
    84fe:	f1bc 0f0f 	cmp.w	ip, #15
    8502:	d054      	beq.n	85ae <FatFile::open(FatFile*, FatLfn_t*, int)+0x13a>
    } else if (isFileOrSubdir(dir)) {
    8504:	f01c 0c08 	ands.w	ip, ip, #8
    8508:	d123      	bne.n	8552 <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
      if (lfnOrd) {
    850a:	f1b9 0f00 	cmp.w	r9, #0
    850e:	f040 80d5 	bne.w	86bc <FatFile::open(FatFile*, FatLfn_t*, int)+0x248>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    8512:	220b      	movs	r2, #11
    8514:	ee18 1a10 	vmov	r1, s16
    8518:	f008 fca0 	bl	10e5c <memcmp>
    851c:	2800      	cmp	r0, #0
    851e:	d1da      	bne.n	84d6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    8520:	f898 3015 	ldrb.w	r3, [r8, #21]
    8524:	f013 0301 	ands.w	r3, r3, #1
    8528:	f000 80e4 	beq.w	86f4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x280>
          goto found;
        }
        fnameFound = true;
    852c:	2301      	movs	r3, #1
    852e:	9305      	str	r3, [sp, #20]
    8530:	e7d1      	b.n	84d6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
      if (dirFile->getError()) {
    8532:	7873      	ldrb	r3, [r6, #1]
    8534:	b183      	cbz	r3, 8558 <FatFile::open(FatFile*, FatLfn_t*, int)+0xe4>
    goto fail;
  }
  return true;

 fail:
  return false;
    8536:	2000      	movs	r0, #0
}
    8538:	b00b      	add	sp, #44	; 0x2c
    853a:	ecbd 8b02 	vpop	{d8}
    853e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    8542:	2c00      	cmp	r4, #0
    8544:	bf08      	it	eq
    8546:	46aa      	moveq	sl, r5
      if (freeFound < freeNeed) {
    8548:	42bc      	cmp	r4, r7
    854a:	d201      	bcs.n	8550 <FatFile::open(FatFile*, FatLfn_t*, int)+0xdc>
        freeFound++;
    854c:	3401      	adds	r4, #1
    854e:	b2e4      	uxtb	r4, r4
      if (dir->name[0] == FAT_NAME_FREE) {
    8550:	b112      	cbz	r2, 8558 <FatFile::open(FatFile*, FatLfn_t*, int)+0xe4>
      lfnOrd = 0;
    8552:	f04f 0900 	mov.w	r9, #0
    8556:	e7be      	b.n	84d6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    8558:	9b03      	ldr	r3, [sp, #12]
    855a:	059a      	lsls	r2, r3, #22
    855c:	d5eb      	bpl.n	8536 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
    855e:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
    8562:	3b01      	subs	r3, #1
    8564:	2b01      	cmp	r3, #1
    8566:	d8e6      	bhi.n	8536 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  if (freeFound == 0) {
    8568:	2c00      	cmp	r4, #0
    856a:	bf08      	it	eq
    856c:	46aa      	moveq	sl, r5
  while (freeFound < freeNeed) {
    856e:	42bc      	cmp	r4, r7
    8570:	d303      	bcc.n	857a <FatFile::open(FatFile*, FatLfn_t*, int)+0x106>
    8572:	e048      	b.n	8606 <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    freeFound++;
    8574:	b2dc      	uxtb	r4, r3
  while (freeFound < freeNeed) {
    8576:	42a7      	cmp	r7, r4
    8578:	d045      	beq.n	8606 <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    dir = dirFile->readDirCache();
    857a:	2100      	movs	r1, #0
    857c:	4630      	mov	r0, r6
    857e:	f7ff f965 	bl	784c <FatFile::readDirCache(bool)>
    freeFound++;
    8582:	1c63      	adds	r3, r4, #1
    if (!dir) {
    8584:	2800      	cmp	r0, #0
    8586:	d1f5      	bne.n	8574 <FatFile::open(FatFile*, FatLfn_t*, int)+0x100>
      if (dirFile->getError()) {
    8588:	7873      	ldrb	r3, [r6, #1]
    858a:	2b00      	cmp	r3, #0
    858c:	d1d3      	bne.n	8536 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  while (freeFound < freeNeed) {
    858e:	42a7      	cmp	r7, r4
    8590:	d939      	bls.n	8606 <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    8592:	9d07      	ldr	r5, [sp, #28]
    8594:	e005      	b.n	85a2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x12e>
    return m_sectorsPerCluster*(m_bytesPerSector/FS_DIR_SIZE);
    8596:	792b      	ldrb	r3, [r5, #4]
    freeFound += vol->dirEntriesPerCluster();
    8598:	eb04 1403 	add.w	r4, r4, r3, lsl #4
    859c:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
    859e:	42a7      	cmp	r7, r4
    85a0:	d931      	bls.n	8606 <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    if (!dirFile->addDirCluster()) {
    85a2:	4630      	mov	r0, r6
    85a4:	f7fe fdc2 	bl	712c <FatFile::addDirCluster()>
    85a8:	2800      	cmp	r0, #0
    85aa:	d1f4      	bne.n	8596 <FatFile::open(FatFile*, FatLfn_t*, int)+0x122>
    85ac:	e7c3      	b.n	8536 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
      if (!lfnOrd) {
    85ae:	f1b9 0f00 	cmp.w	r9, #0
    85b2:	d119      	bne.n	85e8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x174>
        order = ldir->order & 0X1F;
    85b4:	f002 0b1f 	and.w	fp, r2, #31
        if (order != nameOrd ||
    85b8:	9904      	ldr	r1, [sp, #16]
    85ba:	4559      	cmp	r1, fp
    85bc:	d18b      	bne.n	84d6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
    85be:	f012 0940 	ands.w	r9, r2, #64	; 0x40
    85c2:	d088      	beq.n	84d6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        checksum = ldir->checksum;
    85c4:	7b43      	ldrb	r3, [r0, #13]
    85c6:	4689      	mov	r9, r1
    85c8:	9306      	str	r3, [sp, #24]
      if (order == 1) {
    85ca:	f1bb 0f01 	cmp.w	fp, #1
    85ce:	d182      	bne.n	84d6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
    85d0:	1c69      	adds	r1, r5, #1
    85d2:	464b      	mov	r3, r9
    85d4:	4642      	mov	r2, r8
    85d6:	4630      	mov	r0, r6
    85d8:	b289      	uxth	r1, r1
    85da:	f7ff fd4d 	bl	8078 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>
          lfnOrd = 0;
    85de:	2800      	cmp	r0, #0
    85e0:	bf08      	it	eq
    85e2:	f04f 0900 	moveq.w	r9, #0
    85e6:	e776      	b.n	84d6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    85e8:	f10b 3bff 	add.w	fp, fp, #4294967295
    85ec:	fa5f fb8b 	uxtb.w	fp, fp
    85f0:	455a      	cmp	r2, fp
    85f2:	d1ae      	bne.n	8552 <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
    85f4:	7b43      	ldrb	r3, [r0, #13]
    85f6:	9a06      	ldr	r2, [sp, #24]
    85f8:	4293      	cmp	r3, r2
    85fa:	d0e6      	beq.n	85ca <FatFile::open(FatFile*, FatLfn_t*, int)+0x156>
      lfnOrd = 0;
    85fc:	f04f 0900 	mov.w	r9, #0
    8600:	e769      	b.n	84d6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    8602:	2701      	movs	r7, #1
    8604:	e758      	b.n	84b8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x44>
  if (fnameFound) {
    8606:	9b05      	ldr	r3, [sp, #20]
    8608:	b12b      	cbz	r3, 8616 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a2>
    if (!dirFile->makeUniqueSfn(fname)) {
    860a:	4641      	mov	r1, r8
    860c:	4630      	mov	r0, r6
    860e:	f7ff fed7 	bl	83c0 <FatFile::makeUniqueSfn(FatLfn_t*)>
    8612:	2800      	cmp	r0, #0
    8614:	d08f      	beq.n	8536 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  lfnOrd = freeNeed - 1;
    8616:	3f01      	subs	r7, #1
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    8618:	4642      	mov	r2, r8
    861a:	4630      	mov	r0, r6
  lfnOrd = freeNeed - 1;
    861c:	b2fb      	uxtb	r3, r7
  curIndex = freeIndex + lfnOrd;
    861e:	eb0a 0503 	add.w	r5, sl, r3
  lfnOrd = freeNeed - 1;
    8622:	461f      	mov	r7, r3
  curIndex = freeIndex + lfnOrd;
    8624:	b2ad      	uxth	r5, r5
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    8626:	4629      	mov	r1, r5
    8628:	f7ff fd84 	bl	8134 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>
    862c:	2800      	cmp	r0, #0
    862e:	d082      	beq.n	8536 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    8630:	0169      	lsls	r1, r5, #5
    8632:	4630      	mov	r0, r6
    8634:	f7ff fa6a 	bl	7b0c <FatFile::seekSet(unsigned long)>
    8638:	2800      	cmp	r0, #0
    863a:	f43f af7c 	beq.w	8536 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    863e:	2100      	movs	r1, #0
    8640:	4630      	mov	r0, r6
    8642:	f7ff f903 	bl	784c <FatFile::readDirCache(bool)>
  if (!dir) {
    8646:	4604      	mov	r4, r0
    8648:	2800      	cmp	r0, #0
    864a:	f43f af74 	beq.w	8536 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  memset(dir, 0, sizeof(DirFat_t));
    864e:	2220      	movs	r2, #32
    8650:	2100      	movs	r1, #0
    8652:	f008 fcaf 	bl	10fb4 <memset>
  memcpy(dir->name, fname->sfn, 11);
    8656:	f8d8 2016 	ldr.w	r2, [r8, #22]
    865a:	f8d8 301a 	ldr.w	r3, [r8, #26]
    865e:	6022      	str	r2, [r4, #0]
    8660:	6063      	str	r3, [r4, #4]
    8662:	f898 3020 	ldrb.w	r3, [r8, #32]
    8666:	f8b8 201e 	ldrh.w	r2, [r8, #30]
    866a:	72a3      	strb	r3, [r4, #10]
    866c:	8122      	strh	r2, [r4, #8]
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    866e:	f898 3015 	ldrb.w	r3, [r8, #21]
    8672:	f003 0318 	and.w	r3, r3, #24
    8676:	7323      	strb	r3, [r4, #12]
  if (FsDateTime::callback) {
    8678:	4b23      	ldr	r3, [pc, #140]	; (8708 <FatFile::open(FatFile*, FatLfn_t*, int)+0x294>)
    867a:	681b      	ldr	r3, [r3, #0]
    867c:	2b00      	cmp	r3, #0
    867e:	d03b      	beq.n	86f8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x284>
    FsDateTime::callback(&date, &time, &ms10);
    8680:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    8684:	f10d 0126 	add.w	r1, sp, #38	; 0x26
    8688:	a809      	add	r0, sp, #36	; 0x24
    868a:	4798      	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
    868c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    8690:	8223      	strh	r3, [r4, #16]
    8692:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
    8696:	81e3      	strh	r3, [r4, #14]
    dir->createTimeMs = ms10;
    8698:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    869c:	7363      	strb	r3, [r4, #13]
    869e:	9a07      	ldr	r2, [sp, #28]
    86a0:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
    86a4:	f043 0301 	orr.w	r3, r3, #1
    86a8:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    86ac:	9b03      	ldr	r3, [sp, #12]
    86ae:	462a      	mov	r2, r5
    86b0:	4631      	mov	r1, r6
    86b2:	9802      	ldr	r0, [sp, #8]
    86b4:	9700      	str	r7, [sp, #0]
    86b6:	f7ff fa81 	bl	7bbc <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    86ba:	e73d      	b.n	8538 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc4>
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    86bc:	f1bb 0f01 	cmp.w	fp, #1
    86c0:	f47f af39 	bne.w	8536 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    for (uint8_t i = 0; i < 11; i++) {
    86c4:	300a      	adds	r0, #10
    86c6:	e001      	b.n	86cc <FatFile::open(FatFile*, FatLfn_t*, int)+0x258>
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    86c8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    86cc:	ea4f 11cc 	mov.w	r1, ip, lsl #7
    for (uint8_t i = 0; i < 11; i++) {
    86d0:	4298      	cmp	r0, r3
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    86d2:	ea41 015c 	orr.w	r1, r1, ip, lsr #1
    86d6:	fa52 f281 	uxtab	r2, r2, r1
    86da:	fa5f fc82 	uxtb.w	ip, r2
    for (uint8_t i = 0; i < 11; i++) {
    86de:	d1f3      	bne.n	86c8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x254>
    86e0:	9b06      	ldr	r3, [sp, #24]
    86e2:	4563      	cmp	r3, ip
    86e4:	f47f af27 	bne.w	8536 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    86e8:	464f      	mov	r7, r9
  if (oflag & O_EXCL) {
    86ea:	9b03      	ldr	r3, [sp, #12]
    86ec:	0519      	lsls	r1, r3, #20
    86ee:	f53f af22 	bmi.w	8536 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    86f2:	e7db      	b.n	86ac <FatFile::open(FatFile*, FatLfn_t*, int)+0x238>
    86f4:	461f      	mov	r7, r3
    86f6:	e7f8      	b.n	86ea <FatFile::open(FatFile*, FatLfn_t*, int)+0x276>
    86f8:	f645 0321 	movw	r3, #22561	; 0x5821
    86fc:	8223      	strh	r3, [r4, #16]
    86fe:	8323      	strh	r3, [r4, #24]
    8700:	8263      	strh	r3, [r4, #18]
    if (FS_DEFAULT_TIME) {
    8702:	e7cc      	b.n	869e <FatFile::open(FatFile*, FatLfn_t*, int)+0x22a>
    8704:	4ec4ec4f 	.word	0x4ec4ec4f
    8708:	2005e024 	.word	0x2005e024

0000870c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            FatLfn_t* fname, const char** ptr) {
    870c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8710:	461f      	mov	r7, r3
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
    8712:	780b      	ldrb	r3, [r1, #0]
                            FatLfn_t* fname, const char** ptr) {
    8714:	b082      	sub	sp, #8
    8716:	460c      	mov	r4, r1
  while (*path == ' ') {
    8718:	2b20      	cmp	r3, #32
                            FatLfn_t* fname, const char** ptr) {
    871a:	4615      	mov	r5, r2
  while (*path == ' ') {
    871c:	d103      	bne.n	8726 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x1a>
    871e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    8722:	2b20      	cmp	r3, #32
    8724:	d0fb      	beq.n	871e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x12>
    path++;
  }
  fname->begin = path;
    8726:	602c      	str	r4, [r5, #0]
  while (*path && !isDirSeparator(*path)) {
    8728:	7823      	ldrb	r3, [r4, #0]
    872a:	b363      	cbz	r3, 8786 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7a>
    872c:	2b2f      	cmp	r3, #47	; 0x2f
    872e:	d02a      	beq.n	8786 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7a>
  size_t len = 0;
    8730:	f04f 0800 	mov.w	r8, #0
    8734:	4e29      	ldr	r6, [pc, #164]	; (87dc <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xd0>)
#if USE_UTF8_LONG_NAMES
    uint32_t cp;
    // Allow end = path + 4 since path is zero terminated.
    path = FsUtf::mbToCp(path, path + 4, &cp);
    8736:	1d21      	adds	r1, r4, #4
    8738:	4620      	mov	r0, r4
    873a:	aa01      	add	r2, sp, #4
    873c:	f003 fc96 	bl	c06c <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!path) {
    8740:	4604      	mov	r4, r0
    8742:	b170      	cbz	r0, 8762 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
      DBG_FAIL_MACRO;
      goto fail;
    }
    len += cp <= 0XFFFF ? 1 : 2;
    8744:	9b01      	ldr	r3, [sp, #4]
    8746:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    874a:	d240      	bcs.n	87ce <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xc2>
    if (cp < 0X80 && lfnReservedChar(cp)) {
    874c:	2b7f      	cmp	r3, #127	; 0x7f
    len += cp <= 0XFFFF ? 1 : 2;
    874e:	f108 0801 	add.w	r8, r8, #1
    if (cp < 0X80 && lfnReservedChar(cp)) {
    8752:	d831      	bhi.n	87b8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>
    8754:	2b3c      	cmp	r3, #60	; 0x3c
    8756:	b2d9      	uxtb	r1, r3
    8758:	d829      	bhi.n	87ae <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xa2>
    875a:	2921      	cmp	r1, #33	; 0x21
    875c:	d805      	bhi.n	876a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x5e>
    875e:	291f      	cmp	r1, #31
    8760:	d809      	bhi.n	8776 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x6a>
  *ptr = path;
  return makeSFN(fname);

 fail:
  return false;
}
    8762:	2000      	movs	r0, #0
    8764:	b002      	add	sp, #8
    8766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    876a:	3922      	subs	r1, #34	; 0x22
    876c:	b2c9      	uxtb	r1, r1
    876e:	fa26 f101 	lsr.w	r1, r6, r1
    8772:	07ca      	lsls	r2, r1, #31
    8774:	d4f5      	bmi.n	8762 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
    if (cp != '.' && cp != ' ') {
    8776:	2b2e      	cmp	r3, #46	; 0x2e
    8778:	d001      	beq.n	877e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
    877a:	2b20      	cmp	r3, #32
    877c:	d11c      	bne.n	87b8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>
  while (*path && !isDirSeparator(*path)) {
    877e:	7823      	ldrb	r3, [r4, #0]
    8780:	b10b      	cbz	r3, 8786 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7a>
    8782:	2b2f      	cmp	r3, #47	; 0x2f
    8784:	d1d7      	bne.n	8736 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x2a>
  if (!fname->len || fname->len > FAT_MAX_LFN_LENGTH) {
    8786:	692b      	ldr	r3, [r5, #16]
    8788:	3b01      	subs	r3, #1
    878a:	2bfe      	cmp	r3, #254	; 0xfe
    878c:	d8e9      	bhi.n	8762 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    878e:	7823      	ldrb	r3, [r4, #0]
    8790:	2b20      	cmp	r3, #32
    8792:	d103      	bne.n	879c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x90>
    8794:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    8798:	2b20      	cmp	r3, #32
    879a:	d0fb      	beq.n	8794 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x88>
    879c:	2b2f      	cmp	r3, #47	; 0x2f
    879e:	d0f9      	beq.n	8794 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x88>
  return makeSFN(fname);
    87a0:	4628      	mov	r0, r5
  *ptr = path;
    87a2:	603c      	str	r4, [r7, #0]
}
    87a4:	b002      	add	sp, #8
    87a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return makeSFN(fname);
    87aa:	f7ff bd55 	b.w	8258 <FatFile::makeSFN(FatLfn_t*)>
    87ae:	295c      	cmp	r1, #92	; 0x5c
    87b0:	d0d7      	beq.n	8762 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
    87b2:	d905      	bls.n	87c0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xb4>
    87b4:	297c      	cmp	r1, #124	; 0x7c
    87b6:	d0d4      	beq.n	8762 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
      fname->len = len;
    87b8:	f8c5 8010 	str.w	r8, [r5, #16]
      fname->end = path;
    87bc:	60ac      	str	r4, [r5, #8]
    87be:	e7de      	b.n	877e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
    87c0:	393e      	subs	r1, #62	; 0x3e
    87c2:	2901      	cmp	r1, #1
    87c4:	d8f8      	bhi.n	87b8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>
}
    87c6:	2000      	movs	r0, #0
    87c8:	b002      	add	sp, #8
    87ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    len += cp <= 0XFFFF ? 1 : 2;
    87ce:	f108 0802 	add.w	r8, r8, #2
      fname->end = path;
    87d2:	60ac      	str	r4, [r5, #8]
      fname->len = len;
    87d4:	f8c5 8010 	str.w	r8, [r5, #16]
      fname->end = path;
    87d8:	e7d1      	b.n	877e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
    87da:	bf00      	nop
    87dc:	05002101 	.word	0x05002101

000087e0 <FatFile::remove()>:
//------------------------------------------------------------------------------
bool FatFile::remove() {
    87e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  FatFile() {}
    87e2:	2300      	movs	r3, #0
    87e4:	b08b      	sub	sp, #44	; 0x2c
    87e6:	9301      	str	r3, [sp, #4]
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    87e8:	7883      	ldrb	r3, [r0, #2]
    87ea:	079a      	lsls	r2, r3, #30
    87ec:	d524      	bpl.n	8838 <FatFile::remove()+0x58>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    87ee:	6a01      	ldr	r1, [r0, #32]
    87f0:	4605      	mov	r5, r0
    87f2:	b119      	cbz	r1, 87fc <FatFile::remove()+0x1c>
    87f4:	6880      	ldr	r0, [r0, #8]
    87f6:	f000 fe19 	bl	942c <FatPartition::freeChain(unsigned long)>
    87fa:	b1e8      	cbz	r0, 8838 <FatFile::remove()+0x58>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    87fc:	2101      	movs	r1, #1
    87fe:	4628      	mov	r0, r5
    8800:	f7fe fcd0 	bl	71a4 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    8804:	b1c0      	cbz	r0, 8838 <FatFile::remove()+0x58>
    for (uint8_t i = 0; i < 11; i++) {
    8806:	1e42      	subs	r2, r0, #1
    8808:	f100 0c0a 	add.w	ip, r0, #10
    uint8_t sum = 0;
    880c:	2400      	movs	r4, #0
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    880e:	01e3      	lsls	r3, r4, #7
    8810:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    8814:	ea43 0354 	orr.w	r3, r3, r4, lsr #1
    for (uint8_t i = 0; i < 11; i++) {
    8818:	4594      	cmp	ip, r2
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    881a:	fa51 f383 	uxtab	r3, r1, r3
    881e:	b2dc      	uxtb	r4, r3
    for (uint8_t i = 0; i < 11; i++) {
    8820:	d1f5      	bne.n	880e <FatFile::remove()+0x2e>
    goto fail;
  }
  checksum = lfnChecksum(dir->name);

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
    8822:	26e5      	movs	r6, #229	; 0xe5

  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    8824:	2300      	movs	r3, #0
  dir->name[0] = FAT_NAME_DELETED;
    8826:	7006      	strb	r6, [r0, #0]
  m_flags = 0;

  // Write entry to device.
  if (!m_vol->cacheSync()) {
    8828:	68af      	ldr	r7, [r5, #8]
  m_attributes = FILE_ATTR_CLOSED;
    882a:	702b      	strb	r3, [r5, #0]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    882c:	f107 0028 	add.w	r0, r7, #40	; 0x28
  m_flags = 0;
    8830:	70ab      	strb	r3, [r5, #2]
    8832:	f003 fae9 	bl	be08 <FsCache::sync()>
    8836:	b910      	cbnz	r0, 883e <FatFile::remove()+0x5e>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

 fail:
  return false;
    8838:	2000      	movs	r0, #0
}
    883a:	b00b      	add	sp, #44	; 0x2c
    883c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    883e:	f507 700e 	add.w	r0, r7, #568	; 0x238
    8842:	f003 fae1 	bl	be08 <FsCache::sync()>
    8846:	2800      	cmp	r0, #0
    8848:	d0f6      	beq.n	8838 <FatFile::remove()+0x58>
    884a:	6838      	ldr	r0, [r7, #0]
    return m_blockDev->syncDevice();
    884c:	6803      	ldr	r3, [r0, #0]
    884e:	6a1b      	ldr	r3, [r3, #32]
    8850:	4798      	blx	r3
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    8852:	2800      	cmp	r0, #0
    8854:	d0f0      	beq.n	8838 <FatFile::remove()+0x58>
  if (!isLFN()) {
    8856:	78eb      	ldrb	r3, [r5, #3]
    8858:	2b00      	cmp	r3, #0
    885a:	d0ee      	beq.n	883a <FatFile::remove()+0x5a>
  if (!dirFile.openCluster(this)) {
    885c:	4629      	mov	r1, r5
    885e:	a801      	add	r0, sp, #4
    8860:	f7fe fec0 	bl	75e4 <FatFile::openCluster(FatFile*)>
    8864:	2800      	cmp	r0, #0
    8866:	d0e7      	beq.n	8838 <FatFile::remove()+0x58>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    8868:	78eb      	ldrb	r3, [r5, #3]
    886a:	2b00      	cmp	r3, #0
    886c:	d0e4      	beq.n	8838 <FatFile::remove()+0x58>
    886e:	2701      	movs	r7, #1
    8870:	e021      	b.n	88b6 <FatFile::remove()+0xd6>
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    8872:	a801      	add	r0, sp, #4
    8874:	f7fe ffea 	bl	784c <FatFile::readDirCache(bool)>
    8878:	1c7b      	adds	r3, r7, #1
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    887a:	b2f9      	uxtb	r1, r7
    if (!ldir) {
    887c:	2800      	cmp	r0, #0
    887e:	d0db      	beq.n	8838 <FatFile::remove()+0x58>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    8880:	7ac2      	ldrb	r2, [r0, #11]
    8882:	2a0f      	cmp	r2, #15
    8884:	d1d8      	bne.n	8838 <FatFile::remove()+0x58>
        order != (ldir->order & 0X1F) ||
    8886:	7802      	ldrb	r2, [r0, #0]
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    8888:	fa5f fc83 	uxtb.w	ip, r3
    888c:	b29f      	uxth	r7, r3
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    888e:	f002 031f 	and.w	r3, r2, #31
    8892:	428b      	cmp	r3, r1
    8894:	d1d0      	bne.n	8838 <FatFile::remove()+0x58>
        order != (ldir->order & 0X1F) ||
    8896:	7b43      	ldrb	r3, [r0, #13]
    8898:	42a3      	cmp	r3, r4
    889a:	d1cd      	bne.n	8838 <FatFile::remove()+0x58>
    ldir->order = FAT_NAME_DELETED;
    889c:	7006      	strb	r6, [r0, #0]
    m_vol->cacheDirty();
    889e:	68a9      	ldr	r1, [r5, #8]
    88a0:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
    88a4:	f043 0301 	orr.w	r3, r3, #1
    88a8:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
    if (last) {
    88ac:	0653      	lsls	r3, r2, #25
    88ae:	d40d      	bmi.n	88cc <FatFile::remove()+0xec>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    88b0:	78eb      	ldrb	r3, [r5, #3]
    88b2:	4563      	cmp	r3, ip
    88b4:	d3c0      	bcc.n	8838 <FatFile::remove()+0x58>
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.cacheDir(m_dirIndex - order));
    88b6:	88a9      	ldrh	r1, [r5, #4]
    88b8:	a801      	add	r0, sp, #4
    88ba:	1bc9      	subs	r1, r1, r7
    88bc:	b289      	uxth	r1, r1
    88be:	0149      	lsls	r1, r1, #5
    88c0:	f7ff f924 	bl	7b0c <FatFile::seekSet(unsigned long)>
    88c4:	2100      	movs	r1, #0
    88c6:	2800      	cmp	r0, #0
    88c8:	d1d3      	bne.n	8872 <FatFile::remove()+0x92>
    88ca:	e7b5      	b.n	8838 <FatFile::remove()+0x58>
      if (!m_vol->cacheSync()) {
    88cc:	68ac      	ldr	r4, [r5, #8]
    88ce:	f104 0028 	add.w	r0, r4, #40	; 0x28
    88d2:	f003 fa99 	bl	be08 <FsCache::sync()>
    88d6:	2800      	cmp	r0, #0
    88d8:	d0ae      	beq.n	8838 <FatFile::remove()+0x58>
    88da:	f504 700e 	add.w	r0, r4, #568	; 0x238
    88de:	f003 fa93 	bl	be08 <FsCache::sync()>
    88e2:	2800      	cmp	r0, #0
    88e4:	d0a8      	beq.n	8838 <FatFile::remove()+0x58>
    88e6:	6820      	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
    88e8:	6803      	ldr	r3, [r0, #0]
    88ea:	6a1b      	ldr	r3, [r3, #32]
    88ec:	4798      	blx	r3
    88ee:	e7a4      	b.n	883a <FatFile::remove()+0x5a>

000088f0 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
   * \param[in] ns Number of sectors to be written.
   * \param[in] callback Function to be called for each sector's data
   * \param[in] context Context to pass to callback function
   * \return true for success or false for failure.
   */
  virtual bool writeSectorsCallback(uint32_t sector, size_t ns,
    88f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    88f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
   const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
    88f8:	b1a2      	cbz	r2, 8924 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x34>
    88fa:	4605      	mov	r5, r0
    88fc:	460c      	mov	r4, r1
    88fe:	4698      	mov	r8, r3
    8900:	1857      	adds	r7, r2, r1
    8902:	e001      	b.n	8908 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x18>
    8904:	42bc      	cmp	r4, r7
    8906:	d00d      	beq.n	8924 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x34>
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    8908:	682b      	ldr	r3, [r5, #0]
    890a:	4620      	mov	r0, r4
    890c:	4649      	mov	r1, r9
    890e:	6a5e      	ldr	r6, [r3, #36]	; 0x24
    8910:	47c0      	blx	r8
    8912:	4621      	mov	r1, r4
    8914:	4602      	mov	r2, r0
    8916:	4628      	mov	r0, r5
     for (size_t i = 0; i < ns; i++) {
    8918:	3401      	adds	r4, #1
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    891a:	47b0      	blx	r6
    891c:	2800      	cmp	r0, #0
    891e:	d1f1      	bne.n	8904 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x14>
     }
    return true;
  }
    8920:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return true;
    8924:	2001      	movs	r0, #1
  }
    8926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    892a:	bf00      	nop

0000892c <initFatDirCallback(unsigned long, void*)>:
  uint16_t count;
  uint16_t dotcount;
};
static const uint8_t * initFatDirCallback(uint32_t sector, void *context) {
  struct initFatDirState * state = (struct initFatDirState *)context;
  if (state->pr && ++state->count >= state->dotcount) {
    892c:	6848      	ldr	r0, [r1, #4]
static const uint8_t * initFatDirCallback(uint32_t sector, void *context) {
    892e:	b510      	push	{r4, lr}
    8930:	460c      	mov	r4, r1
  if (state->pr && ++state->count >= state->dotcount) {
    8932:	b130      	cbz	r0, 8942 <initFatDirCallback(unsigned long, void*)+0x16>
    8934:	890b      	ldrh	r3, [r1, #8]
    8936:	894a      	ldrh	r2, [r1, #10]
    8938:	3301      	adds	r3, #1
    893a:	b29b      	uxth	r3, r3
    893c:	429a      	cmp	r2, r3
    893e:	810b      	strh	r3, [r1, #8]
    8940:	d901      	bls.n	8946 <initFatDirCallback(unsigned long, void*)+0x1a>
    state->pr->write(".");
    state->count = 0;
  }
  return state->buffer;
}
    8942:	6820      	ldr	r0, [r4, #0]
    8944:	bd10      	pop	{r4, pc}
    8946:	6803      	ldr	r3, [r0, #0]
    8948:	2201      	movs	r2, #1
    894a:	4903      	ldr	r1, [pc, #12]	; (8958 <initFatDirCallback(unsigned long, void*)+0x2c>)
    894c:	685b      	ldr	r3, [r3, #4]
    894e:	4798      	blx	r3
    state->count = 0;
    8950:	2300      	movs	r3, #0
}
    8952:	6820      	ldr	r0, [r4, #0]
    state->count = 0;
    8954:	8123      	strh	r3, [r4, #8]
}
    8956:	bd10      	pop	{r4, pc}
    8958:	2000b3d4 	.word	0x2000b3d4

0000895c <FatFormatter::initFatDir(unsigned char, unsigned long)>:
bool FatFormatter::initFatDir(uint8_t fatType, uint32_t sectorCount) {
    895c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8960:	4605      	mov	r5, r0
    8962:	b087      	sub	sp, #28
    8964:	4688      	mov	r8, r1
    8966:	4692      	mov	sl, r2
  size_t n;
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    8968:	2100      	movs	r1, #0
    896a:	f44f 7200 	mov.w	r2, #512	; 0x200
    896e:	6a40      	ldr	r0, [r0, #36]	; 0x24
    8970:	f008 fb20 	bl	10fb4 <memset>
  writeMsg("Writing FAT ");
    8974:	6a28      	ldr	r0, [r5, #32]
    8976:	b128      	cbz	r0, 8984 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x28>
    8978:	6803      	ldr	r3, [r0, #0]
    897a:	220c      	movs	r2, #12
    897c:	493a      	ldr	r1, [pc, #232]	; (8a68 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x10c>)
    897e:	685b      	ldr	r3, [r3, #4]
    8980:	4798      	blx	r3
  struct initFatDirState state;
  state.buffer = m_secBuf;
  state.pr = m_pr;
    8982:	6a28      	ldr	r0, [r5, #32]
  state.buffer = m_secBuf;
    8984:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  state.count = 0;
    8986:	f04f 0900 	mov.w	r9, #0
  state.dotcount = sectorCount/32;
  if (!m_dev->writeSectorsCallback(m_fatStart + 1, sectorCount - 1, initFatDirCallback, &state)) {
    898a:	69ee      	ldr	r6, [r5, #28]
    898c:	f10a 32ff 	add.w	r2, sl, #4294967295
    8990:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 8a74 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x118>
    8994:	68e9      	ldr	r1, [r5, #12]
  state.count = 0;
    8996:	f8ad 9014 	strh.w	r9, [sp, #20]
  if (!m_dev->writeSectorsCallback(m_fatStart + 1, sectorCount - 1, initFatDirCallback, &state)) {
    899a:	1c4c      	adds	r4, r1, #1
  state.buffer = m_secBuf;
    899c:	e9cd 3003 	strd	r3, r0, [sp, #12]
  state.dotcount = sectorCount/32;
    89a0:	ea4f 135a 	mov.w	r3, sl, lsr #5
    89a4:	f8ad 3016 	strh.w	r3, [sp, #22]
  if (!m_dev->writeSectorsCallback(m_fatStart + 1, sectorCount - 1, initFatDirCallback, &state)) {
    89a8:	6833      	ldr	r3, [r6, #0]
    89aa:	6adf      	ldr	r7, [r3, #44]	; 0x2c
    89ac:	4567      	cmp	r7, ip
    89ae:	d126      	bne.n	89fe <FatFormatter::initFatDir(unsigned char, unsigned long)+0xa2>
     for (size_t i = 0; i < ns; i++) {
    89b0:	b36a      	cbz	r2, 8a0e <FatFormatter::initFatDir(unsigned char, unsigned long)+0xb2>
    89b2:	eb01 070a 	add.w	r7, r1, sl
    89b6:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8a78 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x11c>
    89ba:	e00a      	b.n	89d2 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x76>
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    89bc:	4621      	mov	r1, r4
    89be:	9a03      	ldr	r2, [sp, #12]
    89c0:	4630      	mov	r0, r6
     for (size_t i = 0; i < ns; i++) {
    89c2:	3401      	adds	r4, #1
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    89c4:	47d8      	blx	fp
    89c6:	2800      	cmp	r0, #0
    89c8:	d03f      	beq.n	8a4a <FatFormatter::initFatDir(unsigned char, unsigned long)+0xee>
     for (size_t i = 0; i < ns; i++) {
    89ca:	42a7      	cmp	r7, r4
    89cc:	d01e      	beq.n	8a0c <FatFormatter::initFatDir(unsigned char, unsigned long)+0xb0>
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    89ce:	6833      	ldr	r3, [r6, #0]
  if (state->pr && ++state->count >= state->dotcount) {
    89d0:	9804      	ldr	r0, [sp, #16]
    89d2:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
    89d6:	2800      	cmp	r0, #0
    89d8:	d0f0      	beq.n	89bc <FatFormatter::initFatDir(unsigned char, unsigned long)+0x60>
    89da:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    89de:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    89e2:	3301      	adds	r3, #1
    89e4:	b29b      	uxth	r3, r3
    89e6:	429a      	cmp	r2, r3
    89e8:	f8ad 3014 	strh.w	r3, [sp, #20]
    89ec:	d8e6      	bhi.n	89bc <FatFormatter::initFatDir(unsigned char, unsigned long)+0x60>
    89ee:	6803      	ldr	r3, [r0, #0]
    89f0:	4651      	mov	r1, sl
    89f2:	2201      	movs	r2, #1
    89f4:	685b      	ldr	r3, [r3, #4]
    89f6:	4798      	blx	r3
    state->count = 0;
    89f8:	f8ad 9014 	strh.w	r9, [sp, #20]
    89fc:	e7de      	b.n	89bc <FatFormatter::initFatDir(unsigned char, unsigned long)+0x60>
  if (!m_dev->writeSectorsCallback(m_fatStart + 1, sectorCount - 1, initFatDirCallback, &state)) {
    89fe:	ab03      	add	r3, sp, #12
    8a00:	4621      	mov	r1, r4
    8a02:	4630      	mov	r0, r6
    8a04:	9300      	str	r3, [sp, #0]
    8a06:	4b19      	ldr	r3, [pc, #100]	; (8a6c <FatFormatter::initFatDir(unsigned char, unsigned long)+0x110>)
    8a08:	47b8      	blx	r7
    8a0a:	b1f0      	cbz	r0, 8a4a <FatFormatter::initFatDir(unsigned char, unsigned long)+0xee>
     return false;
  }
  writeMsg("\r\n");
    8a0c:	6a28      	ldr	r0, [r5, #32]
    8a0e:	b120      	cbz	r0, 8a1a <FatFormatter::initFatDir(unsigned char, unsigned long)+0xbe>
    8a10:	6803      	ldr	r3, [r0, #0]
    8a12:	2202      	movs	r2, #2
    8a14:	4916      	ldr	r1, [pc, #88]	; (8a70 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x114>)
    8a16:	685b      	ldr	r3, [r3, #4]
    8a18:	4798      	blx	r3
  // Allocate reserved clusters and root for FAT32.
  m_secBuf[0] = 0XF8;
  n = fatType == 16 ? 4 : 12;
    8a1a:	f1b8 0f10 	cmp.w	r8, #16
  m_secBuf[0] = 0XF8;
    8a1e:	f04f 01f8 	mov.w	r1, #248	; 0xf8
    8a22:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  for (size_t i = 1; i < n; i++) {
    8a24:	f04f 0301 	mov.w	r3, #1
  n = fatType == 16 ? 4 : 12;
    8a28:	bf0c      	ite	eq
    8a2a:	2004      	moveq	r0, #4
    8a2c:	200c      	movne	r0, #12
  m_secBuf[0] = 0XF8;
    8a2e:	7011      	strb	r1, [r2, #0]
    m_secBuf[i] = 0XFF;
    8a30:	21ff      	movs	r1, #255	; 0xff
    8a32:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    8a34:	54d1      	strb	r1, [r2, r3]
  for (size_t i = 1; i < n; i++) {
    8a36:	3301      	adds	r3, #1
    8a38:	4298      	cmp	r0, r3
    8a3a:	d1fa      	bne.n	8a32 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xd6>
  }
  return m_dev->writeSector(m_fatStart, m_secBuf) &&
    8a3c:	69e8      	ldr	r0, [r5, #28]
    8a3e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    8a40:	6803      	ldr	r3, [r0, #0]
    8a42:	68e9      	ldr	r1, [r5, #12]
    8a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8a46:	4798      	blx	r3
    8a48:	b918      	cbnz	r0, 8a52 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xf6>
     return false;
    8a4a:	2000      	movs	r0, #0
         m_dev->writeSector(m_fatStart + m_fatSize, m_secBuf);
}
    8a4c:	b007      	add	sp, #28
    8a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         m_dev->writeSector(m_fatStart + m_fatSize, m_secBuf);
    8a52:	e9d5 3102 	ldrd	r3, r1, [r5, #8]
    8a56:	69e8      	ldr	r0, [r5, #28]
    8a58:	4419      	add	r1, r3
    8a5a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    8a5c:	6803      	ldr	r3, [r0, #0]
    8a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8a60:	4798      	blx	r3
}
    8a62:	b007      	add	sp, #28
    8a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8a68:	2000315c 	.word	0x2000315c
    8a6c:	0000892d 	.word	0x0000892d
    8a70:	20003180 	.word	0x20003180
    8a74:	000088f1 	.word	0x000088f1
    8a78:	2000b3d4 	.word	0x2000b3d4

00008a7c <FatFormatter::initPbs()>:
//------------------------------------------------------------------------------
void FatFormatter::initPbs() {
    8a7c:	b538      	push	{r3, r4, r5, lr}
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    8a7e:	6a43      	ldr	r3, [r0, #36]	; 0x24
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    8a80:	f44f 7500 	mov.w	r5, #512	; 0x200
void FatFormatter::initPbs() {
    8a84:	4604      	mov	r4, r0
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    8a86:	2100      	movs	r1, #0
    8a88:	462a      	mov	r2, r5
    8a8a:	4618      	mov	r0, r3
    8a8c:	f008 fa92 	bl	10fb4 <memset>
  pbs->jmpInstruction[0] = 0XEB;
  pbs->jmpInstruction[1] = 0X76;
  pbs->jmpInstruction[2] = 0X90;
  for (uint8_t i = 0; i < sizeof(pbs->oemName); i++) {
    pbs->oemName[i] = ' ';
    8a90:	f04f 3120 	mov.w	r1, #538976288	; 0x20202020
  pbs->jmpInstruction[0] = 0XEB;
    8a94:	22eb      	movs	r2, #235	; 0xeb
    8a96:	f8a0 500b 	strh.w	r5, [r0, #11]
    pbs->oemName[i] = ' ';
    8a9a:	f8c0 1003 	str.w	r1, [r0, #3]
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    8a9e:	4603      	mov	r3, r0
    pbs->oemName[i] = ' ';
    8aa0:	f8c0 1007 	str.w	r1, [r0, #7]
  pbs->jmpInstruction[2] = 0X90;
    8aa4:	2190      	movs	r1, #144	; 0x90
  pbs->jmpInstruction[0] = 0XEB;
    8aa6:	7002      	strb	r2, [r0, #0]
  pbs->jmpInstruction[1] = 0X76;
    8aa8:	2076      	movs	r0, #118	; 0x76
  pbs->jmpInstruction[2] = 0X90;
    8aaa:	7099      	strb	r1, [r3, #2]
  }
  setLe16(pbs->bpb.bpb16.bytesPerSector, BYTES_PER_SECTOR);
  pbs->bpb.bpb16.sectorsPerCluster = m_sectorsPerCluster;
  setLe16(pbs->bpb.bpb16.reservedSectorCount, m_reservedSectorCount);
  pbs->bpb.bpb16.fatCount = 2;
    8aac:	2202      	movs	r2, #2
  pbs->jmpInstruction[1] = 0X76;
    8aae:	7058      	strb	r0, [r3, #1]
  pbs->bpb.bpb16.sectorsPerCluster = m_sectorsPerCluster;
    8ab0:	f894 102b 	ldrb.w	r1, [r4, #43]	; 0x2b
    8ab4:	7359      	strb	r1, [r3, #13]
    8ab6:	f64a 2155 	movw	r1, #43605	; 0xaa55
  setLe16(pbs->bpb.bpb16.reservedSectorCount, m_reservedSectorCount);
    8aba:	8d20      	ldrh	r0, [r4, #40]	; 0x28
  pbs->bpb.bpb16.fatCount = 2;
    8abc:	741a      	strb	r2, [r3, #16]
  // skip rootDirEntryCount
  // skip totalSectors16
  pbs->bpb.bpb16.mediaType = 0XF8;
    8abe:	22f8      	movs	r2, #248	; 0xf8
    8ac0:	81d8      	strh	r0, [r3, #14]
    8ac2:	755a      	strb	r2, [r3, #21]
  // skip sectorsPerFat16
  // skip sectorsPerTrack
  // skip headCount
  setLe32(pbs->bpb.bpb16.hidddenSectors, m_relativeSectors);
    8ac4:	6922      	ldr	r2, [r4, #16]
  *reinterpret_cast<uint32_t*>(dst) = src;
    8ac6:	61da      	str	r2, [r3, #28]
  setLe32(pbs->bpb.bpb16.totalSectors32, m_totalSectors);
    8ac8:	69a2      	ldr	r2, [r4, #24]
  *reinterpret_cast<uint16_t*>(dst) = src;
    8aca:	f8a3 11fe 	strh.w	r1, [r3, #510]	; 0x1fe
  *reinterpret_cast<uint32_t*>(dst) = src;
    8ace:	621a      	str	r2, [r3, #32]
  // skip rest of bpb
  setLe16(pbs->signature, PBR_SIGNATURE);
}
    8ad0:	bd38      	pop	{r3, r4, r5, pc}
    8ad2:	bf00      	nop

00008ad4 <FatFormatter::writeMbr()>:
    return false;
  }
  return initFatDir(32, 2*m_fatSize + m_sectorsPerCluster);
}
//------------------------------------------------------------------------------
bool FatFormatter::writeMbr() {
    8ad4:	b570      	push	{r4, r5, r6, lr}
    8ad6:	4604      	mov	r4, r0
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    8ad8:	f44f 7200 	mov.w	r2, #512	; 0x200
    8adc:	2100      	movs	r1, #0
    8ade:	6a40      	ldr	r0, [r0, #36]	; 0x24
    8ae0:	f008 fa68 	bl	10fb4 <memset>
  MbrSector_t* mbr = reinterpret_cast<MbrSector_t*>(m_secBuf);
    8ae4:	6a65      	ldr	r5, [r4, #36]	; 0x24

#if USE_LBA_TO_CHS
  lbaToMbrChs(mbr->part->beginCHS, m_capacityMB, m_relativeSectors);
    8ae6:	6922      	ldr	r2, [r4, #16]
    8ae8:	6821      	ldr	r1, [r4, #0]
    8aea:	f205 10bf 	addw	r0, r5, #447	; 0x1bf
    8aee:	f003 fa1b 	bl	bf28 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>
  lbaToMbrChs(mbr->part->endCHS, m_capacityMB,
              m_relativeSectors + m_totalSectors -1);
    8af2:	69a3      	ldr	r3, [r4, #24]
    8af4:	6922      	ldr	r2, [r4, #16]
  lbaToMbrChs(mbr->part->endCHS, m_capacityMB,
    8af6:	f205 10c3 	addw	r0, r5, #451	; 0x1c3
    8afa:	6821      	ldr	r1, [r4, #0]
              m_relativeSectors + m_totalSectors -1);
    8afc:	441a      	add	r2, r3
  lbaToMbrChs(mbr->part->endCHS, m_capacityMB,
    8afe:	3a01      	subs	r2, #1
    8b00:	f003 fa12 	bl	bf28 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>
  mbr->part->endCHS[0] = 0XFE;
  mbr->part->endCHS[1] = 0XFF;
  mbr->part->endCHS[2] = 0XFF;
#endif  // USE_LBA_TO_CHS

  mbr->part->type = m_partType;
    8b04:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
  *reinterpret_cast<uint16_t*>(dst) = src;
    8b08:	f64a 2355 	movw	r3, #43605	; 0xaa55
    8b0c:	f885 21c2 	strb.w	r2, [r5, #450]	; 0x1c2
  setLe32(mbr->part->relativeSectors, m_relativeSectors);
    8b10:	6922      	ldr	r2, [r4, #16]
  setLe32(mbr->part->totalSectors, m_totalSectors);
  setLe16(mbr->signature, MBR_SIGNATURE);
  return m_dev->writeSector(0, m_secBuf);
    8b12:	69e0      	ldr	r0, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    8b14:	f8c5 21c6 	str.w	r2, [r5, #454]	; 0x1c6
    8b18:	6a62      	ldr	r2, [r4, #36]	; 0x24
  setLe32(mbr->part->totalSectors, m_totalSectors);
    8b1a:	69a1      	ldr	r1, [r4, #24]
  *reinterpret_cast<uint16_t*>(dst) = src;
    8b1c:	f8a5 31fe 	strh.w	r3, [r5, #510]	; 0x1fe
  return m_dev->writeSector(0, m_secBuf);
    8b20:	6803      	ldr	r3, [r0, #0]
  *reinterpret_cast<uint32_t*>(dst) = src;
    8b22:	f8c5 11ca 	str.w	r1, [r5, #458]	; 0x1ca
    8b26:	2100      	movs	r1, #0
    8b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    8b2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return m_dev->writeSector(0, m_secBuf);
    8b2e:	4718      	bx	r3

00008b30 <FatFormatter::makeFat16()>:
bool FatFormatter::makeFat16() {
    8b30:	b570      	push	{r4, r5, r6, lr}
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    8b32:	6946      	ldr	r6, [r0, #20]
  for (m_dataStart = 2*BU16; ; m_dataStart += BU16) {
    8b34:	f44f 7380 	mov.w	r3, #256	; 0x100
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    8b38:	f890 e02b 	ldrb.w	lr, [r0, #43]	; 0x2b
bool FatFormatter::makeFat16() {
    8b3c:	4604      	mov	r4, r0
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    8b3e:	f5a6 7280 	sub.w	r2, r6, #256	; 0x100
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    8b42:	6a45      	ldr	r5, [r0, #36]	; 0x24
  for (m_dataStart = 2*BU16; ; m_dataStart += BU16) {
    8b44:	6043      	str	r3, [r0, #4]
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    8b46:	fbb2 f2fe 	udiv	r2, r2, lr
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/2) - 1)/(BYTES_PER_SECTOR/2);
    8b4a:	f202 1c01 	addw	ip, r2, #257	; 0x101
    8b4e:	ea4f 211c 	mov.w	r1, ip, lsr #8
    r = BU16 + 1 + 2*m_fatSize + FAT16_ROOT_SECTOR_COUNT;
    8b52:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/2) - 1)/(BYTES_PER_SECTOR/2);
    8b56:	6081      	str	r1, [r0, #8]
    r = BU16 + 1 + 2*m_fatSize + FAT16_ROOT_SECTOR_COUNT;
    8b58:	f10c 00a1 	add.w	r0, ip, #161	; 0xa1
    if (m_dataStart >= r) {
    8b5c:	4298      	cmp	r0, r3
    8b5e:	d90e      	bls.n	8b7e <FatFormatter::makeFat16()+0x4e>
  for (m_dataStart = 2*BU16; ; m_dataStart += BU16) {
    8b60:	3380      	adds	r3, #128	; 0x80
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    8b62:	1af2      	subs	r2, r6, r3
    8b64:	fbb2 f2fe 	udiv	r2, r2, lr
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/2) - 1)/(BYTES_PER_SECTOR/2);
    8b68:	f202 1101 	addw	r1, r2, #257	; 0x101
    8b6c:	0a09      	lsrs	r1, r1, #8
    r = BU16 + 1 + 2*m_fatSize + FAT16_ROOT_SECTOR_COUNT;
    8b6e:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    8b72:	f10c 00a1 	add.w	r0, ip, #161	; 0xa1
    if (m_dataStart >= r) {
    8b76:	4283      	cmp	r3, r0
    8b78:	d3f2      	bcc.n	8b60 <FatFormatter::makeFat16()+0x30>
    8b7a:	e9c4 3101 	strd	r3, r1, [r4, #4]
      m_relativeSectors = m_dataStart - r + BU16;
    8b7e:	1a1b      	subs	r3, r3, r0
  if (nc < 4085 || nc >= 65525) {
    8b80:	f6a2 71f5 	subw	r1, r2, #4085	; 0xff5
      m_relativeSectors = m_dataStart - r + BU16;
    8b84:	f103 0080 	add.w	r0, r3, #128	; 0x80
  if (nc < 4085 || nc >= 65525) {
    8b88:	f5b1 4f70 	cmp.w	r1, #61440	; 0xf000
      m_relativeSectors = m_dataStart - r + BU16;
    8b8c:	6120      	str	r0, [r4, #16]
  if (nc < 4085 || nc >= 65525) {
    8b8e:	d24f      	bcs.n	8c30 <FatFormatter::makeFat16()+0x100>
                   + 2*m_fatSize + m_reservedSectorCount + 32;
    8b90:	f10c 0c21 	add.w	ip, ip, #33	; 0x21
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    8b94:	3381      	adds	r3, #129	; 0x81
  if (!writeMbr()) {
    8b96:	4620      	mov	r0, r4
                   + 2*m_fatSize + m_reservedSectorCount + 32;
    8b98:	fb02 c20e 	mla	r2, r2, lr, ip
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    8b9c:	60e3      	str	r3, [r4, #12]
    m_partType = 0X06;
    8b9e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
  m_totalSectors = nc*m_sectorsPerCluster
    8ba2:	61a2      	str	r2, [r4, #24]
    m_partType = 0X06;
    8ba4:	bf34      	ite	cc
    8ba6:	2304      	movcc	r3, #4
    8ba8:	2306      	movcs	r3, #6
    8baa:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  m_reservedSectorCount = 1;
    8bae:	2301      	movs	r3, #1
    8bb0:	8523      	strh	r3, [r4, #40]	; 0x28
  if (!writeMbr()) {
    8bb2:	f7ff ff8f 	bl	8ad4 <FatFormatter::writeMbr()>
    8bb6:	b908      	cbnz	r0, 8bbc <FatFormatter::makeFat16()+0x8c>
}
    8bb8:	2000      	movs	r0, #0
    8bba:	bd70      	pop	{r4, r5, r6, pc}
  initPbs();
    8bbc:	4620      	mov	r0, r4
    8bbe:	f7ff ff5d 	bl	8a7c <FatFormatter::initPbs()>
  pbs->bpb.bpb16.extSignature = EXTENDED_BOOT_SIGNATURE;
    8bc2:	2229      	movs	r2, #41	; 0x29
  setLe16(pbs->bpb.bpb16.sectorsPerFat16, m_fatSize);
    8bc4:	68a1      	ldr	r1, [r4, #8]
    pbs->bpb.bpb16.volumeLabel[i] = ' ';
    8bc6:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
  pbs->bpb.bpb16.extSignature = EXTENDED_BOOT_SIGNATURE;
    8bca:	f885 2026 	strb.w	r2, [r5, #38]	; 0x26
  pbs->bpb.bpb16.volumeType[0] = 'F';
    8bce:	2246      	movs	r2, #70	; 0x46
    pbs->bpb.bpb16.volumeLabel[i] = ' ';
    8bd0:	f8c5 302f 	str.w	r3, [r5, #47]	; 0x2f
  pbs->bpb.bpb16.physicalDriveNumber = 0X80;
    8bd4:	2080      	movs	r0, #128	; 0x80
  pbs->bpb.bpb16.volumeType[0] = 'F';
    8bd6:	f885 2036 	strb.w	r2, [r5, #54]	; 0x36
  pbs->bpb.bpb16.volumeType[2] = 'T';
    8bda:	2254      	movs	r2, #84	; 0x54
    pbs->bpb.bpb16.volumeLabel[i] = ' ';
    8bdc:	f8c5 302b 	str.w	r3, [r5, #43]	; 0x2b
    8be0:	f8c5 3032 	str.w	r3, [r5, #50]	; 0x32
  pbs->bpb.bpb16.volumeType[3] = '1';
    8be4:	2331      	movs	r3, #49	; 0x31
  pbs->bpb.bpb16.volumeType[2] = 'T';
    8be6:	f885 2038 	strb.w	r2, [r5, #56]	; 0x38
  pbs->bpb.bpb16.volumeType[4] = '6';
    8bea:	2236      	movs	r2, #54	; 0x36
  setLe16(pbs->bpb.bpb16.sectorsPerFat16, m_fatSize);
    8bec:	82e9      	strh	r1, [r5, #22]
  pbs->bpb.bpb16.volumeType[1] = 'A';
    8bee:	2141      	movs	r1, #65	; 0x41
  pbs->bpb.bpb16.volumeType[3] = '1';
    8bf0:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  pbs->bpb.bpb16.volumeType[1] = 'A';
    8bf4:	f885 1037 	strb.w	r1, [r5, #55]	; 0x37
  *reinterpret_cast<uint16_t*>(dst) = src;
    8bf8:	f44f 7100 	mov.w	r1, #512	; 0x200
  pbs->bpb.bpb16.physicalDriveNumber = 0X80;
    8bfc:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
  pbs->bpb.bpb16.volumeType[4] = '6';
    8c00:	f885 203a 	strb.w	r2, [r5, #58]	; 0x3a
  *reinterpret_cast<uint32_t*>(dst) = src;
    8c04:	4b0f      	ldr	r3, [pc, #60]	; (8c44 <FatFormatter::makeFat16()+0x114>)
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)) {
    8c06:	69e0      	ldr	r0, [r4, #28]
    8c08:	f8c5 3027 	str.w	r3, [r5, #39]	; 0x27
    8c0c:	6803      	ldr	r3, [r0, #0]
  *reinterpret_cast<uint16_t*>(dst) = src;
    8c0e:	f8a5 1011 	strh.w	r1, [r5, #17]
    8c12:	6a62      	ldr	r2, [r4, #36]	; 0x24
    8c14:	6921      	ldr	r1, [r4, #16]
    8c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8c18:	4798      	blx	r3
    8c1a:	2800      	cmp	r0, #0
    8c1c:	d0cc      	beq.n	8bb8 <FatFormatter::makeFat16()+0x88>
  return initFatDir(16, m_dataStart - m_fatStart);
    8c1e:	6862      	ldr	r2, [r4, #4]
    8c20:	4620      	mov	r0, r4
    8c22:	68e3      	ldr	r3, [r4, #12]
    8c24:	2110      	movs	r1, #16
    8c26:	1ad2      	subs	r2, r2, r3
}
    8c28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return initFatDir(16, m_dataStart - m_fatStart);
    8c2c:	f7ff be96 	b.w	895c <FatFormatter::initFatDir(unsigned char, unsigned long)>
    writeMsg("Bad cluster count\r\n");
    8c30:	6a20      	ldr	r0, [r4, #32]
    8c32:	2800      	cmp	r0, #0
    8c34:	d0c0      	beq.n	8bb8 <FatFormatter::makeFat16()+0x88>
    8c36:	6803      	ldr	r3, [r0, #0]
    8c38:	2213      	movs	r2, #19
    8c3a:	4903      	ldr	r1, [pc, #12]	; (8c48 <FatFormatter::makeFat16()+0x118>)
    8c3c:	685b      	ldr	r3, [r3, #4]
    8c3e:	4798      	blx	r3
}
    8c40:	2000      	movs	r0, #0
    8c42:	bd70      	pop	{r4, r5, r6, pc}
    8c44:	0012d687 	.word	0x0012d687
    8c48:	20003130 	.word	0x20003130

00008c4c <FatFormatter::makeFat32()>:
bool FatFormatter::makeFat32() {
    8c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    8c4e:	6946      	ldr	r6, [r0, #20]
  m_relativeSectors = BU32;
    8c50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    8c54:	f890 c02b 	ldrb.w	ip, [r0, #43]	; 0x2b
  for (m_dataStart = 2*BU32; ; m_dataStart += BU32) {
    8c58:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    8c5c:	f5a6 4180 	sub.w	r1, r6, #16384	; 0x4000
  m_relativeSectors = BU32;
    8c60:	6103      	str	r3, [r0, #16]
    r = m_relativeSectors + 9 + 2*m_fatSize;
    8c62:	f242 0e09 	movw	lr, #8201	; 0x2009
bool FatFormatter::makeFat32() {
    8c66:	4604      	mov	r4, r0
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    8c68:	6a45      	ldr	r5, [r0, #36]	; 0x24
  for (m_dataStart = 2*BU32; ; m_dataStart += BU32) {
    8c6a:	6042      	str	r2, [r0, #4]
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    8c6c:	fbb1 f1fc 	udiv	r1, r1, ip
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/4) - 1)/(BYTES_PER_SECTOR/4);
    8c70:	f101 0381 	add.w	r3, r1, #129	; 0x81
    8c74:	09db      	lsrs	r3, r3, #7
    8c76:	6083      	str	r3, [r0, #8]
    r = m_relativeSectors + 9 + 2*m_fatSize;
    8c78:	eb0e 0043 	add.w	r0, lr, r3, lsl #1
    if (m_dataStart >= r) {
    8c7c:	4290      	cmp	r0, r2
    8c7e:	f240 80b6 	bls.w	8dee <FatFormatter::makeFat32()+0x1a2>
  for (m_dataStart = 2*BU32; ; m_dataStart += BU32) {
    8c82:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    8c86:	1ab1      	subs	r1, r6, r2
    8c88:	fbb1 f1fc 	udiv	r1, r1, ip
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/4) - 1)/(BYTES_PER_SECTOR/4);
    8c8c:	f101 0381 	add.w	r3, r1, #129	; 0x81
    8c90:	09db      	lsrs	r3, r3, #7
    r = m_relativeSectors + 9 + 2*m_fatSize;
    8c92:	eb0e 0043 	add.w	r0, lr, r3, lsl #1
    8c96:	005f      	lsls	r7, r3, #1
    if (m_dataStart >= r) {
    8c98:	4282      	cmp	r2, r0
    8c9a:	d3f2      	bcc.n	8c82 <FatFormatter::makeFat32()+0x36>
    8c9c:	e9c4 2301 	strd	r2, r3, [r4, #4]
  if (nc < 65525) {
    8ca0:	f64f 73f4 	movw	r3, #65524	; 0xfff4
    8ca4:	4299      	cmp	r1, r3
    8ca6:	f240 8097 	bls.w	8dd8 <FatFormatter::makeFat32()+0x18c>
  m_totalSectors = nc*m_sectorsPerCluster + m_dataStart - m_relativeSectors;
    8caa:	fb01 2c0c 	mla	ip, r1, ip, r2
  m_reservedSectorCount = m_dataStart - m_relativeSectors - 2*m_fatSize;
    8cae:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  if (!writeMbr()) {
    8cb2:	4620      	mov	r0, r4
  m_reservedSectorCount = m_dataStart - m_relativeSectors - 2*m_fatSize;
    8cb4:	1bd2      	subs	r2, r2, r7
    8cb6:	b292      	uxth	r2, r2
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    8cb8:	f502 5300 	add.w	r3, r2, #8192	; 0x2000
  m_reservedSectorCount = m_dataStart - m_relativeSectors - 2*m_fatSize;
    8cbc:	8522      	strh	r2, [r4, #40]	; 0x28
  if ((m_relativeSectors + m_totalSectors) <= 16450560) {
    8cbe:	4a4d      	ldr	r2, [pc, #308]	; (8df4 <FatFormatter::makeFat32()+0x1a8>)
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    8cc0:	60e3      	str	r3, [r4, #12]
  m_totalSectors = nc*m_sectorsPerCluster + m_dataStart - m_relativeSectors;
    8cc2:	f5ac 5300 	sub.w	r3, ip, #8192	; 0x2000
    m_partType = 0X0C;
    8cc6:	4594      	cmp	ip, r2
    8cc8:	bf94      	ite	ls
    8cca:	f04f 0c0b 	movls.w	ip, #11
    8cce:	f04f 0c0c 	movhi.w	ip, #12
  m_totalSectors = nc*m_sectorsPerCluster + m_dataStart - m_relativeSectors;
    8cd2:	61a3      	str	r3, [r4, #24]
  if ((m_relativeSectors + m_totalSectors) <= 16450560) {
    8cd4:	f884 c02a 	strb.w	ip, [r4, #42]	; 0x2a
  if (!writeMbr()) {
    8cd8:	f7ff fefc 	bl	8ad4 <FatFormatter::writeMbr()>
    8cdc:	b908      	cbnz	r0, 8ce2 <FatFormatter::makeFat32()+0x96>
}
    8cde:	2000      	movs	r0, #0
    8ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  initPbs();
    8ce2:	4620      	mov	r0, r4
    8ce4:	f7ff feca 	bl	8a7c <FatFormatter::initPbs()>
  setLe32(pbs->bpb.bpb32.sectorsPerFat32, m_fatSize);
    8ce8:	68a1      	ldr	r1, [r4, #8]
  pbs->bpb.bpb32.extSignature = EXTENDED_BOOT_SIGNATURE;
    8cea:	2229      	movs	r2, #41	; 0x29
    pbs->bpb.bpb32.volumeLabel[i] = ' ';
    8cec:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
  pbs->bpb.bpb32.physicalDriveNumber = 0X80;
    8cf0:	2080      	movs	r0, #128	; 0x80
  *reinterpret_cast<uint32_t*>(dst) = src;
    8cf2:	6269      	str	r1, [r5, #36]	; 0x24
  pbs->bpb.bpb32.extSignature = EXTENDED_BOOT_SIGNATURE;
    8cf4:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
  pbs->bpb.bpb32.volumeType[2] = 'T';
    8cf8:	2154      	movs	r1, #84	; 0x54
  pbs->bpb.bpb32.volumeType[0] = 'F';
    8cfa:	2246      	movs	r2, #70	; 0x46
    pbs->bpb.bpb32.volumeLabel[i] = ' ';
    8cfc:	f8c5 304b 	str.w	r3, [r5, #75]	; 0x4b
  pbs->bpb.bpb32.physicalDriveNumber = 0X80;
    8d00:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
  pbs->bpb.bpb32.volumeType[1] = 'A';
    8d04:	2041      	movs	r0, #65	; 0x41
    pbs->bpb.bpb32.volumeLabel[i] = ' ';
    8d06:	f8c5 3047 	str.w	r3, [r5, #71]	; 0x47
    8d0a:	f8c5 304e 	str.w	r3, [r5, #78]	; 0x4e
    8d0e:	2302      	movs	r3, #2
  pbs->bpb.bpb32.volumeType[0] = 'F';
    8d10:	f885 2052 	strb.w	r2, [r5, #82]	; 0x52
  pbs->bpb.bpb32.volumeType[3] = '3';
    8d14:	2233      	movs	r2, #51	; 0x33
  pbs->bpb.bpb32.volumeType[2] = 'T';
    8d16:	f885 1054 	strb.w	r1, [r5, #84]	; 0x54
  pbs->bpb.bpb32.volumeType[4] = '2';
    8d1a:	2132      	movs	r1, #50	; 0x32
  pbs->bpb.bpb32.volumeType[3] = '3';
    8d1c:	f885 2055 	strb.w	r2, [r5, #85]	; 0x55
  pbs->bpb.bpb32.volumeType[1] = 'A';
    8d20:	f885 0053 	strb.w	r0, [r5, #83]	; 0x53
  pbs->bpb.bpb32.volumeType[4] = '2';
    8d24:	f885 1056 	strb.w	r1, [r5, #86]	; 0x56
    8d28:	62eb      	str	r3, [r5, #44]	; 0x2c
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)  ||
    8d2a:	69e0      	ldr	r0, [r4, #28]
  *reinterpret_cast<uint16_t*>(dst) = src;
    8d2c:	4b32      	ldr	r3, [pc, #200]	; (8df8 <FatFormatter::makeFat32()+0x1ac>)
  *reinterpret_cast<uint32_t*>(dst) = src;
    8d2e:	4a33      	ldr	r2, [pc, #204]	; (8dfc <FatFormatter::makeFat32()+0x1b0>)
  *reinterpret_cast<uint16_t*>(dst) = src;
    8d30:	632b      	str	r3, [r5, #48]	; 0x30
    8d32:	6803      	ldr	r3, [r0, #0]
  *reinterpret_cast<uint32_t*>(dst) = src;
    8d34:	f8c5 2043 	str.w	r2, [r5, #67]	; 0x43
    8d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8d3a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    8d3c:	6921      	ldr	r1, [r4, #16]
    8d3e:	4798      	blx	r3
    8d40:	2800      	cmp	r0, #0
    8d42:	d0cc      	beq.n	8cde <FatFormatter::makeFat32()+0x92>
      !m_dev->writeSector(m_relativeSectors + 6, m_secBuf)) {
    8d44:	69e0      	ldr	r0, [r4, #28]
    8d46:	6921      	ldr	r1, [r4, #16]
    8d48:	6803      	ldr	r3, [r0, #0]
    8d4a:	3106      	adds	r1, #6
    8d4c:	6a62      	ldr	r2, [r4, #36]	; 0x24
    8d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8d50:	4798      	blx	r3
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)  ||
    8d52:	2800      	cmp	r0, #0
    8d54:	d0c3      	beq.n	8cde <FatFormatter::makeFat32()+0x92>
  memset(m_secBuf, 0 , BYTES_PER_SECTOR);
    8d56:	f44f 7200 	mov.w	r2, #512	; 0x200
    8d5a:	2100      	movs	r1, #0
    8d5c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8d5e:	f008 f929 	bl	10fb4 <memset>
  if (!m_dev->writeSector(m_relativeSectors + 2, m_secBuf)  ||
    8d62:	69e0      	ldr	r0, [r4, #28]
    8d64:	4a26      	ldr	r2, [pc, #152]	; (8e00 <FatFormatter::makeFat32()+0x1b4>)
    8d66:	6803      	ldr	r3, [r0, #0]
    8d68:	f8c5 21fc 	str.w	r2, [r5, #508]	; 0x1fc
    8d6c:	6921      	ldr	r1, [r4, #16]
    8d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8d70:	3102      	adds	r1, #2
    8d72:	6a62      	ldr	r2, [r4, #36]	; 0x24
    8d74:	4798      	blx	r3
    8d76:	2800      	cmp	r0, #0
    8d78:	d0b1      	beq.n	8cde <FatFormatter::makeFat32()+0x92>
      !m_dev->writeSector(m_relativeSectors + 8, m_secBuf)) {
    8d7a:	69e0      	ldr	r0, [r4, #28]
    8d7c:	6921      	ldr	r1, [r4, #16]
    8d7e:	6803      	ldr	r3, [r0, #0]
    8d80:	3108      	adds	r1, #8
    8d82:	6a62      	ldr	r2, [r4, #36]	; 0x24
    8d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8d86:	4798      	blx	r3
  if (!m_dev->writeSector(m_relativeSectors + 2, m_secBuf)  ||
    8d88:	2800      	cmp	r0, #0
    8d8a:	d0a8      	beq.n	8cde <FatFormatter::makeFat32()+0x92>
    8d8c:	f04f 33ff 	mov.w	r3, #4294967295
  if (!m_dev->writeSector(m_relativeSectors + 1, m_secBuf)  ||
    8d90:	69e0      	ldr	r0, [r4, #28]
    8d92:	4a1c      	ldr	r2, [pc, #112]	; (8e04 <FatFormatter::makeFat32()+0x1b8>)
    8d94:	e9c5 337a 	strd	r3, r3, [r5, #488]	; 0x1e8
    8d98:	4b1b      	ldr	r3, [pc, #108]	; (8e08 <FatFormatter::makeFat32()+0x1bc>)
    8d9a:	602a      	str	r2, [r5, #0]
    8d9c:	f8c5 31e4 	str.w	r3, [r5, #484]	; 0x1e4
    8da0:	6803      	ldr	r3, [r0, #0]
    8da2:	6921      	ldr	r1, [r4, #16]
    8da4:	6a62      	ldr	r2, [r4, #36]	; 0x24
    8da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8da8:	3101      	adds	r1, #1
    8daa:	4798      	blx	r3
    8dac:	2800      	cmp	r0, #0
    8dae:	d096      	beq.n	8cde <FatFormatter::makeFat32()+0x92>
      !m_dev->writeSector(m_relativeSectors + 7, m_secBuf)) {
    8db0:	69e0      	ldr	r0, [r4, #28]
    8db2:	6921      	ldr	r1, [r4, #16]
    8db4:	6803      	ldr	r3, [r0, #0]
    8db6:	6a62      	ldr	r2, [r4, #36]	; 0x24
    8db8:	3107      	adds	r1, #7
    8dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8dbc:	4798      	blx	r3
  if (!m_dev->writeSector(m_relativeSectors + 1, m_secBuf)  ||
    8dbe:	2800      	cmp	r0, #0
    8dc0:	d08d      	beq.n	8cde <FatFormatter::makeFat32()+0x92>
  return initFatDir(32, 2*m_fatSize + m_sectorsPerCluster);
    8dc2:	68a2      	ldr	r2, [r4, #8]
    8dc4:	4620      	mov	r0, r4
    8dc6:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
    8dca:	2120      	movs	r1, #32
    8dcc:	eb03 0242 	add.w	r2, r3, r2, lsl #1
}
    8dd0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return initFatDir(32, 2*m_fatSize + m_sectorsPerCluster);
    8dd4:	f7ff bdc2 	b.w	895c <FatFormatter::initFatDir(unsigned char, unsigned long)>
    writeMsg("Bad cluster count\r\n");
    8dd8:	6a20      	ldr	r0, [r4, #32]
    8dda:	2800      	cmp	r0, #0
    8ddc:	f43f af7f 	beq.w	8cde <FatFormatter::makeFat32()+0x92>
    8de0:	6803      	ldr	r3, [r0, #0]
    8de2:	2213      	movs	r2, #19
    8de4:	4909      	ldr	r1, [pc, #36]	; (8e0c <FatFormatter::makeFat32()+0x1c0>)
    8de6:	685b      	ldr	r3, [r3, #4]
    8de8:	4798      	blx	r3
}
    8dea:	2000      	movs	r0, #0
    8dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8dee:	005f      	lsls	r7, r3, #1
    8df0:	e756      	b.n	8ca0 <FatFormatter::makeFat32()+0x54>
    8df2:	bf00      	nop
    8df4:	00fb0400 	.word	0x00fb0400
    8df8:	00060001 	.word	0x00060001
    8dfc:	0012d687 	.word	0x0012d687
    8e00:	aa550000 	.word	0xaa550000
    8e04:	41615252 	.word	0x41615252
    8e08:	61417272 	.word	0x61417272
    8e0c:	20003130 	.word	0x20003130

00008e10 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>:
bool FatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    8e10:	b538      	push	{r3, r4, r5, lr}
    8e12:	4604      	mov	r4, r0
  m_sectorCount = m_dev->sectorCount();
    8e14:	680d      	ldr	r5, [r1, #0]
  m_dev = dev;
    8e16:	61c1      	str	r1, [r0, #28]
  m_sectorCount = m_dev->sectorCount();
    8e18:	4608      	mov	r0, r1
  m_secBuf = secBuf;
    8e1a:	6262      	str	r2, [r4, #36]	; 0x24
  m_sectorCount = m_dev->sectorCount();
    8e1c:	69ea      	ldr	r2, [r5, #28]
  m_pr = pr;
    8e1e:	6223      	str	r3, [r4, #32]
  m_sectorCount = m_dev->sectorCount();
    8e20:	4790      	blx	r2
  m_capacityMB = (m_sectorCount + SECTORS_PER_MB - 1)/SECTORS_PER_MB;
    8e22:	f200 73ff 	addw	r3, r0, #2047	; 0x7ff
  m_sectorCount = m_dev->sectorCount();
    8e26:	6160      	str	r0, [r4, #20]
  m_capacityMB = (m_sectorCount + SECTORS_PER_MB - 1)/SECTORS_PER_MB;
    8e28:	0adb      	lsrs	r3, r3, #11
  if (m_capacityMB <= 6) {
    8e2a:	2b06      	cmp	r3, #6
  m_capacityMB = (m_sectorCount + SECTORS_PER_MB - 1)/SECTORS_PER_MB;
    8e2c:	6023      	str	r3, [r4, #0]
  if (m_capacityMB <= 6) {
    8e2e:	d924      	bls.n	8e7a <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6a>
  } else if (m_capacityMB <= 16) {
    8e30:	2b10      	cmp	r3, #16
    8e32:	d813      	bhi.n	8e5c <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4c>
    8e34:	2302      	movs	r3, #2
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
    8e36:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    m_sectorsPerCluster = 2;
    8e3a:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
    8e3e:	4620      	mov	r0, r4
    8e40:	d22e      	bcs.n	8ea0 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x90>
    8e42:	f7ff fe75 	bl	8b30 <FatFormatter::makeFat16()>
    8e46:	4605      	mov	r5, r0
    writeMsg("Format Done\r\n");
    8e48:	6a20      	ldr	r0, [r4, #32]
  if (rtn) {
    8e4a:	b305      	cbz	r5, 8e8e <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x7e>
    writeMsg("Format Done\r\n");
    8e4c:	b120      	cbz	r0, 8e58 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x48>
    8e4e:	6803      	ldr	r3, [r0, #0]
    8e50:	220d      	movs	r2, #13
    8e52:	4919      	ldr	r1, [pc, #100]	; (8eb8 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xa8>)
    8e54:	685b      	ldr	r3, [r3, #4]
    8e56:	4798      	blx	r3
}
    8e58:	4628      	mov	r0, r5
    8e5a:	bd38      	pop	{r3, r4, r5, pc}
  } else if (m_capacityMB <= 32) {
    8e5c:	2b20      	cmp	r3, #32
    8e5e:	d923      	bls.n	8ea8 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x98>
  } else if (m_capacityMB <= 64) {
    8e60:	2b40      	cmp	r3, #64	; 0x40
    8e62:	d923      	bls.n	8eac <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x9c>
  } else if (m_capacityMB <= 128) {
    8e64:	2b80      	cmp	r3, #128	; 0x80
    8e66:	d923      	bls.n	8eb0 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xa0>
  } else if (m_capacityMB <= 1024) {
    8e68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    8e6c:	d922      	bls.n	8eb4 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xa4>
  } else if (m_capacityMB <= 32768) {
    8e6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    8e72:	bf8c      	ite	hi
    8e74:	2380      	movhi	r3, #128	; 0x80
    8e76:	2340      	movls	r3, #64	; 0x40
    8e78:	e7dd      	b.n	8e36 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
    writeMsg("Card is too small.\r\n");
    8e7a:	6a20      	ldr	r0, [r4, #32]
    8e7c:	b120      	cbz	r0, 8e88 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x78>
    8e7e:	6803      	ldr	r3, [r0, #0]
    8e80:	2214      	movs	r2, #20
    8e82:	490e      	ldr	r1, [pc, #56]	; (8ebc <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xac>)
    8e84:	685b      	ldr	r3, [r3, #4]
    8e86:	4798      	blx	r3
    return false;
    8e88:	2500      	movs	r5, #0
}
    8e8a:	4628      	mov	r0, r5
    8e8c:	bd38      	pop	{r3, r4, r5, pc}
    writeMsg("Format Failed\r\n");
    8e8e:	2800      	cmp	r0, #0
    8e90:	d0fa      	beq.n	8e88 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x78>
    8e92:	6803      	ldr	r3, [r0, #0]
    8e94:	220f      	movs	r2, #15
    8e96:	490a      	ldr	r1, [pc, #40]	; (8ec0 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xb0>)
    8e98:	685b      	ldr	r3, [r3, #4]
    8e9a:	4798      	blx	r3
}
    8e9c:	4628      	mov	r0, r5
    8e9e:	bd38      	pop	{r3, r4, r5, pc}
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
    8ea0:	f7ff fed4 	bl	8c4c <FatFormatter::makeFat32()>
    8ea4:	4605      	mov	r5, r0
    8ea6:	e7cf      	b.n	8e48 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x38>
    8ea8:	2304      	movs	r3, #4
    8eaa:	e7c4      	b.n	8e36 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
    8eac:	2308      	movs	r3, #8
    8eae:	e7c2      	b.n	8e36 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
    8eb0:	2310      	movs	r3, #16
    8eb2:	e7c0      	b.n	8e36 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
    8eb4:	2320      	movs	r3, #32
    8eb6:	e7be      	b.n	8e36 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
    8eb8:	20003110 	.word	0x20003110
    8ebc:	200030f8 	.word	0x200030f8
    8ec0:	20003120 	.word	0x20003120

00008ec4 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>:
  if (i < 5) {
    8ec4:	2a04      	cmp	r2, #4
    8ec6:	d804      	bhi.n	8ed2 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0xe>
  return *reinterpret_cast<const uint16_t*>(src);
    8ec8:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    8ecc:	f8b2 0001 	ldrh.w	r0, [r2, #1]
    return getLe16(ldir->unicode1 + 2*i);
    8ed0:	4770      	bx	lr
  } else if (i < 11) {
    8ed2:	2a0a      	cmp	r2, #10
    8ed4:	d803      	bhi.n	8ede <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x1a>
    return getLe16(ldir->unicode2 + 2*i - 10);
    8ed6:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    8eda:	8890      	ldrh	r0, [r2, #4]
    8edc:	4770      	bx	lr
  } else if (i < 13) {
    8ede:	2a0c      	cmp	r2, #12
    8ee0:	d803      	bhi.n	8eea <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x26>
    return getLe16(ldir->unicode3 + 2*i - 22);
    8ee2:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    8ee6:	88c8      	ldrh	r0, [r1, #6]
    8ee8:	4770      	bx	lr
  return 0;
    8eea:	2000      	movs	r0, #0
}
    8eec:	4770      	bx	lr
    8eee:	bf00      	nop

00008ef0 <FatFile::getSFN(char*, unsigned int)>:
size_t FatFile::getSFN(char* name, size_t size) {
    8ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool isOpen() const {return m_attributes;}
    8ef2:	7804      	ldrb	r4, [r0, #0]
    8ef4:	460e      	mov	r6, r1
  if (!isOpen()) {
    8ef6:	b17c      	cbz	r4, 8f18 <FatFile::getSFN(char*, unsigned int)+0x28>
  if (isRoot()) {
    8ef8:	f014 0460 	ands.w	r4, r4, #96	; 0x60
    8efc:	4617      	mov	r7, r2
    8efe:	d007      	beq.n	8f10 <FatFile::getSFN(char*, unsigned int)+0x20>
    if (size < 2) {
    8f00:	2a01      	cmp	r2, #1
    8f02:	d909      	bls.n	8f18 <FatFile::getSFN(char*, unsigned int)+0x28>
    name[0] = '/';
    8f04:	222f      	movs	r2, #47	; 0x2f
    name[1] = '\0';
    8f06:	2300      	movs	r3, #0
    return 1;
    8f08:	2001      	movs	r0, #1
    name[0] = '/';
    8f0a:	700a      	strb	r2, [r1, #0]
    name[1] = '\0';
    8f0c:	704b      	strb	r3, [r1, #1]
}
    8f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    8f10:	4621      	mov	r1, r4
    8f12:	f7fe f947 	bl	71a4 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    8f16:	b918      	cbnz	r0, 8f20 <FatFile::getSFN(char*, unsigned int)+0x30>
  name[0] = '\0';
    8f18:	2300      	movs	r3, #0
  return 0;
    8f1a:	4618      	mov	r0, r3
  name[0] = '\0';
    8f1c:	7033      	strb	r3, [r6, #0]
}
    8f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ptr = dir->name;
    8f20:	4603      	mov	r3, r0
    8f22:	46a4      	mov	ip, r4
  uint8_t lcBit = FAT_CASE_LC_BASE;
    8f24:	2108      	movs	r1, #8
    8f26:	e011      	b.n	8f4c <FatFile::getSFN(char*, unsigned int)+0x5c>
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    8f28:	7b02      	ldrb	r2, [r0, #12]
    8f2a:	4211      	tst	r1, r2
    8f2c:	d003      	beq.n	8f36 <FatFile::getSFN(char*, unsigned int)+0x46>
        c += 'a' - 'A';
    8f2e:	f10e 0e20 	add.w	lr, lr, #32
    8f32:	fa5f fe8e 	uxtb.w	lr, lr
    if ((j + 1u) >= size) {
    8f36:	1c65      	adds	r5, r4, #1
    8f38:	42bd      	cmp	r5, r7
    8f3a:	d2ed      	bcs.n	8f18 <FatFile::getSFN(char*, unsigned int)+0x28>
  for (uint8_t i = 0; i < 12; i++) {
    8f3c:	f10c 0c01 	add.w	ip, ip, #1
    name[j++] = c;
    8f40:	f806 e004 	strb.w	lr, [r6, r4]
    8f44:	b2ec      	uxtb	r4, r5
  for (uint8_t i = 0; i < 12; i++) {
    8f46:	f1bc 0f0c 	cmp.w	ip, #12
    8f4a:	d010      	beq.n	8f6e <FatFile::getSFN(char*, unsigned int)+0x7e>
    if (i == 8) {
    8f4c:	f1bc 0f08 	cmp.w	ip, #8
    8f50:	d011      	beq.n	8f76 <FatFile::getSFN(char*, unsigned int)+0x86>
      c = *ptr++;
    8f52:	f813 eb01 	ldrb.w	lr, [r3], #1
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    8f56:	f1ae 0241 	sub.w	r2, lr, #65	; 0x41
    8f5a:	2a19      	cmp	r2, #25
    8f5c:	d9e4      	bls.n	8f28 <FatFile::getSFN(char*, unsigned int)+0x38>
      if (c == ' ') {
    8f5e:	f1be 0f20 	cmp.w	lr, #32
    8f62:	d1e8      	bne.n	8f36 <FatFile::getSFN(char*, unsigned int)+0x46>
  for (uint8_t i = 0; i < 12; i++) {
    8f64:	f10c 0c01 	add.w	ip, ip, #1
    8f68:	f1bc 0f0c 	cmp.w	ip, #12
    8f6c:	d1ee      	bne.n	8f4c <FatFile::getSFN(char*, unsigned int)+0x5c>
  name[j] = '\0';
    8f6e:	2300      	movs	r3, #0
    8f70:	4620      	mov	r0, r4
    8f72:	5533      	strb	r3, [r6, r4]
}
    8f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (*ptr == ' ') {
    8f76:	781a      	ldrb	r2, [r3, #0]
    8f78:	2a20      	cmp	r2, #32
    8f7a:	d0f8      	beq.n	8f6e <FatFile::getSFN(char*, unsigned int)+0x7e>
      lcBit = FAT_CASE_LC_EXT;
    8f7c:	2110      	movs	r1, #16
      c = '.';
    8f7e:	f04f 0e2e 	mov.w	lr, #46	; 0x2e
    8f82:	e7d8      	b.n	8f36 <FatFile::getSFN(char*, unsigned int)+0x46>

00008f84 <FatFile::getName8(char*, unsigned int)>:
size_t FatFile::getName8(char* name, size_t size) {
    8f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile() {}
    8f88:	2400      	movs	r4, #0
    8f8a:	b08b      	sub	sp, #44	; 0x2c
  if (!isOpen()) {
    8f8c:	7803      	ldrb	r3, [r0, #0]
size_t FatFile::getName8(char* name, size_t size) {
    8f8e:	4689      	mov	r9, r1
    8f90:	9401      	str	r4, [sp, #4]
  if (!isOpen()) {
    8f92:	2b00      	cmp	r3, #0
    8f94:	d055      	beq.n	9042 <FatFile::getName8(char*, unsigned int)+0xbe>
  if (!isLFN()) {
    8f96:	78c3      	ldrb	r3, [r0, #3]
    8f98:	4606      	mov	r6, r0
    8f9a:	2b00      	cmp	r3, #0
    8f9c:	d058      	beq.n	9050 <FatFile::getName8(char*, unsigned int)+0xcc>
  if (!dir.openCluster(this)) {
    8f9e:	4601      	mov	r1, r0
    8fa0:	a801      	add	r0, sp, #4
    8fa2:	4690      	mov	r8, r2
    8fa4:	f7fe fb1e 	bl	75e4 <FatFile::openCluster(FatFile*)>
    8fa8:	2800      	cmp	r0, #0
    8faa:	d04a      	beq.n	9042 <FatFile::getName8(char*, unsigned int)+0xbe>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    8fac:	78f0      	ldrb	r0, [r6, #3]
    8fae:	2800      	cmp	r0, #0
    8fb0:	d043      	beq.n	903a <FatFile::getName8(char*, unsigned int)+0xb6>
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    8fb2:	f108 38ff 	add.w	r8, r8, #4294967295
  char* str = name;
    8fb6:	46cb      	mov	fp, r9
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    8fb8:	f04f 0a01 	mov.w	sl, #1
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    8fbc:	44c8      	add	r8, r9
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(m_dirIndex - order));
    8fbe:	88b1      	ldrh	r1, [r6, #4]
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    8fc0:	a801      	add	r0, sp, #4
    8fc2:	eba1 010a 	sub.w	r1, r1, sl
    8fc6:	b289      	uxth	r1, r1
    8fc8:	0149      	lsls	r1, r1, #5
    8fca:	f7fe fd9f 	bl	7b0c <FatFile::seekSet(unsigned long)>
    8fce:	b3c0      	cbz	r0, 9042 <FatFile::getName8(char*, unsigned int)+0xbe>
    8fd0:	2100      	movs	r1, #0
    8fd2:	a801      	add	r0, sp, #4
    8fd4:	f7fe fc3a 	bl	784c <FatFile::readDirCache(bool)>
    if (!ldir) {
    8fd8:	b398      	cbz	r0, 9042 <FatFile::getName8(char*, unsigned int)+0xbe>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    8fda:	7ac3      	ldrb	r3, [r0, #11]
    8fdc:	2b0f      	cmp	r3, #15
    8fde:	d130      	bne.n	9042 <FatFile::getName8(char*, unsigned int)+0xbe>
    8fe0:	7803      	ldrb	r3, [r0, #0]
    8fe2:	fa5f f18a 	uxtb.w	r1, sl
    8fe6:	f003 031f 	and.w	r3, r3, #31
    8fea:	428b      	cmp	r3, r1
    8fec:	d129      	bne.n	9042 <FatFile::getName8(char*, unsigned int)+0xbe>
    8fee:	1c47      	adds	r7, r0, #1
    8ff0:	2500      	movs	r5, #0
  if (i < 5) {
    8ff2:	2d04      	cmp	r5, #4
    8ff4:	b2eb      	uxtb	r3, r5
    8ff6:	d83f      	bhi.n	9078 <FatFile::getName8(char*, unsigned int)+0xf4>
    8ff8:	883b      	ldrh	r3, [r7, #0]
      if (hs) {
    8ffa:	bb74      	cbnz	r4, 905a <FatFile::getName8(char*, unsigned int)+0xd6>
    8ffc:	f503 5120 	add.w	r1, r3, #10240	; 0x2800
    9000:	b289      	uxth	r1, r1
      } else if (!FsUtf::isSurrogate(c)) {
    9002:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
    9006:	d33e      	bcc.n	9086 <FatFile::getName8(char*, unsigned int)+0x102>
        if (c == 0) {
    9008:	b1a3      	cbz	r3, 9034 <FatFile::getName8(char*, unsigned int)+0xb0>
        cp = c;
    900a:	4618      	mov	r0, r3
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    900c:	4659      	mov	r1, fp
    900e:	4642      	mov	r2, r8
    9010:	f002 ffda 	bl	bfc8 <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    9014:	4683      	mov	fp, r0
    9016:	b1a0      	cbz	r0, 9042 <FatFile::getName8(char*, unsigned int)+0xbe>
    9018:	2400      	movs	r4, #0
    for (uint8_t i = 0; i < 13; i++) {
    901a:	3501      	adds	r5, #1
    901c:	3702      	adds	r7, #2
    901e:	2d0d      	cmp	r5, #13
    9020:	d1e7      	bne.n	8ff2 <FatFile::getName8(char*, unsigned int)+0x6e>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    9022:	f10a 0a01 	add.w	sl, sl, #1
    9026:	78f1      	ldrb	r1, [r6, #3]
    9028:	fa5f f38a 	uxtb.w	r3, sl
    902c:	fa1f fa8a 	uxth.w	sl, sl
    9030:	4299      	cmp	r1, r3
    9032:	d2c4      	bcs.n	8fbe <FatFile::getName8(char*, unsigned int)+0x3a>
  return str - name;
    9034:	ebab 0009 	sub.w	r0, fp, r9
    9038:	46d9      	mov	r9, fp
  *str = '\0';
    903a:	2300      	movs	r3, #0
    903c:	f889 3000 	strb.w	r3, [r9]
  return str - name;
    9040:	e003      	b.n	904a <FatFile::getName8(char*, unsigned int)+0xc6>
  *name = 0;
    9042:	2300      	movs	r3, #0
  return 0;
    9044:	4618      	mov	r0, r3
  *name = 0;
    9046:	f889 3000 	strb.w	r3, [r9]
}
    904a:	b00b      	add	sp, #44	; 0x2c
    904c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return getSFN(name, size);
    9050:	f7ff ff4e 	bl	8ef0 <FatFile::getSFN(char*, unsigned int)>
}
    9054:	b00b      	add	sp, #44	; 0x2c
    9056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return 0XDC00 <= c && c <= 0XDFFF;
    905a:	f503 5110 	add.w	r1, r3, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
    905e:	b289      	uxth	r1, r1
    9060:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    9064:	d2ed      	bcs.n	9042 <FatFile::getName8(char*, unsigned int)+0xbe>
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    9066:	4a0a      	ldr	r2, [pc, #40]	; (9090 <FatFile::getName8(char*, unsigned int)+0x10c>)
    9068:	f3c3 0309 	ubfx	r3, r3, #0, #10
    906c:	ea02 2084 	and.w	r0, r2, r4, lsl #10
    9070:	4318      	orrs	r0, r3
    9072:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
        hs = 0;
    9076:	e7c9      	b.n	900c <FatFile::getName8(char*, unsigned int)+0x88>
  } else if (i < 11) {
    9078:	2b0a      	cmp	r3, #10
    907a:	bf94      	ite	ls
    907c:	f8b7 3003 	ldrhls.w	r3, [r7, #3]
    9080:	f8b7 3005 	ldrhhi.w	r3, [r7, #5]
    return getLe16(ldir->unicode3 + 2*i - 22);
    9084:	e7b9      	b.n	8ffa <FatFile::getName8(char*, unsigned int)+0x76>
      } else if (FsUtf::isHighSurrogate(c)) {
    9086:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    908a:	d2da      	bcs.n	9042 <FatFile::getName8(char*, unsigned int)+0xbe>
    908c:	461c      	mov	r4, r3
    908e:	e7c4      	b.n	901a <FatFile::getName8(char*, unsigned int)+0x96>
    9090:	000ffc00 	.word	0x000ffc00

00009094 <FatFile::getName(char*, unsigned int)>:
  return getName8(name, size);
    9094:	f7ff bf76 	b.w	8f84 <FatFile::getName8(char*, unsigned int)>

00009098 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
  virtual bool readSectorsCallback(uint32_t sector, uint8_t* dst, size_t ns,
    9098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    909c:	e9dd 8708 	ldrd	r8, r7, [sp, #32]
     for (size_t i = 0; i < ns; i++) {
    90a0:	b1c3      	cbz	r3, 90d4 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3c>
    90a2:	4681      	mov	r9, r0
    90a4:	460c      	mov	r4, r1
    90a6:	4615      	mov	r5, r2
    90a8:	185e      	adds	r6, r3, r1
    90aa:	e002      	b.n	90b2 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x1a>
       callback(sector + i, dst, context);
    90ac:	47c0      	blx	r8
     for (size_t i = 0; i < ns; i++) {
    90ae:	42b4      	cmp	r4, r6
    90b0:	d010      	beq.n	90d4 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3c>
       if (!readSector(sector + i, dst)) return false;
    90b2:	f8d9 3000 	ldr.w	r3, [r9]
    90b6:	4621      	mov	r1, r4
    90b8:	462a      	mov	r2, r5
    90ba:	4648      	mov	r0, r9
    90bc:	691b      	ldr	r3, [r3, #16]
    90be:	4798      	blx	r3
    90c0:	4603      	mov	r3, r0
       callback(sector + i, dst, context);
    90c2:	463a      	mov	r2, r7
    90c4:	4620      	mov	r0, r4
    90c6:	4629      	mov	r1, r5
     for (size_t i = 0; i < ns; i++) {
    90c8:	3401      	adds	r4, #1
       if (!readSector(sector + i, dst)) return false;
    90ca:	2b00      	cmp	r3, #0
    90cc:	d1ee      	bne.n	90ac <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x14>
  }
    90ce:	4618      	mov	r0, r3
    90d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     return true;
    90d4:	2301      	movs	r3, #1
  }
    90d6:	4618      	mov	r0, r3
    90d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000090dc <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)>:
void FatPartition::freeClusterCount_cb_fat16(uint32_t sector, uint8_t *buf, void *context) {
    90dc:	b410      	push	{r4}
  unsigned int n = state->clusters_to_do;
    90de:	6814      	ldr	r4, [r2, #0]
  if (n > 256) n = 256;
    90e0:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    90e4:	46a4      	mov	ip, r4
    90e6:	bf28      	it	cs
    90e8:	f44f 7c80 	movcs.w	ip, #256	; 0x100
  uint16_t *e = p + n;
    90ec:	eb01 004c 	add.w	r0, r1, ip, lsl #1
  while (p < e) {
    90f0:	4281      	cmp	r1, r0
    90f2:	d207      	bcs.n	9104 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x28>
    if (*p++ == 0) state->free_count++;
    90f4:	f831 3b02 	ldrh.w	r3, [r1], #2
    90f8:	b913      	cbnz	r3, 9100 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x24>
    90fa:	6853      	ldr	r3, [r2, #4]
    90fc:	3301      	adds	r3, #1
    90fe:	6053      	str	r3, [r2, #4]
  while (p < e) {
    9100:	4288      	cmp	r0, r1
    9102:	d8f7      	bhi.n	90f4 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x18>
  state->clusters_to_do -= n;
    9104:	eba4 040c 	sub.w	r4, r4, ip
    9108:	6014      	str	r4, [r2, #0]
}
    910a:	f85d 4b04 	ldr.w	r4, [sp], #4
    910e:	4770      	bx	lr

00009110 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)>:
void FatPartition::freeClusterCount_cb_fat32(uint32_t sector, uint8_t *buf, void *context) {
    9110:	b410      	push	{r4}
  unsigned int n = state->clusters_to_do;
    9112:	6814      	ldr	r4, [r2, #0]
  if (n > 128) n = 128;
    9114:	2c80      	cmp	r4, #128	; 0x80
    9116:	46a4      	mov	ip, r4
    9118:	bf28      	it	cs
    911a:	f04f 0c80 	movcs.w	ip, #128	; 0x80
  uint32_t *e = p + n;
    911e:	eb01 008c 	add.w	r0, r1, ip, lsl #2
  while (p < e) {
    9122:	4281      	cmp	r1, r0
    9124:	d207      	bcs.n	9136 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x26>
    if (*p++ == 0) state->free_count++;
    9126:	f851 3b04 	ldr.w	r3, [r1], #4
    912a:	b913      	cbnz	r3, 9132 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x22>
    912c:	6853      	ldr	r3, [r2, #4]
    912e:	3301      	adds	r3, #1
    9130:	6053      	str	r3, [r2, #4]
  while (p < e) {
    9132:	4288      	cmp	r0, r1
    9134:	d8f7      	bhi.n	9126 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x16>
  state->clusters_to_do -= n;
    9136:	eba4 040c 	sub.w	r4, r4, ip
    913a:	6014      	str	r4, [r2, #0]
}
    913c:	f85d 4b04 	ldr.w	r4, [sp], #4
    9140:	4770      	bx	lr
    9142:	bf00      	nop

00009144 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>:
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    9144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return m_fatType;
    9148:	79c3      	ldrb	r3, [r0, #7]
    914a:	4604      	mov	r4, r0
    914c:	460d      	mov	r5, r1
    914e:	4617      	mov	r7, r2
  if (fatType() == 32) {
    9150:	2b20      	cmp	r3, #32
    9152:	d059      	beq.n	9208 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xc4>
  } else if (fatType() == 16) {
    9154:	2b10      	cmp	r3, #16
    9156:	d030      	beq.n	91ba <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x76>
  } else if (FAT12_SUPPORT && fatType() == 12) {
    9158:	2b0c      	cmp	r3, #12
    915a:	d151      	bne.n	9200 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    915c:	7a02      	ldrb	r2, [r0, #8]
    index += index >> 1;
    915e:	f3c1 014e 	ubfx	r1, r1, #1, #15
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    9162:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    9164:	f500 790e 	add.w	r9, r0, #568	; 0x238
    index += index >> 1;
    9168:	fa11 f185 	uxtah	r1, r1, r5
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    916c:	f1a2 0202 	sub.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
    9170:	4648      	mov	r0, r9
    9172:	b28e      	uxth	r6, r1
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9174:	fab2 f282 	clz	r2, r2
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    9178:	f3c1 2146 	ubfx	r1, r1, #9, #7
    917c:	0952      	lsrs	r2, r2, #5
    917e:	eb01 0803 	add.w	r8, r1, r3
    return m_fatCache.prepare(sector, options);
    9182:	0052      	lsls	r2, r2, #1
    9184:	4641      	mov	r1, r8
    9186:	f002 fe6b 	bl	be60 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    918a:	2800      	cmp	r0, #0
    918c:	d038      	beq.n	9200 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    index &= m_sectorMask;
    918e:	f3c6 0608 	ubfx	r6, r6, #0, #9
    index++;
    9192:	1c73      	adds	r3, r6, #1
    uint16_t tmp = pc[index];
    9194:	5d86      	ldrb	r6, [r0, r6]
    if (index == m_bytesPerSector) {
    9196:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    919a:	d023      	beq.n	91e4 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xa0>
    tmp |= pc[index] << 8;
    919c:	4418      	add	r0, r3
    919e:	7803      	ldrb	r3, [r0, #0]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    91a0:	07ea      	lsls	r2, r5, #31
  if (isEOC(next)) {
    91a2:	69e2      	ldr	r2, [r4, #28]
    tmp |= pc[index] << 8;
    91a4:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    91a8:	bf4c      	ite	mi
    91aa:	091b      	lsrmi	r3, r3, #4
    91ac:	f3c3 030b 	ubfxpl	r3, r3, #0, #12
  if (isEOC(next)) {
    91b0:	429a      	cmp	r2, r3
    91b2:	d240      	bcs.n	9236 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xf2>
    return 0;
    91b4:	2000      	movs	r0, #0
}
    91b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    91ba:	7a02      	ldrb	r2, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    91bc:	f3c1 2107 	ubfx	r1, r1, #8, #8
    91c0:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    91c2:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    91c6:	f1a2 0202 	sub.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
    91ca:	4419      	add	r1, r3
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    91cc:	fab2 f282 	clz	r2, r2
    91d0:	0952      	lsrs	r2, r2, #5
    return m_fatCache.prepare(sector, options);
    91d2:	0052      	lsls	r2, r2, #1
    91d4:	f002 fe44 	bl	be60 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    91d8:	b190      	cbz	r0, 9200 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    91da:	006d      	lsls	r5, r5, #1
    next = getLe16(pc + offset);
    91dc:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
    91e0:	5b43      	ldrh	r3, [r0, r5]
    91e2:	e025      	b.n	9230 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xec>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    91e4:	7a22      	ldrb	r2, [r4, #8]
    return m_fatCache.prepare(sector, options);
    91e6:	f108 0101 	add.w	r1, r8, #1
    91ea:	4648      	mov	r0, r9
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    91ec:	f1a2 0202 	sub.w	r2, r2, #2
    91f0:	fab2 f282 	clz	r2, r2
    91f4:	0952      	lsrs	r2, r2, #5
    return m_fatCache.prepare(sector, options);
    91f6:	0052      	lsls	r2, r2, #1
    91f8:	f002 fe32 	bl	be60 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    91fc:	2800      	cmp	r0, #0
    91fe:	d1ce      	bne.n	919e <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x5a>
  return -1;
    9200:	f04f 30ff 	mov.w	r0, #4294967295
}
    9204:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9208:	7a02      	ldrb	r2, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    920a:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.prepare(sector, options);
    920c:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9210:	f1a2 0202 	sub.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
    9214:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9218:	fab2 f282 	clz	r2, r2
    921c:	0952      	lsrs	r2, r2, #5
    return m_fatCache.prepare(sector, options);
    921e:	0052      	lsls	r2, r2, #1
    9220:	f002 fe1e 	bl	be60 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    9224:	2800      	cmp	r0, #0
    9226:	d0eb      	beq.n	9200 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    9228:	00ad      	lsls	r5, r5, #2
    next = getLe32(pc + offset);
    922a:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
  return *reinterpret_cast<const uint32_t*>(src);
    922e:	5943      	ldr	r3, [r0, r5]
  if (isEOC(next)) {
    9230:	69e2      	ldr	r2, [r4, #28]
    9232:	429a      	cmp	r2, r3
    9234:	d3be      	bcc.n	91b4 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x70>
  return 1;
    9236:	2001      	movs	r0, #1
  *value = next;
    9238:	603b      	str	r3, [r7, #0]
}
    923a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    923e:	bf00      	nop

00009240 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>:
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    9240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return m_fatType;
    9244:	79c3      	ldrb	r3, [r0, #7]
    9246:	4605      	mov	r5, r0
    9248:	460c      	mov	r4, r1
    924a:	4616      	mov	r6, r2
  if (fatType() == 32) {
    924c:	2b20      	cmp	r3, #32
    924e:	d048      	beq.n	92e2 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xa2>
  if (fatType() == 16) {
    9250:	2b10      	cmp	r3, #16
    9252:	d02d      	beq.n	92b0 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x70>
  if (FAT12_SUPPORT && fatType() == 12) {
    9254:	2b0c      	cmp	r3, #12
    9256:	d141      	bne.n	92dc <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    index += index >> 1;
    9258:	f3c1 014e 	ubfx	r1, r1, #1, #15
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    925c:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    925e:	f500 790e 	add.w	r9, r0, #568	; 0x238
    index += index >> 1;
    9262:	fa11 f184 	uxtah	r1, r1, r4
    9266:	fa1f f881 	uxth.w	r8, r1
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    926a:	f3c1 2146 	ubfx	r1, r1, #9, #7
    926e:	18cf      	adds	r7, r1, r3
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9270:	7a03      	ldrb	r3, [r0, #8]
    return m_fatCache.prepare(sector, options);
    9272:	4648      	mov	r0, r9
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9274:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    9276:	4639      	mov	r1, r7
    9278:	bf14      	ite	ne
    927a:	2201      	movne	r2, #1
    927c:	2203      	moveq	r2, #3
    927e:	f002 fdef 	bl	be60 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    9282:	b358      	cbz	r0, 92dc <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    if (cluster & 1) {
    9284:	f014 0401 	ands.w	r4, r4, #1
    index &= m_sectorMask;
    9288:	f3c8 0308 	ubfx	r3, r8, #0, #9
    if (cluster & 1) {
    928c:	d03f      	beq.n	930e <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xce>
      tmp = (pc[index] & 0XF) | tmp << 4;
    928e:	5cc2      	ldrb	r2, [r0, r3]
    9290:	f002 020f 	and.w	r2, r2, #15
    9294:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    pc[index] = tmp;
    9298:	54c2      	strb	r2, [r0, r3]
    index++;
    929a:	3301      	adds	r3, #1
    if (index == m_bytesPerSector) {
    929c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    92a0:	d03a      	beq.n	9318 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xd8>
    tmp = value >> 4;
    92a2:	f3c6 1207 	ubfx	r2, r6, #4, #8
    pc[index] = tmp;
    92a6:	4403      	add	r3, r0
    return true;
    92a8:	2001      	movs	r0, #1
    pc[index] = tmp;
    92aa:	701a      	strb	r2, [r3, #0]
}
    92ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    92b0:	7a02      	ldrb	r2, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    92b2:	f3c1 2107 	ubfx	r1, r1, #8, #8
    92b6:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    92b8:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    92bc:	2a02      	cmp	r2, #2
    return m_fatCache.prepare(sector, options);
    92be:	4419      	add	r1, r3
    92c0:	bf14      	ite	ne
    92c2:	2201      	movne	r2, #1
    92c4:	2203      	moveq	r2, #3
    92c6:	f002 fdcb 	bl	be60 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    92ca:	4603      	mov	r3, r0
    92cc:	b130      	cbz	r0, 92dc <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    92ce:	0064      	lsls	r4, r4, #1
    return true;
    92d0:	2001      	movs	r0, #1
    setLe16(pc + offset, value);
    92d2:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
    92d6:	531e      	strh	r6, [r3, r4]
}
    92d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return false;
    92dc:	2000      	movs	r0, #0
}
    92de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    92e2:	7a03      	ldrb	r3, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    92e4:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.prepare(sector, options);
    92e6:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    92ea:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    92ec:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    92f0:	bf14      	ite	ne
    92f2:	2201      	movne	r2, #1
    92f4:	2203      	moveq	r2, #3
    92f6:	f002 fdb3 	bl	be60 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    92fa:	4603      	mov	r3, r0
    92fc:	2800      	cmp	r0, #0
    92fe:	d0ed      	beq.n	92dc <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    9300:	00a4      	lsls	r4, r4, #2
    return true;
    9302:	2001      	movs	r0, #1
    setLe32(pc + offset, value);
    9304:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    9308:	511e      	str	r6, [r3, r4]
}
    930a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    uint8_t tmp = value;
    930e:	54c6      	strb	r6, [r0, r3]
    index++;
    9310:	3301      	adds	r3, #1
    if (index == m_bytesPerSector) {
    9312:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    9316:	d115      	bne.n	9344 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x104>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9318:	7a2b      	ldrb	r3, [r5, #8]
    return m_fatCache.prepare(sector, options);
    931a:	1c79      	adds	r1, r7, #1
    931c:	4648      	mov	r0, r9
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    931e:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    9320:	bf14      	ite	ne
    9322:	2201      	movne	r2, #1
    9324:	2203      	moveq	r2, #3
    9326:	f002 fd9b 	bl	be60 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    932a:	4603      	mov	r3, r0
    932c:	2800      	cmp	r0, #0
    932e:	d0d5      	beq.n	92dc <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    tmp = value >> 4;
    9330:	f3c6 1207 	ubfx	r2, r6, #4, #8
    if (!(cluster & 1)) {
    9334:	2c00      	cmp	r4, #0
    9336:	d1b7      	bne.n	92a8 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x68>
      tmp = ((pc[index] & 0XF0)) | tmp >> 4;
    9338:	7819      	ldrb	r1, [r3, #0]
    933a:	f021 010f 	bic.w	r1, r1, #15
    933e:	ea41 1212 	orr.w	r2, r1, r2, lsr #4
    9342:	e7b1      	b.n	92a8 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x68>
    tmp = value >> 4;
    9344:	f3c6 1207 	ubfx	r2, r6, #4, #8
    pc[index] = tmp;
    9348:	4403      	add	r3, r0
    934a:	e7f5      	b.n	9338 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xf8>

0000934c <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    934c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
    9350:	68c4      	ldr	r4, [r0, #12]
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    9352:	b082      	sub	sp, #8
    9354:	4605      	mov	r5, r0
    9356:	460e      	mov	r6, r1
  if (m_allocSearchStart < current) {
    9358:	428c      	cmp	r4, r1
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    935a:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
    935c:	d340      	bcc.n	93e0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x94>
    setStart = true;
    935e:	2701      	movs	r7, #1
    find++;
    9360:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
    9362:	69eb      	ldr	r3, [r5, #28]
    9364:	aa01      	add	r2, sp, #4
    9366:	4628      	mov	r0, r5
    9368:	42a3      	cmp	r3, r4
    936a:	d205      	bcs.n	9378 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x2c>
      if (setStart) {
    936c:	bb9f      	cbnz	r7, 93d6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
      find = m_allocSearchStart;
    936e:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
    9370:	2701      	movs	r7, #1
    find++;
    9372:	443c      	add	r4, r7
    if (find > m_lastCluster) {
    9374:	42a3      	cmp	r3, r4
    9376:	d32e      	bcc.n	93d6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
  if (cluster < 2 || cluster > m_lastCluster) {
    9378:	42a6      	cmp	r6, r4
    937a:	bf18      	it	ne
    937c:	2c01      	cmpne	r4, #1
    937e:	4621      	mov	r1, r4
    9380:	d929      	bls.n	93d6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    9382:	f7ff fedf 	bl	9144 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
    if (fg < 0) {
    9386:	2800      	cmp	r0, #0
    9388:	db25      	blt.n	93d6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    if (fg && f == 0) {
    938a:	d0e9      	beq.n	9360 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
    938c:	9b01      	ldr	r3, [sp, #4]
    938e:	2b00      	cmp	r3, #0
    9390:	d1e6      	bne.n	9360 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
  if (setStart) {
    9392:	b107      	cbz	r7, 9396 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x4a>
    m_allocSearchStart = find;
    9394:	60ec      	str	r4, [r5, #12]
  if (cluster < 2 || cluster > m_lastCluster) {
    9396:	69eb      	ldr	r3, [r5, #28]
    9398:	42a3      	cmp	r3, r4
    939a:	d31c      	bcc.n	93d6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    939c:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    93a0:	4621      	mov	r1, r4
    93a2:	4628      	mov	r0, r5
    93a4:	f7ff ff4c 	bl	9240 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
  if (!fatPutEOC(find)) {
    93a8:	4607      	mov	r7, r0
    93aa:	b1a0      	cbz	r0, 93d6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
  if (current) {
    93ac:	b93e      	cbnz	r6, 93be <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x72>
    if (m_freeClusterCount >= 0) {
    93ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    93b0:	2b00      	cmp	r3, #0
    93b2:	db01      	blt.n	93b8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x6c>
      m_freeClusterCount += change;
    93b4:	3b01      	subs	r3, #1
    93b6:	626b      	str	r3, [r5, #36]	; 0x24
  *next = find;
    93b8:	f8c8 4000 	str.w	r4, [r8]
  return true;
    93bc:	e00c      	b.n	93d8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8c>
  if (cluster < 2 || cluster > m_lastCluster) {
    93be:	2e01      	cmp	r6, #1
    93c0:	d009      	beq.n	93d6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    93c2:	69eb      	ldr	r3, [r5, #28]
    93c4:	429e      	cmp	r6, r3
    93c6:	d806      	bhi.n	93d6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    93c8:	4631      	mov	r1, r6
    93ca:	4622      	mov	r2, r4
    93cc:	4628      	mov	r0, r5
    93ce:	f7ff ff37 	bl	9240 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
    if (!fatPut(current, find)) {
    93d2:	2800      	cmp	r0, #0
    93d4:	d1eb      	bne.n	93ae <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x62>
  return false;
    93d6:	2700      	movs	r7, #0
}
    93d8:	4638      	mov	r0, r7
    93da:	b002      	add	sp, #8
    93dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    93e0:	460c      	mov	r4, r1
    setStart = false;
    93e2:	2700      	movs	r7, #0
    93e4:	e7bc      	b.n	9360 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
    93e6:	bf00      	nop

000093e8 <FatPartition::fatGet(unsigned long, unsigned long*)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    93e8:	2901      	cmp	r1, #1
    93ea:	d90c      	bls.n	9406 <FatPartition::fatGet(unsigned long, unsigned long*)+0x1e>
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    93ec:	b410      	push	{r4}
  if (cluster < 2 || cluster > m_lastCluster) {
    93ee:	69c4      	ldr	r4, [r0, #28]
    93f0:	428c      	cmp	r4, r1
    93f2:	d303      	bcc.n	93fc <FatPartition::fatGet(unsigned long, unsigned long*)+0x14>
}
    93f4:	f85d 4b04 	ldr.w	r4, [sp], #4
    93f8:	f7ff bea4 	b.w	9144 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
    93fc:	f04f 30ff 	mov.w	r0, #4294967295
    9400:	f85d 4b04 	ldr.w	r4, [sp], #4
    9404:	4770      	bx	lr
    9406:	f04f 30ff 	mov.w	r0, #4294967295
    940a:	4770      	bx	lr

0000940c <FatPartition::fatPut(unsigned long, unsigned long)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    940c:	2901      	cmp	r1, #1
    940e:	d90b      	bls.n	9428 <FatPartition::fatPut(unsigned long, unsigned long)+0x1c>
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    9410:	b410      	push	{r4}
  if (cluster < 2 || cluster > m_lastCluster) {
    9412:	69c4      	ldr	r4, [r0, #28]
    9414:	428c      	cmp	r4, r1
    9416:	d303      	bcc.n	9420 <FatPartition::fatPut(unsigned long, unsigned long)+0x14>
}
    9418:	f85d 4b04 	ldr.w	r4, [sp], #4
    941c:	f7ff bf10 	b.w	9240 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
    9420:	2000      	movs	r0, #0
    9422:	f85d 4b04 	ldr.w	r4, [sp], #4
    9426:	4770      	bx	lr
    9428:	2000      	movs	r0, #0
    942a:	4770      	bx	lr

0000942c <FatPartition::freeChain(unsigned long)>:
bool FatPartition::freeChain(uint32_t cluster) {
    942c:	b570      	push	{r4, r5, r6, lr}
    942e:	4605      	mov	r5, r0
    9430:	b082      	sub	sp, #8
    9432:	460c      	mov	r4, r1
    9434:	e01d      	b.n	9472 <FatPartition::freeChain(unsigned long)+0x46>
  if (cluster < 2 || cluster > m_lastCluster) {
    9436:	69eb      	ldr	r3, [r5, #28]
    9438:	429c      	cmp	r4, r3
    943a:	d81f      	bhi.n	947c <FatPartition::freeChain(unsigned long)+0x50>
    943c:	f7ff fe82 	bl	9144 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
  if (cluster < 2 || cluster > m_lastCluster) {
    9440:	4606      	mov	r6, r0
    if (fg < 0) {
    9442:	4621      	mov	r1, r4
    9444:	2200      	movs	r2, #0
    9446:	2e00      	cmp	r6, #0
    9448:	4628      	mov	r0, r5
    944a:	db17      	blt.n	947c <FatPartition::freeChain(unsigned long)+0x50>
  if (cluster < 2 || cluster > m_lastCluster) {
    944c:	69eb      	ldr	r3, [r5, #28]
    944e:	429c      	cmp	r4, r3
    9450:	d814      	bhi.n	947c <FatPartition::freeChain(unsigned long)+0x50>
    9452:	f7ff fef5 	bl	9240 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
      m_allocSearchStart = cluster - 1;
    9456:	1e62      	subs	r2, r4, #1
    if (!fatPut(cluster, 0)) {
    9458:	b180      	cbz	r0, 947c <FatPartition::freeChain(unsigned long)+0x50>
    if (m_freeClusterCount >= 0) {
    945a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    945c:	2b00      	cmp	r3, #0
      m_freeClusterCount += change;
    945e:	f103 0301 	add.w	r3, r3, #1
    9462:	bfa8      	it	ge
    9464:	626b      	strge	r3, [r5, #36]	; 0x24
    if (cluster < m_allocSearchStart) {
    9466:	68eb      	ldr	r3, [r5, #12]
    9468:	42a3      	cmp	r3, r4
    cluster = next;
    946a:	9c01      	ldr	r4, [sp, #4]
      m_allocSearchStart = cluster - 1;
    946c:	bf88      	it	hi
    946e:	60ea      	strhi	r2, [r5, #12]
  } while (fg);
    9470:	b12e      	cbz	r6, 947e <FatPartition::freeChain(unsigned long)+0x52>
  if (cluster < 2 || cluster > m_lastCluster) {
    9472:	2c01      	cmp	r4, #1
    9474:	4621      	mov	r1, r4
    9476:	aa01      	add	r2, sp, #4
    9478:	4628      	mov	r0, r5
    947a:	d8dc      	bhi.n	9436 <FatPartition::freeChain(unsigned long)+0xa>
  return false;
    947c:	2000      	movs	r0, #0
}
    947e:	b002      	add	sp, #8
    9480:	bd70      	pop	{r4, r5, r6, pc}
    9482:	bf00      	nop

00009484 <FatPartition::freeClusterCount()>:
int32_t FatPartition::freeClusterCount() {
    9484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9488:	4606      	mov	r6, r0
  if (m_freeClusterCount >= 0) {
    948a:	6a40      	ldr	r0, [r0, #36]	; 0x24
int32_t FatPartition::freeClusterCount() {
    948c:	b084      	sub	sp, #16
  if (m_freeClusterCount >= 0) {
    948e:	2800      	cmp	r0, #0
    9490:	da1b      	bge.n	94ca <FatPartition::freeClusterCount()+0x46>
    return m_fatType;
    9492:	79f2      	ldrb	r2, [r6, #7]
 if (FAT12_SUPPORT && fatType() == 12) {
    9494:	2a0c      	cmp	r2, #12
    9496:	d11b      	bne.n	94d0 <FatPartition::freeClusterCount()+0x4c>
    uint32_t todo = m_lastCluster + 1;
    9498:	69f7      	ldr	r7, [r6, #28]
    949a:	1c7b      	adds	r3, r7, #1
    for (unsigned i = 2; i < todo; i++) {
    949c:	2b02      	cmp	r3, #2
    949e:	f240 80cd 	bls.w	963c <FatPartition::freeClusterCount()+0x1b8>
    94a2:	2402      	movs	r4, #2
    uint32_t free = 0;
    94a4:	2500      	movs	r5, #0
    94a6:	4621      	mov	r1, r4
    94a8:	aa02      	add	r2, sp, #8
    94aa:	4630      	mov	r0, r6
    94ac:	f7ff fe4a 	bl	9144 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
      if (fg < 0) {
    94b0:	2800      	cmp	r0, #0
    for (unsigned i = 2; i < todo; i++) {
    94b2:	f104 0301 	add.w	r3, r4, #1
      if (fg < 0) {
    94b6:	db06      	blt.n	94c6 <FatPartition::freeClusterCount()+0x42>
      if (fg && c == 0) {
    94b8:	d157      	bne.n	956a <FatPartition::freeClusterCount()+0xe6>
    for (unsigned i = 2; i < todo; i++) {
    94ba:	42a7      	cmp	r7, r4
    94bc:	461c      	mov	r4, r3
    94be:	d05c      	beq.n	957a <FatPartition::freeClusterCount()+0xf6>
  if (cluster < 2 || cluster > m_lastCluster) {
    94c0:	69f2      	ldr	r2, [r6, #28]
    94c2:	4293      	cmp	r3, r2
    94c4:	d9ef      	bls.n	94a6 <FatPartition::freeClusterCount()+0x22>
  if (buf == nullptr) return -1;
    94c6:	f04f 30ff 	mov.w	r0, #4294967295
}
    94ca:	b004      	add	sp, #16
    94cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  state.clusters_to_do = m_lastCluster + 1;
    94d0:	69f1      	ldr	r1, [r6, #28]
  state.free_count = 0;
    94d2:	2000      	movs	r0, #0
    return m_status & CACHE_STATUS_DIRTY;
    94d4:	f896 3238 	ldrb.w	r3, [r6, #568]	; 0x238
  state.clusters_to_do = m_lastCluster + 1;
    94d8:	3101      	adds	r1, #1
  num_sectors = m_sectorsPerFat;
    94da:	6934      	ldr	r4, [r6, #16]
    if (isDirty() && !sync()) {
    94dc:	07db      	lsls	r3, r3, #31
  state.clusters_to_do = m_lastCluster + 1;
    94de:	e9cd 1002 	strd	r1, r0, [sp, #8]
    94e2:	f100 8085 	bmi.w	95f0 <FatPartition::freeClusterCount()+0x16c>
    m_status = 0;
    94e6:	2100      	movs	r1, #0
    m_sector = 0XFFFFFFFF;
    94e8:	f04f 33ff 	mov.w	r3, #4294967295
  if (fatType() == FAT_TYPE_FAT32) {
    94ec:	2a20      	cmp	r2, #32
    return m_buffer;
    94ee:	f506 7712 	add.w	r7, r6, #584	; 0x248
    m_status = 0;
    94f2:	f886 1238 	strb.w	r1, [r6, #568]	; 0x238
    m_sector = 0XFFFFFFFF;
    94f6:	f8c6 3244 	str.w	r3, [r6, #580]	; 0x244
    94fa:	d042      	beq.n	9582 <FatPartition::freeClusterCount()+0xfe>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    94fc:	f8d6 8000 	ldr.w	r8, [r6]
    9500:	4b4f      	ldr	r3, [pc, #316]	; (9640 <FatPartition::freeClusterCount()+0x1bc>)
    9502:	f8d8 2000 	ldr.w	r2, [r8]
    9506:	f8d6 a018 	ldr.w	sl, [r6, #24]
    950a:	6995      	ldr	r5, [r2, #24]
    950c:	429d      	cmp	r5, r3
    950e:	d178      	bne.n	9602 <FatPartition::freeClusterCount()+0x17e>
     for (size_t i = 0; i < ns; i++) {
    9510:	2c00      	cmp	r4, #0
    9512:	f000 8082 	beq.w	961a <FatPartition::freeClusterCount()+0x196>
    9516:	eb0a 0904 	add.w	r9, sl, r4
       if (!readSector(sector + i, dst)) return false;
    951a:	6913      	ldr	r3, [r2, #16]
    951c:	4651      	mov	r1, sl
    951e:	463a      	mov	r2, r7
    9520:	4640      	mov	r0, r8
    9522:	4798      	blx	r3
    9524:	2800      	cmp	r0, #0
    9526:	d0ce      	beq.n	94c6 <FatPartition::freeClusterCount()+0x42>
  unsigned int n = state->clusters_to_do;
    9528:	9902      	ldr	r1, [sp, #8]
  if (n > 256) n = 256;
    952a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    952e:	468e      	mov	lr, r1
    9530:	bf28      	it	cs
    9532:	f44f 7e80 	movcs.w	lr, #256	; 0x100
  uint16_t *e = p + n;
    9536:	eb07 0c4e 	add.w	ip, r7, lr, lsl #1
  while (p < e) {
    953a:	45bc      	cmp	ip, r7
    953c:	d90b      	bls.n	9556 <FatPartition::freeClusterCount()+0xd2>
    953e:	9d03      	ldr	r5, [sp, #12]
    9540:	463b      	mov	r3, r7
    9542:	2200      	movs	r2, #0
    if (*p++ == 0) state->free_count++;
    9544:	f833 4b02 	ldrh.w	r4, [r3], #2
    9548:	b90c      	cbnz	r4, 954e <FatPartition::freeClusterCount()+0xca>
    954a:	3501      	adds	r5, #1
    954c:	4602      	mov	r2, r0
  while (p < e) {
    954e:	459c      	cmp	ip, r3
    9550:	d8f8      	bhi.n	9544 <FatPartition::freeClusterCount()+0xc0>
    9552:	b102      	cbz	r2, 9556 <FatPartition::freeClusterCount()+0xd2>
    9554:	9503      	str	r5, [sp, #12]
     for (size_t i = 0; i < ns; i++) {
    9556:	f10a 0a01 	add.w	sl, sl, #1
  state->clusters_to_do -= n;
    955a:	eba1 010e 	sub.w	r1, r1, lr
    955e:	45d1      	cmp	r9, sl
    9560:	9102      	str	r1, [sp, #8]
    9562:	d05a      	beq.n	961a <FatPartition::freeClusterCount()+0x196>
       if (!readSector(sector + i, dst)) return false;
    9564:	f8d8 2000 	ldr.w	r2, [r8]
    9568:	e7d7      	b.n	951a <FatPartition::freeClusterCount()+0x96>
      if (fg && c == 0) {
    956a:	9a02      	ldr	r2, [sp, #8]
    956c:	2a00      	cmp	r2, #0
    956e:	d1a4      	bne.n	94ba <FatPartition::freeClusterCount()+0x36>
    for (unsigned i = 2; i < todo; i++) {
    9570:	42a7      	cmp	r7, r4
        free++;
    9572:	f105 0501 	add.w	r5, r5, #1
    for (unsigned i = 2; i < todo; i++) {
    9576:	461c      	mov	r4, r3
    9578:	d1a2      	bne.n	94c0 <FatPartition::freeClusterCount()+0x3c>
    return free;
    957a:	4628      	mov	r0, r5
}
    957c:	b004      	add	sp, #16
    957e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    9582:	f8d6 a000 	ldr.w	sl, [r6]
    9586:	4b2e      	ldr	r3, [pc, #184]	; (9640 <FatPartition::freeClusterCount()+0x1bc>)
    9588:	f8da 2000 	ldr.w	r2, [sl]
    958c:	f8d6 9018 	ldr.w	r9, [r6, #24]
    9590:	6995      	ldr	r5, [r2, #24]
    9592:	429d      	cmp	r5, r3
    9594:	d146      	bne.n	9624 <FatPartition::freeClusterCount()+0x1a0>
     for (size_t i = 0; i < ns; i++) {
    9596:	2c00      	cmp	r4, #0
    9598:	d03f      	beq.n	961a <FatPartition::freeClusterCount()+0x196>
    959a:	eb09 0804 	add.w	r8, r9, r4
       if (!readSector(sector + i, dst)) return false;
    959e:	6913      	ldr	r3, [r2, #16]
    95a0:	4649      	mov	r1, r9
    95a2:	463a      	mov	r2, r7
    95a4:	4650      	mov	r0, sl
    95a6:	4798      	blx	r3
    95a8:	2800      	cmp	r0, #0
    95aa:	d08c      	beq.n	94c6 <FatPartition::freeClusterCount()+0x42>
  unsigned int n = state->clusters_to_do;
    95ac:	f8dd c008 	ldr.w	ip, [sp, #8]
  if (n > 128) n = 128;
    95b0:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
    95b4:	46e6      	mov	lr, ip
    95b6:	bf28      	it	cs
    95b8:	f04f 0e80 	movcs.w	lr, #128	; 0x80
  uint32_t *e = p + n;
    95bc:	eb07 028e 	add.w	r2, r7, lr, lsl #2
  while (p < e) {
    95c0:	42ba      	cmp	r2, r7
    95c2:	d90b      	bls.n	95dc <FatPartition::freeClusterCount()+0x158>
    95c4:	9d03      	ldr	r5, [sp, #12]
    95c6:	463b      	mov	r3, r7
    95c8:	2100      	movs	r1, #0
    if (*p++ == 0) state->free_count++;
    95ca:	f853 4b04 	ldr.w	r4, [r3], #4
    95ce:	b90c      	cbnz	r4, 95d4 <FatPartition::freeClusterCount()+0x150>
    95d0:	3501      	adds	r5, #1
    95d2:	4601      	mov	r1, r0
  while (p < e) {
    95d4:	429a      	cmp	r2, r3
    95d6:	d8f8      	bhi.n	95ca <FatPartition::freeClusterCount()+0x146>
    95d8:	b101      	cbz	r1, 95dc <FatPartition::freeClusterCount()+0x158>
    95da:	9503      	str	r5, [sp, #12]
     for (size_t i = 0; i < ns; i++) {
    95dc:	f109 0901 	add.w	r9, r9, #1
  state->clusters_to_do -= n;
    95e0:	ebac 030e 	sub.w	r3, ip, lr
    95e4:	45c8      	cmp	r8, r9
    95e6:	9302      	str	r3, [sp, #8]
    95e8:	d017      	beq.n	961a <FatPartition::freeClusterCount()+0x196>
       if (!readSector(sector + i, dst)) return false;
    95ea:	f8da 2000 	ldr.w	r2, [sl]
    95ee:	e7d6      	b.n	959e <FatPartition::freeClusterCount()+0x11a>
    if (isDirty() && !sync()) {
    95f0:	f506 700e 	add.w	r0, r6, #568	; 0x238
    95f4:	f002 fc08 	bl	be08 <FsCache::sync()>
    95f8:	2800      	cmp	r0, #0
    95fa:	f43f af64 	beq.w	94c6 <FatPartition::freeClusterCount()+0x42>
    95fe:	79f2      	ldrb	r2, [r6, #7]
    9600:	e771      	b.n	94e6 <FatPartition::freeClusterCount()+0x62>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    9602:	4623      	mov	r3, r4
    9604:	ac02      	add	r4, sp, #8
    9606:	463a      	mov	r2, r7
    9608:	4651      	mov	r1, sl
    960a:	9401      	str	r4, [sp, #4]
    960c:	4640      	mov	r0, r8
    960e:	4c0d      	ldr	r4, [pc, #52]	; (9644 <FatPartition::freeClusterCount()+0x1c0>)
    9610:	9400      	str	r4, [sp, #0]
    9612:	47a8      	blx	r5
    9614:	2800      	cmp	r0, #0
    9616:	f43f af56 	beq.w	94c6 <FatPartition::freeClusterCount()+0x42>
  setFreeClusterCount(state.free_count);
    961a:	9803      	ldr	r0, [sp, #12]
    m_freeClusterCount = value;
    961c:	6270      	str	r0, [r6, #36]	; 0x24
}
    961e:	b004      	add	sp, #16
    9620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    9624:	4623      	mov	r3, r4
    9626:	ac02      	add	r4, sp, #8
    9628:	463a      	mov	r2, r7
    962a:	4649      	mov	r1, r9
    962c:	9401      	str	r4, [sp, #4]
    962e:	4650      	mov	r0, sl
    9630:	4c05      	ldr	r4, [pc, #20]	; (9648 <FatPartition::freeClusterCount()+0x1c4>)
    9632:	9400      	str	r4, [sp, #0]
    9634:	47a8      	blx	r5
    9636:	2800      	cmp	r0, #0
    9638:	d1ef      	bne.n	961a <FatPartition::freeClusterCount()+0x196>
    963a:	e744      	b.n	94c6 <FatPartition::freeClusterCount()+0x42>
    for (unsigned i = 2; i < todo; i++) {
    963c:	2000      	movs	r0, #0
    963e:	e744      	b.n	94ca <FatPartition::freeClusterCount()+0x46>
    9640:	00009099 	.word	0x00009099
    9644:	000090dd 	.word	0x000090dd
    9648:	00009111 	.word	0x00009111

0000964c <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>:
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    964c:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
    964e:	2300      	movs	r3, #0
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    9650:	4604      	mov	r4, r0
  if (part) {
    9652:	4615      	mov	r5, r2
  m_allocSearchStart = 1;
    9654:	2001      	movs	r0, #1
    m_sector = 0XFFFFFFFF;
    9656:	f04f 32ff 	mov.w	r2, #4294967295
  m_cache.init(dev);
    965a:	f104 0628 	add.w	r6, r4, #40	; 0x28
  m_blockDev = dev;
    965e:	6021      	str	r1, [r4, #0]
  m_fatType = 0;
    9660:	71e3      	strb	r3, [r4, #7]
  m_allocSearchStart = 1;
    9662:	60e0      	str	r0, [r4, #12]
    m_blockDev = blockDev;
    9664:	62e1      	str	r1, [r4, #44]	; 0x2c
    9666:	f8c4 123c 	str.w	r1, [r4, #572]	; 0x23c
    m_status = 0;
    966a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    966e:	f884 3238 	strb.w	r3, [r4, #568]	; 0x238
    m_sector = 0XFFFFFFFF;
    9672:	6362      	str	r2, [r4, #52]	; 0x34
    9674:	f8c4 2244 	str.w	r2, [r4, #580]	; 0x244
  if (part) {
    9678:	b1cd      	cbz	r5, 96ae <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x62>
    if (part > 4) {
    967a:	2d04      	cmp	r5, #4
    967c:	d901      	bls.n	9682 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x36>
  return false;
    967e:	2000      	movs	r0, #0
}
    9680:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.prepare(sector, options);
    9682:	461a      	mov	r2, r3
    9684:	4619      	mov	r1, r3
    9686:	4630      	mov	r0, r6
    9688:	f002 fbea 	bl	be60 <FsCache::prepare(unsigned long, unsigned char)>
    MbrPart_t* mp = mbr->part + part - 1;
    968c:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
    9690:	f500 72df 	add.w	r2, r0, #446	; 0x1be
    9694:	442b      	add	r3, r5
    9696:	011d      	lsls	r5, r3, #4
    9698:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    969c:	2800      	cmp	r0, #0
    969e:	d0ee      	beq.n	967e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    96a0:	7919      	ldrb	r1, [r3, #4]
    96a2:	2900      	cmp	r1, #0
    96a4:	d0eb      	beq.n	967e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    96a6:	5d52      	ldrb	r2, [r2, r5]
    96a8:	0652      	lsls	r2, r2, #25
    96aa:	d1e8      	bne.n	967e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  return *reinterpret_cast<const uint32_t*>(src);
    96ac:	689d      	ldr	r5, [r3, #8]
    96ae:	2200      	movs	r2, #0
    96b0:	4629      	mov	r1, r5
    96b2:	4630      	mov	r0, r6
    96b4:	f002 fbd4 	bl	be60 <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
    96b8:	2800      	cmp	r0, #0
    96ba:	d0e0      	beq.n	967e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    96bc:	f8b0 300b 	ldrh.w	r3, [r0, #11]
    96c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    96c4:	d1db      	bne.n	967e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  m_fatCount = bpb->fatCount;
    96c6:	7c03      	ldrb	r3, [r0, #16]
  if ((m_fatCount != 1) && (m_fatCount != 2)) {
    96c8:	1e5a      	subs	r2, r3, #1
  m_fatCount = bpb->fatCount;
    96ca:	7223      	strb	r3, [r4, #8]
  if ((m_fatCount != 1) && (m_fatCount != 2)) {
    96cc:	2a01      	cmp	r2, #1
    96ce:	d8d6      	bhi.n	967e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    96d0:	7b41      	ldrb	r1, [r0, #13]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    96d2:	1e4b      	subs	r3, r1, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    96d4:	2901      	cmp	r1, #1
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    96d6:	7121      	strb	r1, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    96d8:	7163      	strb	r3, [r4, #5]
  m_sectorsPerClusterShift = 0;
    96da:	f04f 0300 	mov.w	r3, #0
    96de:	71a3      	strb	r3, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    96e0:	d044      	beq.n	976c <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x120>
    96e2:	2201      	movs	r2, #1
    96e4:	0052      	lsls	r2, r2, #1
    m_sectorsPerClusterShift++;
    96e6:	3301      	adds	r3, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    96e8:	b2d2      	uxtb	r2, r2
    m_sectorsPerClusterShift++;
    96ea:	b2db      	uxtb	r3, r3
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    96ec:	4291      	cmp	r1, r2
    96ee:	d004      	beq.n	96fa <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xae>
    if (tmp == 0) {
    96f0:	2b08      	cmp	r3, #8
    96f2:	d1f7      	bne.n	96e4 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x98>
  return false;
    96f4:	2000      	movs	r0, #0
    96f6:	71a3      	strb	r3, [r4, #6]
}
    96f8:	bd70      	pop	{r4, r5, r6, pc}
  clusterCount >>= m_sectorsPerClusterShift;
    96fa:	461e      	mov	r6, r3
    96fc:	71a3      	strb	r3, [r4, #6]
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    96fe:	8ac1      	ldrh	r1, [r0, #22]
    9700:	6121      	str	r1, [r4, #16]
  if (m_sectorsPerFat == 0) {
    9702:	b909      	cbnz	r1, 9708 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xbc>
    9704:	6a41      	ldr	r1, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    9706:	6121      	str	r1, [r4, #16]
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    9708:	89c2      	ldrh	r2, [r0, #14]
  return *reinterpret_cast<const uint16_t*>(src);
    970a:	f8b0 3011 	ldrh.w	r3, [r0, #17]
    970e:	442a      	add	r2, r5
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    9710:	8163      	strh	r3, [r4, #10]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    9712:	015b      	lsls	r3, r3, #5
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    9714:	61a2      	str	r2, [r4, #24]
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    9716:	f890 c010 	ldrb.w	ip, [r0, #16]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    971a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    971e:	fb01 220c 	mla	r2, r1, ip, r2
  m_dataStartSector = m_rootDirStart +
    9722:	eb02 2353 	add.w	r3, r2, r3, lsr #9
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    9726:	6222      	str	r2, [r4, #32]
  totalSectors = getLe16(bpb->totalSectors16);
    9728:	f8b0 2013 	ldrh.w	r2, [r0, #19]
  m_dataStartSector = m_rootDirStart +
    972c:	6163      	str	r3, [r4, #20]
  if (totalSectors == 0) {
    972e:	b902      	cbnz	r2, 9732 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xe6>
  return *reinterpret_cast<const uint32_t*>(src);
    9730:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    9732:	1aed      	subs	r5, r5, r3
    9734:	18ab      	adds	r3, r5, r2
  clusterCount >>= m_sectorsPerClusterShift;
    9736:	40f3      	lsrs	r3, r6
  m_lastCluster = clusterCount + 1;
    9738:	1c5a      	adds	r2, r3, #1
    973a:	61e2      	str	r2, [r4, #28]
    m_freeClusterCount = value;
    973c:	f04f 32ff 	mov.w	r2, #4294967295
    9740:	6262      	str	r2, [r4, #36]	; 0x24
  if (clusterCount < 4085) {
    9742:	f640 72f4 	movw	r2, #4084	; 0xff4
    9746:	4293      	cmp	r3, r2
    9748:	d90c      	bls.n	9764 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x118>
  } else if (clusterCount < 65525) {
    974a:	f64f 72f4 	movw	r2, #65524	; 0xfff4
    974e:	4293      	cmp	r3, r2
    9750:	d90a      	bls.n	9768 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x11c>
    9752:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    9754:	2320      	movs	r3, #32
    9756:	6222      	str	r2, [r4, #32]
  return true;
    9758:	2001      	movs	r0, #1
    m_fatType = 12;
    975a:	71e3      	strb	r3, [r4, #7]
    m_mirrorOffset = offset;
    975c:	6321      	str	r1, [r4, #48]	; 0x30
    975e:	f8c4 1240 	str.w	r1, [r4, #576]	; 0x240
}
    9762:	bd70      	pop	{r4, r5, r6, pc}
    9764:	230c      	movs	r3, #12
    9766:	e7f7      	b.n	9758 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x10c>
    9768:	2310      	movs	r3, #16
    976a:	e7f5      	b.n	9758 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x10c>
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    976c:	461e      	mov	r6, r3
    976e:	e7c6      	b.n	96fe <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xb2>

00009770 <FsBaseFile::FsBaseFile(FsBaseFile const&)>:
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    9770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9772:	2600      	movs	r6, #0
  if (from.m_fFile) {
    9774:	6b8f      	ldr	r7, [r1, #56]	; 0x38
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    9776:	460d      	mov	r5, r1
    9778:	4604      	mov	r4, r0
    977a:	e9c0 660e 	strd	r6, r6, [r0, #56]	; 0x38
  if (from.m_fFile) {
    977e:	b19f      	cbz	r7, 97a8 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x38>
    m_fFile = new (m_fileMem) FatFile;
    9780:	4601      	mov	r1, r0
    9782:	2024      	movs	r0, #36	; 0x24
    9784:	f000 f8dc 	bl	9940 <operator new(unsigned int, unsigned long*)>
  FatFile() {}
    9788:	8006      	strh	r6, [r0, #0]
    978a:	7086      	strb	r6, [r0, #2]
    *m_fFile = *from.m_fFile;
    978c:	4684      	mov	ip, r0
    978e:	6bad      	ldr	r5, [r5, #56]	; 0x38
    m_fFile = new (m_fileMem) FatFile;
    9790:	63a0      	str	r0, [r4, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    9792:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    9794:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    9798:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    979a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    979e:	682b      	ldr	r3, [r5, #0]
    97a0:	f8cc 3000 	str.w	r3, [ip]
}
    97a4:	4620      	mov	r0, r4
    97a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  } else if (from.m_xFile) {
    97a8:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    97aa:	2b00      	cmp	r3, #0
    97ac:	d0fa      	beq.n	97a4 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x34>
    m_xFile = new (m_fileMem) ExFatFile;
    97ae:	4601      	mov	r1, r0
    97b0:	2038      	movs	r0, #56	; 0x38
    97b2:	f000 f8c5 	bl	9940 <operator new(unsigned int, unsigned long*)>
  ExFatFile() {}
    97b6:	f880 7031 	strb.w	r7, [r0, #49]	; 0x31
    97ba:	8647      	strh	r7, [r0, #50]	; 0x32
    *m_xFile = *from.m_xFile;
    97bc:	4602      	mov	r2, r0
    97be:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    m_xFile = new (m_fileMem) ExFatFile;
    97c0:	63e0      	str	r0, [r4, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    97c2:	f103 0730 	add.w	r7, r3, #48	; 0x30
    97c6:	681e      	ldr	r6, [r3, #0]
    97c8:	3310      	adds	r3, #16
    97ca:	f853 5c0c 	ldr.w	r5, [r3, #-12]
    97ce:	3210      	adds	r2, #16
    97d0:	f853 0c08 	ldr.w	r0, [r3, #-8]
    97d4:	f853 1c04 	ldr.w	r1, [r3, #-4]
    97d8:	42bb      	cmp	r3, r7
    97da:	f842 6c10 	str.w	r6, [r2, #-16]
    97de:	f842 5c0c 	str.w	r5, [r2, #-12]
    97e2:	f842 0c08 	str.w	r0, [r2, #-8]
    97e6:	f842 1c04 	str.w	r1, [r2, #-4]
    97ea:	d1ec      	bne.n	97c6 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x56>
    97ec:	681b      	ldr	r3, [r3, #0]
}
    97ee:	4620      	mov	r0, r4
    *m_xFile = *from.m_xFile;
    97f0:	6013      	str	r3, [r2, #0]
}
    97f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000097f4 <FsBaseFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    97f4:	b510      	push	{r4, lr}
    97f6:	4604      	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    97f8:	6b80      	ldr	r0, [r0, #56]	; 0x38
    97fa:	b110      	cbz	r0, 9802 <FsBaseFile::close()+0xe>
    97fc:	f7fd fce2 	bl	71c4 <FatFile::close()>
    9800:	b930      	cbnz	r0, 9810 <FsBaseFile::close()+0x1c>
    m_fFile = nullptr;
    return true;
  }
  if (m_xFile && m_xFile->close()) {
    9802:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    9804:	b110      	cbz	r0, 980c <FsBaseFile::close()+0x18>
    9806:	f7fb fbcf 	bl	4fa8 <ExFatFile::close()>
    980a:	b920      	cbnz	r0, 9816 <FsBaseFile::close()+0x22>
    m_xFile = nullptr;
    return true;
  }
  return false;
    980c:	2000      	movs	r0, #0
}
    980e:	bd10      	pop	{r4, pc}
    m_fFile = nullptr;
    9810:	2300      	movs	r3, #0
    9812:	63a3      	str	r3, [r4, #56]	; 0x38
}
    9814:	bd10      	pop	{r4, pc}
    m_xFile = nullptr;
    9816:	2300      	movs	r3, #0
    9818:	63e3      	str	r3, [r4, #60]	; 0x3c
}
    981a:	bd10      	pop	{r4, pc}

0000981c <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    981c:	2900      	cmp	r1, #0
    981e:	d052      	beq.n	98c6 <FsBaseFile::open(FsVolume*, char const*, int)+0xaa>
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    9820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9824:	4604      	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    9826:	6b80      	ldr	r0, [r0, #56]	; 0x38
    9828:	460d      	mov	r5, r1
    982a:	4617      	mov	r7, r2
    982c:	461e      	mov	r6, r3
    982e:	b110      	cbz	r0, 9836 <FsBaseFile::open(FsVolume*, char const*, int)+0x1a>
    9830:	f7fd fcc8 	bl	71c4 <FatFile::close()>
    9834:	bba0      	cbnz	r0, 98a0 <FsBaseFile::open(FsVolume*, char const*, int)+0x84>
  if (m_xFile && m_xFile->close()) {
    9836:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    9838:	b110      	cbz	r0, 9840 <FsBaseFile::open(FsVolume*, char const*, int)+0x24>
    983a:	f7fb fbb5 	bl	4fa8 <ExFatFile::close()>
    983e:	bbb8      	cbnz	r0, 98b0 <FsBaseFile::open(FsVolume*, char const*, int)+0x94>
    return false;
  }
  close();
  if (vol->m_fVol) {
    9840:	f8d5 8480 	ldr.w	r8, [r5, #1152]	; 0x480
    9844:	f1b8 0f00 	cmp.w	r8, #0
    9848:	d011      	beq.n	986e <FsBaseFile::open(FsVolume*, char const*, int)+0x52>
    m_fFile = new (m_fileMem) FatFile;
    984a:	4621      	mov	r1, r4
    984c:	2024      	movs	r0, #36	; 0x24
    984e:	f000 f877 	bl	9940 <operator new(unsigned int, unsigned long*)>
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    9852:	4633      	mov	r3, r6
    9854:	2600      	movs	r6, #0
    9856:	463a      	mov	r2, r7
    9858:	8006      	strh	r6, [r0, #0]
    985a:	7086      	strb	r6, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    985c:	63a0      	str	r0, [r4, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    985e:	f8d5 1480 	ldr.w	r1, [r5, #1152]	; 0x480
    9862:	f7fd feb7 	bl	75d4 <FatFile::open(FatVolume*, char const*, int)>
    9866:	bb58      	cbnz	r0, 98c0 <FsBaseFile::open(FsVolume*, char const*, int)+0xa4>
      return true;
    }
    m_fFile = nullptr;
    9868:	63a0      	str	r0, [r4, #56]	; 0x38
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    986a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (vol->m_xVol) {
    986e:	f8d5 3484 	ldr.w	r3, [r5, #1156]	; 0x484
    9872:	b193      	cbz	r3, 989a <FsBaseFile::open(FsVolume*, char const*, int)+0x7e>
    m_xFile = new (m_fileMem) ExFatFile;
    9874:	4621      	mov	r1, r4
    9876:	2038      	movs	r0, #56	; 0x38
    9878:	f000 f862 	bl	9940 <operator new(unsigned int, unsigned long*)>
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    987c:	4633      	mov	r3, r6
    987e:	f880 8031 	strb.w	r8, [r0, #49]	; 0x31
    9882:	463a      	mov	r2, r7
    9884:	f8a0 8032 	strh.w	r8, [r0, #50]	; 0x32
    m_xFile = new (m_fileMem) ExFatFile;
    9888:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    988a:	f8d5 1484 	ldr.w	r1, [r5, #1156]	; 0x484
    988e:	f7fb ffbf 	bl	5810 <ExFatFile::open(ExFatVolume*, char const*, int)>
    9892:	b9a8      	cbnz	r0, 98c0 <FsBaseFile::open(FsVolume*, char const*, int)+0xa4>
    m_xFile = nullptr;
    9894:	63e0      	str	r0, [r4, #60]	; 0x3c
}
    9896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
    989a:	2000      	movs	r0, #0
}
    989c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_fFile = nullptr;
    98a0:	2300      	movs	r3, #0
  if (vol->m_fVol) {
    98a2:	f8d5 8480 	ldr.w	r8, [r5, #1152]	; 0x480
    m_fFile = nullptr;
    98a6:	63a3      	str	r3, [r4, #56]	; 0x38
  if (vol->m_fVol) {
    98a8:	f1b8 0f00 	cmp.w	r8, #0
    98ac:	d1cd      	bne.n	984a <FsBaseFile::open(FsVolume*, char const*, int)+0x2e>
    98ae:	e7de      	b.n	986e <FsBaseFile::open(FsVolume*, char const*, int)+0x52>
    m_xFile = nullptr;
    98b0:	2300      	movs	r3, #0
  if (vol->m_fVol) {
    98b2:	f8d5 8480 	ldr.w	r8, [r5, #1152]	; 0x480
    m_xFile = nullptr;
    98b6:	63e3      	str	r3, [r4, #60]	; 0x3c
  if (vol->m_fVol) {
    98b8:	f1b8 0f00 	cmp.w	r8, #0
    98bc:	d1c5      	bne.n	984a <FsBaseFile::open(FsVolume*, char const*, int)+0x2e>
    98be:	e7d6      	b.n	986e <FsBaseFile::open(FsVolume*, char const*, int)+0x52>
      return true;
    98c0:	2001      	movs	r0, #1
}
    98c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
    98c6:	2000      	movs	r0, #0
}
    98c8:	4770      	bx	lr
    98ca:	bf00      	nop

000098cc <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    98cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    98ce:	4604      	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    98d0:	6b80      	ldr	r0, [r0, #56]	; 0x38
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    98d2:	460d      	mov	r5, r1
    98d4:	4617      	mov	r7, r2
  if (m_fFile && m_fFile->close()) {
    98d6:	b110      	cbz	r0, 98de <FsBaseFile::openNext(FsBaseFile*, int)+0x12>
    98d8:	f7fd fc74 	bl	71c4 <FatFile::close()>
    98dc:	bb38      	cbnz	r0, 992e <FsBaseFile::openNext(FsBaseFile*, int)+0x62>
  if (m_xFile && m_xFile->close()) {
    98de:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    98e0:	b110      	cbz	r0, 98e8 <FsBaseFile::openNext(FsBaseFile*, int)+0x1c>
    98e2:	f7fb fb61 	bl	4fa8 <ExFatFile::close()>
    98e6:	bb38      	cbnz	r0, 9938 <FsBaseFile::openNext(FsBaseFile*, int)+0x6c>
  close();
  if (dir->m_fFile) {
    98e8:	6bae      	ldr	r6, [r5, #56]	; 0x38
    98ea:	b176      	cbz	r6, 990a <FsBaseFile::openNext(FsBaseFile*, int)+0x3e>
    m_fFile = new (m_fileMem) FatFile;
    98ec:	4621      	mov	r1, r4
    98ee:	2024      	movs	r0, #36	; 0x24
    98f0:	f000 f826 	bl	9940 <operator new(unsigned int, unsigned long*)>
    98f4:	2100      	movs	r1, #0
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    98f6:	463a      	mov	r2, r7
    98f8:	8001      	strh	r1, [r0, #0]
    98fa:	7081      	strb	r1, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    98fc:	63a0      	str	r0, [r4, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    98fe:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    9900:	f7fe f9ce 	bl	7ca0 <FatFile::openNext(FatFile*, int)>
    9904:	b988      	cbnz	r0, 992a <FsBaseFile::openNext(FsBaseFile*, int)+0x5e>
      return true;
    }
    m_fFile = nullptr;
    9906:	63a0      	str	r0, [r4, #56]	; 0x38
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    9908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  } else if (dir->m_xFile) {
    990a:	6be8      	ldr	r0, [r5, #60]	; 0x3c
    990c:	2800      	cmp	r0, #0
    990e:	d0fb      	beq.n	9908 <FsBaseFile::openNext(FsBaseFile*, int)+0x3c>
    m_xFile = new (m_fileMem) ExFatFile;
    9910:	4621      	mov	r1, r4
    9912:	2038      	movs	r0, #56	; 0x38
    9914:	f000 f814 	bl	9940 <operator new(unsigned int, unsigned long*)>
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    9918:	463a      	mov	r2, r7
    991a:	f880 6031 	strb.w	r6, [r0, #49]	; 0x31
    991e:	8646      	strh	r6, [r0, #50]	; 0x32
    m_xFile = new (m_fileMem) ExFatFile;
    9920:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    9922:	6be9      	ldr	r1, [r5, #60]	; 0x3c
    9924:	f7fb ff7c 	bl	5820 <ExFatFile::openNext(ExFatFile*, int)>
    9928:	b120      	cbz	r0, 9934 <FsBaseFile::openNext(FsBaseFile*, int)+0x68>
      return true;
    992a:	2001      	movs	r0, #1
}
    992c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_fFile = nullptr;
    992e:	2300      	movs	r3, #0
    9930:	63a3      	str	r3, [r4, #56]	; 0x38
    return true;
    9932:	e7d9      	b.n	98e8 <FsBaseFile::openNext(FsBaseFile*, int)+0x1c>
    m_xFile = nullptr;
    9934:	63e0      	str	r0, [r4, #60]	; 0x3c
}
    9936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_xFile = nullptr;
    9938:	2300      	movs	r3, #0
    993a:	63e3      	str	r3, [r4, #60]	; 0x3c
    return true;
    993c:	e7d4      	b.n	98e8 <FsBaseFile::openNext(FsBaseFile*, int)+0x1c>
    993e:	bf00      	nop

00009940 <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    9940:	4608      	mov	r0, r1
    9942:	4770      	bx	lr

00009944 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>:
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    9944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_fVol = nullptr;
    9948:	2600      	movs	r6, #0
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    994a:	4604      	mov	r4, r0
    994c:	4698      	mov	r8, r3
  m_blockDev = blockDev;
    994e:	f8c0 1488 	str.w	r1, [r0, #1160]	; 0x488
  m_fVol = nullptr;
    9952:	f8c0 6480 	str.w	r6, [r0, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
    9956:	4601      	mov	r1, r0
    9958:	f44f 6090 	mov.w	r0, #1152	; 0x480
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    995c:	4617      	mov	r7, r2
  m_xVol = new (m_volMem) ExFatVolume;
    995e:	f7ff ffef 	bl	9940 <operator new(unsigned int, unsigned long*)>
    if (!init(dev, part)) {
    9962:	4642      	mov	r2, r8
  ExFatPartition() {}
    9964:	f880 6444 	strb.w	r6, [r0, #1092]	; 0x444
    9968:	4605      	mov	r5, r0
    996a:	f880 6479 	strb.w	r6, [r0, #1145]	; 0x479
    996e:	f8a0 647a 	strh.w	r6, [r0, #1146]	; 0x47a
    9972:	f8c4 0484 	str.w	r0, [r4, #1156]	; 0x484
    9976:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
    997a:	f7fd fae7 	bl	6f4c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    997e:	bba0      	cbnz	r0, 99ea <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xa6>
  m_xVol = nullptr;
    9980:	2600      	movs	r6, #0
  m_fVol = new (m_volMem) FatVolume;
    9982:	4621      	mov	r1, r4
    9984:	f240 406c 	movw	r0, #1132	; 0x46c
  m_xVol = nullptr;
    9988:	f8c4 6484 	str.w	r6, [r4, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
    998c:	f7ff ffd8 	bl	9940 <operator new(unsigned int, unsigned long*)>
  FatPartition() {}
    9990:	2302      	movs	r3, #2
    9992:	71c6      	strb	r6, [r0, #7]
    if (!init(dev, part)) {
    9994:	4642      	mov	r2, r8
    9996:	f8a0 6448 	strh.w	r6, [r0, #1096]	; 0x448
    999a:	4605      	mov	r5, r0
    999c:	f880 644a 	strb.w	r6, [r0, #1098]	; 0x44a
    99a0:	7203      	strb	r3, [r0, #8]
    99a2:	f8c4 0480 	str.w	r0, [r4, #1152]	; 0x480
    99a6:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
    99aa:	f7ff fe4f 	bl	964c <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    99ae:	b938      	cbnz	r0, 99c0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x7c>
  m_cwv = nullptr;
    99b0:	2300      	movs	r3, #0
    99b2:	4a1a      	ldr	r2, [pc, #104]	; (9a1c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>)
  return false;
    99b4:	4618      	mov	r0, r3
  m_cwv = nullptr;
    99b6:	6013      	str	r3, [r2, #0]
  m_fVol = nullptr;
    99b8:	f8c4 3480 	str.w	r3, [r4, #1152]	; 0x480
}
    99bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_vwd.close();
    99c0:	f505 6689 	add.w	r6, r5, #1096	; 0x448
    99c4:	4630      	mov	r0, r6
    99c6:	f7fd fbfd 	bl	71c4 <FatFile::close()>
    return m_vwd.openRoot(this);
    99ca:	4629      	mov	r1, r5
    99cc:	4630      	mov	r0, r6
    99ce:	f7fd fe37 	bl	7640 <FatFile::openRoot(FatVolume*)>
    if (!chdir()) {
    99d2:	2800      	cmp	r0, #0
    99d4:	d0ec      	beq.n	99b0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x6c>
    if (setCwv || !m_cwv) {
    99d6:	4b12      	ldr	r3, [pc, #72]	; (9a20 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xdc>)
    99d8:	681a      	ldr	r2, [r3, #0]
    99da:	b9aa      	cbnz	r2, 9a08 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xc4>
      m_cwv = this;
    99dc:	601d      	str	r5, [r3, #0]
  if (setCwv || !m_cwv) {
    99de:	4b0f      	ldr	r3, [pc, #60]	; (9a1c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>)
    99e0:	b1af      	cbz	r7, 9a0e <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xca>
  return true;
    99e2:	2001      	movs	r0, #1
    m_cwv = this;
    99e4:	601c      	str	r4, [r3, #0]
}
    99e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_vwd.close();
    99ea:	f505 6689 	add.w	r6, r5, #1096	; 0x448
    99ee:	4630      	mov	r0, r6
    99f0:	f7fb fada 	bl	4fa8 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    99f4:	4629      	mov	r1, r5
    99f6:	4630      	mov	r0, r6
    99f8:	f7fb fb04 	bl	5004 <ExFatFile::openRoot(ExFatVolume*)>
    if (!chdir()) {
    99fc:	2800      	cmp	r0, #0
    99fe:	d0bf      	beq.n	9980 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x3c>
    if (setCwv || !m_cwv) {
    9a00:	4b08      	ldr	r3, [pc, #32]	; (9a24 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe0>)
    9a02:	681a      	ldr	r2, [r3, #0]
    9a04:	2a00      	cmp	r2, #0
    9a06:	d0e9      	beq.n	99dc <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x98>
  if (setCwv || !m_cwv) {
    9a08:	4b04      	ldr	r3, [pc, #16]	; (9a1c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>)
    9a0a:	2f00      	cmp	r7, #0
    9a0c:	d1e9      	bne.n	99e2 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x9e>
    9a0e:	681a      	ldr	r2, [r3, #0]
    9a10:	2a00      	cmp	r2, #0
    9a12:	d0e6      	beq.n	99e2 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x9e>
  return true;
    9a14:	2001      	movs	r0, #1
}
    9a16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9a1a:	bf00      	nop
    9a1c:	2005e060 	.word	0x2005e060
    9a20:	2005e064 	.word	0x2005e064
    9a24:	2005e02c 	.word	0x2005e02c

00009a28 <FsVolume::open(char const*, int)>:
FsFile FsVolume::open(const char *path, oflag_t oflag) {
    9a28:	b570      	push	{r4, r5, r6, lr}
	constexpr Print() : write_error(0) {}
    9a2a:	2500      	movs	r5, #0
    9a2c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    9a30:	4604      	mov	r4, r0
    9a32:	6045      	str	r5, [r0, #4]
    9a34:	7305      	strb	r5, [r0, #12]
    9a36:	6086      	str	r6, [r0, #8]
  FsBaseFile() {}
    9a38:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    9a3c:	4d03      	ldr	r5, [pc, #12]	; (9a4c <FsVolume::open(char const*, int)+0x24>)
    9a3e:	f840 5b10 	str.w	r5, [r0], #16
  tmpFile.open(this, path, oflag);
    9a42:	f7ff feeb 	bl	981c <FsBaseFile::open(FsVolume*, char const*, int)>
}
    9a46:	4620      	mov	r0, r4
    9a48:	bd70      	pop	{r4, r5, r6, pc}
    9a4a:	bf00      	nop
    9a4c:	20003334 	.word	0x20003334

00009a50 <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
    9a50:	f04f 30ff 	mov.w	r0, #4294967295
    9a54:	4770      	bx	lr
    9a56:	bf00      	nop

00009a58 <SharedSpiCard::errorCode() const>:
  }
    9a58:	7c40      	ldrb	r0, [r0, #17]
    9a5a:	4770      	bx	lr

00009a5c <SharedSpiCard::errorData() const>:
  }
    9a5c:	7d00      	ldrb	r0, [r0, #20]
    9a5e:	4770      	bx	lr

00009a60 <SharedSpiCard::type() const>:
  }
    9a60:	7d40      	ldrb	r0, [r0, #21]
    9a62:	4770      	bx	lr

00009a64 <DedicatedSpiCard::hasDedicatedSpi()>:
   * \param[in] spiConfig SPI card configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig);
  /** \return true, can be in dedicaded state. */
  bool hasDedicatedSpi() {return true;}
    9a64:	2001      	movs	r0, #1
    9a66:	4770      	bx	lr

00009a68 <DedicatedSpiCard::isDedicatedSpi()>:
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() {return m_dedicatedSpi;}
    9a68:	7f00      	ldrb	r0, [r0, #28]
    9a6a:	4770      	bx	lr

00009a6c <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectorsCallback(uint32_t sector, size_t ns,
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    9a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9a70:	461e      	mov	r6, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    9a72:	7cc3      	ldrb	r3, [r0, #19]
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    9a74:	4605      	mov	r5, r0
    9a76:	460c      	mov	r4, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    9a78:	2b02      	cmp	r3, #2
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    9a7a:	4691      	mov	r9, r2
    9a7c:	9f08      	ldr	r7, [sp, #32]
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    9a7e:	d028      	beq.n	9ad2 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x66>
    if (!writeStart(sector)) {
    9a80:	682b      	ldr	r3, [r5, #0]
    9a82:	4621      	mov	r1, r4
    9a84:	4628      	mov	r0, r5
    9a86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    9a88:	4798      	blx	r3
    9a8a:	b198      	cbz	r0, 9ab4 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x48>
      goto fail;
    }
    m_curSector = sector;
    9a8c:	61ac      	str	r4, [r5, #24]
  }
  for (size_t i = 0; i < ns; i++) {
    9a8e:	f1b9 0f00 	cmp.w	r9, #0
    9a92:	d012      	beq.n	9aba <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4e>
    9a94:	eb04 0809 	add.w	r8, r4, r9
    9a98:	e001      	b.n	9a9e <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x32>
    9a9a:	45a0      	cmp	r8, r4
    9a9c:	d00d      	beq.n	9aba <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4e>
    const uint8_t *src = callback(sector + i, context);
    9a9e:	4639      	mov	r1, r7
    9aa0:	4620      	mov	r0, r4
    9aa2:	47b0      	blx	r6
    if (!writeData(src)) {
    9aa4:	682b      	ldr	r3, [r5, #0]
    const uint8_t *src = callback(sector + i, context);
    9aa6:	4601      	mov	r1, r0
    if (!writeData(src)) {
    9aa8:	4628      	mov	r0, r5
    9aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  for (size_t i = 0; i < ns; i++) {
    9aac:	3401      	adds	r4, #1
    if (!writeData(src)) {
    9aae:	4798      	blx	r3
    9ab0:	2800      	cmp	r0, #0
    9ab2:	d1f2      	bne.n	9a9a <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x2e>
  }
  m_curSector += ns;
  return m_dedicatedSpi ? true : writeStop();

 fail:
  return false;
    9ab4:	2000      	movs	r0, #0
}
    9ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_curSector += ns;
    9aba:	69ab      	ldr	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    9abc:	7f28      	ldrb	r0, [r5, #28]
  m_curSector += ns;
    9abe:	444b      	add	r3, r9
    9ac0:	61ab      	str	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    9ac2:	2800      	cmp	r0, #0
    9ac4:	d1f7      	bne.n	9ab6 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4a>
    9ac6:	682b      	ldr	r3, [r5, #0]
    9ac8:	4628      	mov	r0, r5
    9aca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
    9acc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return m_dedicatedSpi ? true : writeStop();
    9ad0:	4718      	bx	r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    9ad2:	6983      	ldr	r3, [r0, #24]
    9ad4:	428b      	cmp	r3, r1
    9ad6:	d1d3      	bne.n	9a80 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x14>
    9ad8:	e7d9      	b.n	9a8e <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x22>
    9ada:	bf00      	nop

00009adc <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    9adc:	4770      	bx	lr
    9ade:	bf00      	nop

00009ae0 <SharedSpiCard::end()>:
    m_spiDriver.end();
    9ae0:	3004      	adds	r0, #4
    9ae2:	f002 b93d 	b.w	bd60 <SdSpiArduinoDriver::end()>
    9ae6:	bf00      	nop

00009ae8 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    9ae8:	b510      	push	{r4, lr}
    9aea:	4604      	mov	r4, r0
    9aec:	2120      	movs	r1, #32
    9aee:	f003 fdcb 	bl	d688 <operator delete(void*, unsigned int)>
    9af2:	4620      	mov	r0, r4
    9af4:	bd10      	pop	{r4, pc}
    9af6:	bf00      	nop

00009af8 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
    uint32_t sector, const uint8_t* src, size_t ns) {
    9af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9afc:	461f      	mov	r7, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    9afe:	7cc3      	ldrb	r3, [r0, #19]
    uint32_t sector, const uint8_t* src, size_t ns) {
    9b00:	4605      	mov	r5, r0
    9b02:	460e      	mov	r6, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    9b04:	2b02      	cmp	r3, #2
    uint32_t sector, const uint8_t* src, size_t ns) {
    9b06:	4614      	mov	r4, r2
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    9b08:	d024      	beq.n	9b54 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x5c>
    if (!writeStart(sector)) {
    9b0a:	682b      	ldr	r3, [r5, #0]
    9b0c:	4631      	mov	r1, r6
    9b0e:	4628      	mov	r0, r5
    9b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    9b12:	4798      	blx	r3
    9b14:	b178      	cbz	r0, 9b36 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x3e>
    m_curSector = sector;
    9b16:	61ae      	str	r6, [r5, #24]
  for (size_t i = 0; i < ns; i++, src += 512) {
    9b18:	b187      	cbz	r7, 9b3c <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    if (!writeStart(sector)) {
    9b1a:	2600      	movs	r6, #0
    9b1c:	e001      	b.n	9b22 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2a>
  for (size_t i = 0; i < ns; i++, src += 512) {
    9b1e:	42b7      	cmp	r7, r6
    9b20:	d00c      	beq.n	9b3c <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    if (!writeData(src)) {
    9b22:	682a      	ldr	r2, [r5, #0]
    9b24:	4621      	mov	r1, r4
    9b26:	4628      	mov	r0, r5
  for (size_t i = 0; i < ns; i++, src += 512) {
    9b28:	3601      	adds	r6, #1
    if (!writeData(src)) {
    9b2a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
  for (size_t i = 0; i < ns; i++, src += 512) {
    9b2c:	f504 7400 	add.w	r4, r4, #512	; 0x200
    if (!writeData(src)) {
    9b30:	4790      	blx	r2
    9b32:	2800      	cmp	r0, #0
    9b34:	d1f3      	bne.n	9b1e <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x26>
  return false;
    9b36:	2000      	movs	r0, #0
}
    9b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_curSector += ns;
    9b3c:	69ab      	ldr	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    9b3e:	7f28      	ldrb	r0, [r5, #28]
  m_curSector += ns;
    9b40:	443b      	add	r3, r7
    9b42:	61ab      	str	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    9b44:	2800      	cmp	r0, #0
    9b46:	d1f7      	bne.n	9b38 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x40>
    9b48:	682b      	ldr	r3, [r5, #0]
    9b4a:	4628      	mov	r0, r5
    9b4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
    9b4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return m_dedicatedSpi ? true : writeStop();
    9b52:	4718      	bx	r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    9b54:	6983      	ldr	r3, [r0, #24]
    9b56:	428b      	cmp	r3, r1
    9b58:	d1d7      	bne.n	9b0a <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
    9b5a:	e7dd      	b.n	9b18 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x20>

00009b5c <SharedSpiCard::writeStop()>:
bool SharedSpiCard::writeStop() {
    9b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9b60:	4e20      	ldr	r6, [pc, #128]	; (9be4 <SharedSpiCard::writeStop()+0x88>)
    9b62:	4607      	mov	r7, r0
    return m_spiDriver.receive();
    9b64:	f100 0804 	add.w	r8, r0, #4
    9b68:	6835      	ldr	r5, [r6, #0]
    m_endTime = ms + millis16();
    9b6a:	f505 7516 	add.w	r5, r5, #600	; 0x258
    9b6e:	b2ad      	uxth	r5, r5
  explicit Timeout(uint16_t ms) {set(ms);}
    9b70:	e003      	b.n	9b7a <SharedSpiCard::writeStop()+0x1e>
    9b72:	6833      	ldr	r3, [r6, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    9b74:	1aeb      	subs	r3, r5, r3
    if (timeout.timedOut()) {
    9b76:	041b      	lsls	r3, r3, #16
    9b78:	d410      	bmi.n	9b9c <SharedSpiCard::writeStop()+0x40>
    9b7a:	4640      	mov	r0, r8
    9b7c:	f002 f8f4 	bl	bd68 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    9b80:	28ff      	cmp	r0, #255	; 0xff
    9b82:	4604      	mov	r4, r0
    9b84:	d1f5      	bne.n	9b72 <SharedSpiCard::writeStop()+0x16>
    m_spiDriver.send(data);
    9b86:	21fd      	movs	r1, #253	; 0xfd
    9b88:	4640      	mov	r0, r8
    9b8a:	f002 f90b 	bl	bda4 <SdSpiArduinoDriver::send(unsigned char)>
  if (m_spiActive) {
    9b8e:	7cbb      	ldrb	r3, [r7, #18]
    9b90:	b9cb      	cbnz	r3, 9bc6 <SharedSpiCard::writeStop()+0x6a>
  m_state = IDLE_STATE;
    9b92:	2300      	movs	r3, #0
    9b94:	2001      	movs	r0, #1
    9b96:	74fb      	strb	r3, [r7, #19]
}
    9b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_errorCode = code;
    9b9c:	231e      	movs	r3, #30
  if (m_spiActive) {
    9b9e:	7cb8      	ldrb	r0, [r7, #18]
    9ba0:	747b      	strb	r3, [r7, #17]
    9ba2:	2800      	cmp	r0, #0
    9ba4:	d0f8      	beq.n	9b98 <SharedSpiCard::writeStop()+0x3c>
    sdCsWrite(m_csPin, true);
    9ba6:	7c38      	ldrb	r0, [r7, #16]
    9ba8:	2101      	movs	r1, #1
    9baa:	f002 f809 	bl	bbc0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    9bae:	21ff      	movs	r1, #255	; 0xff
    9bb0:	4640      	mov	r0, r8
    9bb2:	f002 f8f7 	bl	bda4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    9bb6:	4640      	mov	r0, r8
    9bb8:	f002 f8aa 	bl	bd10 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    9bbc:	2300      	movs	r3, #0
  return false;
    9bbe:	4618      	mov	r0, r3
    m_spiActive = false;
    9bc0:	74bb      	strb	r3, [r7, #18]
}
    9bc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sdCsWrite(m_csPin, true);
    9bc6:	2101      	movs	r1, #1
    9bc8:	7c38      	ldrb	r0, [r7, #16]
    9bca:	f001 fff9 	bl	bbc0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    9bce:	4621      	mov	r1, r4
    9bd0:	4640      	mov	r0, r8
    9bd2:	f002 f8e7 	bl	bda4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    9bd6:	4640      	mov	r0, r8
    9bd8:	f002 f89a 	bl	bd10 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    9bdc:	2300      	movs	r3, #0
    9bde:	74bb      	strb	r3, [r7, #18]
}
    9be0:	e7d7      	b.n	9b92 <SharedSpiCard::writeStop()+0x36>
    9be2:	bf00      	nop
    9be4:	2005e500 	.word	0x2005e500

00009be8 <SharedSpiCard::isBusy()>:
bool SharedSpiCard::isBusy() {
    9be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_state == READ_STATE) {
    9bec:	7cc3      	ldrb	r3, [r0, #19]
    9bee:	2b01      	cmp	r3, #1
    9bf0:	d035      	beq.n	9c5e <SharedSpiCard::isBusy()+0x76>
  if (!spiActive) {
    9bf2:	7c86      	ldrb	r6, [r0, #18]
    9bf4:	4604      	mov	r4, r0
    9bf6:	b14e      	cbz	r6, 9c0c <SharedSpiCard::isBusy()+0x24>
    return m_spiDriver.receive();
    9bf8:	3004      	adds	r0, #4
    9bfa:	f002 f8b5 	bl	bd68 <SdSpiArduinoDriver::receive()>
  bool rtn = 0XFF != spiReceive();
    9bfe:	f1b0 05ff 	subs.w	r5, r0, #255	; 0xff
    9c02:	bf18      	it	ne
    9c04:	2501      	movne	r5, #1
}
    9c06:	4628      	mov	r0, r5
    9c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_spiDriver.activate();
    9c0c:	1d07      	adds	r7, r0, #4
    m_spiActive = true;
    9c0e:	f04f 0801 	mov.w	r8, #1
    9c12:	4638      	mov	r0, r7
    9c14:	f002 f85e 	bl	bcd4 <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
    9c18:	4631      	mov	r1, r6
    9c1a:	7c20      	ldrb	r0, [r4, #16]
    9c1c:	f001 ffd0 	bl	bbc0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    9c20:	21ff      	movs	r1, #255	; 0xff
    9c22:	4638      	mov	r0, r7
    9c24:	f002 f8be 	bl	bda4 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    9c28:	4638      	mov	r0, r7
    9c2a:	f884 8012 	strb.w	r8, [r4, #18]
    9c2e:	f002 f89b 	bl	bd68 <SdSpiArduinoDriver::receive()>
  if (m_spiActive) {
    9c32:	7ca3      	ldrb	r3, [r4, #18]
  bool rtn = 0XFF != spiReceive();
    9c34:	f1b0 05ff 	subs.w	r5, r0, #255	; 0xff
    9c38:	bf18      	it	ne
    9c3a:	2501      	movne	r5, #1
  if (m_spiActive) {
    9c3c:	2b00      	cmp	r3, #0
    9c3e:	d0e2      	beq.n	9c06 <SharedSpiCard::isBusy()+0x1e>
    sdCsWrite(m_csPin, true);
    9c40:	4641      	mov	r1, r8
    9c42:	7c20      	ldrb	r0, [r4, #16]
    9c44:	f001 ffbc 	bl	bbc0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    9c48:	21ff      	movs	r1, #255	; 0xff
    9c4a:	4638      	mov	r0, r7
    9c4c:	f002 f8aa 	bl	bda4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    9c50:	4638      	mov	r0, r7
    9c52:	f002 f85d 	bl	bd10 <SdSpiArduinoDriver::deactivate()>
}
    9c56:	4628      	mov	r0, r5
    m_spiActive = false;
    9c58:	74a6      	strb	r6, [r4, #18]
}
    9c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
    9c5e:	2500      	movs	r5, #0
}
    9c60:	4628      	mov	r0, r5
    9c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9c66:	bf00      	nop

00009c68 <SharedSpiCard::readData(unsigned char*, unsigned int)>:
bool SharedSpiCard::readData(uint8_t* dst, size_t count) {
    9c68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9c6c:	4f20      	ldr	r7, [pc, #128]	; (9cf0 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x88>)
    9c6e:	4604      	mov	r4, r0
    9c70:	4688      	mov	r8, r1
    9c72:	4691      	mov	r9, r2
    9c74:	683d      	ldr	r5, [r7, #0]
    return m_spiDriver.receive();
    9c76:	1d06      	adds	r6, r0, #4
    m_endTime = ms + millis16();
    9c78:	f505 7596 	add.w	r5, r5, #300	; 0x12c
    9c7c:	b2ad      	uxth	r5, r5
  explicit Timeout(uint16_t ms) {set(ms);}
    9c7e:	e003      	b.n	9c88 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x20>
    9c80:	683b      	ldr	r3, [r7, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    9c82:	1aeb      	subs	r3, r5, r3
    if (timeout.timedOut()) {
    9c84:	041b      	lsls	r3, r3, #16
    9c86:	d40d      	bmi.n	9ca4 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x3c>
    9c88:	4630      	mov	r0, r6
    9c8a:	f002 f86d 	bl	bd68 <SdSpiArduinoDriver::receive()>
  while ((m_status = spiReceive()) == 0XFF) {
    9c8e:	28ff      	cmp	r0, #255	; 0xff
    9c90:	7520      	strb	r0, [r4, #20]
    9c92:	d0f5      	beq.n	9c80 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x18>
  if (m_status != DATA_START_SECTOR) {
    9c94:	28fe      	cmp	r0, #254	; 0xfe
    9c96:	d01a      	beq.n	9cce <SharedSpiCard::readData(unsigned char*, unsigned int)+0x66>
    9c98:	2318      	movs	r3, #24
  if (m_spiActive) {
    9c9a:	7ca0      	ldrb	r0, [r4, #18]
    m_errorCode = code;
    9c9c:	7463      	strb	r3, [r4, #17]
    9c9e:	b930      	cbnz	r0, 9cae <SharedSpiCard::readData(unsigned char*, unsigned int)+0x46>
}
    9ca0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9ca4:	231d      	movs	r3, #29
  if (m_spiActive) {
    9ca6:	7ca0      	ldrb	r0, [r4, #18]
    9ca8:	7463      	strb	r3, [r4, #17]
    9caa:	2800      	cmp	r0, #0
    9cac:	d0f8      	beq.n	9ca0 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x38>
    sdCsWrite(m_csPin, true);
    9cae:	7c20      	ldrb	r0, [r4, #16]
    9cb0:	2101      	movs	r1, #1
    9cb2:	f001 ff85 	bl	bbc0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    9cb6:	21ff      	movs	r1, #255	; 0xff
    9cb8:	4630      	mov	r0, r6
    9cba:	f002 f873 	bl	bda4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    9cbe:	4630      	mov	r0, r6
    9cc0:	f002 f826 	bl	bd10 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    9cc4:	2300      	movs	r3, #0
  return false;
    9cc6:	4618      	mov	r0, r3
    m_spiActive = false;
    9cc8:	74a3      	strb	r3, [r4, #18]
}
    9cca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return m_spiDriver.receive(buf, n);
    9cce:	464a      	mov	r2, r9
    9cd0:	4641      	mov	r1, r8
    9cd2:	4630      	mov	r0, r6
    9cd4:	f002 f854 	bl	bd80 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if ((m_status = spiReceive(dst, count))) {
    9cd8:	7520      	strb	r0, [r4, #20]
    9cda:	b938      	cbnz	r0, 9cec <SharedSpiCard::readData(unsigned char*, unsigned int)+0x84>
    return m_spiDriver.receive();
    9cdc:	4630      	mov	r0, r6
    9cde:	f002 f843 	bl	bd68 <SdSpiArduinoDriver::receive()>
    9ce2:	4630      	mov	r0, r6
    9ce4:	f002 f840 	bl	bd68 <SdSpiArduinoDriver::receive()>
  return true;
    9ce8:	2001      	movs	r0, #1
    9cea:	e7d9      	b.n	9ca0 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x38>
    9cec:	2325      	movs	r3, #37	; 0x25
    9cee:	e7d4      	b.n	9c9a <SharedSpiCard::readData(unsigned char*, unsigned int)+0x32>
    9cf0:	2005e500 	.word	0x2005e500

00009cf4 <SharedSpiCard::readStop()>:
bool SharedSpiCard::readStop() {
    9cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
  m_state = IDLE_STATE;
    9cf6:	2700      	movs	r7, #0
bool SharedSpiCard::readStop() {
    9cf8:	b083      	sub	sp, #12
  if (cardCommand(CMD12, 0)) {
    9cfa:	210c      	movs	r1, #12
bool SharedSpiCard::readStop() {
    9cfc:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
    9cfe:	463a      	mov	r2, r7
  m_state = IDLE_STATE;
    9d00:	74c7      	strb	r7, [r0, #19]
  if (cardCommand(CMD12, 0)) {
    9d02:	f000 f85b 	bl	9dbc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    9d06:	b9b0      	cbnz	r0, 9d36 <SharedSpiCard::readStop()+0x42>
  if (m_spiActive) {
    9d08:	7ca6      	ldrb	r6, [r4, #18]
    9d0a:	b91e      	cbnz	r6, 9d14 <SharedSpiCard::readStop()+0x20>
  return true;
    9d0c:	2601      	movs	r6, #1
}
    9d0e:	4630      	mov	r0, r6
    9d10:	b003      	add	sp, #12
    9d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sdCsWrite(m_csPin, true);
    9d14:	4605      	mov	r5, r0
    9d16:	2101      	movs	r1, #1
    9d18:	7c20      	ldrb	r0, [r4, #16]
    9d1a:	f001 ff51 	bl	bbc0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    9d1e:	1d20      	adds	r0, r4, #4
    9d20:	21ff      	movs	r1, #255	; 0xff
    9d22:	9001      	str	r0, [sp, #4]
    9d24:	f002 f83e 	bl	bda4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    9d28:	9801      	ldr	r0, [sp, #4]
    9d2a:	f001 fff1 	bl	bd10 <SdSpiArduinoDriver::deactivate()>
    9d2e:	4630      	mov	r0, r6
    m_spiActive = false;
    9d30:	74a5      	strb	r5, [r4, #18]
}
    9d32:	b003      	add	sp, #12
    9d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    m_errorCode = code;
    9d36:	2309      	movs	r3, #9
  if (m_spiActive) {
    9d38:	7ca6      	ldrb	r6, [r4, #18]
    9d3a:	7463      	strb	r3, [r4, #17]
    9d3c:	2e00      	cmp	r6, #0
    9d3e:	d0e6      	beq.n	9d0e <SharedSpiCard::readStop()+0x1a>
    m_spiDriver.send(data);
    9d40:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    9d42:	7c20      	ldrb	r0, [r4, #16]
    9d44:	2101      	movs	r1, #1
}
    9d46:	463e      	mov	r6, r7
    9d48:	f001 ff3a 	bl	bbc0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    9d4c:	21ff      	movs	r1, #255	; 0xff
    9d4e:	4628      	mov	r0, r5
    9d50:	f002 f828 	bl	bda4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    9d54:	4628      	mov	r0, r5
    9d56:	f001 ffdb 	bl	bd10 <SdSpiArduinoDriver::deactivate()>
}
    9d5a:	4630      	mov	r0, r6
    m_spiActive = false;
    9d5c:	74a7      	strb	r7, [r4, #18]
}
    9d5e:	b003      	add	sp, #12
    9d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9d62:	bf00      	nop

00009d64 <SharedSpiCard::syncDevice()>:
  if (m_state == WRITE_STATE) {
    9d64:	7cc2      	ldrb	r2, [r0, #19]
    9d66:	2a02      	cmp	r2, #2
    9d68:	d003      	beq.n	9d72 <SharedSpiCard::syncDevice()+0xe>
  if (m_state == READ_STATE) {
    9d6a:	2a01      	cmp	r2, #1
    9d6c:	d004      	beq.n	9d78 <SharedSpiCard::syncDevice()+0x14>
}
    9d6e:	2001      	movs	r0, #1
    9d70:	4770      	bx	lr
    return writeStop();
    9d72:	6803      	ldr	r3, [r0, #0]
    9d74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    9d76:	4718      	bx	r3
    return readStop();
    9d78:	f7ff bfbc 	b.w	9cf4 <SharedSpiCard::readStop()>

00009d7c <DedicatedSpiCard::setDedicatedSpi(bool)>:
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    9d7c:	b538      	push	{r3, r4, r5, lr}
  if (!syncDevice()) {
    9d7e:	6803      	ldr	r3, [r0, #0]
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    9d80:	460d      	mov	r5, r1
    9d82:	490d      	ldr	r1, [pc, #52]	; (9db8 <DedicatedSpiCard::setDedicatedSpi(bool)+0x3c>)
    9d84:	4604      	mov	r4, r0
  if (!syncDevice()) {
    9d86:	6a1a      	ldr	r2, [r3, #32]
    9d88:	428a      	cmp	r2, r1
    9d8a:	d10c      	bne.n	9da6 <DedicatedSpiCard::setDedicatedSpi(bool)+0x2a>
  if (m_state == WRITE_STATE) {
    9d8c:	7cc2      	ldrb	r2, [r0, #19]
    9d8e:	2a02      	cmp	r2, #2
    9d90:	d004      	beq.n	9d9c <DedicatedSpiCard::setDedicatedSpi(bool)+0x20>
  if (m_state == READ_STATE) {
    9d92:	2a01      	cmp	r2, #1
    9d94:	d00b      	beq.n	9dae <DedicatedSpiCard::setDedicatedSpi(bool)+0x32>
  return true;
    9d96:	2001      	movs	r0, #1
  m_dedicatedSpi = value;
    9d98:	7725      	strb	r5, [r4, #28]
}
    9d9a:	bd38      	pop	{r3, r4, r5, pc}
    return writeStop();
    9d9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    9d9e:	4798      	blx	r3
  if (!syncDevice()) {
    9da0:	2800      	cmp	r0, #0
    9da2:	d1f8      	bne.n	9d96 <DedicatedSpiCard::setDedicatedSpi(bool)+0x1a>
}
    9da4:	bd38      	pop	{r3, r4, r5, pc}
  if (!syncDevice()) {
    9da6:	4790      	blx	r2
    9da8:	2800      	cmp	r0, #0
    9daa:	d0fb      	beq.n	9da4 <DedicatedSpiCard::setDedicatedSpi(bool)+0x28>
    9dac:	e7f3      	b.n	9d96 <DedicatedSpiCard::setDedicatedSpi(bool)+0x1a>
    return readStop();
    9dae:	f7ff ffa1 	bl	9cf4 <SharedSpiCard::readStop()>
  if (!syncDevice()) {
    9db2:	2800      	cmp	r0, #0
    9db4:	d0f6      	beq.n	9da4 <DedicatedSpiCard::setDedicatedSpi(bool)+0x28>
    9db6:	e7ee      	b.n	9d96 <DedicatedSpiCard::setDedicatedSpi(bool)+0x1a>
    9db8:	00009d65 	.word	0x00009d65

00009dbc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>:
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    9dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!syncDevice()) {
    9dc0:	6803      	ldr	r3, [r0, #0]
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    9dc2:	b082      	sub	sp, #8
    9dc4:	460f      	mov	r7, r1
    9dc6:	4935      	ldr	r1, [pc, #212]	; (9e9c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xe0>)
    9dc8:	9201      	str	r2, [sp, #4]
    9dca:	4606      	mov	r6, r0
  if (!syncDevice()) {
    9dcc:	6a1a      	ldr	r2, [r3, #32]
    9dce:	428a      	cmp	r2, r1
    9dd0:	d15e      	bne.n	9e90 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xd4>
  if (m_state == WRITE_STATE) {
    9dd2:	7cc2      	ldrb	r2, [r0, #19]
    9dd4:	2a02      	cmp	r2, #2
    9dd6:	d041      	beq.n	9e5c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa0>
  if (m_state == READ_STATE) {
    9dd8:	2a01      	cmp	r2, #1
    9dda:	d05b      	beq.n	9e94 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xd8>
  if (!m_spiActive) {
    9ddc:	7cb4      	ldrb	r4, [r6, #18]
    9dde:	2c00      	cmp	r4, #0
    9de0:	d047      	beq.n	9e72 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xb6>
    m_spiDriver.activate();
    9de2:	1d35      	adds	r5, r6, #4
  if (cmd != CMD12) {
    9de4:	2f0c      	cmp	r7, #12
    9de6:	d011      	beq.n	9e0c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x50>
    9de8:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 9ea0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xe4>
    9dec:	f8d8 4000 	ldr.w	r4, [r8]
    m_endTime = ms + millis16();
    9df0:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    9df4:	b2a4      	uxth	r4, r4
  explicit Timeout(uint16_t ms) {set(ms);}
    9df6:	e004      	b.n	9e02 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x46>
    9df8:	f8d8 3000 	ldr.w	r3, [r8]
    return (int16_t)(m_endTime - millis16()) < 0;
    9dfc:	1ae3      	subs	r3, r4, r3
    if (timeout.timedOut()) {
    9dfe:	041a      	lsls	r2, r3, #16
    9e00:	d434      	bmi.n	9e6c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xb0>
    return m_spiDriver.receive();
    9e02:	4628      	mov	r0, r5
    9e04:	f001 ffb0 	bl	bd68 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    9e08:	28ff      	cmp	r0, #255	; 0xff
    9e0a:	d1f5      	bne.n	9df8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x3c>
    m_spiDriver.send(data);
    9e0c:	f10d 0804 	add.w	r8, sp, #4
    9e10:	ac02      	add	r4, sp, #8
    9e12:	f047 0140 	orr.w	r1, r7, #64	; 0x40
    9e16:	4628      	mov	r0, r5
    9e18:	f001 ffc4 	bl	bda4 <SdSpiArduinoDriver::send(unsigned char)>
    9e1c:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
    9e20:	4628      	mov	r0, r5
    9e22:	f001 ffbf 	bl	bda4 <SdSpiArduinoDriver::send(unsigned char)>
  for (int8_t i = 3; i >= 0; i--) {
    9e26:	45a0      	cmp	r8, r4
    9e28:	d1f8      	bne.n	9e1c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x60>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    9e2a:	2f00      	cmp	r7, #0
    9e2c:	4628      	mov	r0, r5
    return m_spiDriver.receive();
    9e2e:	f04f 040a 	mov.w	r4, #10
    m_spiDriver.send(data);
    9e32:	bf0c      	ite	eq
    9e34:	2195      	moveq	r1, #149	; 0x95
    9e36:	2187      	movne	r1, #135	; 0x87
    9e38:	f001 ffb4 	bl	bda4 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    9e3c:	4628      	mov	r0, r5
    9e3e:	f001 ff93 	bl	bd68 <SdSpiArduinoDriver::receive()>
    9e42:	4628      	mov	r0, r5
  } while (m_status & 0X80 && ++n < 10);
    9e44:	3c01      	subs	r4, #1
    9e46:	f001 ff8f 	bl	bd68 <SdSpiArduinoDriver::receive()>
    9e4a:	0603      	lsls	r3, r0, #24
    9e4c:	b2a4      	uxth	r4, r4
    m_status = spiReceive();
    9e4e:	7530      	strb	r0, [r6, #20]
  } while (m_status & 0X80 && ++n < 10);
    9e50:	d501      	bpl.n	9e56 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x9a>
    9e52:	2c00      	cmp	r4, #0
    9e54:	d1f5      	bne.n	9e42 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x86>
}
    9e56:	b002      	add	sp, #8
    9e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return writeStop();
    9e5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    9e5e:	4798      	blx	r3
  if (!syncDevice()) {
    9e60:	2800      	cmp	r0, #0
    9e62:	d1bb      	bne.n	9ddc <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x20>
    return 0XFF;
    9e64:	20ff      	movs	r0, #255	; 0xff
}
    9e66:	b002      	add	sp, #8
    9e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!waitReady(SD_CMD_TIMEOUT) && cmd != CMD0) {
    9e6c:	2f00      	cmp	r7, #0
    9e6e:	d0cd      	beq.n	9e0c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x50>
    9e70:	e7f8      	b.n	9e64 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa8>
    m_spiDriver.activate();
    9e72:	1d35      	adds	r5, r6, #4
    9e74:	4628      	mov	r0, r5
    9e76:	f001 ff2d 	bl	bcd4 <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
    9e7a:	4621      	mov	r1, r4
    9e7c:	7c30      	ldrb	r0, [r6, #16]
    9e7e:	f001 fe9f 	bl	bbc0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    9e82:	21ff      	movs	r1, #255	; 0xff
    9e84:	4628      	mov	r0, r5
    9e86:	f001 ff8d 	bl	bda4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
    9e8a:	2301      	movs	r3, #1
    9e8c:	74b3      	strb	r3, [r6, #18]
}
    9e8e:	e7a9      	b.n	9de4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x28>
  if (!syncDevice()) {
    9e90:	4790      	blx	r2
    9e92:	e7e5      	b.n	9e60 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa4>
    return readStop();
    9e94:	f7ff ff2e 	bl	9cf4 <SharedSpiCard::readStop()>
    9e98:	e7e2      	b.n	9e60 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa4>
    9e9a:	bf00      	nop
    9e9c:	00009d65 	.word	0x00009d65
    9ea0:	2005e500 	.word	0x2005e500

00009ea4 <SharedSpiCard::begin(SdSpiConfig)>:
bool SharedSpiCard::begin(SdSpiConfig spiConfig) {
    9ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9ea8:	b088      	sub	sp, #32
    9eaa:	4605      	mov	r5, r0
  m_spiActive = false;
    9eac:	f04f 0800 	mov.w	r8, #0
    9eb0:	4617      	mov	r7, r2
bool SharedSpiCard::begin(SdSpiConfig spiConfig) {
    9eb2:	ac01      	add	r4, sp, #4
    m_spiDriver.begin(spiConfig);
    9eb4:	1d2e      	adds	r6, r5, #4
  m_spiActive = false;
    9eb6:	f885 8012 	strb.w	r8, [r5, #18]
  m_errorCode = SD_CARD_ERROR_NONE;
    9eba:	f885 8011 	strb.w	r8, [r5, #17]
  m_type = 0;
    9ebe:	f885 8015 	strb.w	r8, [r5, #21]
bool SharedSpiCard::begin(SdSpiConfig spiConfig) {
    9ec2:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    9ec6:	f89d 0004 	ldrb.w	r0, [sp, #4]
  m_csPin = spiConfig.csPin;
    9eca:	7428      	strb	r0, [r5, #16]
  sdCsInit(m_csPin);
    9ecc:	f001 fe74 	bl	bbb8 <sdCsInit(unsigned char)>
    sdCsWrite(m_csPin, true);
    9ed0:	2101      	movs	r1, #1
    9ed2:	7c28      	ldrb	r0, [r5, #16]
    9ed4:	f001 fe74 	bl	bbc0 <sdCsWrite(unsigned char, bool)>
  /** Save high speed SPISettings after SD initialization.
   *
   * \param[in] maxSck Maximum SCK frequency.
   */
  void setSckSpeed(uint32_t maxSck) {
    m_spiSettings = SPISettings(maxSck, MSBFIRST, SPI_MODE0);
    9ed8:	496c      	ldr	r1, [pc, #432]	; (a08c <SharedSpiCard::begin(SdSpiConfig)+0x1e8>)
    9eda:	2307      	movs	r3, #7
    9edc:	e9c5 1302 	strd	r1, r3, [r5, #8]
  spiBegin(spiConfig);
    9ee0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    9ee4:	ab05      	add	r3, sp, #20
    9ee6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    m_spiDriver.begin(spiConfig);
    9eea:	4630      	mov	r0, r6
    9eec:	cb0e      	ldmia	r3, {r1, r2, r3}
    9eee:	f001 fefb 	bl	bce8 <SdSpiArduinoDriver::begin(SdSpiConfig)>
  if (!m_spiActive) {
    9ef2:	7cac      	ldrb	r4, [r5, #18]
  m_state = IDLE_STATE;
    9ef4:	f885 8013 	strb.w	r8, [r5, #19]
  if (!m_spiActive) {
    9ef8:	2c00      	cmp	r4, #0
    9efa:	d067      	beq.n	9fcc <SharedSpiCard::begin(SdSpiConfig)+0x128>
    sdCsWrite(m_csPin, true);
    9efc:	240a      	movs	r4, #10
    9efe:	2101      	movs	r1, #1
    9f00:	7c28      	ldrb	r0, [r5, #16]
    9f02:	f001 fe5d 	bl	bbc0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    9f06:	21ff      	movs	r1, #255	; 0xff
    9f08:	4630      	mov	r0, r6
    9f0a:	f001 ff4b 	bl	bda4 <SdSpiArduinoDriver::send(unsigned char)>
  for (uint8_t i = 0; i < 10; i++) {
    9f0e:	1e61      	subs	r1, r4, #1
    9f10:	f011 04ff 	ands.w	r4, r1, #255	; 0xff
    9f14:	d1f7      	bne.n	9f06 <SharedSpiCard::begin(SdSpiConfig)+0x62>
    sdCsWrite(m_csPin, false);
    9f16:	4621      	mov	r1, r4
    9f18:	240a      	movs	r4, #10
    9f1a:	7c28      	ldrb	r0, [r5, #16]
    9f1c:	f001 fe50 	bl	bbc0 <sdCsWrite(unsigned char, bool)>
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
    9f20:	2200      	movs	r2, #0
    9f22:	4628      	mov	r0, r5
    9f24:	4611      	mov	r1, r2
    9f26:	f7ff ff49 	bl	9dbc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    9f2a:	2801      	cmp	r0, #1
    if (i == SD_CMD0_RETRY) {
    9f2c:	f104 33ff 	add.w	r3, r4, #4294967295
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
    9f30:	4604      	mov	r4, r0
    9f32:	d00a      	beq.n	9f4a <SharedSpiCard::begin(SdSpiConfig)+0xa6>
    if (i == SD_CMD0_RETRY) {
    9f34:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
    9f38:	d1f2      	bne.n	9f20 <SharedSpiCard::begin(SdSpiConfig)+0x7c>
    9f3a:	2301      	movs	r3, #1
  if (m_spiActive) {
    9f3c:	7ca8      	ldrb	r0, [r5, #18]
    m_errorCode = code;
    9f3e:	746b      	strb	r3, [r5, #17]
    9f40:	2800      	cmp	r0, #0
    9f42:	d151      	bne.n	9fe8 <SharedSpiCard::begin(SdSpiConfig)+0x144>
}
    9f44:	b008      	add	sp, #32
    9f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!(cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    9f4a:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
    9f4e:	2108      	movs	r1, #8
    9f50:	4628      	mov	r0, r5
    9f52:	f7ff ff33 	bl	9dbc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    9f56:	0742      	lsls	r2, r0, #29
    9f58:	d557      	bpl.n	a00a <SharedSpiCard::begin(SdSpiConfig)+0x166>
    m_type = value;
    9f5a:	756c      	strb	r4, [r5, #21]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    9f5c:	682b      	ldr	r3, [r5, #0]
    9f5e:	f8df a130 	ldr.w	sl, [pc, #304]	; a090 <SharedSpiCard::begin(SdSpiConfig)+0x1ec>
    9f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    9f64:	4553      	cmp	r3, sl
    9f66:	d161      	bne.n	a02c <SharedSpiCard::begin(SdSpiConfig)+0x188>
    return m_type;
    9f68:	7d68      	ldrb	r0, [r5, #21]
    9f6a:	f1a0 0402 	sub.w	r4, r0, #2
    9f6e:	f8df 9124 	ldr.w	r9, [pc, #292]	; a094 <SharedSpiCard::begin(SdSpiConfig)+0x1f0>
    9f72:	fab4 f484 	clz	r4, r4
    9f76:	f8d9 3000 	ldr.w	r3, [r9]
    9f7a:	0964      	lsrs	r4, r4, #5
    m_endTime = ms + millis16();
    9f7c:	f503 68fa 	add.w	r8, r3, #2000	; 0x7d0
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    9f80:	07a4      	lsls	r4, r4, #30
    m_endTime = ms + millis16();
    9f82:	fa1f f888 	uxth.w	r8, r8
  }
    9f86:	e005      	b.n	9f94 <SharedSpiCard::begin(SdSpiConfig)+0xf0>
    9f88:	f8d9 3000 	ldr.w	r3, [r9]
    return (int16_t)(m_endTime - millis16()) < 0;
    9f8c:	eba8 0303 	sub.w	r3, r8, r3
    if (timeout.timedOut()) {
    9f90:	041b      	lsls	r3, r3, #16
    9f92:	d449      	bmi.n	a028 <SharedSpiCard::begin(SdSpiConfig)+0x184>
    cardCommand(CMD55, 0);
    9f94:	2137      	movs	r1, #55	; 0x37
    9f96:	2200      	movs	r2, #0
    9f98:	4628      	mov	r0, r5
    9f9a:	f7ff ff0f 	bl	9dbc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    9f9e:	4622      	mov	r2, r4
    9fa0:	2129      	movs	r1, #41	; 0x29
    9fa2:	4628      	mov	r0, r5
    9fa4:	f7ff ff0a 	bl	9dbc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    9fa8:	2800      	cmp	r0, #0
    9faa:	d1ed      	bne.n	9f88 <SharedSpiCard::begin(SdSpiConfig)+0xe4>
  if (type() == SD_CARD_TYPE_SD2) {
    9fac:	682b      	ldr	r3, [r5, #0]
    9fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    9fb0:	4553      	cmp	r3, sl
    9fb2:	d165      	bne.n	a080 <SharedSpiCard::begin(SdSpiConfig)+0x1dc>
    return m_type;
    9fb4:	7d68      	ldrb	r0, [r5, #21]
    9fb6:	2802      	cmp	r0, #2
    9fb8:	d049      	beq.n	a04e <SharedSpiCard::begin(SdSpiConfig)+0x1aa>
  if (m_spiActive) {
    9fba:	7cab      	ldrb	r3, [r5, #18]
    9fbc:	bbcb      	cbnz	r3, a032 <SharedSpiCard::begin(SdSpiConfig)+0x18e>
    9fbe:	2307      	movs	r3, #7
  return true;
    9fc0:	2001      	movs	r0, #1
    9fc2:	e9c5 7302 	strd	r7, r3, [r5, #8]
}
    9fc6:	b008      	add	sp, #32
    9fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_spiDriver.activate();
    9fcc:	4630      	mov	r0, r6
    9fce:	f001 fe81 	bl	bcd4 <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
    9fd2:	4621      	mov	r1, r4
    9fd4:	7c28      	ldrb	r0, [r5, #16]
    9fd6:	f001 fdf3 	bl	bbc0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    9fda:	21ff      	movs	r1, #255	; 0xff
    9fdc:	4630      	mov	r0, r6
    9fde:	f001 fee1 	bl	bda4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
    9fe2:	2301      	movs	r3, #1
    9fe4:	74ab      	strb	r3, [r5, #18]
}
    9fe6:	e789      	b.n	9efc <SharedSpiCard::begin(SdSpiConfig)+0x58>
    sdCsWrite(m_csPin, true);
    9fe8:	7c28      	ldrb	r0, [r5, #16]
    9fea:	2101      	movs	r1, #1
    9fec:	f001 fde8 	bl	bbc0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    9ff0:	21ff      	movs	r1, #255	; 0xff
    9ff2:	4630      	mov	r0, r6
    9ff4:	f001 fed6 	bl	bda4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    9ff8:	4630      	mov	r0, r6
    9ffa:	f001 fe89 	bl	bd10 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    9ffe:	2300      	movs	r3, #0
  return false;
    a000:	4618      	mov	r0, r3
    m_spiActive = false;
    a002:	74ab      	strb	r3, [r5, #18]
}
    a004:	b008      	add	sp, #32
    a006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_type = value;
    a00a:	2302      	movs	r3, #2
    a00c:	2404      	movs	r4, #4
    a00e:	756b      	strb	r3, [r5, #21]
    return m_spiDriver.receive();
    a010:	4630      	mov	r0, r6
    a012:	f001 fea9 	bl	bd68 <SdSpiArduinoDriver::receive()>
    for (uint8_t i = 0; i < 4; i++) {
    a016:	1e63      	subs	r3, r4, #1
      m_status = spiReceive();
    a018:	7528      	strb	r0, [r5, #20]
    for (uint8_t i = 0; i < 4; i++) {
    a01a:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
    a01e:	d1f7      	bne.n	a010 <SharedSpiCard::begin(SdSpiConfig)+0x16c>
    if (m_status != 0XAA) {
    a020:	28aa      	cmp	r0, #170	; 0xaa
    a022:	d09b      	beq.n	9f5c <SharedSpiCard::begin(SdSpiConfig)+0xb8>
    a024:	2306      	movs	r3, #6
    a026:	e789      	b.n	9f3c <SharedSpiCard::begin(SdSpiConfig)+0x98>
    a028:	2317      	movs	r3, #23
    a02a:	e787      	b.n	9f3c <SharedSpiCard::begin(SdSpiConfig)+0x98>
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    a02c:	4628      	mov	r0, r5
    a02e:	4798      	blx	r3
    a030:	e79b      	b.n	9f6a <SharedSpiCard::begin(SdSpiConfig)+0xc6>
    sdCsWrite(m_csPin, true);
    a032:	2101      	movs	r1, #1
    a034:	7c28      	ldrb	r0, [r5, #16]
    a036:	f001 fdc3 	bl	bbc0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a03a:	21ff      	movs	r1, #255	; 0xff
    a03c:	4630      	mov	r0, r6
    a03e:	f001 feb1 	bl	bda4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a042:	4630      	mov	r0, r6
    a044:	f001 fe64 	bl	bd10 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    a048:	2300      	movs	r3, #0
    a04a:	74ab      	strb	r3, [r5, #18]
}
    a04c:	e7b7      	b.n	9fbe <SharedSpiCard::begin(SdSpiConfig)+0x11a>
    if (cardCommand(CMD58, 0)) {
    a04e:	2200      	movs	r2, #0
    a050:	213a      	movs	r1, #58	; 0x3a
    a052:	4628      	mov	r0, r5
    a054:	f7ff feb2 	bl	9dbc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a058:	b9a8      	cbnz	r0, a086 <SharedSpiCard::begin(SdSpiConfig)+0x1e2>
    return m_spiDriver.receive();
    a05a:	4630      	mov	r0, r6
    a05c:	f001 fe84 	bl	bd68 <SdSpiArduinoDriver::receive()>
    if ((spiReceive() & 0XC0) == 0XC0) {
    a060:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    a064:	28c0      	cmp	r0, #192	; 0xc0
    a066:	d101      	bne.n	a06c <SharedSpiCard::begin(SdSpiConfig)+0x1c8>
    m_type = value;
    a068:	2303      	movs	r3, #3
    a06a:	756b      	strb	r3, [r5, #21]
    return m_spiDriver.receive();
    a06c:	4630      	mov	r0, r6
    a06e:	f001 fe7b 	bl	bd68 <SdSpiArduinoDriver::receive()>
    a072:	4630      	mov	r0, r6
    a074:	f001 fe78 	bl	bd68 <SdSpiArduinoDriver::receive()>
    a078:	4630      	mov	r0, r6
    a07a:	f001 fe75 	bl	bd68 <SdSpiArduinoDriver::receive()>
    for (uint8_t i = 0; i < 3; i++) {
    a07e:	e79c      	b.n	9fba <SharedSpiCard::begin(SdSpiConfig)+0x116>
  if (type() == SD_CARD_TYPE_SD2) {
    a080:	4628      	mov	r0, r5
    a082:	4798      	blx	r3
    a084:	e797      	b.n	9fb6 <SharedSpiCard::begin(SdSpiConfig)+0x112>
    a086:	2312      	movs	r3, #18
    a088:	e758      	b.n	9f3c <SharedSpiCard::begin(SdSpiConfig)+0x98>
    a08a:	bf00      	nop
    a08c:	00061a80 	.word	0x00061a80
    a090:	00009a61 	.word	0x00009a61
    a094:	2005e500 	.word	0x2005e500

0000a098 <SharedSpiCard::readOCR(unsigned long*)>:
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    a098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (cardCommand(CMD58, 0)) {
    a09a:	2200      	movs	r2, #0
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    a09c:	460d      	mov	r5, r1
  if (cardCommand(CMD58, 0)) {
    a09e:	213a      	movs	r1, #58	; 0x3a
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    a0a0:	4606      	mov	r6, r0
  if (cardCommand(CMD58, 0)) {
    a0a2:	f7ff fe8b 	bl	9dbc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a0a6:	b9e0      	cbnz	r0, a0e2 <SharedSpiCard::readOCR(unsigned long*)+0x4a>
    m_spiDriver.send(data);
    a0a8:	1d37      	adds	r7, r6, #4
    a0aa:	1d2c      	adds	r4, r5, #4
    return m_spiDriver.receive();
    a0ac:	4638      	mov	r0, r7
    a0ae:	f001 fe5b 	bl	bd68 <SdSpiArduinoDriver::receive()>
    p[3 - i] = spiReceive();
    a0b2:	f804 0d01 	strb.w	r0, [r4, #-1]!
  for (uint8_t i = 0; i < 4; i++) {
    a0b6:	42a5      	cmp	r5, r4
    a0b8:	d1f8      	bne.n	a0ac <SharedSpiCard::readOCR(unsigned long*)+0x14>
  if (m_spiActive) {
    a0ba:	7cb4      	ldrb	r4, [r6, #18]
    a0bc:	b914      	cbnz	r4, a0c4 <SharedSpiCard::readOCR(unsigned long*)+0x2c>
    a0be:	2401      	movs	r4, #1
}
    a0c0:	4620      	mov	r0, r4
    a0c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sdCsWrite(m_csPin, true);
    a0c4:	7c30      	ldrb	r0, [r6, #16]
    a0c6:	2101      	movs	r1, #1
    a0c8:	f001 fd7a 	bl	bbc0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a0cc:	21ff      	movs	r1, #255	; 0xff
    a0ce:	4638      	mov	r0, r7
    a0d0:	f001 fe68 	bl	bda4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a0d4:	4638      	mov	r0, r7
    a0d6:	f001 fe1b 	bl	bd10 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    a0da:	2300      	movs	r3, #0
}
    a0dc:	4620      	mov	r0, r4
    m_spiActive = false;
    a0de:	74b3      	strb	r3, [r6, #18]
}
    a0e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_errorCode = code;
    a0e2:	2312      	movs	r3, #18
  if (m_spiActive) {
    a0e4:	7cb4      	ldrb	r4, [r6, #18]
    a0e6:	7473      	strb	r3, [r6, #17]
    a0e8:	2c00      	cmp	r4, #0
    a0ea:	d0e9      	beq.n	a0c0 <SharedSpiCard::readOCR(unsigned long*)+0x28>
    m_spiDriver.send(data);
    a0ec:	1d34      	adds	r4, r6, #4
    sdCsWrite(m_csPin, true);
    a0ee:	7c30      	ldrb	r0, [r6, #16]
    a0f0:	2101      	movs	r1, #1
    a0f2:	f001 fd65 	bl	bbc0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a0f6:	21ff      	movs	r1, #255	; 0xff
    a0f8:	4620      	mov	r0, r4
    a0fa:	f001 fe53 	bl	bda4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a0fe:	4620      	mov	r0, r4
    a100:	f001 fe06 	bl	bd10 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    a104:	2300      	movs	r3, #0
  return false;
    a106:	461c      	mov	r4, r3
    m_spiActive = false;
    a108:	74b3      	strb	r3, [r6, #18]
}
    a10a:	4620      	mov	r0, r4
    a10c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a10e:	bf00      	nop

0000a110 <SharedSpiCard::readRegister(unsigned char, void*)>:
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    a110:	b570      	push	{r4, r5, r6, lr}
    a112:	4616      	mov	r6, r2
    a114:	b082      	sub	sp, #8
  if (cardCommand(cmd, 0)) {
    a116:	2200      	movs	r2, #0
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    a118:	4604      	mov	r4, r0
  if (cardCommand(cmd, 0)) {
    a11a:	f7ff fe4f 	bl	9dbc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a11e:	b1b0      	cbz	r0, a14e <SharedSpiCard::readRegister(unsigned char, void*)+0x3e>
    m_errorCode = code;
    a120:	231b      	movs	r3, #27
    a122:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    a124:	7ca0      	ldrb	r0, [r4, #18]
    a126:	b908      	cbnz	r0, a12c <SharedSpiCard::readRegister(unsigned char, void*)+0x1c>
}
    a128:	b002      	add	sp, #8
    a12a:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    a12c:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    a12e:	7c20      	ldrb	r0, [r4, #16]
    a130:	2101      	movs	r1, #1
    a132:	f001 fd45 	bl	bbc0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a136:	21ff      	movs	r1, #255	; 0xff
    a138:	4628      	mov	r0, r5
    a13a:	f001 fe33 	bl	bda4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a13e:	4628      	mov	r0, r5
    a140:	f001 fde6 	bl	bd10 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    a144:	2300      	movs	r3, #0
  return false;
    a146:	4618      	mov	r0, r3
    m_spiActive = false;
    a148:	74a3      	strb	r3, [r4, #18]
}
    a14a:	b002      	add	sp, #8
    a14c:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    a14e:	4605      	mov	r5, r0
    a150:	2210      	movs	r2, #16
    a152:	4631      	mov	r1, r6
    a154:	4620      	mov	r0, r4
    a156:	f7ff fd87 	bl	9c68 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    a15a:	2800      	cmp	r0, #0
    a15c:	d0e2      	beq.n	a124 <SharedSpiCard::readRegister(unsigned char, void*)+0x14>
  if (m_spiActive) {
    a15e:	7ca6      	ldrb	r6, [r4, #18]
    a160:	2e00      	cmp	r6, #0
    a162:	d0e1      	beq.n	a128 <SharedSpiCard::readRegister(unsigned char, void*)+0x18>
    sdCsWrite(m_csPin, true);
    a164:	7c20      	ldrb	r0, [r4, #16]
    a166:	2101      	movs	r1, #1
    a168:	f001 fd2a 	bl	bbc0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a16c:	1d20      	adds	r0, r4, #4
    a16e:	21ff      	movs	r1, #255	; 0xff
    a170:	9001      	str	r0, [sp, #4]
    a172:	f001 fe17 	bl	bda4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a176:	9801      	ldr	r0, [sp, #4]
    a178:	f001 fdca 	bl	bd10 <SdSpiArduinoDriver::deactivate()>
}
    a17c:	4630      	mov	r0, r6
    m_spiActive = false;
    a17e:	74a5      	strb	r5, [r4, #18]
}
    a180:	b002      	add	sp, #8
    a182:	bd70      	pop	{r4, r5, r6, pc}

0000a184 <SharedSpiCard::sectorCount()>:
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    a184:	6803      	ldr	r3, [r0, #0]
    a186:	4a25      	ldr	r2, [pc, #148]	; (a21c <SharedSpiCard::sectorCount()+0x98>)
    a188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    a18a:	4293      	cmp	r3, r2
uint32_t SharedSpiCard::sectorCount() {
    a18c:	b500      	push	{lr}
    a18e:	b085      	sub	sp, #20
    a190:	d10f      	bne.n	a1b2 <SharedSpiCard::sectorCount()+0x2e>
    return readRegister(CMD9, csd);
    a192:	466a      	mov	r2, sp
    a194:	2109      	movs	r1, #9
    a196:	f7ff ffbb 	bl	a110 <SharedSpiCard::readRegister(unsigned char, void*)>
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    a19a:	b138      	cbz	r0, a1ac <SharedSpiCard::sectorCount()+0x28>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    a19c:	f89d 3000 	ldrb.w	r3, [sp]
    a1a0:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    a1a4:	d008      	beq.n	a1b8 <SharedSpiCard::sectorCount()+0x34>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    a1a6:	2b40      	cmp	r3, #64	; 0x40
    a1a8:	d027      	beq.n	a1fa <SharedSpiCard::sectorCount()+0x76>
    a1aa:	2000      	movs	r0, #0
}
    a1ac:	b005      	add	sp, #20
    a1ae:	f85d fb04 	ldr.w	pc, [sp], #4
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    a1b2:	4669      	mov	r1, sp
    a1b4:	4798      	blx	r3
    a1b6:	e7f0      	b.n	a19a <SharedSpiCard::sectorCount()+0x16>
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    a1b8:	f89d 3009 	ldrb.w	r3, [sp, #9]
                          | csd->v1.c_size_mult_low;
    a1bc:	f89d 200a 	ldrb.w	r2, [sp, #10]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    a1c0:	f003 0303 	and.w	r3, r3, #3
    uint16_t c_size = (csd->v1.c_size_high << 10)
    a1c4:	f89d 1006 	ldrb.w	r1, [sp, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    a1c8:	f89d 0007 	ldrb.w	r0, [sp, #7]
                          | csd->v1.c_size_mult_low;
    a1cc:	005b      	lsls	r3, r3, #1
    uint16_t c_size = (csd->v1.c_size_high << 10)
    a1ce:	f001 0103 	and.w	r1, r1, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    a1d2:	0080      	lsls	r0, r0, #2
    a1d4:	f89d c008 	ldrb.w	ip, [sp, #8]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    a1d8:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    uint8_t read_bl_len = csd->v1.read_bl_len;
    a1dc:	f89d 2005 	ldrb.w	r2, [sp, #5]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    a1e0:	ea40 2081 	orr.w	r0, r0, r1, lsl #10
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    a1e4:	f002 020f 	and.w	r2, r2, #15
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    a1e8:	ea40 109c 	orr.w	r0, r0, ip, lsr #6
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    a1ec:	4413      	add	r3, r2
    a1ee:	3001      	adds	r0, #1
    a1f0:	3b07      	subs	r3, #7
    a1f2:	4098      	lsls	r0, r3
}
    a1f4:	b005      	add	sp, #20
    a1f6:	f85d fb04 	ldr.w	pc, [sp], #4
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    a1fa:	f89d 0009 	ldrb.w	r0, [sp, #9]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    a1fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    a202:	3001      	adds	r0, #1
    a204:	f89d 2008 	ldrb.w	r2, [sp, #8]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    a208:	f003 033f 	and.w	r3, r3, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    a20c:	eb00 4003 	add.w	r0, r0, r3, lsl #16
    a210:	eb00 2002 	add.w	r0, r0, r2, lsl #8
    a214:	0280      	lsls	r0, r0, #10
    a216:	b005      	add	sp, #20
    a218:	f85d fb04 	ldr.w	pc, [sp], #4
    a21c:	0000a541 	.word	0x0000a541

0000a220 <SharedSpiCard::readStart(unsigned long)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    a220:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::readStart(uint32_t sector) {
    a222:	460a      	mov	r2, r1
    a224:	b530      	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    a226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::readStart(uint32_t sector) {
    a228:	b083      	sub	sp, #12
    a22a:	4d16      	ldr	r5, [pc, #88]	; (a284 <SharedSpiCard::readStart(unsigned long)+0x64>)
    a22c:	4604      	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    a22e:	42ab      	cmp	r3, r5
    a230:	d124      	bne.n	a27c <SharedSpiCard::readStart(unsigned long)+0x5c>
    return m_type;
    a232:	7d40      	ldrb	r0, [r0, #21]
    a234:	2803      	cmp	r0, #3
  if (cardCommand(CMD18, sector)) {
    a236:	f04f 0112 	mov.w	r1, #18
    a23a:	4620      	mov	r0, r4
    sector <<= 9;
    a23c:	bf18      	it	ne
    a23e:	0252      	lslne	r2, r2, #9
  if (cardCommand(CMD18, sector)) {
    a240:	f7ff fdbc 	bl	9dbc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a244:	b920      	cbnz	r0, a250 <SharedSpiCard::readStart(unsigned long)+0x30>
  m_state = READ_STATE;
    a246:	2301      	movs	r3, #1
  return true;
    a248:	4618      	mov	r0, r3
  m_state = READ_STATE;
    a24a:	74e3      	strb	r3, [r4, #19]
}
    a24c:	b003      	add	sp, #12
    a24e:	bd30      	pop	{r4, r5, pc}
    m_errorCode = code;
    a250:	230c      	movs	r3, #12
  if (m_spiActive) {
    a252:	7ca0      	ldrb	r0, [r4, #18]
    a254:	7463      	strb	r3, [r4, #17]
    a256:	2800      	cmp	r0, #0
    a258:	d0f8      	beq.n	a24c <SharedSpiCard::readStart(unsigned long)+0x2c>
    m_spiDriver.send(data);
    a25a:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    a25c:	7c20      	ldrb	r0, [r4, #16]
    a25e:	2101      	movs	r1, #1
    a260:	f001 fcae 	bl	bbc0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a264:	21ff      	movs	r1, #255	; 0xff
    a266:	4628      	mov	r0, r5
    a268:	f001 fd9c 	bl	bda4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a26c:	4628      	mov	r0, r5
    a26e:	f001 fd4f 	bl	bd10 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    a272:	2300      	movs	r3, #0
}
    a274:	4618      	mov	r0, r3
    m_spiActive = false;
    a276:	74a3      	strb	r3, [r4, #18]
}
    a278:	b003      	add	sp, #12
    a27a:	bd30      	pop	{r4, r5, pc}
    a27c:	9101      	str	r1, [sp, #4]
  if (type() != SD_CARD_TYPE_SDHC) {
    a27e:	4798      	blx	r3
    a280:	9a01      	ldr	r2, [sp, #4]
    a282:	e7d7      	b.n	a234 <SharedSpiCard::readStart(unsigned long)+0x14>
    a284:	00009a61 	.word	0x00009a61

0000a288 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    uint32_t sector, uint8_t* dst, size_t ns) {
    a288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a28a:	4614      	mov	r4, r2
  if (sdState() != READ_STATE || sector != m_curSector) {
    a28c:	7cc2      	ldrb	r2, [r0, #19]
    uint32_t sector, uint8_t* dst, size_t ns) {
    a28e:	4606      	mov	r6, r0
    a290:	460d      	mov	r5, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    a292:	2a01      	cmp	r2, #1
    uint32_t sector, uint8_t* dst, size_t ns) {
    a294:	461f      	mov	r7, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    a296:	d102      	bne.n	a29e <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
    a298:	6983      	ldr	r3, [r0, #24]
    a29a:	428b      	cmp	r3, r1
    a29c:	d005      	beq.n	a2aa <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
    if (!readStart(sector)) {
    a29e:	4629      	mov	r1, r5
    a2a0:	4630      	mov	r0, r6
    a2a2:	f7ff ffbd 	bl	a220 <SharedSpiCard::readStart(unsigned long)>
    a2a6:	b180      	cbz	r0, a2ca <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x42>
    m_curSector = sector;
    a2a8:	61b5      	str	r5, [r6, #24]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    a2aa:	b187      	cbz	r7, a2ce <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
    if (!readStart(sector)) {
    a2ac:	2500      	movs	r5, #0
    a2ae:	e001      	b.n	a2b4 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2c>
  for (size_t i = 0; i < ns; i++, dst += 512) {
    a2b0:	42af      	cmp	r7, r5
    a2b2:	d00c      	beq.n	a2ce <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
  return readData(dst, 512);
    a2b4:	4621      	mov	r1, r4
    a2b6:	f44f 7200 	mov.w	r2, #512	; 0x200
    a2ba:	4630      	mov	r0, r6
  for (size_t i = 0; i < ns; i++, dst += 512) {
    a2bc:	3501      	adds	r5, #1
    a2be:	f504 7400 	add.w	r4, r4, #512	; 0x200
  return readData(dst, 512);
    a2c2:	f7ff fcd1 	bl	9c68 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    if (!readData(dst)) {
    a2c6:	2800      	cmp	r0, #0
    a2c8:	d1f2      	bne.n	a2b0 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>
  return false;
    a2ca:	2000      	movs	r0, #0
}
    a2cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  m_curSector += ns;
    a2ce:	69b3      	ldr	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    a2d0:	7f30      	ldrb	r0, [r6, #28]
  m_curSector += ns;
    a2d2:	443b      	add	r3, r7
    a2d4:	61b3      	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    a2d6:	2800      	cmp	r0, #0
    a2d8:	d1f8      	bne.n	a2cc <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
    a2da:	4630      	mov	r0, r6
}
    a2dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return m_dedicatedSpi ? true : readStop();
    a2e0:	f7ff bd08 	b.w	9cf4 <SharedSpiCard::readStop()>

0000a2e4 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    a2e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a2e8:	469b      	mov	fp, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    a2ea:	7cc3      	ldrb	r3, [r0, #19]
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    a2ec:	4606      	mov	r6, r0
    a2ee:	460c      	mov	r4, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    a2f0:	2b01      	cmp	r3, #1
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    a2f2:	4615      	mov	r5, r2
    a2f4:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    a2f8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
  if (sdState() != READ_STATE || sector != m_curSector) {
    a2fc:	d102      	bne.n	a304 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x20>
    a2fe:	6983      	ldr	r3, [r0, #24]
    a300:	428b      	cmp	r3, r1
    a302:	d005      	beq.n	a310 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x2c>
    if (!readStart(sector)) {
    a304:	4621      	mov	r1, r4
    a306:	4630      	mov	r0, r6
    a308:	f7ff ff8a 	bl	a220 <SharedSpiCard::readStart(unsigned long)>
    a30c:	b1b0      	cbz	r0, a33c <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x58>
    m_curSector = sector;
    a30e:	61b4      	str	r4, [r6, #24]
  for (size_t i = 0; i < ns; i++) {
    a310:	f1bb 0f00 	cmp.w	fp, #0
    a314:	d015      	beq.n	a342 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5e>
    a316:	eb04 0a0b 	add.w	sl, r4, fp
    a31a:	e002      	b.n	a322 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3e>
      callback(sector + i, dst, context);
    a31c:	47c8      	blx	r9
  for (size_t i = 0; i < ns; i++) {
    a31e:	45a2      	cmp	sl, r4
    a320:	d00f      	beq.n	a342 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5e>
  return readData(dst, 512);
    a322:	f44f 7200 	mov.w	r2, #512	; 0x200
    a326:	4629      	mov	r1, r5
    a328:	4630      	mov	r0, r6
    a32a:	f7ff fc9d 	bl	9c68 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    a32e:	4607      	mov	r7, r0
      callback(sector + i, dst, context);
    a330:	4642      	mov	r2, r8
    a332:	4620      	mov	r0, r4
    a334:	4629      	mov	r1, r5
  for (size_t i = 0; i < ns; i++) {
    a336:	3401      	adds	r4, #1
    if (readData(dst)) {
    a338:	2f00      	cmp	r7, #0
    a33a:	d1ef      	bne.n	a31c <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x38>
  return false;
    a33c:	2000      	movs	r0, #0
}
    a33e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_curSector += ns;
    a342:	69b3      	ldr	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    a344:	7f30      	ldrb	r0, [r6, #28]
  m_curSector += ns;
    a346:	445b      	add	r3, fp
    a348:	61b3      	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    a34a:	2800      	cmp	r0, #0
    a34c:	d1f7      	bne.n	a33e <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5a>
    a34e:	4630      	mov	r0, r6
}
    a350:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return m_dedicatedSpi ? true : readStop();
    a354:	f7ff bcce 	b.w	9cf4 <SharedSpiCard::readStop()>

0000a358 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)>:
  return readSectors(sector, dst, 1);
    a358:	6803      	ldr	r3, [r0, #0]
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
    a35a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return readSectors(sector, dst, 1);
    a35e:	695f      	ldr	r7, [r3, #20]
    a360:	4b16      	ldr	r3, [pc, #88]	; (a3bc <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x64>)
    a362:	429f      	cmp	r7, r3
    a364:	d11f      	bne.n	a3a6 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x4e>
  if (sdState() != READ_STATE || sector != m_curSector) {
    a366:	7cc3      	ldrb	r3, [r0, #19]
    a368:	4604      	mov	r4, r0
    a36a:	460d      	mov	r5, r1
    a36c:	4616      	mov	r6, r2
    a36e:	2b01      	cmp	r3, #1
    a370:	d102      	bne.n	a378 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x20>
    a372:	6983      	ldr	r3, [r0, #24]
    a374:	4299      	cmp	r1, r3
    a376:	d005      	beq.n	a384 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x2c>
    if (!readStart(sector)) {
    a378:	4629      	mov	r1, r5
    a37a:	4620      	mov	r0, r4
    a37c:	f7ff ff50 	bl	a220 <SharedSpiCard::readStart(unsigned long)>
    a380:	b170      	cbz	r0, a3a0 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x48>
    m_curSector = sector;
    a382:	61a5      	str	r5, [r4, #24]
  return readData(dst, 512);
    a384:	f44f 7200 	mov.w	r2, #512	; 0x200
    a388:	4631      	mov	r1, r6
    a38a:	4620      	mov	r0, r4
    a38c:	f7ff fc6c 	bl	9c68 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    if (!readData(dst)) {
    a390:	b130      	cbz	r0, a3a0 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x48>
  m_curSector += ns;
    a392:	69a3      	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    a394:	7f20      	ldrb	r0, [r4, #28]
  m_curSector += ns;
    a396:	3301      	adds	r3, #1
    a398:	61a3      	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    a39a:	b148      	cbz	r0, a3b0 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x58>
}
    a39c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
    a3a0:	2000      	movs	r0, #0
}
    a3a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return readSectors(sector, dst, 1);
    a3a6:	46bc      	mov	ip, r7
    a3a8:	2301      	movs	r3, #1
}
    a3aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return readSectors(sector, dst, 1);
    a3ae:	4760      	bx	ip
  return m_dedicatedSpi ? true : readStop();
    a3b0:	4620      	mov	r0, r4
}
    a3b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return m_dedicatedSpi ? true : readStop();
    a3b6:	f7ff bc9d 	b.w	9cf4 <SharedSpiCard::readStop()>
    a3ba:	bf00      	nop
    a3bc:	0000a289 	.word	0x0000a289

0000a3c0 <SharedSpiCard::writeStart(unsigned long)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    a3c0:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::writeStart(uint32_t sector) {
    a3c2:	460a      	mov	r2, r1
    a3c4:	b530      	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    a3c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::writeStart(uint32_t sector) {
    a3c8:	b083      	sub	sp, #12
    a3ca:	4d16      	ldr	r5, [pc, #88]	; (a424 <SharedSpiCard::writeStart(unsigned long)+0x64>)
    a3cc:	4604      	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    a3ce:	42ab      	cmp	r3, r5
    a3d0:	d124      	bne.n	a41c <SharedSpiCard::writeStart(unsigned long)+0x5c>
    return m_type;
    a3d2:	7d40      	ldrb	r0, [r0, #21]
    a3d4:	2803      	cmp	r0, #3
  if (cardCommand(CMD25, sector)) {
    a3d6:	f04f 0119 	mov.w	r1, #25
    a3da:	4620      	mov	r0, r4
    sector <<= 9;
    a3dc:	bf18      	it	ne
    a3de:	0252      	lslne	r2, r2, #9
  if (cardCommand(CMD25, sector)) {
    a3e0:	f7ff fcec 	bl	9dbc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a3e4:	b920      	cbnz	r0, a3f0 <SharedSpiCard::writeStart(unsigned long)+0x30>
  m_state = WRITE_STATE;
    a3e6:	2302      	movs	r3, #2
  return true;
    a3e8:	2001      	movs	r0, #1
  m_state = WRITE_STATE;
    a3ea:	74e3      	strb	r3, [r4, #19]
}
    a3ec:	b003      	add	sp, #12
    a3ee:	bd30      	pop	{r4, r5, pc}
    m_errorCode = code;
    a3f0:	230e      	movs	r3, #14
  if (m_spiActive) {
    a3f2:	7ca0      	ldrb	r0, [r4, #18]
    a3f4:	7463      	strb	r3, [r4, #17]
    a3f6:	2800      	cmp	r0, #0
    a3f8:	d0f8      	beq.n	a3ec <SharedSpiCard::writeStart(unsigned long)+0x2c>
    m_spiDriver.send(data);
    a3fa:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    a3fc:	7c20      	ldrb	r0, [r4, #16]
    a3fe:	2101      	movs	r1, #1
    a400:	f001 fbde 	bl	bbc0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a404:	21ff      	movs	r1, #255	; 0xff
    a406:	4628      	mov	r0, r5
    a408:	f001 fccc 	bl	bda4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a40c:	4628      	mov	r0, r5
    a40e:	f001 fc7f 	bl	bd10 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    a412:	2300      	movs	r3, #0
}
    a414:	4618      	mov	r0, r3
    m_spiActive = false;
    a416:	74a3      	strb	r3, [r4, #18]
}
    a418:	b003      	add	sp, #12
    a41a:	bd30      	pop	{r4, r5, pc}
    a41c:	9101      	str	r1, [sp, #4]
  if (type() != SD_CARD_TYPE_SDHC) {
    a41e:	4798      	blx	r3
    a420:	9a01      	ldr	r2, [sp, #4]
    a422:	e7d7      	b.n	a3d4 <SharedSpiCard::writeStart(unsigned long)+0x14>
    a424:	00009a61 	.word	0x00009a61

0000a428 <SharedSpiCard::erase(unsigned long, unsigned long)>:
  if (!readCSD(&csd)) {
    a428:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    a42a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (!readCSD(&csd)) {
    a42e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    a430:	4617      	mov	r7, r2
    a432:	4a41      	ldr	r2, [pc, #260]	; (a538 <SharedSpiCard::erase(unsigned long, unsigned long)+0x110>)
    a434:	b085      	sub	sp, #20
    a436:	4604      	mov	r4, r0
    a438:	460e      	mov	r6, r1
    a43a:	4293      	cmp	r3, r2
    a43c:	d145      	bne.n	a4ca <SharedSpiCard::erase(unsigned long, unsigned long)+0xa2>
    return readRegister(CMD9, csd);
    a43e:	466a      	mov	r2, sp
    a440:	2109      	movs	r1, #9
    a442:	f7ff fe65 	bl	a110 <SharedSpiCard::readRegister(unsigned char, void*)>
    a446:	4605      	mov	r5, r0
  if (!readCSD(&csd)) {
    a448:	b1b5      	cbz	r5, a478 <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
  if (!csd.v1.erase_blk_en) {
    a44a:	f89d 300a 	ldrb.w	r3, [sp, #10]
    a44e:	065a      	lsls	r2, r3, #25
    a450:	d518      	bpl.n	a484 <SharedSpiCard::erase(unsigned long, unsigned long)+0x5c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    a452:	7d63      	ldrb	r3, [r4, #21]
    a454:	2b03      	cmp	r3, #3
    a456:	d001      	beq.n	a45c <SharedSpiCard::erase(unsigned long, unsigned long)+0x34>
    firstSector <<= 9;
    a458:	0276      	lsls	r6, r6, #9
    lastSector <<= 9;
    a45a:	027f      	lsls	r7, r7, #9
  if (cardCommand(CMD32, firstSector)
    a45c:	4632      	mov	r2, r6
    a45e:	2120      	movs	r1, #32
    a460:	4620      	mov	r0, r4
    a462:	f7ff fcab 	bl	9dbc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD38, 0)) {
    a466:	b928      	cbnz	r0, a474 <SharedSpiCard::erase(unsigned long, unsigned long)+0x4c>
      || cardCommand(CMD33, lastSector)
    a468:	463a      	mov	r2, r7
    a46a:	2121      	movs	r1, #33	; 0x21
    a46c:	4620      	mov	r0, r4
    a46e:	f7ff fca5 	bl	9dbc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a472:	b370      	cbz	r0, a4d2 <SharedSpiCard::erase(unsigned long, unsigned long)+0xaa>
    m_errorCode = code;
    a474:	2326      	movs	r3, #38	; 0x26
    a476:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    a478:	7ca5      	ldrb	r5, [r4, #18]
    a47a:	b99d      	cbnz	r5, a4a4 <SharedSpiCard::erase(unsigned long, unsigned long)+0x7c>
}
    a47c:	4628      	mov	r0, r5
    a47e:	b005      	add	sp, #20
    a480:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    a484:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    a488:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a48c:	005b      	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    a48e:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    a492:	1c7a      	adds	r2, r7, #1
    a494:	4332      	orrs	r2, r6
    a496:	4213      	tst	r3, r2
    a498:	d0db      	beq.n	a452 <SharedSpiCard::erase(unsigned long, unsigned long)+0x2a>
    a49a:	2327      	movs	r3, #39	; 0x27
  if (m_spiActive) {
    a49c:	7ca5      	ldrb	r5, [r4, #18]
    a49e:	7463      	strb	r3, [r4, #17]
    a4a0:	2d00      	cmp	r5, #0
    a4a2:	d0eb      	beq.n	a47c <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    m_spiDriver.send(data);
    a4a4:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    a4a6:	7c20      	ldrb	r0, [r4, #16]
    a4a8:	2101      	movs	r1, #1
    a4aa:	f001 fb89 	bl	bbc0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a4ae:	21ff      	movs	r1, #255	; 0xff
    a4b0:	4628      	mov	r0, r5
    a4b2:	f001 fc77 	bl	bda4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a4b6:	4628      	mov	r0, r5
    a4b8:	f001 fc2a 	bl	bd10 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    a4bc:	2300      	movs	r3, #0
  return false;
    a4be:	461d      	mov	r5, r3
    m_spiActive = false;
    a4c0:	74a3      	strb	r3, [r4, #18]
}
    a4c2:	4628      	mov	r0, r5
    a4c4:	b005      	add	sp, #20
    a4c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (!readCSD(&csd)) {
    a4ca:	4669      	mov	r1, sp
    a4cc:	4798      	blx	r3
    a4ce:	4605      	mov	r5, r0
    a4d0:	e7ba      	b.n	a448 <SharedSpiCard::erase(unsigned long, unsigned long)+0x20>
      || cardCommand(CMD38, 0)) {
    a4d2:	4602      	mov	r2, r0
    a4d4:	2126      	movs	r1, #38	; 0x26
    a4d6:	4620      	mov	r0, r4
    a4d8:	f7ff fc70 	bl	9dbc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a4dc:	2800      	cmp	r0, #0
    a4de:	d1c9      	bne.n	a474 <SharedSpiCard::erase(unsigned long, unsigned long)+0x4c>
    a4e0:	f8df 8058 	ldr.w	r8, [pc, #88]	; a53c <SharedSpiCard::erase(unsigned long, unsigned long)+0x114>
    m_endTime = ms + millis16();
    a4e4:	f242 7710 	movw	r7, #10000	; 0x2710
    return m_spiDriver.receive();
    a4e8:	f104 0904 	add.w	r9, r4, #4
    a4ec:	f8d8 3000 	ldr.w	r3, [r8]
    a4f0:	441f      	add	r7, r3
    a4f2:	b2bf      	uxth	r7, r7
  explicit Timeout(uint16_t ms) {set(ms);}
    a4f4:	e004      	b.n	a500 <SharedSpiCard::erase(unsigned long, unsigned long)+0xd8>
    a4f6:	f8d8 3000 	ldr.w	r3, [r8]
    return (int16_t)(m_endTime - millis16()) < 0;
    a4fa:	1afb      	subs	r3, r7, r3
    if (timeout.timedOut()) {
    a4fc:	041b      	lsls	r3, r3, #16
    a4fe:	d417      	bmi.n	a530 <SharedSpiCard::erase(unsigned long, unsigned long)+0x108>
    a500:	4648      	mov	r0, r9
    a502:	f001 fc31 	bl	bd68 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    a506:	28ff      	cmp	r0, #255	; 0xff
    a508:	4606      	mov	r6, r0
    a50a:	d1f4      	bne.n	a4f6 <SharedSpiCard::erase(unsigned long, unsigned long)+0xce>
  if (m_spiActive) {
    a50c:	7ca3      	ldrb	r3, [r4, #18]
    a50e:	2b00      	cmp	r3, #0
    a510:	d0b4      	beq.n	a47c <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    sdCsWrite(m_csPin, true);
    a512:	2101      	movs	r1, #1
    a514:	7c20      	ldrb	r0, [r4, #16]
  return true;
    a516:	461d      	mov	r5, r3
    a518:	f001 fb52 	bl	bbc0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a51c:	4631      	mov	r1, r6
    a51e:	4648      	mov	r0, r9
    a520:	f001 fc40 	bl	bda4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a524:	4648      	mov	r0, r9
    a526:	f001 fbf3 	bl	bd10 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    a52a:	2300      	movs	r3, #0
    a52c:	74a3      	strb	r3, [r4, #18]
}
    a52e:	e7a5      	b.n	a47c <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    m_errorCode = code;
    a530:	2328      	movs	r3, #40	; 0x28
    a532:	7463      	strb	r3, [r4, #17]
    goto fail;
    a534:	e7a0      	b.n	a478 <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
    a536:	bf00      	nop
    a538:	0000a541 	.word	0x0000a541
    a53c:	2005e500 	.word	0x2005e500

0000a540 <SharedSpiCard::readCSD(csd_t*)>:
  bool readCSD(csd_t* csd) {
    a540:	b570      	push	{r4, r5, r6, lr}
  if (cardCommand(cmd, 0)) {
    a542:	2200      	movs	r2, #0
    a544:	b082      	sub	sp, #8
    a546:	460e      	mov	r6, r1
    a548:	2109      	movs	r1, #9
    a54a:	4604      	mov	r4, r0
    a54c:	f7ff fc36 	bl	9dbc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a550:	b1b0      	cbz	r0, a580 <SharedSpiCard::readCSD(csd_t*)+0x40>
    m_errorCode = code;
    a552:	231b      	movs	r3, #27
    a554:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    a556:	7ca0      	ldrb	r0, [r4, #18]
    a558:	b908      	cbnz	r0, a55e <SharedSpiCard::readCSD(csd_t*)+0x1e>
  }
    a55a:	b002      	add	sp, #8
    a55c:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    a55e:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    a560:	7c20      	ldrb	r0, [r4, #16]
    a562:	2101      	movs	r1, #1
    a564:	f001 fb2c 	bl	bbc0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a568:	21ff      	movs	r1, #255	; 0xff
    a56a:	4628      	mov	r0, r5
    a56c:	f001 fc1a 	bl	bda4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a570:	4628      	mov	r0, r5
    a572:	f001 fbcd 	bl	bd10 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    a576:	2300      	movs	r3, #0
  return false;
    a578:	4618      	mov	r0, r3
    m_spiActive = false;
    a57a:	74a3      	strb	r3, [r4, #18]
  }
    a57c:	b002      	add	sp, #8
    a57e:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    a580:	4605      	mov	r5, r0
    a582:	2210      	movs	r2, #16
    a584:	4631      	mov	r1, r6
    a586:	4620      	mov	r0, r4
    a588:	f7ff fb6e 	bl	9c68 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    a58c:	2800      	cmp	r0, #0
    a58e:	d0e2      	beq.n	a556 <SharedSpiCard::readCSD(csd_t*)+0x16>
  if (m_spiActive) {
    a590:	7ca6      	ldrb	r6, [r4, #18]
    a592:	2e00      	cmp	r6, #0
    a594:	d0e1      	beq.n	a55a <SharedSpiCard::readCSD(csd_t*)+0x1a>
    sdCsWrite(m_csPin, true);
    a596:	7c20      	ldrb	r0, [r4, #16]
    a598:	2101      	movs	r1, #1
    a59a:	f001 fb11 	bl	bbc0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a59e:	1d20      	adds	r0, r4, #4
    a5a0:	21ff      	movs	r1, #255	; 0xff
    a5a2:	9001      	str	r0, [sp, #4]
    a5a4:	f001 fbfe 	bl	bda4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a5a8:	9801      	ldr	r0, [sp, #4]
    a5aa:	f001 fbb1 	bl	bd10 <SdSpiArduinoDriver::deactivate()>
}
    a5ae:	4630      	mov	r0, r6
    m_spiActive = false;
    a5b0:	74a5      	strb	r5, [r4, #18]
  }
    a5b2:	b002      	add	sp, #8
    a5b4:	bd70      	pop	{r4, r5, r6, pc}
    a5b6:	bf00      	nop

0000a5b8 <SharedSpiCard::readCID(CID*)>:
  bool readCID(cid_t* cid) {
    a5b8:	b570      	push	{r4, r5, r6, lr}
  if (cardCommand(cmd, 0)) {
    a5ba:	2200      	movs	r2, #0
    a5bc:	b082      	sub	sp, #8
    a5be:	460e      	mov	r6, r1
    a5c0:	210a      	movs	r1, #10
    a5c2:	4604      	mov	r4, r0
    a5c4:	f7ff fbfa 	bl	9dbc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a5c8:	b1b0      	cbz	r0, a5f8 <SharedSpiCard::readCID(CID*)+0x40>
    m_errorCode = code;
    a5ca:	231b      	movs	r3, #27
    a5cc:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    a5ce:	7ca0      	ldrb	r0, [r4, #18]
    a5d0:	b908      	cbnz	r0, a5d6 <SharedSpiCard::readCID(CID*)+0x1e>
  }
    a5d2:	b002      	add	sp, #8
    a5d4:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    a5d6:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    a5d8:	7c20      	ldrb	r0, [r4, #16]
    a5da:	2101      	movs	r1, #1
    a5dc:	f001 faf0 	bl	bbc0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a5e0:	21ff      	movs	r1, #255	; 0xff
    a5e2:	4628      	mov	r0, r5
    a5e4:	f001 fbde 	bl	bda4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a5e8:	4628      	mov	r0, r5
    a5ea:	f001 fb91 	bl	bd10 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    a5ee:	2300      	movs	r3, #0
  return false;
    a5f0:	4618      	mov	r0, r3
    m_spiActive = false;
    a5f2:	74a3      	strb	r3, [r4, #18]
  }
    a5f4:	b002      	add	sp, #8
    a5f6:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    a5f8:	4605      	mov	r5, r0
    a5fa:	2210      	movs	r2, #16
    a5fc:	4631      	mov	r1, r6
    a5fe:	4620      	mov	r0, r4
    a600:	f7ff fb32 	bl	9c68 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    a604:	2800      	cmp	r0, #0
    a606:	d0e2      	beq.n	a5ce <SharedSpiCard::readCID(CID*)+0x16>
  if (m_spiActive) {
    a608:	7ca6      	ldrb	r6, [r4, #18]
    a60a:	2e00      	cmp	r6, #0
    a60c:	d0e1      	beq.n	a5d2 <SharedSpiCard::readCID(CID*)+0x1a>
    sdCsWrite(m_csPin, true);
    a60e:	7c20      	ldrb	r0, [r4, #16]
    a610:	2101      	movs	r1, #1
    a612:	f001 fad5 	bl	bbc0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a616:	1d20      	adds	r0, r4, #4
    a618:	21ff      	movs	r1, #255	; 0xff
    a61a:	9001      	str	r0, [sp, #4]
    a61c:	f001 fbc2 	bl	bda4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a620:	9801      	ldr	r0, [sp, #4]
    a622:	f001 fb75 	bl	bd10 <SdSpiArduinoDriver::deactivate()>
}
    a626:	4630      	mov	r0, r6
    m_spiActive = false;
    a628:	74a5      	strb	r5, [r4, #18]
  }
    a62a:	b002      	add	sp, #8
    a62c:	bd70      	pop	{r4, r5, r6, pc}
    a62e:	bf00      	nop

0000a630 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>:
bool SharedSpiCard::writeData(uint8_t token, const uint8_t* src) {
    a630:	b570      	push	{r4, r5, r6, lr}
    m_spiDriver.send(data);
    a632:	1d05      	adds	r5, r0, #4
    a634:	4616      	mov	r6, r2
    a636:	4604      	mov	r4, r0
    a638:	4628      	mov	r0, r5
    a63a:	f001 fbb3 	bl	bda4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.send(buf, n);
    a63e:	f44f 7200 	mov.w	r2, #512	; 0x200
    a642:	4631      	mov	r1, r6
    a644:	4628      	mov	r0, r5
    a646:	f001 fbb7 	bl	bdb8 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
    m_spiDriver.send(data);
    a64a:	21ff      	movs	r1, #255	; 0xff
    a64c:	4628      	mov	r0, r5
    a64e:	f001 fba9 	bl	bda4 <SdSpiArduinoDriver::send(unsigned char)>
    a652:	21ff      	movs	r1, #255	; 0xff
    a654:	4628      	mov	r0, r5
    a656:	f001 fba5 	bl	bda4 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    a65a:	4628      	mov	r0, r5
    a65c:	f001 fb84 	bl	bd68 <SdSpiArduinoDriver::receive()>
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    a660:	f000 031f 	and.w	r3, r0, #31
  m_status = spiReceive();
    a664:	7520      	strb	r0, [r4, #20]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    a666:	2b05      	cmp	r3, #5
    a668:	d004      	beq.n	a674 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x44>
    m_errorCode = code;
    a66a:	2320      	movs	r3, #32
  if (m_spiActive) {
    a66c:	7ca0      	ldrb	r0, [r4, #18]
    a66e:	7463      	strb	r3, [r4, #17]
    a670:	b910      	cbnz	r0, a678 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x48>
}
    a672:	bd70      	pop	{r4, r5, r6, pc}
  return true;
    a674:	2001      	movs	r0, #1
}
    a676:	bd70      	pop	{r4, r5, r6, pc}
    sdCsWrite(m_csPin, true);
    a678:	7c20      	ldrb	r0, [r4, #16]
    a67a:	2101      	movs	r1, #1
    a67c:	f001 faa0 	bl	bbc0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a680:	21ff      	movs	r1, #255	; 0xff
    a682:	4628      	mov	r0, r5
    a684:	f001 fb8e 	bl	bda4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a688:	4628      	mov	r0, r5
    a68a:	f001 fb41 	bl	bd10 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    a68e:	2300      	movs	r3, #0
}
    a690:	4618      	mov	r0, r3
    m_spiActive = false;
    a692:	74a3      	strb	r3, [r4, #18]
}
    a694:	bd70      	pop	{r4, r5, r6, pc}
    a696:	bf00      	nop

0000a698 <SharedSpiCard::writeData(unsigned char const*)>:
bool SharedSpiCard::writeData(const uint8_t* src) {
    a698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a69c:	4d17      	ldr	r5, [pc, #92]	; (a6fc <SharedSpiCard::writeData(unsigned char const*)+0x64>)
    a69e:	4606      	mov	r6, r0
    a6a0:	460f      	mov	r7, r1
    return m_spiDriver.receive();
    a6a2:	f100 0804 	add.w	r8, r0, #4
    a6a6:	682c      	ldr	r4, [r5, #0]
    m_endTime = ms + millis16();
    a6a8:	f504 7416 	add.w	r4, r4, #600	; 0x258
    a6ac:	b2a4      	uxth	r4, r4
  explicit Timeout(uint16_t ms) {set(ms);}
    a6ae:	e003      	b.n	a6b8 <SharedSpiCard::writeData(unsigned char const*)+0x20>
    a6b0:	682b      	ldr	r3, [r5, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    a6b2:	1ae3      	subs	r3, r4, r3
    if (timeout.timedOut()) {
    a6b4:	041b      	lsls	r3, r3, #16
    a6b6:	d40c      	bmi.n	a6d2 <SharedSpiCard::writeData(unsigned char const*)+0x3a>
    a6b8:	4640      	mov	r0, r8
    a6ba:	f001 fb55 	bl	bd68 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    a6be:	28ff      	cmp	r0, #255	; 0xff
    a6c0:	d1f6      	bne.n	a6b0 <SharedSpiCard::writeData(unsigned char const*)+0x18>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    a6c2:	463a      	mov	r2, r7
    a6c4:	21fc      	movs	r1, #252	; 0xfc
    a6c6:	4630      	mov	r0, r6
    a6c8:	f7ff ffb2 	bl	a630 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    a6cc:	b118      	cbz	r0, a6d6 <SharedSpiCard::writeData(unsigned char const*)+0x3e>
}
    a6ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_errorCode = code;
    a6d2:	2324      	movs	r3, #36	; 0x24
    a6d4:	7473      	strb	r3, [r6, #17]
  if (m_spiActive) {
    a6d6:	7cb0      	ldrb	r0, [r6, #18]
    a6d8:	2800      	cmp	r0, #0
    a6da:	d0f8      	beq.n	a6ce <SharedSpiCard::writeData(unsigned char const*)+0x36>
    sdCsWrite(m_csPin, true);
    a6dc:	7c30      	ldrb	r0, [r6, #16]
    a6de:	2101      	movs	r1, #1
    a6e0:	f001 fa6e 	bl	bbc0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a6e4:	21ff      	movs	r1, #255	; 0xff
    a6e6:	4640      	mov	r0, r8
    a6e8:	f001 fb5c 	bl	bda4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a6ec:	4640      	mov	r0, r8
    a6ee:	f001 fb0f 	bl	bd10 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    a6f2:	2300      	movs	r3, #0
}
    a6f4:	4618      	mov	r0, r3
    m_spiActive = false;
    a6f6:	74b3      	strb	r3, [r6, #18]
}
    a6f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a6fc:	2005e500 	.word	0x2005e500

0000a700 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    a700:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    a702:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    a704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    a706:	4616      	mov	r6, r2
    a708:	4a22      	ldr	r2, [pc, #136]	; (a794 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x94>)
    a70a:	b082      	sub	sp, #8
    a70c:	4604      	mov	r4, r0
    a70e:	460d      	mov	r5, r1
    a710:	4293      	cmp	r3, r2
    a712:	d13c      	bne.n	a78e <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x8e>
    return m_type;
    a714:	7d40      	ldrb	r0, [r0, #21]
  if (type() != SD_CARD_TYPE_SDHC) {
    a716:	2803      	cmp	r0, #3
  if (cardCommand(CMD24, sector)) {
    a718:	f04f 0118 	mov.w	r1, #24
    a71c:	4620      	mov	r0, r4
    sector <<= 9;
    a71e:	bf18      	it	ne
    a720:	026d      	lslne	r5, r5, #9
  if (cardCommand(CMD24, sector)) {
    a722:	462a      	mov	r2, r5
    a724:	f7ff fb4a 	bl	9dbc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a728:	4605      	mov	r5, r0
    a72a:	b1b0      	cbz	r0, a75a <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x5a>
    m_errorCode = code;
    a72c:	230d      	movs	r3, #13
    a72e:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    a730:	7ca0      	ldrb	r0, [r4, #18]
    a732:	b908      	cbnz	r0, a738 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x38>
}
    a734:	b002      	add	sp, #8
    a736:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    a738:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    a73a:	7c20      	ldrb	r0, [r4, #16]
    a73c:	2101      	movs	r1, #1
    a73e:	f001 fa3f 	bl	bbc0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a742:	21ff      	movs	r1, #255	; 0xff
    a744:	4628      	mov	r0, r5
    a746:	f001 fb2d 	bl	bda4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a74a:	4628      	mov	r0, r5
    a74c:	f001 fae0 	bl	bd10 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    a750:	2300      	movs	r3, #0
  return false;
    a752:	4618      	mov	r0, r3
    m_spiActive = false;
    a754:	74a3      	strb	r3, [r4, #18]
}
    a756:	b002      	add	sp, #8
    a758:	bd70      	pop	{r4, r5, r6, pc}
  if (!writeData(DATA_START_SECTOR, src)) {
    a75a:	4632      	mov	r2, r6
    a75c:	21fe      	movs	r1, #254	; 0xfe
    a75e:	4620      	mov	r0, r4
    a760:	f7ff ff66 	bl	a630 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    a764:	2800      	cmp	r0, #0
    a766:	d0e3      	beq.n	a730 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x30>
  if (m_spiActive) {
    a768:	7ca6      	ldrb	r6, [r4, #18]
    a76a:	2e00      	cmp	r6, #0
    a76c:	d0e2      	beq.n	a734 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x34>
    sdCsWrite(m_csPin, true);
    a76e:	7c20      	ldrb	r0, [r4, #16]
    a770:	2101      	movs	r1, #1
    a772:	f001 fa25 	bl	bbc0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a776:	1d20      	adds	r0, r4, #4
    a778:	21ff      	movs	r1, #255	; 0xff
    a77a:	9001      	str	r0, [sp, #4]
    a77c:	f001 fb12 	bl	bda4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a780:	9801      	ldr	r0, [sp, #4]
    a782:	f001 fac5 	bl	bd10 <SdSpiArduinoDriver::deactivate()>
  return true;
    a786:	4630      	mov	r0, r6
    m_spiActive = false;
    a788:	74a5      	strb	r5, [r4, #18]
}
    a78a:	b002      	add	sp, #8
    a78c:	bd70      	pop	{r4, r5, r6, pc}
  if (type() != SD_CARD_TYPE_SDHC) {
    a78e:	4798      	blx	r3
    a790:	e7c1      	b.n	a716 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x16>
    a792:	bf00      	nop
    a794:	00009a61 	.word	0x00009a61

0000a798 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)>:
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    a798:	b410      	push	{r4}
  if (m_dedicatedSpi) {
    a79a:	7f04      	ldrb	r4, [r0, #28]
    a79c:	b134      	cbz	r4, a7ac <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x14>
    return writeSectors(sector, src, 1);
    a79e:	6804      	ldr	r4, [r0, #0]
    a7a0:	2301      	movs	r3, #1
    a7a2:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    a7a4:	46a4      	mov	ip, r4
}
    a7a6:	f85d 4b04 	ldr.w	r4, [sp], #4
    return writeSectors(sector, src, 1);
    a7aa:	4760      	bx	ip
}
    a7ac:	f85d 4b04 	ldr.w	r4, [sp], #4
  return SharedSpiCard::writeSector(sector, src);
    a7b0:	f7ff bfa6 	b.w	a700 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>

0000a7b4 <DedicatedSpiCard::begin(SdSpiConfig)>:
bool DedicatedSpiCard::begin(SdSpiConfig spiConfig) {
    a7b4:	b510      	push	{r4, lr}
    a7b6:	b084      	sub	sp, #16
    a7b8:	4604      	mov	r4, r0
    a7ba:	f10d 0c04 	add.w	ip, sp, #4
    a7be:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  if (!SharedSpiCard::begin(spiConfig)) {
    a7c2:	e89c 000e 	ldmia.w	ip, {r1, r2, r3}
    a7c6:	f7ff fb6d 	bl	9ea4 <SharedSpiCard::begin(SdSpiConfig)>
    a7ca:	b120      	cbz	r0, a7d6 <DedicatedSpiCard::begin(SdSpiConfig)+0x22>
const uint8_t DEDICATED_SPI = 1;
/**
 * \param[in] opt option field of SdSpiConfig.
 * \return true for dedicated SPI.
 */
inline bool spiOptionDedicated(uint8_t opt) {return opt & DEDICATED_SPI;}
    a7cc:	f89d 3005 	ldrb.w	r3, [sp, #5]
    a7d0:	f003 0301 	and.w	r3, r3, #1
    a7d4:	7723      	strb	r3, [r4, #28]
}
    a7d6:	b004      	add	sp, #16
    a7d8:	bd10      	pop	{r4, pc}
    a7da:	bf00      	nop

0000a7dc <SdCardInterface::hasDedicatedSpi()>:
  virtual bool hasDedicatedSpi() {return false;}
    a7dc:	2000      	movs	r0, #0
    a7de:	4770      	bx	lr

0000a7e0 <SdCardInterface::isDedicatedSpi()>:
  bool virtual isDedicatedSpi() {return false;}
    a7e0:	2000      	movs	r0, #0
    a7e2:	4770      	bx	lr

0000a7e4 <SdCardInterface::setDedicatedSpi(bool)>:
  }
    a7e4:	2000      	movs	r0, #0
    a7e6:	4770      	bx	lr

0000a7e8 <SdioCard::end()>:
   */
  bool begin(SdioConfig sdioConfig);
  /** Disable an SDIO card.
   * not implemented.
   */
  void end() {}
    a7e8:	4770      	bx	lr
    a7ea:	bf00      	nop

0000a7ec <sdIrs()>:
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    a7ec:	4b08      	ldr	r3, [pc, #32]	; (a810 <sdIrs()+0x24>)
    a7ee:	2100      	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    a7f0:	4a08      	ldr	r2, [pc, #32]	; (a814 <sdIrs()+0x28>)
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    a7f2:	4809      	ldr	r0, [pc, #36]	; (a818 <sdIrs()+0x2c>)
static void sdIrs() {
    a7f4:	b410      	push	{r4}
  SDHC_IRQSIGEN = 0;
    a7f6:	6399      	str	r1, [r3, #56]	; 0x38
  m_irqstat = SDHC_IRQSTAT;
    a7f8:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    a7fa:	6014      	str	r4, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    a7fc:	6812      	ldr	r2, [r2, #0]
}
    a7fe:	f85d 4b04 	ldr.w	r4, [sp], #4
  SDHC_IRQSTAT = m_irqstat;
    a802:	631a      	str	r2, [r3, #48]	; 0x30
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
    a804:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    a806:	f022 0281 	bic.w	r2, r2, #129	; 0x81
    a80a:	649a      	str	r2, [r3, #72]	; 0x48
  m_dmaBusy = false;
    a80c:	7001      	strb	r1, [r0, #0]
}
    a80e:	4770      	bx	lr
    a810:	402c0000 	.word	0x402c0000
    a814:	2005e020 	.word	0x2005e020
    a818:	2005e53d 	.word	0x2005e53d

0000a81c <isBusyDat()>:
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
}
//------------------------------------------------------------------------------
static bool isBusyDat() {
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    a81c:	4b03      	ldr	r3, [pc, #12]	; (a82c <isBusyDat()+0x10>)
    a81e:	6a58      	ldr	r0, [r3, #36]	; 0x24
    a820:	f080 7080 	eor.w	r0, r0, #16777216	; 0x1000000
}
    a824:	f3c0 6000 	ubfx	r0, r0, #24, #1
    a828:	4770      	bx	lr
    a82a:	bf00      	nop
    a82c:	402c0000 	.word	0x402c0000

0000a830 <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    a830:	4b01      	ldr	r3, [pc, #4]	; (a838 <isBusyDMA()+0x8>)
    a832:	7818      	ldrb	r0, [r3, #0]
}
    a834:	4770      	bx	lr
    a836:	bf00      	nop
    a838:	2005e53d 	.word	0x2005e53d

0000a83c <setSdclk(unsigned long)>:
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    a83c:	4a2b      	ldr	r2, [pc, #172]	; (a8ec <setSdclk(unsigned long)+0xb0>)
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    a83e:	4b2c      	ldr	r3, [pc, #176]	; (a8f0 <setSdclk(unsigned long)+0xb4>)
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    a840:	6a52      	ldr	r2, [r2, #36]	; 0x24
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    a842:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    a846:	492b      	ldr	r1, [pc, #172]	; (a8f4 <setSdclk(unsigned long)+0xb8>)
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    a848:	f3c2 22c2 	ubfx	r2, r2, #11, #3
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    a84c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    a850:	3201      	adds	r2, #1
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    a852:	b570      	push	{r4, r5, r6, lr}
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    a854:	4c28      	ldr	r4, [pc, #160]	; (a8f8 <setSdclk(unsigned long)+0xbc>)
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    a856:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    a85a:	fba4 4303 	umull	r4, r3, r4, r3
  uint32_t maxSdclk = 1000*kHzMax;
    a85e:	fb05 f000 	mul.w	r0, r5, r0
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    a862:	089b      	lsrs	r3, r3, #2
    a864:	fbb1 fef3 	udiv	lr, r1, r3
    a868:	fbbe fef2 	udiv	lr, lr, r2
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    a86c:	ebb0 1f1e 	cmp.w	r0, lr, lsr #4
    a870:	d235      	bcs.n	a8de <setSdclk(unsigned long)+0xa2>
  uint32_t sdclkfs = 1;
    a872:	2301      	movs	r3, #1
    sdclkfs <<= 1;
    a874:	461e      	mov	r6, r3
    a876:	005b      	lsls	r3, r3, #1
  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    a878:	011a      	lsls	r2, r3, #4
    a87a:	fbbe f2f2 	udiv	r2, lr, r2
    a87e:	4282      	cmp	r2, r0
    a880:	d901      	bls.n	a886 <setSdclk(unsigned long)+0x4a>
    a882:	2bff      	cmp	r3, #255	; 0xff
    a884:	d9f6      	bls.n	a874 <setSdclk(unsigned long)+0x38>
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    a886:	fbbe f2f3 	udiv	r2, lr, r3
  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    a88a:	0236      	lsls	r6, r6, #8
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    a88c:	4290      	cmp	r0, r2
    a88e:	d22a      	bcs.n	a8e6 <setSdclk(unsigned long)+0xaa>
    a890:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    a894:	2201      	movs	r2, #1
    a896:	e000      	b.n	a89a <setSdclk(unsigned long)+0x5e>
    a898:	46a4      	mov	ip, r4
    dvs++;
    a89a:	4615      	mov	r5, r2
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    a89c:	eb03 040c 	add.w	r4, r3, ip
    dvs++;
    a8a0:	3201      	adds	r2, #1
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    a8a2:	fbbe f1fc 	udiv	r1, lr, ip
    a8a6:	4281      	cmp	r1, r0
    a8a8:	d917      	bls.n	a8da <setSdclk(unsigned long)+0x9e>
    a8aa:	2a10      	cmp	r2, #16
    a8ac:	d1f4      	bne.n	a898 <setSdclk(unsigned long)+0x5c>
    a8ae:	25f0      	movs	r5, #240	; 0xf0
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    a8b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    a8b4:	4911      	ldr	r1, [pc, #68]	; (a8fc <setSdclk(unsigned long)+0xc0>)
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    a8b6:	4a12      	ldr	r2, [pc, #72]	; (a900 <setSdclk(unsigned long)+0xc4>)
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    a8b8:	fb03 fc0c 	mul.w	ip, r3, ip
    a8bc:	fbbe f3fc 	udiv	r3, lr, ip
    a8c0:	600b      	str	r3, [r1, #0]
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);
    a8c2:	4b10      	ldr	r3, [pc, #64]	; (a904 <setSdclk(unsigned long)+0xc8>)
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    a8c4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);
    a8c6:	400b      	ands	r3, r1
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    a8c8:	432b      	orrs	r3, r5
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    a8ca:	4333      	orrs	r3, r6
    a8cc:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    a8d0:	62d3      	str	r3, [r2, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    a8d2:	6a53      	ldr	r3, [r2, #36]	; 0x24
    a8d4:	071b      	lsls	r3, r3, #28
    a8d6:	d5fc      	bpl.n	a8d2 <setSdclk(unsigned long)+0x96>

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    a8d8:	bd70      	pop	{r4, r5, r6, pc}
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    a8da:	012d      	lsls	r5, r5, #4
    a8dc:	e7e8      	b.n	a8b0 <setSdclk(unsigned long)+0x74>
  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    a8de:	4672      	mov	r2, lr
    a8e0:	2600      	movs	r6, #0
  uint32_t sdclkfs = 1;
    a8e2:	2301      	movs	r3, #1
    a8e4:	e7d2      	b.n	a88c <setSdclk(unsigned long)+0x50>
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    a8e6:	469c      	mov	ip, r3
    a8e8:	2500      	movs	r5, #0
    a8ea:	e7e1      	b.n	a8b0 <setSdclk(unsigned long)+0x74>
    a8ec:	400fc000 	.word	0x400fc000
    a8f0:	400d8000 	.word	0x400d8000
    a8f4:	5e69ec00 	.word	0x5e69ec00
    a8f8:	aaaaaaab 	.word	0xaaaaaaab
    a8fc:	2005dfec 	.word	0x2005dfec
    a900:	402c0000 	.word	0x402c0000
    a904:	fff0000f 	.word	0xfff0000f

0000a908 <SdioCard::errorCode() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
    a908:	4b01      	ldr	r3, [pc, #4]	; (a910 <SdioCard::errorCode() const+0x8>)
}
    a90a:	7818      	ldrb	r0, [r3, #0]
    a90c:	4770      	bx	lr
    a90e:	bf00      	nop
    a910:	2000c986 	.word	0x2000c986

0000a914 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    a914:	4b01      	ldr	r3, [pc, #4]	; (a91c <SdioCard::errorData() const+0x8>)
    a916:	6818      	ldr	r0, [r3, #0]
}
    a918:	4770      	bx	lr
    a91a:	bf00      	nop
    a91c:	2005e020 	.word	0x2005e020

0000a920 <SdioCard::readCID(CID*)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    a920:	b410      	push	{r4}
  memcpy(cid, &m_cid, 16);
    a922:	4c07      	ldr	r4, [pc, #28]	; (a940 <SdioCard::readCID(CID*)+0x20>)
bool SdioCard::readCID(cid_t* cid) {
    a924:	468c      	mov	ip, r1
  memcpy(cid, &m_cid, 16);
    a926:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    a928:	f8cc 0000 	str.w	r0, [ip]
  return true;
}
    a92c:	2001      	movs	r0, #1
  memcpy(cid, &m_cid, 16);
    a92e:	f8cc 1004 	str.w	r1, [ip, #4]
    a932:	f8cc 2008 	str.w	r2, [ip, #8]
    a936:	f8cc 300c 	str.w	r3, [ip, #12]
}
    a93a:	f85d 4b04 	ldr.w	r4, [sp], #4
    a93e:	4770      	bx	lr
    a940:	2005dff4 	.word	0x2005dff4

0000a944 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    a944:	b410      	push	{r4}
  memcpy(csd, &m_csd, 16);
    a946:	4c07      	ldr	r4, [pc, #28]	; (a964 <SdioCard::readCSD(csd_t*)+0x20>)
bool SdioCard::readCSD(csd_t* csd) {
    a948:	468c      	mov	ip, r1
  memcpy(csd, &m_csd, 16);
    a94a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    a94c:	f8cc 0000 	str.w	r0, [ip]
  return true;
}
    a950:	2001      	movs	r0, #1
  memcpy(csd, &m_csd, 16);
    a952:	f8cc 1004 	str.w	r1, [ip, #4]
    a956:	f8cc 2008 	str.w	r2, [ip, #8]
    a95a:	f8cc 300c 	str.w	r3, [ip, #12]
}
    a95e:	f85d 4b04 	ldr.w	r4, [sp], #4
    a962:	4770      	bx	lr
    a964:	2005e004 	.word	0x2005e004

0000a968 <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    a968:	4b02      	ldr	r3, [pc, #8]	; (a974 <SdioCard::readOCR(unsigned long*)+0xc>)
  return true;
}
    a96a:	2001      	movs	r0, #1
  *ocr = m_ocr;
    a96c:	681b      	ldr	r3, [r3, #0]
    a96e:	600b      	str	r3, [r1, #0]
}
    a970:	4770      	bx	lr
    a972:	bf00      	nop
    a974:	2005e014 	.word	0x2005e014

0000a978 <SdioCard::~SdioCard()>:
class SdioCard : public SdCardInterface {
    a978:	4770      	bx	lr
    a97a:	bf00      	nop

0000a97c <SdioCard::~SdioCard()>:
    a97c:	b510      	push	{r4, lr}
    a97e:	4604      	mov	r4, r0
    a980:	210c      	movs	r1, #12
    a982:	f002 fe81 	bl	d688 <operator delete(void*, unsigned int)>
    a986:	4620      	mov	r0, r4
    a988:	bd10      	pop	{r4, pc}
    a98a:	bf00      	nop

0000a98c <SdioCard::type() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
    a98c:	4b04      	ldr	r3, [pc, #16]	; (a9a0 <SdioCard::type() const+0x14>)
    a98e:	781b      	ldrb	r3, [r3, #0]
    a990:	b123      	cbz	r3, a99c <SdioCard::type() const+0x10>
    a992:	4b04      	ldr	r3, [pc, #16]	; (a9a4 <SdioCard::type() const+0x18>)
    a994:	7818      	ldrb	r0, [r3, #0]
    a996:	3002      	adds	r0, #2
    a998:	b2c0      	uxtb	r0, r0
    a99a:	4770      	bx	lr
    a99c:	2001      	movs	r0, #1
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
    a99e:	4770      	bx	lr
    a9a0:	2005e53a 	.word	0x2005e53a
    a9a4:	2005e53b 	.word	0x2005e53b

0000a9a8 <SdioCard::sectorCount()>:
  if (csd->v1.csd_ver == 0) {
    a9a8:	4b18      	ldr	r3, [pc, #96]	; (aa0c <SdioCard::sectorCount()+0x64>)
    a9aa:	781a      	ldrb	r2, [r3, #0]
    a9ac:	f012 02c0 	ands.w	r2, r2, #192	; 0xc0
    a9b0:	d00f      	beq.n	a9d2 <SdioCard::sectorCount()+0x2a>
  } else if (csd->v2.csd_ver == 1) {
    a9b2:	2a40      	cmp	r2, #64	; 0x40
    a9b4:	d001      	beq.n	a9ba <SdioCard::sectorCount()+0x12>
  } else {
    return 0;
    a9b6:	2000      	movs	r0, #0
}
    a9b8:	4770      	bx	lr
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    a9ba:	7a58      	ldrb	r0, [r3, #9]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    a9bc:	79da      	ldrb	r2, [r3, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    a9be:	7a19      	ldrb	r1, [r3, #8]
    a9c0:	3001      	adds	r0, #1
    return (((uint32_t)csd->v2.c_size_high << 16) +
    a9c2:	f002 033f 	and.w	r3, r2, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    a9c6:	eb00 4003 	add.w	r0, r0, r3, lsl #16
    a9ca:	eb00 2001 	add.w	r0, r0, r1, lsl #8
    a9ce:	0280      	lsls	r0, r0, #10
    a9d0:	4770      	bx	lr
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    a9d2:	7a5a      	ldrb	r2, [r3, #9]
    uint16_t c_size = (csd->v1.c_size_high << 10)
    a9d4:	7999      	ldrb	r1, [r3, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    a9d6:	79d8      	ldrb	r0, [r3, #7]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    a9d8:	f002 0203 	and.w	r2, r2, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    a9dc:	f893 c008 	ldrb.w	ip, [r3, #8]
    uint16_t c_size = (csd->v1.c_size_high << 10)
    a9e0:	f001 0103 	and.w	r1, r1, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    a9e4:	0080      	lsls	r0, r0, #2
                          | csd->v1.c_size_mult_low;
    a9e6:	0052      	lsls	r2, r2, #1
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    a9e8:	ea40 2081 	orr.w	r0, r0, r1, lsl #10
uint32_t SdioCard::sectorCount() {
    a9ec:	b500      	push	{lr}
                          | csd->v1.c_size_mult_low;
    a9ee:	f893 e00a 	ldrb.w	lr, [r3, #10]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    a9f2:	ea40 109c 	orr.w	r0, r0, ip, lsr #6
    uint8_t read_bl_len = csd->v1.read_bl_len;
    a9f6:	795b      	ldrb	r3, [r3, #5]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    a9f8:	ea42 12de 	orr.w	r2, r2, lr, lsr #7
    a9fc:	3001      	adds	r0, #1
    a9fe:	f003 030f 	and.w	r3, r3, #15
    aa02:	4413      	add	r3, r2
    aa04:	3b07      	subs	r3, #7
    aa06:	4098      	lsls	r0, r3
}
    aa08:	f85d fb04 	ldr.w	pc, [sp], #4
    aa0c:	2005e004 	.word	0x2005e004

0000aa10 <initSDHC()>:
  CCM_ANALOG_PFD_528 |= (1 << 7);
    aa10:	4a40      	ldr	r2, [pc, #256]	; (ab14 <initSDHC()+0x104>)
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    aa12:	2005      	movs	r0, #5
    aa14:	4940      	ldr	r1, [pc, #256]	; (ab18 <initSDHC()+0x108>)
static void initSDHC() {
    aa16:	b538      	push	{r3, r4, r5, lr}
  CCM_ANALOG_PFD_528 |= (1 << 7);
    aa18:	f8d2 4100 	ldr.w	r4, [r2, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    aa1c:	4b3f      	ldr	r3, [pc, #252]	; (ab1c <initSDHC()+0x10c>)
  CCM_ANALOG_PFD_528 |= (1 << 7);
    aa1e:	f044 0480 	orr.w	r4, r4, #128	; 0x80
  SDHC_MIX_CTRL |= 0x80000000;
    aa22:	4d3f      	ldr	r5, [pc, #252]	; (ab20 <initSDHC()+0x110>)
  CCM_ANALOG_PFD_528 |= (1 << 7);
    aa24:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    aa28:	f8d2 4100 	ldr.w	r4, [r2, #256]	; 0x100
    aa2c:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
    aa30:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
    aa34:	f8d2 4100 	ldr.w	r4, [r2, #256]	; 0x100
    aa38:	f044 0418 	orr.w	r4, r4, #24
    aa3c:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(1 << 7);
    aa40:	f8d2 4100 	ldr.w	r4, [r2, #256]	; 0x100
    aa44:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    aa48:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    aa4c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    aa50:	f042 020c 	orr.w	r2, r2, #12
    aa54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    aa58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    aa5a:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
    aa5e:	625a      	str	r2, [r3, #36]	; 0x24
  CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    aa60:	69da      	ldr	r2, [r3, #28]
    aa62:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    aa66:	61da      	str	r2, [r3, #28]
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
    aa68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    aa6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    aa6e:	625a      	str	r2, [r3, #36]	; 0x24
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    aa70:	f8c1 01cc 	str.w	r0, [r1, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    aa74:	f8c1 01d0 	str.w	r0, [r1, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    aa78:	f8c1 01bc 	str.w	r0, [r1, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    aa7c:	f8c1 01c0 	str.w	r0, [r1, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    aa80:	f8c1 01c4 	str.w	r0, [r1, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    aa84:	f8c1 01c8 	str.w	r0, [r1, #456]	; 0x1c8
  SDHC_MIX_CTRL |= 0x80000000;
    aa88:	6caa      	ldr	r2, [r5, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    aa8a:	4b26      	ldr	r3, [pc, #152]	; (ab24 <initSDHC()+0x114>)
  SDHC_MIX_CTRL |= 0x80000000;
    aa8c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    aa90:	64aa      	str	r2, [r5, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    aa92:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    aa94:	4313      	orrs	r3, r2
    aa96:	62eb      	str	r3, [r5, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    aa98:	6aec      	ldr	r4, [r5, #44]	; 0x2c
    aa9a:	f014 7480 	ands.w	r4, r4, #16777216	; 0x1000000
    aa9e:	d1fb      	bne.n	aa98 <initSDHC()+0x88>
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    aaa0:	f44f 70c8 	mov.w	r0, #400	; 0x190
    aaa4:	f7ff feca 	bl	a83c <setSdclk(unsigned long)>
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    aaa8:	4b1b      	ldr	r3, [pc, #108]	; (ab18 <initSDHC()+0x108>)
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    aaaa:	f247 02b8 	movw	r2, #28856	; 0x70b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    aaae:	f241 01b8 	movw	r1, #4280	; 0x10b8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    aab2:	f8c3 41cc 	str.w	r4, [r3, #460]	; 0x1cc
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    aab6:	481c      	ldr	r0, [pc, #112]	; (ab28 <initSDHC()+0x118>)
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    aab8:	f8c3 41d0 	str.w	r4, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    aabc:	f8c3 41bc 	str.w	r4, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    aac0:	f8c3 41c0 	str.w	r4, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    aac4:	f8c3 41c4 	str.w	r4, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    aac8:	f8c3 41c8 	str.w	r4, [r3, #456]	; 0x1c8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    aacc:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    aad0:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    aad4:	f8c3 23ac 	str.w	r2, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    aad8:	f8c3 13b0 	str.w	r1, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    aadc:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    aae0:	4912      	ldr	r1, [pc, #72]	; (ab2c <initSDHC()+0x11c>)
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    aae2:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
    aae6:	4b12      	ldr	r3, [pc, #72]	; (ab30 <initSDHC()+0x120>)
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    aae8:	6368      	str	r0, [r5, #52]	; 0x34
    aaea:	f8c1 31f8 	str.w	r3, [r1, #504]	; 0x1f8
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    aaee:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    aaf2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    aaf6:	490f      	ldr	r1, [pc, #60]	; (ab34 <initSDHC()+0x124>)
    aaf8:	2060      	movs	r0, #96	; 0x60
    aafa:	f881 006e 	strb.w	r0, [r1, #110]	; 0x6e
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    aafe:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    ab02:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    ab04:	4a06      	ldr	r2, [pc, #24]	; (ab20 <initSDHC()+0x110>)
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    ab06:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    ab0a:	62eb      	str	r3, [r5, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    ab0c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    ab0e:	011b      	lsls	r3, r3, #4
    ab10:	d4fc      	bmi.n	ab0c <initSDHC()+0xfc>
}
    ab12:	bd38      	pop	{r3, r4, r5, pc}
    ab14:	400d8000 	.word	0x400d8000
    ab18:	401f8000 	.word	0x401f8000
    ab1c:	400fc000 	.word	0x400fc000
    ab20:	402c0000 	.word	0x402c0000
    ab24:	01008000 	.word	0x01008000
    ab28:	117f000b 	.word	0x117f000b
    ab2c:	2000cc00 	.word	0x2000cc00
    ab30:	0000a7ed 	.word	0x0000a7ed
    ab34:	e000e400 	.word	0xe000e400

0000ab38 <waitTransferComplete() [clone .part.0]>:
static bool waitTransferComplete() {
    ab38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t m = micros();
    ab3c:	f002 f9d2 	bl	cee4 <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    ab40:	4e17      	ldr	r6, [pc, #92]	; (aba0 <waitTransferComplete() [clone .part.0]+0x68>)
    ab42:	4d18      	ldr	r5, [pc, #96]	; (aba4 <waitTransferComplete() [clone .part.0]+0x6c>)
  uint32_t m = micros();
    ab44:	4607      	mov	r7, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    ab46:	f8df 8074 	ldr.w	r8, [pc, #116]	; abbc <waitTransferComplete() [clone .part.0]+0x84>
  while (fcn()) {
    ab4a:	e004      	b.n	ab56 <waitTransferComplete() [clone .part.0]+0x1e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    ab4c:	f002 f9ca 	bl	cee4 <micros>
    ab50:	1bc0      	subs	r0, r0, r7
    ab52:	4540      	cmp	r0, r8
    ab54:	d81b      	bhi.n	ab8e <waitTransferComplete() [clone .part.0]+0x56>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    ab56:	6b34      	ldr	r4, [r6, #48]	; 0x30
  while (fcn()) {
    ab58:	402c      	ands	r4, r5
    ab5a:	d0f7      	beq.n	ab4c <waitTransferComplete() [clone .part.0]+0x14>
  m_transferActive = false;
    ab5c:	4a12      	ldr	r2, [pc, #72]	; (aba8 <waitTransferComplete() [clone .part.0]+0x70>)
    ab5e:	2100      	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    ab60:	4b12      	ldr	r3, [pc, #72]	; (abac <waitTransferComplete() [clone .part.0]+0x74>)
  m_transferActive = false;
    ab62:	7011      	strb	r1, [r2, #0]
  m_irqstat = SDHC_IRQSTAT;
    ab64:	6b32      	ldr	r2, [r6, #48]	; 0x30
    ab66:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    ab68:	6819      	ldr	r1, [r3, #0]
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    ab6a:	4a11      	ldr	r2, [pc, #68]	; (abb0 <waitTransferComplete() [clone .part.0]+0x78>)
  SDHC_IRQSTAT = m_irqstat;
    ab6c:	6331      	str	r1, [r6, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    ab6e:	681b      	ldr	r3, [r3, #0]
    ab70:	4213      	tst	r3, r2
    ab72:	d009      	beq.n	ab88 <waitTransferComplete() [clone .part.0]+0x50>
  m_errorCode = code;
    ab74:	490f      	ldr	r1, [pc, #60]	; (abb4 <waitTransferComplete() [clone .part.0]+0x7c>)
    ab76:	241f      	movs	r4, #31
  m_errorLine = line;
    ab78:	4b0f      	ldr	r3, [pc, #60]	; (abb8 <waitTransferComplete() [clone .part.0]+0x80>)
    ab7a:	f240 227a 	movw	r2, #634	; 0x27a
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    ab7e:	2000      	movs	r0, #0
  m_errorCode = code;
    ab80:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    ab82:	601a      	str	r2, [r3, #0]
}
    ab84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
    ab88:	2001      	movs	r0, #1
}
    ab8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_transferActive = false;
    ab8e:	4a06      	ldr	r2, [pc, #24]	; (aba8 <waitTransferComplete() [clone .part.0]+0x70>)
  m_irqstat = SDHC_IRQSTAT;
    ab90:	4b06      	ldr	r3, [pc, #24]	; (abac <waitTransferComplete() [clone .part.0]+0x74>)
  m_transferActive = false;
    ab92:	7014      	strb	r4, [r2, #0]
  m_irqstat = SDHC_IRQSTAT;
    ab94:	6b32      	ldr	r2, [r6, #48]	; 0x30
    ab96:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    ab98:	681b      	ldr	r3, [r3, #0]
    ab9a:	6333      	str	r3, [r6, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    ab9c:	e7ea      	b.n	ab74 <waitTransferComplete() [clone .part.0]+0x3c>
    ab9e:	bf00      	nop
    aba0:	402c0000 	.word	0x402c0000
    aba4:	117f0002 	.word	0x117f0002
    aba8:	2005e53c 	.word	0x2005e53c
    abac:	2005e020 	.word	0x2005e020
    abb0:	117f0000 	.word	0x117f0000
    abb4:	2000c986 	.word	0x2000c986
    abb8:	2005dff0 	.word	0x2005dff0
    abbc:	000f4240 	.word	0x000f4240

0000abc0 <SdioCard::writeData(unsigned char const*)>:
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    abc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (!m_transferActive) {
    abc4:	4c26      	ldr	r4, [pc, #152]	; (ac60 <SdioCard::writeData(unsigned char const*)+0xa0>)
bool SdioCard::writeData(const uint8_t* src) {
    abc6:	460f      	mov	r7, r1
  if (!m_transferActive) {
    abc8:	7823      	ldrb	r3, [r4, #0]
    abca:	2b00      	cmp	r3, #0
    abcc:	d138      	bne.n	ac40 <SdioCard::writeData(unsigned char const*)+0x80>
  DBG_IRQSTAT();
  if (!waitTransferComplete()) {
    return false;
  }
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    abce:	4b25      	ldr	r3, [pc, #148]	; (ac64 <SdioCard::writeData(unsigned char const*)+0xa4>)
    abd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    abd2:	05d2      	lsls	r2, r2, #23
    abd4:	d52b      	bpl.n	ac2e <SdioCard::writeData(unsigned char const*)+0x6e>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    abd6:	4d23      	ldr	r5, [pc, #140]	; (ac64 <SdioCard::writeData(unsigned char const*)+0xa4>)
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    abd8:	f8df 8094 	ldr.w	r8, [pc, #148]	; ac70 <SdioCard::writeData(unsigned char const*)+0xb0>
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    abdc:	6aab      	ldr	r3, [r5, #40]	; 0x28
    abde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    abe2:	62ab      	str	r3, [r5, #40]	; 0x28
  uint32_t m = micros();
    abe4:	f002 f97e 	bl	cee4 <micros>
    abe8:	4606      	mov	r6, r0
  while (fcn()) {
    abea:	e004      	b.n	abf6 <SdioCard::writeData(unsigned char const*)+0x36>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    abec:	f002 f97a 	bl	cee4 <micros>
    abf0:	1b80      	subs	r0, r0, r6
    abf2:	4540      	cmp	r0, r8
    abf4:	d82a      	bhi.n	ac4c <SdioCard::writeData(unsigned char const*)+0x8c>
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    abf6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  while (fcn()) {
    abf8:	f413 6980 	ands.w	r9, r3, #1024	; 0x400
    abfc:	d0f6      	beq.n	abec <SdioCard::writeData(unsigned char const*)+0x2c>
    abfe:	f107 0c3c 	add.w	ip, r7, #60	; 0x3c
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    ac02:	4818      	ldr	r0, [pc, #96]	; (ac64 <SdioCard::writeData(unsigned char const*)+0xa4>)
    ac04:	f507 770f 	add.w	r7, r7, #572	; 0x23c
    ac08:	6a43      	ldr	r3, [r0, #36]	; 0x24
    ac0a:	055b      	lsls	r3, r3, #21
    ac0c:	d5fc      	bpl.n	ac08 <SdioCard::writeData(unsigned char const*)+0x48>
    ac0e:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    ac12:	f853 2f04 	ldr.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    ac16:	459c      	cmp	ip, r3
      SDHC_DATPORT = p32[i];
    ac18:	6202      	str	r2, [r0, #32]
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    ac1a:	d1fa      	bne.n	ac12 <SdioCard::writeData(unsigned char const*)+0x52>
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    ac1c:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
    ac20:	45bc      	cmp	ip, r7
    ac22:	d1f1      	bne.n	ac08 <SdioCard::writeData(unsigned char const*)+0x48>
    }
    p32 += FIFO_WML;
  }
  m_transferActive = true;
    ac24:	2301      	movs	r3, #1
  return true;
    ac26:	4618      	mov	r0, r3
  m_transferActive = true;
    ac28:	7023      	strb	r3, [r4, #0]
}
    ac2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    ac2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    ac30:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    ac34:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    ac36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    ac38:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    ac3c:	629a      	str	r2, [r3, #40]	; 0x28
    ac3e:	e7ca      	b.n	abd6 <SdioCard::writeData(unsigned char const*)+0x16>
    ac40:	f7ff ff7a 	bl	ab38 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    ac44:	2800      	cmp	r0, #0
    ac46:	d1c2      	bne.n	abce <SdioCard::writeData(unsigned char const*)+0xe>
}
    ac48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  m_errorCode = code;
    ac4c:	4906      	ldr	r1, [pc, #24]	; (ac68 <SdioCard::writeData(unsigned char const*)+0xa8>)
    ac4e:	2421      	movs	r4, #33	; 0x21
  m_errorLine = line;
    ac50:	4b06      	ldr	r3, [pc, #24]	; (ac6c <SdioCard::writeData(unsigned char const*)+0xac>)
    ac52:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    ac56:	4648      	mov	r0, r9
  m_errorCode = code;
    ac58:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    ac5a:	601a      	str	r2, [r3, #0]
}
    ac5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ac60:	2005e53c 	.word	0x2005e53c
    ac64:	402c0000 	.word	0x402c0000
    ac68:	2000c986 	.word	0x2000c986
    ac6c:	2005dff0 	.word	0x2005dff0
    ac70:	000f4240 	.word	0x000f4240

0000ac74 <cardCommand(unsigned long, unsigned long)>:
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    ac74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ac78:	4607      	mov	r7, r0
    ac7a:	4688      	mov	r8, r1
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    ac7c:	4c1f      	ldr	r4, [pc, #124]	; (acfc <cardCommand(unsigned long, unsigned long)+0x88>)
  uint32_t m = micros();
    ac7e:	f002 f931 	bl	cee4 <micros>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    ac82:	4e1f      	ldr	r6, [pc, #124]	; (ad00 <cardCommand(unsigned long, unsigned long)+0x8c>)
  uint32_t m = micros();
    ac84:	4605      	mov	r5, r0
  while (fcn()) {
    ac86:	e004      	b.n	ac92 <cardCommand(unsigned long, unsigned long)+0x1e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    ac88:	f002 f92c 	bl	cee4 <micros>
    ac8c:	1b43      	subs	r3, r0, r5
    ac8e:	42b3      	cmp	r3, r6
    ac90:	d824      	bhi.n	acdc <cardCommand(unsigned long, unsigned long)+0x68>
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    ac92:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    ac94:	07d9      	lsls	r1, r3, #31
    ac96:	d4f7      	bmi.n	ac88 <cardCommand(unsigned long, unsigned long)+0x14>
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    ac98:	02bb      	lsls	r3, r7, #10
  SDHC_CMDARG = arg;
    ac9a:	f8c4 8008 	str.w	r8, [r4, #8]
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    ac9e:	d420      	bmi.n	ace2 <cardCommand(unsigned long, unsigned long)+0x6e>
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
    aca0:	f027 03ff 	bic.w	r3, r7, #255	; 0xff
  SDHC_XFERTYP = xfertyp;
    aca4:	4c15      	ldr	r4, [pc, #84]	; (acfc <cardCommand(unsigned long, unsigned long)+0x88>)
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    aca6:	4e17      	ldr	r6, [pc, #92]	; (ad04 <cardCommand(unsigned long, unsigned long)+0x90>)
  SDHC_XFERTYP = xfertyp;
    aca8:	60e3      	str	r3, [r4, #12]
  uint32_t m = micros();
    acaa:	f002 f91b 	bl	cee4 <micros>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    acae:	4f14      	ldr	r7, [pc, #80]	; (ad00 <cardCommand(unsigned long, unsigned long)+0x8c>)
  uint32_t m = micros();
    acb0:	4605      	mov	r5, r0
  while (fcn()) {
    acb2:	e004      	b.n	acbe <cardCommand(unsigned long, unsigned long)+0x4a>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    acb4:	f002 f916 	bl	cee4 <micros>
    acb8:	1b40      	subs	r0, r0, r5
    acba:	42b8      	cmp	r0, r7
    acbc:	d80e      	bhi.n	acdc <cardCommand(unsigned long, unsigned long)+0x68>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    acbe:	6b23      	ldr	r3, [r4, #48]	; 0x30
  while (fcn()) {
    acc0:	4233      	tst	r3, r6
    acc2:	d0f7      	beq.n	acb4 <cardCommand(unsigned long, unsigned long)+0x40>
  m_irqstat = SDHC_IRQSTAT;
    acc4:	6b22      	ldr	r2, [r4, #48]	; 0x30
    acc6:	4b10      	ldr	r3, [pc, #64]	; (ad08 <cardCommand(unsigned long, unsigned long)+0x94>)
    acc8:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    acca:	681a      	ldr	r2, [r3, #0]
    accc:	6322      	str	r2, [r4, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    acce:	681a      	ldr	r2, [r3, #0]
    acd0:	07d2      	lsls	r2, r2, #31
    acd2:	d503      	bpl.n	acdc <cardCommand(unsigned long, unsigned long)+0x68>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    acd4:	681b      	ldr	r3, [r3, #0]
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    acd6:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
    acda:	d00b      	beq.n	acf4 <cardCommand(unsigned long, unsigned long)+0x80>
    acdc:	2000      	movs	r0, #0
}
    acde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    ace2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    ace4:	b2fb      	uxtb	r3, r7
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    ace6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    acea:	64a2      	str	r2, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    acec:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    acee:	4313      	orrs	r3, r2
    acf0:	64a3      	str	r3, [r4, #72]	; 0x48
    acf2:	e7d5      	b.n	aca0 <cardCommand(unsigned long, unsigned long)+0x2c>
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    acf4:	2001      	movs	r0, #1
}
    acf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    acfa:	bf00      	nop
    acfc:	402c0000 	.word	0x402c0000
    ad00:	000f4240 	.word	0x000f4240
    ad04:	000f0001 	.word	0x000f0001
    ad08:	2005e020 	.word	0x2005e020

0000ad0c <readReg16(unsigned long, void*)>:
  if (!cardCommand(xfertyp, m_rca)) {
    ad0c:	4b15      	ldr	r3, [pc, #84]	; (ad64 <readReg16(unsigned long, void*)+0x58>)
static bool readReg16(uint32_t xfertyp, void* data) {
    ad0e:	b530      	push	{r4, r5, lr}
    ad10:	460d      	mov	r5, r1
    ad12:	b085      	sub	sp, #20
  if (!cardCommand(xfertyp, m_rca)) {
    ad14:	6819      	ldr	r1, [r3, #0]
    ad16:	f7ff ffad 	bl	ac74 <cardCommand(unsigned long, unsigned long)>
    ad1a:	b308      	cbz	r0, ad60 <readReg16(unsigned long, void*)+0x54>
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    ad1c:	4b12      	ldr	r3, [pc, #72]	; (ad68 <readReg16(unsigned long, void*)+0x5c>)
    ad1e:	f105 040f 	add.w	r4, r5, #15
    ad22:	691a      	ldr	r2, [r3, #16]
    ad24:	9200      	str	r2, [sp, #0]
    ad26:	6959      	ldr	r1, [r3, #20]
    ad28:	9101      	str	r1, [sp, #4]
    ad2a:	6999      	ldr	r1, [r3, #24]
    ad2c:	9102      	str	r1, [sp, #8]
    ad2e:	69db      	ldr	r3, [r3, #28]
    ad30:	9303      	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    ad32:	2300      	movs	r3, #0
    ad34:	e001      	b.n	ad3a <readReg16(unsigned long, void*)+0x2e>
    d[14 - i] = sr[i/4] >> 8*(i%4);
    ad36:	f85e 2c10 	ldr.w	r2, [lr, #-16]
    ad3a:	f003 0c03 	and.w	ip, r3, #3
  for (int i = 0; i < 15; i++) {
    ad3e:	3301      	adds	r3, #1
    d[14 - i] = sr[i/4] >> 8*(i%4);
    ad40:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    ad44:	f023 0e03 	bic.w	lr, r3, #3
  for (int i = 0; i < 15; i++) {
    ad48:	2b0f      	cmp	r3, #15
    d[14 - i] = sr[i/4] >> 8*(i%4);
    ad4a:	fa22 f20c 	lsr.w	r2, r2, ip
    ad4e:	f10e 0110 	add.w	r1, lr, #16
    ad52:	f804 2d01 	strb.w	r2, [r4, #-1]!
    ad56:	eb0d 0e01 	add.w	lr, sp, r1
  for (int i = 0; i < 15; i++) {
    ad5a:	d1ec      	bne.n	ad36 <readReg16(unsigned long, void*)+0x2a>
  d[15] = 0;
    ad5c:	2300      	movs	r3, #0
    ad5e:	73eb      	strb	r3, [r5, #15]
}
    ad60:	b005      	add	sp, #20
    ad62:	bd30      	pop	{r4, r5, pc}
    ad64:	2005e018 	.word	0x2005e018
    ad68:	402c0000 	.word	0x402c0000

0000ad6c <SdioCard::isBusy()>:
bool SdioCard::isBusy() {
    ad6c:	b510      	push	{r4, lr}
  bool useDma() {return m_options & DMA_SDIO;}
    ad6e:	7a03      	ldrb	r3, [r0, #8]
  if (m_sdioConfig.useDma()) {
    ad70:	07db      	lsls	r3, r3, #31
    ad72:	d505      	bpl.n	ad80 <SdioCard::isBusy()+0x14>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    ad74:	4b15      	ldr	r3, [pc, #84]	; (adcc <SdioCard::isBusy()+0x60>)
    ad76:	681b      	ldr	r3, [r3, #0]
    ad78:	b1b3      	cbz	r3, ada8 <SdioCard::isBusy()+0x3c>
}
    ad7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    ad7e:	4718      	bx	r3
    if (m_transferActive) {
    ad80:	4b13      	ldr	r3, [pc, #76]	; (add0 <SdioCard::isBusy()+0x64>)
    ad82:	781b      	ldrb	r3, [r3, #0]
    ad84:	b93b      	cbnz	r3, ad96 <SdioCard::isBusy()+0x2a>
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
    ad86:	4b13      	ldr	r3, [pc, #76]	; (add4 <SdioCard::isBusy()+0x68>)
    ad88:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    ad8a:	f084 7480 	eor.w	r4, r4, #16777216	; 0x1000000
    ad8e:	f3c4 6400 	ubfx	r4, r4, #24, #1
}
    ad92:	4620      	mov	r0, r4
    ad94:	bd10      	pop	{r4, pc}
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    ad96:	4b0f      	ldr	r3, [pc, #60]	; (add4 <SdioCard::isBusy()+0x68>)
    ad98:	4c0f      	ldr	r4, [pc, #60]	; (add8 <SdioCard::isBusy()+0x6c>)
    ad9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    ad9c:	401c      	ands	r4, r3
      if (isBusyTransferComplete()) {
    ad9e:	fab4 f484 	clz	r4, r4
    ada2:	0964      	lsrs	r4, r4, #5
}
    ada4:	4620      	mov	r0, r4
    ada6:	bd10      	pop	{r4, pc}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    ada8:	4b0c      	ldr	r3, [pc, #48]	; (addc <SdioCard::isBusy()+0x70>)
    adaa:	781c      	ldrb	r4, [r3, #0]
    adac:	2c00      	cmp	r4, #0
    adae:	d0f0      	beq.n	ad92 <SdioCard::isBusy()+0x26>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    adb0:	4b0b      	ldr	r3, [pc, #44]	; (ade0 <SdioCard::isBusy()+0x74>)
    adb2:	480c      	ldr	r0, [pc, #48]	; (ade4 <SdioCard::isBusy()+0x78>)
    adb4:	6819      	ldr	r1, [r3, #0]
    adb6:	f7ff ff5d 	bl	ac74 <cardCommand(unsigned long, unsigned long)>
    adba:	2800      	cmp	r0, #0
    adbc:	d0e9      	beq.n	ad92 <SdioCard::isBusy()+0x26>
    adbe:	4b05      	ldr	r3, [pc, #20]	; (add4 <SdioCard::isBusy()+0x68>)
    adc0:	691c      	ldr	r4, [r3, #16]
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    adc2:	f484 7480 	eor.w	r4, r4, #256	; 0x100
    adc6:	f3c4 2400 	ubfx	r4, r4, #8, #1
    adca:	e7e2      	b.n	ad92 <SdioCard::isBusy()+0x26>
    adcc:	2005e01c 	.word	0x2005e01c
    add0:	2005e53c 	.word	0x2005e53c
    add4:	402c0000 	.word	0x402c0000
    add8:	117f0002 	.word	0x117f0002
    addc:	2005e539 	.word	0x2005e539
    ade0:	2005e018 	.word	0x2005e018
    ade4:	0d1a0000 	.word	0x0d1a0000

0000ade8 <SdioCard::status()>:
uint32_t SdioCard::status() {
    ade8:	b508      	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    adea:	4b04      	ldr	r3, [pc, #16]	; (adfc <SdioCard::status()+0x14>)
    adec:	4804      	ldr	r0, [pc, #16]	; (ae00 <SdioCard::status()+0x18>)
    adee:	6819      	ldr	r1, [r3, #0]
    adf0:	f7ff ff40 	bl	ac74 <cardCommand(unsigned long, unsigned long)>
    adf4:	b108      	cbz	r0, adfa <SdioCard::status()+0x12>
    adf6:	4b03      	ldr	r3, [pc, #12]	; (ae04 <SdioCard::status()+0x1c>)
    adf8:	6918      	ldr	r0, [r3, #16]
}
    adfa:	bd08      	pop	{r3, pc}
    adfc:	2005e018 	.word	0x2005e018
    ae00:	0d1a0000 	.word	0x0d1a0000
    ae04:	402c0000 	.word	0x402c0000

0000ae08 <isBusyCMD13()>:
static bool isBusyCMD13() {
    ae08:	b508      	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    ae0a:	4b07      	ldr	r3, [pc, #28]	; (ae28 <isBusyCMD13()+0x20>)
    ae0c:	4807      	ldr	r0, [pc, #28]	; (ae2c <isBusyCMD13()+0x24>)
    ae0e:	6819      	ldr	r1, [r3, #0]
    ae10:	f7ff ff30 	bl	ac74 <cardCommand(unsigned long, unsigned long)>
    ae14:	b130      	cbz	r0, ae24 <isBusyCMD13()+0x1c>
    ae16:	4b06      	ldr	r3, [pc, #24]	; (ae30 <isBusyCMD13()+0x28>)
    ae18:	6918      	ldr	r0, [r3, #16]
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
    ae1a:	f480 7080 	eor.w	r0, r0, #256	; 0x100
    ae1e:	f3c0 2000 	ubfx	r0, r0, #8, #1
}
    ae22:	bd08      	pop	{r3, pc}
    ae24:	2001      	movs	r0, #1
    ae26:	bd08      	pop	{r3, pc}
    ae28:	2005e018 	.word	0x2005e018
    ae2c:	0d1a0000 	.word	0x0d1a0000
    ae30:	402c0000 	.word	0x402c0000

0000ae34 <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    ae34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_busyFcn = fcn;
    ae38:	4b29      	ldr	r3, [pc, #164]	; (aee0 <SdioCard::writeStart(unsigned long)+0xac>)
bool SdioCard::writeStart(uint32_t sector) {
    ae3a:	4689      	mov	r9, r1
  m_busyFcn = fcn;
    ae3c:	f8df a0c0 	ldr.w	sl, [pc, #192]	; af00 <SdioCard::writeStart(unsigned long)+0xcc>
    ae40:	4e28      	ldr	r6, [pc, #160]	; (aee4 <SdioCard::writeStart(unsigned long)+0xb0>)
    ae42:	f8ca 3000 	str.w	r3, [sl]
  uint32_t m = micros();
    ae46:	f002 f84d 	bl	cee4 <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    ae4a:	4d27      	ldr	r5, [pc, #156]	; (aee8 <SdioCard::writeStart(unsigned long)+0xb4>)
  uint32_t m = micros();
    ae4c:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    ae4e:	f8df 80b4 	ldr.w	r8, [pc, #180]	; af04 <SdioCard::writeStart(unsigned long)+0xd0>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    ae52:	4f26      	ldr	r7, [pc, #152]	; (aeec <SdioCard::writeStart(unsigned long)+0xb8>)
  while (fcn()) {
    ae54:	e006      	b.n	ae64 <SdioCard::writeStart(unsigned long)+0x30>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    ae56:	f002 f845 	bl	cee4 <micros>
    ae5a:	1b00      	subs	r0, r0, r4
    ae5c:	42b8      	cmp	r0, r7
    ae5e:	d829      	bhi.n	aeb4 <SdioCard::writeStart(unsigned long)+0x80>
    yield();
    ae60:	f003 fde0 	bl	ea24 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    ae64:	6831      	ldr	r1, [r6, #0]
    ae66:	4628      	mov	r0, r5
    ae68:	f7ff ff04 	bl	ac74 <cardCommand(unsigned long, unsigned long)>
    ae6c:	2800      	cmp	r0, #0
    ae6e:	d0f2      	beq.n	ae56 <SdioCard::writeStart(unsigned long)+0x22>
    ae70:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    ae74:	05db      	lsls	r3, r3, #23
    ae76:	d5ee      	bpl.n	ae56 <SdioCard::writeStart(unsigned long)+0x22>
  m_busyFcn = 0;
    ae78:	2300      	movs	r3, #0
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;

#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    ae7a:	f44f 7200 	mov.w	r2, #512	; 0x200
  m_busyFcn = 0;
    ae7e:	f8ca 3000 	str.w	r3, [sl]
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    ae82:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    ae86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    ae8a:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    ae8e:	4b18      	ldr	r3, [pc, #96]	; (aef0 <SdioCard::writeStart(unsigned long)+0xbc>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    ae90:	f8c8 2004 	str.w	r2, [r8, #4]
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    ae94:	781b      	ldrb	r3, [r3, #0]
    ae96:	b1cb      	cbz	r3, aecc <SdioCard::writeStart(unsigned long)+0x98>
    ae98:	4649      	mov	r1, r9
    ae9a:	4816      	ldr	r0, [pc, #88]	; (aef4 <SdioCard::writeStart(unsigned long)+0xc0>)
    ae9c:	f7ff feea 	bl	ac74 <cardCommand(unsigned long, unsigned long)>
    aea0:	b930      	cbnz	r0, aeb0 <SdioCard::writeStart(unsigned long)+0x7c>
  m_errorCode = code;
    aea2:	4915      	ldr	r1, [pc, #84]	; (aef8 <SdioCard::writeStart(unsigned long)+0xc4>)
    aea4:	240e      	movs	r4, #14
  m_errorLine = line;
    aea6:	4b15      	ldr	r3, [pc, #84]	; (aefc <SdioCard::writeStart(unsigned long)+0xc8>)
    aea8:	f240 4257 	movw	r2, #1111	; 0x457
  m_errorCode = code;
    aeac:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    aeae:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    aeb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    aeb4:	4a10      	ldr	r2, [pc, #64]	; (aef8 <SdioCard::writeStart(unsigned long)+0xc4>)
    aeb6:	210a      	movs	r1, #10
      m_busyFcn = 0;
    aeb8:	2000      	movs	r0, #0
  m_errorLine = line;
    aeba:	4b10      	ldr	r3, [pc, #64]	; (aefc <SdioCard::writeStart(unsigned long)+0xc8>)
  m_errorCode = code;
    aebc:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    aebe:	f240 424b 	movw	r2, #1099	; 0x44b
      m_busyFcn = 0;
    aec2:	f8ca 0000 	str.w	r0, [sl]
  m_errorLine = line;
    aec6:	601a      	str	r2, [r3, #0]
}
    aec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    aecc:	ea4f 2949 	mov.w	r9, r9, lsl #9
    aed0:	4808      	ldr	r0, [pc, #32]	; (aef4 <SdioCard::writeStart(unsigned long)+0xc0>)
    aed2:	4649      	mov	r1, r9
    aed4:	f7ff fece 	bl	ac74 <cardCommand(unsigned long, unsigned long)>
    aed8:	2800      	cmp	r0, #0
    aeda:	d1e9      	bne.n	aeb0 <SdioCard::writeStart(unsigned long)+0x7c>
    aedc:	e7e1      	b.n	aea2 <SdioCard::writeStart(unsigned long)+0x6e>
    aede:	bf00      	nop
    aee0:	0000ae09 	.word	0x0000ae09
    aee4:	2005e018 	.word	0x2005e018
    aee8:	0d1a0000 	.word	0x0d1a0000
    aeec:	000f4240 	.word	0x000f4240
    aef0:	2005e53b 	.word	0x2005e53b
    aef4:	193a0020 	.word	0x193a0020
    aef8:	2000c986 	.word	0x2000c986
    aefc:	2005dff0 	.word	0x2005dff0
    af00:	2005e01c 	.word	0x2005e01c
    af04:	402c0000 	.word	0x402c0000

0000af08 <SdioCard::readStop()>:
bool SdioCard::readStop() {
    af08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    af0c:	4c25      	ldr	r4, [pc, #148]	; (afa4 <SdioCard::readStop()+0x9c>)
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    af0e:	2100      	movs	r1, #0
    af10:	4825      	ldr	r0, [pc, #148]	; (afa8 <SdioCard::readStop()+0xa0>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    af12:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    af14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    af18:	62a3      	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    af1a:	f7ff feab 	bl	ac74 <cardCommand(unsigned long, unsigned long)>
    af1e:	4605      	mov	r5, r0
    af20:	b948      	cbnz	r0, af36 <SdioCard::readStop()+0x2e>
  m_errorCode = code;
    af22:	4922      	ldr	r1, [pc, #136]	; (afac <SdioCard::readStop()+0xa4>)
    af24:	2009      	movs	r0, #9
  m_errorLine = line;
    af26:	4b22      	ldr	r3, [pc, #136]	; (afb0 <SdioCard::readStop()+0xa8>)
    af28:	f240 223d 	movw	r2, #573	; 0x23d
  m_errorCode = code;
    af2c:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    af2e:	601a      	str	r2, [r3, #0]
}
    af30:	4628      	mov	r0, r5
    af32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_busyFcn = fcn;
    af36:	4b1f      	ldr	r3, [pc, #124]	; (afb4 <SdioCard::readStop()+0xac>)
    af38:	f8df 8080 	ldr.w	r8, [pc, #128]	; afbc <SdioCard::readStop()+0xb4>
    af3c:	f8c8 3000 	str.w	r3, [r8]
  uint32_t m = micros();
    af40:	f001 ffd0 	bl	cee4 <micros>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    af44:	6a63      	ldr	r3, [r4, #36]	; 0x24
  uint32_t m = micros();
    af46:	4606      	mov	r6, r0
  while (fcn()) {
    af48:	01d8      	lsls	r0, r3, #7
    af4a:	d418      	bmi.n	af7e <SdioCard::readStop()+0x76>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    af4c:	4f1a      	ldr	r7, [pc, #104]	; (afb8 <SdioCard::readStop()+0xb0>)
    af4e:	e004      	b.n	af5a <SdioCard::readStop()+0x52>
    yield();
    af50:	f003 fd68 	bl	ea24 <yield>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    af54:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    af56:	01d9      	lsls	r1, r3, #7
    af58:	d411      	bmi.n	af7e <SdioCard::readStop()+0x76>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    af5a:	f001 ffc3 	bl	cee4 <micros>
    af5e:	1b83      	subs	r3, r0, r6
    af60:	42bb      	cmp	r3, r7
    af62:	d9f5      	bls.n	af50 <SdioCard::readStop()+0x48>
  m_errorCode = code;
    af64:	4a11      	ldr	r2, [pc, #68]	; (afac <SdioCard::readStop()+0xa4>)
    af66:	210a      	movs	r1, #10
      m_busyFcn = 0;
    af68:	2500      	movs	r5, #0
  m_errorLine = line;
    af6a:	4b11      	ldr	r3, [pc, #68]	; (afb0 <SdioCard::readStop()+0xa8>)
  m_errorCode = code;
    af6c:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    af6e:	f44f 7210 	mov.w	r2, #576	; 0x240
}
    af72:	4628      	mov	r0, r5
      m_busyFcn = 0;
    af74:	f8c8 5000 	str.w	r5, [r8]
  m_errorLine = line;
    af78:	601a      	str	r2, [r3, #0]
}
    af7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_busyFcn = 0;
    af7e:	2200      	movs	r2, #0
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    af80:	4b08      	ldr	r3, [pc, #32]	; (afa4 <SdioCard::readStop()+0x9c>)
  m_busyFcn = 0;
    af82:	f8c8 2000 	str.w	r2, [r8]
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    af86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    af88:	0792      	lsls	r2, r2, #30
    af8a:	d5d1      	bpl.n	af30 <SdioCard::readStop()+0x28>
    uint32_t irqsststen = SDHC_IRQSTATEN;
    af8c:	6b58      	ldr	r0, [r3, #52]	; 0x34
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    af8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    af90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    af92:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    af96:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
    af9a:	62d9      	str	r1, [r3, #44]	; 0x2c
    SDHC_IRQSTATEN = irqsststen;
    af9c:	6358      	str	r0, [r3, #52]	; 0x34
    SDHC_PROCTL = proctl;
    af9e:	629a      	str	r2, [r3, #40]	; 0x28
    afa0:	e7c6      	b.n	af30 <SdioCard::readStop()+0x28>
    afa2:	bf00      	nop
    afa4:	402c0000 	.word	0x402c0000
    afa8:	0cdb0000 	.word	0x0cdb0000
    afac:	2000c986 	.word	0x2000c986
    afb0:	2005dff0 	.word	0x2005dff0
    afb4:	0000a81d 	.word	0x0000a81d
    afb8:	000f4240 	.word	0x000f4240
    afbc:	2005e01c 	.word	0x2005e01c

0000afc0 <cardCMD6(unsigned long, unsigned char*)>:
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    afc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    afc4:	4682      	mov	sl, r0
    afc6:	4689      	mov	r9, r1
    afc8:	4e36      	ldr	r6, [pc, #216]	; (b0a4 <cardCMD6(unsigned long, unsigned char*)+0xe4>)
  uint32_t m = micros();
    afca:	f001 ff8b 	bl	cee4 <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    afce:	4d36      	ldr	r5, [pc, #216]	; (b0a8 <cardCMD6(unsigned long, unsigned char*)+0xe8>)
  uint32_t m = micros();
    afd0:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    afd2:	f8df 8100 	ldr.w	r8, [pc, #256]	; b0d4 <cardCMD6(unsigned long, unsigned char*)+0x114>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    afd6:	4f35      	ldr	r7, [pc, #212]	; (b0ac <cardCMD6(unsigned long, unsigned char*)+0xec>)
  while (fcn()) {
    afd8:	e004      	b.n	afe4 <cardCMD6(unsigned long, unsigned char*)+0x24>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    afda:	f001 ff83 	bl	cee4 <micros>
    afde:	1b03      	subs	r3, r0, r4
    afe0:	42bb      	cmp	r3, r7
    afe2:	d827      	bhi.n	b034 <cardCMD6(unsigned long, unsigned char*)+0x74>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    afe4:	6831      	ldr	r1, [r6, #0]
    afe6:	4628      	mov	r0, r5
    afe8:	f7ff fe44 	bl	ac74 <cardCommand(unsigned long, unsigned long)>
    afec:	2800      	cmp	r0, #0
    afee:	d0f4      	beq.n	afda <cardCMD6(unsigned long, unsigned char*)+0x1a>
    aff0:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    aff4:	05da      	lsls	r2, r3, #23
    aff6:	d5f0      	bpl.n	afda <cardCMD6(unsigned long, unsigned char*)+0x1a>
  m_dmaBusy = true;
    aff8:	2301      	movs	r3, #1
    affa:	4d2d      	ldr	r5, [pc, #180]	; (b0b0 <cardCMD6(unsigned long, unsigned char*)+0xf0>)
  m_irqstat = 0;
    affc:	4f2d      	ldr	r7, [pc, #180]	; (b0b4 <cardCMD6(unsigned long, unsigned char*)+0xf4>)
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    affe:	4651      	mov	r1, sl
  m_dmaBusy = true;
    b000:	702b      	strb	r3, [r5, #0]
  m_irqstat = 0;
    b002:	2300      	movs	r3, #0
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    b004:	482c      	ldr	r0, [pc, #176]	; (b0b8 <cardCMD6(unsigned long, unsigned char*)+0xf8>)
  m_irqstat = 0;
    b006:	603b      	str	r3, [r7, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    b008:	4b2c      	ldr	r3, [pc, #176]	; (b0bc <cardCMD6(unsigned long, unsigned char*)+0xfc>)
  SDHC_DSADDR  = (uint32_t)status;
    b00a:	f8c8 9000 	str.w	r9, [r8]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    b00e:	f8c8 3004 	str.w	r3, [r8, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    b012:	4b2b      	ldr	r3, [pc, #172]	; (b0c0 <cardCMD6(unsigned long, unsigned char*)+0x100>)
    b014:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    b018:	f7ff fe2c 	bl	ac74 <cardCommand(unsigned long, unsigned long)>
    b01c:	4604      	mov	r4, r0
    b01e:	b9a0      	cbnz	r0, b04a <cardCMD6(unsigned long, unsigned char*)+0x8a>
  m_errorCode = code;
    b020:	4928      	ldr	r1, [pc, #160]	; (b0c4 <cardCMD6(unsigned long, unsigned char*)+0x104>)
    b022:	2004      	movs	r0, #4
  m_errorLine = line;
    b024:	4b28      	ldr	r3, [pc, #160]	; (b0c8 <cardCMD6(unsigned long, unsigned char*)+0x108>)
    b026:	f240 129f 	movw	r2, #415	; 0x19f
  m_errorCode = code;
    b02a:	7008      	strb	r0, [r1, #0]
}
    b02c:	4620      	mov	r0, r4
  m_errorLine = line;
    b02e:	601a      	str	r2, [r3, #0]
}
    b030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    b034:	4923      	ldr	r1, [pc, #140]	; (b0c4 <cardCMD6(unsigned long, unsigned char*)+0x104>)
    b036:	200a      	movs	r0, #10
  m_errorLine = line;
    b038:	4b23      	ldr	r3, [pc, #140]	; (b0c8 <cardCMD6(unsigned long, unsigned char*)+0x108>)
    b03a:	f44f 72cc 	mov.w	r2, #408	; 0x198
    return sdError(SD_CARD_ERROR_CMD13);
    b03e:	2400      	movs	r4, #0
  m_errorCode = code;
    b040:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    b042:	601a      	str	r2, [r3, #0]
}
    b044:	4620      	mov	r0, r4
    b046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_busyFcn = fcn;
    b04a:	4b20      	ldr	r3, [pc, #128]	; (b0cc <cardCMD6(unsigned long, unsigned char*)+0x10c>)
    b04c:	f8df 9088 	ldr.w	r9, [pc, #136]	; b0d8 <cardCMD6(unsigned long, unsigned char*)+0x118>
    b050:	f8c9 3000 	str.w	r3, [r9]
  uint32_t m = micros();
    b054:	f001 ff46 	bl	cee4 <micros>
  return m_dmaBusy;
    b058:	782b      	ldrb	r3, [r5, #0]
  uint32_t m = micros();
    b05a:	4606      	mov	r6, r0
  while (fcn()) {
    b05c:	b1bb      	cbz	r3, b08e <cardCMD6(unsigned long, unsigned char*)+0xce>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b05e:	f8df 804c 	ldr.w	r8, [pc, #76]	; b0ac <cardCMD6(unsigned long, unsigned char*)+0xec>
    b062:	e003      	b.n	b06c <cardCMD6(unsigned long, unsigned char*)+0xac>
    yield();
    b064:	f003 fcde 	bl	ea24 <yield>
  return m_dmaBusy;
    b068:	782b      	ldrb	r3, [r5, #0]
  while (fcn()) {
    b06a:	b183      	cbz	r3, b08e <cardCMD6(unsigned long, unsigned char*)+0xce>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b06c:	f001 ff3a 	bl	cee4 <micros>
    b070:	1b83      	subs	r3, r0, r6
    b072:	4543      	cmp	r3, r8
    b074:	d9f6      	bls.n	b064 <cardCMD6(unsigned long, unsigned char*)+0xa4>
      m_busyFcn = 0;
    b076:	2300      	movs	r3, #0
    b078:	f8c9 3000 	str.w	r3, [r9]
  m_errorCode = code;
    b07c:	4911      	ldr	r1, [pc, #68]	; (b0c4 <cardCMD6(unsigned long, unsigned char*)+0x104>)
    b07e:	2025      	movs	r0, #37	; 0x25
  m_errorLine = line;
    b080:	4b11      	ldr	r3, [pc, #68]	; (b0c8 <cardCMD6(unsigned long, unsigned char*)+0x108>)
    b082:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
    return sdError(SD_CARD_ERROR_DMA);
    b086:	2400      	movs	r4, #0
  m_errorCode = code;
    b088:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    b08a:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_DMA);
    b08c:	e7da      	b.n	b044 <cardCMD6(unsigned long, unsigned char*)+0x84>
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    b08e:	683b      	ldr	r3, [r7, #0]
  m_busyFcn = 0;
    b090:	2200      	movs	r2, #0
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    b092:	079b      	lsls	r3, r3, #30
  m_busyFcn = 0;
    b094:	f8c9 2000 	str.w	r2, [r9]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    b098:	d5f0      	bpl.n	b07c <cardCMD6(unsigned long, unsigned char*)+0xbc>
    b09a:	683a      	ldr	r2, [r7, #0]
    b09c:	4b0c      	ldr	r3, [pc, #48]	; (b0d0 <cardCMD6(unsigned long, unsigned char*)+0x110>)
    b09e:	421a      	tst	r2, r3
    b0a0:	d0d0      	beq.n	b044 <cardCMD6(unsigned long, unsigned char*)+0x84>
    b0a2:	e7eb      	b.n	b07c <cardCMD6(unsigned long, unsigned char*)+0xbc>
    b0a4:	2005e018 	.word	0x2005e018
    b0a8:	0d1a0000 	.word	0x0d1a0000
    b0ac:	000f4240 	.word	0x000f4240
    b0b0:	2005e53d 	.word	0x2005e53d
    b0b4:	2005e020 	.word	0x2005e020
    b0b8:	063a0011 	.word	0x063a0011
    b0bc:	00010040 	.word	0x00010040
    b0c0:	117f0002 	.word	0x117f0002
    b0c4:	2000c986 	.word	0x2000c986
    b0c8:	2005dff0 	.word	0x2005dff0
    b0cc:	0000a831 	.word	0x0000a831
    b0d0:	117f0000 	.word	0x117f0000
    b0d4:	402c0000 	.word	0x402c0000
    b0d8:	2005e01c 	.word	0x2005e01c

0000b0dc <SdioCard::erase(unsigned long, unsigned long)>:
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    b0dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!m_csd.v1.erase_blk_en) {
    b0e0:	4d32      	ldr	r5, [pc, #200]	; (b1ac <SdioCard::erase(unsigned long, unsigned long)+0xd0>)
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    b0e2:	4614      	mov	r4, r2
  if (!m_csd.v1.erase_blk_en) {
    b0e4:	7aab      	ldrb	r3, [r5, #10]
    b0e6:	f013 0040 	ands.w	r0, r3, #64	; 0x40
    b0ea:	d112      	bne.n	b112 <SdioCard::erase(unsigned long, unsigned long)+0x36>
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    b0ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b0f0:	7aea      	ldrb	r2, [r5, #11]
    b0f2:	005b      	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    b0f4:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    b0f8:	1c62      	adds	r2, r4, #1
    b0fa:	430a      	orrs	r2, r1
    b0fc:	4213      	tst	r3, r2
    b0fe:	d008      	beq.n	b112 <SdioCard::erase(unsigned long, unsigned long)+0x36>
  m_errorCode = code;
    b100:	492b      	ldr	r1, [pc, #172]	; (b1b0 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    b102:	2427      	movs	r4, #39	; 0x27
  m_errorLine = line;
    b104:	4b2b      	ldr	r3, [pc, #172]	; (b1b4 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    b106:	f240 3202 	movw	r2, #770	; 0x302
  m_errorCode = code;
    b10a:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    b10c:	601a      	str	r2, [r3, #0]
}
    b10e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_highCapacity) {
    b112:	4b29      	ldr	r3, [pc, #164]	; (b1b8 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
    b114:	781b      	ldrb	r3, [r3, #0]
    b116:	b90b      	cbnz	r3, b11c <SdioCard::erase(unsigned long, unsigned long)+0x40>
    firstSector <<= 9;
    b118:	0249      	lsls	r1, r1, #9
    lastSector <<= 9;
    b11a:	0264      	lsls	r4, r4, #9
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    b11c:	4827      	ldr	r0, [pc, #156]	; (b1bc <SdioCard::erase(unsigned long, unsigned long)+0xe0>)
    b11e:	f7ff fda9 	bl	ac74 <cardCommand(unsigned long, unsigned long)>
    b122:	b940      	cbnz	r0, b136 <SdioCard::erase(unsigned long, unsigned long)+0x5a>
  m_errorCode = code;
    b124:	4922      	ldr	r1, [pc, #136]	; (b1b0 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    b126:	240f      	movs	r4, #15
  m_errorLine = line;
    b128:	4b22      	ldr	r3, [pc, #136]	; (b1b4 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    b12a:	f240 320a 	movw	r2, #778	; 0x30a
  m_errorCode = code;
    b12e:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    b130:	601a      	str	r2, [r3, #0]
}
    b132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    b136:	4621      	mov	r1, r4
    b138:	4821      	ldr	r0, [pc, #132]	; (b1c0 <SdioCard::erase(unsigned long, unsigned long)+0xe4>)
    b13a:	f7ff fd9b 	bl	ac74 <cardCommand(unsigned long, unsigned long)>
    b13e:	b940      	cbnz	r0, b152 <SdioCard::erase(unsigned long, unsigned long)+0x76>
  m_errorCode = code;
    b140:	491b      	ldr	r1, [pc, #108]	; (b1b0 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    b142:	2410      	movs	r4, #16
  m_errorLine = line;
    b144:	4b1b      	ldr	r3, [pc, #108]	; (b1b4 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    b146:	f240 320d 	movw	r2, #781	; 0x30d
  m_errorCode = code;
    b14a:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    b14c:	601a      	str	r2, [r3, #0]
}
    b14e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    b152:	2100      	movs	r1, #0
    b154:	481b      	ldr	r0, [pc, #108]	; (b1c4 <SdioCard::erase(unsigned long, unsigned long)+0xe8>)
    b156:	f7ff fd8d 	bl	ac74 <cardCommand(unsigned long, unsigned long)>
    b15a:	b938      	cbnz	r0, b16c <SdioCard::erase(unsigned long, unsigned long)+0x90>
  m_errorCode = code;
    b15c:	4914      	ldr	r1, [pc, #80]	; (b1b0 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    b15e:	2411      	movs	r4, #17
  m_errorLine = line;
    b160:	4b14      	ldr	r3, [pc, #80]	; (b1b4 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    b162:	f44f 7244 	mov.w	r2, #784	; 0x310
  m_errorCode = code;
    b166:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    b168:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD38);
    b16a:	e7e2      	b.n	b132 <SdioCard::erase(unsigned long, unsigned long)+0x56>
  uint32_t m = micros();
    b16c:	f001 feba 	bl	cee4 <micros>
    b170:	4e15      	ldr	r6, [pc, #84]	; (b1c8 <SdioCard::erase(unsigned long, unsigned long)+0xec>)
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    b172:	4d16      	ldr	r5, [pc, #88]	; (b1cc <SdioCard::erase(unsigned long, unsigned long)+0xf0>)
  uint32_t m = micros();
    b174:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    b176:	f8df 805c 	ldr.w	r8, [pc, #92]	; b1d4 <SdioCard::erase(unsigned long, unsigned long)+0xf8>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b17a:	4f15      	ldr	r7, [pc, #84]	; (b1d0 <SdioCard::erase(unsigned long, unsigned long)+0xf4>)
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    b17c:	6831      	ldr	r1, [r6, #0]
    b17e:	4628      	mov	r0, r5
    b180:	f7ff fd78 	bl	ac74 <cardCommand(unsigned long, unsigned long)>
    b184:	b118      	cbz	r0, b18e <SdioCard::erase(unsigned long, unsigned long)+0xb2>
    b186:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    b18a:	05db      	lsls	r3, r3, #23
    b18c:	d4d1      	bmi.n	b132 <SdioCard::erase(unsigned long, unsigned long)+0x56>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b18e:	f001 fea9 	bl	cee4 <micros>
    b192:	1b00      	subs	r0, r0, r4
    b194:	42b8      	cmp	r0, r7
    b196:	d9f1      	bls.n	b17c <SdioCard::erase(unsigned long, unsigned long)+0xa0>
  m_errorCode = code;
    b198:	4905      	ldr	r1, [pc, #20]	; (b1b0 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    b19a:	2428      	movs	r4, #40	; 0x28
  m_errorLine = line;
    b19c:	4b05      	ldr	r3, [pc, #20]	; (b1b4 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    b19e:	f240 3213 	movw	r2, #787	; 0x313
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    b1a2:	2000      	movs	r0, #0
  m_errorCode = code;
    b1a4:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    b1a6:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    b1a8:	e7c3      	b.n	b132 <SdioCard::erase(unsigned long, unsigned long)+0x56>
    b1aa:	bf00      	nop
    b1ac:	2005e004 	.word	0x2005e004
    b1b0:	2000c986 	.word	0x2000c986
    b1b4:	2005dff0 	.word	0x2005dff0
    b1b8:	2005e53b 	.word	0x2005e53b
    b1bc:	201a0000 	.word	0x201a0000
    b1c0:	211a0000 	.word	0x211a0000
    b1c4:	261b0000 	.word	0x261b0000
    b1c8:	2005e018 	.word	0x2005e018
    b1cc:	0d1a0000 	.word	0x0d1a0000
    b1d0:	000f4240 	.word	0x000f4240
    b1d4:	402c0000 	.word	0x402c0000

0000b1d8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
                       uint32_t sector, uint8_t* buf, size_t n) {
    b1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((3 & (uint32_t)buf) || n == 0) {
    b1dc:	f012 0403 	ands.w	r4, r2, #3
                       uint32_t sector, uint8_t* buf, size_t n) {
    b1e0:	b083      	sub	sp, #12
  if ((3 & (uint32_t)buf) || n == 0) {
    b1e2:	bf18      	it	ne
    b1e4:	2401      	movne	r4, #1
                       uint32_t sector, uint8_t* buf, size_t n) {
    b1e6:	9001      	str	r0, [sp, #4]
  if ((3 & (uint32_t)buf) || n == 0) {
    b1e8:	9300      	str	r3, [sp, #0]
    b1ea:	2b00      	cmp	r3, #0
    b1ec:	bf08      	it	eq
    b1ee:	f044 0401 	orreq.w	r4, r4, #1
    b1f2:	b15c      	cbz	r4, b20c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x34>
  m_errorCode = code;
    b1f4:	4940      	ldr	r1, [pc, #256]	; (b2f8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x120>)
    b1f6:	2025      	movs	r0, #37	; 0x25
  m_errorLine = line;
    b1f8:	4b40      	ldr	r3, [pc, #256]	; (b2fc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x124>)
    b1fa:	f240 12f5 	movw	r2, #501	; 0x1f5
    return sdError(SD_CARD_ERROR_DMA);
    b1fe:	2400      	movs	r4, #0
  m_errorCode = code;
    b200:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    b202:	601a      	str	r2, [r3, #0]
}
    b204:	4620      	mov	r0, r4
    b206:	b003      	add	sp, #12
    b208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_busyFcn = fcn;
    b20c:	4b3c      	ldr	r3, [pc, #240]	; (b300 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x128>)
    b20e:	4615      	mov	r5, r2
    b210:	4a3c      	ldr	r2, [pc, #240]	; (b304 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    b212:	460e      	mov	r6, r1
    b214:	f8df 910c 	ldr.w	r9, [pc, #268]	; b324 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x14c>
    b218:	6013      	str	r3, [r2, #0]
  uint32_t m = micros();
    b21a:	f001 fe63 	bl	cee4 <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    b21e:	f8df 8108 	ldr.w	r8, [pc, #264]	; b328 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x150>
  uint32_t m = micros();
    b222:	4607      	mov	r7, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    b224:	f8df b104 	ldr.w	fp, [pc, #260]	; b32c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x154>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b228:	f8df a0f0 	ldr.w	sl, [pc, #240]	; b31c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x144>
  while (fcn()) {
    b22c:	e006      	b.n	b23c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x64>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b22e:	f001 fe59 	bl	cee4 <micros>
    b232:	1bc0      	subs	r0, r0, r7
    b234:	4550      	cmp	r0, sl
    b236:	d844      	bhi.n	b2c2 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xea>
    yield();
    b238:	f003 fbf4 	bl	ea24 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    b23c:	f8d9 1000 	ldr.w	r1, [r9]
    b240:	4640      	mov	r0, r8
    b242:	f7ff fd17 	bl	ac74 <cardCommand(unsigned long, unsigned long)>
    b246:	2800      	cmp	r0, #0
    b248:	d0f1      	beq.n	b22e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x56>
    b24a:	f8db 3010 	ldr.w	r3, [fp, #16]
  while (fcn()) {
    b24e:	05da      	lsls	r2, r3, #23
    b250:	d5ed      	bpl.n	b22e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x56>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    b252:	9a00      	ldr	r2, [sp, #0]
    b254:	4b2c      	ldr	r3, [pc, #176]	; (b308 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x130>)
  m_busyFcn = 0;
    b256:	492b      	ldr	r1, [pc, #172]	; (b304 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    b258:	ea03 4302 	and.w	r3, r3, r2, lsl #16
  m_busyFcn = 0;
    b25c:	2200      	movs	r2, #0
  m_dmaBusy = true;
    b25e:	4f2b      	ldr	r7, [pc, #172]	; (b30c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x134>)
  m_busyFcn = 0;
    b260:	600a      	str	r2, [r1, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    b262:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  m_dmaBusy = true;
    b266:	2101      	movs	r1, #1
  m_irqstat = 0;
    b268:	f8df 80c4 	ldr.w	r8, [pc, #196]	; b330 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x158>
  m_dmaBusy = true;
    b26c:	7039      	strb	r1, [r7, #0]
  m_irqstat = 0;
    b26e:	f8c8 2000 	str.w	r2, [r8]
  SDHC_DSADDR  = (uint32_t)buf;
    b272:	f8cb 5000 	str.w	r5, [fp]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    b276:	f8cb 3004 	str.w	r3, [fp, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    b27a:	4b25      	ldr	r3, [pc, #148]	; (b310 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x138>)
    b27c:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    b280:	4b24      	ldr	r3, [pc, #144]	; (b314 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x13c>)
    b282:	781b      	ldrb	r3, [r3, #0]
    b284:	b343      	cbz	r3, b2d8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x100>
    b286:	4631      	mov	r1, r6
    b288:	9801      	ldr	r0, [sp, #4]
    b28a:	f7ff fcf3 	bl	ac74 <cardCommand(unsigned long, unsigned long)>
    b28e:	4681      	mov	r9, r0
    b290:	2800      	cmp	r0, #0
    b292:	d0b7      	beq.n	b204 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
  m_busyFcn = fcn;
    b294:	4b20      	ldr	r3, [pc, #128]	; (b318 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x140>)
    b296:	4a1b      	ldr	r2, [pc, #108]	; (b304 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    b298:	6013      	str	r3, [r2, #0]
  uint32_t m = micros();
    b29a:	f001 fe23 	bl	cee4 <micros>
  return m_dmaBusy;
    b29e:	783b      	ldrb	r3, [r7, #0]
  uint32_t m = micros();
    b2a0:	4605      	mov	r5, r0
  while (fcn()) {
    b2a2:	b1db      	cbz	r3, b2dc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x104>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b2a4:	4e1d      	ldr	r6, [pc, #116]	; (b31c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x144>)
    b2a6:	e003      	b.n	b2b0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd8>
    yield();
    b2a8:	f003 fbbc 	bl	ea24 <yield>
  return m_dmaBusy;
    b2ac:	783b      	ldrb	r3, [r7, #0]
  while (fcn()) {
    b2ae:	b1ab      	cbz	r3, b2dc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x104>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b2b0:	f001 fe18 	bl	cee4 <micros>
    b2b4:	1b40      	subs	r0, r0, r5
    b2b6:	42b0      	cmp	r0, r6
    b2b8:	d9f6      	bls.n	b2a8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd0>
      m_busyFcn = 0;
    b2ba:	2300      	movs	r3, #0
    b2bc:	4a11      	ldr	r2, [pc, #68]	; (b304 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    b2be:	6013      	str	r3, [r2, #0]
      return true;
    b2c0:	e7a0      	b.n	b204 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
  m_errorCode = code;
    b2c2:	4b0d      	ldr	r3, [pc, #52]	; (b2f8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x120>)
    b2c4:	220a      	movs	r2, #10
      m_busyFcn = 0;
    b2c6:	2100      	movs	r1, #0
    b2c8:	480e      	ldr	r0, [pc, #56]	; (b304 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
  m_errorCode = code;
    b2ca:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b2cc:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
    b2d0:	4b0a      	ldr	r3, [pc, #40]	; (b2fc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x124>)
      m_busyFcn = 0;
    b2d2:	6001      	str	r1, [r0, #0]
  m_errorLine = line;
    b2d4:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    b2d6:	e795      	b.n	b204 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    b2d8:	0276      	lsls	r6, r6, #9
    b2da:	e7d4      	b.n	b286 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xae>
  m_busyFcn = 0;
    b2dc:	2300      	movs	r3, #0
    b2de:	4a09      	ldr	r2, [pc, #36]	; (b304 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    b2e0:	6013      	str	r3, [r2, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    b2e2:	f8d8 3000 	ldr.w	r3, [r8]
    b2e6:	079b      	lsls	r3, r3, #30
    b2e8:	d58c      	bpl.n	b204 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
    b2ea:	f8d8 2000 	ldr.w	r2, [r8]
    b2ee:	4b0c      	ldr	r3, [pc, #48]	; (b320 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x148>)
    b2f0:	421a      	tst	r2, r3
    b2f2:	bf08      	it	eq
    b2f4:	464c      	moveq	r4, r9
    b2f6:	e785      	b.n	b204 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
    b2f8:	2000c986 	.word	0x2000c986
    b2fc:	2005dff0 	.word	0x2005dff0
    b300:	0000ae09 	.word	0x0000ae09
    b304:	2005e01c 	.word	0x2005e01c
    b308:	1fff0000 	.word	0x1fff0000
    b30c:	2005e53d 	.word	0x2005e53d
    b310:	117f0002 	.word	0x117f0002
    b314:	2005e53b 	.word	0x2005e53b
    b318:	0000a831 	.word	0x0000a831
    b31c:	000f4240 	.word	0x000f4240
    b320:	117f0000 	.word	0x117f0000
    b324:	2005e018 	.word	0x2005e018
    b328:	0d1a0000 	.word	0x0d1a0000
    b32c:	402c0000 	.word	0x402c0000
    b330:	2005e020 	.word	0x2005e020

0000b334 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    b334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b336:	4606      	mov	r6, r0
    b338:	7a00      	ldrb	r0, [r0, #8]
    b33a:	460c      	mov	r4, r1
    b33c:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    b33e:	07c0      	lsls	r0, r0, #31
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    b340:	461f      	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    b342:	d413      	bmi.n	b36c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    for (size_t i = 0; i < n; i++) {
    b344:	b183      	cbz	r3, b368 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    b346:	440f      	add	r7, r1
    b348:	e001      	b.n	b34e <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    b34a:	42bc      	cmp	r4, r7
    b34c:	d00c      	beq.n	b368 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i*512UL)) {
    b34e:	6833      	ldr	r3, [r6, #0]
    b350:	462a      	mov	r2, r5
    b352:	4621      	mov	r1, r4
    b354:	4630      	mov	r0, r6
    b356:	691b      	ldr	r3, [r3, #16]
    for (size_t i = 0; i < n; i++) {
    b358:	3401      	adds	r4, #1
    b35a:	f505 7500 	add.w	r5, r5, #512	; 0x200
      if (!readSector(sector + i, dst + i*512UL)) {
    b35e:	4798      	blx	r3
    b360:	2800      	cmp	r0, #0
    b362:	d1f2      	bne.n	b34a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
          return false;  // readSector will set errorCode.
    b364:	2000      	movs	r0, #0
}
    b366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    b368:	2001      	movs	r0, #1
}
    b36a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((uint32_t)dst & 3) {
    b36c:	0790      	lsls	r0, r2, #30
    b36e:	d012      	beq.n	b396 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    b370:	2b00      	cmp	r3, #0
    b372:	d0f9      	beq.n	b368 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    b374:	440f      	add	r7, r1
    b376:	e001      	b.n	b37c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    b378:	42bc      	cmp	r4, r7
    b37a:	d0f5      	beq.n	b368 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
    b37c:	6833      	ldr	r3, [r6, #0]
    b37e:	462a      	mov	r2, r5
    b380:	4621      	mov	r1, r4
    b382:	4630      	mov	r0, r6
    b384:	691b      	ldr	r3, [r3, #16]
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    b386:	3401      	adds	r4, #1
    b388:	f505 7500 	add.w	r5, r5, #512	; 0x200
        if (!readSector(sector, dst)) {
    b38c:	4798      	blx	r3
    b38e:	2800      	cmp	r0, #0
    b390:	d1f2      	bne.n	b378 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
    b392:	2000      	movs	r0, #0
    b394:	e7e7      	b.n	b366 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x32>
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    b396:	4806      	ldr	r0, [pc, #24]	; (b3b0 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
    b398:	f7ff ff1e 	bl	b1d8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    b39c:	2800      	cmp	r0, #0
    b39e:	d1e3      	bne.n	b368 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
  m_errorCode = code;
    b3a0:	4904      	ldr	r1, [pc, #16]	; (b3b4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
    b3a2:	240c      	movs	r4, #12
  m_errorLine = line;
    b3a4:	4b04      	ldr	r3, [pc, #16]	; (b3b8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
    b3a6:	f240 32a1 	movw	r2, #929	; 0x3a1
  m_errorCode = code;
    b3aa:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    b3ac:	601a      	str	r2, [r3, #0]
}
    b3ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b3b0:	123a0037 	.word	0x123a0037
    b3b4:	2000c986 	.word	0x2000c986
    b3b8:	2005dff0 	.word	0x2005dff0

0000b3bc <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    b3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b3be:	4606      	mov	r6, r0
    b3c0:	7a00      	ldrb	r0, [r0, #8]
    b3c2:	460c      	mov	r4, r1
    b3c4:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    b3c6:	07c0      	lsls	r0, r0, #31
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    b3c8:	461f      	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    b3ca:	d413      	bmi.n	b3f4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    for (size_t i = 0; i < n; i++) {
    b3cc:	b183      	cbz	r3, b3f0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    b3ce:	440f      	add	r7, r1
    b3d0:	e001      	b.n	b3d6 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
    b3d2:	42bc      	cmp	r4, r7
    b3d4:	d00c      	beq.n	b3f0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
      if (!writeSector(sector + i, src + i*512UL)) {
    b3d6:	6833      	ldr	r3, [r6, #0]
    b3d8:	462a      	mov	r2, r5
    b3da:	4621      	mov	r1, r4
    b3dc:	4630      	mov	r0, r6
    b3de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    for (size_t i = 0; i < n; i++) {
    b3e0:	3401      	adds	r4, #1
    b3e2:	f505 7500 	add.w	r5, r5, #512	; 0x200
      if (!writeSector(sector + i, src + i*512UL)) {
    b3e6:	4798      	blx	r3
    b3e8:	2800      	cmp	r0, #0
    b3ea:	d1f2      	bne.n	b3d2 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
          return false;  // writeSector will set errorCode.
    b3ec:	2000      	movs	r0, #0
}
    b3ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    b3f0:	2001      	movs	r0, #1
}
    b3f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (3 & (uint32_t)ptr) {
    b3f4:	0790      	lsls	r0, r2, #30
    b3f6:	d012      	beq.n	b41e <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    b3f8:	2b00      	cmp	r3, #0
    b3fa:	d0f9      	beq.n	b3f0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    b3fc:	440f      	add	r7, r1
    b3fe:	e001      	b.n	b404 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    b400:	42bc      	cmp	r4, r7
    b402:	d0f5      	beq.n	b3f0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
    b404:	6833      	ldr	r3, [r6, #0]
    b406:	462a      	mov	r2, r5
    b408:	4621      	mov	r1, r4
    b40a:	4630      	mov	r0, r6
    b40c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    b40e:	3401      	adds	r4, #1
    b410:	f505 7500 	add.w	r5, r5, #512	; 0x200
        if (!writeSector(sector, ptr)) {
    b414:	4798      	blx	r3
    b416:	2800      	cmp	r0, #0
    b418:	d1f2      	bne.n	b400 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
    b41a:	2000      	movs	r0, #0
    b41c:	e7e7      	b.n	b3ee <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x32>
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    b41e:	4806      	ldr	r0, [pc, #24]	; (b438 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
    b420:	f7ff feda 	bl	b1d8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    b424:	2800      	cmp	r0, #0
    b426:	d1e3      	bne.n	b3f0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
  m_errorCode = code;
    b428:	4904      	ldr	r1, [pc, #16]	; (b43c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
    b42a:	240e      	movs	r4, #14
  m_errorLine = line;
    b42c:	4b04      	ldr	r3, [pc, #16]	; (b440 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
    b42e:	f240 423d 	movw	r2, #1085	; 0x43d
  m_errorCode = code;
    b432:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    b434:	601a      	str	r2, [r3, #0]
}
    b436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b438:	193a0027 	.word	0x193a0027
    b43c:	2000c986 	.word	0x2000c986
    b440:	2005dff0 	.word	0x2005dff0

0000b444 <SdioCard::begin(SdioConfig)>:
bool SdioCard::begin(SdioConfig sdioConfig) {
    b444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  m_curState = IDLE_STATE;
    b448:	2500      	movs	r5, #0
  m_initDone = false;
    b44a:	f8df 92c0 	ldr.w	r9, [pc, #704]	; b70c <SdioCard::begin(SdioConfig)+0x2c8>
  m_errorCode = SD_CARD_ERROR_NONE;
    b44e:	4c9b      	ldr	r4, [pc, #620]	; (b6bc <SdioCard::begin(SdioConfig)+0x278>)
bool SdioCard::begin(SdioConfig sdioConfig) {
    b450:	b091      	sub	sp, #68	; 0x44
  m_highCapacity = false;
    b452:	f8df 82bc 	ldr.w	r8, [pc, #700]	; b710 <SdioCard::begin(SdioConfig)+0x2cc>
  m_version2 = false;
    b456:	4e9a      	ldr	r6, [pc, #616]	; (b6c0 <SdioCard::begin(SdioConfig)+0x27c>)
  m_sdioConfig = sdioConfig;
    b458:	7201      	strb	r1, [r0, #8]
  m_curState = IDLE_STATE;
    b45a:	7245      	strb	r5, [r0, #9]
  m_initDone = false;
    b45c:	f889 5000 	strb.w	r5, [r9]
  m_errorCode = SD_CARD_ERROR_NONE;
    b460:	7025      	strb	r5, [r4, #0]
  m_highCapacity = false;
    b462:	f888 5000 	strb.w	r5, [r8]
  m_version2 = false;
    b466:	7035      	strb	r5, [r6, #0]
  initSDHC();
    b468:	f7ff fad2 	bl	aa10 <initSDHC()>
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    b46c:	4629      	mov	r1, r5
    b46e:	4628      	mov	r0, r5
    b470:	f7ff fc00 	bl	ac74 <cardCommand(unsigned long, unsigned long)>
    b474:	b950      	cbnz	r0, b48c <SdioCard::begin(SdioConfig)+0x48>
  m_errorCode = code;
    b476:	2101      	movs	r1, #1
  m_errorLine = line;
    b478:	4b92      	ldr	r3, [pc, #584]	; (b6c4 <SdioCard::begin(SdioConfig)+0x280>)
    b47a:	f240 228e 	movw	r2, #654	; 0x28e
    b47e:	4605      	mov	r5, r0
  m_errorCode = code;
    b480:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    b482:	601a      	str	r2, [r3, #0]
}
    b484:	4628      	mov	r0, r5
    b486:	b011      	add	sp, #68	; 0x44
    b488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b48c:	2503      	movs	r5, #3
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    b48e:	4f8e      	ldr	r7, [pc, #568]	; (b6c8 <SdioCard::begin(SdioConfig)+0x284>)
    b490:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    b494:	4638      	mov	r0, r7
    b496:	f7ff fbed 	bl	ac74 <cardCommand(unsigned long, unsigned long)>
    b49a:	2800      	cmp	r0, #0
    b49c:	d14e      	bne.n	b53c <SdioCard::begin(SdioConfig)+0xf8>
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    b49e:	3d01      	subs	r5, #1
    b4a0:	d1f6      	bne.n	b490 <SdioCard::begin(SdioConfig)+0x4c>
  if (!m_version2) {
    b4a2:	7833      	ldrb	r3, [r6, #0]
    b4a4:	2b00      	cmp	r3, #0
    b4a6:	d03d      	beq.n	b524 <SdioCard::begin(SdioConfig)+0xe0>
  arg = m_version2 ? 0X40300000 : 0x00300000;
    b4a8:	f8df b268 	ldr.w	fp, [pc, #616]	; b714 <SdioCard::begin(SdioConfig)+0x2d0>
  int m = micros();
    b4ac:	f001 fd1a 	bl	cee4 <micros>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    b4b0:	4e86      	ldr	r6, [pc, #536]	; (b6cc <SdioCard::begin(SdioConfig)+0x288>)
  int m = micros();
    b4b2:	4605      	mov	r5, r0
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    b4b4:	f8df a260 	ldr.w	sl, [pc, #608]	; b718 <SdioCard::begin(SdioConfig)+0x2d4>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    b4b8:	4f85      	ldr	r7, [pc, #532]	; (b6d0 <SdioCard::begin(SdioConfig)+0x28c>)
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    b4ba:	2100      	movs	r1, #0
    b4bc:	4630      	mov	r0, r6
    b4be:	f7ff fbd9 	bl	ac74 <cardCommand(unsigned long, unsigned long)>
    b4c2:	b950      	cbnz	r0, b4da <SdioCard::begin(SdioConfig)+0x96>
      return sdError(SD_CARD_ERROR_ACMD41);
    b4c4:	2500      	movs	r5, #0
  m_errorCode = code;
    b4c6:	2117      	movs	r1, #23
  m_errorLine = line;
    b4c8:	4b7e      	ldr	r3, [pc, #504]	; (b6c4 <SdioCard::begin(SdioConfig)+0x280>)
    b4ca:	f44f 722a 	mov.w	r2, #680	; 0x2a8
}
    b4ce:	4628      	mov	r0, r5
  m_errorCode = code;
    b4d0:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    b4d2:	601a      	str	r2, [r3, #0]
}
    b4d4:	b011      	add	sp, #68	; 0x44
    b4d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    b4da:	4659      	mov	r1, fp
    b4dc:	4650      	mov	r0, sl
    b4de:	f7ff fbc9 	bl	ac74 <cardCommand(unsigned long, unsigned long)>
    b4e2:	2800      	cmp	r0, #0
    b4e4:	d0ee      	beq.n	b4c4 <SdioCard::begin(SdioConfig)+0x80>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    b4e6:	f001 fcfd 	bl	cee4 <micros>
    b4ea:	1b40      	subs	r0, r0, r5
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    b4ec:	4b79      	ldr	r3, [pc, #484]	; (b6d4 <SdioCard::begin(SdioConfig)+0x290>)
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    b4ee:	42b8      	cmp	r0, r7
    b4f0:	d8e8      	bhi.n	b4c4 <SdioCard::begin(SdioConfig)+0x80>
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    b4f2:	691a      	ldr	r2, [r3, #16]
    b4f4:	2a00      	cmp	r2, #0
    b4f6:	dae0      	bge.n	b4ba <SdioCard::begin(SdioConfig)+0x76>
  m_ocr = SDHC_CMDRSP0;
    b4f8:	6919      	ldr	r1, [r3, #16]
    b4fa:	4a77      	ldr	r2, [pc, #476]	; (b6d8 <SdioCard::begin(SdioConfig)+0x294>)
    b4fc:	6011      	str	r1, [r2, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    b4fe:	691b      	ldr	r3, [r3, #16]
    b500:	005a      	lsls	r2, r3, #1
    b502:	d502      	bpl.n	b50a <SdioCard::begin(SdioConfig)+0xc6>
    m_highCapacity = true;
    b504:	2301      	movs	r3, #1
    b506:	f888 3000 	strb.w	r3, [r8]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    b50a:	2100      	movs	r1, #0
    b50c:	4873      	ldr	r0, [pc, #460]	; (b6dc <SdioCard::begin(SdioConfig)+0x298>)
    b50e:	f7ff fbb1 	bl	ac74 <cardCommand(unsigned long, unsigned long)>
    b512:	4605      	mov	r5, r0
    b514:	bb10      	cbnz	r0, b55c <SdioCard::begin(SdioConfig)+0x118>
  m_errorCode = code;
    b516:	2102      	movs	r1, #2
  m_errorLine = line;
    b518:	4b6a      	ldr	r3, [pc, #424]	; (b6c4 <SdioCard::begin(SdioConfig)+0x280>)
    b51a:	f240 22b1 	movw	r2, #689	; 0x2b1
  m_errorCode = code;
    b51e:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    b520:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD2);
    b522:	e7af      	b.n	b484 <SdioCard::begin(SdioConfig)+0x40>
    initSDHC();
    b524:	f7ff fa74 	bl	aa10 <initSDHC()>
    cardCommand(CMD0_XFERTYP, 0);
    b528:	4629      	mov	r1, r5
    b52a:	4628      	mov	r0, r5
    b52c:	f7ff fba2 	bl	ac74 <cardCommand(unsigned long, unsigned long)>
  arg = m_version2 ? 0X40300000 : 0x00300000;
    b530:	7833      	ldrb	r3, [r6, #0]
    b532:	2b00      	cmp	r3, #0
    b534:	d1b8      	bne.n	b4a8 <SdioCard::begin(SdioConfig)+0x64>
    b536:	f44f 1b40 	mov.w	fp, #3145728	; 0x300000
    b53a:	e7b7      	b.n	b4ac <SdioCard::begin(SdioConfig)+0x68>
      if (SDHC_CMDRSP0 != 0X1AA) {
    b53c:	4b65      	ldr	r3, [pc, #404]	; (b6d4 <SdioCard::begin(SdioConfig)+0x290>)
    b53e:	691b      	ldr	r3, [r3, #16]
    b540:	f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
    b544:	d007      	beq.n	b556 <SdioCard::begin(SdioConfig)+0x112>
  m_errorCode = code;
    b546:	2106      	movs	r1, #6
  m_errorLine = line;
    b548:	4b5e      	ldr	r3, [pc, #376]	; (b6c4 <SdioCard::begin(SdioConfig)+0x280>)
    b54a:	f44f 7225 	mov.w	r2, #660	; 0x294
        return sdError(SD_CARD_ERROR_CMD8);
    b54e:	2500      	movs	r5, #0
  m_errorCode = code;
    b550:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    b552:	601a      	str	r2, [r3, #0]
        return sdError(SD_CARD_ERROR_CMD8);
    b554:	e796      	b.n	b484 <SdioCard::begin(SdioConfig)+0x40>
      m_version2 = true;
    b556:	2301      	movs	r3, #1
    b558:	7033      	strb	r3, [r6, #0]
  if (!m_version2) {
    b55a:	e7a5      	b.n	b4a8 <SdioCard::begin(SdioConfig)+0x64>
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    b55c:	2100      	movs	r1, #0
    b55e:	4860      	ldr	r0, [pc, #384]	; (b6e0 <SdioCard::begin(SdioConfig)+0x29c>)
    b560:	f7ff fb88 	bl	ac74 <cardCommand(unsigned long, unsigned long)>
    b564:	4605      	mov	r5, r0
    b566:	b930      	cbnz	r0, b576 <SdioCard::begin(SdioConfig)+0x132>
  m_errorCode = code;
    b568:	2103      	movs	r1, #3
  m_errorLine = line;
    b56a:	4b56      	ldr	r3, [pc, #344]	; (b6c4 <SdioCard::begin(SdioConfig)+0x280>)
    b56c:	f44f 722d 	mov.w	r2, #692	; 0x2b4
  m_errorCode = code;
    b570:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    b572:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD3);
    b574:	e786      	b.n	b484 <SdioCard::begin(SdioConfig)+0x40>
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    b576:	4e57      	ldr	r6, [pc, #348]	; (b6d4 <SdioCard::begin(SdioConfig)+0x290>)
    b578:	4b5a      	ldr	r3, [pc, #360]	; (b6e4 <SdioCard::begin(SdioConfig)+0x2a0>)
    b57a:	6932      	ldr	r2, [r6, #16]
    b57c:	4f5a      	ldr	r7, [pc, #360]	; (b6e8 <SdioCard::begin(SdioConfig)+0x2a4>)
    b57e:	4013      	ands	r3, r2
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    b580:	495a      	ldr	r1, [pc, #360]	; (b6ec <SdioCard::begin(SdioConfig)+0x2a8>)
    b582:	485b      	ldr	r0, [pc, #364]	; (b6f0 <SdioCard::begin(SdioConfig)+0x2ac>)
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    b584:	603b      	str	r3, [r7, #0]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    b586:	f7ff fbc1 	bl	ad0c <readReg16(unsigned long, void*)>
    b58a:	4605      	mov	r5, r0
    b58c:	b930      	cbnz	r0, b59c <SdioCard::begin(SdioConfig)+0x158>
  m_errorCode = code;
    b58e:	2107      	movs	r1, #7
  m_errorLine = line;
    b590:	4b4c      	ldr	r3, [pc, #304]	; (b6c4 <SdioCard::begin(SdioConfig)+0x280>)
    b592:	f240 22b9 	movw	r2, #697	; 0x2b9
  m_errorCode = code;
    b596:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    b598:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD9);
    b59a:	e773      	b.n	b484 <SdioCard::begin(SdioConfig)+0x40>
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    b59c:	4955      	ldr	r1, [pc, #340]	; (b6f4 <SdioCard::begin(SdioConfig)+0x2b0>)
    b59e:	4856      	ldr	r0, [pc, #344]	; (b6f8 <SdioCard::begin(SdioConfig)+0x2b4>)
    b5a0:	f7ff fbb4 	bl	ad0c <readReg16(unsigned long, void*)>
    b5a4:	4605      	mov	r5, r0
    b5a6:	b930      	cbnz	r0, b5b6 <SdioCard::begin(SdioConfig)+0x172>
  m_errorCode = code;
    b5a8:	2108      	movs	r1, #8
  m_errorLine = line;
    b5aa:	4b46      	ldr	r3, [pc, #280]	; (b6c4 <SdioCard::begin(SdioConfig)+0x280>)
    b5ac:	f44f 722f 	mov.w	r2, #700	; 0x2bc
  m_errorCode = code;
    b5b0:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    b5b2:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD10);
    b5b4:	e766      	b.n	b484 <SdioCard::begin(SdioConfig)+0x40>
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    b5b6:	6839      	ldr	r1, [r7, #0]
    b5b8:	4850      	ldr	r0, [pc, #320]	; (b6fc <SdioCard::begin(SdioConfig)+0x2b8>)
    b5ba:	f7ff fb5b 	bl	ac74 <cardCommand(unsigned long, unsigned long)>
    b5be:	4605      	mov	r5, r0
    b5c0:	b930      	cbnz	r0, b5d0 <SdioCard::begin(SdioConfig)+0x18c>
  m_errorCode = code;
    b5c2:	2105      	movs	r1, #5
  m_errorLine = line;
    b5c4:	4b3f      	ldr	r3, [pc, #252]	; (b6c4 <SdioCard::begin(SdioConfig)+0x280>)
    b5c6:	f240 22bf 	movw	r2, #703	; 0x2bf
  m_errorCode = code;
    b5ca:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    b5cc:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD7);
    b5ce:	e759      	b.n	b484 <SdioCard::begin(SdioConfig)+0x40>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    b5d0:	6839      	ldr	r1, [r7, #0]
    b5d2:	483e      	ldr	r0, [pc, #248]	; (b6cc <SdioCard::begin(SdioConfig)+0x288>)
    b5d4:	f7ff fb4e 	bl	ac74 <cardCommand(unsigned long, unsigned long)>
    b5d8:	b938      	cbnz	r0, b5ea <SdioCard::begin(SdioConfig)+0x1a6>
  m_errorCode = code;
    b5da:	2114      	movs	r1, #20
  m_errorLine = line;
    b5dc:	4b39      	ldr	r3, [pc, #228]	; (b6c4 <SdioCard::begin(SdioConfig)+0x280>)
    b5de:	f240 22c3 	movw	r2, #707	; 0x2c3
    return sdError(SD_CARD_ERROR_ACMD6);
    b5e2:	2500      	movs	r5, #0
  m_errorCode = code;
    b5e4:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    b5e6:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ACMD6);
    b5e8:	e74c      	b.n	b484 <SdioCard::begin(SdioConfig)+0x40>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    b5ea:	2102      	movs	r1, #2
    b5ec:	4844      	ldr	r0, [pc, #272]	; (b700 <SdioCard::begin(SdioConfig)+0x2bc>)
    b5ee:	f7ff fb41 	bl	ac74 <cardCommand(unsigned long, unsigned long)>
    b5f2:	4605      	mov	r5, r0
    b5f4:	2800      	cmp	r0, #0
    b5f6:	d0f0      	beq.n	b5da <SdioCard::begin(SdioConfig)+0x196>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    b5f8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  bool highSpeedModeAsk = cardCMD6(0X00FFFFFF, status);
    b5fa:	4669      	mov	r1, sp
    b5fc:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    b600:	f023 0306 	bic.w	r3, r3, #6
    b604:	62b3      	str	r3, [r6, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    b606:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    b608:	f043 0302 	orr.w	r3, r3, #2
    b60c:	62b3      	str	r3, [r6, #40]	; 0x28
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    b60e:	f04f 1310 	mov.w	r3, #1048592	; 0x100010
    b612:	6473      	str	r3, [r6, #68]	; 0x44
  bool highSpeedModeAsk = cardCMD6(0X00FFFFFF, status);
    b614:	f7ff fcd4 	bl	afc0 <cardCMD6(unsigned long, unsigned char*)>
  bool highspeedModeSupported = (2 & status[13]);
    b618:	f89d 300d 	ldrb.w	r3, [sp, #13]
  if (highSpeedModeAsk && highspeedModeSupported) {
    b61c:	079b      	lsls	r3, r3, #30
    b61e:	d543      	bpl.n	b6a8 <SdioCard::begin(SdioConfig)+0x264>
    b620:	2800      	cmp	r0, #0
    b622:	d041      	beq.n	b6a8 <SdioCard::begin(SdioConfig)+0x264>
    uint32_t m_errorLine_before = m_errorLine;
    b624:	4e27      	ldr	r6, [pc, #156]	; (b6c4 <SdioCard::begin(SdioConfig)+0x280>)
    bool switchRequestAsk = cardCMD6(0X80FFFFF1, status);
    b626:	4669      	mov	r1, sp
    b628:	4836      	ldr	r0, [pc, #216]	; (b704 <SdioCard::begin(SdioConfig)+0x2c0>)
    uint8_t err_code_before = m_errorCode;
    b62a:	f894 8000 	ldrb.w	r8, [r4]
    uint32_t m_errorLine_before = m_errorLine;
    b62e:	6837      	ldr	r7, [r6, #0]
    bool switchRequestAsk = cardCMD6(0X80FFFFF1, status);
    b630:	f7ff fcc6 	bl	afc0 <cardCMD6(unsigned long, unsigned char*)>
    bool switchRequestDone = ((status[16] & 0XF) == 1);
    b634:	f89d 3010 	ldrb.w	r3, [sp, #16]
    b638:	f003 030f 	and.w	r3, r3, #15
    if (switchRequestAsk && switchRequestDone) {
    b63c:	2b01      	cmp	r3, #1
    b63e:	d136      	bne.n	b6ae <SdioCard::begin(SdioConfig)+0x26a>
    b640:	b3a8      	cbz	r0, b6ae <SdioCard::begin(SdioConfig)+0x26a>
      kHzSdClk = 50000;
    b642:	f24c 3050 	movw	r0, #50000	; 0xc350
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    b646:	4c30      	ldr	r4, [pc, #192]	; (b708 <SdioCard::begin(SdioConfig)+0x2c4>)
    b648:	2305      	movs	r3, #5
    b64a:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    b64e:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    b652:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    b656:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    b65a:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    b65e:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
  setSdclk(kHzSdClk);
    b662:	f7ff f8eb 	bl	a83c <setSdclk(unsigned long)>
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    b666:	2300      	movs	r3, #0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    b668:	f247 02b8 	movw	r2, #28856	; 0x70b8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    b66c:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    b670:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    b674:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    b678:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    b67c:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    b680:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    b684:	f241 03b8 	movw	r3, #4280	; 0x10b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    b688:	f8c4 23bc 	str.w	r2, [r4, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    b68c:	f8c4 23c0 	str.w	r2, [r4, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    b690:	f8c4 23ac 	str.w	r2, [r4, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    b694:	f8c4 33b0 	str.w	r3, [r4, #944]	; 0x3b0
  m_initDone = true;
    b698:	2301      	movs	r3, #1
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    b69a:	f8c4 23b4 	str.w	r2, [r4, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    b69e:	f8c4 23b8 	str.w	r2, [r4, #952]	; 0x3b8
  m_initDone = true;
    b6a2:	f889 3000 	strb.w	r3, [r9]
  return true;
    b6a6:	e6ed      	b.n	b484 <SdioCard::begin(SdioConfig)+0x40>
  kHzSdClk = 25000;
    b6a8:	f246 10a8 	movw	r0, #25000	; 0x61a8
    b6ac:	e7cb      	b.n	b646 <SdioCard::begin(SdioConfig)+0x202>
    b6ae:	f246 10a8 	movw	r0, #25000	; 0x61a8
      m_errorCode = err_code_before;
    b6b2:	f884 8000 	strb.w	r8, [r4]
      m_errorLine = m_errorLine_before;
    b6b6:	6037      	str	r7, [r6, #0]
    b6b8:	e7c5      	b.n	b646 <SdioCard::begin(SdioConfig)+0x202>
    b6ba:	bf00      	nop
    b6bc:	2000c986 	.word	0x2000c986
    b6c0:	2005e53a 	.word	0x2005e53a
    b6c4:	2005dff0 	.word	0x2005dff0
    b6c8:	081a0000 	.word	0x081a0000
    b6cc:	371a0000 	.word	0x371a0000
    b6d0:	000f4240 	.word	0x000f4240
    b6d4:	402c0000 	.word	0x402c0000
    b6d8:	2005e014 	.word	0x2005e014
    b6dc:	02090000 	.word	0x02090000
    b6e0:	031a0000 	.word	0x031a0000
    b6e4:	ffff0000 	.word	0xffff0000
    b6e8:	2005e018 	.word	0x2005e018
    b6ec:	2005e004 	.word	0x2005e004
    b6f0:	09090000 	.word	0x09090000
    b6f4:	2005dff4 	.word	0x2005dff4
    b6f8:	0a090000 	.word	0x0a090000
    b6fc:	071b0000 	.word	0x071b0000
    b700:	061a0000 	.word	0x061a0000
    b704:	80fffff1 	.word	0x80fffff1
    b708:	401f8000 	.word	0x401f8000
    b70c:	2005e539 	.word	0x2005e539
    b710:	2005e53b 	.word	0x2005e53b
    b714:	40300000 	.word	0x40300000
    b718:	29020000 	.word	0x29020000

0000b71c <SdioCard::readData(unsigned char*)>:
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    b71c:	4b37      	ldr	r3, [pc, #220]	; (b7fc <SdioCard::readData(unsigned char*)+0xe0>)
    b71e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    b720:	0592      	lsls	r2, r2, #22
bool SdioCard::readData(uint8_t* dst) {
    b722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b726:	460f      	mov	r7, r1
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    b728:	d40d      	bmi.n	b746 <SdioCard::readData(unsigned char*)+0x2a>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    b72a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b72c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    b730:	629a      	str	r2, [r3, #40]	; 0x28
    noInterrupts();
    b732:	b672      	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    b734:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b736:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    b73a:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    b73c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b73e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    b742:	629a      	str	r2, [r3, #40]	; 0x28
    interrupts();
    b744:	b662      	cpsie	i
  uint32_t m = micros();
    b746:	f001 fbcd 	bl	cee4 <micros>
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    b74a:	4e2c      	ldr	r6, [pc, #176]	; (b7fc <SdioCard::readData(unsigned char*)+0xe0>)
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b74c:	f8df 80c4 	ldr.w	r8, [pc, #196]	; b814 <SdioCard::readData(unsigned char*)+0xf8>
  uint32_t m = micros();
    b750:	4605      	mov	r5, r0
  while (fcn()) {
    b752:	e004      	b.n	b75e <SdioCard::readData(unsigned char*)+0x42>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b754:	f001 fbc6 	bl	cee4 <micros>
    b758:	1b43      	subs	r3, r0, r5
    b75a:	4543      	cmp	r3, r8
    b75c:	d837      	bhi.n	b7ce <SdioCard::readData(unsigned char*)+0xb2>
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    b75e:	6a74      	ldr	r4, [r6, #36]	; 0x24
  while (fcn()) {
    b760:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    b764:	d0f6      	beq.n	b754 <SdioCard::readData(unsigned char*)+0x38>
    b766:	f107 0c3c 	add.w	ip, r7, #60	; 0x3c
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    b76a:	4824      	ldr	r0, [pc, #144]	; (b7fc <SdioCard::readData(unsigned char*)+0xe0>)
    b76c:	f507 770f 	add.w	r7, r7, #572	; 0x23c
    b770:	6a43      	ldr	r3, [r0, #36]	; 0x24
    b772:	051b      	lsls	r3, r3, #20
    b774:	d5fc      	bpl.n	b770 <SdioCard::readData(unsigned char*)+0x54>
    b776:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
      p32[i] = SDHC_DATPORT;
    b77a:	6a02      	ldr	r2, [r0, #32]
    b77c:	f843 2f04 	str.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    b780:	459c      	cmp	ip, r3
    b782:	d1fa      	bne.n	b77a <SdioCard::readData(unsigned char*)+0x5e>
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    b784:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
    b788:	4567      	cmp	r7, ip
    b78a:	d1f1      	bne.n	b770 <SdioCard::readData(unsigned char*)+0x54>
  uint32_t m = micros();
    b78c:	f001 fbaa 	bl	cee4 <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    b790:	4f1a      	ldr	r7, [pc, #104]	; (b7fc <SdioCard::readData(unsigned char*)+0xe0>)
    b792:	4d1b      	ldr	r5, [pc, #108]	; (b800 <SdioCard::readData(unsigned char*)+0xe4>)
  uint32_t m = micros();
    b794:	4606      	mov	r6, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b796:	f8df 807c 	ldr.w	r8, [pc, #124]	; b814 <SdioCard::readData(unsigned char*)+0xf8>
  while (fcn()) {
    b79a:	e004      	b.n	b7a6 <SdioCard::readData(unsigned char*)+0x8a>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b79c:	f001 fba2 	bl	cee4 <micros>
    b7a0:	1b83      	subs	r3, r0, r6
    b7a2:	4543      	cmp	r3, r8
    b7a4:	d81d      	bhi.n	b7e2 <SdioCard::readData(unsigned char*)+0xc6>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    b7a6:	6b3c      	ldr	r4, [r7, #48]	; 0x30
  while (fcn()) {
    b7a8:	402c      	ands	r4, r5
    b7aa:	d0f7      	beq.n	b79c <SdioCard::readData(unsigned char*)+0x80>
  m_irqstat = SDHC_IRQSTAT;
    b7ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b7ae:	4a15      	ldr	r2, [pc, #84]	; (b804 <SdioCard::readData(unsigned char*)+0xe8>)
    b7b0:	6013      	str	r3, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    b7b2:	6813      	ldr	r3, [r2, #0]
    b7b4:	633b      	str	r3, [r7, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    b7b6:	6813      	ldr	r3, [r2, #0]
    b7b8:	f013 0302 	ands.w	r3, r3, #2
    b7bc:	d01b      	beq.n	b7f6 <SdioCard::readData(unsigned char*)+0xda>
    b7be:	6812      	ldr	r2, [r2, #0]
    b7c0:	4b11      	ldr	r3, [pc, #68]	; (b808 <SdioCard::readData(unsigned char*)+0xec>)
    b7c2:	421a      	tst	r2, r3
    b7c4:	bf0c      	ite	eq
    b7c6:	2001      	moveq	r0, #1
    b7c8:	2000      	movne	r0, #0
}
    b7ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_errorCode = code;
    b7ce:	490f      	ldr	r1, [pc, #60]	; (b80c <SdioCard::readData(unsigned char*)+0xf0>)
    b7d0:	251a      	movs	r5, #26
  m_errorLine = line;
    b7d2:	4b0f      	ldr	r3, [pc, #60]	; (b810 <SdioCard::readData(unsigned char*)+0xf4>)
    b7d4:	f240 3256 	movw	r2, #854	; 0x356
    return sdError(SD_CARD_ERROR_READ_FIFO);
    b7d8:	4620      	mov	r0, r4
  m_errorCode = code;
    b7da:	700d      	strb	r5, [r1, #0]
  m_errorLine = line;
    b7dc:	601a      	str	r2, [r3, #0]
}
    b7de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_errorCode = code;
    b7e2:	490a      	ldr	r1, [pc, #40]	; (b80c <SdioCard::readData(unsigned char*)+0xf0>)
    b7e4:	251d      	movs	r5, #29
  m_errorLine = line;
    b7e6:	4b0a      	ldr	r3, [pc, #40]	; (b810 <SdioCard::readData(unsigned char*)+0xf4>)
    b7e8:	f240 3261 	movw	r2, #865	; 0x361
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    b7ec:	4620      	mov	r0, r4
  m_errorCode = code;
    b7ee:	700d      	strb	r5, [r1, #0]
  m_errorLine = line;
    b7f0:	601a      	str	r2, [r3, #0]
}
    b7f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    b7f6:	4618      	mov	r0, r3
}
    b7f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b7fc:	402c0000 	.word	0x402c0000
    b800:	117f0002 	.word	0x117f0002
    b804:	2005e020 	.word	0x2005e020
    b808:	117f0000 	.word	0x117f0000
    b80c:	2000c986 	.word	0x2000c986
    b810:	2005dff0 	.word	0x2005dff0
    b814:	000f4240 	.word	0x000f4240

0000b818 <SdioCard::readStart(unsigned long)>:
bool SdioCard::readStart(uint32_t sector) {
    b818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_busyFcn = fcn;
    b81c:	4b29      	ldr	r3, [pc, #164]	; (b8c4 <SdioCard::readStart(unsigned long)+0xac>)
bool SdioCard::readStart(uint32_t sector) {
    b81e:	4689      	mov	r9, r1
  m_busyFcn = fcn;
    b820:	f8df a0c0 	ldr.w	sl, [pc, #192]	; b8e4 <SdioCard::readStart(unsigned long)+0xcc>
    b824:	4e28      	ldr	r6, [pc, #160]	; (b8c8 <SdioCard::readStart(unsigned long)+0xb0>)
    b826:	f8ca 3000 	str.w	r3, [sl]
  uint32_t m = micros();
    b82a:	f001 fb5b 	bl	cee4 <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    b82e:	4d27      	ldr	r5, [pc, #156]	; (b8cc <SdioCard::readStart(unsigned long)+0xb4>)
  uint32_t m = micros();
    b830:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    b832:	f8df 80b4 	ldr.w	r8, [pc, #180]	; b8e8 <SdioCard::readStart(unsigned long)+0xd0>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b836:	4f26      	ldr	r7, [pc, #152]	; (b8d0 <SdioCard::readStart(unsigned long)+0xb8>)
  while (fcn()) {
    b838:	e006      	b.n	b848 <SdioCard::readStart(unsigned long)+0x30>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b83a:	f001 fb53 	bl	cee4 <micros>
    b83e:	1b00      	subs	r0, r0, r4
    b840:	42b8      	cmp	r0, r7
    b842:	d829      	bhi.n	b898 <SdioCard::readStart(unsigned long)+0x80>
    yield();
    b844:	f003 f8ee 	bl	ea24 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    b848:	6831      	ldr	r1, [r6, #0]
    b84a:	4628      	mov	r0, r5
    b84c:	f7ff fa12 	bl	ac74 <cardCommand(unsigned long, unsigned long)>
    b850:	2800      	cmp	r0, #0
    b852:	d0f2      	beq.n	b83a <SdioCard::readStart(unsigned long)+0x22>
    b854:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    b858:	05db      	lsls	r3, r3, #23
    b85a:	d5ee      	bpl.n	b83a <SdioCard::readStart(unsigned long)+0x22>
  m_busyFcn = 0;
    b85c:	2300      	movs	r3, #0
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    b85e:	f44f 7200 	mov.w	r2, #512	; 0x200
  m_busyFcn = 0;
    b862:	f8ca 3000 	str.w	r3, [sl]
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    b866:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    b86a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    b86e:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    b872:	4b18      	ldr	r3, [pc, #96]	; (b8d4 <SdioCard::readStart(unsigned long)+0xbc>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    b874:	f8c8 2004 	str.w	r2, [r8, #4]
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    b878:	781b      	ldrb	r3, [r3, #0]
    b87a:	b1cb      	cbz	r3, b8b0 <SdioCard::readStart(unsigned long)+0x98>
    b87c:	4649      	mov	r1, r9
    b87e:	4816      	ldr	r0, [pc, #88]	; (b8d8 <SdioCard::readStart(unsigned long)+0xc0>)
    b880:	f7ff f9f8 	bl	ac74 <cardCommand(unsigned long, unsigned long)>
    b884:	b930      	cbnz	r0, b894 <SdioCard::readStart(unsigned long)+0x7c>
  m_errorCode = code;
    b886:	4915      	ldr	r1, [pc, #84]	; (b8dc <SdioCard::readStart(unsigned long)+0xc4>)
    b888:	240c      	movs	r4, #12
  m_errorLine = line;
    b88a:	4b15      	ldr	r3, [pc, #84]	; (b8e0 <SdioCard::readStart(unsigned long)+0xc8>)
    b88c:	f240 32bd 	movw	r2, #957	; 0x3bd
  m_errorCode = code;
    b890:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    b892:	601a      	str	r2, [r3, #0]
}
    b894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    b898:	4a10      	ldr	r2, [pc, #64]	; (b8dc <SdioCard::readStart(unsigned long)+0xc4>)
    b89a:	210a      	movs	r1, #10
      m_busyFcn = 0;
    b89c:	2000      	movs	r0, #0
  m_errorLine = line;
    b89e:	4b10      	ldr	r3, [pc, #64]	; (b8e0 <SdioCard::readStart(unsigned long)+0xc8>)
  m_errorCode = code;
    b8a0:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    b8a2:	f240 32b1 	movw	r2, #945	; 0x3b1
      m_busyFcn = 0;
    b8a6:	f8ca 0000 	str.w	r0, [sl]
  m_errorLine = line;
    b8aa:	601a      	str	r2, [r3, #0]
}
    b8ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    b8b0:	ea4f 2949 	mov.w	r9, r9, lsl #9
    b8b4:	4808      	ldr	r0, [pc, #32]	; (b8d8 <SdioCard::readStart(unsigned long)+0xc0>)
    b8b6:	4649      	mov	r1, r9
    b8b8:	f7ff f9dc 	bl	ac74 <cardCommand(unsigned long, unsigned long)>
    b8bc:	2800      	cmp	r0, #0
    b8be:	d1e9      	bne.n	b894 <SdioCard::readStart(unsigned long)+0x7c>
    b8c0:	e7e1      	b.n	b886 <SdioCard::readStart(unsigned long)+0x6e>
    b8c2:	bf00      	nop
    b8c4:	0000ae09 	.word	0x0000ae09
    b8c8:	2005e018 	.word	0x2005e018
    b8cc:	0d1a0000 	.word	0x0d1a0000
    b8d0:	000f4240 	.word	0x000f4240
    b8d4:	2005e53b 	.word	0x2005e53b
    b8d8:	123a0030 	.word	0x123a0030
    b8dc:	2000c986 	.word	0x2000c986
    b8e0:	2005dff0 	.word	0x2005dff0
    b8e4:	2005e01c 	.word	0x2005e01c
    b8e8:	402c0000 	.word	0x402c0000

0000b8ec <SdioCard::stopTransmission(bool)>:
bool SdioCard::stopTransmission(bool blocking) {
    b8ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_curState = IDLE_STATE;
    b8f0:	2200      	movs	r2, #0
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    b8f2:	4c1d      	ldr	r4, [pc, #116]	; (b968 <SdioCard::stopTransmission(bool)+0x7c>)
bool SdioCard::stopTransmission(bool blocking) {
    b8f4:	460d      	mov	r5, r1
  m_curState = IDLE_STATE;
    b8f6:	7242      	strb	r2, [r0, #9]
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    b8f8:	4611      	mov	r1, r2
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    b8fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    b8fc:	481b      	ldr	r0, [pc, #108]	; (b96c <SdioCard::stopTransmission(bool)+0x80>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    b8fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    b902:	62a3      	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    b904:	f7ff f9b6 	bl	ac74 <cardCommand(unsigned long, unsigned long)>
    b908:	b940      	cbnz	r0, b91c <SdioCard::stopTransmission(bool)+0x30>
  m_errorCode = code;
    b90a:	4919      	ldr	r1, [pc, #100]	; (b970 <SdioCard::stopTransmission(bool)+0x84>)
    b90c:	2409      	movs	r4, #9
  m_errorLine = line;
    b90e:	4b19      	ldr	r3, [pc, #100]	; (b974 <SdioCard::stopTransmission(bool)+0x88>)
    b910:	f240 32d3 	movw	r2, #979	; 0x3d3
  m_errorCode = code;
    b914:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    b916:	601a      	str	r2, [r3, #0]
}
    b918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (blocking) {
    b91c:	2d00      	cmp	r5, #0
    b91e:	d0fb      	beq.n	b918 <SdioCard::stopTransmission(bool)+0x2c>
  m_busyFcn = fcn;
    b920:	4b15      	ldr	r3, [pc, #84]	; (b978 <SdioCard::stopTransmission(bool)+0x8c>)
    b922:	4e16      	ldr	r6, [pc, #88]	; (b97c <SdioCard::stopTransmission(bool)+0x90>)
    b924:	6033      	str	r3, [r6, #0]
  uint32_t m = micros();
    b926:	f001 fadd 	bl	cee4 <micros>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    b92a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  uint32_t m = micros();
    b92c:	4607      	mov	r7, r0
  while (fcn()) {
    b92e:	01da      	lsls	r2, r3, #7
    b930:	d416      	bmi.n	b960 <SdioCard::stopTransmission(bool)+0x74>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b932:	f8df 804c 	ldr.w	r8, [pc, #76]	; b980 <SdioCard::stopTransmission(bool)+0x94>
    b936:	e004      	b.n	b942 <SdioCard::stopTransmission(bool)+0x56>
    yield();
    b938:	f003 f874 	bl	ea24 <yield>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    b93c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    b93e:	01db      	lsls	r3, r3, #7
    b940:	d40e      	bmi.n	b960 <SdioCard::stopTransmission(bool)+0x74>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b942:	f001 facf 	bl	cee4 <micros>
    b946:	1bc0      	subs	r0, r0, r7
    b948:	4540      	cmp	r0, r8
    b94a:	d9f5      	bls.n	b938 <SdioCard::stopTransmission(bool)+0x4c>
  m_errorCode = code;
    b94c:	4a08      	ldr	r2, [pc, #32]	; (b970 <SdioCard::stopTransmission(bool)+0x84>)
    b94e:	210a      	movs	r1, #10
      m_busyFcn = 0;
    b950:	2000      	movs	r0, #0
  m_errorLine = line;
    b952:	4b08      	ldr	r3, [pc, #32]	; (b974 <SdioCard::stopTransmission(bool)+0x88>)
  m_errorCode = code;
    b954:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    b956:	f240 32d7 	movw	r2, #983	; 0x3d7
      m_busyFcn = 0;
    b95a:	6030      	str	r0, [r6, #0]
  m_errorLine = line;
    b95c:	601a      	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD13);
    b95e:	e7db      	b.n	b918 <SdioCard::stopTransmission(bool)+0x2c>
  m_busyFcn = 0;
    b960:	2300      	movs	r3, #0
  return true;
    b962:	4628      	mov	r0, r5
  m_busyFcn = 0;
    b964:	6033      	str	r3, [r6, #0]
  return false;  // Caller will set errorCode.
    b966:	e7d7      	b.n	b918 <SdioCard::stopTransmission(bool)+0x2c>
    b968:	402c0000 	.word	0x402c0000
    b96c:	0cdb0000 	.word	0x0cdb0000
    b970:	2000c986 	.word	0x2000c986
    b974:	2005dff0 	.word	0x2005dff0
    b978:	0000a81d 	.word	0x0000a81d
    b97c:	2005e01c 	.word	0x2005e01c
    b980:	000f4240 	.word	0x000f4240

0000b984 <SdioCard::syncDevice()>:
  if (!m_transferActive) {
    b984:	4b0a      	ldr	r3, [pc, #40]	; (b9b0 <SdioCard::syncDevice()+0x2c>)
    b986:	781b      	ldrb	r3, [r3, #0]
bool SdioCard::syncDevice() {
    b988:	b510      	push	{r4, lr}
    b98a:	4604      	mov	r4, r0
  if (!m_transferActive) {
    b98c:	b91b      	cbnz	r3, b996 <SdioCard::syncDevice()+0x12>
  if (m_curState != IDLE_STATE) {
    b98e:	7a63      	ldrb	r3, [r4, #9]
    b990:	b943      	cbnz	r3, b9a4 <SdioCard::syncDevice()+0x20>
  return true;
    b992:	2001      	movs	r0, #1
}
    b994:	bd10      	pop	{r4, pc}
    b996:	f7ff f8cf 	bl	ab38 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    b99a:	2800      	cmp	r0, #0
    b99c:	d0fa      	beq.n	b994 <SdioCard::syncDevice()+0x10>
  if (m_curState != IDLE_STATE) {
    b99e:	7a63      	ldrb	r3, [r4, #9]
    b9a0:	2b00      	cmp	r3, #0
    b9a2:	d0f6      	beq.n	b992 <SdioCard::syncDevice()+0xe>
    return stopTransmission(true);
    b9a4:	4620      	mov	r0, r4
    b9a6:	2101      	movs	r1, #1
}
    b9a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return stopTransmission(true);
    b9ac:	f7ff bf9e 	b.w	b8ec <SdioCard::stopTransmission(bool)>
    b9b0:	2005e53c 	.word	0x2005e53c

0000b9b4 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    b9b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b9b8:	4604      	mov	r4, r0
    b9ba:	7a00      	ldrb	r0, [r0, #8]
    b9bc:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    b9c0:	4616      	mov	r6, r2
  if (m_sdioConfig.useDma()) {
    b9c2:	f010 0501 	ands.w	r5, r0, #1
    b9c6:	d013      	beq.n	b9f0 <SdioCard::readSector(unsigned long, unsigned char*)+0x3c>
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    b9c8:	0793      	lsls	r3, r2, #30
    b9ca:	d03c      	beq.n	ba46 <SdioCard::readSector(unsigned long, unsigned char*)+0x92>
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    b9cc:	2301      	movs	r3, #1
    b9ce:	4838      	ldr	r0, [pc, #224]	; (bab0 <SdioCard::readSector(unsigned long, unsigned char*)+0xfc>)
    b9d0:	466a      	mov	r2, sp
    b9d2:	f7ff fc01 	bl	b1d8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    b9d6:	2800      	cmp	r0, #0
    b9d8:	d03a      	beq.n	ba50 <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>
      memcpy(dst, aligned, 512);
    b9da:	f44f 7200 	mov.w	r2, #512	; 0x200
    b9de:	4669      	mov	r1, sp
    b9e0:	4630      	mov	r0, r6
    b9e2:	f001 fdb5 	bl	d550 <memcpy>
}
    b9e6:	4628      	mov	r0, r5
    b9e8:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    b9ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_transferActive) {
    b9f0:	f8df 80cc 	ldr.w	r8, [pc, #204]	; bac0 <SdioCard::readSector(unsigned long, unsigned char*)+0x10c>
    b9f4:	460f      	mov	r7, r1
    b9f6:	f898 3000 	ldrb.w	r3, [r8]
    b9fa:	2b00      	cmp	r3, #0
    b9fc:	d135      	bne.n	ba6a <SdioCard::readSector(unsigned long, unsigned char*)+0xb6>
    if (m_curState != READ_STATE || sector != m_curSector) {
    b9fe:	7a63      	ldrb	r3, [r4, #9]
    ba00:	2b01      	cmp	r3, #1
    ba02:	d039      	beq.n	ba78 <SdioCard::readSector(unsigned long, unsigned char*)+0xc4>
      if (!syncDevice()) {
    ba04:	6822      	ldr	r2, [r4, #0]
    ba06:	492b      	ldr	r1, [pc, #172]	; (bab4 <SdioCard::readSector(unsigned long, unsigned char*)+0x100>)
    ba08:	6a12      	ldr	r2, [r2, #32]
    ba0a:	428a      	cmp	r2, r1
    ba0c:	d14a      	bne.n	baa4 <SdioCard::readSector(unsigned long, unsigned char*)+0xf0>
  if (!m_transferActive) {
    ba0e:	f898 2000 	ldrb.w	r2, [r8]
    ba12:	2a00      	cmp	r2, #0
    ba14:	d134      	bne.n	ba80 <SdioCard::readSector(unsigned long, unsigned char*)+0xcc>
  if (m_curState != IDLE_STATE) {
    ba16:	2b00      	cmp	r3, #0
    ba18:	d139      	bne.n	ba8e <SdioCard::readSector(unsigned long, unsigned char*)+0xda>
      if (!readStart(sector)) {
    ba1a:	4639      	mov	r1, r7
    ba1c:	4620      	mov	r0, r4
    ba1e:	f7ff fefb 	bl	b818 <SdioCard::readStart(unsigned long)>
    ba22:	b1e8      	cbz	r0, ba60 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
      m_curState = READ_STATE;
    ba24:	2301      	movs	r3, #1
      m_curSector = sector;
    ba26:	6067      	str	r7, [r4, #4]
      m_curState = READ_STATE;
    ba28:	7263      	strb	r3, [r4, #9]
    if (!readData(dst)) {
    ba2a:	4631      	mov	r1, r6
    ba2c:	4620      	mov	r0, r4
    ba2e:	f7ff fe75 	bl	b71c <SdioCard::readData(unsigned char*)>
    ba32:	b1a8      	cbz	r0, ba60 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
    m_curSector++;
    ba34:	6863      	ldr	r3, [r4, #4]
  return true;
    ba36:	4605      	mov	r5, r0
    m_curSector++;
    ba38:	3301      	adds	r3, #1
}
    ba3a:	4628      	mov	r0, r5
    m_curSector++;
    ba3c:	6063      	str	r3, [r4, #4]
}
    ba3e:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    ba42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    ba46:	2301      	movs	r3, #1
    ba48:	4819      	ldr	r0, [pc, #100]	; (bab0 <SdioCard::readSector(unsigned long, unsigned char*)+0xfc>)
    ba4a:	f7ff fbc5 	bl	b1d8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    ba4e:	b938      	cbnz	r0, ba60 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
  m_errorCode = code;
    ba50:	4919      	ldr	r1, [pc, #100]	; (bab8 <SdioCard::readSector(unsigned long, unsigned char*)+0x104>)
    ba52:	200b      	movs	r0, #11
  m_errorLine = line;
    ba54:	4b19      	ldr	r3, [pc, #100]	; (babc <SdioCard::readSector(unsigned long, unsigned char*)+0x108>)
    ba56:	f44f 725d 	mov.w	r2, #884	; 0x374
      return sdError(SD_CARD_ERROR_CMD17);
    ba5a:	2500      	movs	r5, #0
  m_errorCode = code;
    ba5c:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    ba5e:	601a      	str	r2, [r3, #0]
}
    ba60:	4628      	mov	r0, r5
    ba62:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    ba66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ba6a:	f7ff f865 	bl	ab38 <waitTransferComplete() [clone .part.0]>
    if (!waitTransferComplete()) {
    ba6e:	2800      	cmp	r0, #0
    ba70:	d0f6      	beq.n	ba60 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
    if (m_curState != READ_STATE || sector != m_curSector) {
    ba72:	7a63      	ldrb	r3, [r4, #9]
    ba74:	2b01      	cmp	r3, #1
    ba76:	d1c5      	bne.n	ba04 <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
    ba78:	6862      	ldr	r2, [r4, #4]
    ba7a:	42ba      	cmp	r2, r7
    ba7c:	d1c2      	bne.n	ba04 <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
    ba7e:	e7d4      	b.n	ba2a <SdioCard::readSector(unsigned long, unsigned char*)+0x76>
    ba80:	f7ff f85a 	bl	ab38 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    ba84:	2800      	cmp	r0, #0
    ba86:	d0eb      	beq.n	ba60 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
  if (m_curState != IDLE_STATE) {
    ba88:	7a63      	ldrb	r3, [r4, #9]
    ba8a:	2b00      	cmp	r3, #0
    ba8c:	d0c5      	beq.n	ba1a <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
    return stopTransmission(true);
    ba8e:	2101      	movs	r1, #1
    ba90:	4620      	mov	r0, r4
    ba92:	f7ff ff2b 	bl	b8ec <SdioCard::stopTransmission(bool)>
      if (!syncDevice()) {
    ba96:	2800      	cmp	r0, #0
    ba98:	d1bf      	bne.n	ba1a <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
}
    ba9a:	4628      	mov	r0, r5
    ba9c:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    baa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!syncDevice()) {
    baa4:	4620      	mov	r0, r4
    baa6:	4790      	blx	r2
    baa8:	2800      	cmp	r0, #0
    baaa:	d0f6      	beq.n	ba9a <SdioCard::readSector(unsigned long, unsigned char*)+0xe6>
    baac:	e7b5      	b.n	ba1a <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
    baae:	bf00      	nop
    bab0:	113a0011 	.word	0x113a0011
    bab4:	0000b985 	.word	0x0000b985
    bab8:	2000c986 	.word	0x2000c986
    babc:	2005dff0 	.word	0x2005dff0
    bac0:	2005e53c 	.word	0x2005e53c

0000bac4 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    bac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bac8:	7a04      	ldrb	r4, [r0, #8]
    baca:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    bace:	460f      	mov	r7, r1
    bad0:	4690      	mov	r8, r2
  if (m_sdioConfig.useDma()) {
    bad2:	f014 0401 	ands.w	r4, r4, #1
    bad6:	d01d      	beq.n	bb14 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x50>
    if (3 & (uint32_t)src) {
    bad8:	f012 0f03 	tst.w	r2, #3
    badc:	d006      	beq.n	baec <SdioCard::writeSector(unsigned long, unsigned char const*)+0x28>
      memcpy(aligned, src, 512);
    bade:	4668      	mov	r0, sp
    bae0:	4611      	mov	r1, r2
    bae2:	f44f 7200 	mov.w	r2, #512	; 0x200
      ptr = aligned;
    bae6:	4680      	mov	r8, r0
      memcpy(aligned, src, 512);
    bae8:	f001 fd32 	bl	d550 <memcpy>
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    baec:	2301      	movs	r3, #1
    baee:	4642      	mov	r2, r8
    baf0:	4639      	mov	r1, r7
    baf2:	482c      	ldr	r0, [pc, #176]	; (bba4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe0>)
    baf4:	f7ff fb70 	bl	b1d8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    baf8:	4604      	mov	r4, r0
    bafa:	b930      	cbnz	r0, bb0a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
  m_errorCode = code;
    bafc:	492a      	ldr	r1, [pc, #168]	; (bba8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe4>)
    bafe:	200d      	movs	r0, #13
  m_errorLine = line;
    bb00:	4b2a      	ldr	r3, [pc, #168]	; (bbac <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe8>)
    bb02:	f240 4211 	movw	r2, #1041	; 0x411
  m_errorCode = code;
    bb06:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    bb08:	601a      	str	r2, [r3, #0]
}
    bb0a:	4620      	mov	r0, r4
    bb0c:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    bb10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_transferActive) {
    bb14:	4d26      	ldr	r5, [pc, #152]	; (bbb0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xec>)
    bb16:	4606      	mov	r6, r0
    bb18:	782b      	ldrb	r3, [r5, #0]
    bb1a:	bb2b      	cbnz	r3, bb68 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa4>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    bb1c:	7a73      	ldrb	r3, [r6, #9]
    bb1e:	2b02      	cmp	r3, #2
    bb20:	d029      	beq.n	bb76 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb2>
      if (!syncDevice()) {
    bb22:	6832      	ldr	r2, [r6, #0]
    bb24:	4923      	ldr	r1, [pc, #140]	; (bbb4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xf0>)
    bb26:	6a12      	ldr	r2, [r2, #32]
    bb28:	428a      	cmp	r2, r1
    bb2a:	d136      	bne.n	bb9a <SdioCard::writeSector(unsigned long, unsigned char const*)+0xd6>
  if (!m_transferActive) {
    bb2c:	782a      	ldrb	r2, [r5, #0]
    bb2e:	bb32      	cbnz	r2, bb7e <SdioCard::writeSector(unsigned long, unsigned char const*)+0xba>
  if (m_curState != IDLE_STATE) {
    bb30:	2b00      	cmp	r3, #0
    bb32:	d12b      	bne.n	bb8c <SdioCard::writeSector(unsigned long, unsigned char const*)+0xc8>
      if (!writeStart(sector )) {
    bb34:	6833      	ldr	r3, [r6, #0]
    bb36:	4639      	mov	r1, r7
    bb38:	4630      	mov	r0, r6
    bb3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    bb3c:	4798      	blx	r3
    bb3e:	2800      	cmp	r0, #0
    bb40:	d0e3      	beq.n	bb0a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
      m_curState = WRITE_STATE;
    bb42:	2302      	movs	r3, #2
      m_curSector = sector;
    bb44:	6077      	str	r7, [r6, #4]
      m_curState = WRITE_STATE;
    bb46:	7273      	strb	r3, [r6, #9]
    if (!writeData(src)) {
    bb48:	6833      	ldr	r3, [r6, #0]
    bb4a:	4641      	mov	r1, r8
    bb4c:	4630      	mov	r0, r6
    bb4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    bb50:	4798      	blx	r3
    bb52:	2800      	cmp	r0, #0
    bb54:	d0d9      	beq.n	bb0a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    m_curSector++;
    bb56:	6873      	ldr	r3, [r6, #4]
  return true;
    bb58:	4604      	mov	r4, r0
    m_curSector++;
    bb5a:	3301      	adds	r3, #1
}
    bb5c:	4620      	mov	r0, r4
    m_curSector++;
    bb5e:	6073      	str	r3, [r6, #4]
}
    bb60:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    bb64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bb68:	f7fe ffe6 	bl	ab38 <waitTransferComplete() [clone .part.0]>
    if (!waitTransferComplete()) {
    bb6c:	2800      	cmp	r0, #0
    bb6e:	d0cc      	beq.n	bb0a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    bb70:	7a73      	ldrb	r3, [r6, #9]
    bb72:	2b02      	cmp	r3, #2
    bb74:	d1d5      	bne.n	bb22 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
    bb76:	6872      	ldr	r2, [r6, #4]
    bb78:	42ba      	cmp	r2, r7
    bb7a:	d1d2      	bne.n	bb22 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
    bb7c:	e7e4      	b.n	bb48 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x84>
    bb7e:	f7fe ffdb 	bl	ab38 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    bb82:	2800      	cmp	r0, #0
    bb84:	d0c1      	beq.n	bb0a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
  if (m_curState != IDLE_STATE) {
    bb86:	7a73      	ldrb	r3, [r6, #9]
    bb88:	2b00      	cmp	r3, #0
    bb8a:	d0d3      	beq.n	bb34 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    return stopTransmission(true);
    bb8c:	2101      	movs	r1, #1
    bb8e:	4630      	mov	r0, r6
    bb90:	f7ff feac 	bl	b8ec <SdioCard::stopTransmission(bool)>
      if (!syncDevice()) {
    bb94:	2800      	cmp	r0, #0
    bb96:	d0b8      	beq.n	bb0a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    bb98:	e7cc      	b.n	bb34 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    bb9a:	4630      	mov	r0, r6
    bb9c:	4790      	blx	r2
    bb9e:	2800      	cmp	r0, #0
    bba0:	d0b3      	beq.n	bb0a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    bba2:	e7c7      	b.n	bb34 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    bba4:	183a0001 	.word	0x183a0001
    bba8:	2000c986 	.word	0x2000c986
    bbac:	2005dff0 	.word	0x2005dff0
    bbb0:	2005e53c 	.word	0x2005e53c
    bbb4:	0000b985 	.word	0x0000b985

0000bbb8 <sdCsInit(unsigned char)>:
#include "SdSpiDriver.h"
#if ENABLE_ARDUINO_FEATURES
#if SD_CHIP_SELECT_MODE == 0
//------------------------------------------------------------------------------
void sdCsInit(SdCsPin_t pin) {
  pinMode(pin, OUTPUT);
    bbb8:	2101      	movs	r1, #1
    bbba:	f001 b9f9 	b.w	cfb0 <pinMode>
    bbbe:	bf00      	nop

0000bbc0 <sdCsWrite(unsigned char, bool)>:
}
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level);
    bbc0:	f001 b9ba 	b.w	cf38 <digitalWrite>

0000bbc4 <SPIClass::beginTransaction(SPISettings)>:
	void notUsingInterrupt(IRQ_NUMBER_t interruptName);

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
    bbc4:	b430      	push	{r4, r5}
    bbc6:	b082      	sub	sp, #8
    bbc8:	460c      	mov	r4, r1
    bbca:	ab02      	add	r3, sp, #8
    bbcc:	e903 0006 	stmdb	r3, {r1, r2}
		if (interruptMasksUsed) {
    bbd0:	7cc3      	ldrb	r3, [r0, #19]
    bbd2:	2b00      	cmp	r3, #0
    bbd4:	d030      	beq.n	bc38 <SPIClass::beginTransaction(SPISettings)+0x74>
			__disable_irq();
    bbd6:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    bbd8:	7cc3      	ldrb	r3, [r0, #19]
    bbda:	07da      	lsls	r2, r3, #31
    bbdc:	d508      	bpl.n	bbf0 <SPIClass::beginTransaction(SPISettings)+0x2c>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    bbde:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    bbe2:	6945      	ldr	r5, [r0, #20]
    bbe4:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
    bbe8:	402a      	ands	r2, r5
    bbea:	6282      	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    bbec:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
			}
			if (interruptMasksUsed & 0x02) {
    bbf0:	079d      	lsls	r5, r3, #30
    bbf2:	d508      	bpl.n	bc06 <SPIClass::beginTransaction(SPISettings)+0x42>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    bbf4:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    bbf8:	6985      	ldr	r5, [r0, #24]
    bbfa:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
    bbfe:	402a      	ands	r2, r5
    bc00:	62c2      	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    bc02:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			}
			if (interruptMasksUsed & 0x04) {
    bc06:	0759      	lsls	r1, r3, #29
    bc08:	d508      	bpl.n	bc1c <SPIClass::beginTransaction(SPISettings)+0x58>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    bc0a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    bc0e:	69c5      	ldr	r5, [r0, #28]
    bc10:	f8d1 2188 	ldr.w	r2, [r1, #392]	; 0x188
    bc14:	402a      	ands	r2, r5
    bc16:	6302      	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    bc18:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			}
			if (interruptMasksUsed & 0x08) {
    bc1c:	071a      	lsls	r2, r3, #28
    bc1e:	d508      	bpl.n	bc32 <SPIClass::beginTransaction(SPISettings)+0x6e>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    bc20:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    bc24:	6a05      	ldr	r5, [r0, #32]
    bc26:	f8d1 218c 	ldr.w	r2, [r1, #396]	; 0x18c
    bc2a:	402a      	ands	r2, r5
    bc2c:	6342      	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    bc2e:	f8c1 218c 	str.w	r2, [r1, #396]	; 0x18c
			}
			if (interruptMasksUsed & 0x10) {
    bc32:	06db      	lsls	r3, r3, #27
    bc34:	d42f      	bmi.n	bc96 <SPIClass::beginTransaction(SPISettings)+0xd2>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    bc36:	b662      	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    bc38:	6883      	ldr	r3, [r0, #8]
    bc3a:	429c      	cmp	r4, r3
    bc3c:	d035      	beq.n	bcaa <SPIClass::beginTransaction(SPISettings)+0xe6>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    bc3e:	4b22      	ldr	r3, [pc, #136]	; (bcc8 <SPIClass::beginTransaction(SPISettings)+0x104>)
		    _clock = settings.clock();
    bc40:	6084      	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    bc42:	699b      	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    bc44:	4a21      	ldr	r2, [pc, #132]	; (bccc <SPIClass::beginTransaction(SPISettings)+0x108>)
    bc46:	f3c3 1101 	ubfx	r1, r3, #4, #2
    bc4a:	f3c3 6382 	ubfx	r3, r3, #26, #3
    bc4e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    bc52:	3301      	adds	r3, #1
    bc54:	fbb1 f2f3 	udiv	r2, r1, r3
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    bc58:	b1cc      	cbz	r4, bc8e <SPIClass::beginTransaction(SPISettings)+0xca>

			if (d && clkhz/d > _clock) d++;
    bc5a:	4294      	cmp	r4, r2
    bc5c:	d827      	bhi.n	bcae <SPIClass::beginTransaction(SPISettings)+0xea>
			d = _clock ? clkhz/_clock : clkhz;
    bc5e:	fbb2 f3f4 	udiv	r3, r2, r4
			if (d && clkhz/d > _clock) d++;
    bc62:	fbb2 f2f3 	udiv	r2, r2, r3
    bc66:	4294      	cmp	r4, r2
    bc68:	d32c      	bcc.n	bcc4 <SPIClass::beginTransaction(SPISettings)+0x100>
			if (d > 257) d= 257;  // max div
    bc6a:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    bc6e:	d320      	bcc.n	bcb2 <SPIClass::beginTransaction(SPISettings)+0xee>
    bc70:	4c17      	ldr	r4, [pc, #92]	; (bcd0 <SPIClass::beginTransaction(SPISettings)+0x10c>)
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    bc72:	60c4      	str	r4, [r0, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    bc74:	6803      	ldr	r3, [r0, #0]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    bc76:	2203      	movs	r2, #3
		port().CR = 0;
    bc78:	2000      	movs	r0, #0
		port().TCR = settings.tcr;
    bc7a:	9901      	ldr	r1, [sp, #4]
		port().CR = 0;
    bc7c:	6118      	str	r0, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    bc7e:	625a      	str	r2, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
    bc80:	2201      	movs	r2, #1
		port().CCR = _ccr;
    bc82:	641c      	str	r4, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    bc84:	6619      	str	r1, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    bc86:	611a      	str	r2, [r3, #16]
	}
    bc88:	b002      	add	sp, #8
    bc8a:	bc30      	pop	{r4, r5}
    bc8c:	4770      	bx	lr
			if (d && clkhz/d > _clock) d++;
    bc8e:	4299      	cmp	r1, r3
    bc90:	d3ef      	bcc.n	bc72 <SPIClass::beginTransaction(SPISettings)+0xae>
    bc92:	1c53      	adds	r3, r2, #1
    bc94:	e7e9      	b.n	bc6a <SPIClass::beginTransaction(SPISettings)+0xa6>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    bc96:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    bc9a:	6a41      	ldr	r1, [r0, #36]	; 0x24
    bc9c:	f8d2 3190 	ldr.w	r3, [r2, #400]	; 0x190
    bca0:	400b      	ands	r3, r1
    bca2:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    bca4:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
    bca8:	e7c5      	b.n	bc36 <SPIClass::beginTransaction(SPISettings)+0x72>
		port().CCR = _ccr;
    bcaa:	68c4      	ldr	r4, [r0, #12]
    bcac:	e7e2      	b.n	bc74 <SPIClass::beginTransaction(SPISettings)+0xb0>
    bcae:	2400      	movs	r4, #0
    bcb0:	e7df      	b.n	bc72 <SPIClass::beginTransaction(SPISettings)+0xae>
			if (d > 2) {
    bcb2:	2b02      	cmp	r3, #2
    bcb4:	d9fb      	bls.n	bcae <SPIClass::beginTransaction(SPISettings)+0xea>
				div = d-2;
    bcb6:	3b02      	subs	r3, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    bcb8:	085a      	lsrs	r2, r3, #1
    bcba:	0214      	lsls	r4, r2, #8
    bcbc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    bcc0:	431c      	orrs	r4, r3
    bcc2:	e7d6      	b.n	bc72 <SPIClass::beginTransaction(SPISettings)+0xae>
			d = _clock ? clkhz/_clock : clkhz;
    bcc4:	461a      	mov	r2, r3
    bcc6:	e7e4      	b.n	bc92 <SPIClass::beginTransaction(SPISettings)+0xce>
    bcc8:	400fc000 	.word	0x400fc000
    bccc:	20003470 	.word	0x20003470
    bcd0:	007f7fff 	.word	0x007f7fff

0000bcd4 <SdSpiArduinoDriver::activate()>:
 */
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
    bcd4:	b508      	push	{r3, lr}
  m_spi->beginTransaction(m_spiSettings);
    bcd6:	4603      	mov	r3, r0
    bcd8:	f853 0b04 	ldr.w	r0, [r3], #4
    bcdc:	e893 0006 	ldmia.w	r3, {r1, r2}
    bce0:	f7ff ff70 	bl	bbc4 <SPIClass::beginTransaction(SPISettings)>
}
    bce4:	bd08      	pop	{r3, pc}
    bce6:	bf00      	nop

0000bce8 <SdSpiArduinoDriver::begin(SdSpiConfig)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::begin(SdSpiConfig spiConfig) {
    bce8:	b084      	sub	sp, #16
    bcea:	f10d 0c10 	add.w	ip, sp, #16
    bcee:	e90c 000e 	stmdb	ip, {r1, r2, r3}
    bcf2:	4602      	mov	r2, r0
  if (spiConfig.spiPort) {
    bcf4:	b123      	cbz	r3, bd00 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x18>
    m_spi->setSCK(SDFAT_SDCARD_SCK_PIN);
#endif  // defined(SDFAT_SDCARD_SPI) && defined(SDFAT_SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
  }
  m_spi->begin();
    bcf6:	4618      	mov	r0, r3
    bcf8:	6013      	str	r3, [r2, #0]
}
    bcfa:	b004      	add	sp, #16
  m_spi->begin();
    bcfc:	f000 bb08 	b.w	c310 <SPIClass::begin()>
    m_spi = &SPI;
    bd00:	4b02      	ldr	r3, [pc, #8]	; (bd0c <SdSpiArduinoDriver::begin(SdSpiConfig)+0x24>)
  m_spi->begin();
    bd02:	4618      	mov	r0, r3
    bd04:	6013      	str	r3, [r2, #0]
}
    bd06:	b004      	add	sp, #16
  m_spi->begin();
    bd08:	f000 bb02 	b.w	c310 <SPIClass::begin()>
    bd0c:	2000bf88 	.word	0x2000bf88

0000bd10 <SdSpiArduinoDriver::deactivate()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    bd10:	6802      	ldr	r2, [r0, #0]
		if (interruptMasksUsed) {
    bd12:	7cd3      	ldrb	r3, [r2, #19]
    bd14:	b313      	cbz	r3, bd5c <SdSpiArduinoDriver::deactivate()+0x4c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    bd16:	07d8      	lsls	r0, r3, #31
    bd18:	d504      	bpl.n	bd24 <SdSpiArduinoDriver::deactivate()+0x14>
    bd1a:	6a90      	ldr	r0, [r2, #40]	; 0x28
    bd1c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    bd20:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    bd24:	0799      	lsls	r1, r3, #30
    bd26:	d504      	bpl.n	bd32 <SdSpiArduinoDriver::deactivate()+0x22>
    bd28:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    bd2a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    bd2e:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    bd32:	0758      	lsls	r0, r3, #29
    bd34:	d504      	bpl.n	bd40 <SdSpiArduinoDriver::deactivate()+0x30>
    bd36:	6b10      	ldr	r0, [r2, #48]	; 0x30
    bd38:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    bd3c:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    bd40:	0719      	lsls	r1, r3, #28
    bd42:	d504      	bpl.n	bd4e <SdSpiArduinoDriver::deactivate()+0x3e>
    bd44:	6b50      	ldr	r0, [r2, #52]	; 0x34
    bd46:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    bd4a:	f8c1 010c 	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    bd4e:	06db      	lsls	r3, r3, #27
    bd50:	d504      	bpl.n	bd5c <SdSpiArduinoDriver::deactivate()+0x4c>
    bd52:	6b92      	ldr	r2, [r2, #56]	; 0x38
    bd54:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    bd58:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
    bd5c:	4770      	bx	lr
    bd5e:	bf00      	nop

0000bd60 <SdSpiArduinoDriver::end()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::end() {
  m_spi->end();
    bd60:	6800      	ldr	r0, [r0, #0]
    bd62:	f000 bbf3 	b.w	c54c <SPIClass::end()>
    bd66:	bf00      	nop

0000bd68 <SdSpiArduinoDriver::receive()>:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    bd68:	6802      	ldr	r2, [r0, #0]
		port().TDR = data;
    bd6a:	23ff      	movs	r3, #255	; 0xff
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    bd6c:	6812      	ldr	r2, [r2, #0]
		port().TDR = data;
    bd6e:	6653      	str	r3, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    bd70:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    bd72:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    bd76:	d0fb      	beq.n	bd70 <SdSpiArduinoDriver::receive()+0x8>
    bd78:	6f50      	ldr	r0, [r2, #116]	; 0x74
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
  return m_spi->transfer(0XFF);
}
    bd7a:	b2c0      	uxtb	r0, r0
    bd7c:	4770      	bx	lr
    bd7e:	bf00      	nop

0000bd80 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    bd80:	b530      	push	{r4, r5, lr}
    bd82:	460c      	mov	r4, r1
    bd84:	b083      	sub	sp, #12
    bd86:	4605      	mov	r5, r0
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    bd88:	21ff      	movs	r1, #255	; 0xff
    bd8a:	4620      	mov	r0, r4
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    bd8c:	9201      	str	r2, [sp, #4]
  memset(buf, 0XFF, count);
    bd8e:	f005 f911 	bl	10fb4 <memset>
		transfer(buf, buf, count);
    bd92:	6828      	ldr	r0, [r5, #0]
    bd94:	9b01      	ldr	r3, [sp, #4]
    bd96:	4622      	mov	r2, r4
    bd98:	4621      	mov	r1, r4
    bd9a:	f000 fbd3 	bl	c544 <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    bd9e:	2000      	movs	r0, #0
    bda0:	b003      	add	sp, #12
    bda2:	bd30      	pop	{r4, r5, pc}

0000bda4 <SdSpiArduinoDriver::send(unsigned char)>:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    bda4:	6803      	ldr	r3, [r0, #0]
    bda6:	681a      	ldr	r2, [r3, #0]
		port().TDR = data;
    bda8:	6651      	str	r1, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    bdaa:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    bdac:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    bdb0:	d0fb      	beq.n	bdaa <SdSpiArduinoDriver::send(unsigned char)+0x6>
    bdb2:	6f53      	ldr	r3, [r2, #116]	; 0x74
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
}
    bdb4:	4770      	bx	lr
    bdb6:	bf00      	nop

0000bdb8 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    bdb8:	1e53      	subs	r3, r2, #1
    bdba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    bdbe:	b530      	push	{r4, r5, lr}
    bdc0:	4614      	mov	r4, r2
    bdc2:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
    bdc6:	4605      	mov	r5, r0
  if (0 < count && count <= 512) {
    bdc8:	d311      	bcc.n	bdee <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x36>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    bdca:	b16a      	cbz	r2, bde8 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x30>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    bdcc:	6803      	ldr	r3, [r0, #0]
    bdce:	1e48      	subs	r0, r1, #1
    bdd0:	6819      	ldr	r1, [r3, #0]
    bdd2:	1882      	adds	r2, r0, r2
		port().TDR = data;
    bdd4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    bdd8:	664b      	str	r3, [r1, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    bdda:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    bddc:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    bde0:	d0fb      	beq.n	bdda <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x22>
    bde2:	4290      	cmp	r0, r2
    bde4:	6f4b      	ldr	r3, [r1, #116]	; 0x74
    bde6:	d1f5      	bne.n	bdd4 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1c>
    m_spi->transfer(buf[i]);
  }
}
    bde8:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
    bdec:	bd30      	pop	{r4, r5, pc}
    memcpy(tmp, buf, count);
    bdee:	4668      	mov	r0, sp
    bdf0:	f001 fbae 	bl	d550 <memcpy>
		transfer(buf, buf, count);
    bdf4:	466a      	mov	r2, sp
    bdf6:	4623      	mov	r3, r4
    bdf8:	6828      	ldr	r0, [r5, #0]
    bdfa:	4611      	mov	r1, r2
    bdfc:	f000 fba2 	bl	c544 <SPIClass::transfer(void const*, void*, unsigned int)>
}
    be00:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
    be04:	bd30      	pop	{r4, r5, pc}
    be06:	bf00      	nop

0000be08 <FsCache::sync()>:

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    be08:	b530      	push	{r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    be0a:	7803      	ldrb	r3, [r0, #0]
bool FsCache::sync() {
    be0c:	b083      	sub	sp, #12
  if (m_status & CACHE_STATUS_DIRTY) {
    be0e:	07dc      	lsls	r4, r3, #31
    be10:	d51d      	bpl.n	be4e <FsCache::sync()+0x46>
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    be12:	4604      	mov	r4, r0
    be14:	6840      	ldr	r0, [r0, #4]
    be16:	f104 0210 	add.w	r2, r4, #16
    be1a:	6803      	ldr	r3, [r0, #0]
    be1c:	68e1      	ldr	r1, [r4, #12]
    be1e:	9201      	str	r2, [sp, #4]
    be20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    be22:	4798      	blx	r3
    be24:	9a01      	ldr	r2, [sp, #4]
    be26:	4605      	mov	r5, r0
    be28:	b1a8      	cbz	r0, be56 <FsCache::sync()+0x4e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    be2a:	7823      	ldrb	r3, [r4, #0]
    be2c:	0799      	lsls	r1, r3, #30
    be2e:	d508      	bpl.n	be42 <FsCache::sync()+0x3a>
      uint32_t sector = m_sector + m_mirrorOffset;
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    be30:	6860      	ldr	r0, [r4, #4]
      uint32_t sector = m_sector + m_mirrorOffset;
    be32:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    be36:	4419      	add	r1, r3
    be38:	6803      	ldr	r3, [r0, #0]
    be3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    be3c:	4798      	blx	r3
    be3e:	b150      	cbz	r0, be56 <FsCache::sync()+0x4e>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    be40:	7823      	ldrb	r3, [r4, #0]
    be42:	f023 0301 	bic.w	r3, r3, #1
  }
  return true;

 fail:
  return false;
}
    be46:	4628      	mov	r0, r5
    m_status &= ~CACHE_STATUS_DIRTY;
    be48:	7023      	strb	r3, [r4, #0]
}
    be4a:	b003      	add	sp, #12
    be4c:	bd30      	pop	{r4, r5, pc}
  return true;
    be4e:	2501      	movs	r5, #1
}
    be50:	4628      	mov	r0, r5
    be52:	b003      	add	sp, #12
    be54:	bd30      	pop	{r4, r5, pc}
  return false;
    be56:	2500      	movs	r5, #0
}
    be58:	4628      	mov	r0, r5
    be5a:	b003      	add	sp, #12
    be5c:	bd30      	pop	{r4, r5, pc}
    be5e:	bf00      	nop

0000be60 <FsCache::prepare(unsigned long, unsigned char)>:
uint8_t* FsCache::prepare(uint32_t sector, uint8_t option) {
    be60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (!m_blockDev) {
    be62:	6843      	ldr	r3, [r0, #4]
    be64:	b30b      	cbz	r3, beaa <FsCache::prepare(unsigned long, unsigned char)+0x4a>
  if (m_sector != sector) {
    be66:	68c3      	ldr	r3, [r0, #12]
    be68:	4604      	mov	r4, r0
    be6a:	460f      	mov	r7, r1
    be6c:	4615      	mov	r5, r2
    be6e:	428b      	cmp	r3, r1
    be70:	d106      	bne.n	be80 <FsCache::prepare(unsigned long, unsigned char)+0x20>
  m_status |= option & CACHE_STATUS_MASK;
    be72:	f810 3b10 	ldrb.w	r3, [r0], #16
    be76:	f005 0503 	and.w	r5, r5, #3
    be7a:	432b      	orrs	r3, r5
    be7c:	7023      	strb	r3, [r4, #0]
}
    be7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!sync()) {
    be80:	f7ff ffc2 	bl	be08 <FsCache::sync()>
    be84:	b188      	cbz	r0, beaa <FsCache::prepare(unsigned long, unsigned char)+0x4a>
    if (!(option & CACHE_OPTION_NO_READ)) {
    be86:	076b      	lsls	r3, r5, #29
    be88:	d505      	bpl.n	be96 <FsCache::prepare(unsigned long, unsigned char)+0x36>
    be8a:	f104 0610 	add.w	r6, r4, #16
      if (!m_blockDev->readSector(sector, m_buffer)) {
    be8e:	4630      	mov	r0, r6
    m_sector = sector;
    be90:	2300      	movs	r3, #0
    be92:	60e7      	str	r7, [r4, #12]
    be94:	e7ef      	b.n	be76 <FsCache::prepare(unsigned long, unsigned char)+0x16>
      if (!m_blockDev->readSector(sector, m_buffer)) {
    be96:	6860      	ldr	r0, [r4, #4]
    be98:	f104 0610 	add.w	r6, r4, #16
    be9c:	4639      	mov	r1, r7
    be9e:	6803      	ldr	r3, [r0, #0]
    bea0:	4632      	mov	r2, r6
    bea2:	691b      	ldr	r3, [r3, #16]
    bea4:	4798      	blx	r3
    bea6:	2800      	cmp	r0, #0
    bea8:	d1f1      	bne.n	be8e <FsCache::prepare(unsigned long, unsigned char)+0x2e>
  return nullptr;
    beaa:	2000      	movs	r0, #0
}
    beac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    beae:	bf00      	nop

0000beb0 <dateTimeMs10(unsigned short*, unsigned short*, unsigned char*)>:
  *ms10 = 0;
    beb0:	f04f 0c00 	mov.w	ip, #0
  FsDateTime::callback2(date, time);
    beb4:	4b02      	ldr	r3, [pc, #8]	; (bec0 <dateTimeMs10(unsigned short*, unsigned short*, unsigned char*)+0x10>)
  *ms10 = 0;
    beb6:	f882 c000 	strb.w	ip, [r2]
  FsDateTime::callback2(date, time);
    beba:	681b      	ldr	r3, [r3, #0]
    bebc:	4718      	bx	r3
    bebe:	bf00      	nop
    bec0:	2005e028 	.word	0x2005e028

0000bec4 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))>:
    callback = dateTimeMs10;
    bec4:	4a02      	ldr	r2, [pc, #8]	; (bed0 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))+0xc>)
    bec6:	4903      	ldr	r1, [pc, #12]	; (bed4 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))+0x10>)
    callback2 = dateTime;
    bec8:	4b03      	ldr	r3, [pc, #12]	; (bed8 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))+0x14>)
    callback = dateTimeMs10;
    beca:	6011      	str	r1, [r2, #0]
    callback2 = dateTime;
    becc:	6018      	str	r0, [r3, #0]
  }
    bece:	4770      	bx	lr
    bed0:	2005e024 	.word	0x2005e024
    bed4:	0000beb1 	.word	0x0000beb1
    bed8:	2005e028 	.word	0x2005e028

0000bedc <FsName::get16()>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsName.h"
#include "FsUtf.h"
#if USE_UTF8_LONG_NAMES
uint16_t FsName::get16() {
    bedc:	b510      	push	{r4, lr}
    bede:	4604      	mov	r4, r0
  uint16_t rtn;
  if (ls) {
    bee0:	8980      	ldrh	r0, [r0, #12]
uint16_t FsName::get16() {
    bee2:	b082      	sub	sp, #8
  if (ls) {
    bee4:	b118      	cbz	r0, beee <FsName::get16()+0x12>
    rtn = ls;
    ls = 0;
    bee6:	2300      	movs	r3, #0
    bee8:	81a3      	strh	r3, [r4, #12]
  }
  return rtn;

 fail:
  return 0XFFFF;
}
    beea:	b002      	add	sp, #8
    beec:	bd10      	pop	{r4, pc}
  } else if (next >= end) {
    beee:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    bef2:	428b      	cmp	r3, r1
    bef4:	d2f9      	bcs.n	beea <FsName::get16()+0xe>
    const char* ptr = FsUtf::mbToCp(next, end, &cp);
    bef6:	aa01      	add	r2, sp, #4
    bef8:	4618      	mov	r0, r3
    befa:	f000 f8b7 	bl	c06c <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!ptr) {
    befe:	b180      	cbz	r0, bf22 <FsName::get16()+0x46>
    if (cp <= 0XFFFF) {
    bf00:	9b01      	ldr	r3, [sp, #4]
    next = ptr;
    bf02:	6060      	str	r0, [r4, #4]
    if (cp <= 0XFFFF) {
    bf04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    bf08:	d201      	bcs.n	bf0e <FsName::get16()+0x32>
      rtn = cp;
    bf0a:	b298      	uxth	r0, r3
    bf0c:	e7ed      	b.n	beea <FsName::get16()+0xe>
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    bf0e:	0a98      	lsrs	r0, r3, #10
    return (cp & 0X3FF) + 0XDC00;
    bf10:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    bf14:	f5a0 5021 	sub.w	r0, r0, #10304	; 0x2840
    return (cp & 0X3FF) + 0XDC00;
    bf18:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    bf1c:	b280      	uxth	r0, r0
      ls = FsUtf::lowSurrogate(cp);
    bf1e:	81a3      	strh	r3, [r4, #12]
    bf20:	e7e3      	b.n	beea <FsName::get16()+0xe>
  return 0XFFFF;
    bf22:	f64f 70ff 	movw	r0, #65535	; 0xffff
    bf26:	e7e0      	b.n	beea <FsName::get16()+0xe>

0000bf28 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>:
  uint32_t c;
  uint8_t h;
  uint8_t s;

  uint8_t numberOfHeads;
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    bf28:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    bf2c:	d821      	bhi.n	bf72 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x4a>
  if (capacityMB <= 16) {
    bf2e:	2910      	cmp	r1, #16
    bf30:	d82e      	bhi.n	bf90 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x68>
    bf32:	2340      	movs	r3, #64	; 0x40
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    bf34:	f04f 0c20 	mov.w	ip, #32
  } else if (capacityMB <= 4032) {
    numberOfHeads = 128;
  } else {
    numberOfHeads = 255;
  }
  c = lba / (numberOfHeads * sectorsPerTrack);
    bf38:	fbb2 f1f3 	udiv	r1, r2, r3
  if (c <= 1023) {
    bf3c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    bf40:	d220      	bcs.n	bf84 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x5c>
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
    bf42:	fb03 2311 	mls	r3, r3, r1, r2
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba) {
    bf46:	b500      	push	{lr}
    s = (lba % sectorsPerTrack) + 1;
    bf48:	fbb2 fefc 	udiv	lr, r2, ip
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
    bf4c:	fbb3 f3fc 	udiv	r3, r3, ip
    s = (lba % sectorsPerTrack) + 1;
    bf50:	fb0c 221e 	mls	r2, ip, lr, r2
    c = 1023;
    h = 254;
    s = 63;
  }
  chs[0] = h;
  chs[1] = ((c >> 2) & 0XC0) | s;
    bf54:	ea4f 0c91 	mov.w	ip, r1, lsr #2
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
    bf58:	b2db      	uxtb	r3, r3
    s = (lba % sectorsPerTrack) + 1;
    bf5a:	3201      	adds	r2, #1
  chs[1] = ((c >> 2) & 0XC0) | s;
    bf5c:	f02c 0c3f 	bic.w	ip, ip, #63	; 0x3f
  chs[2] = c;
    bf60:	b2c9      	uxtb	r1, r1
  chs[0] = h;
    bf62:	7003      	strb	r3, [r0, #0]
  chs[1] = ((c >> 2) & 0XC0) | s;
    bf64:	ea42 020c 	orr.w	r2, r2, ip
  chs[2] = c;
    bf68:	7081      	strb	r1, [r0, #2]
  chs[1] = ((c >> 2) & 0XC0) | s;
    bf6a:	b2d2      	uxtb	r2, r2
    bf6c:	7042      	strb	r2, [r0, #1]
}
    bf6e:	f85d fb04 	ldr.w	pc, [sp], #4
    bf72:	233f      	movs	r3, #63	; 0x3f
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    bf74:	469c      	mov	ip, r3
  } else if (capacityMB <= 128) {
    bf76:	2980      	cmp	r1, #128	; 0x80
    bf78:	d910      	bls.n	bf9c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x74>
  } else if (capacityMB <= 504) {
    bf7a:	f5b1 7ffc 	cmp.w	r1, #504	; 0x1f8
    bf7e:	d80f      	bhi.n	bfa0 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x78>
  c = lba / (numberOfHeads * sectorsPerTrack);
    bf80:	011b      	lsls	r3, r3, #4
    bf82:	e7d9      	b.n	bf38 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
    bf84:	21ff      	movs	r1, #255	; 0xff
    h = 254;
    bf86:	23fe      	movs	r3, #254	; 0xfe
  chs[1] = ((c >> 2) & 0XC0) | s;
    bf88:	7041      	strb	r1, [r0, #1]
  chs[0] = h;
    bf8a:	7003      	strb	r3, [r0, #0]
  chs[2] = c;
    bf8c:	7081      	strb	r1, [r0, #2]
    bf8e:	4770      	bx	lr
  } else if (capacityMB <= 32) {
    bf90:	2920      	cmp	r1, #32
    bf92:	d816      	bhi.n	bfc2 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x9a>
    bf94:	2380      	movs	r3, #128	; 0x80
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    bf96:	f04f 0c20 	mov.w	ip, #32
    bf9a:	e7cd      	b.n	bf38 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
  c = lba / (numberOfHeads * sectorsPerTrack);
    bf9c:	00db      	lsls	r3, r3, #3
    bf9e:	e7cb      	b.n	bf38 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
  } else if (capacityMB <= 1008) {
    bfa0:	f5b1 7f7c 	cmp.w	r1, #1008	; 0x3f0
    bfa4:	d904      	bls.n	bfb0 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x88>
  } else if (capacityMB <= 2016) {
    bfa6:	f5b1 6ffc 	cmp.w	r1, #2016	; 0x7e0
    bfaa:	d803      	bhi.n	bfb4 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x8c>
  c = lba / (numberOfHeads * sectorsPerTrack);
    bfac:	019b      	lsls	r3, r3, #6
    bfae:	e7c3      	b.n	bf38 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
    bfb0:	015b      	lsls	r3, r3, #5
    bfb2:	e7c1      	b.n	bf38 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
  } else if (capacityMB <= 4032) {
    bfb4:	f5b1 6f7c 	cmp.w	r1, #4032	; 0xfc0
  c = lba / (numberOfHeads * sectorsPerTrack);
    bfb8:	bf94      	ite	ls
    bfba:	01db      	lslls	r3, r3, #7
    bfbc:	ebc3 2303 	rsbhi	r3, r3, r3, lsl #8
    bfc0:	e7ba      	b.n	bf38 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
    bfc2:	2320      	movs	r3, #32
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    bfc4:	469c      	mov	ip, r3
    bfc6:	e7d6      	b.n	bf76 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x4e>

0000bfc8 <FsUtf::cpToMb(unsigned long, char*, char*)>:
    if (cp < 0X80) {
    bfc8:	287f      	cmp	r0, #127	; 0x7f
    size_t n = end - str;
    bfca:	eba2 0201 	sub.w	r2, r2, r1
    if (cp < 0X80) {
    bfce:	d805      	bhi.n	bfdc <FsUtf::cpToMb(unsigned long, char*, char*)+0x14>
      if (n < 1) goto fail;
    bfd0:	b112      	cbz	r2, bfd8 <FsUtf::cpToMb(unsigned long, char*, char*)+0x10>
      *(str++) = static_cast<uint8_t>(cp);
    bfd2:	460a      	mov	r2, r1
    bfd4:	f802 0b01 	strb.w	r0, [r2], #1
  }
    bfd8:	4610      	mov	r0, r2
    bfda:	4770      	bx	lr
    } else if (cp < 0X800) {
    bfdc:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    bfe0:	d20f      	bcs.n	c002 <FsUtf::cpToMb(unsigned long, char*, char*)+0x3a>
      if (n < 2) goto fail;
    bfe2:	2a01      	cmp	r2, #1
    bfe4:	d940      	bls.n	c068 <FsUtf::cpToMb(unsigned long, char*, char*)+0xa0>
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    bfe6:	ea4f 1c90 	mov.w	ip, r0, lsr #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    bfea:	f000 033f 	and.w	r3, r0, #63	; 0x3f
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    bfee:	460a      	mov	r2, r1
    bff0:	f06c 003f 	orn	r0, ip, #63	; 0x3f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    bff4:	f063 037f 	orn	r3, r3, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    bff8:	f802 0b02 	strb.w	r0, [r2], #2
  }
    bffc:	4610      	mov	r0, r2
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    bffe:	704b      	strb	r3, [r1, #1]
  }
    c000:	4770      	bx	lr
    } else if (cp < 0X10000) {
    c002:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    c006:	d216      	bcs.n	c036 <FsUtf::cpToMb(unsigned long, char*, char*)+0x6e>
      if (n < 3) goto fail;
    c008:	2a02      	cmp	r2, #2
    c00a:	d92d      	bls.n	c068 <FsUtf::cpToMb(unsigned long, char*, char*)+0xa0>
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    c00c:	f3c0 1c85 	ubfx	ip, r0, #6, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    c010:	f000 033f 	and.w	r3, r0, #63	; 0x3f
    c014:	1cca      	adds	r2, r1, #3
    c016:	f063 037f 	orn	r3, r3, #127	; 0x7f
  char* cpToMb(uint32_t cp, char* str, char* end) {
    c01a:	b500      	push	{lr}
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    c01c:	ea4f 3e10 	mov.w	lr, r0, lsr #12
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    c020:	f06c 007f 	orn	r0, ip, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    c024:	708b      	strb	r3, [r1, #2]
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    c026:	f06e 0e1f 	orn	lr, lr, #31
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    c02a:	7048      	strb	r0, [r1, #1]
  }
    c02c:	4610      	mov	r0, r2
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    c02e:	f881 e000 	strb.w	lr, [r1]
  }
    c032:	f85d fb04 	ldr.w	pc, [sp], #4
       if (n < 4) goto fail;
    c036:	2a03      	cmp	r2, #3
    c038:	d916      	bls.n	c068 <FsUtf::cpToMb(unsigned long, char*, char*)+0xa0>
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    c03a:	ea4f 4c90 	mov.w	ip, r0, lsr #18
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
    c03e:	f3c0 3205 	ubfx	r2, r0, #12, #6
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    c042:	f3c0 1385 	ubfx	r3, r0, #6, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    c046:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
    c04a:	f062 027f 	orn	r2, r2, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    c04e:	f06c 0c0f 	orn	ip, ip, #15
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    c052:	f063 037f 	orn	r3, r3, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    c056:	f060 007f 	orn	r0, r0, #127	; 0x7f
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
    c05a:	704a      	strb	r2, [r1, #1]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    c05c:	1d0a      	adds	r2, r1, #4
    c05e:	70c8      	strb	r0, [r1, #3]
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    c060:	f881 c000 	strb.w	ip, [r1]
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    c064:	708b      	strb	r3, [r1, #2]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    c066:	e7b7      	b.n	bfd8 <FsUtf::cpToMb(unsigned long, char*, char*)+0x10>
    return nullptr;
    c068:	2200      	movs	r2, #0
    c06a:	e7b5      	b.n	bfd8 <FsUtf::cpToMb(unsigned long, char*, char*)+0x10>

0000c06c <FsUtf::mbToCp(char const*, char const*, unsigned long*)>:
    if (str >= end) {
    c06c:	4288      	cmp	r0, r1
    c06e:	d23d      	bcs.n	c0ec <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x80>
    c070:	4603      	mov	r3, r0
  const char* mbToCp(const char* str, const char* end, uint32_t* rtn) {
    c072:	b410      	push	{r4}
    if ((ch & 0X80) == 0) {
    c074:	f990 0000 	ldrsb.w	r0, [r0]
    uint8_t ch = str[0];
    c078:	781c      	ldrb	r4, [r3, #0]
    if ((ch & 0X80) == 0) {
    c07a:	2800      	cmp	r0, #0
    c07c:	da2d      	bge.n	c0da <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x6e>
    if ((ch & 0XE0) == 0XC0) {
    c07e:	f004 00e0 	and.w	r0, r4, #224	; 0xe0
    c082:	28c0      	cmp	r0, #192	; 0xc0
    c084:	d034      	beq.n	c0f0 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x84>
    } else if ((ch & 0XF0) == 0XE0) {
    c086:	f004 00f0 	and.w	r0, r4, #240	; 0xf0
    c08a:	28e0      	cmp	r0, #224	; 0xe0
    c08c:	d034      	beq.n	c0f8 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x8c>
    } else if ((ch & 0XF8) == 0XF0) {
    c08e:	f004 00f8 	and.w	r0, r4, #248	; 0xf8
    c092:	28f0      	cmp	r0, #240	; 0xf0
    c094:	d126      	bne.n	c0e4 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
      cp = ch & 0X07;
    c096:	f004 0407 	and.w	r4, r4, #7
      n = 4;
    c09a:	2004      	movs	r0, #4
    if ((str + n) > end) {
    c09c:	4418      	add	r0, r3
    c09e:	4288      	cmp	r0, r1
    c0a0:	d820      	bhi.n	c0e4 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
    c0a2:	3301      	adds	r3, #1
      ch = str[i];
    c0a4:	f813 1b01 	ldrb.w	r1, [r3], #1
      if ((ch & 0XC0) != 0X80) {
    c0a8:	f001 0cc0 	and.w	ip, r1, #192	; 0xc0
      cp |= ch & 0X3F;
    c0ac:	f001 013f 	and.w	r1, r1, #63	; 0x3f
      if ((ch & 0XC0) != 0X80) {
    c0b0:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
      cp |= ch & 0X3F;
    c0b4:	ea41 1484 	orr.w	r4, r1, r4, lsl #6
      if ((ch & 0XC0) != 0X80) {
    c0b8:	d114      	bne.n	c0e4 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
    for (size_t i = 1; i < n; i++) {
    c0ba:	4283      	cmp	r3, r0
    c0bc:	d1f2      	bne.n	c0a4 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x38>
    if (cp < 0X80 || !isValidCp(cp)) {
    c0be:	f1a4 0180 	sub.w	r1, r4, #128	; 0x80
    c0c2:	4b0f      	ldr	r3, [pc, #60]	; (c100 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x94>)
    c0c4:	4299      	cmp	r1, r3
    c0c6:	d80d      	bhi.n	c0e4 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
    return cp <= 0x10FFFF && (cp < 0XD800 || cp > 0XDFFF);
    c0c8:	f5a4 4358 	sub.w	r3, r4, #55296	; 0xd800
    c0cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    c0d0:	d308      	bcc.n	c0e4 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
    *rtn = cp;
    c0d2:	6014      	str	r4, [r2, #0]
  }
    c0d4:	f85d 4b04 	ldr.w	r4, [sp], #4
    c0d8:	4770      	bx	lr
      return str + 1;
    c0da:	1c58      	adds	r0, r3, #1
      *rtn = ch;
    c0dc:	6014      	str	r4, [r2, #0]
  }
    c0de:	f85d 4b04 	ldr.w	r4, [sp], #4
    c0e2:	4770      	bx	lr
      return nullptr;
    c0e4:	2000      	movs	r0, #0
  }
    c0e6:	f85d 4b04 	ldr.w	r4, [sp], #4
    c0ea:	4770      	bx	lr
      return nullptr;
    c0ec:	2000      	movs	r0, #0
  }
    c0ee:	4770      	bx	lr
      cp = ch & 0X1F;
    c0f0:	f004 041f 	and.w	r4, r4, #31
      n = 2;
    c0f4:	2002      	movs	r0, #2
    c0f6:	e7d1      	b.n	c09c <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x30>
      cp = ch & 0X0F;
    c0f8:	f004 040f 	and.w	r4, r4, #15
      n = 3;
    c0fc:	2003      	movs	r0, #3
    c0fe:	e7cd      	b.n	c09c <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x30>
    c100:	0010ff7f 	.word	0x0010ff7f

0000c104 <toUpcase(unsigned short)>:
}
//------------------------------------------------------------------------------
uint16_t toUpcase(uint16_t chr) {
  uint16_t i, first;
  // Optimize for simple ASCII.
  if (chr < 127) {
    c104:	287e      	cmp	r0, #126	; 0x7e
    c106:	d93e      	bls.n	c186 <toUpcase(unsigned short)+0x82>
  size_t right = size;
    c108:	f04f 0c35 	mov.w	ip, #53	; 0x35
  size_t left = 0;
    c10c:	2300      	movs	r3, #0
uint16_t toUpcase(uint16_t chr) {
    c10e:	b430      	push	{r4, r5}
    c110:	4c28      	ldr	r4, [pc, #160]	; (c1b4 <toUpcase(unsigned short)+0xb0>)
    c112:	e004      	b.n	c11e <toUpcase(unsigned short)+0x1a>
    if (readTable16(table[mid].key) <= key) {
    c114:	f834 2021 	ldrh.w	r2, [r4, r1, lsl #2]
    c118:	4282      	cmp	r2, r0
    c11a:	d820      	bhi.n	c15e <toUpcase(unsigned short)+0x5a>
    mid = left + (right - left)/2;
    c11c:	460b      	mov	r3, r1
  while (right - left > 1) {
    c11e:	ebac 0203 	sub.w	r2, ip, r3
    c122:	2a01      	cmp	r2, #1
    mid = left + (right - left)/2;
    c124:	eb03 0152 	add.w	r1, r3, r2, lsr #1
  while (right - left > 1) {
    c128:	d8f4      	bhi.n	c114 <toUpcase(unsigned short)+0x10>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
  }
  i = searchPair16(reinterpret_cast<const pair16_t*>(mapTable), MAP_DIM, chr);
  first = readTable16(mapTable[i].base);
    c12a:	b29b      	uxth	r3, r3
    c12c:	f834 2023 	ldrh.w	r2, [r4, r3, lsl #2]
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    c130:	4290      	cmp	r0, r2
    c132:	d216      	bcs.n	c162 <toUpcase(unsigned short)+0x5e>
    c134:	244b      	movs	r4, #75	; 0x4b
    c136:	2300      	movs	r3, #0
    c138:	4d1f      	ldr	r5, [pc, #124]	; (c1b8 <toUpcase(unsigned short)+0xb4>)
    c13a:	e004      	b.n	c146 <toUpcase(unsigned short)+0x42>
    if (readTable16(table[mid].key) <= key) {
    c13c:	f835 2021 	ldrh.w	r2, [r5, r1, lsl #2]
    c140:	4282      	cmp	r2, r0
    c142:	d81e      	bhi.n	c182 <toUpcase(unsigned short)+0x7e>
    mid = left + (right - left)/2;
    c144:	460b      	mov	r3, r1
  while (right - left > 1) {
    c146:	1ae2      	subs	r2, r4, r3
    c148:	2a01      	cmp	r2, #1
    mid = left + (right - left)/2;
    c14a:	eb03 0152 	add.w	r1, r3, r2, lsr #1
  while (right - left > 1) {
    c14e:	d8f5      	bhi.n	c13c <toUpcase(unsigned short)+0x38>
      return chr - ((chr - first) & 1);
    }
    return chr + (off ? off : -0x1C60);
  }
  i = searchPair16(lookupTable, LOOKUP_DIM, chr);
  if (readTable16(lookupTable[i].key) == chr) {
    c150:	b29b      	uxth	r3, r3
    c152:	f835 2023 	ldrh.w	r2, [r5, r3, lsl #2]
    c156:	4282      	cmp	r2, r0
    c158:	d01f      	beq.n	c19a <toUpcase(unsigned short)+0x96>
    return readTable16(lookupTable[i].val);
  }
  return chr;
}
    c15a:	bc30      	pop	{r4, r5}
    c15c:	4770      	bx	lr
    mid = left + (right - left)/2;
    c15e:	468c      	mov	ip, r1
    c160:	e7dd      	b.n	c11e <toUpcase(unsigned short)+0x1a>
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    c162:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    c166:	1a82      	subs	r2, r0, r2
    c168:	78e3      	ldrb	r3, [r4, #3]
    c16a:	429a      	cmp	r2, r3
    c16c:	dae2      	bge.n	c134 <toUpcase(unsigned short)+0x30>
    int8_t off = readTable8(mapTable[i].off);
    c16e:	f994 3002 	ldrsb.w	r3, [r4, #2]
    if (off == 1) {
    c172:	2b01      	cmp	r3, #1
    c174:	d016      	beq.n	c1a4 <toUpcase(unsigned short)+0xa0>
    return chr + (off ? off : -0x1C60);
    c176:	b1d3      	cbz	r3, c1ae <toUpcase(unsigned short)+0xaa>
    c178:	b29b      	uxth	r3, r3
    c17a:	4403      	add	r3, r0
}
    c17c:	bc30      	pop	{r4, r5}
    return chr + (off ? off : -0x1C60);
    c17e:	b298      	uxth	r0, r3
}
    c180:	4770      	bx	lr
    mid = left + (right - left)/2;
    c182:	460c      	mov	r4, r1
    c184:	e7df      	b.n	c146 <toUpcase(unsigned short)+0x42>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
    c186:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
    c18a:	2b19      	cmp	r3, #25
    c18c:	bf8c      	ite	hi
    c18e:	2300      	movhi	r3, #0
    c190:	2301      	movls	r3, #1
    c192:	eba0 1343 	sub.w	r3, r0, r3, lsl #5
    c196:	b298      	uxth	r0, r3
}
    c198:	4770      	bx	lr
    return readTable16(lookupTable[i].val);
    c19a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    c19e:	8868      	ldrh	r0, [r5, #2]
}
    c1a0:	bc30      	pop	{r4, r5}
    c1a2:	4770      	bx	lr
      return chr - ((chr - first) & 1);
    c1a4:	f002 0201 	and.w	r2, r2, #1
    c1a8:	1a83      	subs	r3, r0, r2
    c1aa:	b298      	uxth	r0, r3
    c1ac:	e7d5      	b.n	c15a <toUpcase(unsigned short)+0x56>
    return chr + (off ? off : -0x1C60);
    c1ae:	f24e 33a0 	movw	r3, #58272	; 0xe3a0
    c1b2:	e7e2      	b.n	c17a <toUpcase(unsigned short)+0x76>
    c1b4:	20002ffc 	.word	0x20002ffc
    c1b8:	20001cc4 	.word	0x20001cc4

0000c1bc <EventResponder::triggerEvent(int, void*)>:
		if (_type == EventTypeImmediate) {
    c1bc:	f890 c01c 	ldrb.w	ip, [r0, #28]
		_status = status;
    c1c0:	6041      	str	r1, [r0, #4]
		if (_type == EventTypeImmediate) {
    c1c2:	f1bc 0f02 	cmp.w	ip, #2
		_data = data;
    c1c6:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    c1c8:	d101      	bne.n	c1ce <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
    c1ca:	6883      	ldr	r3, [r0, #8]
    c1cc:	4718      	bx	r3
			triggerEventNotImmediate();
    c1ce:	f000 b9e1 	b.w	c594 <EventResponder::triggerEventNotImmediate()>
    c1d2:	bf00      	nop

0000c1d4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>:
void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    c1d4:	b4f0      	push	{r4, r5, r6, r7}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    c1d6:	6804      	ldr	r4, [r0, #0]
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    c1d8:	f240 2501 	movw	r5, #513	; 0x201
	while (count > 0) {
    c1dc:	461e      	mov	r6, r3
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    c1de:	6125      	str	r5, [r4, #16]
	while (count > 0) {
    c1e0:	b1a3      	cbz	r3, c20c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    c1e2:	b321      	cbz	r1, c22e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x5a>
    c1e4:	f811 5b01 	ldrb.w	r5, [r1], #1
		count--; // how many bytes left to output.
    c1e8:	3b01      	subs	r3, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    c1ea:	6665      	str	r5, [r4, #100]	; 0x64
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    c1ec:	6f25      	ldr	r5, [r4, #112]	; 0x70
    c1ee:	07af      	lsls	r7, r5, #30
    c1f0:	d407      	bmi.n	c202 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				if (p_read) *p_read++ = b; 
    c1f2:	4615      	mov	r5, r2
				count_read--;
    c1f4:	3e01      	subs	r6, #1
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    c1f6:	6f67      	ldr	r7, [r4, #116]	; 0x74
				if (p_read) *p_read++ = b; 
    c1f8:	b11a      	cbz	r2, c202 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    c1fa:	f805 7b01 	strb.w	r7, [r5], #1
				if (p_read) *p_read++ = b; 
    c1fe:	462a      	mov	r2, r5
    c200:	6804      	ldr	r4, [r0, #0]
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    c202:	6965      	ldr	r5, [r4, #20]
    c204:	07ed      	lsls	r5, r5, #31
    c206:	d5f1      	bpl.n	c1ec <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x18>
	while (count > 0) {
    c208:	2b00      	cmp	r3, #0
    c20a:	d1ea      	bne.n	c1e2 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0xe>
	while (count_read) {
    c20c:	b16e      	cbz	r6, c22a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x56>
    c20e:	6803      	ldr	r3, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    c210:	6f19      	ldr	r1, [r3, #112]	; 0x70
    c212:	0789      	lsls	r1, r1, #30
    c214:	d4fa      	bmi.n	c20c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			if (p_read) *p_read++ = b; 
    c216:	4611      	mov	r1, r2
			count_read--;
    c218:	3e01      	subs	r6, #1
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    c21a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
			if (p_read) *p_read++ = b; 
    c21c:	2a00      	cmp	r2, #0
    c21e:	d0f5      	beq.n	c20c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    c220:	f801 3b01 	strb.w	r3, [r1], #1
			if (p_read) *p_read++ = b; 
    c224:	460a      	mov	r2, r1
	while (count_read) {
    c226:	2e00      	cmp	r6, #0
    c228:	d1f1      	bne.n	c20e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x3a>
}
    c22a:	bcf0      	pop	{r4, r5, r6, r7}
    c22c:	4770      	bx	lr
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    c22e:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
    c232:	e7d9      	b.n	c1e8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x14>

0000c234 <_spi_dma_rxISR0()>:

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    c234:	4b32      	ldr	r3, [pc, #200]	; (c300 <_spi_dma_rxISR0()+0xcc>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    c236:	4933      	ldr	r1, [pc, #204]	; (c304 <_spi_dma_rxISR0()+0xd0>)
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    c238:	b530      	push	{r4, r5, lr}
	_dmaTX->clearComplete();
    c23a:	e9d3 5411 	ldrd	r5, r4, [r3, #68]	; 0x44
    c23e:	7920      	ldrb	r0, [r4, #4]
    c240:	77c8      	strb	r0, [r1, #31]
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
    c242:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    c244:	f895 c004 	ldrb.w	ip, [r5, #4]
    c248:	f881 c01c 	strb.w	ip, [r1, #28]
    c24c:	7708      	strb	r0, [r1, #28]
    c24e:	b152      	cbz	r2, c266 <_spi_dma_rxISR0()+0x32>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    c250:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    c254:	d323      	bcc.n	c29e <_spi_dma_rxISR0()+0x6a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    c256:	492c      	ldr	r1, [pc, #176]	; (c308 <_spi_dma_rxISR0()+0xd4>)
    c258:	4411      	add	r1, r2
		DMA_SERQ = channel;
    c25a:	4a2a      	ldr	r2, [pc, #168]	; (c304 <_spi_dma_rxISR0()+0xd0>)
    c25c:	6419      	str	r1, [r3, #64]	; 0x40
    c25e:	76d0      	strb	r0, [r2, #27]
    c260:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    c264:	bd30      	pop	{r4, r5, pc}
    c266:	6819      	ldr	r1, [r3, #0]
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    c268:	240f      	movs	r4, #15

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    c26a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    c26c:	658c      	str	r4, [r1, #88]	; 0x58
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    c26e:	f240 3401 	movw	r4, #769	; 0x301
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    c272:	61ca      	str	r2, [r1, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    c274:	610c      	str	r4, [r1, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    c276:	f44f 547c 	mov.w	r4, #16128	; 0x3f00
    c27a:	614c      	str	r4, [r1, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    c27c:	2103      	movs	r1, #3
		_dma_event_responder->triggerEvent();
    c27e:	6804      	ldr	r4, [r0, #0]
    c280:	6824      	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    c282:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    c286:	4b21      	ldr	r3, [pc, #132]	; (c30c <_spi_dma_rxISR0()+0xd8>)
    c288:	429c      	cmp	r4, r3
    c28a:	d126      	bne.n	c2da <_spi_dma_rxISR0()+0xa6>
		if (_type == EventTypeImmediate) {
    c28c:	7f03      	ldrb	r3, [r0, #28]
		_status = status;
    c28e:	6042      	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    c290:	2b02      	cmp	r3, #2
		_data = data;
    c292:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    c294:	d126      	bne.n	c2e4 <_spi_dma_rxISR0()+0xb0>
			(*_function)(*this);
    c296:	6883      	ldr	r3, [r0, #8]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    c298:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    c29c:	4718      	bx	r3
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    c29e:	682d      	ldr	r5, [r5, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    c2a0:	8be9      	ldrh	r1, [r5, #30]
    c2a2:	0409      	lsls	r1, r1, #16
    c2a4:	d422      	bmi.n	c2ec <_spi_dma_rxISR0()+0xb8>
		tcd->BITER = len & 0x7fff;
    c2a6:	b292      	uxth	r2, r2
    c2a8:	83ea      	strh	r2, [r5, #30]
	tcd->CITER = tcd->BITER; 
    c2aa:	6821      	ldr	r1, [r4, #0]
    c2ac:	8bec      	ldrh	r4, [r5, #30]
    c2ae:	b2a4      	uxth	r4, r4
    c2b0:	82ec      	strh	r4, [r5, #22]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    c2b2:	8bcc      	ldrh	r4, [r1, #30]
    c2b4:	0424      	lsls	r4, r4, #16
    c2b6:	d505      	bpl.n	c2c4 <_spi_dma_rxISR0()+0x90>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    c2b8:	8bcc      	ldrh	r4, [r1, #30]
    c2ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
    c2be:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    c2c2:	4322      	orrs	r2, r4
    c2c4:	83ca      	strh	r2, [r1, #30]
	tcd->CITER = tcd->BITER; 
    c2c6:	8bca      	ldrh	r2, [r1, #30]
    c2c8:	b292      	uxth	r2, r2
    c2ca:	82ca      	strh	r2, [r1, #22]
    c2cc:	2100      	movs	r1, #0
    c2ce:	4a0d      	ldr	r2, [pc, #52]	; (c304 <_spi_dma_rxISR0()+0xd0>)
			_dma_count_remaining -= MAX_DMA_COUNT;
    c2d0:	6419      	str	r1, [r3, #64]	; 0x40
    c2d2:	76d0      	strb	r0, [r2, #27]
    c2d4:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    c2d8:	bd30      	pop	{r4, r5, pc}
		_dma_event_responder->triggerEvent();
    c2da:	4623      	mov	r3, r4
    c2dc:	4611      	mov	r1, r2
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    c2de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		_dma_event_responder->triggerEvent();
    c2e2:	4718      	bx	r3
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    c2e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			triggerEventNotImmediate();
    c2e8:	f000 b954 	b.w	c594 <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    c2ec:	8be9      	ldrh	r1, [r5, #30]
    c2ee:	f3c2 0e08 	ubfx	lr, r2, #0, #9
    c2f2:	b292      	uxth	r2, r2
    c2f4:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    c2f8:	ea41 010e 	orr.w	r1, r1, lr
    c2fc:	83e9      	strh	r1, [r5, #30]
    c2fe:	e7d4      	b.n	c2aa <_spi_dma_rxISR0()+0x76>
    c300:	2000bf88 	.word	0x2000bf88
    c304:	400e8000 	.word	0x400e8000
    c308:	ffff8001 	.word	0xffff8001
    c30c:	0000c1bd 	.word	0x0000c1bd

0000c310 <SPIClass::begin()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    c310:	6843      	ldr	r3, [r0, #4]
{
    c312:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    c316:	e9d3 4100 	ldrd	r4, r1, [r3]
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    c31a:	4d81      	ldr	r5, [pc, #516]	; (c520 <SPIClass::begin()+0x210>)
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    c31c:	f04f 0ab8 	mov.w	sl, #184	; 0xb8
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    c320:	6822      	ldr	r2, [r4, #0]
	port().CR = LPSPI_CR_RST;
    c322:	f04f 0802 	mov.w	r8, #2
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    c326:	ea22 0201 	bic.w	r2, r2, r1
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    c32a:	497e      	ldr	r1, [pc, #504]	; (c524 <SPIClass::begin()+0x214>)
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    c32c:	6022      	str	r2, [r4, #0]
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    c32e:	69aa      	ldr	r2, [r5, #24]
    c330:	4011      	ands	r1, r2
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    c332:	4a7d      	ldr	r2, [pc, #500]	; (c528 <SPIClass::begin()+0x218>)
    c334:	430a      	orrs	r2, r1
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    c336:	61aa      	str	r2, [r5, #24]
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    c338:	f890 e010 	ldrb.w	lr, [r0, #16]
    c33c:	4a7b      	ldr	r2, [pc, #492]	; (c52c <SPIClass::begin()+0x21c>)
    c33e:	eb03 060e 	add.w	r6, r3, lr
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
    c342:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    c346:	7c31      	ldrb	r1, [r6, #16]
    c348:	eb02 1101 	add.w	r1, r2, r1, lsl #4
    c34c:	6889      	ldr	r1, [r1, #8]
    c34e:	f8c1 a000 	str.w	sl, [r1]
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
    c352:	f890 c011 	ldrb.w	ip, [r0, #17]
    c356:	eb03 050c 	add.w	r5, r3, ip
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
    c35a:	f10c 0c0a 	add.w	ip, ip, #10
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
    c35e:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
    c362:	eb02 1101 	add.w	r1, r2, r1, lsl #4
    c366:	6889      	ldr	r1, [r1, #8]
    c368:	f8c1 a000 	str.w	sl, [r1]
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
    c36c:	7c81      	ldrb	r1, [r0, #18]
    c36e:	eb03 0901 	add.w	r9, r3, r1
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    c372:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
    c376:	f899 b038 	ldrb.w	fp, [r9, #56]	; 0x38
    c37a:	eb02 1b0b 	add.w	fp, r2, fp, lsl #4
    c37e:	f8db b008 	ldr.w	fp, [fp, #8]
    c382:	f8cb a000 	str.w	sl, [fp]
	hardware().clock_gate_register |= hardware().clock_gate_mask;
    c386:	f8d4 a000 	ldr.w	sl, [r4]
    c38a:	685f      	ldr	r7, [r3, #4]
    c38c:	ea4a 0a07 	orr.w	sl, sl, r7
    c390:	f8c4 a000 	str.w	sl, [r4]
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
    c394:	7c34      	ldrb	r4, [r6, #16]
    c396:	f8de e014 	ldr.w	lr, [lr, #20]
    c39a:	eb02 1404 	add.w	r4, r2, r4, lsl #4
    c39e:	6864      	ldr	r4, [r4, #4]
    c3a0:	f8c4 e000 	str.w	lr, [r4]
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
    c3a4:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
    c3a8:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
    c3ac:	eb02 1404 	add.w	r4, r2, r4, lsl #4
    c3b0:	6864      	ldr	r4, [r4, #4]
    c3b2:	f8c4 c000 	str.w	ip, [r4]
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    c3b6:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
    c3b8:	f899 4038 	ldrb.w	r4, [r9, #56]	; 0x38
    c3bc:	eb02 1204 	add.w	r2, r2, r4, lsl #4
    c3c0:	6852      	ldr	r2, [r2, #4]
    c3c2:	6011      	str	r1, [r2, #0]
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
    c3c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    c3c6:	f899 1044 	ldrb.w	r1, [r9, #68]	; 0x44
    c3ca:	6011      	str	r1, [r2, #0]
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    c3cc:	6a1a      	ldr	r2, [r3, #32]
    c3ce:	7f31      	ldrb	r1, [r6, #28]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    c3d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    c3d2:	6011      	str	r1, [r2, #0]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    c3d4:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
    c3d8:	601a      	str	r2, [r3, #0]
	port().FCR = LPSPI_FCR_TXWATER(15);
    c3da:	220f      	movs	r2, #15
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    c3dc:	6803      	ldr	r3, [r0, #0]
	port().CR = LPSPI_CR_RST;
    c3de:	f8c3 8010 	str.w	r8, [r3, #16]
	port().FCR = LPSPI_FCR_TXWATER(15);
    c3e2:	659a      	str	r2, [r3, #88]	; 0x58
		if (interruptMasksUsed) {
    c3e4:	7cc2      	ldrb	r2, [r0, #19]
    c3e6:	2a00      	cmp	r2, #0
    c3e8:	d031      	beq.n	c44e <SPIClass::begin()+0x13e>
			__disable_irq();
    c3ea:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    c3ec:	7cc3      	ldrb	r3, [r0, #19]
    c3ee:	07dc      	lsls	r4, r3, #31
    c3f0:	d508      	bpl.n	c404 <SPIClass::begin()+0xf4>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    c3f2:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    c3f6:	6944      	ldr	r4, [r0, #20]
    c3f8:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
    c3fc:	4022      	ands	r2, r4
    c3fe:	6282      	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    c400:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    c404:	0799      	lsls	r1, r3, #30
    c406:	d508      	bpl.n	c41a <SPIClass::begin()+0x10a>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    c408:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    c40c:	6984      	ldr	r4, [r0, #24]
    c40e:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
    c412:	4022      	ands	r2, r4
    c414:	62c2      	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    c416:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    c41a:	075a      	lsls	r2, r3, #29
    c41c:	d508      	bpl.n	c430 <SPIClass::begin()+0x120>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    c41e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    c422:	69c4      	ldr	r4, [r0, #28]
    c424:	f8d1 2188 	ldr.w	r2, [r1, #392]	; 0x188
    c428:	4022      	ands	r2, r4
    c42a:	6302      	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    c42c:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    c430:	071f      	lsls	r7, r3, #28
    c432:	d508      	bpl.n	c446 <SPIClass::begin()+0x136>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    c434:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    c438:	6a04      	ldr	r4, [r0, #32]
    c43a:	f8d1 218c 	ldr.w	r2, [r1, #396]	; 0x18c
    c43e:	4022      	ands	r2, r4
    c440:	6342      	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    c442:	f8c1 218c 	str.w	r2, [r1, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    c446:	06de      	lsls	r6, r3, #27
    c448:	d455      	bmi.n	c4f6 <SPIClass::begin()+0x1e6>
			__enable_irq();
    c44a:	b662      	cpsie	i
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    c44c:	6803      	ldr	r3, [r0, #0]
		if (settings.clock() != _clock) {
    c44e:	4c38      	ldr	r4, [pc, #224]	; (c530 <SPIClass::begin()+0x220>)
    c450:	6882      	ldr	r2, [r0, #8]
    c452:	42a2      	cmp	r2, r4
    c454:	d059      	beq.n	c50a <SPIClass::begin()+0x1fa>
			uint32_t cbcmr = CCM_CBCMR;
    c456:	4a32      	ldr	r2, [pc, #200]	; (c520 <SPIClass::begin()+0x210>)
		    _clock = settings.clock();
    c458:	6084      	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    c45a:	6992      	ldr	r2, [r2, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    c45c:	4935      	ldr	r1, [pc, #212]	; (c534 <SPIClass::begin()+0x224>)
    c45e:	f3c2 1601 	ubfx	r6, r2, #4, #2
    c462:	f3c2 6282 	ubfx	r2, r2, #26, #3
			if (d && clkhz/d > _clock) d++;
    c466:	4d34      	ldr	r5, [pc, #208]	; (c538 <SPIClass::begin()+0x228>)
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    c468:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
    c46c:	3201      	adds	r2, #1
    c46e:	fbb1 f2f2 	udiv	r2, r1, r2
			if (d && clkhz/d > _clock) d++;
    c472:	42aa      	cmp	r2, r5
    c474:	d831      	bhi.n	c4da <SPIClass::begin()+0x1ca>
    c476:	2200      	movs	r2, #0
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    c478:	60c2      	str	r2, [r0, #12]
		port().CR = 0;
    c47a:	2400      	movs	r4, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    c47c:	2103      	movs	r1, #3
		port().CR = 0;
    c47e:	611c      	str	r4, [r3, #16]
		port().TCR = settings.tcr;
    c480:	2407      	movs	r4, #7
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    c482:	6259      	str	r1, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
    c484:	2101      	movs	r1, #1
		port().CCR = _ccr;
    c486:	641a      	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    c488:	661c      	str	r4, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    c48a:	6119      	str	r1, [r3, #16]
		if (interruptMasksUsed) {
    c48c:	7cc3      	ldrb	r3, [r0, #19]
    c48e:	b313      	cbz	r3, c4d6 <SPIClass::begin()+0x1c6>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    c490:	07dd      	lsls	r5, r3, #31
    c492:	d504      	bpl.n	c49e <SPIClass::begin()+0x18e>
    c494:	6a81      	ldr	r1, [r0, #40]	; 0x28
    c496:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    c49a:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    c49e:	079c      	lsls	r4, r3, #30
    c4a0:	d504      	bpl.n	c4ac <SPIClass::begin()+0x19c>
    c4a2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    c4a4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    c4a8:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    c4ac:	0759      	lsls	r1, r3, #29
    c4ae:	d504      	bpl.n	c4ba <SPIClass::begin()+0x1aa>
    c4b0:	6b01      	ldr	r1, [r0, #48]	; 0x30
    c4b2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    c4b6:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    c4ba:	071a      	lsls	r2, r3, #28
    c4bc:	d504      	bpl.n	c4c8 <SPIClass::begin()+0x1b8>
    c4be:	6b41      	ldr	r1, [r0, #52]	; 0x34
    c4c0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    c4c4:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    c4c8:	06db      	lsls	r3, r3, #27
    c4ca:	d504      	bpl.n	c4d6 <SPIClass::begin()+0x1c6>
    c4cc:	6b82      	ldr	r2, [r0, #56]	; 0x38
    c4ce:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    c4d2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
    c4d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			d = _clock ? clkhz/_clock : clkhz;
    c4da:	4918      	ldr	r1, [pc, #96]	; (c53c <SPIClass::begin()+0x22c>)
    c4dc:	fba1 5102 	umull	r5, r1, r1, r2
    c4e0:	0d09      	lsrs	r1, r1, #20
			if (d && clkhz/d > _clock) d++;
    c4e2:	fbb2 f2f1 	udiv	r2, r2, r1
    c4e6:	42a2      	cmp	r2, r4
    c4e8:	bf88      	it	hi
    c4ea:	3101      	addhi	r1, #1
			if (d > 257) d= 257;  // max div
    c4ec:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    c4f0:	d30d      	bcc.n	c50e <SPIClass::begin()+0x1fe>
    c4f2:	4a13      	ldr	r2, [pc, #76]	; (c540 <SPIClass::begin()+0x230>)
				div = d-2;
    c4f4:	e7c0      	b.n	c478 <SPIClass::begin()+0x168>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    c4f6:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    c4fa:	6a41      	ldr	r1, [r0, #36]	; 0x24
    c4fc:	f8d2 3190 	ldr.w	r3, [r2, #400]	; 0x190
    c500:	400b      	ands	r3, r1
    c502:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    c504:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
    c508:	e79f      	b.n	c44a <SPIClass::begin()+0x13a>
		port().CCR = _ccr;
    c50a:	68c2      	ldr	r2, [r0, #12]
    c50c:	e7b5      	b.n	c47a <SPIClass::begin()+0x16a>
			if (d > 2) {
    c50e:	2902      	cmp	r1, #2
    c510:	d9b1      	bls.n	c476 <SPIClass::begin()+0x166>
				div = d-2;
    c512:	3902      	subs	r1, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    c514:	084c      	lsrs	r4, r1, #1
    c516:	0222      	lsls	r2, r4, #8
    c518:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
    c51c:	430a      	orrs	r2, r1
    c51e:	e7ab      	b.n	c478 <SPIClass::begin()+0x168>
    c520:	400fc000 	.word	0x400fc000
    c524:	e3ffffcf 	.word	0xe3ffffcf
    c528:	08000010 	.word	0x08000010
    c52c:	2000a2c4 	.word	0x2000a2c4
    c530:	003d0900 	.word	0x003d0900
    c534:	20003470 	.word	0x20003470
    c538:	003d08ff 	.word	0x003d08ff
    c53c:	431bde83 	.word	0x431bde83
    c540:	007f7fff 	.word	0x007f7fff

0000c544 <SPIClass::transfer(void const*, void*, unsigned int)>:
	if (count == 0) return;
    c544:	b10b      	cbz	r3, c54a <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    c546:	f7ff be45 	b.w	c1d4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>
}
    c54a:	4770      	bx	lr

0000c54c <SPIClass::end()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    c54c:	6843      	ldr	r3, [r0, #4]
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    c54e:	e9d3 1200 	ldrd	r1, r2, [r3]
    c552:	6809      	ldr	r1, [r1, #0]
    c554:	4211      	tst	r1, r2
    c556:	d100      	bne.n	c55a <SPIClass::end()+0xe>
    c558:	4770      	bx	lr
void SPIClass::end() {
    c55a:	b510      	push	{r4, lr}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    c55c:	6802      	ldr	r2, [r0, #0]
    c55e:	4604      	mov	r4, r0
		port().CR = 0;  // turn off the enable
    c560:	2000      	movs	r0, #0
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    c562:	2105      	movs	r1, #5
		port().CR = 0;  // turn off the enable
    c564:	6110      	str	r0, [r2, #16]
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    c566:	7c22      	ldrb	r2, [r4, #16]
    c568:	4413      	add	r3, r2
    c56a:	7c18      	ldrb	r0, [r3, #16]
    c56c:	f000 fd20 	bl	cfb0 <pinMode>
		pinMode(hardware().mosi_pin[mosi_pin_index], INPUT_DISABLE);
    c570:	7c62      	ldrb	r2, [r4, #17]
    c572:	6863      	ldr	r3, [r4, #4]
    c574:	2105      	movs	r1, #5
    c576:	4413      	add	r3, r2
    c578:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
    c57c:	f000 fd18 	bl	cfb0 <pinMode>
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    c580:	6863      	ldr	r3, [r4, #4]
    c582:	7ca2      	ldrb	r2, [r4, #18]
    c584:	2105      	movs	r1, #5
    c586:	4413      	add	r3, r2
}
    c588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    c58c:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
    c590:	f000 bd0e 	b.w	cfb0 <pinMode>

0000c594 <EventResponder::triggerEventNotImmediate()>:
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c594:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    c598:	b672      	cpsid	i
	if (_triggered == false) {
    c59a:	7f43      	ldrb	r3, [r0, #29]
    c59c:	b95b      	cbnz	r3, c5b6 <EventResponder::triggerEventNotImmediate()+0x22>
		if (_type == EventTypeYield) {
    c59e:	7f01      	ldrb	r1, [r0, #28]
    c5a0:	2901      	cmp	r1, #1
{
    c5a2:	b430      	push	{r4, r5}
		if (_type == EventTypeYield) {
    c5a4:	d00b      	beq.n	c5be <EventResponder::triggerEventNotImmediate()+0x2a>
		} else if (_type == EventTypeInterrupt) {
    c5a6:	2903      	cmp	r1, #3
    c5a8:	d013      	beq.n	c5d2 <EventResponder::triggerEventNotImmediate()+0x3e>
		_triggered = true;
    c5aa:	2301      	movs	r3, #1
    c5ac:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    c5ae:	b902      	cbnz	r2, c5b2 <EventResponder::triggerEventNotImmediate()+0x1e>
    c5b0:	b662      	cpsie	i
}
    c5b2:	bc30      	pop	{r4, r5}
    c5b4:	4770      	bx	lr
    c5b6:	b90a      	cbnz	r2, c5bc <EventResponder::triggerEventNotImmediate()+0x28>
    c5b8:	b662      	cpsie	i
    c5ba:	4770      	bx	lr
    c5bc:	4770      	bx	lr
			if (firstYield == nullptr) {
    c5be:	4c12      	ldr	r4, [pc, #72]	; (c608 <EventResponder::triggerEventNotImmediate()+0x74>)
    c5c0:	6821      	ldr	r1, [r4, #0]
    c5c2:	b1b1      	cbz	r1, c5f2 <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = lastYield;
    c5c4:	4911      	ldr	r1, [pc, #68]	; (c60c <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
    c5c6:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    c5c8:	680b      	ldr	r3, [r1, #0]
				lastYield = this;
    c5ca:	6008      	str	r0, [r1, #0]
				_prev = lastYield;
    c5cc:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    c5ce:	6158      	str	r0, [r3, #20]
				lastYield = this;
    c5d0:	e7eb      	b.n	c5aa <EventResponder::triggerEventNotImmediate()+0x16>
			if (firstInterrupt == nullptr) {
    c5d2:	4d0f      	ldr	r5, [pc, #60]	; (c610 <EventResponder::triggerEventNotImmediate()+0x7c>)
    c5d4:	490f      	ldr	r1, [pc, #60]	; (c614 <EventResponder::triggerEventNotImmediate()+0x80>)
    c5d6:	682c      	ldr	r4, [r5, #0]
    c5d8:	b18c      	cbz	r4, c5fe <EventResponder::triggerEventNotImmediate()+0x6a>
				_next = nullptr;
    c5da:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    c5dc:	680b      	ldr	r3, [r1, #0]
    c5de:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    c5e0:	6158      	str	r0, [r3, #20]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    c5e2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    c5e6:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
				lastInterrupt = this;
    c5ea:	6008      	str	r0, [r1, #0]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    c5ec:	f8c3 4d04 	str.w	r4, [r3, #3332]	; 0xd04
    c5f0:	e7db      	b.n	c5aa <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
    c5f2:	4b06      	ldr	r3, [pc, #24]	; (c60c <EventResponder::triggerEventNotImmediate()+0x78>)
				firstYield = this;
    c5f4:	6020      	str	r0, [r4, #0]
				lastYield = this;
    c5f6:	6018      	str	r0, [r3, #0]
				_prev = nullptr;
    c5f8:	e9c0 1105 	strd	r1, r1, [r0, #20]
				lastYield = this;
    c5fc:	e7d5      	b.n	c5aa <EventResponder::triggerEventNotImmediate()+0x16>
				_prev = nullptr;
    c5fe:	e9c0 4405 	strd	r4, r4, [r0, #20]
				firstInterrupt = this;
    c602:	6028      	str	r0, [r5, #0]
				lastInterrupt = this;
    c604:	e7ed      	b.n	c5e2 <EventResponder::triggerEventNotImmediate()+0x4e>
    c606:	bf00      	nop
    c608:	2005e030 	.word	0x2005e030
    c60c:	2005e03c 	.word	0x2005e03c
    c610:	2005e038 	.word	0x2005e038
    c614:	2005e034 	.word	0x2005e034

0000c618 <EventResponder::runFromInterrupt()>:
{
    c618:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c61a:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    c61e:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    c620:	4c0c      	ldr	r4, [pc, #48]	; (c654 <EventResponder::runFromInterrupt()+0x3c>)
    c622:	6820      	ldr	r0, [r4, #0]
		if (first) {
    c624:	b180      	cbz	r0, c648 <EventResponder::runFromInterrupt()+0x30>
				lastInterrupt = nullptr;
    c626:	4e0c      	ldr	r6, [pc, #48]	; (c658 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    c628:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    c62a:	6943      	ldr	r3, [r0, #20]
    c62c:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    c62e:	b173      	cbz	r3, c64e <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    c630:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    c632:	b902      	cbnz	r2, c636 <EventResponder::runFromInterrupt()+0x1e>
    c634:	b662      	cpsie	i
			(*(first->_function))(*first);
    c636:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    c638:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    c63a:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c63c:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    c640:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    c642:	6820      	ldr	r0, [r4, #0]
		if (first) {
    c644:	2800      	cmp	r0, #0
    c646:	d1f0      	bne.n	c62a <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    c648:	b902      	cbnz	r2, c64c <EventResponder::runFromInterrupt()+0x34>
    c64a:	b662      	cpsie	i
}
    c64c:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    c64e:	6033      	str	r3, [r6, #0]
    c650:	e7ef      	b.n	c632 <EventResponder::runFromInterrupt()+0x1a>
    c652:	bf00      	nop
    c654:	2005e038 	.word	0x2005e038
    c658:	2005e034 	.word	0x2005e034

0000c65c <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    c65c:	f7ff bfdc 	b.w	c618 <EventResponder::runFromInterrupt()>

0000c660 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    c660:	4904      	ldr	r1, [pc, #16]	; (c674 <systick_isr+0x14>)
	systick_millis_count++;
    c662:	4a05      	ldr	r2, [pc, #20]	; (c678 <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    c664:	6849      	ldr	r1, [r1, #4]
    c666:	4b05      	ldr	r3, [pc, #20]	; (c67c <systick_isr+0x1c>)
    c668:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    c66a:	6813      	ldr	r3, [r2, #0]
    c66c:	3301      	adds	r3, #1
    c66e:	6013      	str	r3, [r2, #0]
}
    c670:	4770      	bx	lr
    c672:	bf00      	nop
    c674:	e0001000 	.word	0xe0001000
    c678:	2005e500 	.word	0x2005e500
    c67c:	2005e4fc 	.word	0x2005e4fc

0000c680 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    c680:	4608      	mov	r0, r1
    c682:	f002 b93b 	b.w	e8fc <usb_serial_putchar>
    c686:	bf00      	nop

0000c688 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    c688:	2a01      	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    c68a:	b570      	push	{r4, r5, r6, lr}
		base = 10;
    c68c:	bf08      	it	eq
    c68e:	220a      	moveq	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    c690:	b08a      	sub	sp, #40	; 0x28
	}


	if (n == 0) {
    c692:	b391      	cbz	r1, c6fa <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x72>
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
    c694:	f04f 0e21 	mov.w	lr, #33	; 0x21
    c698:	e001      	b.n	c69e <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x16>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    c69a:	fa5f fe86 	uxtb.w	lr, r6
    c69e:	f10e 36ff 	add.w	r6, lr, #4294967295
			digit = n % base;
    c6a2:	fbb1 f5f2 	udiv	r5, r1, r2
    c6a6:	fb02 1415 	mls	r4, r2, r5, r1
    c6aa:	fa5f fc84 	uxtb.w	ip, r4
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c6ae:	2c09      	cmp	r4, #9
    c6b0:	f10c 0437 	add.w	r4, ip, #55	; 0x37
    c6b4:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
    c6b8:	bf98      	it	ls
    c6ba:	fa5f f48c 	uxtbls.w	r4, ip
    c6be:	f10e 0c28 	add.w	ip, lr, #40	; 0x28
    c6c2:	bf88      	it	hi
    c6c4:	b2e4      	uxtbhi	r4, r4
			if (n == 0) break;
    c6c6:	4291      	cmp	r1, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c6c8:	44ec      	add	ip, sp
			n /= base;
    c6ca:	4629      	mov	r1, r5
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c6cc:	f80c 4c24 	strb.w	r4, [ip, #-36]
			if (n == 0) break;
    c6d0:	d2e3      	bcs.n	c69a <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x12>
		}
	}
	if (sign) {
    c6d2:	b14b      	cbz	r3, c6e8 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x60>
		i--;
    c6d4:	f10e 3eff 	add.w	lr, lr, #4294967295
		buf[i] = '-';
    c6d8:	222d      	movs	r2, #45	; 0x2d
		i--;
    c6da:	fa5f fe8e 	uxtb.w	lr, lr
		buf[i] = '-';
    c6de:	f10e 0328 	add.w	r3, lr, #40	; 0x28
    c6e2:	446b      	add	r3, sp
    c6e4:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    c6e8:	6803      	ldr	r3, [r0, #0]
    c6ea:	a901      	add	r1, sp, #4
    c6ec:	f1ce 0222 	rsb	r2, lr, #34	; 0x22
    c6f0:	685b      	ldr	r3, [r3, #4]
    c6f2:	4471      	add	r1, lr
    c6f4:	4798      	blx	r3
}
    c6f6:	b00a      	add	sp, #40	; 0x28
    c6f8:	bd70      	pop	{r4, r5, r6, pc}
		buf[sizeof(buf) - 1] = '0';
    c6fa:	2230      	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    c6fc:	f04f 0e21 	mov.w	lr, #33	; 0x21
		buf[sizeof(buf) - 1] = '0';
    c700:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    c704:	e7e5      	b.n	c6d2 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x4a>
    c706:	bf00      	nop

0000c708 <Print::write(unsigned char const*, unsigned int)>:
{
    c708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buffer == nullptr) return 0;
    c70c:	460c      	mov	r4, r1
    c70e:	b1d1      	cbz	r1, c746 <Print::write(unsigned char const*, unsigned int)+0x3e>
	while (size--) count += write(*buffer++);
    c710:	b1ea      	cbz	r2, c74e <Print::write(unsigned char const*, unsigned int)+0x46>
    c712:	4680      	mov	r8, r0
    c714:	188e      	adds	r6, r1, r2
	size_t count = 0;
    c716:	2500      	movs	r5, #0
    c718:	4f0e      	ldr	r7, [pc, #56]	; (c754 <Print::write(unsigned char const*, unsigned int)+0x4c>)
    c71a:	e004      	b.n	c726 <Print::write(unsigned char const*, unsigned int)+0x1e>
    c71c:	f002 f8ee 	bl	e8fc <usb_serial_putchar>
	while (size--) count += write(*buffer++);
    c720:	42b4      	cmp	r4, r6
    c722:	4405      	add	r5, r0
    c724:	d00c      	beq.n	c740 <Print::write(unsigned char const*, unsigned int)+0x38>
    c726:	f8d8 3000 	ldr.w	r3, [r8]
    c72a:	f814 0b01 	ldrb.w	r0, [r4], #1
    c72e:	681b      	ldr	r3, [r3, #0]
    c730:	42bb      	cmp	r3, r7
    c732:	d0f3      	beq.n	c71c <Print::write(unsigned char const*, unsigned int)+0x14>
    c734:	4601      	mov	r1, r0
    c736:	4640      	mov	r0, r8
    c738:	4798      	blx	r3
    c73a:	42b4      	cmp	r4, r6
    c73c:	4405      	add	r5, r0
    c73e:	d1f2      	bne.n	c726 <Print::write(unsigned char const*, unsigned int)+0x1e>
}
    c740:	4628      	mov	r0, r5
    c742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
    c746:	460d      	mov	r5, r1
}
    c748:	4628      	mov	r0, r5
    c74a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
    c74e:	4615      	mov	r5, r2
    c750:	e7f6      	b.n	c740 <Print::write(unsigned char const*, unsigned int)+0x38>
    c752:	bf00      	nop
    c754:	0000c681 	.word	0x0000c681

0000c758 <Print::print(long)>:
	if (n < 0) {
    c758:	2900      	cmp	r1, #0
    c75a:	db03      	blt.n	c764 <Print::print(long)+0xc>
	uint8_t sign=0;
    c75c:	2300      	movs	r3, #0
	if (base == 0) {
    c75e:	220a      	movs	r2, #10
    c760:	f7ff bf92 	b.w	c688 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
		n = -n;
    c764:	4249      	negs	r1, r1
		sign = '-';
    c766:	232d      	movs	r3, #45	; 0x2d
	if (base == 0) {
    c768:	220a      	movs	r2, #10
    c76a:	f7ff bf8d 	b.w	c688 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    c76e:	bf00      	nop

0000c770 <Print::println()>:
{
    c770:	b500      	push	{lr}
	return write(buf, 2);
    c772:	6803      	ldr	r3, [r0, #0]
{
    c774:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    c776:	f640 2c0d 	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
    c77a:	2202      	movs	r2, #2
    c77c:	a901      	add	r1, sp, #4
    c77e:	685b      	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
    c780:	f8ad c004 	strh.w	ip, [sp, #4]
	return write(buf, 2);
    c784:	4798      	blx	r3
}
    c786:	b003      	add	sp, #12
    c788:	f85d fb04 	ldr.w	pc, [sp], #4

0000c78c <_write>:
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    c78c:	4b05      	ldr	r3, [pc, #20]	; (c7a4 <_write+0x18>)
    c78e:	2802      	cmp	r0, #2
    c790:	bf88      	it	hi
    c792:	4603      	movhi	r3, r0
{
    c794:	b410      	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    c796:	681c      	ldr	r4, [r3, #0]
    c798:	4618      	mov	r0, r3
    c79a:	6863      	ldr	r3, [r4, #4]
}
    c79c:	f85d 4b04 	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    c7a0:	4718      	bx	r3
    c7a2:	bf00      	nop
    c7a4:	2000bfd8 	.word	0x2000bfd8

0000c7a8 <Print::printf(char const*, ...)>:
{
    c7a8:	b40e      	push	{r1, r2, r3}
    c7aa:	b500      	push	{lr}
    c7ac:	b082      	sub	sp, #8
    c7ae:	aa03      	add	r2, sp, #12
    c7b0:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, format);
    c7b4:	9201      	str	r2, [sp, #4]
	int retval = vdprintf((int)this, format, ap);
    c7b6:	f004 faf5 	bl	10da4 <vdprintf>
}
    c7ba:	b002      	add	sp, #8
    c7bc:	f85d eb04 	ldr.w	lr, [sp], #4
    c7c0:	b003      	add	sp, #12
    c7c2:	4770      	bx	lr

0000c7c4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	if (base == 0) {
    c7c4:	b95a      	cbnz	r2, c7de <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1a>
		return write((uint8_t)n);
    c7c6:	6803      	ldr	r3, [r0, #0]
    c7c8:	b2c9      	uxtb	r1, r1
    c7ca:	4a07      	ldr	r2, [pc, #28]	; (c7e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x24>)
    c7cc:	681b      	ldr	r3, [r3, #0]
    c7ce:	4293      	cmp	r3, r2
{
    c7d0:	b500      	push	{lr}
    c7d2:	d106      	bne.n	c7e2 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1e>
    c7d4:	4608      	mov	r0, r1
}
    c7d6:	f85d eb04 	ldr.w	lr, [sp], #4
    c7da:	f002 b88f 	b.w	e8fc <usb_serial_putchar>
    c7de:	f7ff bf53 	b.w	c688 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    c7e2:	f85d eb04 	ldr.w	lr, [sp], #4
		return write((uint8_t)n);
    c7e6:	4718      	bx	r3
    c7e8:	0000c681 	.word	0x0000c681

0000c7ec <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>:

size_t Print::printNumber64(uint64_t n, uint8_t base, uint8_t sign)
{
    c7ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c7f0:	b093      	sub	sp, #76	; 0x4c
    c7f2:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
    c7f6:	f89d 906c 	ldrb.w	r9, [sp, #108]	; 0x6c
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
    c7fa:	2f01      	cmp	r7, #1
    c7fc:	d944      	bls.n	c888 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x9c>
    c7fe:	461c      	mov	r4, r3
	if (n == 0) {
    c800:	4680      	mov	r8, r0
    c802:	4615      	mov	r5, r2
    c804:	ea52 0304 	orrs.w	r3, r2, r4
    c808:	d039      	beq.n	c87e <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x92>
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
    c80a:	2641      	movs	r6, #65	; 0x41
    c80c:	e001      	b.n	c812 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x26>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    c80e:	fa5f f68c 	uxtb.w	r6, ip
			digit = n % base;
    c812:	4621      	mov	r1, r4
    c814:	4628      	mov	r0, r5
    c816:	463a      	mov	r2, r7
    c818:	2300      	movs	r3, #0
    c81a:	f002 fa95 	bl	ed48 <__aeabi_uldivmod>
    c81e:	fa5f fc82 	uxtb.w	ip, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c822:	f106 0248 	add.w	r2, r6, #72	; 0x48
    c826:	f1bc 0f09 	cmp.w	ip, #9
    c82a:	f10c 0337 	add.w	r3, ip, #55	; 0x37
    c82e:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
    c832:	446a      	add	r2, sp
    c834:	b2db      	uxtb	r3, r3
    c836:	bf98      	it	ls
    c838:	fa5f f38c 	uxtbls.w	r3, ip
			if (n == 0) break;
    c83c:	42bd      	cmp	r5, r7
			i--;
    c83e:	f106 3cff 	add.w	ip, r6, #4294967295
			n /= base;
    c842:	4605      	mov	r5, r0
			if (n == 0) break;
    c844:	f174 0400 	sbcs.w	r4, r4, #0
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c848:	f802 3c44 	strb.w	r3, [r2, #-68]
			n /= base;
    c84c:	460c      	mov	r4, r1
			if (n == 0) break;
    c84e:	d2de      	bcs.n	c80e <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x22>
		}
	}
	if (sign) {
    c850:	f1b9 0f00 	cmp.w	r9, #0
    c854:	d007      	beq.n	c866 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x7a>
		i--;
    c856:	3e01      	subs	r6, #1
		buf[i] = '-';
    c858:	222d      	movs	r2, #45	; 0x2d
		i--;
    c85a:	b2f6      	uxtb	r6, r6
		buf[i] = '-';
    c85c:	f106 0348 	add.w	r3, r6, #72	; 0x48
    c860:	446b      	add	r3, sp
    c862:	f803 2c44 	strb.w	r2, [r3, #-68]
	}
	return write(buf + i, sizeof(buf) - i);
    c866:	f8d8 3000 	ldr.w	r3, [r8]
    c86a:	a901      	add	r1, sp, #4
    c86c:	f1c6 0242 	rsb	r2, r6, #66	; 0x42
    c870:	4640      	mov	r0, r8
    c872:	685b      	ldr	r3, [r3, #4]
    c874:	4431      	add	r1, r6
    c876:	4798      	blx	r3
}
    c878:	b013      	add	sp, #76	; 0x4c
    c87a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		buf[sizeof(buf) - 1] = '0';
    c87e:	2330      	movs	r3, #48	; 0x30
		i = sizeof(buf) - 1;
    c880:	2641      	movs	r6, #65	; 0x41
		buf[sizeof(buf) - 1] = '0';
    c882:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
		i = sizeof(buf) - 1;
    c886:	e7e3      	b.n	c850 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x64>
	if (base < 2) return 0;
    c888:	2000      	movs	r0, #0
}
    c88a:	b013      	add	sp, #76	; 0x4c
    c88c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000c890 <Print::printFloat(double, unsigned char)>:
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    c890:	eeb4 0b40 	vcmp.f64	d0, d0
{
    c894:	b570      	push	{r4, r5, r6, lr}
	if (isnan(number)) return print("nan");
    c896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
    c89a:	4605      	mov	r5, r0
    c89c:	ed2d 8b02 	vpush	{d8}
    c8a0:	b086      	sub	sp, #24
	if (isnan(number)) return print("nan");
    c8a2:	d67c      	bvs.n	c99e <Print::printFloat(double, unsigned char)+0x10e>
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
    c8a4:	eeb0 7bc0 	vabs.f64	d7, d0
    	if (isinf(number)) return print("inf");
    c8a8:	ed9f 6b47 	vldr	d6, [pc, #284]	; c9c8 <Print::printFloat(double, unsigned char)+0x138>
    c8ac:	eeb4 7b46 	vcmp.f64	d7, d6
    c8b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c8b4:	dc6b      	bgt.n	c98e <Print::printFloat(double, unsigned char)+0xfe>
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    c8b6:	ed9f 7b46 	vldr	d7, [pc, #280]	; c9d0 <Print::printFloat(double, unsigned char)+0x140>
    c8ba:	eeb4 0bc7 	vcmpe.f64	d0, d7
    c8be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c8c2:	dc5a      	bgt.n	c97a <Print::printFloat(double, unsigned char)+0xea>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    c8c4:	ed9f 7b44 	vldr	d7, [pc, #272]	; c9d8 <Print::printFloat(double, unsigned char)+0x148>
    c8c8:	eeb4 0bc7 	vcmpe.f64	d0, d7
    c8cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c8d0:	d453      	bmi.n	c97a <Print::printFloat(double, unsigned char)+0xea>
	
	// Handle negative numbers
	if (number < 0.0) {
    c8d2:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
    c8d6:	460c      	mov	r4, r1
    c8d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c8dc:	d45b      	bmi.n	c996 <Print::printFloat(double, unsigned char)+0x106>
	uint8_t sign=0;
    c8de:	2300      	movs	r3, #0
		sign = 1;
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
    c8e0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
	for (uint8_t i=0; i<digits; ++i) {
    c8e4:	2c00      	cmp	r4, #0
    c8e6:	d05e      	beq.n	c9a6 <Print::printFloat(double, unsigned char)+0x116>
    c8e8:	f04f 0c00 	mov.w	ip, #0
		rounding *= 0.1;
    c8ec:	ed9f 6b3c 	vldr	d6, [pc, #240]	; c9e0 <Print::printFloat(double, unsigned char)+0x150>
	for (uint8_t i=0; i<digits; ++i) {
    c8f0:	f10c 0c01 	add.w	ip, ip, #1
		rounding *= 0.1;
    c8f4:	ee27 7b06 	vmul.f64	d7, d7, d6
	for (uint8_t i=0; i<digits; ++i) {
    c8f8:	fa5f f28c 	uxtb.w	r2, ip
    c8fc:	42a2      	cmp	r2, r4
    c8fe:	d3f7      	bcc.n	c8f0 <Print::printFloat(double, unsigned char)+0x60>
	}
	number += rounding;
    c900:	ee30 0b07 	vadd.f64	d0, d0, d7

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
    c904:	220a      	movs	r2, #10
    c906:	4628      	mov	r0, r5
    c908:	eefc 7bc0 	vcvt.u32.f64	s15, d0
	double remainder = number - (double)int_part;
    c90c:	eeb8 8b67 	vcvt.f64.u32	d8, s15
    c910:	ee17 1a90 	vmov	r1, s15
    c914:	ee30 8b48 	vsub.f64	d8, d0, d8
	if (base == 0) {
    c918:	f7ff feb6 	bl	c688 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    c91c:	2c0f      	cmp	r4, #15
	count += printNumber(int_part, 10, sign);

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    c91e:	f04f 032e 	mov.w	r3, #46	; 0x2e

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
    c922:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
    c926:	4606      	mov	r6, r0
		buf[0] = '.';
    c928:	bf28      	it	cs
    c92a:	240f      	movcs	r4, #15
    c92c:	f88d 3008 	strb.w	r3, [sp, #8]
		while (digits-- > 0) {
    c930:	f10d 0309 	add.w	r3, sp, #9
    c934:	aa02      	add	r2, sp, #8
    c936:	1e61      	subs	r1, r4, #1
    c938:	fa53 f181 	uxtab	r1, r3, r1
			remainder *= 10.0;
    c93c:	ee28 0b06 	vmul.f64	d0, d8, d6
			n = (uint8_t)(remainder);
    c940:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    c944:	edcd 7a01 	vstr	s15, [sp, #4]
    c948:	f89d 3004 	ldrb.w	r3, [sp, #4]
			buf[count++] = '0' + n;
			remainder -= n; 
    c94c:	ee07 3a90 	vmov	s15, r3
			buf[count++] = '0' + n;
    c950:	3330      	adds	r3, #48	; 0x30
			remainder -= n; 
    c952:	eeb8 8be7 	vcvt.f64.s32	d8, s15
			buf[count++] = '0' + n;
    c956:	f802 3f01 	strb.w	r3, [r2, #1]!
		while (digits-- > 0) {
    c95a:	4291      	cmp	r1, r2
			remainder -= n; 
    c95c:	ee30 8b48 	vsub.f64	d8, d0, d8
		while (digits-- > 0) {
    c960:	d1ec      	bne.n	c93c <Print::printFloat(double, unsigned char)+0xac>
		}
		count += write(buf, count);
    c962:	682b      	ldr	r3, [r5, #0]
			buf[count++] = '0' + n;
    c964:	3401      	adds	r4, #1
		count += write(buf, count);
    c966:	a902      	add	r1, sp, #8
    c968:	4628      	mov	r0, r5
    c96a:	685b      	ldr	r3, [r3, #4]
    c96c:	b2e2      	uxtb	r2, r4
    c96e:	4798      	blx	r3
	}
	return count;
}
    c970:	4630      	mov	r0, r6
    c972:	b006      	add	sp, #24
    c974:	ecbd 8b02 	vpop	{d8}
    c978:	bd70      	pop	{r4, r5, r6, pc}
							  return write((const uint8_t *)str, strlen(str)); }
    c97a:	682b      	ldr	r3, [r5, #0]
    c97c:	2203      	movs	r2, #3
    c97e:	491a      	ldr	r1, [pc, #104]	; (c9e8 <Print::printFloat(double, unsigned char)+0x158>)
    c980:	685b      	ldr	r3, [r3, #4]
    c982:	b006      	add	sp, #24
    c984:	ecbd 8b02 	vpop	{d8}
    c988:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c98c:	4718      	bx	r3
    c98e:	6803      	ldr	r3, [r0, #0]
    c990:	2203      	movs	r2, #3
    c992:	4916      	ldr	r1, [pc, #88]	; (c9ec <Print::printFloat(double, unsigned char)+0x15c>)
    c994:	e7f4      	b.n	c980 <Print::printFloat(double, unsigned char)+0xf0>
		number = -number;
    c996:	eeb1 0b40 	vneg.f64	d0, d0
		sign = 1;
    c99a:	2301      	movs	r3, #1
    c99c:	e7a0      	b.n	c8e0 <Print::printFloat(double, unsigned char)+0x50>
    c99e:	6803      	ldr	r3, [r0, #0]
    c9a0:	2203      	movs	r2, #3
    c9a2:	4913      	ldr	r1, [pc, #76]	; (c9f0 <Print::printFloat(double, unsigned char)+0x160>)
    c9a4:	e7ec      	b.n	c980 <Print::printFloat(double, unsigned char)+0xf0>
	number += rounding;
    c9a6:	ee30 0b07 	vadd.f64	d0, d0, d7
    c9aa:	220a      	movs	r2, #10
    c9ac:	4628      	mov	r0, r5
    c9ae:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    c9b2:	ee17 1a90 	vmov	r1, s15
}
    c9b6:	b006      	add	sp, #24
    c9b8:	ecbd 8b02 	vpop	{d8}
    c9bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c9c0:	f7ff be62 	b.w	c688 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    c9c4:	f3af 8000 	nop.w
    c9c8:	ffffffff 	.word	0xffffffff
    c9cc:	7fefffff 	.word	0x7fefffff
    c9d0:	e0000000 	.word	0xe0000000
    c9d4:	41efffff 	.word	0x41efffff
    c9d8:	e0000000 	.word	0xe0000000
    c9dc:	c1efffff 	.word	0xc1efffff
    c9e0:	9999999a 	.word	0x9999999a
    c9e4:	3fb99999 	.word	0x3fb99999
    c9e8:	200031c4 	.word	0x200031c4
    c9ec:	200031c0 	.word	0x200031c0
    c9f0:	200031bc 	.word	0x200031bc

0000c9f4 <breakTime(unsigned long, DateTimeFields&)>:
  tm.sec = time % 60;
    c9f4:	4a4d      	ldr	r2, [pc, #308]	; (cb2c <breakTime(unsigned long, DateTimeFields&)+0x138>)
{
    c9f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tm.sec = time % 60;
    c9fa:	fba2 4300 	umull	r4, r3, r2, r0
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    c9fe:	f240 1a6d 	movw	sl, #365	; 0x16d
    ca02:	4f4b      	ldr	r7, [pc, #300]	; (cb30 <breakTime(unsigned long, DateTimeFields&)+0x13c>)
  tm.sec = time % 60;
    ca04:	095b      	lsrs	r3, r3, #5
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    ca06:	f8df 8138 	ldr.w	r8, [pc, #312]	; cb40 <breakTime(unsigned long, DateTimeFields&)+0x14c>
    ca0a:	f8df 9138 	ldr.w	r9, [pc, #312]	; cb44 <breakTime(unsigned long, DateTimeFields&)+0x150>
  tm.min = time % 60;
    ca0e:	fba2 4203 	umull	r4, r2, r2, r3
  tm.sec = time % 60;
    ca12:	ebc3 1403 	rsb	r4, r3, r3, lsl #4
  tm.min = time % 60;
    ca16:	0952      	lsrs	r2, r2, #5
  tm.sec = time % 60;
    ca18:	eba0 0084 	sub.w	r0, r0, r4, lsl #2
  tm.hour = time % 24;
    ca1c:	4c45      	ldr	r4, [pc, #276]	; (cb34 <breakTime(unsigned long, DateTimeFields&)+0x140>)
  tm.min = time % 60;
    ca1e:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
  tm.sec = time % 60;
    ca22:	7008      	strb	r0, [r1, #0]
  tm.min = time % 60;
    ca24:	eba3 0385 	sub.w	r3, r3, r5, lsl #2
  tm.hour = time % 24;
    ca28:	fba4 5402 	umull	r5, r4, r4, r2
    ca2c:	0924      	lsrs	r4, r4, #4
  tm.min = time % 60;
    ca2e:	704b      	strb	r3, [r1, #1]
  tm.wday = ((time + 4) % 7);  // Sunday is day 0
    ca30:	4b41      	ldr	r3, [pc, #260]	; (cb38 <breakTime(unsigned long, DateTimeFields&)+0x144>)
    ca32:	1d25      	adds	r5, r4, #4
  tm.hour = time % 24;
    ca34:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    ca38:	eba2 02c0 	sub.w	r2, r2, r0, lsl #3
  tm.wday = ((time + 4) % 7);  // Sunday is day 0
    ca3c:	fba3 0305 	umull	r0, r3, r3, r5
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    ca40:	2000      	movs	r0, #0
  tm.hour = time % 24;
    ca42:	708a      	strb	r2, [r1, #2]
  tm.wday = ((time + 4) % 7);  // Sunday is day 0
    ca44:	1aea      	subs	r2, r5, r3
    ca46:	eb03 0352 	add.w	r3, r3, r2, lsr #1
  days = 0;
    ca4a:	4602      	mov	r2, r0
  tm.wday = ((time + 4) % 7);  // Sunday is day 0
    ca4c:	089b      	lsrs	r3, r3, #2
    ca4e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    ca52:	1aed      	subs	r5, r5, r3
    ca54:	70cd      	strb	r5, [r1, #3]
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    ca56:	fa5f fe80 	uxtb.w	lr, r0
    ca5a:	f240 1c6d 	movw	ip, #365	; 0x16d
    ca5e:	f20e 73b2 	addw	r3, lr, #1970	; 0x7b2
    ca62:	f013 0503 	ands.w	r5, r3, #3
    ca66:	fb07 f603 	mul.w	r6, r7, r3
    ca6a:	d108      	bne.n	ca7e <breakTime(unsigned long, DateTimeFields&)+0x8a>
    ca6c:	ebb8 0fb6 	cmp.w	r8, r6, ror #2
    ca70:	f44f 7cb7 	mov.w	ip, #366	; 0x16e
    ca74:	d303      	bcc.n	ca7e <breakTime(unsigned long, DateTimeFields&)+0x8a>
    ca76:	ebb9 1f36 	cmp.w	r9, r6, ror #4
    ca7a:	bf38      	it	cc
    ca7c:	46d4      	movcc	ip, sl
    ca7e:	4462      	add	r2, ip
    ca80:	3001      	adds	r0, #1
    ca82:	4294      	cmp	r4, r2
    ca84:	d2e7      	bcs.n	ca56 <breakTime(unsigned long, DateTimeFields&)+0x62>
  tm.year = year + 70; // year is offset from 1970
    ca86:	f10e 0e46 	add.w	lr, lr, #70	; 0x46
  days -= LEAP_YEAR(year) ? 366 : 365;
    ca8a:	4e2c      	ldr	r6, [pc, #176]	; (cb3c <breakTime(unsigned long, DateTimeFields&)+0x148>)
  tm.year = year + 70; // year is offset from 1970
    ca8c:	f881 e006 	strb.w	lr, [r1, #6]
  days -= LEAP_YEAR(year) ? 366 : 365;
    ca90:	fba6 0603 	umull	r0, r6, r6, r3
    ca94:	b385      	cbz	r5, caf8 <breakTime(unsigned long, DateTimeFields&)+0x104>
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    ca96:	0977      	lsrs	r7, r6, #5
    ca98:	f04f 0c64 	mov.w	ip, #100	; 0x64
    ca9c:	f44f 70c8 	mov.w	r0, #400	; 0x190
    caa0:	09f6      	lsrs	r6, r6, #7
    caa2:	fb0c 3717 	mls	r7, ip, r7, r3
    caa6:	fb00 3616 	mls	r6, r0, r6, r3
  days -= LEAP_YEAR(year) ? 366 : 365;
    caaa:	f240 106d 	movw	r0, #365	; 0x16d
  time  -= days; // now it is days in this year, starting at 0
    caae:	1aa4      	subs	r4, r4, r2
    cab0:	2300      	movs	r3, #0
    cab2:	2201      	movs	r2, #1
      monthLength = monthDays[month];
    cab4:	f8df e090 	ldr.w	lr, [pc, #144]	; cb48 <breakTime(unsigned long, DateTimeFields&)+0x154>
  time  -= days; // now it is days in this year, starting at 0
    cab8:	4420      	add	r0, r4
  for (month=0; month<12; month++) {
    caba:	e00a      	b.n	cad2 <breakTime(unsigned long, DateTimeFields&)+0xde>
    if (time >= monthLength) {
    cabc:	f813 400e 	ldrb.w	r4, [r3, lr]
    cac0:	4284      	cmp	r4, r0
    cac2:	d80e      	bhi.n	cae2 <breakTime(unsigned long, DateTimeFields&)+0xee>
  for (month=0; month<12; month++) {
    cac4:	2a0c      	cmp	r2, #12
      time -= monthLength;
    cac6:	eba0 0004 	sub.w	r0, r0, r4
  for (month=0; month<12; month++) {
    caca:	d00b      	beq.n	cae4 <breakTime(unsigned long, DateTimeFields&)+0xf0>
    cacc:	3201      	adds	r2, #1
    cace:	3301      	adds	r3, #1
    cad0:	b2d2      	uxtb	r2, r2
    if (month==1) { // february
    cad2:	2b01      	cmp	r3, #1
    cad4:	fa5f fc83 	uxtb.w	ip, r3
    cad8:	d1f0      	bne.n	cabc <breakTime(unsigned long, DateTimeFields&)+0xc8>
      if (LEAP_YEAR(year)) {
    cada:	b945      	cbnz	r5, caee <breakTime(unsigned long, DateTimeFields&)+0xfa>
    cadc:	b1cf      	cbz	r7, cb12 <breakTime(unsigned long, DateTimeFields&)+0x11e>
    cade:	241d      	movs	r4, #29
    cae0:	e006      	b.n	caf0 <breakTime(unsigned long, DateTimeFields&)+0xfc>
    cae2:	4662      	mov	r2, ip
  tm.mday = time + 1;     // day of month
    cae4:	3001      	adds	r0, #1
  tm.mon = month;  // jan is month 0
    cae6:	714a      	strb	r2, [r1, #5]
  tm.mday = time + 1;     // day of month
    cae8:	7108      	strb	r0, [r1, #4]
}
    caea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    caee:	241c      	movs	r4, #28
    if (time >= monthLength) {
    caf0:	42a0      	cmp	r0, r4
    caf2:	d318      	bcc.n	cb26 <breakTime(unsigned long, DateTimeFields&)+0x132>
      time -= monthLength;
    caf4:	1b00      	subs	r0, r0, r4
  for (month=0; month<12; month++) {
    caf6:	e7e9      	b.n	cacc <breakTime(unsigned long, DateTimeFields&)+0xd8>
  days -= LEAP_YEAR(year) ? 366 : 365;
    caf8:	2064      	movs	r0, #100	; 0x64
    cafa:	0977      	lsrs	r7, r6, #5
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    cafc:	09f6      	lsrs	r6, r6, #7
  days -= LEAP_YEAR(year) ? 366 : 365;
    cafe:	fb00 3717 	mls	r7, r0, r7, r3
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    cb02:	f44f 70c8 	mov.w	r0, #400	; 0x190
    cb06:	fb00 3616 	mls	r6, r0, r6, r3
  days -= LEAP_YEAR(year) ? 366 : 365;
    cb0a:	b13f      	cbz	r7, cb1c <breakTime(unsigned long, DateTimeFields&)+0x128>
    cb0c:	f44f 70b7 	mov.w	r0, #366	; 0x16e
    cb10:	e7cd      	b.n	caae <breakTime(unsigned long, DateTimeFields&)+0xba>
      if (LEAP_YEAR(year)) {
    cb12:	2e00      	cmp	r6, #0
    cb14:	bf14      	ite	ne
    cb16:	241c      	movne	r4, #28
    cb18:	241d      	moveq	r4, #29
    cb1a:	e7e9      	b.n	caf0 <breakTime(unsigned long, DateTimeFields&)+0xfc>
  days -= LEAP_YEAR(year) ? 366 : 365;
    cb1c:	2e00      	cmp	r6, #0
    cb1e:	d1c4      	bne.n	caaa <breakTime(unsigned long, DateTimeFields&)+0xb6>
    cb20:	f44f 70b7 	mov.w	r0, #366	; 0x16e
    cb24:	e7c3      	b.n	caae <breakTime(unsigned long, DateTimeFields&)+0xba>
    if (time >= monthLength) {
    cb26:	2201      	movs	r2, #1
    cb28:	e7dc      	b.n	cae4 <breakTime(unsigned long, DateTimeFields&)+0xf0>
    cb2a:	bf00      	nop
    cb2c:	88888889 	.word	0x88888889
    cb30:	c28f5c29 	.word	0xc28f5c29
    cb34:	aaaaaaab 	.word	0xaaaaaaab
    cb38:	24924925 	.word	0x24924925
    cb3c:	51eb851f 	.word	0x51eb851f
    cb40:	028f5c28 	.word	0x028f5c28
    cb44:	00a3d70a 	.word	0x00a3d70a
    cb48:	200030ec 	.word	0x200030ec

0000cb4c <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    cb4c:	49a2      	ldr	r1, [pc, #648]	; (cdd8 <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    cb4e:	4ba3      	ldr	r3, [pc, #652]	; (cddc <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    cb50:	4288      	cmp	r0, r1
{
    cb52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    cb56:	4ca2      	ldr	r4, [pc, #648]	; (cde0 <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    cb58:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    cb5a:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    cb5c:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    cb60:	d91b      	bls.n	cb9a <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    cb62:	4ba0      	ldr	r3, [pc, #640]	; (cde4 <set_arm_clock+0x298>)
    cb64:	4298      	cmp	r0, r3
    cb66:	f240 8102 	bls.w	cd6e <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    cb6a:	1ac3      	subs	r3, r0, r3
    cb6c:	499e      	ldr	r1, [pc, #632]	; (cde8 <set_arm_clock+0x29c>)
    cb6e:	0a1b      	lsrs	r3, r3, #8
    cb70:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    cb74:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    cb78:	09db      	lsrs	r3, r3, #7
    cb7a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    cb7e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    cb82:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    cb86:	428b      	cmp	r3, r1
    cb88:	bf28      	it	cs
    cb8a:	460b      	movcs	r3, r1
    cb8c:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
    cb90:	4b96      	ldr	r3, [pc, #600]	; (cdec <set_arm_clock+0x2a0>)
    cb92:	fba3 3707 	umull	r3, r7, r3, r7
    cb96:	08ff      	lsrs	r7, r7, #3
    cb98:	e004      	b.n	cba4 <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    cb9a:	4f95      	ldr	r7, [pc, #596]	; (cdf0 <set_arm_clock+0x2a4>)
    cb9c:	42b8      	cmp	r0, r7
    cb9e:	bf8c      	ite	hi
    cba0:	270e      	movhi	r7, #14
    cba2:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    cba4:	498d      	ldr	r1, [pc, #564]	; (cddc <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    cba6:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    cbaa:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    cbae:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    cbb0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    cbb4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    cbb8:	d20c      	bcs.n	cbd4 <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    cbba:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    cbbe:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    cbc2:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    cbc6:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    cbca:	680b      	ldr	r3, [r1, #0]
    cbcc:	2b00      	cmp	r3, #0
    cbce:	dafc      	bge.n	cbca <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    cbd0:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    cbd4:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
    cbd8:	d124      	bne.n	cc24 <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    cbda:	4986      	ldr	r1, [pc, #536]	; (cdf4 <set_arm_clock+0x2a8>)
    cbdc:	690c      	ldr	r4, [r1, #16]
    cbde:	4986      	ldr	r1, [pc, #536]	; (cdf8 <set_arm_clock+0x2ac>)
    cbe0:	43a1      	bics	r1, r4
    cbe2:	f000 80ea 	beq.w	cdba <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    cbe6:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    cbea:	4634      	mov	r4, r6
    cbec:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    cbf0:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    cbf4:	d004      	beq.n	cc00 <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    cbf6:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    cbfa:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    cbfc:	4b77      	ldr	r3, [pc, #476]	; (cddc <set_arm_clock+0x290>)
    cbfe:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    cc00:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    cc04:	d007      	beq.n	cc16 <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    cc06:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    cc0a:	4974      	ldr	r1, [pc, #464]	; (cddc <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    cc0c:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    cc0e:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    cc10:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    cc12:	071a      	lsls	r2, r3, #28
    cc14:	d4fc      	bmi.n	cc10 <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    cc16:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    cc1a:	4a70      	ldr	r2, [pc, #448]	; (cddc <set_arm_clock+0x290>)
    cc1c:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    cc1e:	6c93      	ldr	r3, [r2, #72]	; 0x48
    cc20:	069b      	lsls	r3, r3, #26
    cc22:	d4fc      	bmi.n	cc1e <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    cc24:	4c75      	ldr	r4, [pc, #468]	; (cdfc <set_arm_clock+0x2b0>)
    cc26:	42a0      	cmp	r0, r4
    cc28:	f200 80ce 	bhi.w	cdc8 <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    cc2c:	f04f 0c01 	mov.w	ip, #1
    cc30:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    cc32:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    cc34:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    cc38:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    cc3c:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    cc40:	42a2      	cmp	r2, r4
    cc42:	d818      	bhi.n	cc76 <set_arm_clock+0x12a>
		if (div_arm < 8) {
    cc44:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    cc48:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    cc4c:	f040 808d 	bne.w	cd6a <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    cc50:	f1bc 0f04 	cmp.w	ip, #4
    cc54:	f200 8091 	bhi.w	cd7a <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    cc58:	180a      	adds	r2, r1, r0
    cc5a:	42a2      	cmp	r2, r4
    cc5c:	f200 80a4 	bhi.w	cda8 <set_arm_clock+0x25c>
    cc60:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    cc64:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    cc66:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    cc6a:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    cc6e:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    cc72:	42a2      	cmp	r2, r4
    cc74:	d9e6      	bls.n	cc44 <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    cc76:	f10c 31ff 	add.w	r1, ip, #4294967295
    cc7a:	028c      	lsls	r4, r1, #10
    cc7c:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    cc80:	485f      	ldr	r0, [pc, #380]	; (ce00 <set_arm_clock+0x2b4>)
    cc82:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    cc84:	4a5f      	ldr	r2, [pc, #380]	; (ce04 <set_arm_clock+0x2b8>)
    cc86:	4290      	cmp	r0, r2
    cc88:	d97f      	bls.n	cd8a <set_arm_clock+0x23e>
    cc8a:	f8df a1a4 	ldr.w	sl, [pc, #420]	; ce30 <set_arm_clock+0x2e4>
    cc8e:	226c      	movs	r2, #108	; 0x6c
    cc90:	485d      	ldr	r0, [pc, #372]	; (ce08 <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    cc92:	4d58      	ldr	r5, [pc, #352]	; (cdf4 <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    cc94:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    cc98:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    cc9c:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    cca0:	f8df c190 	ldr.w	ip, [pc, #400]	; ce34 <set_arm_clock+0x2e8>
    cca4:	ea0e 0c0c 	and.w	ip, lr, ip
    cca8:	45d4      	cmp	ip, sl
    ccaa:	d009      	beq.n	ccc0 <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    ccac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    ccb0:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    ccb4:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    ccb8:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    ccba:	682a      	ldr	r2, [r5, #0]
    ccbc:	2a00      	cmp	r2, #0
    ccbe:	dafc      	bge.n	ccba <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    ccc0:	4a46      	ldr	r2, [pc, #280]	; (cddc <set_arm_clock+0x290>)
    ccc2:	6915      	ldr	r5, [r2, #16]
    ccc4:	f005 0507 	and.w	r5, r5, #7
    ccc8:	429d      	cmp	r5, r3
    ccca:	d003      	beq.n	ccd4 <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    cccc:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    ccce:	6c93      	ldr	r3, [r2, #72]	; 0x48
    ccd0:	03dd      	lsls	r5, r3, #15
    ccd2:	d4fc      	bmi.n	ccce <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    ccd4:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    ccd8:	d009      	beq.n	ccee <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    ccda:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    ccde:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    cce2:	4a3e      	ldr	r2, [pc, #248]	; (cddc <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    cce4:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    cce6:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    cce8:	6c93      	ldr	r3, [r2, #72]	; 0x48
    ccea:	0799      	lsls	r1, r3, #30
    ccec:	d4fc      	bmi.n	cce8 <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    ccee:	4947      	ldr	r1, [pc, #284]	; (ce0c <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    ccf0:	4a47      	ldr	r2, [pc, #284]	; (ce10 <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    ccf2:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    ccf4:	4291      	cmp	r1, r2
    ccf6:	d83c      	bhi.n	cd72 <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    ccf8:	4b46      	ldr	r3, [pc, #280]	; (ce14 <set_arm_clock+0x2c8>)
    ccfa:	09c9      	lsrs	r1, r1, #7
    ccfc:	fba3 3101 	umull	r3, r1, r3, r1
    cd00:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    cd02:	1e4b      	subs	r3, r1, #1
    cd04:	021b      	lsls	r3, r3, #8
    cd06:	ea86 0203 	eor.w	r2, r6, r3
    cd0a:	f412 7f40 	tst.w	r2, #768	; 0x300
    cd0e:	d006      	beq.n	cd1e <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    cd10:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    cd14:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    cd18:	4a30      	ldr	r2, [pc, #192]	; (cddc <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    cd1a:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    cd1c:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    cd1e:	4a2f      	ldr	r2, [pc, #188]	; (cddc <set_arm_clock+0x290>)
    cd20:	6953      	ldr	r3, [r2, #20]
    cd22:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    cd26:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    cd28:	6c93      	ldr	r3, [r2, #72]	; 0x48
    cd2a:	069b      	lsls	r3, r3, #26
    cd2c:	d4fc      	bmi.n	cd28 <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    cd2e:	4b3a      	ldr	r3, [pc, #232]	; (ce18 <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    cd30:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    cd32:	fba3 2300 	umull	r2, r3, r3, r0
    cd36:	f04f 32ff 	mov.w	r2, #4294967295
    cd3a:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    cd3e:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    cd42:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    cd46:	4a35      	ldr	r2, [pc, #212]	; (ce1c <set_arm_clock+0x2d0>)
    cd48:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    cd4a:	4a35      	ldr	r2, [pc, #212]	; (ce20 <set_arm_clock+0x2d4>)
    cd4c:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    cd4e:	4a35      	ldr	r2, [pc, #212]	; (ce24 <set_arm_clock+0x2d8>)
    cd50:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    cd52:	d208      	bcs.n	cd66 <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    cd54:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    cd58:	4a21      	ldr	r2, [pc, #132]	; (cde0 <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    cd5a:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    cd5e:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    cd60:	6813      	ldr	r3, [r2, #0]
    cd62:	2b00      	cmp	r3, #0
    cd64:	dafc      	bge.n	cd60 <set_arm_clock+0x214>
	}

	return frequency;
}
    cd66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cd6a:	4673      	mov	r3, lr
    cd6c:	e762      	b.n	cc34 <set_arm_clock+0xe8>
    cd6e:	2712      	movs	r7, #18
    cd70:	e718      	b.n	cba4 <set_arm_clock+0x58>
    cd72:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    cd76:	2104      	movs	r1, #4
    cd78:	e7c5      	b.n	cd06 <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    cd7a:	f10c 31ff 	add.w	r1, ip, #4294967295
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    cd7e:	4820      	ldr	r0, [pc, #128]	; (ce00 <set_arm_clock+0x2b4>)
    cd80:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    cd82:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    cd84:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    cd86:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    cd8a:	4a27      	ldr	r2, [pc, #156]	; (ce28 <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    cd8c:	f8df a0a8 	ldr.w	sl, [pc, #168]	; ce38 <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    cd90:	fba2 2000 	umull	r2, r0, r2, r0
    cd94:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    cd96:	4825      	ldr	r0, [pc, #148]	; (ce2c <set_arm_clock+0x2e0>)
    cd98:	2a36      	cmp	r2, #54	; 0x36
    cd9a:	bf38      	it	cc
    cd9c:	2236      	movcc	r2, #54	; 0x36
    cd9e:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    cda2:	ea42 0a0a 	orr.w	sl, r2, sl
    cda6:	e774      	b.n	cc92 <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    cda8:	ea4f 248c 	mov.w	r4, ip, lsl #10
    cdac:	2300      	movs	r3, #0
    cdae:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    cdb2:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    cdb6:	46ac      	mov	ip, r5
    cdb8:	e762      	b.n	cc80 <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    cdba:	461d      	mov	r5, r3
    cdbc:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    cdc0:	4611      	mov	r1, r2
    cdc2:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    cdc6:	e713      	b.n	cbf0 <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    cdc8:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    cdca:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    cdce:	4602      	mov	r2, r0
    cdd0:	4631      	mov	r1, r6
    cdd2:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    cdd4:	46e6      	mov	lr, ip
    cdd6:	e753      	b.n	cc80 <set_arm_clock+0x134>
    cdd8:	1f78a400 	.word	0x1f78a400
    cddc:	400fc000 	.word	0x400fc000
    cde0:	40080000 	.word	0x40080000
    cde4:	23c34600 	.word	0x23c34600
    cde8:	004cb223 	.word	0x004cb223
    cdec:	51eb851f 	.word	0x51eb851f
    cdf0:	016e3600 	.word	0x016e3600
    cdf4:	400d8000 	.word	0x400d8000
    cdf8:	80003040 	.word	0x80003040
    cdfc:	269fb1ff 	.word	0x269fb1ff
    ce00:	005b8d80 	.word	0x005b8d80
    ce04:	4df67eff 	.word	0x4df67eff
    ce08:	4d3f6400 	.word	0x4d3f6400
    ce0c:	08f0d17f 	.word	0x08f0d17f
    ce10:	2cb4177f 	.word	0x2cb4177f
    ce14:	00e5109f 	.word	0x00e5109f
    ce18:	431bde83 	.word	0x431bde83
    ce1c:	2000bd24 	.word	0x2000bd24
    ce20:	2000bd20 	.word	0x2000bd20
    ce24:	2005e474 	.word	0x2005e474
    ce28:	165e9f81 	.word	0x165e9f81
    ce2c:	00b71b00 	.word	0x00b71b00
    ce30:	8000206c 	.word	0x8000206c
    ce34:	8001307f 	.word	0x8001307f
    ce38:	80002000 	.word	0x80002000

0000ce3c <delay>:
// or delayNanoseconds().
void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    ce3c:	b900      	cbnz	r0, ce40 <delay+0x4>
    ce3e:	4770      	bx	lr
{
    ce40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    ce44:	2101      	movs	r1, #1
    ce46:	4681      	mov	r9, r0
    ce48:	4c21      	ldr	r4, [pc, #132]	; (ced0 <delay+0x94>)
    ce4a:	4d22      	ldr	r5, [pc, #136]	; (ced4 <delay+0x98>)
    ce4c:	4e22      	ldr	r6, [pc, #136]	; (ced8 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    ce4e:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    ce52:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    ce54:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    ce56:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    ce5a:	2b00      	cmp	r3, #0
    ce5c:	d1f7      	bne.n	ce4e <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    ce5e:	491f      	ldr	r1, [pc, #124]	; (cedc <delay+0xa0>)
    ce60:	684b      	ldr	r3, [r1, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    ce62:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    ce66:	f8df a078 	ldr.w	sl, [pc, #120]	; cee0 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
    ce6a:	1a1b      	subs	r3, r3, r0
    ce6c:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
    ce6e:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    ce72:	f8da 2000 	ldr.w	r2, [sl]
    ce76:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
    ce7a:	455a      	cmp	r2, fp
    ce7c:	bf94      	ite	ls
    ce7e:	4490      	addls	r8, r2
    ce80:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    ce82:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    ce86:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    ce88:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    ce8a:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    ce8e:	2b00      	cmp	r3, #0
    ce90:	d1f7      	bne.n	ce82 <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    ce92:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    ce94:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
    ce98:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
    ce9a:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    ce9e:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
    cea2:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
    cea6:	bf94      	ite	ls
    cea8:	4462      	addls	r2, ip
    ceaa:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
    ceae:	eba2 0208 	sub.w	r2, r2, r8
    ceb2:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    ceb6:	d306      	bcc.n	cec6 <delay+0x8a>
			if (--msec == 0) return;
    ceb8:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
    cebc:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    cec0:	d1df      	bne.n	ce82 <delay+0x46>
}
    cec2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    cec6:	f001 fdad 	bl	ea24 <yield>
		while ((micros() - start) >= 1000) {
    ceca:	4904      	ldr	r1, [pc, #16]	; (cedc <delay+0xa0>)
    cecc:	e7d9      	b.n	ce82 <delay+0x46>
    cece:	bf00      	nop
    ced0:	2005e504 	.word	0x2005e504
    ced4:	2005e500 	.word	0x2005e500
    ced8:	2005e4fc 	.word	0x2005e4fc
    cedc:	e0001000 	.word	0xe0001000
    cee0:	2005e474 	.word	0x2005e474

0000cee4 <micros>:
{
    cee4:	b430      	push	{r4, r5}
    cee6:	4b0f      	ldr	r3, [pc, #60]	; (cf24 <micros+0x40>)
    cee8:	f04f 0c01 	mov.w	ip, #1
    ceec:	4d0e      	ldr	r5, [pc, #56]	; (cf28 <micros+0x44>)
    ceee:	4c0f      	ldr	r4, [pc, #60]	; (cf2c <micros+0x48>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    cef0:	e853 2f00 	ldrex	r2, [r3]
		smc = systick_millis_count;
    cef4:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    cef6:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    cef8:	e843 c200 	strex	r2, ip, [r3]
	} while ( __STREXW(1, &systick_safe_read));
    cefc:	2a00      	cmp	r2, #0
    cefe:	d1f7      	bne.n	cef0 <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    cf00:	4b0b      	ldr	r3, [pc, #44]	; (cf30 <micros+0x4c>)
    cf02:	685b      	ldr	r3, [r3, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    cf04:	4a0b      	ldr	r2, [pc, #44]	; (cf34 <micros+0x50>)
	uint32_t ccdelta = cyccnt - scc;
    cf06:	1a5b      	subs	r3, r3, r1
	uint32_t usec = 1000*smc + frac;
    cf08:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    cf0c:	6812      	ldr	r2, [r2, #0]
	uint32_t usec = 1000*smc + frac;
    cf0e:	fb01 f000 	mul.w	r0, r1, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    cf12:	fba3 3202 	umull	r3, r2, r3, r2
	return usec;
}
    cf16:	bc30      	pop	{r4, r5}
    cf18:	428a      	cmp	r2, r1
    cf1a:	bf94      	ite	ls
    cf1c:	1880      	addls	r0, r0, r2
    cf1e:	1840      	addhi	r0, r0, r1
    cf20:	4770      	bx	lr
    cf22:	bf00      	nop
    cf24:	2005e504 	.word	0x2005e504
    cf28:	2005e500 	.word	0x2005e500
    cf2c:	2005e4fc 	.word	0x2005e4fc
    cf30:	e0001000 	.word	0xe0001000
    cf34:	2005e474 	.word	0x2005e474

0000cf38 <digitalWrite>:
	if (pin >= CORE_NUM_DIGITAL) return;
    cf38:	2836      	cmp	r0, #54	; 0x36
    cf3a:	d816      	bhi.n	cf6a <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
    cf3c:	0102      	lsls	r2, r0, #4
    cf3e:	4b10      	ldr	r3, [pc, #64]	; (cf80 <digitalWrite+0x48>)
    cf40:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    cf44:	589b      	ldr	r3, [r3, r2]
{
    cf46:	b410      	push	{r4}
	mask = p->mask;
    cf48:	68c2      	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    cf4a:	685c      	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    cf4c:	4214      	tst	r4, r2
    cf4e:	d005      	beq.n	cf5c <digitalWrite+0x24>
		if (val) {
    cf50:	b961      	cbnz	r1, cf6c <digitalWrite+0x34>
		}
	}
}
    cf52:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
    cf56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    cf5a:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    cf5c:	6883      	ldr	r3, [r0, #8]
		if (val) {
    cf5e:	b151      	cbz	r1, cf76 <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    cf60:	4a08      	ldr	r2, [pc, #32]	; (cf84 <digitalWrite+0x4c>)
}
    cf62:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    cf66:	601a      	str	r2, [r3, #0]
}
    cf68:	4770      	bx	lr
    cf6a:	4770      	bx	lr
    cf6c:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
    cf70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    cf74:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    cf76:	4a04      	ldr	r2, [pc, #16]	; (cf88 <digitalWrite+0x50>)
}
    cf78:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    cf7c:	601a      	str	r2, [r3, #0]
}
    cf7e:	4770      	bx	lr
    cf80:	2000a2c4 	.word	0x2000a2c4
    cf84:	0001f038 	.word	0x0001f038
    cf88:	00013038 	.word	0x00013038

0000cf8c <digitalRead>:

uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
    cf8c:	2836      	cmp	r0, #54	; 0x36
    cf8e:	d80b      	bhi.n	cfa8 <digitalRead+0x1c>
	p = digital_pin_to_info_PGM + pin;
    cf90:	4b06      	ldr	r3, [pc, #24]	; (cfac <digitalRead+0x20>)
    cf92:	0102      	lsls	r2, r0, #4
    cf94:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
    cf98:	589a      	ldr	r2, [r3, r2]
    cf9a:	68c3      	ldr	r3, [r0, #12]
    cf9c:	6892      	ldr	r2, [r2, #8]
    cf9e:	421a      	tst	r2, r3
    cfa0:	bf14      	ite	ne
    cfa2:	2001      	movne	r0, #1
    cfa4:	2000      	moveq	r0, #0
    cfa6:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return 0;
    cfa8:	2000      	movs	r0, #0
}
    cfaa:	4770      	bx	lr
    cfac:	2000a2c4 	.word	0x2000a2c4

0000cfb0 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    cfb0:	2836      	cmp	r0, #54	; 0x36
    cfb2:	d829      	bhi.n	d008 <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
    cfb4:	4b16      	ldr	r3, [pc, #88]	; (d010 <pinMode+0x60>)
    cfb6:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    cfb8:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
    cfba:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    cfbe:	589a      	ldr	r2, [r3, r2]
{
    cfc0:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    cfc2:	6853      	ldr	r3, [r2, #4]
    cfc4:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    cfc6:	d00e      	beq.n	cfe6 <pinMode+0x36>
    cfc8:	2904      	cmp	r1, #4
    cfca:	d00c      	beq.n	cfe6 <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    cfcc:	ea23 0304 	bic.w	r3, r3, r4
    cfd0:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    cfd2:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
    cfd4:	b1a9      	cbz	r1, d002 <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
    cfd6:	2902      	cmp	r1, #2
    cfd8:	d017      	beq.n	d00a <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    cfda:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    cfdc:	bf0c      	ite	eq
    cfde:	4a0d      	ldreq	r2, [pc, #52]	; (d014 <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    cfe0:	4a0d      	ldrne	r2, [pc, #52]	; (d018 <pinMode+0x68>)
    cfe2:	601a      	str	r2, [r3, #0]
    cfe4:	e007      	b.n	cff6 <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    cfe6:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
    cfe8:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    cfea:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
    cfec:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
    cfee:	d008      	beq.n	d002 <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    cff0:	f640 0238 	movw	r2, #2104	; 0x838
    cff4:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    cff6:	6843      	ldr	r3, [r0, #4]
    cff8:	2215      	movs	r2, #21
}
    cffa:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
    cffe:	601a      	str	r2, [r3, #0]
}
    d000:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
    d002:	2238      	movs	r2, #56	; 0x38
    d004:	601a      	str	r2, [r3, #0]
    d006:	e7f6      	b.n	cff6 <pinMode+0x46>
    d008:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    d00a:	4a04      	ldr	r2, [pc, #16]	; (d01c <pinMode+0x6c>)
    d00c:	601a      	str	r2, [r3, #0]
    d00e:	e7f2      	b.n	cff6 <pinMode+0x46>
    d010:	2000a2c4 	.word	0x2000a2c4
    d014:	00013038 	.word	0x00013038
    d018:	00010038 	.word	0x00010038
    d01c:	0001f038 	.word	0x0001f038

0000d020 <flash_wait>:
{
    d020:	b430      	push	{r4, r5}
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    d022:	4a12      	ldr	r2, [pc, #72]	; (d06c <flash_wait+0x4c>)
	FLEXSPI_LUT61 = 0;
    d024:	2000      	movs	r0, #0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    d026:	4b12      	ldr	r3, [pc, #72]	; (d070 <flash_wait+0x50>)
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
    d028:	2101      	movs	r1, #1
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
    d02a:	4d12      	ldr	r5, [pc, #72]	; (d074 <flash_wait+0x54>)
		status = *(uint8_t *)&FLEXSPI_RFDR0;
    d02c:	4c12      	ldr	r4, [pc, #72]	; (d078 <flash_wait+0x58>)
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    d02e:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
	FLEXSPI_LUT61 = 0;
    d032:	f8c2 02f4 	str.w	r0, [r2, #756]	; 0x2f4
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
    d036:	f8c2 10b8 	str.w	r1, [r2, #184]	; 0xb8
		FLEXSPI_IPCR0 = 0;
    d03a:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
    d03e:	f8c2 50a4 	str.w	r5, [r2, #164]	; 0xa4
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    d042:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {;}
    d046:	6953      	ldr	r3, [r2, #20]
    d048:	07db      	lsls	r3, r3, #31
    d04a:	d5fc      	bpl.n	d046 <flash_wait+0x26>
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    d04c:	6151      	str	r1, [r2, #20]
	} while (status & 1);
    d04e:	7823      	ldrb	r3, [r4, #0]
    d050:	07db      	lsls	r3, r3, #31
    d052:	d4f0      	bmi.n	d036 <flash_wait+0x16>
	FLEXSPI_MCR0 |= FLEXSPI_MCR0_SWRESET; // purge stale data from FlexSPI's AHB FIFO
    d054:	6813      	ldr	r3, [r2, #0]
	while (FLEXSPI_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
    d056:	4905      	ldr	r1, [pc, #20]	; (d06c <flash_wait+0x4c>)
	FLEXSPI_MCR0 |= FLEXSPI_MCR0_SWRESET; // purge stale data from FlexSPI's AHB FIFO
    d058:	f043 0301 	orr.w	r3, r3, #1
    d05c:	6013      	str	r3, [r2, #0]
	while (FLEXSPI_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
    d05e:	680b      	ldr	r3, [r1, #0]
    d060:	07db      	lsls	r3, r3, #31
    d062:	d4fc      	bmi.n	d05e <flash_wait+0x3e>
	__enable_irq();
    d064:	b662      	cpsie	i
}
    d066:	bc30      	pop	{r4, r5}
    d068:	4770      	bx	lr
    d06a:	bf00      	nop
    d06c:	402a8000 	.word	0x402a8000
    d070:	24010405 	.word	0x24010405
    d074:	000f0001 	.word	0x000f0001
    d078:	402a8100 	.word	0x402a8100

0000d07c <eeprom_initialize>:
{
    d07c:	b570      	push	{r4, r5, r6, lr}
    d07e:	4c0e      	ldr	r4, [pc, #56]	; (d0b8 <eeprom_initialize+0x3c>)
			if (*p++ == 0xFFFF) break;
    d080:	f64f 7eff 	movw	lr, #65535	; 0xffff
{
    d084:	4e0d      	ldr	r6, [pc, #52]	; (d0bc <eeprom_initialize+0x40>)
    d086:	f104 057e 	add.w	r5, r4, #126	; 0x7e
		const uint16_t *p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    d08a:	f5a6 5380 	sub.w	r3, r6, #4096	; 0x1000
		uint16_t index = 0;
    d08e:	2100      	movs	r1, #0
    d090:	e002      	b.n	d098 <eeprom_initialize+0x1c>
		} while (p < end);
    d092:	42b3      	cmp	r3, r6
			index++;
    d094:	b281      	uxth	r1, r0
		} while (p < end);
    d096:	d204      	bcs.n	d0a2 <eeprom_initialize+0x26>
			if (*p++ == 0xFFFF) break;
    d098:	881a      	ldrh	r2, [r3, #0]
			index++;
    d09a:	1c48      	adds	r0, r1, #1
			if (*p++ == 0xFFFF) break;
    d09c:	3302      	adds	r3, #2
    d09e:	4572      	cmp	r2, lr
    d0a0:	d1f7      	bne.n	d092 <eeprom_initialize+0x16>
		sector_index[sector] = index;
    d0a2:	f824 1f02 	strh.w	r1, [r4, #2]!
	for (sector=0; sector < FLASH_SECTORS; sector++) {
    d0a6:	42ac      	cmp	r4, r5
    d0a8:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
    d0ac:	d1ed      	bne.n	d08a <eeprom_initialize+0xe>
	initialized = 1;
    d0ae:	4b04      	ldr	r3, [pc, #16]	; (d0c0 <eeprom_initialize+0x44>)
    d0b0:	2201      	movs	r2, #1
    d0b2:	701a      	strb	r2, [r3, #0]
}
    d0b4:	bd70      	pop	{r4, r5, r6, pc}
    d0b6:	bf00      	nop
    d0b8:	2005e476 	.word	0x2005e476
    d0bc:	607c1000 	.word	0x607c1000
    d0c0:	2005e546 	.word	0x2005e546

0000d0c4 <eeprom_read_byte>:
	if (addr > E2END) return 0xFF;
    d0c4:	f241 03bb 	movw	r3, #4283	; 0x10bb
    d0c8:	4298      	cmp	r0, r3
    d0ca:	d82f      	bhi.n	d12c <eeprom_read_byte+0x68>
	if (!initialized) eeprom_initialize();
    d0cc:	4b18      	ldr	r3, [pc, #96]	; (d130 <eeprom_read_byte+0x6c>)
{
    d0ce:	b510      	push	{r4, lr}
	if (!initialized) eeprom_initialize();
    d0d0:	781b      	ldrb	r3, [r3, #0]
    d0d2:	4604      	mov	r4, r0
    d0d4:	b33b      	cbz	r3, d126 <eeprom_read_byte+0x62>
	sector = (addr >> 2) % FLASH_SECTORS;
    d0d6:	08a0      	lsrs	r0, r4, #2
    d0d8:	4b16      	ldr	r3, [pc, #88]	; (d134 <eeprom_read_byte+0x70>)
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    d0da:	f004 0103 	and.w	r1, r4, #3
	end = p + sector_index[sector];
    d0de:	4c16      	ldr	r4, [pc, #88]	; (d138 <eeprom_read_byte+0x74>)
	sector = (addr >> 2) % FLASH_SECTORS;
    d0e0:	fba3 2300 	umull	r2, r3, r3, r0
    d0e4:	1ac2      	subs	r2, r0, r3
    d0e6:	eb03 0352 	add.w	r3, r3, r2, lsr #1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    d0ea:	4a14      	ldr	r2, [pc, #80]	; (d13c <eeprom_read_byte+0x78>)
	sector = (addr >> 2) % FLASH_SECTORS;
    d0ec:	095b      	lsrs	r3, r3, #5
    d0ee:	ebc3 1e83 	rsb	lr, r3, r3, lsl #6
    d0f2:	469c      	mov	ip, r3
    d0f4:	eba0 030e 	sub.w	r3, r0, lr
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    d0f8:	ea41 018c 	orr.w	r1, r1, ip, lsl #2
	uint8_t data=0xFF;
    d0fc:	20ff      	movs	r0, #255	; 0xff
	end = p + sector_index[sector];
    d0fe:	f834 c013 	ldrh.w	ip, [r4, r3, lsl #1]
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    d102:	441a      	add	r2, r3
	end = p + sector_index[sector];
    d104:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    d108:	0313      	lsls	r3, r2, #12
	end = p + sector_index[sector];
    d10a:	eb0c 3c02 	add.w	ip, ip, r2, lsl #12
	while (p < end) {
    d10e:	ebbc 3f02 	cmp.w	ip, r2, lsl #12
    d112:	d907      	bls.n	d124 <eeprom_read_byte+0x60>
		uint32_t val = *p++;
    d114:	881a      	ldrh	r2, [r3, #0]
    d116:	3302      	adds	r3, #2
		if ((val & 255) == offset) data = val >> 8;
    d118:	b2d4      	uxtb	r4, r2
    d11a:	428c      	cmp	r4, r1
    d11c:	bf08      	it	eq
    d11e:	0a10      	lsreq	r0, r2, #8
	while (p < end) {
    d120:	459c      	cmp	ip, r3
    d122:	d8f7      	bhi.n	d114 <eeprom_read_byte+0x50>
}
    d124:	bd10      	pop	{r4, pc}
	if (!initialized) eeprom_initialize();
    d126:	f7ff ffa9 	bl	d07c <eeprom_initialize>
    d12a:	e7d4      	b.n	d0d6 <eeprom_read_byte+0x12>
	if (addr > E2END) return 0xFF;
    d12c:	20ff      	movs	r0, #255	; 0xff
}
    d12e:	4770      	bx	lr
    d130:	2005e546 	.word	0x2005e546
    d134:	04104105 	.word	0x04104105
    d138:	2005e478 	.word	0x2005e478
    d13c:	000607c0 	.word	0x000607c0

0000d140 <eepromemu_flash_write>:
{
    d140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d142:	460f      	mov	r7, r1
    d144:	4616      	mov	r6, r2
	__disable_irq();
    d146:	b672      	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    d148:	4b34      	ldr	r3, [pc, #208]	; (d21c <eepromemu_flash_write+0xdc>)
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    d14a:	f240 4106 	movw	r1, #1030	; 0x406
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    d14e:	4a34      	ldr	r2, [pc, #208]	; (d220 <eepromemu_flash_write+0xe0>)
    d150:	619a      	str	r2, [r3, #24]
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    d152:	2202      	movs	r2, #2
    d154:	61da      	str	r2, [r3, #28]
	FLEXSPI_IPCR0 = 0;
    d156:	2200      	movs	r2, #0
    d158:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    d15c:	f8c3 12f0 	str.w	r1, [r3, #752]	; 0x2f0
	FLEXSPI_LUT61 = 0;
    d160:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
    d164:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
    d168:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    d16c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    d170:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    d174:	2201      	movs	r2, #1
    d176:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    d17a:	f020 031f 	bic.w	r3, r0, #31
	uint32_t end_addr = (uint32_t)addr + size;
    d17e:	1982      	adds	r2, r0, r6
	asm("dsb");
    d180:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    d184:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    d188:	f8c4 3f5c 	str.w	r3, [r4, #3932]	; 0xf5c
		location += 32;
    d18c:	3320      	adds	r3, #32
	} while (location < end_addr);
    d18e:	429a      	cmp	r2, r3
    d190:	d8fa      	bhi.n	d188 <eepromemu_flash_write+0x48>
	asm("dsb");
    d192:	f3bf 8f4f 	dsb	sy
	asm("isb");
    d196:	f3bf 8f6f 	isb	sy
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    d19a:	4d20      	ldr	r5, [pc, #128]	; (d21c <eepromemu_flash_write+0xdc>)
    d19c:	696b      	ldr	r3, [r5, #20]
    d19e:	07da      	lsls	r2, r3, #31
    d1a0:	d5fc      	bpl.n	d19c <eepromemu_flash_write+0x5c>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    d1a2:	2301      	movs	r3, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
    d1a4:	491f      	ldr	r1, [pc, #124]	; (d224 <eepromemu_flash_write+0xe4>)
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    d1a6:	b2b2      	uxth	r2, r6
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
    d1a8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    d1ac:	616b      	str	r3, [r5, #20]
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    d1ae:	f442 2270 	orr.w	r2, r2, #983040	; 0xf0000
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
    d1b2:	f8c5 12f0 	str.w	r1, [r5, #752]	; 0x2f0
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
    d1b6:	f242 2101 	movw	r1, #8705	; 0x2201
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    d1ba:	4c18      	ldr	r4, [pc, #96]	; (d21c <eepromemu_flash_write+0xdc>)
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
    d1bc:	f8c5 12f4 	str.w	r1, [r5, #756]	; 0x2f4
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
    d1c0:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
    d1c4:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    d1c8:	f8c5 20a4 	str.w	r2, [r5, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    d1cc:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    d1d0:	4d15      	ldr	r5, [pc, #84]	; (d228 <eepromemu_flash_write+0xe8>)
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    d1d2:	e001      	b.n	d1d8 <eepromemu_flash_write+0x98>
		if (n & FLEXSPI_INTR_IPTXWE) {
    d1d4:	065b      	lsls	r3, r3, #25
    d1d6:	d409      	bmi.n	d1ec <eepromemu_flash_write+0xac>
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    d1d8:	6963      	ldr	r3, [r4, #20]
    d1da:	f013 0001 	ands.w	r0, r3, #1
    d1de:	d0f9      	beq.n	d1d4 <eepromemu_flash_write+0x94>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPTXWE;
    d1e0:	2341      	movs	r3, #65	; 0x41
    d1e2:	6163      	str	r3, [r4, #20]
}
    d1e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	flash_wait();
    d1e8:	f7ff bf1a 	b.w	d020 <flash_wait>
			if (wrlen > 8) wrlen = 8;
    d1ec:	2e08      	cmp	r6, #8
    d1ee:	d80a      	bhi.n	d206 <eepromemu_flash_write+0xc6>
			if (wrlen > 0) {
    d1f0:	b136      	cbz	r6, d200 <eepromemu_flash_write+0xc0>
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    d1f2:	4632      	mov	r2, r6
    d1f4:	4639      	mov	r1, r7
				src += wrlen;
    d1f6:	4437      	add	r7, r6
				len -= wrlen;
    d1f8:	4606      	mov	r6, r0
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    d1fa:	4628      	mov	r0, r5
    d1fc:	f000 f9a8 	bl	d550 <memcpy>
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
    d200:	2340      	movs	r3, #64	; 0x40
    d202:	6163      	str	r3, [r4, #20]
    d204:	e7e8      	b.n	d1d8 <eepromemu_flash_write+0x98>
    d206:	f1a6 0008 	sub.w	r0, r6, #8
			if (wrlen > 8) wrlen = 8;
    d20a:	2608      	movs	r6, #8
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    d20c:	4639      	mov	r1, r7
    d20e:	4632      	mov	r2, r6
				src += wrlen;
    d210:	4437      	add	r7, r6
				len -= wrlen;
    d212:	4606      	mov	r6, r0
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    d214:	4628      	mov	r0, r5
    d216:	f000 f99b 	bl	d550 <memcpy>
				len -= wrlen;
    d21a:	e7f1      	b.n	d200 <eepromemu_flash_write+0xc0>
    d21c:	402a8000 	.word	0x402a8000
    d220:	5af05af0 	.word	0x5af05af0
    d224:	08180432 	.word	0x08180432
    d228:	402a8180 	.word	0x402a8180

0000d22c <eepromemu_flash_erase_sector>:
{
    d22c:	b410      	push	{r4}
	__disable_irq();
    d22e:	b672      	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    d230:	4b28      	ldr	r3, [pc, #160]	; (d2d4 <eepromemu_flash_erase_sector+0xa8>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    d232:	2102      	movs	r1, #2
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    d234:	4c28      	ldr	r4, [pc, #160]	; (d2d8 <eepromemu_flash_erase_sector+0xac>)
	FLEXSPI_LUT61 = 0;
    d236:	2200      	movs	r2, #0
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    d238:	619c      	str	r4, [r3, #24]
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    d23a:	f44f 2470 	mov.w	r4, #983040	; 0xf0000
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    d23e:	61d9      	str	r1, [r3, #28]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    d240:	f240 4106 	movw	r1, #1030	; 0x406
    d244:	f8c3 12f0 	str.w	r1, [r3, #752]	; 0x2f0
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    d248:	2101      	movs	r1, #1
	FLEXSPI_LUT61 = 0;
    d24a:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
    d24e:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
    d252:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR0 = 0;
    d256:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
    d25a:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    d25e:	f8c3 40a4 	str.w	r4, [r3, #164]	; 0xa4
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
    d262:	4002      	ands	r2, r0
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    d264:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
	asm("dsb");
    d268:	f3bf 8f4f 	dsb	sy
	uint32_t end_addr = (uint32_t)addr + size;
    d26c:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
    d270:	f102 0320 	add.w	r3, r2, #32
		SCB_CACHE_DCIMVAC = location;
    d274:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    d278:	4299      	cmp	r1, r3
    d27a:	bf34      	ite	cc
    d27c:	2101      	movcc	r1, #1
    d27e:	2180      	movcs	r1, #128	; 0x80
    d280:	eb02 1141 	add.w	r1, r2, r1, lsl #5
	} while (location < end_addr);
    d284:	428b      	cmp	r3, r1
		SCB_CACHE_DCIMVAC = location;
    d286:	f8cc 2f5c 	str.w	r2, [ip, #3932]	; 0xf5c
		location += 32;
    d28a:	461a      	mov	r2, r3
	} while (location < end_addr);
    d28c:	f103 0320 	add.w	r3, r3, #32
    d290:	d1f8      	bne.n	d284 <eepromemu_flash_erase_sector+0x58>
	asm("dsb");
    d292:	f3bf 8f4f 	dsb	sy
	asm("isb");
    d296:	f3bf 8f6f 	isb	sy
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    d29a:	4a0e      	ldr	r2, [pc, #56]	; (d2d4 <eepromemu_flash_erase_sector+0xa8>)
    d29c:	6953      	ldr	r3, [r2, #20]
    d29e:	07d9      	lsls	r1, r3, #31
    d2a0:	d5fc      	bpl.n	d29c <eepromemu_flash_erase_sector+0x70>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    d2a2:	2401      	movs	r4, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
    d2a4:	490d      	ldr	r1, [pc, #52]	; (d2dc <eepromemu_flash_erase_sector+0xb0>)
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
    d2a6:	4b0e      	ldr	r3, [pc, #56]	; (d2e0 <eepromemu_flash_erase_sector+0xb4>)
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    d2a8:	6154      	str	r4, [r2, #20]
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
    d2aa:	4003      	ands	r3, r0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
    d2ac:	f8c2 12f0 	str.w	r1, [r2, #752]	; 0x2f0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    d2b0:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    d2b4:	4907      	ldr	r1, [pc, #28]	; (d2d4 <eepromemu_flash_erase_sector+0xa8>)
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
    d2b6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    d2ba:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    d2be:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    d2c2:	694b      	ldr	r3, [r1, #20]
    d2c4:	07db      	lsls	r3, r3, #31
    d2c6:	d5fc      	bpl.n	d2c2 <eepromemu_flash_erase_sector+0x96>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    d2c8:	2301      	movs	r3, #1
}
    d2ca:	f85d 4b04 	ldr.w	r4, [sp], #4
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    d2ce:	614b      	str	r3, [r1, #20]
	flash_wait();
    d2d0:	f7ff bea6 	b.w	d020 <flash_wait>
    d2d4:	402a8000 	.word	0x402a8000
    d2d8:	5af05af0 	.word	0x5af05af0
    d2dc:	08180420 	.word	0x08180420
    d2e0:	00fff000 	.word	0x00fff000

0000d2e4 <eeprom_write_byte>:
	if (addr > E2END) return;
    d2e4:	f241 03bb 	movw	r3, #4283	; 0x10bb
    d2e8:	4298      	cmp	r0, r3
    d2ea:	f200 8089 	bhi.w	d400 <eeprom_write_byte+0x11c>
	if (!initialized) eeprom_initialize();
    d2ee:	4b46      	ldr	r3, [pc, #280]	; (d408 <eeprom_write_byte+0x124>)
{
    d2f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!initialized) eeprom_initialize();
    d2f4:	781b      	ldrb	r3, [r3, #0]
{
    d2f6:	b0c2      	sub	sp, #264	; 0x108
    d2f8:	4605      	mov	r5, r0
    d2fa:	4689      	mov	r9, r1
	if (!initialized) eeprom_initialize();
    d2fc:	2b00      	cmp	r3, #0
    d2fe:	d07c      	beq.n	d3fa <eeprom_write_byte+0x116>
	sector = (addr >> 2) % FLASH_SECTORS; 
    d300:	08ab      	lsrs	r3, r5, #2
    d302:	4e42      	ldr	r6, [pc, #264]	; (d40c <eeprom_write_byte+0x128>)
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    d304:	f005 0503 	and.w	r5, r5, #3
	end = p + sector_index[sector];
    d308:	4f41      	ldr	r7, [pc, #260]	; (d410 <eeprom_write_byte+0x12c>)
	sector = (addr >> 2) % FLASH_SECTORS; 
    d30a:	fba6 2603 	umull	r2, r6, r6, r3
    d30e:	1b9a      	subs	r2, r3, r6
    d310:	eb06 0652 	add.w	r6, r6, r2, lsr #1
    d314:	0976      	lsrs	r6, r6, #5
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    d316:	ea45 0586 	orr.w	r5, r5, r6, lsl #2
	sector = (addr >> 2) % FLASH_SECTORS; 
    d31a:	ebc6 1686 	rsb	r6, r6, r6, lsl #6
    d31e:	1b9e      	subs	r6, r3, r6
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    d320:	4b3c      	ldr	r3, [pc, #240]	; (d414 <eeprom_write_byte+0x130>)
	end = p + sector_index[sector];
    d322:	f837 4016 	ldrh.w	r4, [r7, r6, lsl #1]
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    d326:	4433      	add	r3, r6
	end = p + sector_index[sector];
    d328:	0060      	lsls	r0, r4, #1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    d32a:	ea4f 3803 	mov.w	r8, r3, lsl #12
	end = p + sector_index[sector];
    d32e:	eb00 3003 	add.w	r0, r0, r3, lsl #12
	while (p < end) {
    d332:	ebb0 3f03 	cmp.w	r0, r3, lsl #12
    d336:	d964      	bls.n	d402 <eeprom_write_byte+0x11e>
    d338:	4643      	mov	r3, r8
	uint8_t olddata=0xFF;
    d33a:	f04f 0cff 	mov.w	ip, #255	; 0xff
		uint16_t val = *p++;
    d33e:	881a      	ldrh	r2, [r3, #0]
    d340:	3302      	adds	r3, #2
		if ((val & 255) == offset) olddata = val >> 8;
    d342:	b2d1      	uxtb	r1, r2
    d344:	42a9      	cmp	r1, r5
    d346:	bf08      	it	eq
    d348:	ea4f 2c12 	moveq.w	ip, r2, lsr #8
	while (p < end) {
    d34c:	4298      	cmp	r0, r3
    d34e:	d8f6      	bhi.n	d33e <eeprom_write_byte+0x5a>
	if (data == olddata) return;
    d350:	45e1      	cmp	r9, ip
    d352:	d041      	beq.n	d3d8 <eeprom_write_byte+0xf4>
	if (sector_index[sector] < 2048) {
    d354:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
    d358:	d341      	bcc.n	d3de <eeprom_write_byte+0xfa>
		memset(buf, 0xFF, sizeof(buf));
    d35a:	ac02      	add	r4, sp, #8
    d35c:	f44f 7280 	mov.w	r2, #256	; 0x100
    d360:	21ff      	movs	r1, #255	; 0xff
    d362:	4620      	mov	r0, r4
    d364:	f003 fe26 	bl	10fb4 <memset>
		while (p < end) {
    d368:	f508 5080 	add.w	r0, r8, #4096	; 0x1000
    d36c:	f108 0302 	add.w	r3, r8, #2
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    d370:	4642      	mov	r2, r8
    d372:	4298      	cmp	r0, r3
    d374:	bf34      	ite	cc
    d376:	2001      	movcc	r0, #1
    d378:	f44f 6000 	movcs.w	r0, #2048	; 0x800
    d37c:	eb08 0040 	add.w	r0, r8, r0, lsl #1
			uint16_t val = *p++;
    d380:	4613      	mov	r3, r2
    d382:	3202      	adds	r2, #2
    d384:	881b      	ldrh	r3, [r3, #0]
		while (p < end) {
    d386:	4282      	cmp	r2, r0
			buf[val & 255] = val >> 8;
    d388:	b2d9      	uxtb	r1, r3
    d38a:	ea4f 2313 	mov.w	r3, r3, lsr #8
    d38e:	5463      	strb	r3, [r4, r1]
		while (p < end) {
    d390:	d1f6      	bne.n	d380 <eeprom_write_byte+0x9c>
		buf[offset] = data;
    d392:	f804 9005 	strb.w	r9, [r4, r5]
		eepromemu_flash_erase_sector(p);
    d396:	f10d 0907 	add.w	r9, sp, #7
    d39a:	f20d 1a07 	addw	sl, sp, #263	; 0x107
		index = 0;
    d39e:	2500      	movs	r5, #0
		eepromemu_flash_erase_sector(p);
    d3a0:	464c      	mov	r4, r9
    d3a2:	4640      	mov	r0, r8
    d3a4:	f7ff ff42 	bl	d22c <eepromemu_flash_erase_sector>
			if (buf[i] != 0xFF) {
    d3a8:	f814 cf01 	ldrb.w	ip, [r4, #1]!
				eepromemu_flash_write(p + index, &newval, 2);
    d3ac:	eb08 0045 	add.w	r0, r8, r5, lsl #1
    d3b0:	2202      	movs	r2, #2
    d3b2:	f10d 0106 	add.w	r1, sp, #6
				uint16_t newval = i | (buf[i] << 8);
    d3b6:	1e63      	subs	r3, r4, #1
			if (buf[i] != 0xFF) {
    d3b8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
				uint16_t newval = i | (buf[i] << 8);
    d3bc:	eba3 0309 	sub.w	r3, r3, r9
			if (buf[i] != 0xFF) {
    d3c0:	d006      	beq.n	d3d0 <eeprom_write_byte+0xec>
				uint16_t newval = i | (buf[i] << 8);
    d3c2:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
				index = index + 1;
    d3c6:	3501      	adds	r5, #1
				uint16_t newval = i | (buf[i] << 8);
    d3c8:	f8ad 3006 	strh.w	r3, [sp, #6]
				eepromemu_flash_write(p + index, &newval, 2);
    d3cc:	f7ff feb8 	bl	d140 <eepromemu_flash_write>
		for (i=0; i < 256; i++) {
    d3d0:	45a2      	cmp	sl, r4
    d3d2:	d1e9      	bne.n	d3a8 <eeprom_write_byte+0xc4>
		sector_index[sector] = index;
    d3d4:	f827 5016 	strh.w	r5, [r7, r6, lsl #1]
}
    d3d8:	b042      	add	sp, #264	; 0x108
    d3da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint16_t newdata = offset | (data << 8);
    d3de:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
		eepromemu_flash_write(end, &newdata, 2);
    d3e2:	a902      	add	r1, sp, #8
    d3e4:	2202      	movs	r2, #2
		sector_index[sector] = sector_index[sector] + 1;
    d3e6:	3401      	adds	r4, #1
		uint16_t newdata = offset | (data << 8);
    d3e8:	f8ad 5008 	strh.w	r5, [sp, #8]
		eepromemu_flash_write(end, &newdata, 2);
    d3ec:	f7ff fea8 	bl	d140 <eepromemu_flash_write>
		sector_index[sector] = sector_index[sector] + 1;
    d3f0:	f827 4016 	strh.w	r4, [r7, r6, lsl #1]
}
    d3f4:	b042      	add	sp, #264	; 0x108
    d3f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!initialized) eeprom_initialize();
    d3fa:	f7ff fe3f 	bl	d07c <eeprom_initialize>
    d3fe:	e77f      	b.n	d300 <eeprom_write_byte+0x1c>
    d400:	4770      	bx	lr
	uint8_t olddata=0xFF;
    d402:	f04f 0cff 	mov.w	ip, #255	; 0xff
    d406:	e7a3      	b.n	d350 <eeprom_write_byte+0x6c>
    d408:	2005e546 	.word	0x2005e546
    d40c:	04104105 	.word	0x04104105
    d410:	2005e478 	.word	0x2005e478
    d414:	000607c0 	.word	0x000607c0

0000d418 <dummy_isr>:
static void dummy_isr() {};
    d418:	4770      	bx	lr
    d41a:	bf00      	nop

0000d41c <attachInterrupt>:

#endif

void attachInterrupt(uint8_t pin, void (*function)(void), int mode)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    d41c:	2836      	cmp	r0, #54	; 0x36
    d41e:	d858      	bhi.n	d4d2 <attachInterrupt+0xb6>
	//printf("attachInterrupt, pin=%u\n", pin);
	volatile uint32_t *gpio = portOutputRegister(pin);
    d420:	0100      	lsls	r0, r0, #4
{
    d422:	b4f0      	push	{r4, r5, r6, r7}
	volatile uint32_t *gpio = portOutputRegister(pin);
    d424:	4c34      	ldr	r4, [pc, #208]	; (d4f8 <attachInterrupt+0xdc>)

	voidFuncPtr *table;

#if defined(__IMXRT1062__)

	switch((uint32_t)gpio) {
    d426:	4d35      	ldr	r5, [pc, #212]	; (d4fc <attachInterrupt+0xe0>)
	volatile uint32_t *gpio = portOutputRegister(pin);
    d428:	5823      	ldr	r3, [r4, r0]
	switch((uint32_t)gpio) {
    d42a:	42ab      	cmp	r3, r5
    d42c:	d056      	beq.n	d4dc <attachInterrupt+0xc0>
    d42e:	d849      	bhi.n	d4c4 <attachInterrupt+0xa8>
    d430:	f1b3 4f84 	cmp.w	r3, #1107296256	; 0x42000000
    d434:	d04b      	beq.n	d4ce <attachInterrupt+0xb2>
    d436:	f5a5 4580 	sub.w	r5, r5, #16384	; 0x4000
    d43a:	42ab      	cmp	r3, r5
    d43c:	d140      	bne.n	d4c0 <attachInterrupt+0xa4>
    d43e:	4d30      	ldr	r5, [pc, #192]	; (d500 <attachInterrupt+0xe4>)
	volatile uint32_t *mux = portConfigRegister(pin);
    d440:	4420      	add	r0, r4
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    d442:	4e30      	ldr	r6, [pc, #192]	; (d504 <attachInterrupt+0xe8>)
    d444:	4c30      	ldr	r4, [pc, #192]	; (d508 <attachInterrupt+0xec>)
    d446:	f8c4 62b4 	str.w	r6, [r4, #692]	; 0x2b4
	volatile uint32_t *pad = portControlRegister(pin);
    d44a:	e9d0 c401 	ldrd	ip, r4, [r0, #4]
	uint32_t mask = digitalPinToBitMask(pin);
    d44e:	68c0      	ldr	r0, [r0, #12]
		default:
			return;
	}

	attachInterruptVector(IRQ_GPIO6789, &irq_gpio6789);
	NVIC_ENABLE_IRQ(IRQ_GPIO6789);
    d450:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    d454:	f04f 5700 	mov.w	r7, #536870912	; 0x20000000
    d458:	2a04      	cmp	r2, #4
    d45a:	f8c6 7110 	str.w	r7, [r6, #272]	; 0x110

#endif

	uint32_t icr;
	switch (mode) {
    d45e:	d82f      	bhi.n	d4c0 <attachInterrupt+0xa4>
		case HIGH:    icr = 1; break;
		default: return;
	}

	// TODO: global interrupt disable to protect these read-modify-write accesses?
	gpio[IMR_INDEX] &= ~mask;	// disable interrupt
    d460:	695e      	ldr	r6, [r3, #20]
    d462:	ea26 0600 	bic.w	r6, r6, r0
    d466:	615e      	str	r6, [r3, #20]
	*mux = 5;			// pin is GPIO
    d468:	f04f 0605 	mov.w	r6, #5
    d46c:	f8cc 6000 	str.w	r6, [ip]
	*pad |= IOMUXC_PAD_HYS;		// use hystersis avoid false trigger by slow signals
    d470:	6826      	ldr	r6, [r4, #0]
    d472:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
    d476:	6026      	str	r6, [r4, #0]
	gpio[GDIR_INDEX] &= ~mask;	// pin to input mode
    d478:	685c      	ldr	r4, [r3, #4]
    d47a:	ea24 0400 	bic.w	r4, r4, r0
    d47e:	605c      	str	r4, [r3, #4]
    d480:	4c22      	ldr	r4, [pc, #136]	; (d50c <attachInterrupt+0xf0>)
    d482:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
	uint32_t index = __builtin_ctz(mask);
    d486:	fa90 f2a0 	rbit	r2, r0
    d48a:	fab2 f282 	clz	r2, r2
	table[index] = function;
    d48e:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
	gpio[IMR_INDEX] &= ~mask;	// disable interrupt
    d492:	ea6f 0100 	mvn.w	r1, r0
	if (mode == CHANGE) {
    d496:	d01d      	beq.n	d4d4 <attachInterrupt+0xb8>
		gpio[EDGE_INDEX] |= mask;
	} else {
		gpio[EDGE_INDEX] &= ~mask;
    d498:	69dd      	ldr	r5, [r3, #28]
		if (index < 16) {
    d49a:	2a0f      	cmp	r2, #15
		gpio[EDGE_INDEX] &= ~mask;
    d49c:	ea01 0105 	and.w	r1, r1, r5
    d4a0:	61d9      	str	r1, [r3, #28]
		if (index < 16) {
    d4a2:	dc1d      	bgt.n	d4e0 <attachInterrupt+0xc4>
			uint32_t shift = index * 2;
    d4a4:	0052      	lsls	r2, r2, #1
			gpio[ICR1_INDEX] = (gpio[ICR1_INDEX] & ~(3 << shift)) | (icr << shift);
    d4a6:	2503      	movs	r5, #3
    d4a8:	68d9      	ldr	r1, [r3, #12]
    d4aa:	4094      	lsls	r4, r2
    d4ac:	fa05 f202 	lsl.w	r2, r5, r2
    d4b0:	ea21 0202 	bic.w	r2, r1, r2
    d4b4:	4322      	orrs	r2, r4
    d4b6:	60da      	str	r2, [r3, #12]
		} else {
			uint32_t shift = (index - 16) * 2;
			gpio[ICR2_INDEX] = (gpio[ICR2_INDEX] & ~(3 << shift)) | (icr << shift);
		}
	}
	gpio[ISR_INDEX] = mask;  // clear any prior pending interrupt
    d4b8:	6198      	str	r0, [r3, #24]
	gpio[IMR_INDEX] |= mask; // enable interrupt
    d4ba:	695a      	ldr	r2, [r3, #20]
    d4bc:	4302      	orrs	r2, r0
    d4be:	615a      	str	r2, [r3, #20]
}
    d4c0:	bcf0      	pop	{r4, r5, r6, r7}
    d4c2:	4770      	bx	lr
	switch((uint32_t)gpio) {
    d4c4:	4d12      	ldr	r5, [pc, #72]	; (d510 <attachInterrupt+0xf4>)
    d4c6:	42ab      	cmp	r3, r5
    d4c8:	d1fa      	bne.n	d4c0 <attachInterrupt+0xa4>
			table = isr_table_gpio4;
    d4ca:	4d12      	ldr	r5, [pc, #72]	; (d514 <attachInterrupt+0xf8>)
    d4cc:	e7b8      	b.n	d440 <attachInterrupt+0x24>
			table = isr_table_gpio1;
    d4ce:	4d12      	ldr	r5, [pc, #72]	; (d518 <attachInterrupt+0xfc>)
    d4d0:	e7b6      	b.n	d440 <attachInterrupt+0x24>
    d4d2:	4770      	bx	lr
		gpio[EDGE_INDEX] |= mask;
    d4d4:	69da      	ldr	r2, [r3, #28]
    d4d6:	4302      	orrs	r2, r0
    d4d8:	61da      	str	r2, [r3, #28]
    d4da:	e7ed      	b.n	d4b8 <attachInterrupt+0x9c>
			table = isr_table_gpio3;
    d4dc:	4d0f      	ldr	r5, [pc, #60]	; (d51c <attachInterrupt+0x100>)
    d4de:	e7af      	b.n	d440 <attachInterrupt+0x24>
			uint32_t shift = (index - 16) * 2;
    d4e0:	3a10      	subs	r2, #16
			gpio[ICR2_INDEX] = (gpio[ICR2_INDEX] & ~(3 << shift)) | (icr << shift);
    d4e2:	2503      	movs	r5, #3
    d4e4:	6919      	ldr	r1, [r3, #16]
			uint32_t shift = (index - 16) * 2;
    d4e6:	0052      	lsls	r2, r2, #1
			gpio[ICR2_INDEX] = (gpio[ICR2_INDEX] & ~(3 << shift)) | (icr << shift);
    d4e8:	4094      	lsls	r4, r2
    d4ea:	fa05 f202 	lsl.w	r2, r5, r2
    d4ee:	ea21 0202 	bic.w	r2, r1, r2
    d4f2:	4322      	orrs	r2, r4
    d4f4:	611a      	str	r2, [r3, #16]
    d4f6:	e7df      	b.n	d4b8 <attachInterrupt+0x9c>
    d4f8:	2000a2c4 	.word	0x2000a2c4
    d4fc:	42008000 	.word	0x42008000
    d500:	2000c78c 	.word	0x2000c78c
    d504:	000003b5 	.word	0x000003b5
    d508:	2000cc00 	.word	0x2000cc00
    d50c:	20001764 	.word	0x20001764
    d510:	4200c000 	.word	0x4200c000
    d514:	2000c88c 	.word	0x2000c88c
    d518:	2000c70c 	.word	0x2000c70c
    d51c:	2000c80c 	.word	0x2000c80c

0000d520 <detachInterrupt>:

void detachInterrupt(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    d520:	2836      	cmp	r0, #54	; 0x36
    d522:	d809      	bhi.n	d538 <detachInterrupt+0x18>
	volatile uint32_t *gpio = portOutputRegister(pin);
    d524:	4b05      	ldr	r3, [pc, #20]	; (d53c <detachInterrupt+0x1c>)
    d526:	0102      	lsls	r2, r0, #4
    d528:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    d52c:	589a      	ldr	r2, [r3, r2]
	uint32_t mask = digitalPinToBitMask(pin);
	gpio[IMR_INDEX] &= ~mask;
    d52e:	68c1      	ldr	r1, [r0, #12]
    d530:	6953      	ldr	r3, [r2, #20]
    d532:	ea23 0301 	bic.w	r3, r3, r1
    d536:	6153      	str	r3, [r2, #20]
}
    d538:	4770      	bx	lr
    d53a:	bf00      	nop
    d53c:	2000a2c4 	.word	0x2000a2c4

0000d540 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    d540:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    d542:	f7f7 f8f5 	bl	4730 <setup>
	while (1) {
		loop();
    d546:	f7f7 f897 	bl	4678 <loop>
		yield();
    d54a:	f001 fa6b 	bl	ea24 <yield>
	while (1) {
    d54e:	e7fa      	b.n	d546 <main+0x6>

0000d550 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    d550:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    d552:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    d556:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    d55a:	d16d      	bne.n	d638 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    d55c:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    d55e:	d341      	bcc.n	d5e4 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    d560:	f851 3b04 	ldr.w	r3, [r1], #4
    d564:	f840 3b04 	str.w	r3, [r0], #4
    d568:	f851 3b04 	ldr.w	r3, [r1], #4
    d56c:	f840 3b04 	str.w	r3, [r0], #4
    d570:	f851 3b04 	ldr.w	r3, [r1], #4
    d574:	f840 3b04 	str.w	r3, [r0], #4
    d578:	f851 3b04 	ldr.w	r3, [r1], #4
    d57c:	f840 3b04 	str.w	r3, [r0], #4
    d580:	f851 3b04 	ldr.w	r3, [r1], #4
    d584:	f840 3b04 	str.w	r3, [r0], #4
    d588:	f851 3b04 	ldr.w	r3, [r1], #4
    d58c:	f840 3b04 	str.w	r3, [r0], #4
    d590:	f851 3b04 	ldr.w	r3, [r1], #4
    d594:	f840 3b04 	str.w	r3, [r0], #4
    d598:	f851 3b04 	ldr.w	r3, [r1], #4
    d59c:	f840 3b04 	str.w	r3, [r0], #4
    d5a0:	f851 3b04 	ldr.w	r3, [r1], #4
    d5a4:	f840 3b04 	str.w	r3, [r0], #4
    d5a8:	f851 3b04 	ldr.w	r3, [r1], #4
    d5ac:	f840 3b04 	str.w	r3, [r0], #4
    d5b0:	f851 3b04 	ldr.w	r3, [r1], #4
    d5b4:	f840 3b04 	str.w	r3, [r0], #4
    d5b8:	f851 3b04 	ldr.w	r3, [r1], #4
    d5bc:	f840 3b04 	str.w	r3, [r0], #4
    d5c0:	f851 3b04 	ldr.w	r3, [r1], #4
    d5c4:	f840 3b04 	str.w	r3, [r0], #4
    d5c8:	f851 3b04 	ldr.w	r3, [r1], #4
    d5cc:	f840 3b04 	str.w	r3, [r0], #4
    d5d0:	f851 3b04 	ldr.w	r3, [r1], #4
    d5d4:	f840 3b04 	str.w	r3, [r0], #4
    d5d8:	f851 3b04 	ldr.w	r3, [r1], #4
    d5dc:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    d5e0:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    d5e2:	d2bd      	bcs.n	d560 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    d5e4:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    d5e6:	d311      	bcc.n	d60c <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    d5e8:	f851 3b04 	ldr.w	r3, [r1], #4
    d5ec:	f840 3b04 	str.w	r3, [r0], #4
    d5f0:	f851 3b04 	ldr.w	r3, [r1], #4
    d5f4:	f840 3b04 	str.w	r3, [r0], #4
    d5f8:	f851 3b04 	ldr.w	r3, [r1], #4
    d5fc:	f840 3b04 	str.w	r3, [r0], #4
    d600:	f851 3b04 	ldr.w	r3, [r1], #4
    d604:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    d608:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    d60a:	d2ed      	bcs.n	d5e8 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    d60c:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    d60e:	d305      	bcc.n	d61c <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    d610:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    d614:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    d618:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    d61a:	d2f9      	bcs.n	d610 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    d61c:	3204      	adds	r2, #4
	beq	.Ldone
    d61e:	d008      	beq.n	d632 <memcpy+0xe2>

	lsls	r2, r2, #31
    d620:	07d2      	lsls	r2, r2, #31
	itt ne
    d622:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    d624:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    d628:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    d62c:	d301      	bcc.n	d632 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    d62e:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    d630:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    d632:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    d634:	4770      	bx	lr
    d636:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    d638:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    d63a:	d313      	bcc.n	d664 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    d63c:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    d63e:	d08d      	beq.n	d55c <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    d640:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    d644:	d08a      	beq.n	d55c <memcpy+0xc>

	rsb	r3, #4
    d646:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    d64a:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    d64c:	07db      	lsls	r3, r3, #31
	itt ne
    d64e:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    d650:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    d654:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    d658:	d380      	bcc.n	d55c <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    d65a:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    d65e:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    d662:	e77b      	b.n	d55c <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    d664:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    d666:	d3d9      	bcc.n	d61c <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    d668:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    d66a:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    d66e:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    d672:	d2f9      	bcs.n	d668 <memcpy+0x118>

	ldrb	r3, [r1]
    d674:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    d676:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    d678:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    d67a:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    d67c:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    d67e:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    d680:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    d682:	4770      	bx	lr

0000d684 <operator new(unsigned int)>:

#include <stdlib.h>

void * operator new(size_t size)
{
	return malloc(size);
    d684:	f001 bd2a 	b.w	f0dc <malloc>

0000d688 <operator delete(void*, unsigned int)>:
	free(ptr);
}

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
	free(ptr);
    d688:	f001 bd30 	b.w	f0ec <free>

0000d68c <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
    d68c:	f101 3cff 	add.w	ip, r1, #4294967295
{
    d690:	b570      	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
    d692:	4666      	mov	r6, ip
	int i=0, j;
    d694:	2400      	movs	r4, #0
    d696:	e000      	b.n	d69a <ultoa+0xe>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    d698:	3401      	adds	r4, #1
		digit = val % radix;
    d69a:	fbb0 f5f2 	udiv	r5, r0, r2
    d69e:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    d6a2:	2b09      	cmp	r3, #9
    d6a4:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    d6a8:	f103 0330 	add.w	r3, r3, #48	; 0x30
    d6ac:	fa5f fe8e 	uxtb.w	lr, lr
    d6b0:	bf98      	it	ls
    d6b2:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    d6b6:	4290      	cmp	r0, r2
		val /= radix;
    d6b8:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    d6ba:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    d6be:	d2eb      	bcs.n	d698 <ultoa+0xc>
	}
	buf[i + 1] = 0;
    d6c0:	1c63      	adds	r3, r4, #1
    d6c2:	2200      	movs	r2, #0
    d6c4:	18c8      	adds	r0, r1, r3
    d6c6:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    d6c8:	b17c      	cbz	r4, d6ea <ultoa+0x5e>
		t = buf[j];
    d6ca:	4662      	mov	r2, ip
    d6cc:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    d6d0:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    d6d4:	eba1 030c 	sub.w	r3, r1, ip
    d6d8:	3202      	adds	r2, #2
		buf[j] = buf[i];
    d6da:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    d6de:	3b01      	subs	r3, #1
    d6e0:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    d6e2:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    d6e4:	4423      	add	r3, r4
    d6e6:	429a      	cmp	r2, r3
    d6e8:	dbef      	blt.n	d6ca <ultoa+0x3e>
	}
	return buf;
}
    d6ea:	4608      	mov	r0, r1
    d6ec:	bd70      	pop	{r4, r5, r6, pc}
    d6ee:	bf00      	nop

0000d6f0 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    d6f0:	4a07      	ldr	r2, [pc, #28]	; (d710 <rtc_get+0x20>)
    d6f2:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    d6f4:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    d6f6:	4619      	mov	r1, r3
    d6f8:	4684      	mov	ip, r0
    d6fa:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    d6fc:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    d6fe:	4299      	cmp	r1, r3
    d700:	d1f9      	bne.n	d6f6 <rtc_get+0x6>
    d702:	4584      	cmp	ip, r0
    d704:	d1f7      	bne.n	d6f6 <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    d706:	0bdb      	lsrs	r3, r3, #15
}
    d708:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    d70c:	4770      	bx	lr
    d70e:	bf00      	nop
    d710:	400d4000 	.word	0x400d4000

0000d714 <unused_interrupt_vector>:
	__disable_irq();
    d714:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    d716:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    d71a:	4c52      	ldr	r4, [pc, #328]	; (d864 <unused_interrupt_vector+0x150>)
    d71c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("tst lr, #4\nite eq\nmrseq %0, msp\nmrsne %0, psp\n" : "=r" (stack) :: "memory");
    d720:	f01e 0f04 	tst.w	lr, #4
    d724:	bf0c      	ite	eq
    d726:	f3ef 8208 	mrseq	r2, MSP
    d72a:	f3ef 8209 	mrsne	r2, PSP
	info->cfsr = SCB_CFSR;
    d72e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    d732:	4e4d      	ldr	r6, [pc, #308]	; (d868 <unused_interrupt_vector+0x154>)
	while (p < end) {
    d734:	4d4d      	ldr	r5, [pc, #308]	; (d86c <unused_interrupt_vector+0x158>)
	info->cfsr = SCB_CFSR;
    d736:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    d73a:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    d73e:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    d742:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    d746:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    d74a:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    d74e:	6993      	ldr	r3, [r2, #24]
    d750:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    d754:	69d3      	ldr	r3, [r2, #28]
    d756:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    d75a:	f000 f8d3 	bl	d904 <tempmonGetTemp>
    d75e:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    d762:	f7ff ffc5 	bl	d6f0 <rtc_get>
	info->len = sizeof(*info) / 4;
    d766:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
    d768:	f04f 32ff 	mov.w	r2, #4294967295
	info->time = rtc_get();
    d76c:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    d770:	460b      	mov	r3, r1
    d772:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    d776:	493e      	ldr	r1, [pc, #248]	; (d870 <unused_interrupt_vector+0x15c>)
		crc ^= *p++;
    d778:	1d30      	adds	r0, r6, #4
    d77a:	405a      	eors	r2, r3
    d77c:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    d77e:	f002 0301 	and.w	r3, r2, #1
    d782:	3c01      	subs	r4, #1
    d784:	fb01 f303 	mul.w	r3, r1, r3
    d788:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    d78c:	d1f7      	bne.n	d77e <unused_interrupt_vector+0x6a>
	while (p < end) {
    d78e:	42a8      	cmp	r0, r5
    d790:	d002      	beq.n	d798 <unused_interrupt_vector+0x84>
		crc ^= *p++;
    d792:	6873      	ldr	r3, [r6, #4]
    d794:	4606      	mov	r6, r0
    d796:	e7ef      	b.n	d778 <unused_interrupt_vector+0x64>
	info->crc = crc;
    d798:	4b32      	ldr	r3, [pc, #200]	; (d864 <unused_interrupt_vector+0x150>)
    d79a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	asm("dsb");
    d79e:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    d7a2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    d7a6:	4930      	ldr	r1, [pc, #192]	; (d868 <unused_interrupt_vector+0x154>)
    d7a8:	4a32      	ldr	r2, [pc, #200]	; (d874 <unused_interrupt_vector+0x160>)
    d7aa:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
    d7ae:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
	asm("dsb");
    d7b2:	f3bf 8f4f 	dsb	sy
	asm("isb");
    d7b6:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    d7ba:	4a2f      	ldr	r2, [pc, #188]	; (d878 <unused_interrupt_vector+0x164>)
	PIT_MCR = PIT_MCR_MDIS;
    d7bc:	2502      	movs	r5, #2
    d7be:	482f      	ldr	r0, [pc, #188]	; (d87c <unused_interrupt_vector+0x168>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    d7c0:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    d7c2:	492f      	ldr	r1, [pc, #188]	; (d880 <unused_interrupt_vector+0x16c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    d7c4:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    d7c8:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    d7ca:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    d7cc:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    d7ce:	482d      	ldr	r0, [pc, #180]	; (d884 <unused_interrupt_vector+0x170>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    d7d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    d7d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d7d8:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    d7da:	680b      	ldr	r3, [r1, #0]
    d7dc:	4283      	cmp	r3, r0
    d7de:	d83d      	bhi.n	d85c <unused_interrupt_vector+0x148>
	PIT_MCR = 0;
    d7e0:	4d26      	ldr	r5, [pc, #152]	; (d87c <unused_interrupt_vector+0x168>)
    d7e2:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    d7e4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    d7e8:	f04f 32ff 	mov.w	r2, #4294967295
	PIT_MCR = 0;
    d7ec:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    d7ee:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
    d7f0:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    d7f4:	4924      	ldr	r1, [pc, #144]	; (d888 <unused_interrupt_vector+0x174>)
    d7f6:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    d7fa:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    d7fe:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    d802:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    d806:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    d80a:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    d80e:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    d812:	e001      	b.n	d818 <unused_interrupt_vector+0x104>
		usb_isr();
    d814:	f000 f968 	bl	dae8 <usb_isr>
		if (PIT_TFLG0) {
    d818:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    d81c:	2b00      	cmp	r3, #0
    d81e:	d0f9      	beq.n	d814 <unused_interrupt_vector+0x100>
			if (++count >= 80) break;  // reboot after 8 seconds
    d820:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
    d822:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    d826:	2c4f      	cmp	r4, #79	; 0x4f
    d828:	d9f4      	bls.n	d814 <unused_interrupt_vector+0x100>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    d82a:	4b18      	ldr	r3, [pc, #96]	; (d88c <unused_interrupt_vector+0x178>)
	USB1_USBCMD = USB_USBCMD_RST;
    d82c:	2002      	movs	r0, #2
    d82e:	4918      	ldr	r1, [pc, #96]	; (d890 <unused_interrupt_vector+0x17c>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    d830:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    d834:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    d838:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    d83a:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    d83e:	b93b      	cbnz	r3, d850 <unused_interrupt_vector+0x13c>
	SRC_GPR5 = 0x0BAD00F1;
    d840:	4814      	ldr	r0, [pc, #80]	; (d894 <unused_interrupt_vector+0x180>)
    d842:	4915      	ldr	r1, [pc, #84]	; (d898 <unused_interrupt_vector+0x184>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    d844:	4a0d      	ldr	r2, [pc, #52]	; (d87c <unused_interrupt_vector+0x168>)
	SRC_GPR5 = 0x0BAD00F1;
    d846:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    d848:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    d84c:	2b00      	cmp	r3, #0
    d84e:	d0fa      	beq.n	d846 <unused_interrupt_vector+0x132>
	SCB_AIRCR = 0x05FA0004;
    d850:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    d854:	4a11      	ldr	r2, [pc, #68]	; (d89c <unused_interrupt_vector+0x188>)
    d856:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    d85a:	e7fe      	b.n	d85a <unused_interrupt_vector+0x146>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    d85c:	f7ff f976 	bl	cb4c <set_arm_clock>
    d860:	e7be      	b.n	d7e0 <unused_interrupt_vector+0xcc>
    d862:	bf00      	nop
    d864:	2027ff00 	.word	0x2027ff00
    d868:	2027ff80 	.word	0x2027ff80
    d86c:	2027ffa8 	.word	0x2027ffa8
    d870:	edb88320 	.word	0xedb88320
    d874:	2027ffa0 	.word	0x2027ffa0
    d878:	400fc000 	.word	0x400fc000
    d87c:	40084000 	.word	0x40084000
    d880:	2000bd24 	.word	0x2000bd24
    d884:	0bcd3d80 	.word	0x0bcd3d80
    d888:	00249f00 	.word	0x00249f00
    d88c:	400d9000 	.word	0x400d9000
    d890:	402e0000 	.word	0x402e0000
    d894:	400f8000 	.word	0x400f8000
    d898:	0bad00f1 	.word	0x0bad00f1
    d89c:	05fa0004 	.word	0x05fa0004

0000d8a0 <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    d8a0:	490a      	ldr	r1, [pc, #40]	; (d8cc <_sbrk+0x2c>)
    d8a2:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
    d8a4:	b138      	cbz	r0, d8b6 <_sbrk+0x16>
{
    d8a6:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    d8a8:	1813      	adds	r3, r2, r0
    d8aa:	4809      	ldr	r0, [pc, #36]	; (d8d0 <_sbrk+0x30>)
    d8ac:	4283      	cmp	r3, r0
    d8ae:	d804      	bhi.n	d8ba <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    d8b0:	4610      	mov	r0, r2
                __brkval = prev + incr;
    d8b2:	600b      	str	r3, [r1, #0]
}
    d8b4:	bd08      	pop	{r3, pc}
    d8b6:	4610      	mov	r0, r2
    d8b8:	4770      	bx	lr
                        errno = ENOMEM;
    d8ba:	f003 fdc9 	bl	11450 <__errno>
    d8be:	230c      	movs	r3, #12
                        return (void *)-1;
    d8c0:	f04f 32ff 	mov.w	r2, #4294967295
                        errno = ENOMEM;
    d8c4:	6003      	str	r3, [r0, #0]
}
    d8c6:	4610      	mov	r0, r2
    d8c8:	bd08      	pop	{r3, pc}
    d8ca:	bf00      	nop
    d8cc:	2000c164 	.word	0x2000c164
    d8d0:	20280000 	.word	0x20280000

0000d8d4 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    d8d4:	2000      	movs	r0, #0
    d8d6:	4770      	bx	lr

0000d8d8 <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    d8d8:	f04f 30ff 	mov.w	r0, #4294967295
    d8dc:	4770      	bx	lr
    d8de:	bf00      	nop

0000d8e0 <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    d8e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
    d8e4:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
    d8e6:	604b      	str	r3, [r1, #4]
}
    d8e8:	4770      	bx	lr
    d8ea:	bf00      	nop

0000d8ec <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    d8ec:	2001      	movs	r0, #1
    d8ee:	4770      	bx	lr

0000d8f0 <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    d8f0:	f04f 30ff 	mov.w	r0, #4294967295
    d8f4:	4770      	bx	lr
    d8f6:	bf00      	nop

0000d8f8 <__cxa_pure_virtual>:
}

__attribute__((weak))
void __cxa_pure_virtual()
{
	while (1) asm ("WFI");
    d8f8:	bf30      	wfi
    d8fa:	e7fd      	b.n	d8f8 <__cxa_pure_virtual>

0000d8fc <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    d8fc:	bf30      	wfi
    d8fe:	e7fd      	b.n	d8fc <abort>

0000d900 <Panic_Temp_isr>:
  unused_interrupt_vector();
    d900:	f7ff bf08 	b.w	d714 <unused_interrupt_vector>

0000d904 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    d904:	4a12      	ldr	r2, [pc, #72]	; (d950 <tempmonGetTemp+0x4c>)
    d906:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    d90a:	075b      	lsls	r3, r3, #29
    d90c:	d5fb      	bpl.n	d906 <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    d90e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    d912:	4810      	ldr	r0, [pc, #64]	; (d954 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    d914:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    d918:	490f      	ldr	r1, [pc, #60]	; (d958 <tempmonGetTemp+0x54>)
    d91a:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    d91e:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    d922:	ed91 6a00 	vldr	s12, [r1]
    d926:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    d92a:	4a0c      	ldr	r2, [pc, #48]	; (d95c <tempmonGetTemp+0x58>)
    d92c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    d930:	4b0b      	ldr	r3, [pc, #44]	; (d960 <tempmonGetTemp+0x5c>)
    d932:	edd2 6a00 	vldr	s13, [r2]
    d936:	ee77 7ac7 	vsub.f32	s15, s15, s14
    d93a:	ed93 7a00 	vldr	s14, [r3]
    d93e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    d942:	ee67 7a86 	vmul.f32	s15, s15, s12
    d946:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    d94a:	ee37 0a40 	vsub.f32	s0, s14, s0
    d94e:	4770      	bx	lr
    d950:	400d8100 	.word	0x400d8100
    d954:	2005e464 	.word	0x2005e464
    d958:	2005e46c 	.word	0x2005e46c
    d95c:	2005e470 	.word	0x2005e470
    d960:	2005e468 	.word	0x2005e468

0000d964 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    d964:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
    d966:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    d968:	b11b      	cbz	r3, d972 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    d96a:	6853      	ldr	r3, [r2, #4]
    d96c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    d970:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    d972:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    d974:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    d976:	b33c      	cbz	r4, d9c8 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    d978:	4b1a      	ldr	r3, [pc, #104]	; (d9e4 <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    d97a:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    d97c:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    d980:	420c      	tst	r4, r1
    d982:	d11d      	bne.n	d9c0 <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    d984:	4e18      	ldr	r6, [pc, #96]	; (d9e8 <schedule_transfer+0x84>)
    d986:	6877      	ldr	r7, [r6, #4]
    d988:	e004      	b.n	d994 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    d98a:	6874      	ldr	r4, [r6, #4]
    d98c:	1be4      	subs	r4, r4, r7
    d98e:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    d992:	d20b      	bcs.n	d9ac <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    d994:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    d998:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    d99c:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    d9a0:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    d9a4:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    d9a8:	0464      	lsls	r4, r4, #17
    d9aa:	d5ee      	bpl.n	d98a <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    d9ac:	400d      	ands	r5, r1
    d9ae:	d107      	bne.n	d9c0 <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    d9b0:	4c0c      	ldr	r4, [pc, #48]	; (d9e4 <schedule_transfer+0x80>)
		endpoint->status = 0;
    d9b2:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    d9b6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    d9ba:	430b      	orrs	r3, r1
    d9bc:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    d9c0:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    d9c2:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    d9c4:	bcf0      	pop	{r4, r5, r6, r7}
    d9c6:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
    d9c8:	4d06      	ldr	r5, [pc, #24]	; (d9e4 <schedule_transfer+0x80>)
	endpoint->status = 0;
    d9ca:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    d9ce:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    d9d2:	430b      	orrs	r3, r1
    d9d4:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    d9d8:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    d9da:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    d9dc:	b662      	cpsie	i
}
    d9de:	bcf0      	pop	{r4, r5, r6, r7}
    d9e0:	4770      	bx	lr
    d9e2:	bf00      	nop
    d9e4:	402e0000 	.word	0x402e0000
    d9e8:	e0001000 	.word	0xe0001000

0000d9ec <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    d9ec:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    d9ee:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    d9f0:	b19d      	cbz	r5, da1a <run_callbacks+0x2e>
    d9f2:	4606      	mov	r6, r0
    d9f4:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    d9f6:	2400      	movs	r4, #0
    d9f8:	e003      	b.n	da02 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    d9fa:	6812      	ldr	r2, [r2, #0]
		count++;
    d9fc:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
    d9fe:	2a01      	cmp	r2, #1
    da00:	d00c      	beq.n	da1c <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    da02:	6853      	ldr	r3, [r2, #4]
    da04:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    da08:	d0f7      	beq.n	d9fa <run_callbacks+0xe>
			ep->first_transfer = t;
    da0a:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    da0c:	b12c      	cbz	r4, da1a <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    da0e:	4628      	mov	r0, r5
		ep->callback_function(first);
    da10:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    da12:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    da14:	4798      	blx	r3
	while (count) {
    da16:	3c01      	subs	r4, #1
    da18:	d1f9      	bne.n	da0e <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    da1a:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    da1c:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
    da20:	e7f4      	b.n	da0c <run_callbacks+0x20>
    da22:	bf00      	nop

0000da24 <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    da24:	b430      	push	{r4, r5}
	if (len > 0) {
    da26:	b9d9      	cbnz	r1, da60 <endpoint0_transmit.constprop.0+0x3c>
    da28:	4c1f      	ldr	r4, [pc, #124]	; (daa8 <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    da2a:	4b20      	ldr	r3, [pc, #128]	; (daac <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    da2c:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    da2e:	4a20      	ldr	r2, [pc, #128]	; (dab0 <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    da30:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    da32:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    da36:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    da38:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    da3a:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    da3e:	2480      	movs	r4, #128	; 0x80
    da40:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    da42:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    da46:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    da4a:	481a      	ldr	r0, [pc, #104]	; (dab4 <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    da4c:	432b      	orrs	r3, r5
    da4e:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    da52:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    da54:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    da58:	2b00      	cmp	r3, #0
    da5a:	d1fb      	bne.n	da54 <endpoint0_transmit.constprop.0+0x30>
}
    da5c:	bc30      	pop	{r4, r5}
    da5e:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    da60:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    da62:	4b15      	ldr	r3, [pc, #84]	; (dab8 <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    da64:	4c10      	ldr	r4, [pc, #64]	; (daa8 <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    da66:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    da68:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    da6c:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    da6e:	4a10      	ldr	r2, [pc, #64]	; (dab0 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    da70:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    da72:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    da76:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    da78:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    da7a:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    da7e:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    da80:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    da82:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    da86:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    da8a:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    da8c:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    da8e:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    da90:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    da92:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    da96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    da9a:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    da9e:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    daa2:	2b00      	cmp	r3, #0
    daa4:	d1fb      	bne.n	da9e <endpoint0_transmit.constprop.0+0x7a>
    daa6:	e7c0      	b.n	da2a <endpoint0_transmit.constprop.0+0x6>
    daa8:	20000000 	.word	0x20000000
    daac:	2000cec0 	.word	0x2000cec0
    dab0:	402e0000 	.word	0x402e0000
    dab4:	2005e3f0 	.word	0x2005e3f0
    dab8:	2000cee0 	.word	0x2000cee0

0000dabc <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    dabc:	4908      	ldr	r1, [pc, #32]	; (dae0 <usb_stop_sof_interrupts+0x24>)
    dabe:	2201      	movs	r2, #1
    dac0:	780b      	ldrb	r3, [r1, #0]
    dac2:	fa02 f000 	lsl.w	r0, r2, r0
    dac6:	ea23 0000 	bic.w	r0, r3, r0
    daca:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    dacc:	b930      	cbnz	r0, dadc <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    dace:	4a05      	ldr	r2, [pc, #20]	; (dae4 <usb_stop_sof_interrupts+0x28>)
    dad0:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    dad4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    dad8:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    dadc:	4770      	bx	lr
    dade:	bf00      	nop
    dae0:	2005e549 	.word	0x2005e549
    dae4:	402e0000 	.word	0x402e0000

0000dae8 <usb_isr>:
{
    dae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    daec:	4c97      	ldr	r4, [pc, #604]	; (dd4c <usb_isr+0x264>)
{
    daee:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
    daf0:	f8d4 7144 	ldr.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    daf4:	07fb      	lsls	r3, r7, #31
	USB1_USBSTS = status;
    daf6:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    dafa:	d553      	bpl.n	dba4 <usb_isr+0xbc>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    dafc:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    db00:	2a00      	cmp	r2, #0
    db02:	d04a      	beq.n	db9a <usb_isr+0xb2>
    db04:	4e92      	ldr	r6, [pc, #584]	; (dd50 <usb_isr+0x268>)
    db06:	f8df a260 	ldr.w	sl, [pc, #608]	; dd68 <usb_isr+0x280>
		uint32_t addr = (uint32_t)data;
    db0a:	f8df 9274 	ldr.w	r9, [pc, #628]	; dd80 <usb_isr+0x298>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    db0e:	f8df b274 	ldr.w	fp, [pc, #628]	; dd84 <usb_isr+0x29c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    db12:	f8df 8274 	ldr.w	r8, [pc, #628]	; dd88 <usb_isr+0x2a0>
			USB1_ENDPTSETUPSTAT = setupstatus;
    db16:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    db1a:	e9d6 200a 	ldrd	r2, r0, [r6, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    db1e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    db22:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    db26:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    db2a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    db2e:	049d      	lsls	r5, r3, #18
    db30:	d5f5      	bpl.n	db1e <usb_isr+0x36>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    db32:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    db36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    db3a:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    db3e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    db42:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    db46:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
    db4a:	f015 1501 	ands.w	r5, r5, #65537	; 0x10001
    db4e:	d1fa      	bne.n	db46 <usb_isr+0x5e>
			endpoint0_notify_mask = 0;
    db50:	b293      	uxth	r3, r2
	setup.bothwords = setupdata;
    db52:	4684      	mov	ip, r0
			endpoint0_notify_mask = 0;
    db54:	f8ca 5000 	str.w	r5, [sl]
	switch (setup.wRequestAndType) {
    db58:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    db5c:	f000 81cf 	beq.w	defe <usb_isr+0x416>
    db60:	f200 80db 	bhi.w	dd1a <usb_isr+0x232>
    db64:	f240 3102 	movw	r1, #770	; 0x302
    db68:	428b      	cmp	r3, r1
    db6a:	f000 81e7 	beq.w	df3c <usb_isr+0x454>
    db6e:	f200 809a 	bhi.w	dca6 <usb_isr+0x1be>
    db72:	2b82      	cmp	r3, #130	; 0x82
    db74:	f000 81cb 	beq.w	df0e <usb_isr+0x426>
    db78:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    db7c:	f040 808a 	bne.w	dc94 <usb_isr+0x1ac>
		if (endpoint > 7) break;
    db80:	f010 0f78 	tst.w	r0, #120	; 0x78
    db84:	b283      	uxth	r3, r0
    db86:	f000 8203 	beq.w	df90 <usb_isr+0x4a8>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    db8a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    db8e:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    db92:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    db96:	2a00      	cmp	r2, #0
    db98:	d1bd      	bne.n	db16 <usb_isr+0x2e>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    db9a:	4a6c      	ldr	r2, [pc, #432]	; (dd4c <usb_isr+0x264>)
    db9c:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    dba0:	2b00      	cmp	r3, #0
    dba2:	d142      	bne.n	dc2a <usb_isr+0x142>
	if (status & USB_USBSTS_URI) { // page 3164
    dba4:	067e      	lsls	r6, r7, #25
    dba6:	d516      	bpl.n	dbd6 <usb_isr+0xee>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    dba8:	4b68      	ldr	r3, [pc, #416]	; (dd4c <usb_isr+0x264>)
    dbaa:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    dbae:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    dbb2:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    dbb6:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    dbba:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    dbbe:	2c00      	cmp	r4, #0
    dbc0:	d1fb      	bne.n	dbba <usb_isr+0xd2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    dbc2:	f04f 32ff 	mov.w	r2, #4294967295
    dbc6:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    dbca:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    dbce:	f000 fd2d 	bl	e62c <usb_serial_reset>
		endpointN_notify_mask = 0;
    dbd2:	4b60      	ldr	r3, [pc, #384]	; (dd54 <usb_isr+0x26c>)
    dbd4:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    dbd6:	01fc      	lsls	r4, r7, #7
    dbd8:	d503      	bpl.n	dbe2 <usb_isr+0xfa>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    dbda:	4b5f      	ldr	r3, [pc, #380]	; (dd58 <usb_isr+0x270>)
    dbdc:	681b      	ldr	r3, [r3, #0]
    dbde:	b103      	cbz	r3, dbe2 <usb_isr+0xfa>
    dbe0:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    dbe2:	01b8      	lsls	r0, r7, #6
    dbe4:	d503      	bpl.n	dbee <usb_isr+0x106>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    dbe6:	4b5d      	ldr	r3, [pc, #372]	; (dd5c <usb_isr+0x274>)
    dbe8:	681b      	ldr	r3, [r3, #0]
    dbea:	b103      	cbz	r3, dbee <usb_isr+0x106>
    dbec:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    dbee:	0779      	lsls	r1, r7, #29
    dbf0:	d508      	bpl.n	dc04 <usb_isr+0x11c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    dbf2:	4b56      	ldr	r3, [pc, #344]	; (dd4c <usb_isr+0x264>)
    dbf4:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    dbf8:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    dbfc:	d047      	beq.n	dc8e <usb_isr+0x1a6>
			usb_high_speed = 1;
    dbfe:	4b58      	ldr	r3, [pc, #352]	; (dd60 <usb_isr+0x278>)
    dc00:	2201      	movs	r2, #1
    dc02:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    dc04:	4b51      	ldr	r3, [pc, #324]	; (dd4c <usb_isr+0x264>)
    dc06:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    dc0a:	061a      	lsls	r2, r3, #24
    dc0c:	d50a      	bpl.n	dc24 <usb_isr+0x13c>
    dc0e:	063b      	lsls	r3, r7, #24
    dc10:	d508      	bpl.n	dc24 <usb_isr+0x13c>
		if (usb_reboot_timer) {
    dc12:	4a54      	ldr	r2, [pc, #336]	; (dd64 <usb_isr+0x27c>)
    dc14:	7813      	ldrb	r3, [r2, #0]
    dc16:	b12b      	cbz	r3, dc24 <usb_isr+0x13c>
			if (--usb_reboot_timer == 0) {
    dc18:	3b01      	subs	r3, #1
    dc1a:	b2db      	uxtb	r3, r3
    dc1c:	7013      	strb	r3, [r2, #0]
    dc1e:	2b00      	cmp	r3, #0
    dc20:	f000 8272 	beq.w	e108 <usb_isr+0x620>
}
    dc24:	b003      	add	sp, #12
    dc26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
    dc2a:	494f      	ldr	r1, [pc, #316]	; (dd68 <usb_isr+0x280>)
			USB1_ENDPTCOMPLETE = completestatus;
    dc2c:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    dc30:	6808      	ldr	r0, [r1, #0]
    dc32:	4203      	tst	r3, r0
    dc34:	f040 81d1 	bne.w	dfda <usb_isr+0x4f2>
			completestatus &= endpointN_notify_mask;
    dc38:	4a46      	ldr	r2, [pc, #280]	; (dd54 <usb_isr+0x26c>)
    dc3a:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
    dc3c:	401c      	ands	r4, r3
    dc3e:	d0b1      	beq.n	dba4 <usb_isr+0xbc>
				while (tx) {
    dc40:	ea5f 4814 	movs.w	r8, r4, lsr #16
    dc44:	d010      	beq.n	dc68 <usb_isr+0x180>
    dc46:	4e42      	ldr	r6, [pc, #264]	; (dd50 <usb_isr+0x268>)
					tx &= ~(1<<p);
    dc48:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    dc4c:	fa98 f5a8 	rbit	r5, r8
    dc50:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    dc54:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					tx &= ~(1<<p);
    dc58:	fa09 f505 	lsl.w	r5, r9, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    dc5c:	3040      	adds	r0, #64	; 0x40
    dc5e:	f7ff fec5 	bl	d9ec <run_callbacks>
				while (tx) {
    dc62:	ea38 0805 	bics.w	r8, r8, r5
    dc66:	d1f1      	bne.n	dc4c <usb_isr+0x164>
				uint32_t rx = completestatus & 0xffff;
    dc68:	b2a4      	uxth	r4, r4
				while(rx) {
    dc6a:	2c00      	cmp	r4, #0
    dc6c:	d09a      	beq.n	dba4 <usb_isr+0xbc>
    dc6e:	4e38      	ldr	r6, [pc, #224]	; (dd50 <usb_isr+0x268>)
					rx &= ~(1<<p);
    dc70:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    dc74:	fa94 f5a4 	rbit	r5, r4
    dc78:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    dc7c:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					rx &= ~(1<<p);
    dc80:	fa08 f505 	lsl.w	r5, r8, r5
					run_callbacks(endpoint_queue_head + p * 2);
    dc84:	f7ff feb2 	bl	d9ec <run_callbacks>
				while(rx) {
    dc88:	43ac      	bics	r4, r5
    dc8a:	d1f3      	bne.n	dc74 <usb_isr+0x18c>
    dc8c:	e78a      	b.n	dba4 <usb_isr+0xbc>
			usb_high_speed = 0;
    dc8e:	4a34      	ldr	r2, [pc, #208]	; (dd60 <usb_isr+0x278>)
    dc90:	7013      	strb	r3, [r2, #0]
    dc92:	e7b7      	b.n	dc04 <usb_isr+0x11c>
	switch (setup.wRequestAndType) {
    dc94:	2b80      	cmp	r3, #128	; 0x80
    dc96:	f47f af78 	bne.w	db8a <usb_isr+0xa2>
		reply_buffer[0] = 0;
    dc9a:	4834      	ldr	r0, [pc, #208]	; (dd6c <usb_isr+0x284>)
		endpoint0_transmit(reply_buffer, 2, 0);
    dc9c:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
    dc9e:	8005      	strh	r5, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    dca0:	f7ff fec0 	bl	da24 <endpoint0_transmit.constprop.0>
		return;
    dca4:	e775      	b.n	db92 <usb_isr+0xaa>
	switch (setup.wRequestAndType) {
    dca6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    dcaa:	f000 810b 	beq.w	dec4 <usb_isr+0x3dc>
    dcae:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
    dcb2:	2b01      	cmp	r3, #1
    dcb4:	f63f af69 	bhi.w	db8a <usb_isr+0xa2>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    dcb8:	4b2d      	ldr	r3, [pc, #180]	; (dd70 <usb_isr+0x288>)
    dcba:	685d      	ldr	r5, [r3, #4]
    dcbc:	2d00      	cmp	r5, #0
    dcbe:	f43f af64 	beq.w	db8a <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    dcc2:	fa1f fc8c 	uxth.w	ip, ip
    dcc6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    dcca:	e004      	b.n	dcd6 <usb_isr+0x1ee>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    dccc:	691d      	ldr	r5, [r3, #16]
    dcce:	330c      	adds	r3, #12
    dcd0:	2d00      	cmp	r5, #0
    dcd2:	f43f af5a 	beq.w	db8a <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    dcd6:	881a      	ldrh	r2, [r3, #0]
    dcd8:	4572      	cmp	r2, lr
    dcda:	d1f7      	bne.n	dccc <usb_isr+0x1e4>
    dcdc:	885a      	ldrh	r2, [r3, #2]
    dcde:	4562      	cmp	r2, ip
    dce0:	d1f4      	bne.n	dccc <usb_isr+0x1e4>
				if ((setup.wValue >> 8) == 3) {
    dce2:	ea4f 221e 	mov.w	r2, lr, lsr #8
    dce6:	2a03      	cmp	r2, #3
    dce8:	f000 81a5 	beq.w	e036 <usb_isr+0x54e>
					datalen = list->length;
    dcec:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    dcee:	0c00      	lsrs	r0, r0, #16
    dcf0:	4282      	cmp	r2, r0
    dcf2:	bf28      	it	cs
    dcf4:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
    dcf6:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    dcfa:	f040 81a1 	bne.w	e040 <usb_isr+0x558>
					if (usb_high_speed) src = usb_config_descriptor_480;
    dcfe:	4b18      	ldr	r3, [pc, #96]	; (dd60 <usb_isr+0x278>)
    dd00:	491c      	ldr	r1, [pc, #112]	; (dd74 <usb_isr+0x28c>)
    dd02:	7818      	ldrb	r0, [r3, #0]
    dd04:	4b1c      	ldr	r3, [pc, #112]	; (dd78 <usb_isr+0x290>)
					memcpy(usb_descriptor_buffer, src, datalen);
    dd06:	9201      	str	r2, [sp, #4]
    dd08:	2800      	cmp	r0, #0
    dd0a:	bf18      	it	ne
    dd0c:	4619      	movne	r1, r3
    dd0e:	481b      	ldr	r0, [pc, #108]	; (dd7c <usb_isr+0x294>)
    dd10:	f7ff fc1e 	bl	d550 <memcpy>
    dd14:	4d19      	ldr	r5, [pc, #100]	; (dd7c <usb_isr+0x294>)
    dd16:	9a01      	ldr	r2, [sp, #4]
    dd18:	e1e1      	b.n	e0de <usb_isr+0x5f6>
	switch (setup.wRequestAndType) {
    dd1a:	f242 2121 	movw	r1, #8737	; 0x2221
    dd1e:	428b      	cmp	r3, r1
    dd20:	d07c      	beq.n	de1c <usb_isr+0x334>
    dd22:	d933      	bls.n	dd8c <usb_isr+0x2a4>
    dd24:	f242 3121 	movw	r1, #8993	; 0x2321
    dd28:	428b      	cmp	r3, r1
    dd2a:	f000 8081 	beq.w	de30 <usb_isr+0x348>
    dd2e:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
    dd32:	428b      	cmp	r3, r1
    dd34:	f47f af29 	bne.w	db8a <usb_isr+0xa2>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
    dd38:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
    dd3c:	b283      	uxth	r3, r0
    dd3e:	f47f af24 	bne.w	db8a <usb_isr+0xa2>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
    dd42:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
    dd46:	f363 0c0f 	bfi	ip, r3, #0, #16
    dd4a:	e7b5      	b.n	dcb8 <usb_isr+0x1d0>
    dd4c:	402e0000 	.word	0x402e0000
    dd50:	20000000 	.word	0x20000000
    dd54:	2005e3f4 	.word	0x2005e3f4
    dd58:	2005e514 	.word	0x2005e514
    dd5c:	2005e518 	.word	0x2005e518
    dd60:	2005e54f 	.word	0x2005e54f
    dd64:	2005e550 	.word	0x2005e550
    dd68:	2005e3f0 	.word	0x2005e3f0
    dd6c:	2005e42c 	.word	0x2005e42c
    dd70:	2000baa0 	.word	0x2000baa0
    dd74:	60006c1c 	.word	0x60006c1c
    dd78:	60006c80 	.word	0x60006c80
    dd7c:	20200000 	.word	0x20200000
    dd80:	2005e3e8 	.word	0x2005e3e8
    dd84:	b8c6cf5d 	.word	0xb8c6cf5d
    dd88:	402e01c0 	.word	0x402e01c0
	switch (setup.wRequestAndType) {
    dd8c:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    dd90:	d066      	beq.n	de60 <usb_isr+0x378>
    dd92:	f242 0121 	movw	r1, #8225	; 0x2021
    dd96:	428b      	cmp	r3, r1
    dd98:	f47f aef7 	bne.w	db8a <usb_isr+0xa2>
		if (setup.wLength != 7) break;
    dd9c:	0c03      	lsrs	r3, r0, #16
    dd9e:	2b07      	cmp	r3, #7
    dda0:	f47f aef3 	bne.w	db8a <usb_isr+0xa2>
		endpoint0_transfer_data.next = 1;
    dda4:	4bb2      	ldr	r3, [pc, #712]	; (e070 <usb_isr+0x588>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    dda6:	49b3      	ldr	r1, [pc, #716]	; (e074 <usb_isr+0x58c>)
		endpoint_queue_head[0].status = 0;
    dda8:	60f5      	str	r5, [r6, #12]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    ddaa:	60d9      	str	r1, [r3, #12]
		endpoint0_setupdata.bothwords = setupdata;
    ddac:	49b2      	ldr	r1, [pc, #712]	; (e078 <usb_isr+0x590>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    ddae:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    ddb0:	f8c3 9008 	str.w	r9, [r3, #8]
		endpoint0_setupdata.bothwords = setupdata;
    ddb4:	e9c1 2000 	strd	r2, r0, [r1]
		endpoint0_transfer_data.next = 1;
    ddb8:	2201      	movs	r2, #1
    ddba:	601a      	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    ddbc:	4aaf      	ldr	r2, [pc, #700]	; (e07c <usb_isr+0x594>)
    ddbe:	605a      	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    ddc0:	4aaf      	ldr	r2, [pc, #700]	; (e080 <usb_isr+0x598>)
    ddc2:	611a      	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<0);
    ddc4:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
    ddc8:	f041 0101 	orr.w	r1, r1, #1
    ddcc:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
    ddd0:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    ddd4:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    ddd8:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    ddda:	619a      	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
    dddc:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    dde0:	2b00      	cmp	r3, #0
    dde2:	d1fb      	bne.n	dddc <usb_isr+0x2f4>
	endpoint0_transfer_ack.next = 1;
    dde4:	4aa7      	ldr	r2, [pc, #668]	; (e084 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    dde6:	64f3      	str	r3, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    dde8:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    ddea:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    ddec:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    ddee:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    ddf0:	f248 0380 	movw	r3, #32896	; 0x8080
    ddf4:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ddf6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    ddfa:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    ddfe:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    de02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    de06:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    de0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    de0e:	f8ca 3000 	str.w	r3, [sl]
	while (USB1_ENDPTPRIME) ;
    de12:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    de16:	2b00      	cmp	r3, #0
    de18:	d1fb      	bne.n	de12 <usb_isr+0x32a>
    de1a:	e6ba      	b.n	db92 <usb_isr+0xaa>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    de1c:	b280      	uxth	r0, r0
    de1e:	b938      	cbnz	r0, de30 <usb_isr+0x348>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    de20:	4b99      	ldr	r3, [pc, #612]	; (e088 <usb_isr+0x5a0>)
			usb_cdc_line_rtsdtr = setup.wValue;
    de22:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    de26:	6819      	ldr	r1, [r3, #0]
    de28:	4b98      	ldr	r3, [pc, #608]	; (e08c <usb_isr+0x5a4>)
    de2a:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    de2c:	4b98      	ldr	r3, [pc, #608]	; (e090 <usb_isr+0x5a8>)
    de2e:	701a      	strb	r2, [r3, #0]
	endpoint0_transfer_ack.next = 1;
    de30:	4b94      	ldr	r3, [pc, #592]	; (e084 <usb_isr+0x59c>)
	endpoint0_transfer_ack.pointer0 = 0;
    de32:	2200      	movs	r2, #0
    de34:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    de36:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    de38:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    de3a:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    de3c:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    de3e:	2280      	movs	r2, #128	; 0x80
    de40:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    de42:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    de46:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    de4a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    de4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    de52:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    de56:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    de5a:	2b00      	cmp	r3, #0
    de5c:	d1fb      	bne.n	de56 <usb_isr+0x36e>
    de5e:	e698      	b.n	db92 <usb_isr+0xaa>
		usb_configuration = setup.wValue;
    de60:	f3c2 4207 	ubfx	r2, r2, #16, #8
    de64:	4b8b      	ldr	r3, [pc, #556]	; (e094 <usb_isr+0x5ac>)
    de66:	701a      	strb	r2, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    de68:	4b8b      	ldr	r3, [pc, #556]	; (e098 <usb_isr+0x5b0>)
    de6a:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    de6e:	4b8b      	ldr	r3, [pc, #556]	; (e09c <usb_isr+0x5b4>)
    de70:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    de74:	4b8a      	ldr	r3, [pc, #552]	; (e0a0 <usb_isr+0x5b8>)
    de76:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
    de7a:	f000 fbd9 	bl	e630 <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    de7e:	2280      	movs	r2, #128	; 0x80
    de80:	4629      	mov	r1, r5
    de82:	4888      	ldr	r0, [pc, #544]	; (e0a4 <usb_isr+0x5bc>)
    de84:	f003 f896 	bl	10fb4 <memset>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    de88:	4b87      	ldr	r3, [pc, #540]	; (e0a8 <usb_isr+0x5c0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    de8a:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    de8c:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    de90:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
	endpoint0_transfer_ack.next = 1;
    de94:	4b7b      	ldr	r3, [pc, #492]	; (e084 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    de96:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    de98:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.next = 1;
    de9a:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    de9c:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    de9e:	609d      	str	r5, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    dea0:	601a      	str	r2, [r3, #0]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    dea2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    dea6:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    deaa:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    deae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    deb2:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    deb6:	f8ca 5000 	str.w	r5, [sl]
	while (USB1_ENDPTPRIME) ;
    deba:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    debe:	2b00      	cmp	r3, #0
    dec0:	d1fb      	bne.n	deba <usb_isr+0x3d2>
    dec2:	e666      	b.n	db92 <usb_isr+0xaa>
	endpoint0_transfer_ack.next = 1;
    dec4:	4b6f      	ldr	r3, [pc, #444]	; (e084 <usb_isr+0x59c>)
    dec6:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    dec8:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    deca:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    decc:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    dece:	609d      	str	r5, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    ded0:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    ded2:	6059      	str	r1, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ded4:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    ded8:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    dedc:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    dee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    dee4:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    dee8:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    deec:	2b00      	cmp	r3, #0
    deee:	d1fb      	bne.n	dee8 <usb_isr+0x400>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    def0:	0c13      	lsrs	r3, r2, #16
    def2:	065b      	lsls	r3, r3, #25
    def4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    def8:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    defc:	e649      	b.n	db92 <usb_isr+0xaa>
		reply_buffer[0] = usb_configuration;
    defe:	4b65      	ldr	r3, [pc, #404]	; (e094 <usb_isr+0x5ac>)
		endpoint0_transmit(reply_buffer, 1, 0);
    df00:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    df02:	486a      	ldr	r0, [pc, #424]	; (e0ac <usb_isr+0x5c4>)
    df04:	781b      	ldrb	r3, [r3, #0]
    df06:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    df08:	f7ff fd8c 	bl	da24 <endpoint0_transmit.constprop.0>
		return;
    df0c:	e641      	b.n	db92 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    df0e:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
    df10:	f010 0078 	ands.w	r0, r0, #120	; 0x78
    df14:	f47f ae39 	bne.w	db8a <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    df18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    df1c:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    df20:	4a62      	ldr	r2, [pc, #392]	; (e0ac <usb_isr+0x5c4>)
    df22:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    df24:	0618      	lsls	r0, r3, #24
    df26:	f100 809e 	bmi.w	e066 <usb_isr+0x57e>
    df2a:	07cb      	lsls	r3, r1, #31
    df2c:	d501      	bpl.n	df32 <usb_isr+0x44a>
			reply_buffer[0] = 1;
    df2e:	2301      	movs	r3, #1
    df30:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    df32:	2102      	movs	r1, #2
    df34:	485d      	ldr	r0, [pc, #372]	; (e0ac <usb_isr+0x5c4>)
    df36:	f7ff fd75 	bl	da24 <endpoint0_transmit.constprop.0>
		return;
    df3a:	e62a      	b.n	db92 <usb_isr+0xaa>
		if (endpoint > 7) break;
    df3c:	f010 0f78 	tst.w	r0, #120	; 0x78
    df40:	b283      	uxth	r3, r0
    df42:	f47f ae22 	bne.w	db8a <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    df46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    df4a:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    df4e:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    df52:	bf14      	ite	ne
    df54:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    df58:	f043 0301 	orreq.w	r3, r3, #1
    df5c:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    df60:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    df62:	4b48      	ldr	r3, [pc, #288]	; (e084 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    df64:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    df66:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    df68:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    df6a:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    df6c:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    df6e:	2280      	movs	r2, #128	; 0x80
    df70:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    df72:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    df76:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    df7a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    df7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    df82:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    df86:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    df8a:	2b00      	cmp	r3, #0
    df8c:	d1fb      	bne.n	df86 <usb_isr+0x49e>
    df8e:	e600      	b.n	db92 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    df90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    df94:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    df98:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    df9c:	bf14      	ite	ne
    df9e:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    dfa2:	f023 0301 	biceq.w	r3, r3, #1
    dfa6:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    dfaa:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    dfac:	4b35      	ldr	r3, [pc, #212]	; (e084 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    dfae:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    dfb0:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    dfb2:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    dfb4:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    dfb6:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    dfb8:	2280      	movs	r2, #128	; 0x80
    dfba:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    dfbc:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    dfc0:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    dfc4:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    dfc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    dfcc:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    dfd0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    dfd4:	2b00      	cmp	r3, #0
    dfd6:	d1fb      	bne.n	dfd0 <usb_isr+0x4e8>
    dfd8:	e5db      	b.n	db92 <usb_isr+0xaa>
				endpoint0_notify_mask = 0;
    dfda:	2000      	movs	r0, #0
    dfdc:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    dfde:	4926      	ldr	r1, [pc, #152]	; (e078 <usb_isr+0x590>)
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    dfe0:	880c      	ldrh	r4, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    dfe2:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    dfe4:	f242 0121 	movw	r1, #8225	; 0x2021
    dfe8:	428c      	cmp	r4, r1
    dfea:	f47f ae25 	bne.w	dc38 <usb_isr+0x150>
    dfee:	b280      	uxth	r0, r0
    dff0:	2800      	cmp	r0, #0
    dff2:	f47f ae21 	bne.w	dc38 <usb_isr+0x150>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    dff6:	492e      	ldr	r1, [pc, #184]	; (e0b0 <usb_isr+0x5c8>)
    dff8:	4c2e      	ldr	r4, [pc, #184]	; (e0b4 <usb_isr+0x5cc>)
    dffa:	c903      	ldmia	r1, {r0, r1}
    dffc:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
    dffe:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    e000:	ea4f 4111 	mov.w	r1, r1, lsr #16
    e004:	6020      	str	r0, [r4, #0]
    e006:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
    e008:	f47f ae16 	bne.w	dc38 <usb_isr+0x150>
	__disable_irq();
    e00c:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    e00e:	482a      	ldr	r0, [pc, #168]	; (e0b8 <usb_isr+0x5d0>)
    e010:	7801      	ldrb	r1, [r0, #0]
    e012:	f041 0108 	orr.w	r1, r1, #8
    e016:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    e018:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    e01c:	060d      	lsls	r5, r1, #24
    e01e:	d405      	bmi.n	e02c <usb_isr+0x544>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    e020:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    e022:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    e024:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    e028:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
    e02c:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    e02e:	4a23      	ldr	r2, [pc, #140]	; (e0bc <usb_isr+0x5d4>)
    e030:	2150      	movs	r1, #80	; 0x50
    e032:	7011      	strb	r1, [r2, #0]
    e034:	e600      	b.n	dc38 <usb_isr+0x150>
				if (datalen > setup.wLength) datalen = setup.wLength;
    e036:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
    e038:	782a      	ldrb	r2, [r5, #0]
    e03a:	4282      	cmp	r2, r0
    e03c:	bf28      	it	cs
    e03e:	4602      	movcs	r2, r0
				} else if (setup.wValue == 0x700) {
    e040:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
    e044:	d144      	bne.n	e0d0 <usb_isr+0x5e8>
					if (usb_high_speed) src = usb_config_descriptor_12;
    e046:	4b1e      	ldr	r3, [pc, #120]	; (e0c0 <usb_isr+0x5d8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    e048:	4d1e      	ldr	r5, [pc, #120]	; (e0c4 <usb_isr+0x5dc>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    e04a:	7818      	ldrb	r0, [r3, #0]
    e04c:	491e      	ldr	r1, [pc, #120]	; (e0c8 <usb_isr+0x5e0>)
    e04e:	4b1f      	ldr	r3, [pc, #124]	; (e0cc <usb_isr+0x5e4>)
					memcpy(usb_descriptor_buffer, src, datalen);
    e050:	9201      	str	r2, [sp, #4]
    e052:	2800      	cmp	r0, #0
    e054:	bf18      	it	ne
    e056:	4619      	movne	r1, r3
    e058:	4628      	mov	r0, r5
    e05a:	f7ff fa79 	bl	d550 <memcpy>
					usb_descriptor_buffer[1] = 7;
    e05e:	2307      	movs	r3, #7
    e060:	706b      	strb	r3, [r5, #1]
    e062:	9a01      	ldr	r2, [sp, #4]
    e064:	e03b      	b.n	e0de <usb_isr+0x5f6>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    e066:	03c9      	lsls	r1, r1, #15
    e068:	f53f af61 	bmi.w	df2e <usb_isr+0x446>
    e06c:	e761      	b.n	df32 <usb_isr+0x44a>
    e06e:	bf00      	nop
    e070:	2000cee0 	.word	0x2000cee0
    e074:	2005f3e8 	.word	0x2005f3e8
    e078:	2000d0a0 	.word	0x2000d0a0
    e07c:	00070080 	.word	0x00070080
    e080:	200603e8 	.word	0x200603e8
    e084:	2000cec0 	.word	0x2000cec0
    e088:	2005e500 	.word	0x2005e500
    e08c:	2005e510 	.word	0x2005e510
    e090:	2005e54d 	.word	0x2005e54d
    e094:	2005e54e 	.word	0x2005e54e
    e098:	00cc0002 	.word	0x00cc0002
    e09c:	000200c8 	.word	0x000200c8
    e0a0:	00c80002 	.word	0x00c80002
    e0a4:	20000080 	.word	0x20000080
    e0a8:	74d59319 	.word	0x74d59319
    e0ac:	2005e42c 	.word	0x2005e42c
    e0b0:	2005e3e8 	.word	0x2005e3e8
    e0b4:	2005e508 	.word	0x2005e508
    e0b8:	2005e549 	.word	0x2005e549
    e0bc:	2005e550 	.word	0x2005e550
    e0c0:	2005e54f 	.word	0x2005e54f
    e0c4:	20200000 	.word	0x20200000
    e0c8:	60006c80 	.word	0x60006c80
    e0cc:	60006c1c 	.word	0x60006c1c
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    e0d0:	4629      	mov	r1, r5
    e0d2:	4d10      	ldr	r5, [pc, #64]	; (e114 <usb_isr+0x62c>)
    e0d4:	9201      	str	r2, [sp, #4]
    e0d6:	4628      	mov	r0, r5
    e0d8:	f7ff fa3a 	bl	d550 <memcpy>
    e0dc:	9a01      	ldr	r2, [sp, #4]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    e0de:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    e0e2:	4415      	add	r5, r2
	asm("dsb");
    e0e4:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    e0e8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    e0ec:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    e0f0:	3320      	adds	r3, #32
	} while (location < end_addr);
    e0f2:	429d      	cmp	r5, r3
    e0f4:	d8fa      	bhi.n	e0ec <usb_isr+0x604>
	asm("dsb");
    e0f6:	f3bf 8f4f 	dsb	sy
	asm("isb");
    e0fa:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    e0fe:	4805      	ldr	r0, [pc, #20]	; (e114 <usb_isr+0x62c>)
    e100:	4611      	mov	r1, r2
    e102:	f7ff fc8f 	bl	da24 <endpoint0_transmit.constprop.0>
				return;
    e106:	e544      	b.n	db92 <usb_isr+0xaa>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    e108:	2003      	movs	r0, #3
    e10a:	f7ff fcd7 	bl	dabc <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    e10e:	f00b fdab 	bl	19c68 <___reboot_Teensyduino__veneer>
    e112:	bf00      	nop
    e114:	20200000 	.word	0x20200000

0000e118 <usb_config_rx>:
{
    e118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e11c:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    e11e:	1e83      	subs	r3, r0, #2
    e120:	2b02      	cmp	r3, #2
    e122:	d901      	bls.n	e128 <usb_config_rx+0x10>
}
    e124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    e128:	f8df 904c 	ldr.w	r9, [pc, #76]	; e178 <usb_config_rx+0x60>
    e12c:	4615      	mov	r5, r2
    e12e:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    e130:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    e132:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    e136:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    e138:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    e13c:	2100      	movs	r1, #0
    e13e:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    e142:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    e144:	f002 ff36 	bl	10fb4 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    e148:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    e14c:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    e14e:	0952      	lsrs	r2, r2, #5
    e150:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    e154:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    e158:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    e15c:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    e160:	2f00      	cmp	r7, #0
    e162:	d0df      	beq.n	e124 <usb_config_rx+0xc>
    e164:	4a03      	ldr	r2, [pc, #12]	; (e174 <usb_config_rx+0x5c>)
    e166:	40b3      	lsls	r3, r6
    e168:	6811      	ldr	r1, [r2, #0]
    e16a:	430b      	orrs	r3, r1
    e16c:	6013      	str	r3, [r2, #0]
}
    e16e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e172:	bf00      	nop
    e174:	2005e3f4 	.word	0x2005e3f4
    e178:	20000000 	.word	0x20000000

0000e17c <usb_config_tx>:
{
    e17c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e180:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    e182:	1e81      	subs	r1, r0, #2
    e184:	2902      	cmp	r1, #2
    e186:	d901      	bls.n	e18c <usb_config_tx+0x10>
}
    e188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    e18c:	01c7      	lsls	r7, r0, #7
    e18e:	f8df 904c 	ldr.w	r9, [pc, #76]	; e1dc <usb_config_tx+0x60>
    e192:	4692      	mov	sl, r2
    e194:	4604      	mov	r4, r0
    e196:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    e198:	223c      	movs	r2, #60	; 0x3c
    e19a:	2100      	movs	r1, #0
    e19c:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    e19e:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    e1a2:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    e1a4:	f108 0004 	add.w	r0, r8, #4
    e1a8:	f002 ff04 	bl	10fb4 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    e1ac:	faba f28a 	clz	r2, sl
    e1b0:	0952      	lsrs	r2, r2, #5
    e1b2:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    e1b6:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    e1ba:	2201      	movs	r2, #1
	qh->callback_function = callback;
    e1bc:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    e1c0:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    e1c4:	2e00      	cmp	r6, #0
    e1c6:	d0df      	beq.n	e188 <usb_config_tx+0xc>
    e1c8:	4b03      	ldr	r3, [pc, #12]	; (e1d8 <usb_config_tx+0x5c>)
    e1ca:	3410      	adds	r4, #16
    e1cc:	6819      	ldr	r1, [r3, #0]
    e1ce:	40a2      	lsls	r2, r4
    e1d0:	430a      	orrs	r2, r1
    e1d2:	601a      	str	r2, [r3, #0]
}
    e1d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e1d8:	2005e3f4 	.word	0x2005e3f4
    e1dc:	20000000 	.word	0x20000000

0000e1e0 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    e1e0:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    e1e2:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
    e1e4:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    e1e6:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    e1ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
    e1ee:	b410      	push	{r4}
	transfer->next = 1;
    e1f0:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    e1f2:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    e1f4:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    e1f8:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    e1fa:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    e1fe:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    e202:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    e204:	6181      	str	r1, [r0, #24]
}
    e206:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    e20a:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
    e20e:	4770      	bx	lr

0000e210 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    e210:	1e83      	subs	r3, r0, #2
{
    e212:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    e214:	2b02      	cmp	r3, #2
    e216:	d900      	bls.n	e21a <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    e218:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    e21a:	4b06      	ldr	r3, [pc, #24]	; (e234 <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    e21c:	f100 0110 	add.w	r1, r0, #16
    e220:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    e224:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    e228:	fa0c f101 	lsl.w	r1, ip, r1
    e22c:	3040      	adds	r0, #64	; 0x40
    e22e:	f7ff bb99 	b.w	d964 <schedule_transfer>
    e232:	bf00      	nop
    e234:	20000000 	.word	0x20000000

0000e238 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    e238:	1e83      	subs	r3, r0, #2
{
    e23a:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    e23c:	2b02      	cmp	r3, #2
    e23e:	d900      	bls.n	e242 <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    e240:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    e242:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    e244:	4b02      	ldr	r3, [pc, #8]	; (e250 <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    e246:	4081      	lsls	r1, r0
    e248:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    e24c:	f7ff bb8a 	b.w	d964 <schedule_transfer>
    e250:	20000000 	.word	0x20000000

0000e254 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    e254:	6840      	ldr	r0, [r0, #4]
#endif
}
    e256:	4770      	bx	lr

0000e258 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    e258:	4a12      	ldr	r2, [pc, #72]	; (e2a4 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    e25a:	4b13      	ldr	r3, [pc, #76]	; (e2a8 <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    e25c:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    e260:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    e264:	4298      	cmp	r0, r3
{
    e266:	b510      	push	{r4, lr}
    e268:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    e26a:	d202      	bcs.n	e272 <usb_init_serialnumber+0x1a>
    e26c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    e270:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    e272:	4c0e      	ldr	r4, [pc, #56]	; (e2ac <usb_init_serialnumber+0x54>)
    e274:	a901      	add	r1, sp, #4
    e276:	220a      	movs	r2, #10
    e278:	f7ff fa08 	bl	d68c <ultoa>
	for (i=0; i<10; i++) {
    e27c:	a901      	add	r1, sp, #4
    e27e:	2300      	movs	r3, #0
    e280:	4620      	mov	r0, r4
		char c = buf[i];
    e282:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    e286:	3301      	adds	r3, #1
		if (!c) break;
    e288:	b13a      	cbz	r2, e29a <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    e28a:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    e28c:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    e290:	d1f7      	bne.n	e282 <usb_init_serialnumber+0x2a>
    e292:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    e294:	7023      	strb	r3, [r4, #0]
}
    e296:	b004      	add	sp, #16
    e298:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    e29a:	005b      	lsls	r3, r3, #1
    e29c:	b2db      	uxtb	r3, r3
    e29e:	7023      	strb	r3, [r4, #0]
}
    e2a0:	b004      	add	sp, #16
    e2a2:	bd10      	pop	{r4, pc}
    e2a4:	401f4400 	.word	0x401f4400
    e2a8:	00989680 	.word	0x00989680
    e2ac:	2000c970 	.word	0x2000c970

0000e2b0 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    e2b0:	f000 badc 	b.w	e86c <usb_serial_flush_input>

0000e2b4 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    e2b4:	f000 baac 	b.w	e810 <usb_serial_peekchar>

0000e2b8 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    e2b8:	f000 bb10 	b.w	e8dc <usb_serial_getchar>

0000e2bc <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    e2bc:	f000 baca 	b.w	e854 <usb_serial_available>

0000e2c0 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    e2c0:	f000 bb66 	b.w	e990 <usb_serial_flush_output>

0000e2c4 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    e2c4:	f000 bb3c 	b.w	e940 <usb_serial_write_buffer_free>

0000e2c8 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    e2c8:	4608      	mov	r0, r1
    e2ca:	4611      	mov	r1, r2
    e2cc:	f000 bb2c 	b.w	e928 <usb_serial_write>

0000e2d0 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    e2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    e2d2:	4c14      	ldr	r4, [pc, #80]	; (e324 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    e2d4:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    e2d8:	4e13      	ldr	r6, [pc, #76]	; (e328 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    e2da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    e2de:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    e2e2:	4f12      	ldr	r7, [pc, #72]	; (e32c <rx_queue_transfer+0x5c>)
    e2e4:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    e2e8:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    e2ea:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    e2ee:	4621      	mov	r1, r4
    e2f0:	883a      	ldrh	r2, [r7, #0]
    e2f2:	4630      	mov	r0, r6
    e2f4:	f7ff ff74 	bl	e1e0 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    e2f8:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    e2fa:	4423      	add	r3, r4
	asm("dsb");
    e2fc:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    e300:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    e304:	3420      	adds	r4, #32
	} while (location < end_addr);
    e306:	42a3      	cmp	r3, r4
    e308:	d8fa      	bhi.n	e300 <rx_queue_transfer+0x30>
	asm("dsb");
    e30a:	f3bf 8f4f 	dsb	sy
	asm("isb");
    e30e:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    e312:	2003      	movs	r0, #3
    e314:	4631      	mov	r1, r6
    e316:	f7ff ff8f 	bl	e238 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    e31a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    e31e:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    e322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e324:	20200080 	.word	0x20200080
    e328:	2000cf00 	.word	0x2000cf00
    e32c:	2005e52c 	.word	0x2005e52c

0000e330 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    e330:	4b24      	ldr	r3, [pc, #144]	; (e3c4 <rx_event+0x94>)
{
    e332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    e336:	881c      	ldrh	r4, [r3, #0]
    e338:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    e33a:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    e33c:	f3c3 430e 	ubfx	r3, r3, #16, #15
    e340:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    e342:	2c00      	cmp	r4, #0
    e344:	dd24      	ble.n	e390 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    e346:	4920      	ldr	r1, [pc, #128]	; (e3c8 <rx_event+0x98>)
		if (head != rx_tail) {
    e348:	4820      	ldr	r0, [pc, #128]	; (e3cc <rx_event+0x9c>)
		uint32_t head = rx_head;
    e34a:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    e34c:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    e34e:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    e350:	4e1f      	ldr	r6, [pc, #124]	; (e3d0 <rx_event+0xa0>)
		if (head != rx_tail) {
    e352:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    e354:	481f      	ldr	r0, [pc, #124]	; (e3d4 <rx_event+0xa4>)
		if (head != rx_tail) {
    e356:	d007      	beq.n	e368 <rx_event+0x38>
			uint32_t ii = rx_list[head];
    e358:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    e35c:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    e360:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    e364:	4294      	cmp	r4, r2
    e366:	d918      	bls.n	e39a <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    e368:	3301      	adds	r3, #1
		rx_index[i] = 0;
    e36a:	2200      	movs	r2, #0
		rx_count[i] = len;
    e36c:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    e370:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    e372:	4e19      	ldr	r6, [pc, #100]	; (e3d8 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    e374:	bf88      	it	hi
    e376:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    e378:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    e37c:	bf98      	it	ls
    e37e:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    e380:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    e382:	4b16      	ldr	r3, [pc, #88]	; (e3dc <rx_event+0xac>)
		rx_head = head;
    e384:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    e386:	681a      	ldr	r2, [r3, #0]
    e388:	4414      	add	r4, r2
    e38a:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    e38c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    e390:	4628      	mov	r0, r5
}
    e392:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    e396:	f7ff bf9b 	b.w	e2d0 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    e39a:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    e39e:	4910      	ldr	r1, [pc, #64]	; (e3e0 <rx_event+0xb0>)
    e3a0:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    e3a2:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    e3a4:	4408      	add	r0, r1
    e3a6:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    e3aa:	f7ff f8d1 	bl	d550 <memcpy>
				rx_available += len;
    e3ae:	4a0b      	ldr	r2, [pc, #44]	; (e3dc <rx_event+0xac>)
				rx_queue_transfer(i);
    e3b0:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    e3b2:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    e3b6:	6813      	ldr	r3, [r2, #0]
    e3b8:	4423      	add	r3, r4
}
    e3ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    e3be:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    e3c0:	f7ff bf86 	b.w	e2d0 <rx_queue_transfer>
    e3c4:	2005e52c 	.word	0x2005e52c
    e3c8:	2005e547 	.word	0x2005e547
    e3cc:	2005e548 	.word	0x2005e548
    e3d0:	2005e438 	.word	0x2005e438
    e3d4:	2005e458 	.word	0x2005e458
    e3d8:	2005e448 	.word	0x2005e448
    e3dc:	2005e434 	.word	0x2005e434
    e3e0:	20200080 	.word	0x20200080

0000e3e4 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    e3e4:	4b1d      	ldr	r3, [pc, #116]	; (e45c <usb_serial_flush_callback+0x78>)
    e3e6:	781a      	ldrb	r2, [r3, #0]
    e3e8:	2a00      	cmp	r2, #0
    e3ea:	d136      	bne.n	e45a <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    e3ec:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    e3f0:	4a1b      	ldr	r2, [pc, #108]	; (e460 <usb_serial_flush_callback+0x7c>)
    e3f2:	7812      	ldrb	r2, [r2, #0]
    e3f4:	b38a      	cbz	r2, e45a <usb_serial_flush_callback+0x76>
{
    e3f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    e3fa:	4d1a      	ldr	r5, [pc, #104]	; (e464 <usb_serial_flush_callback+0x80>)
    e3fc:	882a      	ldrh	r2, [r5, #0]
    e3fe:	b352      	cbz	r2, e456 <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    e400:	4e19      	ldr	r6, [pc, #100]	; (e468 <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    e402:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    e406:	4f19      	ldr	r7, [pc, #100]	; (e46c <usb_serial_flush_callback+0x88>)
    e408:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    e40a:	4c19      	ldr	r4, [pc, #100]	; (e470 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    e40c:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    e410:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    e414:	4642      	mov	r2, r8
    e416:	4638      	mov	r0, r7
    e418:	4621      	mov	r1, r4
    e41a:	f7ff fee1 	bl	e1e0 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    e41e:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    e422:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    e426:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    e42a:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    e42e:	3420      	adds	r4, #32
	} while (location < end_addr);
    e430:	42a2      	cmp	r2, r4
    e432:	d8fa      	bhi.n	e42a <usb_serial_flush_callback+0x46>
	asm("dsb");
    e434:	f3bf 8f4f 	dsb	sy
	asm("isb");
    e438:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    e43c:	2004      	movs	r0, #4
    e43e:	4639      	mov	r1, r7
    e440:	f7ff fee6 	bl	e210 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    e444:	7833      	ldrb	r3, [r6, #0]
    e446:	3301      	adds	r3, #1
    e448:	b2db      	uxtb	r3, r3
    e44a:	2b03      	cmp	r3, #3
    e44c:	bf88      	it	hi
    e44e:	2300      	movhi	r3, #0
    e450:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    e452:	2300      	movs	r3, #0
    e454:	802b      	strh	r3, [r5, #0]
}
    e456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e45a:	4770      	bx	lr
    e45c:	2005e54c 	.word	0x2005e54c
    e460:	2005e54e 	.word	0x2005e54e
    e464:	2005e52e 	.word	0x2005e52e
    e468:	2005e54b 	.word	0x2005e54b
    e46c:	2000d000 	.word	0x2000d000
    e470:	20201080 	.word	0x20201080

0000e474 <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    e474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e478:	b085      	sub	sp, #20
	while (size > 0) {
    e47a:	e9cd 1001 	strd	r1, r0, [sp, #4]
    e47e:	2900      	cmp	r1, #0
    e480:	f000 80bf 	beq.w	e602 <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    e484:	2300      	movs	r3, #0
    e486:	4c60      	ldr	r4, [pc, #384]	; (e608 <usb_serial_write.part.0+0x194>)
    e488:	f8df 8198 	ldr.w	r8, [pc, #408]	; e624 <usb_serial_write.part.0+0x1b0>
    e48c:	f8df a198 	ldr.w	sl, [pc, #408]	; e628 <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    e490:	4f5e      	ldr	r7, [pc, #376]	; (e60c <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    e492:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    e494:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    e496:	4a5e      	ldr	r2, [pc, #376]	; (e610 <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    e498:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    e49a:	4b5e      	ldr	r3, [pc, #376]	; (e614 <usb_serial_write.part.0+0x1a0>)
    e49c:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    e49e:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    e4a2:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    e4a6:	2b00      	cmp	r3, #0
    e4a8:	f040 80a7 	bne.w	e5fa <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    e4ac:	461e      	mov	r6, r3
		int waiting=0;
    e4ae:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    e4b0:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    e4b2:	4648      	mov	r0, r9
    e4b4:	f7ff fece 	bl	e254 <usb_transfer_status>
			if (!(status & 0x80)) {
    e4b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    e4bc:	f000 808c 	beq.w	e5d8 <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    e4c0:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    e4c4:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    e4c8:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    e4cc:	b905      	cbnz	r5, e4d0 <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    e4ce:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    e4d0:	2b00      	cmp	r3, #0
    e4d2:	d17d      	bne.n	e5d0 <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    e4d4:	683b      	ldr	r3, [r7, #0]
    e4d6:	1b9b      	subs	r3, r3, r6
    e4d8:	2b78      	cmp	r3, #120	; 0x78
    e4da:	f200 8087 	bhi.w	e5ec <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    e4de:	4b4e      	ldr	r3, [pc, #312]	; (e618 <usb_serial_write.part.0+0x1a4>)
    e4e0:	781b      	ldrb	r3, [r3, #0]
    e4e2:	2b00      	cmp	r3, #0
    e4e4:	d074      	beq.n	e5d0 <usb_serial_write.part.0+0x15c>
			yield();
    e4e6:	f000 fa9d 	bl	ea24 <yield>
			tx_noautoflush = 1;
    e4ea:	2201      	movs	r2, #1
		while (!tx_available) {
    e4ec:	f8b8 3000 	ldrh.w	r3, [r8]
    e4f0:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    e4f2:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    e4f4:	2b00      	cmp	r3, #0
    e4f6:	d0dc      	beq.n	e4b2 <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    e4f8:	4a46      	ldr	r2, [pc, #280]	; (e614 <usb_serial_write.part.0+0x1a0>)
    e4fa:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    e4fe:	7811      	ldrb	r1, [r2, #0]
    e500:	461a      	mov	r2, r3
    e502:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    e506:	4d45      	ldr	r5, [pc, #276]	; (e61c <usb_serial_write.part.0+0x1a8>)
    e508:	02c9      	lsls	r1, r1, #11
    e50a:	4428      	add	r0, r5
		if (size >= tx_available) {
    e50c:	9d01      	ldr	r5, [sp, #4]
    e50e:	4295      	cmp	r5, r2
    e510:	d217      	bcs.n	e542 <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    e512:	9303      	str	r3, [sp, #12]
    e514:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    e518:	462a      	mov	r2, r5
    e51a:	f7ff f819 	bl	d550 <memcpy>
			tx_available -= size;
    e51e:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    e520:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    e524:	1b5b      	subs	r3, r3, r5
    e526:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    e52a:	4b3d      	ldr	r3, [pc, #244]	; (e620 <usb_serial_write.part.0+0x1ac>)
    e52c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    e530:	f3bf 8f4f 	dsb	sy
			sent += size;
    e534:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    e536:	2300      	movs	r3, #0
			sent += size;
    e538:	4428      	add	r0, r5
		tx_noautoflush = 0;
    e53a:	7023      	strb	r3, [r4, #0]
}
    e53c:	b005      	add	sp, #20
    e53e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    e542:	4b36      	ldr	r3, [pc, #216]	; (e61c <usb_serial_write.part.0+0x1a8>)
    e544:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    e546:	9902      	ldr	r1, [sp, #8]
    e548:	f7ff f802 	bl	d550 <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    e54c:	2300      	movs	r3, #0
    e54e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    e552:	4629      	mov	r1, r5
    e554:	4648      	mov	r0, r9
    e556:	f7ff fe43 	bl	e1e0 <usb_prepare_transfer>
	asm("dsb");
    e55a:	f3bf 8f4f 	dsb	sy
    e55e:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    e562:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    e566:	4293      	cmp	r3, r2
    e568:	bf34      	ite	cc
    e56a:	2301      	movcc	r3, #1
    e56c:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    e56e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    e572:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    e576:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    e57a:	3520      	adds	r5, #32
	} while (location < end_addr);
    e57c:	42ab      	cmp	r3, r5
    e57e:	d1fa      	bne.n	e576 <usb_serial_write.part.0+0x102>
	asm("dsb");
    e580:	f3bf 8f4f 	dsb	sy
	asm("isb");
    e584:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    e588:	2004      	movs	r0, #4
    e58a:	4649      	mov	r1, r9
    e58c:	f7ff fe40 	bl	e210 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    e590:	4a20      	ldr	r2, [pc, #128]	; (e614 <usb_serial_write.part.0+0x1a0>)
    e592:	7813      	ldrb	r3, [r2, #0]
    e594:	3301      	adds	r3, #1
    e596:	b2db      	uxtb	r3, r3
    e598:	2b03      	cmp	r3, #3
    e59a:	bf84      	itt	hi
    e59c:	2300      	movhi	r3, #0
    e59e:	4a1d      	ldrhi	r2, [pc, #116]	; (e614 <usb_serial_write.part.0+0x1a0>)
    e5a0:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    e5a2:	f8b8 3000 	ldrh.w	r3, [r8]
    e5a6:	9a01      	ldr	r2, [sp, #4]
    e5a8:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    e5aa:	9a00      	ldr	r2, [sp, #0]
    e5ac:	441a      	add	r2, r3
			size -= tx_available;
    e5ae:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    e5b0:	9200      	str	r2, [sp, #0]
			data += tx_available;
    e5b2:	9a02      	ldr	r2, [sp, #8]
    e5b4:	441a      	add	r2, r3
			tx_available = 0;
    e5b6:	2300      	movs	r3, #0
			data += tx_available;
    e5b8:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    e5ba:	4a19      	ldr	r2, [pc, #100]	; (e620 <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    e5bc:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    e5c0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    e5c4:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    e5c8:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    e5ca:	2900      	cmp	r1, #0
    e5cc:	f47f af62 	bne.w	e494 <usb_serial_write.part.0+0x20>
	return sent;
    e5d0:	9800      	ldr	r0, [sp, #0]
}
    e5d2:	b005      	add	sp, #20
    e5d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    e5d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    e5dc:	4b0d      	ldr	r3, [pc, #52]	; (e614 <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    e5de:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    e5e2:	7819      	ldrb	r1, [r3, #0]
				break;
    e5e4:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    e5e6:	f8a8 2000 	strh.w	r2, [r8]
				break;
    e5ea:	e78a      	b.n	e502 <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    e5ec:	2301      	movs	r3, #1
				return sent;
    e5ee:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    e5f0:	f88a 3000 	strb.w	r3, [sl]
}
    e5f4:	b005      	add	sp, #20
    e5f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    e5fa:	461a      	mov	r2, r3
    e5fc:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    e600:	e77f      	b.n	e502 <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    e602:	9801      	ldr	r0, [sp, #4]
	return sent;
    e604:	e7e5      	b.n	e5d2 <usb_serial_write.part.0+0x15e>
    e606:	bf00      	nop
    e608:	2005e54c 	.word	0x2005e54c
    e60c:	2005e500 	.word	0x2005e500
    e610:	2000d000 	.word	0x2000d000
    e614:	2005e54b 	.word	0x2005e54b
    e618:	2005e54e 	.word	0x2005e54e
    e61c:	20201080 	.word	0x20201080
    e620:	402e0000 	.word	0x402e0000
    e624:	2005e52e 	.word	0x2005e52e
    e628:	2005e54a 	.word	0x2005e54a

0000e62c <usb_serial_reset>:
}
    e62c:	4770      	bx	lr
    e62e:	bf00      	nop

0000e630 <usb_serial_configure>:
	if (usb_high_speed) {
    e630:	4b2d      	ldr	r3, [pc, #180]	; (e6e8 <usb_serial_configure+0xb8>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    e632:	2100      	movs	r1, #0
    e634:	2280      	movs	r2, #128	; 0x80
    e636:	482d      	ldr	r0, [pc, #180]	; (e6ec <usb_serial_configure+0xbc>)
{
    e638:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    e63a:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    e63c:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    e63e:	4d2c      	ldr	r5, [pc, #176]	; (e6f0 <usb_serial_configure+0xc0>)
	if (usb_high_speed) {
    e640:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    e642:	4e2c      	ldr	r6, [pc, #176]	; (e6f4 <usb_serial_configure+0xc4>)
	if (usb_high_speed) {
    e644:	bf0c      	ite	eq
    e646:	2340      	moveq	r3, #64	; 0x40
    e648:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    e64c:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    e64e:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    e650:	f002 fcb0 	bl	10fb4 <memset>
	tx_head = 0;
    e654:	4a28      	ldr	r2, [pc, #160]	; (e6f8 <usb_serial_configure+0xc8>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    e656:	4621      	mov	r1, r4
	tx_available = 0;
    e658:	4b28      	ldr	r3, [pc, #160]	; (e6fc <usb_serial_configure+0xcc>)
	tx_head = 0;
    e65a:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    e65c:	f44f 7280 	mov.w	r2, #256	; 0x100
    e660:	4827      	ldr	r0, [pc, #156]	; (e700 <usb_serial_configure+0xd0>)
	tx_available = 0;
    e662:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    e664:	f002 fca6 	bl	10fb4 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    e668:	4a26      	ldr	r2, [pc, #152]	; (e704 <usb_serial_configure+0xd4>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    e66a:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    e66c:	4b26      	ldr	r3, [pc, #152]	; (e708 <usb_serial_configure+0xd8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    e66e:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    e670:	e9c2 4400 	strd	r4, r4, [r2]
    e674:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    e678:	4a24      	ldr	r2, [pc, #144]	; (e70c <usb_serial_configure+0xdc>)
	memset(rx_index, 0, sizeof(rx_index));
    e67a:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    e67e:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    e680:	4a23      	ldr	r2, [pc, #140]	; (e710 <usb_serial_configure+0xe0>)
	memset(rx_index, 0, sizeof(rx_index));
    e682:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    e686:	4b23      	ldr	r3, [pc, #140]	; (e714 <usb_serial_configure+0xe4>)
    e688:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    e68a:	4623      	mov	r3, r4
	rx_available = 0;
    e68c:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    e68e:	4622      	mov	r2, r4
    e690:	f7ff fd74 	bl	e17c <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    e694:	4622      	mov	r2, r4
    e696:	8831      	ldrh	r1, [r6, #0]
    e698:	2003      	movs	r0, #3
    e69a:	4b1f      	ldr	r3, [pc, #124]	; (e718 <usb_serial_configure+0xe8>)
    e69c:	f7ff fd3c 	bl	e118 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    e6a0:	4623      	mov	r3, r4
    e6a2:	2201      	movs	r2, #1
    e6a4:	8829      	ldrh	r1, [r5, #0]
    e6a6:	2004      	movs	r0, #4
    e6a8:	f7ff fd68 	bl	e17c <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    e6ac:	4620      	mov	r0, r4
    e6ae:	3401      	adds	r4, #1
    e6b0:	f7ff fe0e 	bl	e2d0 <rx_queue_transfer>
    e6b4:	2c08      	cmp	r4, #8
    e6b6:	d1f9      	bne.n	e6ac <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    e6b8:	4b18      	ldr	r3, [pc, #96]	; (e71c <usb_serial_configure+0xec>)
    e6ba:	2100      	movs	r1, #0
	USB1_GPTIMER0LD = microseconds - 1;
    e6bc:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    e6be:	4818      	ldr	r0, [pc, #96]	; (e720 <usb_serial_configure+0xf0>)
    e6c0:	4c18      	ldr	r4, [pc, #96]	; (e724 <usb_serial_configure+0xf4>)
    e6c2:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    e6c4:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    e6c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    e6cc:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    e6d0:	4915      	ldr	r1, [pc, #84]	; (e728 <usb_serial_configure+0xf8>)
	USB1_USBINTR |= USB_USBINTR_TIE0;
    e6d2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    e6d6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    e6da:	b121      	cbz	r1, e6e6 <usb_serial_configure+0xb6>
    e6dc:	4a13      	ldr	r2, [pc, #76]	; (e72c <usb_serial_configure+0xfc>)
    e6de:	7813      	ldrb	r3, [r2, #0]
    e6e0:	f043 0301 	orr.w	r3, r3, #1
    e6e4:	7013      	strb	r3, [r2, #0]
}
    e6e6:	bd70      	pop	{r4, r5, r6, pc}
    e6e8:	2005e54f 	.word	0x2005e54f
    e6ec:	2000d000 	.word	0x2000d000
    e6f0:	2005e530 	.word	0x2005e530
    e6f4:	2005e52c 	.word	0x2005e52c
    e6f8:	2005e54b 	.word	0x2005e54b
    e6fc:	2005e52e 	.word	0x2005e52e
    e700:	2000cf00 	.word	0x2000cf00
    e704:	2005e438 	.word	0x2005e438
    e708:	2005e448 	.word	0x2005e448
    e70c:	2005e547 	.word	0x2005e547
    e710:	2005e434 	.word	0x2005e434
    e714:	2005e548 	.word	0x2005e548
    e718:	0000e331 	.word	0x0000e331
    e71c:	402e0000 	.word	0x402e0000
    e720:	2005e514 	.word	0x2005e514
    e724:	0000e3e5 	.word	0x0000e3e5
    e728:	00000000 	.word	0x00000000
    e72c:	2005e551 	.word	0x2005e551

0000e730 <usb_serial_read>:
{
    e730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    e734:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    e738:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    e73c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; e808 <usb_serial_read+0xd8>
{
    e740:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    e742:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    e746:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
    e748:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    e74c:	2900      	cmp	r1, #0
    e74e:	d04f      	beq.n	e7f0 <usb_serial_read+0xc0>
    e750:	4680      	mov	r8, r0
    e752:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    e754:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    e756:	f8df 90b4 	ldr.w	r9, [pc, #180]	; e80c <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    e75a:	4b26      	ldr	r3, [pc, #152]	; (e7f4 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    e75c:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    e760:	4925      	ldr	r1, [pc, #148]	; (e7f8 <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    e762:	781b      	ldrb	r3, [r3, #0]
    e764:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    e766:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    e76a:	d03f      	beq.n	e7ec <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    e76c:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
    e76e:	4b23      	ldr	r3, [pc, #140]	; (e7fc <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    e770:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    e772:	bf28      	it	cs
    e774:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    e776:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    e778:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    e77c:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
    e780:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    e782:	4b1f      	ldr	r3, [pc, #124]	; (e800 <usb_serial_read+0xd0>)
    e784:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    e788:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
    e78c:	42aa      	cmp	r2, r5
    e78e:	d21c      	bcs.n	e7ca <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    e790:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
    e794:	4918      	ldr	r1, [pc, #96]	; (e7f8 <usb_serial_read+0xc8>)
			rx_available -= len;
    e796:	4c1b      	ldr	r4, [pc, #108]	; (e804 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    e798:	4461      	add	r1, ip
    e79a:	9201      	str	r2, [sp, #4]
    e79c:	f7fe fed8 	bl	d550 <memcpy>
			rx_available -= len;
    e7a0:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
    e7a2:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    e7a6:	4658      	mov	r0, fp
			rx_index[i] += len;
    e7a8:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
    e7aa:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
    e7ae:	442a      	add	r2, r5
			rx_available -= len;
    e7b0:	4439      	add	r1, r7
			rx_index[i] += len;
    e7b2:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    e7b6:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    e7b8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    e7bc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    e7c0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    e7c4:	b003      	add	sp, #12
    e7c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    e7ca:	462a      	mov	r2, r5
			count += avail;
    e7cc:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    e7ce:	f7fe febf 	bl	d550 <memcpy>
			rx_available -= avail;
    e7d2:	490c      	ldr	r1, [pc, #48]	; (e804 <usb_serial_read+0xd4>)
			rx_tail = tail;
    e7d4:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    e7d6:	4630      	mov	r0, r6
			rx_available -= avail;
    e7d8:	680a      	ldr	r2, [r1, #0]
			p += avail;
    e7da:	44a8      	add	r8, r5
			rx_available -= avail;
    e7dc:	1b52      	subs	r2, r2, r5
    e7de:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
    e7e0:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
    e7e4:	f7ff fd74 	bl	e2d0 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    e7e8:	45bb      	cmp	fp, r7
    e7ea:	d8b6      	bhi.n	e75a <usb_serial_read+0x2a>
	return count;
    e7ec:	4638      	mov	r0, r7
    e7ee:	e7e3      	b.n	e7b8 <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    e7f0:	4608      	mov	r0, r1
    e7f2:	e7e1      	b.n	e7b8 <usb_serial_read+0x88>
    e7f4:	2005e547 	.word	0x2005e547
    e7f8:	20200080 	.word	0x20200080
    e7fc:	2005e458 	.word	0x2005e458
    e800:	2005e438 	.word	0x2005e438
    e804:	2005e434 	.word	0x2005e434
    e808:	2005e548 	.word	0x2005e548
    e80c:	2005e448 	.word	0x2005e448

0000e810 <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    e810:	4b0b      	ldr	r3, [pc, #44]	; (e840 <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    e812:	4a0c      	ldr	r2, [pc, #48]	; (e844 <usb_serial_peekchar+0x34>)
    e814:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    e816:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    e818:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
    e81a:	428a      	cmp	r2, r1
    e81c:	d00d      	beq.n	e83a <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    e81e:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    e820:	4809      	ldr	r0, [pc, #36]	; (e848 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    e822:	4a0a      	ldr	r2, [pc, #40]	; (e84c <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    e824:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    e826:	490a      	ldr	r1, [pc, #40]	; (e850 <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    e828:	bf28      	it	cs
    e82a:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    e82c:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    e82e:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    e832:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    e836:	5c58      	ldrb	r0, [r3, r1]
    e838:	4770      	bx	lr
	if (tail == rx_head) return -1;
    e83a:	f04f 30ff 	mov.w	r0, #4294967295
}
    e83e:	4770      	bx	lr
    e840:	2005e547 	.word	0x2005e547
    e844:	2005e548 	.word	0x2005e548
    e848:	2005e458 	.word	0x2005e458
    e84c:	20200080 	.word	0x20200080
    e850:	2005e448 	.word	0x2005e448

0000e854 <usb_serial_available>:
	uint32_t n = rx_available;
    e854:	4b04      	ldr	r3, [pc, #16]	; (e868 <usb_serial_available+0x14>)
{
    e856:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    e858:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    e85a:	b10c      	cbz	r4, e860 <usb_serial_available+0xc>
}
    e85c:	4620      	mov	r0, r4
    e85e:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    e860:	f000 f8e0 	bl	ea24 <yield>
}
    e864:	4620      	mov	r0, r4
    e866:	bd10      	pop	{r4, pc}
    e868:	2005e434 	.word	0x2005e434

0000e86c <usb_serial_flush_input>:
{
    e86c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    e870:	4e14      	ldr	r6, [pc, #80]	; (e8c4 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    e872:	4d15      	ldr	r5, [pc, #84]	; (e8c8 <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    e874:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    e876:	782a      	ldrb	r2, [r5, #0]
    e878:	4293      	cmp	r3, r2
    e87a:	d021      	beq.n	e8c0 <usb_serial_flush_input+0x54>
    e87c:	b2dc      	uxtb	r4, r3
    e87e:	f8df 9050 	ldr.w	r9, [pc, #80]	; e8d0 <usb_serial_flush_input+0x64>
    e882:	f8df b050 	ldr.w	fp, [pc, #80]	; e8d4 <usb_serial_flush_input+0x68>
    e886:	f8df 8050 	ldr.w	r8, [pc, #80]	; e8d8 <usb_serial_flush_input+0x6c>
    e88a:	4f10      	ldr	r7, [pc, #64]	; (e8cc <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    e88c:	3401      	adds	r4, #1
    e88e:	2c08      	cmp	r4, #8
		rx_tail = tail;
    e890:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    e894:	d901      	bls.n	e89a <usb_serial_flush_input+0x2e>
    e896:	2400      	movs	r4, #0
    e898:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    e89a:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    e89e:	f8db 3000 	ldr.w	r3, [fp]
    e8a2:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    e8a6:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
    e8aa:	1a52      	subs	r2, r2, r1
    e8ac:	1a9b      	subs	r3, r3, r2
    e8ae:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    e8b2:	f7ff fd0d 	bl	e2d0 <rx_queue_transfer>
		rx_tail = tail;
    e8b6:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
    e8ba:	782b      	ldrb	r3, [r5, #0]
    e8bc:	42a3      	cmp	r3, r4
    e8be:	d1e5      	bne.n	e88c <usb_serial_flush_input+0x20>
}
    e8c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e8c4:	2005e548 	.word	0x2005e548
    e8c8:	2005e547 	.word	0x2005e547
    e8cc:	2005e448 	.word	0x2005e448
    e8d0:	2005e458 	.word	0x2005e458
    e8d4:	2005e434 	.word	0x2005e434
    e8d8:	2005e438 	.word	0x2005e438

0000e8dc <usb_serial_getchar>:
{
    e8dc:	b500      	push	{lr}
    e8de:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    e8e0:	2101      	movs	r1, #1
    e8e2:	f10d 0007 	add.w	r0, sp, #7
    e8e6:	f7ff ff23 	bl	e730 <usb_serial_read>
    e8ea:	b120      	cbz	r0, e8f6 <usb_serial_getchar+0x1a>
    e8ec:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    e8f0:	b003      	add	sp, #12
    e8f2:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    e8f6:	f04f 30ff 	mov.w	r0, #4294967295
    e8fa:	e7f9      	b.n	e8f0 <usb_serial_getchar+0x14>

0000e8fc <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    e8fc:	4b09      	ldr	r3, [pc, #36]	; (e924 <usb_serial_putchar+0x28>)
{
    e8fe:	b500      	push	{lr}
    e900:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
    e902:	781b      	ldrb	r3, [r3, #0]
{
    e904:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    e908:	b13b      	cbz	r3, e91a <usb_serial_putchar+0x1e>
    e90a:	2101      	movs	r1, #1
    e90c:	f10d 0007 	add.w	r0, sp, #7
    e910:	f7ff fdb0 	bl	e474 <usb_serial_write.part.0>
}
    e914:	b003      	add	sp, #12
    e916:	f85d fb04 	ldr.w	pc, [sp], #4
    e91a:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    e91e:	b003      	add	sp, #12
    e920:	f85d fb04 	ldr.w	pc, [sp], #4
    e924:	2005e54e 	.word	0x2005e54e

0000e928 <usb_serial_write>:
	if (!usb_configuration) return 0;
    e928:	4b04      	ldr	r3, [pc, #16]	; (e93c <usb_serial_write+0x14>)
    e92a:	781b      	ldrb	r3, [r3, #0]
    e92c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    e930:	b10b      	cbz	r3, e936 <usb_serial_write+0xe>
    e932:	f7ff bd9f 	b.w	e474 <usb_serial_write.part.0>
}
    e936:	4610      	mov	r0, r2
    e938:	4770      	bx	lr
    e93a:	bf00      	nop
    e93c:	2005e54e 	.word	0x2005e54e

0000e940 <usb_serial_write_buffer_free>:
{
    e940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    e944:	2400      	movs	r4, #0
	tx_noautoflush = 1;
    e946:	f8df 8044 	ldr.w	r8, [pc, #68]	; e98c <usb_serial_write_buffer_free+0x4c>
    e94a:	2301      	movs	r3, #1
    e94c:	4d0d      	ldr	r5, [pc, #52]	; (e984 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    e94e:	4627      	mov	r7, r4
    e950:	4e0d      	ldr	r6, [pc, #52]	; (e988 <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    e952:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
    e956:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    e958:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    e95a:	3520      	adds	r5, #32
		if (i == tx_head) continue;
    e95c:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    e95e:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    e962:	d005      	beq.n	e970 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    e964:	f7ff fc76 	bl	e254 <usb_transfer_status>
    e968:	0603      	lsls	r3, r0, #24
    e96a:	bf58      	it	pl
    e96c:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    e970:	2c04      	cmp	r4, #4
    e972:	d1f0      	bne.n	e956 <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    e974:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    e978:	2300      	movs	r3, #0
}
    e97a:	4638      	mov	r0, r7
	tx_noautoflush = 0;
    e97c:	f888 3000 	strb.w	r3, [r8]
}
    e980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e984:	2000d000 	.word	0x2000d000
    e988:	2005e54b 	.word	0x2005e54b
    e98c:	2005e54c 	.word	0x2005e54c

0000e990 <usb_serial_flush_output>:
{
    e990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    e994:	4b1d      	ldr	r3, [pc, #116]	; (ea0c <usb_serial_flush_output+0x7c>)
    e996:	781b      	ldrb	r3, [r3, #0]
    e998:	b113      	cbz	r3, e9a0 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    e99a:	4d1d      	ldr	r5, [pc, #116]	; (ea10 <usb_serial_flush_output+0x80>)
    e99c:	882a      	ldrh	r2, [r5, #0]
    e99e:	b90a      	cbnz	r2, e9a4 <usb_serial_flush_output+0x14>
}
    e9a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    e9a4:	4e1b      	ldr	r6, [pc, #108]	; (ea14 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    e9a6:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    e9aa:	491b      	ldr	r1, [pc, #108]	; (ea18 <usb_serial_flush_output+0x88>)
    e9ac:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    e9ae:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    e9b0:	4c1a      	ldr	r4, [pc, #104]	; (ea1c <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    e9b2:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    e9b6:	4f1a      	ldr	r7, [pc, #104]	; (ea20 <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    e9b8:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    e9bc:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    e9be:	4640      	mov	r0, r8
	tx_noautoflush = 1;
    e9c0:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    e9c2:	4621      	mov	r1, r4
    e9c4:	2300      	movs	r3, #0
    e9c6:	f7ff fc0b 	bl	e1e0 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    e9ca:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
    e9ce:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    e9d2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    e9d6:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    e9da:	3420      	adds	r4, #32
	} while (location < end_addr);
    e9dc:	42a2      	cmp	r2, r4
    e9de:	d8fa      	bhi.n	e9d6 <usb_serial_flush_output+0x46>
	asm("dsb");
    e9e0:	f3bf 8f4f 	dsb	sy
	asm("isb");
    e9e4:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    e9e8:	2004      	movs	r0, #4
    e9ea:	4641      	mov	r1, r8
    e9ec:	f7ff fc10 	bl	e210 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    e9f0:	7833      	ldrb	r3, [r6, #0]
    e9f2:	3301      	adds	r3, #1
    e9f4:	b2db      	uxtb	r3, r3
    e9f6:	2b03      	cmp	r3, #3
    e9f8:	bf88      	it	hi
    e9fa:	2300      	movhi	r3, #0
    e9fc:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    e9fe:	2300      	movs	r3, #0
    ea00:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    ea02:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    ea06:	703b      	strb	r3, [r7, #0]
}
    ea08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ea0c:	2005e54e 	.word	0x2005e54e
    ea10:	2005e52e 	.word	0x2005e52e
    ea14:	2005e54b 	.word	0x2005e54b
    ea18:	2000d000 	.word	0x2000d000
    ea1c:	20201080 	.word	0x20201080
    ea20:	2005e54c 	.word	0x2005e54c

0000ea24 <yield>:
uint8_t yield_active_check_flags = 0;


void yield(void) __attribute__ ((weak));
void yield(void)
{
    ea24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t check_flags = yield_active_check_flags;
    ea28:	4b2d      	ldr	r3, [pc, #180]	; (eae0 <yield+0xbc>)
    ea2a:	781e      	ldrb	r6, [r3, #0]
	if (!check_flags) return;	// nothing to do
    ea2c:	b166      	cbz	r6, ea48 <yield+0x24>

	// TODO: do nothing if called from interrupt

	static uint8_t running=0;
	if (running) return; // TODO: does this need to be atomic?
    ea2e:	4f2d      	ldr	r7, [pc, #180]	; (eae4 <yield+0xc0>)
    ea30:	783b      	ldrb	r3, [r7, #0]
    ea32:	b94b      	cbnz	r3, ea48 <yield+0x24>
	running = 1;
    ea34:	2301      	movs	r3, #1

	// USB Serial - Add hack to minimize impact...
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    ea36:	07f1      	lsls	r1, r6, #31
	running = 1;
    ea38:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    ea3a:	d443      	bmi.n	eac4 <yield+0xa0>
		if (SerialUSB2.available()) serialEventUSB2();
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    ea3c:	07b2      	lsls	r2, r6, #30
    ea3e:	d426      	bmi.n	ea8e <yield+0x6a>
		HardwareSerialIMXRT::processSerialEventsList();
	}

	running = 0;
    ea40:	2300      	movs	r3, #0
    ea42:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_EVENT_RESPONDER) {
    ea44:	0773      	lsls	r3, r6, #29
    ea46:	d401      	bmi.n	ea4c <yield+0x28>
		EventResponder::runFromYield();
	}
};
    ea48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!firstYield) return;  
    ea4c:	4b26      	ldr	r3, [pc, #152]	; (eae8 <yield+0xc4>)
    ea4e:	681a      	ldr	r2, [r3, #0]
    ea50:	2a00      	cmp	r2, #0
    ea52:	d0f9      	beq.n	ea48 <yield+0x24>
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    ea54:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    ea58:	2a00      	cmp	r2, #0
    ea5a:	d1f5      	bne.n	ea48 <yield+0x24>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    ea5c:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    ea60:	b672      	cpsid	i
		EventResponder *first = firstYield;
    ea62:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    ea64:	2800      	cmp	r0, #0
    ea66:	d034      	beq.n	ead2 <yield+0xae>
		if (runningFromYield) {
    ea68:	4c20      	ldr	r4, [pc, #128]	; (eaec <yield+0xc8>)
    ea6a:	7821      	ldrb	r1, [r4, #0]
    ea6c:	2900      	cmp	r1, #0
    ea6e:	d130      	bne.n	ead2 <yield+0xae>
		runningFromYield = true;
    ea70:	2201      	movs	r2, #1
    ea72:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    ea74:	6942      	ldr	r2, [r0, #20]
    ea76:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    ea78:	2a00      	cmp	r2, #0
    ea7a:	d02e      	beq.n	eada <yield+0xb6>
			firstYield->_prev = nullptr;
    ea7c:	6191      	str	r1, [r2, #24]
		if (doit) __enable_irq();
    ea7e:	b905      	cbnz	r5, ea82 <yield+0x5e>
    ea80:	b662      	cpsie	i
		first->_triggered = false;
    ea82:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    ea84:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    ea86:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    ea88:	4798      	blx	r3
		runningFromYield = false;
    ea8a:	7025      	strb	r5, [r4, #0]
    ea8c:	e7dc      	b.n	ea48 <yield+0x24>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    ea8e:	f8df 8064 	ldr.w	r8, [pc, #100]	; eaf4 <yield+0xd0>
    ea92:	f898 3000 	ldrb.w	r3, [r8]
    ea96:	2b00      	cmp	r3, #0
    ea98:	d0d2      	beq.n	ea40 <yield+0x1c>
    ea9a:	2500      	movs	r5, #0
    ea9c:	f8df 9058 	ldr.w	r9, [pc, #88]	; eaf8 <yield+0xd4>
    eaa0:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    eaa2:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    eaa6:	3501      	adds	r5, #1
	static HardwareSerialIMXRT 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    eaa8:	6823      	ldr	r3, [r4, #0]
    eaaa:	4620      	mov	r0, r4
    eaac:	691b      	ldr	r3, [r3, #16]
    eaae:	4798      	blx	r3
    eab0:	b110      	cbz	r0, eab8 <yield+0x94>
    eab2:	6963      	ldr	r3, [r4, #20]
    eab4:	689b      	ldr	r3, [r3, #8]
    eab6:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    eab8:	f898 2000 	ldrb.w	r2, [r8]
    eabc:	b2eb      	uxtb	r3, r5
    eabe:	429a      	cmp	r2, r3
    eac0:	d8ef      	bhi.n	eaa2 <yield+0x7e>
    eac2:	e7bd      	b.n	ea40 <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    eac4:	f7ff fec6 	bl	e854 <usb_serial_available>
		if (Serial.available()) serialEvent();
    eac8:	2800      	cmp	r0, #0
    eaca:	d0b7      	beq.n	ea3c <yield+0x18>
    eacc:	f3af 8000 	nop.w
    ead0:	e7b4      	b.n	ea3c <yield+0x18>
		if (doit) __enable_irq();
    ead2:	2d00      	cmp	r5, #0
    ead4:	d1b8      	bne.n	ea48 <yield+0x24>
    ead6:	b662      	cpsie	i
    ead8:	e7b6      	b.n	ea48 <yield+0x24>
			lastYield = nullptr;
    eada:	4b05      	ldr	r3, [pc, #20]	; (eaf0 <yield+0xcc>)
    eadc:	601a      	str	r2, [r3, #0]
    eade:	e7ce      	b.n	ea7e <yield+0x5a>
    eae0:	2005e551 	.word	0x2005e551
    eae4:	2005e540 	.word	0x2005e540
    eae8:	2005e030 	.word	0x2005e030
    eaec:	2005e53e 	.word	0x2005e53e
    eaf0:	2005e03c 	.word	0x2005e03c
    eaf4:	2005e53f 	.word	0x2005e53f
    eaf8:	2005e040 	.word	0x2005e040

0000eafc <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    eafc:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    eafe:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    eb00:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    eb04:	4619      	mov	r1, r3
{
    eb06:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    eb08:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    eb0c:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    eb10:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    eb14:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    eb18:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    eb1c:	460a      	mov	r2, r1
	p->FFILT0 = 0;
    eb1e:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    eb22:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    eb26:	b29b      	uxth	r3, r3
    eb28:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    eb2c:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    eb30:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    eb34:	3101      	adds	r1, #1
    eb36:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    eb3a:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    eb3c:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    eb3e:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    eb42:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    eb44:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    eb46:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    eb48:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    eb4a:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    eb4e:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    eb50:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    eb52:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    eb54:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    eb56:	d1eb      	bne.n	eb30 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    eb58:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    eb5c:	b29b      	uxth	r3, r3
    eb5e:	f043 030f 	orr.w	r3, r3, #15
    eb62:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    eb66:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    eb6a:	b29b      	uxth	r3, r3
    eb6c:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    eb70:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    eb74:	bd10      	pop	{r4, pc}
    eb76:	bf00      	nop

0000eb78 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    eb78:	4b37      	ldr	r3, [pc, #220]	; (ec58 <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    eb7a:	4a38      	ldr	r2, [pc, #224]	; (ec5c <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    eb7c:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    eb7e:	4838      	ldr	r0, [pc, #224]	; (ec60 <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    eb80:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
    eb84:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    eb86:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    eb88:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    eb8c:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    eb90:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    eb94:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    eb98:	430a      	orrs	r2, r1
    eb9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    eb9e:	f7ff ffad 	bl	eafc <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    eba2:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    eba6:	f7ff ffa9 	bl	eafc <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    ebaa:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    ebae:	f7ff ffa5 	bl	eafc <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    ebb2:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    ebb6:	f7ff ffa1 	bl	eafc <flexpwm_init>
	for (i=0; i < 4; i++) {
    ebba:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    ebbc:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    ebc0:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    ebc4:	4611      	mov	r1, r2
    ebc6:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    ebca:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    ebce:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    ebd0:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    ebd2:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    ebd4:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    ebd6:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    ebda:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    ebdc:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    ebde:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    ebe2:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    ebe4:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    ebe6:	d1ee      	bne.n	ebc6 <pwm_init+0x4e>
    ebe8:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    ebea:	481e      	ldr	r0, [pc, #120]	; (ec64 <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    ebec:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    ebf0:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    ebf4:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    ebf6:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    ebfa:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    ebfe:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    ec02:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    ec06:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    ec08:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    ec0a:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    ec0c:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    ec0e:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    ec12:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    ec14:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    ec16:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    ec1a:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    ec1c:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    ec1e:	d1ee      	bne.n	ebfe <pwm_init+0x86>
    ec20:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    ec22:	4811      	ldr	r0, [pc, #68]	; (ec68 <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    ec24:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    ec26:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    ec2a:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    ec2c:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    ec30:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    ec34:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    ec38:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    ec3c:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    ec3e:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    ec40:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    ec42:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    ec44:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    ec46:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    ec48:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    ec4a:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    ec4e:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    ec50:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    ec54:	d1ee      	bne.n	ec34 <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    ec56:	bd70      	pop	{r4, r5, r6, pc}
    ec58:	400fc000 	.word	0x400fc000
    ec5c:	fc030000 	.word	0xfc030000
    ec60:	403dc000 	.word	0x403dc000
    ec64:	401e0000 	.word	0x401e0000
    ec68:	401e4000 	.word	0x401e4000

0000ec6c <sm_align_pool>:
	if (spool->pool_size % HEADER_SZ) return 0;
	return 1;
}

int sm_align_pool(struct smalloc_pool *spool)
{
    ec6c:	b508      	push	{r3, lr}
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
    ec6e:	e9d0 3200 	ldrd	r3, r2, [r0]
	if (!spool->pool || !spool->pool_size) return 0;
    ec72:	b15b      	cbz	r3, ec8c <sm_align_pool+0x20>
    ec74:	b1ba      	cbz	r2, eca6 <sm_align_pool+0x3a>
	if (spool->pool_size % HEADER_SZ) return 0;
    ec76:	4b0f      	ldr	r3, [pc, #60]	; (ecb4 <sm_align_pool+0x48>)
    ec78:	fba3 1302 	umull	r1, r3, r3, r2
    ec7c:	08db      	lsrs	r3, r3, #3
    ec7e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    ec82:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    ec86:	d10a      	bne.n	ec9e <sm_align_pool+0x32>
	if (smalloc_verify_pool(spool)) return 1;
    ec88:	2001      	movs	r0, #1
		errno = ENOSPC;
		return 0;
	}

	return 1;
}
    ec8a:	bd08      	pop	{r3, pc}
	x = spool->pool_size % HEADER_SZ;
    ec8c:	4b09      	ldr	r3, [pc, #36]	; (ecb4 <sm_align_pool+0x48>)
    ec8e:	fba3 1302 	umull	r1, r3, r3, r2
    ec92:	08db      	lsrs	r3, r3, #3
    ec94:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    ec98:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    ec9c:	d001      	beq.n	eca2 <sm_align_pool+0x36>
    ec9e:	1ad2      	subs	r2, r2, r3
    eca0:	6042      	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    eca2:	2af0      	cmp	r2, #240	; 0xf0
    eca4:	d8f0      	bhi.n	ec88 <sm_align_pool+0x1c>
		errno = ENOSPC;
    eca6:	f002 fbd3 	bl	11450 <__errno>
    ecaa:	221c      	movs	r2, #28
    ecac:	4603      	mov	r3, r0
    ecae:	2000      	movs	r0, #0
    ecb0:	601a      	str	r2, [r3, #0]
}
    ecb2:	bd08      	pop	{r3, pc}
    ecb4:	aaaaaaab 	.word	0xaaaaaaab

0000ecb8 <sm_set_pool>:

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
    ecb8:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
    ecba:	4604      	mov	r4, r0
    ecbc:	b338      	cbz	r0, ed0e <sm_set_pool+0x56>
		errno = EINVAL;
		return 0;
	}

	if (!new_pool || !new_pool_size) {
    ecbe:	b119      	cbz	r1, ecc8 <sm_set_pool+0x10>
    ecc0:	fab2 f682 	clz	r6, r2
    ecc4:	0976      	lsrs	r6, r6, #5
    ecc6:	b9a2      	cbnz	r2, ecf2 <sm_set_pool+0x3a>
	if (!spool->pool || !spool->pool_size) return 0;
    ecc8:	6820      	ldr	r0, [r4, #0]
    ecca:	b300      	cbz	r0, ed0e <sm_set_pool+0x56>
    eccc:	6862      	ldr	r2, [r4, #4]
    ecce:	b1f2      	cbz	r2, ed0e <sm_set_pool+0x56>
	if (spool->pool_size % HEADER_SZ) return 0;
    ecd0:	4b18      	ldr	r3, [pc, #96]	; (ed34 <sm_set_pool+0x7c>)
    ecd2:	4919      	ldr	r1, [pc, #100]	; (ed38 <sm_set_pool+0x80>)
    ecd4:	fb02 f303 	mul.w	r3, r2, r3
    ecd8:	ebb1 0fb3 	cmp.w	r1, r3, ror #2
    ecdc:	d317      	bcc.n	ed0e <sm_set_pool+0x56>
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    ecde:	68a3      	ldr	r3, [r4, #8]
    ece0:	b9e3      	cbnz	r3, ed1c <sm_set_pool+0x64>
			memset(spool, 0, sizeof(struct smalloc_pool));
    ece2:	2200      	movs	r2, #0
			return 1;
    ece4:	2301      	movs	r3, #1
			memset(spool, 0, sizeof(struct smalloc_pool));
    ece6:	6022      	str	r2, [r4, #0]
    ece8:	6062      	str	r2, [r4, #4]
    ecea:	60a2      	str	r2, [r4, #8]
    ecec:	60e2      	str	r2, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    ecee:	4618      	mov	r0, r3
    ecf0:	bd70      	pop	{r4, r5, r6, pc}
	spool->pool = new_pool;
    ecf2:	461d      	mov	r5, r3
	spool->oomfn = oom_handler;
    ecf4:	9b04      	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    ecf6:	e9c0 1200 	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    ecfa:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    ecfc:	f7ff ffb6 	bl	ec6c <sm_align_pool>
    ed00:	4603      	mov	r3, r0
    ed02:	2800      	cmp	r0, #0
    ed04:	d0f3      	beq.n	ecee <sm_set_pool+0x36>
	if (do_zero) {
    ed06:	b96d      	cbnz	r5, ed24 <sm_set_pool+0x6c>
	return 1;
    ed08:	2301      	movs	r3, #1
}
    ed0a:	4618      	mov	r0, r3
    ed0c:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
    ed0e:	f002 fb9f 	bl	11450 <__errno>
    ed12:	2216      	movs	r2, #22
		return 0;
    ed14:	2300      	movs	r3, #0
		errno = EINVAL;
    ed16:	6002      	str	r2, [r0, #0]
}
    ed18:	4618      	mov	r0, r3
    ed1a:	bd70      	pop	{r4, r5, r6, pc}
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    ed1c:	2100      	movs	r1, #0
    ed1e:	f002 f949 	bl	10fb4 <memset>
    ed22:	e7de      	b.n	ece2 <sm_set_pool+0x2a>
		memset(spool->pool, 0, spool->pool_size);
    ed24:	6862      	ldr	r2, [r4, #4]
    ed26:	4631      	mov	r1, r6
    ed28:	6820      	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    ed2a:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    ed2c:	f002 f942 	bl	10fb4 <memset>
	return 1;
    ed30:	2301      	movs	r3, #1
    ed32:	e7dc      	b.n	ecee <sm_set_pool+0x36>
    ed34:	aaaaaaab 	.word	0xaaaaaaab
    ed38:	15555555 	.word	0x15555555

0000ed3c <__aeabi_atexit>:
    ed3c:	4603      	mov	r3, r0
    ed3e:	4608      	mov	r0, r1
    ed40:	4619      	mov	r1, r3
    ed42:	f001 be81 	b.w	10a48 <__cxa_atexit>
    ed46:	bf00      	nop

0000ed48 <__aeabi_uldivmod>:
    ed48:	b953      	cbnz	r3, ed60 <__aeabi_uldivmod+0x18>
    ed4a:	b94a      	cbnz	r2, ed60 <__aeabi_uldivmod+0x18>
    ed4c:	2900      	cmp	r1, #0
    ed4e:	bf08      	it	eq
    ed50:	2800      	cmpeq	r0, #0
    ed52:	bf1c      	itt	ne
    ed54:	f04f 31ff 	movne.w	r1, #4294967295
    ed58:	f04f 30ff 	movne.w	r0, #4294967295
    ed5c:	f000 b970 	b.w	f040 <__aeabi_idiv0>
    ed60:	f1ad 0c08 	sub.w	ip, sp, #8
    ed64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    ed68:	f000 f806 	bl	ed78 <__udivmoddi4>
    ed6c:	f8dd e004 	ldr.w	lr, [sp, #4]
    ed70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    ed74:	b004      	add	sp, #16
    ed76:	4770      	bx	lr

0000ed78 <__udivmoddi4>:
    ed78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ed7c:	9e08      	ldr	r6, [sp, #32]
    ed7e:	460d      	mov	r5, r1
    ed80:	4604      	mov	r4, r0
    ed82:	460f      	mov	r7, r1
    ed84:	2b00      	cmp	r3, #0
    ed86:	d14a      	bne.n	ee1e <__udivmoddi4+0xa6>
    ed88:	428a      	cmp	r2, r1
    ed8a:	4694      	mov	ip, r2
    ed8c:	d965      	bls.n	ee5a <__udivmoddi4+0xe2>
    ed8e:	fab2 f382 	clz	r3, r2
    ed92:	b143      	cbz	r3, eda6 <__udivmoddi4+0x2e>
    ed94:	fa02 fc03 	lsl.w	ip, r2, r3
    ed98:	f1c3 0220 	rsb	r2, r3, #32
    ed9c:	409f      	lsls	r7, r3
    ed9e:	fa20 f202 	lsr.w	r2, r0, r2
    eda2:	4317      	orrs	r7, r2
    eda4:	409c      	lsls	r4, r3
    eda6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
    edaa:	fa1f f58c 	uxth.w	r5, ip
    edae:	fbb7 f1fe 	udiv	r1, r7, lr
    edb2:	0c22      	lsrs	r2, r4, #16
    edb4:	fb0e 7711 	mls	r7, lr, r1, r7
    edb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
    edbc:	fb01 f005 	mul.w	r0, r1, r5
    edc0:	4290      	cmp	r0, r2
    edc2:	d90a      	bls.n	edda <__udivmoddi4+0x62>
    edc4:	eb1c 0202 	adds.w	r2, ip, r2
    edc8:	f101 37ff 	add.w	r7, r1, #4294967295
    edcc:	f080 811c 	bcs.w	f008 <__udivmoddi4+0x290>
    edd0:	4290      	cmp	r0, r2
    edd2:	f240 8119 	bls.w	f008 <__udivmoddi4+0x290>
    edd6:	3902      	subs	r1, #2
    edd8:	4462      	add	r2, ip
    edda:	1a12      	subs	r2, r2, r0
    eddc:	b2a4      	uxth	r4, r4
    edde:	fbb2 f0fe 	udiv	r0, r2, lr
    ede2:	fb0e 2210 	mls	r2, lr, r0, r2
    ede6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    edea:	fb00 f505 	mul.w	r5, r0, r5
    edee:	42a5      	cmp	r5, r4
    edf0:	d90a      	bls.n	ee08 <__udivmoddi4+0x90>
    edf2:	eb1c 0404 	adds.w	r4, ip, r4
    edf6:	f100 32ff 	add.w	r2, r0, #4294967295
    edfa:	f080 8107 	bcs.w	f00c <__udivmoddi4+0x294>
    edfe:	42a5      	cmp	r5, r4
    ee00:	f240 8104 	bls.w	f00c <__udivmoddi4+0x294>
    ee04:	4464      	add	r4, ip
    ee06:	3802      	subs	r0, #2
    ee08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
    ee0c:	1b64      	subs	r4, r4, r5
    ee0e:	2100      	movs	r1, #0
    ee10:	b11e      	cbz	r6, ee1a <__udivmoddi4+0xa2>
    ee12:	40dc      	lsrs	r4, r3
    ee14:	2300      	movs	r3, #0
    ee16:	e9c6 4300 	strd	r4, r3, [r6]
    ee1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ee1e:	428b      	cmp	r3, r1
    ee20:	d908      	bls.n	ee34 <__udivmoddi4+0xbc>
    ee22:	2e00      	cmp	r6, #0
    ee24:	f000 80ed 	beq.w	f002 <__udivmoddi4+0x28a>
    ee28:	2100      	movs	r1, #0
    ee2a:	e9c6 0500 	strd	r0, r5, [r6]
    ee2e:	4608      	mov	r0, r1
    ee30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ee34:	fab3 f183 	clz	r1, r3
    ee38:	2900      	cmp	r1, #0
    ee3a:	d149      	bne.n	eed0 <__udivmoddi4+0x158>
    ee3c:	42ab      	cmp	r3, r5
    ee3e:	d302      	bcc.n	ee46 <__udivmoddi4+0xce>
    ee40:	4282      	cmp	r2, r0
    ee42:	f200 80f8 	bhi.w	f036 <__udivmoddi4+0x2be>
    ee46:	1a84      	subs	r4, r0, r2
    ee48:	eb65 0203 	sbc.w	r2, r5, r3
    ee4c:	2001      	movs	r0, #1
    ee4e:	4617      	mov	r7, r2
    ee50:	2e00      	cmp	r6, #0
    ee52:	d0e2      	beq.n	ee1a <__udivmoddi4+0xa2>
    ee54:	e9c6 4700 	strd	r4, r7, [r6]
    ee58:	e7df      	b.n	ee1a <__udivmoddi4+0xa2>
    ee5a:	b902      	cbnz	r2, ee5e <__udivmoddi4+0xe6>
    ee5c:	deff      	udf	#255	; 0xff
    ee5e:	fab2 f382 	clz	r3, r2
    ee62:	2b00      	cmp	r3, #0
    ee64:	f040 8090 	bne.w	ef88 <__udivmoddi4+0x210>
    ee68:	1a8a      	subs	r2, r1, r2
    ee6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
    ee6e:	fa1f fe8c 	uxth.w	lr, ip
    ee72:	2101      	movs	r1, #1
    ee74:	fbb2 f5f7 	udiv	r5, r2, r7
    ee78:	fb07 2015 	mls	r0, r7, r5, r2
    ee7c:	0c22      	lsrs	r2, r4, #16
    ee7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    ee82:	fb0e f005 	mul.w	r0, lr, r5
    ee86:	4290      	cmp	r0, r2
    ee88:	d908      	bls.n	ee9c <__udivmoddi4+0x124>
    ee8a:	eb1c 0202 	adds.w	r2, ip, r2
    ee8e:	f105 38ff 	add.w	r8, r5, #4294967295
    ee92:	d202      	bcs.n	ee9a <__udivmoddi4+0x122>
    ee94:	4290      	cmp	r0, r2
    ee96:	f200 80cb 	bhi.w	f030 <__udivmoddi4+0x2b8>
    ee9a:	4645      	mov	r5, r8
    ee9c:	1a12      	subs	r2, r2, r0
    ee9e:	b2a4      	uxth	r4, r4
    eea0:	fbb2 f0f7 	udiv	r0, r2, r7
    eea4:	fb07 2210 	mls	r2, r7, r0, r2
    eea8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    eeac:	fb0e fe00 	mul.w	lr, lr, r0
    eeb0:	45a6      	cmp	lr, r4
    eeb2:	d908      	bls.n	eec6 <__udivmoddi4+0x14e>
    eeb4:	eb1c 0404 	adds.w	r4, ip, r4
    eeb8:	f100 32ff 	add.w	r2, r0, #4294967295
    eebc:	d202      	bcs.n	eec4 <__udivmoddi4+0x14c>
    eebe:	45a6      	cmp	lr, r4
    eec0:	f200 80bb 	bhi.w	f03a <__udivmoddi4+0x2c2>
    eec4:	4610      	mov	r0, r2
    eec6:	eba4 040e 	sub.w	r4, r4, lr
    eeca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
    eece:	e79f      	b.n	ee10 <__udivmoddi4+0x98>
    eed0:	f1c1 0720 	rsb	r7, r1, #32
    eed4:	408b      	lsls	r3, r1
    eed6:	fa22 fc07 	lsr.w	ip, r2, r7
    eeda:	ea4c 0c03 	orr.w	ip, ip, r3
    eede:	fa05 f401 	lsl.w	r4, r5, r1
    eee2:	fa20 f307 	lsr.w	r3, r0, r7
    eee6:	40fd      	lsrs	r5, r7
    eee8:	ea4f 491c 	mov.w	r9, ip, lsr #16
    eeec:	4323      	orrs	r3, r4
    eeee:	fbb5 f8f9 	udiv	r8, r5, r9
    eef2:	fa1f fe8c 	uxth.w	lr, ip
    eef6:	fb09 5518 	mls	r5, r9, r8, r5
    eefa:	0c1c      	lsrs	r4, r3, #16
    eefc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    ef00:	fb08 f50e 	mul.w	r5, r8, lr
    ef04:	42a5      	cmp	r5, r4
    ef06:	fa02 f201 	lsl.w	r2, r2, r1
    ef0a:	fa00 f001 	lsl.w	r0, r0, r1
    ef0e:	d90b      	bls.n	ef28 <__udivmoddi4+0x1b0>
    ef10:	eb1c 0404 	adds.w	r4, ip, r4
    ef14:	f108 3aff 	add.w	sl, r8, #4294967295
    ef18:	f080 8088 	bcs.w	f02c <__udivmoddi4+0x2b4>
    ef1c:	42a5      	cmp	r5, r4
    ef1e:	f240 8085 	bls.w	f02c <__udivmoddi4+0x2b4>
    ef22:	f1a8 0802 	sub.w	r8, r8, #2
    ef26:	4464      	add	r4, ip
    ef28:	1b64      	subs	r4, r4, r5
    ef2a:	b29d      	uxth	r5, r3
    ef2c:	fbb4 f3f9 	udiv	r3, r4, r9
    ef30:	fb09 4413 	mls	r4, r9, r3, r4
    ef34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
    ef38:	fb03 fe0e 	mul.w	lr, r3, lr
    ef3c:	45a6      	cmp	lr, r4
    ef3e:	d908      	bls.n	ef52 <__udivmoddi4+0x1da>
    ef40:	eb1c 0404 	adds.w	r4, ip, r4
    ef44:	f103 35ff 	add.w	r5, r3, #4294967295
    ef48:	d26c      	bcs.n	f024 <__udivmoddi4+0x2ac>
    ef4a:	45a6      	cmp	lr, r4
    ef4c:	d96a      	bls.n	f024 <__udivmoddi4+0x2ac>
    ef4e:	3b02      	subs	r3, #2
    ef50:	4464      	add	r4, ip
    ef52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    ef56:	fba3 9502 	umull	r9, r5, r3, r2
    ef5a:	eba4 040e 	sub.w	r4, r4, lr
    ef5e:	42ac      	cmp	r4, r5
    ef60:	46c8      	mov	r8, r9
    ef62:	46ae      	mov	lr, r5
    ef64:	d356      	bcc.n	f014 <__udivmoddi4+0x29c>
    ef66:	d053      	beq.n	f010 <__udivmoddi4+0x298>
    ef68:	b156      	cbz	r6, ef80 <__udivmoddi4+0x208>
    ef6a:	ebb0 0208 	subs.w	r2, r0, r8
    ef6e:	eb64 040e 	sbc.w	r4, r4, lr
    ef72:	fa04 f707 	lsl.w	r7, r4, r7
    ef76:	40ca      	lsrs	r2, r1
    ef78:	40cc      	lsrs	r4, r1
    ef7a:	4317      	orrs	r7, r2
    ef7c:	e9c6 7400 	strd	r7, r4, [r6]
    ef80:	4618      	mov	r0, r3
    ef82:	2100      	movs	r1, #0
    ef84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ef88:	f1c3 0120 	rsb	r1, r3, #32
    ef8c:	fa02 fc03 	lsl.w	ip, r2, r3
    ef90:	fa20 f201 	lsr.w	r2, r0, r1
    ef94:	fa25 f101 	lsr.w	r1, r5, r1
    ef98:	409d      	lsls	r5, r3
    ef9a:	432a      	orrs	r2, r5
    ef9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
    efa0:	fa1f fe8c 	uxth.w	lr, ip
    efa4:	fbb1 f0f7 	udiv	r0, r1, r7
    efa8:	fb07 1510 	mls	r5, r7, r0, r1
    efac:	0c11      	lsrs	r1, r2, #16
    efae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
    efb2:	fb00 f50e 	mul.w	r5, r0, lr
    efb6:	428d      	cmp	r5, r1
    efb8:	fa04 f403 	lsl.w	r4, r4, r3
    efbc:	d908      	bls.n	efd0 <__udivmoddi4+0x258>
    efbe:	eb1c 0101 	adds.w	r1, ip, r1
    efc2:	f100 38ff 	add.w	r8, r0, #4294967295
    efc6:	d22f      	bcs.n	f028 <__udivmoddi4+0x2b0>
    efc8:	428d      	cmp	r5, r1
    efca:	d92d      	bls.n	f028 <__udivmoddi4+0x2b0>
    efcc:	3802      	subs	r0, #2
    efce:	4461      	add	r1, ip
    efd0:	1b49      	subs	r1, r1, r5
    efd2:	b292      	uxth	r2, r2
    efd4:	fbb1 f5f7 	udiv	r5, r1, r7
    efd8:	fb07 1115 	mls	r1, r7, r5, r1
    efdc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    efe0:	fb05 f10e 	mul.w	r1, r5, lr
    efe4:	4291      	cmp	r1, r2
    efe6:	d908      	bls.n	effa <__udivmoddi4+0x282>
    efe8:	eb1c 0202 	adds.w	r2, ip, r2
    efec:	f105 38ff 	add.w	r8, r5, #4294967295
    eff0:	d216      	bcs.n	f020 <__udivmoddi4+0x2a8>
    eff2:	4291      	cmp	r1, r2
    eff4:	d914      	bls.n	f020 <__udivmoddi4+0x2a8>
    eff6:	3d02      	subs	r5, #2
    eff8:	4462      	add	r2, ip
    effa:	1a52      	subs	r2, r2, r1
    effc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
    f000:	e738      	b.n	ee74 <__udivmoddi4+0xfc>
    f002:	4631      	mov	r1, r6
    f004:	4630      	mov	r0, r6
    f006:	e708      	b.n	ee1a <__udivmoddi4+0xa2>
    f008:	4639      	mov	r1, r7
    f00a:	e6e6      	b.n	edda <__udivmoddi4+0x62>
    f00c:	4610      	mov	r0, r2
    f00e:	e6fb      	b.n	ee08 <__udivmoddi4+0x90>
    f010:	4548      	cmp	r0, r9
    f012:	d2a9      	bcs.n	ef68 <__udivmoddi4+0x1f0>
    f014:	ebb9 0802 	subs.w	r8, r9, r2
    f018:	eb65 0e0c 	sbc.w	lr, r5, ip
    f01c:	3b01      	subs	r3, #1
    f01e:	e7a3      	b.n	ef68 <__udivmoddi4+0x1f0>
    f020:	4645      	mov	r5, r8
    f022:	e7ea      	b.n	effa <__udivmoddi4+0x282>
    f024:	462b      	mov	r3, r5
    f026:	e794      	b.n	ef52 <__udivmoddi4+0x1da>
    f028:	4640      	mov	r0, r8
    f02a:	e7d1      	b.n	efd0 <__udivmoddi4+0x258>
    f02c:	46d0      	mov	r8, sl
    f02e:	e77b      	b.n	ef28 <__udivmoddi4+0x1b0>
    f030:	3d02      	subs	r5, #2
    f032:	4462      	add	r2, ip
    f034:	e732      	b.n	ee9c <__udivmoddi4+0x124>
    f036:	4608      	mov	r0, r1
    f038:	e70a      	b.n	ee50 <__udivmoddi4+0xd8>
    f03a:	4464      	add	r4, ip
    f03c:	3802      	subs	r0, #2
    f03e:	e742      	b.n	eec6 <__udivmoddi4+0x14e>

0000f040 <__aeabi_idiv0>:
    f040:	4770      	bx	lr
    f042:	bf00      	nop

0000f044 <atol>:
    f044:	220a      	movs	r2, #10
    f046:	2100      	movs	r1, #0
    f048:	f001 bcf0 	b.w	10a2c <strtol>

0000f04c <calloc>:
    f04c:	b410      	push	{r4}
    f04e:	4c04      	ldr	r4, [pc, #16]	; (f060 <calloc+0x14>)
    f050:	4603      	mov	r3, r0
    f052:	460a      	mov	r2, r1
    f054:	6820      	ldr	r0, [r4, #0]
    f056:	f85d 4b04 	ldr.w	r4, [sp], #4
    f05a:	4619      	mov	r1, r3
    f05c:	f000 b802 	b.w	f064 <_calloc_r>
    f060:	2000c6f4 	.word	0x2000c6f4

0000f064 <_calloc_r>:
    f064:	b538      	push	{r3, r4, r5, lr}
    f066:	fba1 1402 	umull	r1, r4, r1, r2
    f06a:	bb8c      	cbnz	r4, f0d0 <_calloc_r+0x6c>
    f06c:	f000 f846 	bl	f0fc <_malloc_r>
    f070:	4605      	mov	r5, r0
    f072:	b1e0      	cbz	r0, f0ae <_calloc_r+0x4a>
    f074:	f850 2c04 	ldr.w	r2, [r0, #-4]
    f078:	f022 0203 	bic.w	r2, r2, #3
    f07c:	3a04      	subs	r2, #4
    f07e:	2a24      	cmp	r2, #36	; 0x24
    f080:	d817      	bhi.n	f0b2 <_calloc_r+0x4e>
    f082:	2a13      	cmp	r2, #19
    f084:	d91a      	bls.n	f0bc <_calloc_r+0x58>
    f086:	2a1b      	cmp	r2, #27
    f088:	e9c0 4400 	strd	r4, r4, [r0]
    f08c:	d91d      	bls.n	f0ca <_calloc_r+0x66>
    f08e:	2a24      	cmp	r2, #36	; 0x24
    f090:	bf14      	ite	ne
    f092:	f100 0210 	addne.w	r2, r0, #16
    f096:	f100 0218 	addeq.w	r2, r0, #24
    f09a:	f04f 0300 	mov.w	r3, #0
    f09e:	e9c0 4402 	strd	r4, r4, [r0, #8]
    f0a2:	bf04      	itt	eq
    f0a4:	6104      	streq	r4, [r0, #16]
    f0a6:	6144      	streq	r4, [r0, #20]
    f0a8:	e9c2 3300 	strd	r3, r3, [r2]
    f0ac:	6093      	str	r3, [r2, #8]
    f0ae:	4628      	mov	r0, r5
    f0b0:	bd38      	pop	{r3, r4, r5, pc}
    f0b2:	4621      	mov	r1, r4
    f0b4:	f001 ff7e 	bl	10fb4 <memset>
    f0b8:	4628      	mov	r0, r5
    f0ba:	bd38      	pop	{r3, r4, r5, pc}
    f0bc:	4602      	mov	r2, r0
    f0be:	2300      	movs	r3, #0
    f0c0:	e9c2 3300 	strd	r3, r3, [r2]
    f0c4:	6093      	str	r3, [r2, #8]
    f0c6:	4628      	mov	r0, r5
    f0c8:	bd38      	pop	{r3, r4, r5, pc}
    f0ca:	f100 0208 	add.w	r2, r0, #8
    f0ce:	e7f6      	b.n	f0be <_calloc_r+0x5a>
    f0d0:	f002 f9be 	bl	11450 <__errno>
    f0d4:	230c      	movs	r3, #12
    f0d6:	2500      	movs	r5, #0
    f0d8:	6003      	str	r3, [r0, #0]
    f0da:	e7e8      	b.n	f0ae <_calloc_r+0x4a>

0000f0dc <malloc>:
    f0dc:	4b02      	ldr	r3, [pc, #8]	; (f0e8 <malloc+0xc>)
    f0de:	4601      	mov	r1, r0
    f0e0:	6818      	ldr	r0, [r3, #0]
    f0e2:	f000 b80b 	b.w	f0fc <_malloc_r>
    f0e6:	bf00      	nop
    f0e8:	2000c6f4 	.word	0x2000c6f4

0000f0ec <free>:
    f0ec:	4b02      	ldr	r3, [pc, #8]	; (f0f8 <free+0xc>)
    f0ee:	4601      	mov	r1, r0
    f0f0:	6818      	ldr	r0, [r3, #0]
    f0f2:	f002 bd17 	b.w	11b24 <_free_r>
    f0f6:	bf00      	nop
    f0f8:	2000c6f4 	.word	0x2000c6f4

0000f0fc <_malloc_r>:
    f0fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f100:	f101 060b 	add.w	r6, r1, #11
    f104:	2e16      	cmp	r6, #22
    f106:	b083      	sub	sp, #12
    f108:	4604      	mov	r4, r0
    f10a:	d824      	bhi.n	f156 <_malloc_r+0x5a>
    f10c:	2910      	cmp	r1, #16
    f10e:	f200 80ba 	bhi.w	f286 <_malloc_r+0x18a>
    f112:	f000 faa3 	bl	f65c <__malloc_lock>
    f116:	2610      	movs	r6, #16
    f118:	2218      	movs	r2, #24
    f11a:	2002      	movs	r0, #2
    f11c:	4fb5      	ldr	r7, [pc, #724]	; (f3f4 <_malloc_r+0x2f8>)
    f11e:	443a      	add	r2, r7
    f120:	f1a2 0108 	sub.w	r1, r2, #8
    f124:	6853      	ldr	r3, [r2, #4]
    f126:	428b      	cmp	r3, r1
    f128:	f000 80ba 	beq.w	f2a0 <_malloc_r+0x1a4>
    f12c:	685a      	ldr	r2, [r3, #4]
    f12e:	68d9      	ldr	r1, [r3, #12]
    f130:	f022 0203 	bic.w	r2, r2, #3
    f134:	441a      	add	r2, r3
    f136:	689d      	ldr	r5, [r3, #8]
    f138:	60e9      	str	r1, [r5, #12]
    f13a:	608d      	str	r5, [r1, #8]
    f13c:	6851      	ldr	r1, [r2, #4]
    f13e:	f041 0101 	orr.w	r1, r1, #1
    f142:	4620      	mov	r0, r4
    f144:	6051      	str	r1, [r2, #4]
    f146:	f103 0508 	add.w	r5, r3, #8
    f14a:	f000 fa8d 	bl	f668 <__malloc_unlock>
    f14e:	4628      	mov	r0, r5
    f150:	b003      	add	sp, #12
    f152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f156:	f036 0607 	bics.w	r6, r6, #7
    f15a:	f100 8094 	bmi.w	f286 <_malloc_r+0x18a>
    f15e:	42b1      	cmp	r1, r6
    f160:	f200 8091 	bhi.w	f286 <_malloc_r+0x18a>
    f164:	f000 fa7a 	bl	f65c <__malloc_lock>
    f168:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    f16c:	f0c0 819a 	bcc.w	f4a4 <_malloc_r+0x3a8>
    f170:	0a73      	lsrs	r3, r6, #9
    f172:	f000 808f 	beq.w	f294 <_malloc_r+0x198>
    f176:	2b04      	cmp	r3, #4
    f178:	f200 816f 	bhi.w	f45a <_malloc_r+0x35e>
    f17c:	09b3      	lsrs	r3, r6, #6
    f17e:	f103 0039 	add.w	r0, r3, #57	; 0x39
    f182:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    f186:	00c3      	lsls	r3, r0, #3
    f188:	4f9a      	ldr	r7, [pc, #616]	; (f3f4 <_malloc_r+0x2f8>)
    f18a:	443b      	add	r3, r7
    f18c:	f1a3 0508 	sub.w	r5, r3, #8
    f190:	685b      	ldr	r3, [r3, #4]
    f192:	429d      	cmp	r5, r3
    f194:	d106      	bne.n	f1a4 <_malloc_r+0xa8>
    f196:	e00c      	b.n	f1b2 <_malloc_r+0xb6>
    f198:	2900      	cmp	r1, #0
    f19a:	f280 8127 	bge.w	f3ec <_malloc_r+0x2f0>
    f19e:	68db      	ldr	r3, [r3, #12]
    f1a0:	429d      	cmp	r5, r3
    f1a2:	d006      	beq.n	f1b2 <_malloc_r+0xb6>
    f1a4:	685a      	ldr	r2, [r3, #4]
    f1a6:	f022 0203 	bic.w	r2, r2, #3
    f1aa:	1b91      	subs	r1, r2, r6
    f1ac:	290f      	cmp	r1, #15
    f1ae:	ddf3      	ble.n	f198 <_malloc_r+0x9c>
    f1b0:	4660      	mov	r0, ip
    f1b2:	693d      	ldr	r5, [r7, #16]
    f1b4:	f8df c250 	ldr.w	ip, [pc, #592]	; f408 <_malloc_r+0x30c>
    f1b8:	4565      	cmp	r5, ip
    f1ba:	d07c      	beq.n	f2b6 <_malloc_r+0x1ba>
    f1bc:	686a      	ldr	r2, [r5, #4]
    f1be:	f022 0203 	bic.w	r2, r2, #3
    f1c2:	1b93      	subs	r3, r2, r6
    f1c4:	2b0f      	cmp	r3, #15
    f1c6:	f300 817b 	bgt.w	f4c0 <_malloc_r+0x3c4>
    f1ca:	2b00      	cmp	r3, #0
    f1cc:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    f1d0:	f280 816c 	bge.w	f4ac <_malloc_r+0x3b0>
    f1d4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    f1d8:	f080 811a 	bcs.w	f410 <_malloc_r+0x314>
    f1dc:	08d3      	lsrs	r3, r2, #3
    f1de:	6879      	ldr	r1, [r7, #4]
    f1e0:	3301      	adds	r3, #1
    f1e2:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    f1e6:	2201      	movs	r2, #1
    f1e8:	fa02 f20e 	lsl.w	r2, r2, lr
    f1ec:	430a      	orrs	r2, r1
    f1ee:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    f1f2:	f8c5 e008 	str.w	lr, [r5, #8]
    f1f6:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    f1fa:	3908      	subs	r1, #8
    f1fc:	60e9      	str	r1, [r5, #12]
    f1fe:	607a      	str	r2, [r7, #4]
    f200:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    f204:	f8ce 500c 	str.w	r5, [lr, #12]
    f208:	1083      	asrs	r3, r0, #2
    f20a:	2101      	movs	r1, #1
    f20c:	4099      	lsls	r1, r3
    f20e:	4291      	cmp	r1, r2
    f210:	d857      	bhi.n	f2c2 <_malloc_r+0x1c6>
    f212:	4211      	tst	r1, r2
    f214:	d106      	bne.n	f224 <_malloc_r+0x128>
    f216:	f020 0003 	bic.w	r0, r0, #3
    f21a:	0049      	lsls	r1, r1, #1
    f21c:	4211      	tst	r1, r2
    f21e:	f100 0004 	add.w	r0, r0, #4
    f222:	d0fa      	beq.n	f21a <_malloc_r+0x11e>
    f224:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    f228:	464d      	mov	r5, r9
    f22a:	4686      	mov	lr, r0
    f22c:	f8d5 800c 	ldr.w	r8, [r5, #12]
    f230:	4545      	cmp	r5, r8
    f232:	d108      	bne.n	f246 <_malloc_r+0x14a>
    f234:	e11d      	b.n	f472 <_malloc_r+0x376>
    f236:	2b00      	cmp	r3, #0
    f238:	f280 8124 	bge.w	f484 <_malloc_r+0x388>
    f23c:	f8d8 800c 	ldr.w	r8, [r8, #12]
    f240:	4545      	cmp	r5, r8
    f242:	f000 8116 	beq.w	f472 <_malloc_r+0x376>
    f246:	f8d8 2004 	ldr.w	r2, [r8, #4]
    f24a:	f022 0203 	bic.w	r2, r2, #3
    f24e:	1b93      	subs	r3, r2, r6
    f250:	2b0f      	cmp	r3, #15
    f252:	ddf0      	ble.n	f236 <_malloc_r+0x13a>
    f254:	4620      	mov	r0, r4
    f256:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    f25a:	eb08 0106 	add.w	r1, r8, r6
    f25e:	f046 0601 	orr.w	r6, r6, #1
    f262:	f8c8 6004 	str.w	r6, [r8, #4]
    f266:	60ec      	str	r4, [r5, #12]
    f268:	60a5      	str	r5, [r4, #8]
    f26a:	f043 0401 	orr.w	r4, r3, #1
    f26e:	e9c7 1104 	strd	r1, r1, [r7, #16]
    f272:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    f276:	604c      	str	r4, [r1, #4]
    f278:	f848 3002 	str.w	r3, [r8, r2]
    f27c:	f000 f9f4 	bl	f668 <__malloc_unlock>
    f280:	f108 0508 	add.w	r5, r8, #8
    f284:	e002      	b.n	f28c <_malloc_r+0x190>
    f286:	230c      	movs	r3, #12
    f288:	6023      	str	r3, [r4, #0]
    f28a:	2500      	movs	r5, #0
    f28c:	4628      	mov	r0, r5
    f28e:	b003      	add	sp, #12
    f290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f294:	f44f 7300 	mov.w	r3, #512	; 0x200
    f298:	2040      	movs	r0, #64	; 0x40
    f29a:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    f29e:	e773      	b.n	f188 <_malloc_r+0x8c>
    f2a0:	68d3      	ldr	r3, [r2, #12]
    f2a2:	429a      	cmp	r2, r3
    f2a4:	bf08      	it	eq
    f2a6:	3002      	addeq	r0, #2
    f2a8:	f47f af40 	bne.w	f12c <_malloc_r+0x30>
    f2ac:	693d      	ldr	r5, [r7, #16]
    f2ae:	f8df c158 	ldr.w	ip, [pc, #344]	; f408 <_malloc_r+0x30c>
    f2b2:	4565      	cmp	r5, ip
    f2b4:	d182      	bne.n	f1bc <_malloc_r+0xc0>
    f2b6:	687a      	ldr	r2, [r7, #4]
    f2b8:	1083      	asrs	r3, r0, #2
    f2ba:	2101      	movs	r1, #1
    f2bc:	4099      	lsls	r1, r3
    f2be:	4291      	cmp	r1, r2
    f2c0:	d9a7      	bls.n	f212 <_malloc_r+0x116>
    f2c2:	68bd      	ldr	r5, [r7, #8]
    f2c4:	686b      	ldr	r3, [r5, #4]
    f2c6:	f023 0903 	bic.w	r9, r3, #3
    f2ca:	454e      	cmp	r6, r9
    f2cc:	d803      	bhi.n	f2d6 <_malloc_r+0x1da>
    f2ce:	eba9 0306 	sub.w	r3, r9, r6
    f2d2:	2b0f      	cmp	r3, #15
    f2d4:	dc7a      	bgt.n	f3cc <_malloc_r+0x2d0>
    f2d6:	f8df b134 	ldr.w	fp, [pc, #308]	; f40c <_malloc_r+0x310>
    f2da:	4b47      	ldr	r3, [pc, #284]	; (f3f8 <_malloc_r+0x2fc>)
    f2dc:	f8db 2000 	ldr.w	r2, [fp]
    f2e0:	681b      	ldr	r3, [r3, #0]
    f2e2:	3201      	adds	r2, #1
    f2e4:	4433      	add	r3, r6
    f2e6:	eb05 0a09 	add.w	sl, r5, r9
    f2ea:	f000 8133 	beq.w	f554 <_malloc_r+0x458>
    f2ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    f2f2:	330f      	adds	r3, #15
    f2f4:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    f2f8:	f028 080f 	bic.w	r8, r8, #15
    f2fc:	4641      	mov	r1, r8
    f2fe:	4620      	mov	r0, r4
    f300:	f002 f87e 	bl	11400 <_sbrk_r>
    f304:	1c41      	adds	r1, r0, #1
    f306:	4602      	mov	r2, r0
    f308:	f000 80f3 	beq.w	f4f2 <_malloc_r+0x3f6>
    f30c:	4582      	cmp	sl, r0
    f30e:	f200 80ee 	bhi.w	f4ee <_malloc_r+0x3f2>
    f312:	4b3a      	ldr	r3, [pc, #232]	; (f3fc <_malloc_r+0x300>)
    f314:	6819      	ldr	r1, [r3, #0]
    f316:	4441      	add	r1, r8
    f318:	6019      	str	r1, [r3, #0]
    f31a:	4608      	mov	r0, r1
    f31c:	f000 814e 	beq.w	f5bc <_malloc_r+0x4c0>
    f320:	f8db 1000 	ldr.w	r1, [fp]
    f324:	9301      	str	r3, [sp, #4]
    f326:	3101      	adds	r1, #1
    f328:	bf1b      	ittet	ne
    f32a:	eba2 010a 	subne.w	r1, r2, sl
    f32e:	1809      	addne	r1, r1, r0
    f330:	f8cb 2000 	streq.w	r2, [fp]
    f334:	6019      	strne	r1, [r3, #0]
    f336:	f012 0b07 	ands.w	fp, r2, #7
    f33a:	f000 8117 	beq.w	f56c <_malloc_r+0x470>
    f33e:	f1cb 0108 	rsb	r1, fp, #8
    f342:	440a      	add	r2, r1
    f344:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    f348:	4490      	add	r8, r2
    f34a:	3108      	adds	r1, #8
    f34c:	eba1 0108 	sub.w	r1, r1, r8
    f350:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    f354:	4651      	mov	r1, sl
    f356:	4620      	mov	r0, r4
    f358:	9200      	str	r2, [sp, #0]
    f35a:	f002 f851 	bl	11400 <_sbrk_r>
    f35e:	1c42      	adds	r2, r0, #1
    f360:	e9dd 2300 	ldrd	r2, r3, [sp]
    f364:	f000 814f 	beq.w	f606 <_malloc_r+0x50a>
    f368:	1a80      	subs	r0, r0, r2
    f36a:	eb00 080a 	add.w	r8, r0, sl
    f36e:	6819      	ldr	r1, [r3, #0]
    f370:	60ba      	str	r2, [r7, #8]
    f372:	f048 0001 	orr.w	r0, r8, #1
    f376:	4451      	add	r1, sl
    f378:	42bd      	cmp	r5, r7
    f37a:	6050      	str	r0, [r2, #4]
    f37c:	6019      	str	r1, [r3, #0]
    f37e:	f000 8129 	beq.w	f5d4 <_malloc_r+0x4d8>
    f382:	f1b9 0f0f 	cmp.w	r9, #15
    f386:	f240 8127 	bls.w	f5d8 <_malloc_r+0x4dc>
    f38a:	6868      	ldr	r0, [r5, #4]
    f38c:	f1a9 0c0c 	sub.w	ip, r9, #12
    f390:	f02c 0c07 	bic.w	ip, ip, #7
    f394:	f000 0001 	and.w	r0, r0, #1
    f398:	ea40 000c 	orr.w	r0, r0, ip
    f39c:	6068      	str	r0, [r5, #4]
    f39e:	f04f 0e05 	mov.w	lr, #5
    f3a2:	eb05 000c 	add.w	r0, r5, ip
    f3a6:	f1bc 0f0f 	cmp.w	ip, #15
    f3aa:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    f3ae:	f200 8132 	bhi.w	f616 <_malloc_r+0x51a>
    f3b2:	6850      	ldr	r0, [r2, #4]
    f3b4:	4615      	mov	r5, r2
    f3b6:	4b12      	ldr	r3, [pc, #72]	; (f400 <_malloc_r+0x304>)
    f3b8:	681a      	ldr	r2, [r3, #0]
    f3ba:	428a      	cmp	r2, r1
    f3bc:	bf38      	it	cc
    f3be:	6019      	strcc	r1, [r3, #0]
    f3c0:	4b10      	ldr	r3, [pc, #64]	; (f404 <_malloc_r+0x308>)
    f3c2:	681a      	ldr	r2, [r3, #0]
    f3c4:	428a      	cmp	r2, r1
    f3c6:	bf38      	it	cc
    f3c8:	6019      	strcc	r1, [r3, #0]
    f3ca:	e094      	b.n	f4f6 <_malloc_r+0x3fa>
    f3cc:	19aa      	adds	r2, r5, r6
    f3ce:	f043 0301 	orr.w	r3, r3, #1
    f3d2:	f046 0601 	orr.w	r6, r6, #1
    f3d6:	606e      	str	r6, [r5, #4]
    f3d8:	4620      	mov	r0, r4
    f3da:	60ba      	str	r2, [r7, #8]
    f3dc:	6053      	str	r3, [r2, #4]
    f3de:	f000 f943 	bl	f668 <__malloc_unlock>
    f3e2:	3508      	adds	r5, #8
    f3e4:	4628      	mov	r0, r5
    f3e6:	b003      	add	sp, #12
    f3e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f3ec:	68d9      	ldr	r1, [r3, #12]
    f3ee:	441a      	add	r2, r3
    f3f0:	e6a1      	b.n	f136 <_malloc_r+0x3a>
    f3f2:	bf00      	nop
    f3f4:	2000c2d8 	.word	0x2000c2d8
    f3f8:	2005e2a8 	.word	0x2005e2a8
    f3fc:	2005e278 	.word	0x2005e278
    f400:	2005e2a0 	.word	0x2005e2a0
    f404:	2005e2a4 	.word	0x2005e2a4
    f408:	2000c2e0 	.word	0x2000c2e0
    f40c:	2000c6e0 	.word	0x2000c6e0
    f410:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    f414:	ea4f 2352 	mov.w	r3, r2, lsr #9
    f418:	d363      	bcc.n	f4e2 <_malloc_r+0x3e6>
    f41a:	2b14      	cmp	r3, #20
    f41c:	f200 80b7 	bhi.w	f58e <_malloc_r+0x492>
    f420:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    f424:	00c9      	lsls	r1, r1, #3
    f426:	335b      	adds	r3, #91	; 0x5b
    f428:	eb07 0e01 	add.w	lr, r7, r1
    f42c:	5879      	ldr	r1, [r7, r1]
    f42e:	f1ae 0e08 	sub.w	lr, lr, #8
    f432:	458e      	cmp	lr, r1
    f434:	f000 8091 	beq.w	f55a <_malloc_r+0x45e>
    f438:	684b      	ldr	r3, [r1, #4]
    f43a:	f023 0303 	bic.w	r3, r3, #3
    f43e:	4293      	cmp	r3, r2
    f440:	d902      	bls.n	f448 <_malloc_r+0x34c>
    f442:	6889      	ldr	r1, [r1, #8]
    f444:	458e      	cmp	lr, r1
    f446:	d1f7      	bne.n	f438 <_malloc_r+0x33c>
    f448:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    f44c:	687a      	ldr	r2, [r7, #4]
    f44e:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    f452:	f8ce 5008 	str.w	r5, [lr, #8]
    f456:	60cd      	str	r5, [r1, #12]
    f458:	e6d6      	b.n	f208 <_malloc_r+0x10c>
    f45a:	2b14      	cmp	r3, #20
    f45c:	d959      	bls.n	f512 <_malloc_r+0x416>
    f45e:	2b54      	cmp	r3, #84	; 0x54
    f460:	f200 809d 	bhi.w	f59e <_malloc_r+0x4a2>
    f464:	0b33      	lsrs	r3, r6, #12
    f466:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    f46a:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    f46e:	00c3      	lsls	r3, r0, #3
    f470:	e68a      	b.n	f188 <_malloc_r+0x8c>
    f472:	f10e 0e01 	add.w	lr, lr, #1
    f476:	f01e 0f03 	tst.w	lr, #3
    f47a:	f105 0508 	add.w	r5, r5, #8
    f47e:	f47f aed5 	bne.w	f22c <_malloc_r+0x130>
    f482:	e051      	b.n	f528 <_malloc_r+0x42c>
    f484:	4442      	add	r2, r8
    f486:	4645      	mov	r5, r8
    f488:	6853      	ldr	r3, [r2, #4]
    f48a:	f8d8 100c 	ldr.w	r1, [r8, #12]
    f48e:	f043 0301 	orr.w	r3, r3, #1
    f492:	6053      	str	r3, [r2, #4]
    f494:	f855 3f08 	ldr.w	r3, [r5, #8]!
    f498:	4620      	mov	r0, r4
    f49a:	60d9      	str	r1, [r3, #12]
    f49c:	608b      	str	r3, [r1, #8]
    f49e:	f000 f8e3 	bl	f668 <__malloc_unlock>
    f4a2:	e6f3      	b.n	f28c <_malloc_r+0x190>
    f4a4:	08f0      	lsrs	r0, r6, #3
    f4a6:	f106 0208 	add.w	r2, r6, #8
    f4aa:	e637      	b.n	f11c <_malloc_r+0x20>
    f4ac:	442a      	add	r2, r5
    f4ae:	4620      	mov	r0, r4
    f4b0:	6853      	ldr	r3, [r2, #4]
    f4b2:	f043 0301 	orr.w	r3, r3, #1
    f4b6:	6053      	str	r3, [r2, #4]
    f4b8:	3508      	adds	r5, #8
    f4ba:	f000 f8d5 	bl	f668 <__malloc_unlock>
    f4be:	e6e5      	b.n	f28c <_malloc_r+0x190>
    f4c0:	19a9      	adds	r1, r5, r6
    f4c2:	4620      	mov	r0, r4
    f4c4:	f046 0601 	orr.w	r6, r6, #1
    f4c8:	f043 0401 	orr.w	r4, r3, #1
    f4cc:	606e      	str	r6, [r5, #4]
    f4ce:	e9c7 1104 	strd	r1, r1, [r7, #16]
    f4d2:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    f4d6:	604c      	str	r4, [r1, #4]
    f4d8:	50ab      	str	r3, [r5, r2]
    f4da:	f000 f8c5 	bl	f668 <__malloc_unlock>
    f4de:	3508      	adds	r5, #8
    f4e0:	e6d4      	b.n	f28c <_malloc_r+0x190>
    f4e2:	0993      	lsrs	r3, r2, #6
    f4e4:	f103 0139 	add.w	r1, r3, #57	; 0x39
    f4e8:	00c9      	lsls	r1, r1, #3
    f4ea:	3338      	adds	r3, #56	; 0x38
    f4ec:	e79c      	b.n	f428 <_malloc_r+0x32c>
    f4ee:	42bd      	cmp	r5, r7
    f4f0:	d05f      	beq.n	f5b2 <_malloc_r+0x4b6>
    f4f2:	68bd      	ldr	r5, [r7, #8]
    f4f4:	6868      	ldr	r0, [r5, #4]
    f4f6:	f020 0803 	bic.w	r8, r0, #3
    f4fa:	4546      	cmp	r6, r8
    f4fc:	eba8 0306 	sub.w	r3, r8, r6
    f500:	d802      	bhi.n	f508 <_malloc_r+0x40c>
    f502:	2b0f      	cmp	r3, #15
    f504:	f73f af62 	bgt.w	f3cc <_malloc_r+0x2d0>
    f508:	4620      	mov	r0, r4
    f50a:	f000 f8ad 	bl	f668 <__malloc_unlock>
    f50e:	2500      	movs	r5, #0
    f510:	e6bc      	b.n	f28c <_malloc_r+0x190>
    f512:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    f516:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    f51a:	00c3      	lsls	r3, r0, #3
    f51c:	e634      	b.n	f188 <_malloc_r+0x8c>
    f51e:	f859 3908 	ldr.w	r3, [r9], #-8
    f522:	454b      	cmp	r3, r9
    f524:	f040 8096 	bne.w	f654 <_malloc_r+0x558>
    f528:	f010 0f03 	tst.w	r0, #3
    f52c:	f100 30ff 	add.w	r0, r0, #4294967295
    f530:	d1f5      	bne.n	f51e <_malloc_r+0x422>
    f532:	687b      	ldr	r3, [r7, #4]
    f534:	ea23 0301 	bic.w	r3, r3, r1
    f538:	607b      	str	r3, [r7, #4]
    f53a:	0049      	lsls	r1, r1, #1
    f53c:	4299      	cmp	r1, r3
    f53e:	f63f aec0 	bhi.w	f2c2 <_malloc_r+0x1c6>
    f542:	b919      	cbnz	r1, f54c <_malloc_r+0x450>
    f544:	e6bd      	b.n	f2c2 <_malloc_r+0x1c6>
    f546:	0049      	lsls	r1, r1, #1
    f548:	f10e 0e04 	add.w	lr, lr, #4
    f54c:	4219      	tst	r1, r3
    f54e:	d0fa      	beq.n	f546 <_malloc_r+0x44a>
    f550:	4670      	mov	r0, lr
    f552:	e667      	b.n	f224 <_malloc_r+0x128>
    f554:	f103 0810 	add.w	r8, r3, #16
    f558:	e6d0      	b.n	f2fc <_malloc_r+0x200>
    f55a:	109a      	asrs	r2, r3, #2
    f55c:	f04f 0801 	mov.w	r8, #1
    f560:	687b      	ldr	r3, [r7, #4]
    f562:	fa08 f202 	lsl.w	r2, r8, r2
    f566:	431a      	orrs	r2, r3
    f568:	607a      	str	r2, [r7, #4]
    f56a:	e770      	b.n	f44e <_malloc_r+0x352>
    f56c:	eb02 0108 	add.w	r1, r2, r8
    f570:	4249      	negs	r1, r1
    f572:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    f576:	4651      	mov	r1, sl
    f578:	4620      	mov	r0, r4
    f57a:	9200      	str	r2, [sp, #0]
    f57c:	f001 ff40 	bl	11400 <_sbrk_r>
    f580:	1c43      	adds	r3, r0, #1
    f582:	e9dd 2300 	ldrd	r2, r3, [sp]
    f586:	f47f aeef 	bne.w	f368 <_malloc_r+0x26c>
    f58a:	46da      	mov	sl, fp
    f58c:	e6ef      	b.n	f36e <_malloc_r+0x272>
    f58e:	2b54      	cmp	r3, #84	; 0x54
    f590:	d825      	bhi.n	f5de <_malloc_r+0x4e2>
    f592:	0b13      	lsrs	r3, r2, #12
    f594:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    f598:	00c9      	lsls	r1, r1, #3
    f59a:	336e      	adds	r3, #110	; 0x6e
    f59c:	e744      	b.n	f428 <_malloc_r+0x32c>
    f59e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    f5a2:	d825      	bhi.n	f5f0 <_malloc_r+0x4f4>
    f5a4:	0bf3      	lsrs	r3, r6, #15
    f5a6:	f103 0078 	add.w	r0, r3, #120	; 0x78
    f5aa:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    f5ae:	00c3      	lsls	r3, r0, #3
    f5b0:	e5ea      	b.n	f188 <_malloc_r+0x8c>
    f5b2:	4b29      	ldr	r3, [pc, #164]	; (f658 <_malloc_r+0x55c>)
    f5b4:	6818      	ldr	r0, [r3, #0]
    f5b6:	4440      	add	r0, r8
    f5b8:	6018      	str	r0, [r3, #0]
    f5ba:	e6b1      	b.n	f320 <_malloc_r+0x224>
    f5bc:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    f5c0:	f1bc 0f00 	cmp.w	ip, #0
    f5c4:	f47f aeac 	bne.w	f320 <_malloc_r+0x224>
    f5c8:	68bd      	ldr	r5, [r7, #8]
    f5ca:	44c8      	add	r8, r9
    f5cc:	f048 0001 	orr.w	r0, r8, #1
    f5d0:	6068      	str	r0, [r5, #4]
    f5d2:	e6f0      	b.n	f3b6 <_malloc_r+0x2ba>
    f5d4:	4615      	mov	r5, r2
    f5d6:	e6ee      	b.n	f3b6 <_malloc_r+0x2ba>
    f5d8:	2301      	movs	r3, #1
    f5da:	6053      	str	r3, [r2, #4]
    f5dc:	e794      	b.n	f508 <_malloc_r+0x40c>
    f5de:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    f5e2:	d823      	bhi.n	f62c <_malloc_r+0x530>
    f5e4:	0bd3      	lsrs	r3, r2, #15
    f5e6:	f103 0178 	add.w	r1, r3, #120	; 0x78
    f5ea:	00c9      	lsls	r1, r1, #3
    f5ec:	3377      	adds	r3, #119	; 0x77
    f5ee:	e71b      	b.n	f428 <_malloc_r+0x32c>
    f5f0:	f240 5254 	movw	r2, #1364	; 0x554
    f5f4:	4293      	cmp	r3, r2
    f5f6:	d823      	bhi.n	f640 <_malloc_r+0x544>
    f5f8:	0cb3      	lsrs	r3, r6, #18
    f5fa:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    f5fe:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    f602:	00c3      	lsls	r3, r0, #3
    f604:	e5c0      	b.n	f188 <_malloc_r+0x8c>
    f606:	f1ab 0b08 	sub.w	fp, fp, #8
    f60a:	44d8      	add	r8, fp
    f60c:	eba8 0802 	sub.w	r8, r8, r2
    f610:	f04f 0a00 	mov.w	sl, #0
    f614:	e6ab      	b.n	f36e <_malloc_r+0x272>
    f616:	f105 0108 	add.w	r1, r5, #8
    f61a:	4620      	mov	r0, r4
    f61c:	9300      	str	r3, [sp, #0]
    f61e:	f002 fa81 	bl	11b24 <_free_r>
    f622:	68bd      	ldr	r5, [r7, #8]
    f624:	9b00      	ldr	r3, [sp, #0]
    f626:	6868      	ldr	r0, [r5, #4]
    f628:	6819      	ldr	r1, [r3, #0]
    f62a:	e6c4      	b.n	f3b6 <_malloc_r+0x2ba>
    f62c:	f240 5154 	movw	r1, #1364	; 0x554
    f630:	428b      	cmp	r3, r1
    f632:	d80b      	bhi.n	f64c <_malloc_r+0x550>
    f634:	0c93      	lsrs	r3, r2, #18
    f636:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    f63a:	00c9      	lsls	r1, r1, #3
    f63c:	337c      	adds	r3, #124	; 0x7c
    f63e:	e6f3      	b.n	f428 <_malloc_r+0x32c>
    f640:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    f644:	207f      	movs	r0, #127	; 0x7f
    f646:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    f64a:	e59d      	b.n	f188 <_malloc_r+0x8c>
    f64c:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    f650:	237e      	movs	r3, #126	; 0x7e
    f652:	e6e9      	b.n	f428 <_malloc_r+0x32c>
    f654:	687b      	ldr	r3, [r7, #4]
    f656:	e770      	b.n	f53a <_malloc_r+0x43e>
    f658:	2005e278 	.word	0x2005e278

0000f65c <__malloc_lock>:
    f65c:	4801      	ldr	r0, [pc, #4]	; (f664 <__malloc_lock+0x8>)
    f65e:	f001 bf25 	b.w	114ac <__retarget_lock_acquire_recursive>
    f662:	bf00      	nop
    f664:	2005e270 	.word	0x2005e270

0000f668 <__malloc_unlock>:
    f668:	4801      	ldr	r0, [pc, #4]	; (f670 <__malloc_unlock+0x8>)
    f66a:	f001 bf21 	b.w	114b0 <__retarget_lock_release_recursive>
    f66e:	bf00      	nop
    f670:	2005e270 	.word	0x2005e270

0000f674 <realloc>:
    f674:	b410      	push	{r4}
    f676:	4c04      	ldr	r4, [pc, #16]	; (f688 <realloc+0x14>)
    f678:	4603      	mov	r3, r0
    f67a:	460a      	mov	r2, r1
    f67c:	6820      	ldr	r0, [r4, #0]
    f67e:	f85d 4b04 	ldr.w	r4, [sp], #4
    f682:	4619      	mov	r1, r3
    f684:	f000 b802 	b.w	f68c <_realloc_r>
    f688:	2000c6f4 	.word	0x2000c6f4

0000f68c <_realloc_r>:
    f68c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f690:	4617      	mov	r7, r2
    f692:	2900      	cmp	r1, #0
    f694:	f000 8098 	beq.w	f7c8 <_realloc_r+0x13c>
    f698:	460c      	mov	r4, r1
    f69a:	f107 050b 	add.w	r5, r7, #11
    f69e:	4680      	mov	r8, r0
    f6a0:	f7ff ffdc 	bl	f65c <__malloc_lock>
    f6a4:	2d16      	cmp	r5, #22
    f6a6:	f854 1c04 	ldr.w	r1, [r4, #-4]
    f6aa:	d85b      	bhi.n	f764 <_realloc_r+0xd8>
    f6ac:	2510      	movs	r5, #16
    f6ae:	462a      	mov	r2, r5
    f6b0:	42af      	cmp	r7, r5
    f6b2:	d85c      	bhi.n	f76e <_realloc_r+0xe2>
    f6b4:	f021 0603 	bic.w	r6, r1, #3
    f6b8:	4296      	cmp	r6, r2
    f6ba:	f1a4 0908 	sub.w	r9, r4, #8
    f6be:	da62      	bge.n	f786 <_realloc_r+0xfa>
    f6c0:	4bbc      	ldr	r3, [pc, #752]	; (f9b4 <_realloc_r+0x328>)
    f6c2:	f8d3 c008 	ldr.w	ip, [r3, #8]
    f6c6:	eb09 0006 	add.w	r0, r9, r6
    f6ca:	4584      	cmp	ip, r0
    f6cc:	f000 8097 	beq.w	f7fe <_realloc_r+0x172>
    f6d0:	f8d0 c004 	ldr.w	ip, [r0, #4]
    f6d4:	f02c 0301 	bic.w	r3, ip, #1
    f6d8:	4403      	add	r3, r0
    f6da:	685b      	ldr	r3, [r3, #4]
    f6dc:	07db      	lsls	r3, r3, #31
    f6de:	d468      	bmi.n	f7b2 <_realloc_r+0x126>
    f6e0:	f02c 0c03 	bic.w	ip, ip, #3
    f6e4:	eb06 030c 	add.w	r3, r6, ip
    f6e8:	4293      	cmp	r3, r2
    f6ea:	da47      	bge.n	f77c <_realloc_r+0xf0>
    f6ec:	07cb      	lsls	r3, r1, #31
    f6ee:	d410      	bmi.n	f712 <_realloc_r+0x86>
    f6f0:	f854 3c08 	ldr.w	r3, [r4, #-8]
    f6f4:	eba9 0a03 	sub.w	sl, r9, r3
    f6f8:	f8da 3004 	ldr.w	r3, [sl, #4]
    f6fc:	f023 0103 	bic.w	r1, r3, #3
    f700:	448c      	add	ip, r1
    f702:	44b4      	add	ip, r6
    f704:	4594      	cmp	ip, r2
    f706:	f280 8111 	bge.w	f92c <_realloc_r+0x2a0>
    f70a:	1873      	adds	r3, r6, r1
    f70c:	4293      	cmp	r3, r2
    f70e:	f280 80e8 	bge.w	f8e2 <_realloc_r+0x256>
    f712:	4639      	mov	r1, r7
    f714:	4640      	mov	r0, r8
    f716:	f7ff fcf1 	bl	f0fc <_malloc_r>
    f71a:	4607      	mov	r7, r0
    f71c:	b1e0      	cbz	r0, f758 <_realloc_r+0xcc>
    f71e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    f722:	f023 0301 	bic.w	r3, r3, #1
    f726:	444b      	add	r3, r9
    f728:	f1a0 0208 	sub.w	r2, r0, #8
    f72c:	4293      	cmp	r3, r2
    f72e:	f000 80d2 	beq.w	f8d6 <_realloc_r+0x24a>
    f732:	1f32      	subs	r2, r6, #4
    f734:	2a24      	cmp	r2, #36	; 0x24
    f736:	f200 80f5 	bhi.w	f924 <_realloc_r+0x298>
    f73a:	2a13      	cmp	r2, #19
    f73c:	f200 80ac 	bhi.w	f898 <_realloc_r+0x20c>
    f740:	4603      	mov	r3, r0
    f742:	4622      	mov	r2, r4
    f744:	6811      	ldr	r1, [r2, #0]
    f746:	6019      	str	r1, [r3, #0]
    f748:	6851      	ldr	r1, [r2, #4]
    f74a:	6059      	str	r1, [r3, #4]
    f74c:	6892      	ldr	r2, [r2, #8]
    f74e:	609a      	str	r2, [r3, #8]
    f750:	4621      	mov	r1, r4
    f752:	4640      	mov	r0, r8
    f754:	f002 f9e6 	bl	11b24 <_free_r>
    f758:	4640      	mov	r0, r8
    f75a:	f7ff ff85 	bl	f668 <__malloc_unlock>
    f75e:	4638      	mov	r0, r7
    f760:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f764:	f025 0507 	bic.w	r5, r5, #7
    f768:	2d00      	cmp	r5, #0
    f76a:	462a      	mov	r2, r5
    f76c:	daa0      	bge.n	f6b0 <_realloc_r+0x24>
    f76e:	230c      	movs	r3, #12
    f770:	f8c8 3000 	str.w	r3, [r8]
    f774:	2700      	movs	r7, #0
    f776:	4638      	mov	r0, r7
    f778:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f77c:	461e      	mov	r6, r3
    f77e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    f782:	60d3      	str	r3, [r2, #12]
    f784:	609a      	str	r2, [r3, #8]
    f786:	1b73      	subs	r3, r6, r5
    f788:	2b0f      	cmp	r3, #15
    f78a:	d822      	bhi.n	f7d2 <_realloc_r+0x146>
    f78c:	f8d9 3004 	ldr.w	r3, [r9, #4]
    f790:	f003 0301 	and.w	r3, r3, #1
    f794:	4333      	orrs	r3, r6
    f796:	444e      	add	r6, r9
    f798:	f8c9 3004 	str.w	r3, [r9, #4]
    f79c:	6873      	ldr	r3, [r6, #4]
    f79e:	f043 0301 	orr.w	r3, r3, #1
    f7a2:	6073      	str	r3, [r6, #4]
    f7a4:	4640      	mov	r0, r8
    f7a6:	4627      	mov	r7, r4
    f7a8:	f7ff ff5e 	bl	f668 <__malloc_unlock>
    f7ac:	4638      	mov	r0, r7
    f7ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f7b2:	07c9      	lsls	r1, r1, #31
    f7b4:	d4ad      	bmi.n	f712 <_realloc_r+0x86>
    f7b6:	f854 3c08 	ldr.w	r3, [r4, #-8]
    f7ba:	eba9 0a03 	sub.w	sl, r9, r3
    f7be:	f8da 1004 	ldr.w	r1, [sl, #4]
    f7c2:	f021 0103 	bic.w	r1, r1, #3
    f7c6:	e7a0      	b.n	f70a <_realloc_r+0x7e>
    f7c8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f7cc:	4611      	mov	r1, r2
    f7ce:	f7ff bc95 	b.w	f0fc <_malloc_r>
    f7d2:	f8d9 2004 	ldr.w	r2, [r9, #4]
    f7d6:	eb09 0105 	add.w	r1, r9, r5
    f7da:	f002 0201 	and.w	r2, r2, #1
    f7de:	444e      	add	r6, r9
    f7e0:	f043 0301 	orr.w	r3, r3, #1
    f7e4:	432a      	orrs	r2, r5
    f7e6:	f8c9 2004 	str.w	r2, [r9, #4]
    f7ea:	604b      	str	r3, [r1, #4]
    f7ec:	6873      	ldr	r3, [r6, #4]
    f7ee:	f043 0301 	orr.w	r3, r3, #1
    f7f2:	3108      	adds	r1, #8
    f7f4:	6073      	str	r3, [r6, #4]
    f7f6:	4640      	mov	r0, r8
    f7f8:	f002 f994 	bl	11b24 <_free_r>
    f7fc:	e7d2      	b.n	f7a4 <_realloc_r+0x118>
    f7fe:	f8dc 0004 	ldr.w	r0, [ip, #4]
    f802:	f020 0b03 	bic.w	fp, r0, #3
    f806:	eb06 0c0b 	add.w	ip, r6, fp
    f80a:	f105 0010 	add.w	r0, r5, #16
    f80e:	4584      	cmp	ip, r0
    f810:	da4d      	bge.n	f8ae <_realloc_r+0x222>
    f812:	07c9      	lsls	r1, r1, #31
    f814:	f53f af7d 	bmi.w	f712 <_realloc_r+0x86>
    f818:	f854 1c08 	ldr.w	r1, [r4, #-8]
    f81c:	eba9 0a01 	sub.w	sl, r9, r1
    f820:	f8da 1004 	ldr.w	r1, [sl, #4]
    f824:	f021 0103 	bic.w	r1, r1, #3
    f828:	448b      	add	fp, r1
    f82a:	44b3      	add	fp, r6
    f82c:	4558      	cmp	r0, fp
    f82e:	f73f af6c 	bgt.w	f70a <_realloc_r+0x7e>
    f832:	4657      	mov	r7, sl
    f834:	f8da 100c 	ldr.w	r1, [sl, #12]
    f838:	f857 0f08 	ldr.w	r0, [r7, #8]!
    f83c:	1f32      	subs	r2, r6, #4
    f83e:	2a24      	cmp	r2, #36	; 0x24
    f840:	60c1      	str	r1, [r0, #12]
    f842:	6088      	str	r0, [r1, #8]
    f844:	f200 80db 	bhi.w	f9fe <_realloc_r+0x372>
    f848:	2a13      	cmp	r2, #19
    f84a:	f240 80d6 	bls.w	f9fa <_realloc_r+0x36e>
    f84e:	6821      	ldr	r1, [r4, #0]
    f850:	f8ca 1008 	str.w	r1, [sl, #8]
    f854:	6861      	ldr	r1, [r4, #4]
    f856:	f8ca 100c 	str.w	r1, [sl, #12]
    f85a:	2a1b      	cmp	r2, #27
    f85c:	f200 80df 	bhi.w	fa1e <_realloc_r+0x392>
    f860:	3408      	adds	r4, #8
    f862:	f10a 0210 	add.w	r2, sl, #16
    f866:	6821      	ldr	r1, [r4, #0]
    f868:	6011      	str	r1, [r2, #0]
    f86a:	6861      	ldr	r1, [r4, #4]
    f86c:	6051      	str	r1, [r2, #4]
    f86e:	68a1      	ldr	r1, [r4, #8]
    f870:	6091      	str	r1, [r2, #8]
    f872:	eb0a 0105 	add.w	r1, sl, r5
    f876:	ebab 0205 	sub.w	r2, fp, r5
    f87a:	f042 0201 	orr.w	r2, r2, #1
    f87e:	6099      	str	r1, [r3, #8]
    f880:	604a      	str	r2, [r1, #4]
    f882:	f8da 3004 	ldr.w	r3, [sl, #4]
    f886:	f003 0301 	and.w	r3, r3, #1
    f88a:	432b      	orrs	r3, r5
    f88c:	4640      	mov	r0, r8
    f88e:	f8ca 3004 	str.w	r3, [sl, #4]
    f892:	f7ff fee9 	bl	f668 <__malloc_unlock>
    f896:	e76e      	b.n	f776 <_realloc_r+0xea>
    f898:	6823      	ldr	r3, [r4, #0]
    f89a:	6003      	str	r3, [r0, #0]
    f89c:	6863      	ldr	r3, [r4, #4]
    f89e:	6043      	str	r3, [r0, #4]
    f8a0:	2a1b      	cmp	r2, #27
    f8a2:	d868      	bhi.n	f976 <_realloc_r+0x2ea>
    f8a4:	f104 0208 	add.w	r2, r4, #8
    f8a8:	f100 0308 	add.w	r3, r0, #8
    f8ac:	e74a      	b.n	f744 <_realloc_r+0xb8>
    f8ae:	eb09 0205 	add.w	r2, r9, r5
    f8b2:	609a      	str	r2, [r3, #8]
    f8b4:	ebac 0305 	sub.w	r3, ip, r5
    f8b8:	f043 0301 	orr.w	r3, r3, #1
    f8bc:	6053      	str	r3, [r2, #4]
    f8be:	f854 3c04 	ldr.w	r3, [r4, #-4]
    f8c2:	f003 0301 	and.w	r3, r3, #1
    f8c6:	432b      	orrs	r3, r5
    f8c8:	4640      	mov	r0, r8
    f8ca:	f844 3c04 	str.w	r3, [r4, #-4]
    f8ce:	f7ff fecb 	bl	f668 <__malloc_unlock>
    f8d2:	4627      	mov	r7, r4
    f8d4:	e74f      	b.n	f776 <_realloc_r+0xea>
    f8d6:	f850 3c04 	ldr.w	r3, [r0, #-4]
    f8da:	f023 0303 	bic.w	r3, r3, #3
    f8de:	441e      	add	r6, r3
    f8e0:	e751      	b.n	f786 <_realloc_r+0xfa>
    f8e2:	4657      	mov	r7, sl
    f8e4:	f8da 100c 	ldr.w	r1, [sl, #12]
    f8e8:	f857 0f08 	ldr.w	r0, [r7, #8]!
    f8ec:	1f32      	subs	r2, r6, #4
    f8ee:	2a24      	cmp	r2, #36	; 0x24
    f8f0:	60c1      	str	r1, [r0, #12]
    f8f2:	6088      	str	r0, [r1, #8]
    f8f4:	d84c      	bhi.n	f990 <_realloc_r+0x304>
    f8f6:	2a13      	cmp	r2, #19
    f8f8:	d948      	bls.n	f98c <_realloc_r+0x300>
    f8fa:	6821      	ldr	r1, [r4, #0]
    f8fc:	f8ca 1008 	str.w	r1, [sl, #8]
    f900:	6861      	ldr	r1, [r4, #4]
    f902:	f8ca 100c 	str.w	r1, [sl, #12]
    f906:	2a1b      	cmp	r2, #27
    f908:	d856      	bhi.n	f9b8 <_realloc_r+0x32c>
    f90a:	3408      	adds	r4, #8
    f90c:	f10a 0210 	add.w	r2, sl, #16
    f910:	461e      	mov	r6, r3
    f912:	6823      	ldr	r3, [r4, #0]
    f914:	6013      	str	r3, [r2, #0]
    f916:	6863      	ldr	r3, [r4, #4]
    f918:	6053      	str	r3, [r2, #4]
    f91a:	68a3      	ldr	r3, [r4, #8]
    f91c:	6093      	str	r3, [r2, #8]
    f91e:	46d1      	mov	r9, sl
    f920:	463c      	mov	r4, r7
    f922:	e730      	b.n	f786 <_realloc_r+0xfa>
    f924:	4621      	mov	r1, r4
    f926:	f001 fac9 	bl	10ebc <memmove>
    f92a:	e711      	b.n	f750 <_realloc_r+0xc4>
    f92c:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
    f930:	4657      	mov	r7, sl
    f932:	60cb      	str	r3, [r1, #12]
    f934:	6099      	str	r1, [r3, #8]
    f936:	f857 1f08 	ldr.w	r1, [r7, #8]!
    f93a:	f8da 300c 	ldr.w	r3, [sl, #12]
    f93e:	60cb      	str	r3, [r1, #12]
    f940:	1f32      	subs	r2, r6, #4
    f942:	2a24      	cmp	r2, #36	; 0x24
    f944:	6099      	str	r1, [r3, #8]
    f946:	d82d      	bhi.n	f9a4 <_realloc_r+0x318>
    f948:	2a13      	cmp	r2, #19
    f94a:	d929      	bls.n	f9a0 <_realloc_r+0x314>
    f94c:	6823      	ldr	r3, [r4, #0]
    f94e:	f8ca 3008 	str.w	r3, [sl, #8]
    f952:	6863      	ldr	r3, [r4, #4]
    f954:	f8ca 300c 	str.w	r3, [sl, #12]
    f958:	2a1b      	cmp	r2, #27
    f95a:	d842      	bhi.n	f9e2 <_realloc_r+0x356>
    f95c:	3408      	adds	r4, #8
    f95e:	f10a 0310 	add.w	r3, sl, #16
    f962:	6822      	ldr	r2, [r4, #0]
    f964:	601a      	str	r2, [r3, #0]
    f966:	6862      	ldr	r2, [r4, #4]
    f968:	605a      	str	r2, [r3, #4]
    f96a:	68a2      	ldr	r2, [r4, #8]
    f96c:	609a      	str	r2, [r3, #8]
    f96e:	4666      	mov	r6, ip
    f970:	46d1      	mov	r9, sl
    f972:	463c      	mov	r4, r7
    f974:	e707      	b.n	f786 <_realloc_r+0xfa>
    f976:	68a3      	ldr	r3, [r4, #8]
    f978:	6083      	str	r3, [r0, #8]
    f97a:	68e3      	ldr	r3, [r4, #12]
    f97c:	60c3      	str	r3, [r0, #12]
    f97e:	2a24      	cmp	r2, #36	; 0x24
    f980:	d026      	beq.n	f9d0 <_realloc_r+0x344>
    f982:	f104 0210 	add.w	r2, r4, #16
    f986:	f100 0310 	add.w	r3, r0, #16
    f98a:	e6db      	b.n	f744 <_realloc_r+0xb8>
    f98c:	463a      	mov	r2, r7
    f98e:	e7bf      	b.n	f910 <_realloc_r+0x284>
    f990:	4621      	mov	r1, r4
    f992:	4638      	mov	r0, r7
    f994:	461e      	mov	r6, r3
    f996:	46d1      	mov	r9, sl
    f998:	f001 fa90 	bl	10ebc <memmove>
    f99c:	463c      	mov	r4, r7
    f99e:	e6f2      	b.n	f786 <_realloc_r+0xfa>
    f9a0:	463b      	mov	r3, r7
    f9a2:	e7de      	b.n	f962 <_realloc_r+0x2d6>
    f9a4:	4621      	mov	r1, r4
    f9a6:	4638      	mov	r0, r7
    f9a8:	4666      	mov	r6, ip
    f9aa:	46d1      	mov	r9, sl
    f9ac:	f001 fa86 	bl	10ebc <memmove>
    f9b0:	463c      	mov	r4, r7
    f9b2:	e6e8      	b.n	f786 <_realloc_r+0xfa>
    f9b4:	2000c2d8 	.word	0x2000c2d8
    f9b8:	68a1      	ldr	r1, [r4, #8]
    f9ba:	f8ca 1010 	str.w	r1, [sl, #16]
    f9be:	68e1      	ldr	r1, [r4, #12]
    f9c0:	f8ca 1014 	str.w	r1, [sl, #20]
    f9c4:	2a24      	cmp	r2, #36	; 0x24
    f9c6:	d020      	beq.n	fa0a <_realloc_r+0x37e>
    f9c8:	3410      	adds	r4, #16
    f9ca:	f10a 0218 	add.w	r2, sl, #24
    f9ce:	e79f      	b.n	f910 <_realloc_r+0x284>
    f9d0:	6923      	ldr	r3, [r4, #16]
    f9d2:	6103      	str	r3, [r0, #16]
    f9d4:	6961      	ldr	r1, [r4, #20]
    f9d6:	6141      	str	r1, [r0, #20]
    f9d8:	f104 0218 	add.w	r2, r4, #24
    f9dc:	f100 0318 	add.w	r3, r0, #24
    f9e0:	e6b0      	b.n	f744 <_realloc_r+0xb8>
    f9e2:	68a3      	ldr	r3, [r4, #8]
    f9e4:	f8ca 3010 	str.w	r3, [sl, #16]
    f9e8:	68e3      	ldr	r3, [r4, #12]
    f9ea:	f8ca 3014 	str.w	r3, [sl, #20]
    f9ee:	2a24      	cmp	r2, #36	; 0x24
    f9f0:	d021      	beq.n	fa36 <_realloc_r+0x3aa>
    f9f2:	3410      	adds	r4, #16
    f9f4:	f10a 0318 	add.w	r3, sl, #24
    f9f8:	e7b3      	b.n	f962 <_realloc_r+0x2d6>
    f9fa:	463a      	mov	r2, r7
    f9fc:	e733      	b.n	f866 <_realloc_r+0x1da>
    f9fe:	4621      	mov	r1, r4
    fa00:	4638      	mov	r0, r7
    fa02:	f001 fa5b 	bl	10ebc <memmove>
    fa06:	4b16      	ldr	r3, [pc, #88]	; (fa60 <_realloc_r+0x3d4>)
    fa08:	e733      	b.n	f872 <_realloc_r+0x1e6>
    fa0a:	6922      	ldr	r2, [r4, #16]
    fa0c:	f8ca 2018 	str.w	r2, [sl, #24]
    fa10:	6962      	ldr	r2, [r4, #20]
    fa12:	f8ca 201c 	str.w	r2, [sl, #28]
    fa16:	3418      	adds	r4, #24
    fa18:	f10a 0220 	add.w	r2, sl, #32
    fa1c:	e778      	b.n	f910 <_realloc_r+0x284>
    fa1e:	68a1      	ldr	r1, [r4, #8]
    fa20:	f8ca 1010 	str.w	r1, [sl, #16]
    fa24:	68e1      	ldr	r1, [r4, #12]
    fa26:	f8ca 1014 	str.w	r1, [sl, #20]
    fa2a:	2a24      	cmp	r2, #36	; 0x24
    fa2c:	d00d      	beq.n	fa4a <_realloc_r+0x3be>
    fa2e:	3410      	adds	r4, #16
    fa30:	f10a 0218 	add.w	r2, sl, #24
    fa34:	e717      	b.n	f866 <_realloc_r+0x1da>
    fa36:	6923      	ldr	r3, [r4, #16]
    fa38:	f8ca 3018 	str.w	r3, [sl, #24]
    fa3c:	6963      	ldr	r3, [r4, #20]
    fa3e:	f8ca 301c 	str.w	r3, [sl, #28]
    fa42:	3418      	adds	r4, #24
    fa44:	f10a 0320 	add.w	r3, sl, #32
    fa48:	e78b      	b.n	f962 <_realloc_r+0x2d6>
    fa4a:	6922      	ldr	r2, [r4, #16]
    fa4c:	f8ca 2018 	str.w	r2, [sl, #24]
    fa50:	6962      	ldr	r2, [r4, #20]
    fa52:	f8ca 201c 	str.w	r2, [sl, #28]
    fa56:	3418      	adds	r4, #24
    fa58:	f10a 0220 	add.w	r2, sl, #32
    fa5c:	e703      	b.n	f866 <_realloc_r+0x1da>
    fa5e:	bf00      	nop
    fa60:	2000c2d8 	.word	0x2000c2d8
    fa64:	00000000 	.word	0x00000000

0000fa68 <_strtod_l>:
    fa68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fa6c:	ed2d 8b10 	vpush	{d8-d15}
    fa70:	b097      	sub	sp, #92	; 0x5c
    fa72:	468a      	mov	sl, r1
    fa74:	2100      	movs	r1, #0
    fa76:	9207      	str	r2, [sp, #28]
    fa78:	9112      	str	r1, [sp, #72]	; 0x48
    fa7a:	2200      	movs	r2, #0
    fa7c:	2100      	movs	r1, #0
    fa7e:	e9cd 1204 	strd	r1, r2, [sp, #16]
    fa82:	4680      	mov	r8, r0
    fa84:	4651      	mov	r1, sl
    fa86:	9111      	str	r1, [sp, #68]	; 0x44
    fa88:	460f      	mov	r7, r1
    fa8a:	f811 2b01 	ldrb.w	r2, [r1], #1
    fa8e:	2a2d      	cmp	r2, #45	; 0x2d
    fa90:	d85e      	bhi.n	fb50 <_strtod_l+0xe8>
    fa92:	a001      	add	r0, pc, #4	; (adr r0, fa98 <_strtod_l+0x30>)
    fa94:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
    fa98:	0000fc39 	.word	0x0000fc39
    fa9c:	0000fb51 	.word	0x0000fb51
    faa0:	0000fb51 	.word	0x0000fb51
    faa4:	0000fb51 	.word	0x0000fb51
    faa8:	0000fb51 	.word	0x0000fb51
    faac:	0000fb51 	.word	0x0000fb51
    fab0:	0000fb51 	.word	0x0000fb51
    fab4:	0000fb51 	.word	0x0000fb51
    fab8:	0000fb51 	.word	0x0000fb51
    fabc:	0000fa87 	.word	0x0000fa87
    fac0:	0000fa87 	.word	0x0000fa87
    fac4:	0000fa87 	.word	0x0000fa87
    fac8:	0000fa87 	.word	0x0000fa87
    facc:	0000fa87 	.word	0x0000fa87
    fad0:	0000fb51 	.word	0x0000fb51
    fad4:	0000fb51 	.word	0x0000fb51
    fad8:	0000fb51 	.word	0x0000fb51
    fadc:	0000fb51 	.word	0x0000fb51
    fae0:	0000fb51 	.word	0x0000fb51
    fae4:	0000fb51 	.word	0x0000fb51
    fae8:	0000fb51 	.word	0x0000fb51
    faec:	0000fb51 	.word	0x0000fb51
    faf0:	0000fb51 	.word	0x0000fb51
    faf4:	0000fb51 	.word	0x0000fb51
    faf8:	0000fb51 	.word	0x0000fb51
    fafc:	0000fb51 	.word	0x0000fb51
    fb00:	0000fb51 	.word	0x0000fb51
    fb04:	0000fb51 	.word	0x0000fb51
    fb08:	0000fb51 	.word	0x0000fb51
    fb0c:	0000fb51 	.word	0x0000fb51
    fb10:	0000fb51 	.word	0x0000fb51
    fb14:	0000fb51 	.word	0x0000fb51
    fb18:	0000fa87 	.word	0x0000fa87
    fb1c:	0000fb51 	.word	0x0000fb51
    fb20:	0000fb51 	.word	0x0000fb51
    fb24:	0000fb51 	.word	0x0000fb51
    fb28:	0000fb51 	.word	0x0000fb51
    fb2c:	0000fb51 	.word	0x0000fb51
    fb30:	0000fb51 	.word	0x0000fb51
    fb34:	0000fb51 	.word	0x0000fb51
    fb38:	0000fb51 	.word	0x0000fb51
    fb3c:	0000fb51 	.word	0x0000fb51
    fb40:	0000fb51 	.word	0x0000fb51
    fb44:	00010273 	.word	0x00010273
    fb48:	0000fb51 	.word	0x0000fb51
    fb4c:	0001025f 	.word	0x0001025f
    fb50:	2100      	movs	r1, #0
    fb52:	9109      	str	r1, [sp, #36]	; 0x24
    fb54:	2a30      	cmp	r2, #48	; 0x30
    fb56:	d07d      	beq.n	fc54 <_strtod_l+0x1ec>
    fb58:	2300      	movs	r3, #0
    fb5a:	9308      	str	r3, [sp, #32]
    fb5c:	2a2f      	cmp	r2, #47	; 0x2f
    fb5e:	4614      	mov	r4, r2
    fb60:	f240 84cd 	bls.w	104fe <_strtod_l+0xa96>
    fb64:	f04f 0900 	mov.w	r9, #0
    fb68:	4638      	mov	r0, r7
    fb6a:	464e      	mov	r6, r9
    fb6c:	464d      	mov	r5, r9
    fb6e:	e012      	b.n	fb96 <_strtod_l+0x12e>
    fb70:	3001      	adds	r0, #1
    fb72:	2d08      	cmp	r5, #8
    fb74:	9011      	str	r0, [sp, #68]	; 0x44
    fb76:	bfc8      	it	gt
    fb78:	eb09 0989 	addgt.w	r9, r9, r9, lsl #2
    fb7c:	7804      	ldrb	r4, [r0, #0]
    fb7e:	bfc6      	itte	gt
    fb80:	eb02 0249 	addgt.w	r2, r2, r9, lsl #1
    fb84:	f1a2 0930 	subgt.w	r9, r2, #48	; 0x30
    fb88:	f1a3 0630 	suble.w	r6, r3, #48	; 0x30
    fb8c:	2c2f      	cmp	r4, #47	; 0x2f
    fb8e:	f105 0501 	add.w	r5, r5, #1
    fb92:	4622      	mov	r2, r4
    fb94:	dd6f      	ble.n	fc76 <_strtod_l+0x20e>
    fb96:	eb06 0386 	add.w	r3, r6, r6, lsl #2
    fb9a:	2c39      	cmp	r4, #57	; 0x39
    fb9c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    fba0:	dde6      	ble.n	fb70 <_strtod_l+0x108>
    fba2:	499f      	ldr	r1, [pc, #636]	; (fe20 <_strtod_l+0x3b8>)
    fba4:	2201      	movs	r2, #1
    fba6:	f001 fb35 	bl	11214 <strncmp>
    fbaa:	2800      	cmp	r0, #0
    fbac:	d137      	bne.n	fc1e <_strtod_l+0x1b6>
    fbae:	9b11      	ldr	r3, [sp, #68]	; 0x44
    fbb0:	461a      	mov	r2, r3
    fbb2:	3301      	adds	r3, #1
    fbb4:	9311      	str	r3, [sp, #68]	; 0x44
    fbb6:	7854      	ldrb	r4, [r2, #1]
    fbb8:	2d00      	cmp	r5, #0
    fbba:	f040 8543 	bne.w	10644 <_strtod_l+0xbdc>
    fbbe:	2c30      	cmp	r4, #48	; 0x30
    fbc0:	f040 8524 	bne.w	1060c <_strtod_l+0xba4>
    fbc4:	f1c3 0201 	rsb	r2, r3, #1
    fbc8:	1898      	adds	r0, r3, r2
    fbca:	3301      	adds	r3, #1
    fbcc:	9311      	str	r3, [sp, #68]	; 0x44
    fbce:	781c      	ldrb	r4, [r3, #0]
    fbd0:	2c30      	cmp	r4, #48	; 0x30
    fbd2:	d0f9      	beq.n	fbc8 <_strtod_l+0x160>
    fbd4:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
    fbd8:	2b08      	cmp	r3, #8
    fbda:	f200 8301 	bhi.w	101e0 <_strtod_l+0x778>
    fbde:	9f11      	ldr	r7, [sp, #68]	; 0x44
    fbe0:	1c43      	adds	r3, r0, #1
    fbe2:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
    fbe6:	930b      	str	r3, [sp, #44]	; 0x2c
    fbe8:	2501      	movs	r5, #1
    fbea:	46bc      	mov	ip, r7
    fbec:	f04f 0e00 	mov.w	lr, #0
    fbf0:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    fbf4:	eb0b 0646 	add.w	r6, fp, r6, lsl #1
    fbf8:	2000      	movs	r0, #0
    fbfa:	f10c 0301 	add.w	r3, ip, #1
    fbfe:	9311      	str	r3, [sp, #68]	; 0x44
    fc00:	f89c 4001 	ldrb.w	r4, [ip, #1]
    fc04:	f1a4 0130 	sub.w	r1, r4, #48	; 0x30
    fc08:	2909      	cmp	r1, #9
    fc0a:	f200 82bb 	bhi.w	10184 <_strtod_l+0x71c>
    fc0e:	3001      	adds	r0, #1
    fc10:	468b      	mov	fp, r1
    fc12:	2900      	cmp	r1, #0
    fc14:	f040 844f 	bne.w	104b6 <_strtod_l+0xa4e>
    fc18:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
    fc1c:	e7ed      	b.n	fbfa <_strtod_l+0x192>
    fc1e:	2000      	movs	r0, #0
    fc20:	2c65      	cmp	r4, #101	; 0x65
    fc22:	46ae      	mov	lr, r5
    fc24:	900b      	str	r0, [sp, #44]	; 0x2c
    fc26:	4684      	mov	ip, r0
    fc28:	d001      	beq.n	fc2e <_strtod_l+0x1c6>
    fc2a:	2c45      	cmp	r4, #69	; 0x45
    fc2c:	d130      	bne.n	fc90 <_strtod_l+0x228>
    fc2e:	2d00      	cmp	r5, #0
    fc30:	d16b      	bne.n	fd0a <_strtod_l+0x2a2>
    fc32:	9b08      	ldr	r3, [sp, #32]
    fc34:	4303      	orrs	r3, r0
    fc36:	d167      	bne.n	fd08 <_strtod_l+0x2a0>
    fc38:	9b07      	ldr	r3, [sp, #28]
    fc3a:	ed9f 8b77 	vldr	d8, [pc, #476]	; fe18 <_strtod_l+0x3b0>
    fc3e:	b113      	cbz	r3, fc46 <_strtod_l+0x1de>
    fc40:	9b07      	ldr	r3, [sp, #28]
    fc42:	f8c3 a000 	str.w	sl, [r3]
    fc46:	eeb0 0b48 	vmov.f64	d0, d8
    fc4a:	b017      	add	sp, #92	; 0x5c
    fc4c:	ecbd 8b10 	vpop	{d8-d15}
    fc50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fc54:	787a      	ldrb	r2, [r7, #1]
    fc56:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    fc5a:	2a58      	cmp	r2, #88	; 0x58
    fc5c:	f000 840c 	beq.w	10478 <_strtod_l+0xa10>
    fc60:	3701      	adds	r7, #1
    fc62:	9711      	str	r7, [sp, #68]	; 0x44
    fc64:	783a      	ldrb	r2, [r7, #0]
    fc66:	2a30      	cmp	r2, #48	; 0x30
    fc68:	d0fa      	beq.n	fc60 <_strtod_l+0x1f8>
    fc6a:	2a00      	cmp	r2, #0
    fc6c:	f000 80b7 	beq.w	fdde <_strtod_l+0x376>
    fc70:	2301      	movs	r3, #1
    fc72:	9308      	str	r3, [sp, #32]
    fc74:	e772      	b.n	fb5c <_strtod_l+0xf4>
    fc76:	496a      	ldr	r1, [pc, #424]	; (fe20 <_strtod_l+0x3b8>)
    fc78:	2201      	movs	r2, #1
    fc7a:	f001 facb 	bl	11214 <strncmp>
    fc7e:	2800      	cmp	r0, #0
    fc80:	f000 80c0 	beq.w	fe04 <_strtod_l+0x39c>
    fc84:	46ae      	mov	lr, r5
    fc86:	f04f 0c00 	mov.w	ip, #0
    fc8a:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
    fc8e:	4660      	mov	r0, ip
    fc90:	f04f 0b00 	mov.w	fp, #0
    fc94:	2d00      	cmp	r5, #0
    fc96:	d07e      	beq.n	fd96 <_strtod_l+0x32e>
    fc98:	ee07 6a90 	vmov	s15, r6
    fc9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fc9e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    fca2:	ebab 0303 	sub.w	r3, fp, r3
    fca6:	f1be 0f00 	cmp.w	lr, #0
    fcaa:	bf08      	it	eq
    fcac:	46ae      	moveq	lr, r5
    fcae:	2d10      	cmp	r5, #16
    fcb0:	930a      	str	r3, [sp, #40]	; 0x28
    fcb2:	462b      	mov	r3, r5
    fcb4:	bfa8      	it	ge
    fcb6:	2310      	movge	r3, #16
    fcb8:	2d09      	cmp	r5, #9
    fcba:	ed8d 7b04 	vstr	d7, [sp, #16]
    fcbe:	dd0c      	ble.n	fcda <_strtod_l+0x272>
    fcc0:	4a58      	ldr	r2, [pc, #352]	; (fe24 <_strtod_l+0x3bc>)
    fcc2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    fcc6:	ed12 5b12 	vldr	d5, [r2, #-72]	; 0xffffffb8
    fcca:	ee06 9a90 	vmov	s13, r9
    fcce:	eeb8 6b66 	vcvt.f64.u32	d6, s13
    fcd2:	eea7 6b05 	vfma.f64	d6, d7, d5
    fcd6:	ed8d 6b04 	vstr	d6, [sp, #16]
    fcda:	2d0f      	cmp	r5, #15
    fcdc:	f300 80a8 	bgt.w	fe30 <_strtod_l+0x3c8>
    fce0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    fce2:	2a00      	cmp	r2, #0
    fce4:	f000 83e4 	beq.w	104b0 <_strtod_l+0xa48>
    fce8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    fcea:	f340 833c 	ble.w	10366 <_strtod_l+0x8fe>
    fcee:	2a16      	cmp	r2, #22
    fcf0:	f340 8498 	ble.w	10624 <_strtod_l+0xbbc>
    fcf4:	990a      	ldr	r1, [sp, #40]	; 0x28
    fcf6:	f1c5 0225 	rsb	r2, r5, #37	; 0x25
    fcfa:	428a      	cmp	r2, r1
    fcfc:	f280 84a6 	bge.w	1064c <_strtod_l+0xbe4>
    fd00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    fd02:	1aeb      	subs	r3, r5, r3
    fd04:	4413      	add	r3, r2
    fd06:	e099      	b.n	fe3c <_strtod_l+0x3d4>
    fd08:	2500      	movs	r5, #0
    fd0a:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
    fd0e:	f10a 0301 	add.w	r3, sl, #1
    fd12:	9311      	str	r3, [sp, #68]	; 0x44
    fd14:	f89a 4001 	ldrb.w	r4, [sl, #1]
    fd18:	2c2b      	cmp	r4, #43	; 0x2b
    fd1a:	f000 825e 	beq.w	101da <_strtod_l+0x772>
    fd1e:	2c2d      	cmp	r4, #45	; 0x2d
    fd20:	f000 81f7 	beq.w	10112 <_strtod_l+0x6aa>
    fd24:	2300      	movs	r3, #0
    fd26:	930a      	str	r3, [sp, #40]	; 0x28
    fd28:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    fd2c:	2b09      	cmp	r3, #9
    fd2e:	f200 81eb 	bhi.w	10108 <_strtod_l+0x6a0>
    fd32:	2c30      	cmp	r4, #48	; 0x30
    fd34:	d105      	bne.n	fd42 <_strtod_l+0x2da>
    fd36:	9b11      	ldr	r3, [sp, #68]	; 0x44
    fd38:	3301      	adds	r3, #1
    fd3a:	9311      	str	r3, [sp, #68]	; 0x44
    fd3c:	781c      	ldrb	r4, [r3, #0]
    fd3e:	2c30      	cmp	r4, #48	; 0x30
    fd40:	d0fa      	beq.n	fd38 <_strtod_l+0x2d0>
    fd42:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
    fd46:	2b08      	cmp	r3, #8
    fd48:	d8a2      	bhi.n	fc90 <_strtod_l+0x228>
    fd4a:	9a11      	ldr	r2, [sp, #68]	; 0x44
    fd4c:	920c      	str	r2, [sp, #48]	; 0x30
    fd4e:	1c53      	adds	r3, r2, #1
    fd50:	9311      	str	r3, [sp, #68]	; 0x44
    fd52:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
    fd56:	7854      	ldrb	r4, [r2, #1]
    fd58:	2c2f      	cmp	r4, #47	; 0x2f
    fd5a:	dc07      	bgt.n	fd6c <_strtod_l+0x304>
    fd5c:	e3de      	b.n	1051c <_strtod_l+0xab4>
    fd5e:	3301      	adds	r3, #1
    fd60:	9311      	str	r3, [sp, #68]	; 0x44
    fd62:	784c      	ldrb	r4, [r1, #1]
    fd64:	2c2f      	cmp	r4, #47	; 0x2f
    fd66:	f1a2 0b30 	sub.w	fp, r2, #48	; 0x30
    fd6a:	dd06      	ble.n	fd7a <_strtod_l+0x312>
    fd6c:	eb0b 028b 	add.w	r2, fp, fp, lsl #2
    fd70:	2c39      	cmp	r4, #57	; 0x39
    fd72:	4619      	mov	r1, r3
    fd74:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    fd78:	ddf1      	ble.n	fd5e <_strtod_l+0x2f6>
    fd7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    fd7c:	1a9b      	subs	r3, r3, r2
    fd7e:	2b08      	cmp	r3, #8
    fd80:	f340 83cc 	ble.w	1051c <_strtod_l+0xab4>
    fd84:	f644 6b1f 	movw	fp, #19999	; 0x4e1f
    fd88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fd8a:	2b00      	cmp	r3, #0
    fd8c:	d082      	beq.n	fc94 <_strtod_l+0x22c>
    fd8e:	f1cb 0b00 	rsb	fp, fp, #0
    fd92:	2d00      	cmp	r5, #0
    fd94:	d180      	bne.n	fc98 <_strtod_l+0x230>
    fd96:	9b08      	ldr	r3, [sp, #32]
    fd98:	4303      	orrs	r3, r0
    fd9a:	d120      	bne.n	fdde <_strtod_l+0x376>
    fd9c:	f1bc 0f00 	cmp.w	ip, #0
    fda0:	f47f af4a 	bne.w	fc38 <_strtod_l+0x1d0>
    fda4:	2c69      	cmp	r4, #105	; 0x69
    fda6:	f000 83cf 	beq.w	10548 <_strtod_l+0xae0>
    fdaa:	f300 82f3 	bgt.w	10394 <_strtod_l+0x92c>
    fdae:	2c49      	cmp	r4, #73	; 0x49
    fdb0:	f000 83ca 	beq.w	10548 <_strtod_l+0xae0>
    fdb4:	2c4e      	cmp	r4, #78	; 0x4e
    fdb6:	f47f af3f 	bne.w	fc38 <_strtod_l+0x1d0>
    fdba:	491b      	ldr	r1, [pc, #108]	; (fe28 <_strtod_l+0x3c0>)
    fdbc:	a811      	add	r0, sp, #68	; 0x44
    fdbe:	f002 fad3 	bl	12368 <__match>
    fdc2:	2800      	cmp	r0, #0
    fdc4:	f43f af38 	beq.w	fc38 <_strtod_l+0x1d0>
    fdc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    fdca:	781b      	ldrb	r3, [r3, #0]
    fdcc:	2b28      	cmp	r3, #40	; 0x28
    fdce:	f000 84f2 	beq.w	107b6 <_strtod_l+0xd4e>
    fdd2:	4816      	ldr	r0, [pc, #88]	; (fe2c <_strtod_l+0x3c4>)
    fdd4:	f001 fe04 	bl	119e0 <nan>
    fdd8:	eeb0 8b40 	vmov.f64	d8, d0
    fddc:	e001      	b.n	fde2 <_strtod_l+0x37a>
    fdde:	ed9f 8b0e 	vldr	d8, [pc, #56]	; fe18 <_strtod_l+0x3b0>
    fde2:	9a07      	ldr	r2, [sp, #28]
    fde4:	b10a      	cbz	r2, fdea <_strtod_l+0x382>
    fde6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    fde8:	6013      	str	r3, [r2, #0]
    fdea:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fdec:	2b00      	cmp	r3, #0
    fdee:	f43f af2a 	beq.w	fc46 <_strtod_l+0x1de>
    fdf2:	eeb1 8b48 	vneg.f64	d8, d8
    fdf6:	eeb0 0b48 	vmov.f64	d0, d8
    fdfa:	b017      	add	sp, #92	; 0x5c
    fdfc:	ecbd 8b10 	vpop	{d8-d15}
    fe00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fe04:	9b11      	ldr	r3, [sp, #68]	; 0x44
    fe06:	900b      	str	r0, [sp, #44]	; 0x2c
    fe08:	1c5a      	adds	r2, r3, #1
    fe0a:	9211      	str	r2, [sp, #68]	; 0x44
    fe0c:	785c      	ldrb	r4, [r3, #1]
    fe0e:	46ae      	mov	lr, r5
    fe10:	e6f8      	b.n	fc04 <_strtod_l+0x19c>
    fe12:	bf00      	nop
    fe14:	f3af 8000 	nop.w
	...
    fe20:	2000b3d4 	.word	0x2000b3d4
    fe24:	200002a8 	.word	0x200002a8
    fe28:	2000382c 	.word	0x2000382c
    fe2c:	2000b0f8 	.word	0x2000b0f8
    fe30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    fe32:	1aeb      	subs	r3, r5, r3
    fe34:	4413      	add	r3, r2
    fe36:	2b00      	cmp	r3, #0
    fe38:	f340 82b0 	ble.w	1039c <_strtod_l+0x934>
    fe3c:	f013 010f 	ands.w	r1, r3, #15
    fe40:	d00a      	beq.n	fe58 <_strtod_l+0x3f0>
    fe42:	4ac3      	ldr	r2, [pc, #780]	; (10150 <_strtod_l+0x6e8>)
    fe44:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    fe48:	ed9d 6b04 	vldr	d6, [sp, #16]
    fe4c:	ed92 7b00 	vldr	d7, [r2]
    fe50:	ee27 7b06 	vmul.f64	d7, d7, d6
    fe54:	ed8d 7b04 	vstr	d7, [sp, #16]
    fe58:	f033 020f 	bics.w	r2, r3, #15
    fe5c:	f040 8238 	bne.w	102d0 <_strtod_l+0x868>
    fe60:	2300      	movs	r3, #0
    fe62:	9308      	str	r3, [sp, #32]
    fe64:	9600      	str	r6, [sp, #0]
    fe66:	462b      	mov	r3, r5
    fe68:	4672      	mov	r2, lr
    fe6a:	4639      	mov	r1, r7
    fe6c:	4640      	mov	r0, r8
    fe6e:	f002 fc07 	bl	12680 <__s2b>
    fe72:	4681      	mov	r9, r0
    fe74:	2800      	cmp	r0, #0
    fe76:	f000 82e1 	beq.w	1043c <_strtod_l+0x9d4>
    fe7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fe7c:	eba3 0b0b 	sub.w	fp, r3, fp
    fe80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fe82:	ed9f eba9 	vldr	d14, [pc, #676]	; 10128 <_strtod_l+0x6c0>
    fe86:	2b00      	cmp	r3, #0
    fe88:	ed9f cba9 	vldr	d12, [pc, #676]	; 10130 <_strtod_l+0x6c8>
    fe8c:	ed9f dbaa 	vldr	d13, [pc, #680]	; 10138 <_strtod_l+0x6d0>
    fe90:	ed9f bbab 	vldr	d11, [pc, #684]	; 10140 <_strtod_l+0x6d8>
    fe94:	bfb4      	ite	lt
    fe96:	465a      	movlt	r2, fp
    fe98:	2200      	movge	r2, #0
    fe9a:	f04f 0a00 	mov.w	sl, #0
    fe9e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    fea2:	920b      	str	r2, [sp, #44]	; 0x2c
    fea4:	930c      	str	r3, [sp, #48]	; 0x30
    fea6:	4654      	mov	r4, sl
    fea8:	f8d9 1004 	ldr.w	r1, [r9, #4]
    feac:	4640      	mov	r0, r8
    feae:	f002 fb65 	bl	1257c <_Balloc>
    feb2:	4606      	mov	r6, r0
    feb4:	2800      	cmp	r0, #0
    feb6:	f000 810e 	beq.w	100d6 <_strtod_l+0x66e>
    feba:	f8d9 2010 	ldr.w	r2, [r9, #16]
    febe:	ed9d 8b04 	vldr	d8, [sp, #16]
    fec2:	3202      	adds	r2, #2
    fec4:	0092      	lsls	r2, r2, #2
    fec6:	f109 010c 	add.w	r1, r9, #12
    feca:	300c      	adds	r0, #12
    fecc:	f7fd fb40 	bl	d550 <memcpy>
    fed0:	eeb0 0b48 	vmov.f64	d0, d8
    fed4:	aa14      	add	r2, sp, #80	; 0x50
    fed6:	a913      	add	r1, sp, #76	; 0x4c
    fed8:	4640      	mov	r0, r8
    feda:	f002 ff8d 	bl	12df8 <__d2b>
    fede:	9012      	str	r0, [sp, #72]	; 0x48
    fee0:	2800      	cmp	r0, #0
    fee2:	f000 80e4 	beq.w	100ae <_strtod_l+0x646>
    fee6:	2101      	movs	r1, #1
    fee8:	4640      	mov	r0, r8
    feea:	f002 fc71 	bl	127d0 <__i2b>
    feee:	4604      	mov	r4, r0
    fef0:	2800      	cmp	r0, #0
    fef2:	f000 80f0 	beq.w	100d6 <_strtod_l+0x66e>
    fef6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    fef8:	2a00      	cmp	r2, #0
    fefa:	f2c0 80de 	blt.w	100ba <_strtod_l+0x652>
    fefe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ff00:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    ff02:	eb02 0b03 	add.w	fp, r2, r3
    ff06:	9b08      	ldr	r3, [sp, #32]
    ff08:	9d14      	ldr	r5, [sp, #80]	; 0x50
    ff0a:	1ad2      	subs	r2, r2, r3
    ff0c:	442a      	add	r2, r5
    ff0e:	4b91      	ldr	r3, [pc, #580]	; (10154 <_strtod_l+0x6ec>)
    ff10:	3a01      	subs	r2, #1
    ff12:	429a      	cmp	r2, r3
    ff14:	f1c5 0536 	rsb	r5, r5, #54	; 0x36
    ff18:	f280 8098 	bge.w	1004c <_strtod_l+0x5e4>
    ff1c:	1a99      	subs	r1, r3, r2
    ff1e:	291f      	cmp	r1, #31
    ff20:	eba5 0501 	sub.w	r5, r5, r1
    ff24:	f300 80e3 	bgt.w	100ee <_strtod_l+0x686>
    ff28:	2201      	movs	r2, #1
    ff2a:	fa02 f301 	lsl.w	r3, r2, r1
    ff2e:	930d      	str	r3, [sp, #52]	; 0x34
    ff30:	2300      	movs	r3, #0
    ff32:	930e      	str	r3, [sp, #56]	; 0x38
    ff34:	442f      	add	r7, r5
    ff36:	9b08      	ldr	r3, [sp, #32]
    ff38:	445d      	add	r5, fp
    ff3a:	45ab      	cmp	fp, r5
    ff3c:	465a      	mov	r2, fp
    ff3e:	441f      	add	r7, r3
    ff40:	bfa8      	it	ge
    ff42:	462a      	movge	r2, r5
    ff44:	42ba      	cmp	r2, r7
    ff46:	bfa8      	it	ge
    ff48:	463a      	movge	r2, r7
    ff4a:	2a00      	cmp	r2, #0
    ff4c:	dd03      	ble.n	ff56 <_strtod_l+0x4ee>
    ff4e:	1aad      	subs	r5, r5, r2
    ff50:	1abf      	subs	r7, r7, r2
    ff52:	ebab 0b02 	sub.w	fp, fp, r2
    ff56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ff58:	2b00      	cmp	r3, #0
    ff5a:	f300 8088 	bgt.w	1006e <_strtod_l+0x606>
    ff5e:	2d00      	cmp	r5, #0
    ff60:	f300 809c 	bgt.w	1009c <_strtod_l+0x634>
    ff64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ff66:	2b00      	cmp	r3, #0
    ff68:	f300 80b7 	bgt.w	100da <_strtod_l+0x672>
    ff6c:	2f00      	cmp	r7, #0
    ff6e:	f300 80a9 	bgt.w	100c4 <_strtod_l+0x65c>
    ff72:	f1bb 0f00 	cmp.w	fp, #0
    ff76:	dd08      	ble.n	ff8a <_strtod_l+0x522>
    ff78:	4621      	mov	r1, r4
    ff7a:	465a      	mov	r2, fp
    ff7c:	4640      	mov	r0, r8
    ff7e:	f002 fd63 	bl	12a48 <__lshift>
    ff82:	4604      	mov	r4, r0
    ff84:	2800      	cmp	r0, #0
    ff86:	f000 80a6 	beq.w	100d6 <_strtod_l+0x66e>
    ff8a:	9912      	ldr	r1, [sp, #72]	; 0x48
    ff8c:	4632      	mov	r2, r6
    ff8e:	4640      	mov	r0, r8
    ff90:	f002 fdf4 	bl	12b7c <__mdiff>
    ff94:	4682      	mov	sl, r0
    ff96:	2800      	cmp	r0, #0
    ff98:	f000 809d 	beq.w	100d6 <_strtod_l+0x66e>
    ff9c:	2300      	movs	r3, #0
    ff9e:	68c5      	ldr	r5, [r0, #12]
    ffa0:	60c3      	str	r3, [r0, #12]
    ffa2:	4621      	mov	r1, r4
    ffa4:	f002 fdc8 	bl	12b38 <__mcmp>
    ffa8:	2800      	cmp	r0, #0
    ffaa:	f2c0 83c7 	blt.w	1073c <_strtod_l+0xcd4>
    ffae:	f000 8361 	beq.w	10674 <_strtod_l+0xc0c>
    ffb2:	4621      	mov	r1, r4
    ffb4:	4650      	mov	r0, sl
    ffb6:	f002 ff89 	bl	12ecc <__ratio>
    ffba:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
    ffbe:	eeb4 0bc7 	vcmpe.f64	d0, d7
    ffc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ffc6:	d846      	bhi.n	10056 <_strtod_l+0x5ee>
    ffc8:	2d00      	cmp	r5, #0
    ffca:	f000 80cb 	beq.w	10164 <_strtod_l+0x6fc>
    ffce:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
    ffd2:	9805      	ldr	r0, [sp, #20]
    ffd4:	4b60      	ldr	r3, [pc, #384]	; (10158 <_strtod_l+0x6f0>)
    ffd6:	2200      	movs	r2, #0
    ffd8:	4960      	ldr	r1, [pc, #384]	; (1015c <_strtod_l+0x6f4>)
    ffda:	f8df c184 	ldr.w	ip, [pc, #388]	; 10160 <_strtod_l+0x6f8>
    ffde:	ea00 0701 	and.w	r7, r0, r1
    ffe2:	4567      	cmp	r7, ip
    ffe4:	f000 80d4 	beq.w	10190 <_strtod_l+0x728>
    ffe8:	9908      	ldr	r1, [sp, #32]
    ffea:	b159      	cbz	r1, 10004 <_strtod_l+0x59c>
    ffec:	f1b7 6fd4 	cmp.w	r7, #111149056	; 0x6a00000
    fff0:	d808      	bhi.n	10004 <_strtod_l+0x59c>
    fff2:	eeb4 9bcb 	vcmpe.f64	d9, d11
    fff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fffa:	f240 8156 	bls.w	102aa <_strtod_l+0x842>
    fffe:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
   10002:	1bcb      	subs	r3, r1, r7
   10004:	eeb0 0b48 	vmov.f64	d0, d8
   10008:	ec43 2b1a 	vmov	d10, r2, r3
   1000c:	f002 fe60 	bl	12cd0 <__ulp>
   10010:	eeaa 8b00 	vfma.f64	d8, d10, d0
   10014:	ed8d 8b04 	vstr	d8, [sp, #16]
   10018:	ee18 3a90 	vmov	r3, s17
   1001c:	9a08      	ldr	r2, [sp, #32]
   1001e:	b922      	cbnz	r2, 1002a <_strtod_l+0x5c2>
   10020:	4a4e      	ldr	r2, [pc, #312]	; (1015c <_strtod_l+0x6f4>)
   10022:	401a      	ands	r2, r3
   10024:	4297      	cmp	r7, r2
   10026:	f000 80e4 	beq.w	101f2 <_strtod_l+0x78a>
   1002a:	9912      	ldr	r1, [sp, #72]	; 0x48
   1002c:	4640      	mov	r0, r8
   1002e:	f002 facb 	bl	125c8 <_Bfree>
   10032:	4631      	mov	r1, r6
   10034:	4640      	mov	r0, r8
   10036:	f002 fac7 	bl	125c8 <_Bfree>
   1003a:	4621      	mov	r1, r4
   1003c:	4640      	mov	r0, r8
   1003e:	f002 fac3 	bl	125c8 <_Bfree>
   10042:	4651      	mov	r1, sl
   10044:	4640      	mov	r0, r8
   10046:	f002 fabf 	bl	125c8 <_Bfree>
   1004a:	e72d      	b.n	fea8 <_strtod_l+0x440>
   1004c:	2301      	movs	r3, #1
   1004e:	2100      	movs	r1, #0
   10050:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
   10054:	e76e      	b.n	ff34 <_strtod_l+0x4cc>
   10056:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
   1005a:	ee20 9b09 	vmul.f64	d9, d0, d9
   1005e:	2d00      	cmp	r5, #0
   10060:	d15f      	bne.n	10122 <_strtod_l+0x6ba>
   10062:	eeb1 7b49 	vneg.f64	d7, d9
   10066:	9805      	ldr	r0, [sp, #20]
   10068:	ec53 2b17 	vmov	r2, r3, d7
   1006c:	e7b4      	b.n	ffd8 <_strtod_l+0x570>
   1006e:	4621      	mov	r1, r4
   10070:	461a      	mov	r2, r3
   10072:	4640      	mov	r0, r8
   10074:	f002 fc88 	bl	12988 <__pow5mult>
   10078:	4604      	mov	r4, r0
   1007a:	b360      	cbz	r0, 100d6 <_strtod_l+0x66e>
   1007c:	4601      	mov	r1, r0
   1007e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   10080:	4640      	mov	r0, r8
   10082:	f002 fbd3 	bl	1282c <__multiply>
   10086:	b330      	cbz	r0, 100d6 <_strtod_l+0x66e>
   10088:	900f      	str	r0, [sp, #60]	; 0x3c
   1008a:	9912      	ldr	r1, [sp, #72]	; 0x48
   1008c:	4640      	mov	r0, r8
   1008e:	f002 fa9b 	bl	125c8 <_Bfree>
   10092:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   10094:	9212      	str	r2, [sp, #72]	; 0x48
   10096:	2d00      	cmp	r5, #0
   10098:	f77f af64 	ble.w	ff64 <_strtod_l+0x4fc>
   1009c:	9912      	ldr	r1, [sp, #72]	; 0x48
   1009e:	462a      	mov	r2, r5
   100a0:	4640      	mov	r0, r8
   100a2:	f002 fcd1 	bl	12a48 <__lshift>
   100a6:	9012      	str	r0, [sp, #72]	; 0x48
   100a8:	2800      	cmp	r0, #0
   100aa:	f47f af5b 	bne.w	ff64 <_strtod_l+0x4fc>
   100ae:	2322      	movs	r3, #34	; 0x22
   100b0:	ed9f 8b25 	vldr	d8, [pc, #148]	; 10148 <_strtod_l+0x6e0>
   100b4:	f8c8 3000 	str.w	r3, [r8]
   100b8:	e0bc      	b.n	10234 <_strtod_l+0x7cc>
   100ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   100bc:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   100c0:	1a9f      	subs	r7, r3, r2
   100c2:	e720      	b.n	ff06 <_strtod_l+0x49e>
   100c4:	4631      	mov	r1, r6
   100c6:	463a      	mov	r2, r7
   100c8:	4640      	mov	r0, r8
   100ca:	f002 fcbd 	bl	12a48 <__lshift>
   100ce:	4606      	mov	r6, r0
   100d0:	2800      	cmp	r0, #0
   100d2:	f47f af4e 	bne.w	ff72 <_strtod_l+0x50a>
   100d6:	9812      	ldr	r0, [sp, #72]	; 0x48
   100d8:	e7e9      	b.n	100ae <_strtod_l+0x646>
   100da:	4631      	mov	r1, r6
   100dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   100de:	4640      	mov	r0, r8
   100e0:	f002 fc52 	bl	12988 <__pow5mult>
   100e4:	4606      	mov	r6, r0
   100e6:	2800      	cmp	r0, #0
   100e8:	f47f af40 	bne.w	ff6c <_strtod_l+0x504>
   100ec:	e7f3      	b.n	100d6 <_strtod_l+0x66e>
   100ee:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
   100f2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   100f6:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
   100fa:	2101      	movs	r1, #1
   100fc:	32e2      	adds	r2, #226	; 0xe2
   100fe:	fa01 f302 	lsl.w	r3, r1, r2
   10102:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
   10106:	e715      	b.n	ff34 <_strtod_l+0x4cc>
   10108:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
   1010c:	f04f 0b00 	mov.w	fp, #0
   10110:	e5c0      	b.n	fc94 <_strtod_l+0x22c>
   10112:	2301      	movs	r3, #1
   10114:	930a      	str	r3, [sp, #40]	; 0x28
   10116:	f10a 0302 	add.w	r3, sl, #2
   1011a:	9311      	str	r3, [sp, #68]	; 0x44
   1011c:	f89a 4002 	ldrb.w	r4, [sl, #2]
   10120:	e602      	b.n	fd28 <_strtod_l+0x2c0>
   10122:	eeb0 7b49 	vmov.f64	d7, d9
   10126:	e79e      	b.n	10066 <_strtod_l+0x5fe>
   10128:	94a03595 	.word	0x94a03595
   1012c:	3fcfffff 	.word	0x3fcfffff
   10130:	94a03595 	.word	0x94a03595
   10134:	3fdfffff 	.word	0x3fdfffff
   10138:	35afe535 	.word	0x35afe535
   1013c:	3fe00000 	.word	0x3fe00000
   10140:	ffc00000 	.word	0xffc00000
   10144:	41dfffff 	.word	0x41dfffff
   10148:	00000000 	.word	0x00000000
   1014c:	7ff00000 	.word	0x7ff00000
   10150:	200002a8 	.word	0x200002a8
   10154:	fffffc02 	.word	0xfffffc02
   10158:	3ff00000 	.word	0x3ff00000
   1015c:	7ff00000 	.word	0x7ff00000
   10160:	7fe00000 	.word	0x7fe00000
   10164:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   10168:	2900      	cmp	r1, #0
   1016a:	f000 8085 	beq.w	10278 <_strtod_l+0x810>
   1016e:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   10172:	2901      	cmp	r1, #1
   10174:	f000 81d8 	beq.w	10528 <_strtod_l+0xac0>
   10178:	4610      	mov	r0, r2
   1017a:	4bb7      	ldr	r3, [pc, #732]	; (10458 <_strtod_l+0x9f0>)
   1017c:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
   10180:	2200      	movs	r2, #0
   10182:	e729      	b.n	ffd8 <_strtod_l+0x570>
   10184:	2c65      	cmp	r4, #101	; 0x65
   10186:	f04f 0c01 	mov.w	ip, #1
   1018a:	f43f adbe 	beq.w	fd0a <_strtod_l+0x2a2>
   1018e:	e54c      	b.n	fc2a <_strtod_l+0x1c2>
   10190:	ec43 2b1a 	vmov	d10, r2, r3
   10194:	f1a0 7354 	sub.w	r3, r0, #55574528	; 0x3500000
   10198:	9305      	str	r3, [sp, #20]
   1019a:	ed9d fb04 	vldr	d15, [sp, #16]
   1019e:	eeb0 0b4f 	vmov.f64	d0, d15
   101a2:	f002 fd95 	bl	12cd0 <__ulp>
   101a6:	49ad      	ldr	r1, [pc, #692]	; (1045c <_strtod_l+0x9f4>)
   101a8:	eeaa fb00 	vfma.f64	d15, d10, d0
   101ac:	ee1f 3a90 	vmov	r3, s31
   101b0:	4aab      	ldr	r2, [pc, #684]	; (10460 <_strtod_l+0x9f8>)
   101b2:	4019      	ands	r1, r3
   101b4:	4291      	cmp	r1, r2
   101b6:	ed8d fb04 	vstr	d15, [sp, #16]
   101ba:	d972      	bls.n	102a2 <_strtod_l+0x83a>
   101bc:	4ba9      	ldr	r3, [pc, #676]	; (10464 <_strtod_l+0x9fc>)
   101be:	ee18 2a90 	vmov	r2, s17
   101c2:	429a      	cmp	r2, r3
   101c4:	d103      	bne.n	101ce <_strtod_l+0x766>
   101c6:	ee18 3a10 	vmov	r3, s16
   101ca:	3301      	adds	r3, #1
   101cc:	d083      	beq.n	100d6 <_strtod_l+0x66e>
   101ce:	4aa5      	ldr	r2, [pc, #660]	; (10464 <_strtod_l+0x9fc>)
   101d0:	f04f 33ff 	mov.w	r3, #4294967295
   101d4:	e9cd 3204 	strd	r3, r2, [sp, #16]
   101d8:	e727      	b.n	1002a <_strtod_l+0x5c2>
   101da:	2300      	movs	r3, #0
   101dc:	930a      	str	r3, [sp, #40]	; 0x28
   101de:	e79a      	b.n	10116 <_strtod_l+0x6ae>
   101e0:	2c65      	cmp	r4, #101	; 0x65
   101e2:	f000 80d0 	beq.w	10386 <_strtod_l+0x91e>
   101e6:	2c45      	cmp	r4, #69	; 0x45
   101e8:	f000 80cd 	beq.w	10386 <_strtod_l+0x91e>
   101ec:	f04f 0c01 	mov.w	ip, #1
   101f0:	e5d1      	b.n	fd96 <_strtod_l+0x32e>
   101f2:	ec51 0b19 	vmov	r0, r1, d9
   101f6:	930d      	str	r3, [sp, #52]	; 0x34
   101f8:	f009 fce8 	bl	19bcc <__aeabi_d2lz>
   101fc:	f009 fcb8 	bl	19b70 <__aeabi_l2d>
   10200:	9b04      	ldr	r3, [sp, #16]
   10202:	431d      	orrs	r5, r3
   10204:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10206:	ec41 0b17 	vmov	d7, r0, r1
   1020a:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1020e:	431d      	orrs	r5, r3
   10210:	ee39 9b47 	vsub.f64	d9, d9, d7
   10214:	f000 80a0 	beq.w	10358 <_strtod_l+0x8f0>
   10218:	eeb4 9bcc 	vcmpe.f64	d9, d12
   1021c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10220:	d405      	bmi.n	1022e <_strtod_l+0x7c6>
   10222:	eeb4 9bcd 	vcmpe.f64	d9, d13
   10226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1022a:	f77f aefe 	ble.w	1002a <_strtod_l+0x5c2>
   1022e:	ed9d 8b04 	vldr	d8, [sp, #16]
   10232:	9812      	ldr	r0, [sp, #72]	; 0x48
   10234:	4601      	mov	r1, r0
   10236:	4640      	mov	r0, r8
   10238:	f002 f9c6 	bl	125c8 <_Bfree>
   1023c:	4631      	mov	r1, r6
   1023e:	4640      	mov	r0, r8
   10240:	f002 f9c2 	bl	125c8 <_Bfree>
   10244:	4621      	mov	r1, r4
   10246:	4640      	mov	r0, r8
   10248:	f002 f9be 	bl	125c8 <_Bfree>
   1024c:	4649      	mov	r1, r9
   1024e:	4640      	mov	r0, r8
   10250:	f002 f9ba 	bl	125c8 <_Bfree>
   10254:	4651      	mov	r1, sl
   10256:	4640      	mov	r0, r8
   10258:	f002 f9b6 	bl	125c8 <_Bfree>
   1025c:	e5c1      	b.n	fde2 <_strtod_l+0x37a>
   1025e:	2201      	movs	r2, #1
   10260:	9209      	str	r2, [sp, #36]	; 0x24
   10262:	1c79      	adds	r1, r7, #1
   10264:	9111      	str	r1, [sp, #68]	; 0x44
   10266:	787a      	ldrb	r2, [r7, #1]
   10268:	2a00      	cmp	r2, #0
   1026a:	f43f ace5 	beq.w	fc38 <_strtod_l+0x1d0>
   1026e:	460f      	mov	r7, r1
   10270:	e470      	b.n	fb54 <_strtod_l+0xec>
   10272:	2200      	movs	r2, #0
   10274:	9209      	str	r2, [sp, #36]	; 0x24
   10276:	e7f4      	b.n	10262 <_strtod_l+0x7fa>
   10278:	f3c2 0313 	ubfx	r3, r2, #0, #20
   1027c:	4610      	mov	r0, r2
   1027e:	2b00      	cmp	r3, #0
   10280:	f47f af7b 	bne.w	1017a <_strtod_l+0x712>
   10284:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   10288:	eeb4 0bc7 	vcmpe.f64	d0, d7
   1028c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10290:	f100 81d3 	bmi.w	1063a <_strtod_l+0xbd2>
   10294:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
   10298:	ee20 9b09 	vmul.f64	d9, d0, d9
   1029c:	eeb1 7b49 	vneg.f64	d7, d9
   102a0:	e6e2      	b.n	10068 <_strtod_l+0x600>
   102a2:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
   102a6:	9305      	str	r3, [sp, #20]
   102a8:	e6b8      	b.n	1001c <_strtod_l+0x5b4>
   102aa:	eebc 9bc9 	vcvt.u32.f64	s18, d9
   102ae:	ee19 3a10 	vmov	r3, s18
   102b2:	2b01      	cmp	r3, #1
   102b4:	bf38      	it	cc
   102b6:	2301      	movcc	r3, #1
   102b8:	ee09 3a10 	vmov	s18, r3
   102bc:	eeb8 9b49 	vcvt.f64.u32	d9, s18
   102c0:	2d00      	cmp	r5, #0
   102c2:	f040 813e 	bne.w	10542 <_strtod_l+0xada>
   102c6:	eeb1 7b49 	vneg.f64	d7, d9
   102ca:	ec53 2b17 	vmov	r2, r3, d7
   102ce:	e696      	b.n	fffe <_strtod_l+0x596>
   102d0:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
   102d4:	f300 80b2 	bgt.w	1043c <_strtod_l+0x9d4>
   102d8:	2a10      	cmp	r2, #16
   102da:	ea4f 1322 	mov.w	r3, r2, asr #4
   102de:	f340 8286 	ble.w	107ee <_strtod_l+0xd86>
   102e2:	4c61      	ldr	r4, [pc, #388]	; (10468 <_strtod_l+0xa00>)
   102e4:	ed9d 7b04 	vldr	d7, [sp, #16]
   102e8:	2000      	movs	r0, #0
   102ea:	4622      	mov	r2, r4
   102ec:	4601      	mov	r1, r0
   102ee:	f013 0f01 	tst.w	r3, #1
   102f2:	f101 0101 	add.w	r1, r1, #1
   102f6:	ea4f 0363 	mov.w	r3, r3, asr #1
   102fa:	d004      	beq.n	10306 <_strtod_l+0x89e>
   102fc:	ed92 6b00 	vldr	d6, [r2]
   10300:	2001      	movs	r0, #1
   10302:	ee27 7b06 	vmul.f64	d7, d7, d6
   10306:	2b01      	cmp	r3, #1
   10308:	f102 0208 	add.w	r2, r2, #8
   1030c:	d1ef      	bne.n	102ee <_strtod_l+0x886>
   1030e:	b108      	cbz	r0, 10314 <_strtod_l+0x8ac>
   10310:	ed8d 7b04 	vstr	d7, [sp, #16]
   10314:	9b05      	ldr	r3, [sp, #20]
   10316:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   1031a:	9305      	str	r3, [sp, #20]
   1031c:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
   10320:	ed9d 6b04 	vldr	d6, [sp, #16]
   10324:	ed94 7b00 	vldr	d7, [r4]
   10328:	4b4c      	ldr	r3, [pc, #304]	; (1045c <_strtod_l+0x9f4>)
   1032a:	ee27 7b06 	vmul.f64	d7, d7, d6
   1032e:	ee17 2a90 	vmov	r2, s15
   10332:	494e      	ldr	r1, [pc, #312]	; (1046c <_strtod_l+0xa04>)
   10334:	4013      	ands	r3, r2
   10336:	428b      	cmp	r3, r1
   10338:	ed8d 7b04 	vstr	d7, [sp, #16]
   1033c:	d87e      	bhi.n	1043c <_strtod_l+0x9d4>
   1033e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   10342:	428b      	cmp	r3, r1
   10344:	f240 81d6 	bls.w	106f4 <_strtod_l+0xc8c>
   10348:	4c46      	ldr	r4, [pc, #280]	; (10464 <_strtod_l+0x9fc>)
   1034a:	f04f 33ff 	mov.w	r3, #4294967295
   1034e:	e9cd 3404 	strd	r3, r4, [sp, #16]
   10352:	2300      	movs	r3, #0
   10354:	9308      	str	r3, [sp, #32]
   10356:	e585      	b.n	fe64 <_strtod_l+0x3fc>
   10358:	eeb4 9bce 	vcmpe.f64	d9, d14
   1035c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10360:	f57f ae63 	bpl.w	1002a <_strtod_l+0x5c2>
   10364:	e763      	b.n	1022e <_strtod_l+0x7c6>
   10366:	3216      	adds	r2, #22
   10368:	f6ff ad62 	blt.w	fe30 <_strtod_l+0x3c8>
   1036c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1036e:	eba3 0b0b 	sub.w	fp, r3, fp
   10372:	4b3f      	ldr	r3, [pc, #252]	; (10470 <_strtod_l+0xa08>)
   10374:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   10378:	ed93 7b00 	vldr	d7, [r3]
   1037c:	ed9d 6b04 	vldr	d6, [sp, #16]
   10380:	ee86 8b07 	vdiv.f64	d8, d6, d7
   10384:	e52d      	b.n	fde2 <_strtod_l+0x37a>
   10386:	f04f 0e00 	mov.w	lr, #0
   1038a:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
   1038e:	f04f 0c01 	mov.w	ip, #1
   10392:	e44e      	b.n	fc32 <_strtod_l+0x1ca>
   10394:	2c6e      	cmp	r4, #110	; 0x6e
   10396:	f43f ad10 	beq.w	fdba <_strtod_l+0x352>
   1039a:	e44d      	b.n	fc38 <_strtod_l+0x1d0>
   1039c:	f43f ad60 	beq.w	fe60 <_strtod_l+0x3f8>
   103a0:	425b      	negs	r3, r3
   103a2:	f013 010f 	ands.w	r1, r3, #15
   103a6:	d00a      	beq.n	103be <_strtod_l+0x956>
   103a8:	4a31      	ldr	r2, [pc, #196]	; (10470 <_strtod_l+0xa08>)
   103aa:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   103ae:	ed9d 6b04 	vldr	d6, [sp, #16]
   103b2:	ed92 7b00 	vldr	d7, [r2]
   103b6:	ee86 7b07 	vdiv.f64	d7, d6, d7
   103ba:	ed8d 7b04 	vstr	d7, [sp, #16]
   103be:	111b      	asrs	r3, r3, #4
   103c0:	f43f ad4e 	beq.w	fe60 <_strtod_l+0x3f8>
   103c4:	2b1f      	cmp	r3, #31
   103c6:	dc33      	bgt.n	10430 <_strtod_l+0x9c8>
   103c8:	f013 0210 	ands.w	r2, r3, #16
   103cc:	bf18      	it	ne
   103ce:	226a      	movne	r2, #106	; 0x6a
   103d0:	ed9d 7b04 	vldr	d7, [sp, #16]
   103d4:	9208      	str	r2, [sp, #32]
   103d6:	4a27      	ldr	r2, [pc, #156]	; (10474 <_strtod_l+0xa0c>)
   103d8:	2100      	movs	r1, #0
   103da:	07d8      	lsls	r0, r3, #31
   103dc:	d504      	bpl.n	103e8 <_strtod_l+0x980>
   103de:	ed92 6b00 	vldr	d6, [r2]
   103e2:	2101      	movs	r1, #1
   103e4:	ee27 7b06 	vmul.f64	d7, d7, d6
   103e8:	105b      	asrs	r3, r3, #1
   103ea:	f102 0208 	add.w	r2, r2, #8
   103ee:	d1f4      	bne.n	103da <_strtod_l+0x972>
   103f0:	b109      	cbz	r1, 103f6 <_strtod_l+0x98e>
   103f2:	ed8d 7b04 	vstr	d7, [sp, #16]
   103f6:	9b08      	ldr	r3, [sp, #32]
   103f8:	b193      	cbz	r3, 10420 <_strtod_l+0x9b8>
   103fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   103fe:	f3c1 520a 	ubfx	r2, r1, #20, #11
   10402:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   10406:	2b00      	cmp	r3, #0
   10408:	dd0a      	ble.n	10420 <_strtod_l+0x9b8>
   1040a:	2b1f      	cmp	r3, #31
   1040c:	f340 822f 	ble.w	1086e <_strtod_l+0xe06>
   10410:	2000      	movs	r0, #0
   10412:	2b34      	cmp	r3, #52	; 0x34
   10414:	9004      	str	r0, [sp, #16]
   10416:	f340 8240 	ble.w	1089a <_strtod_l+0xe32>
   1041a:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
   1041e:	9305      	str	r3, [sp, #20]
   10420:	ed9d 7b04 	vldr	d7, [sp, #16]
   10424:	eeb5 7b40 	vcmp.f64	d7, #0.0
   10428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1042c:	f47f ad1a 	bne.w	fe64 <_strtod_l+0x3fc>
   10430:	2322      	movs	r3, #34	; 0x22
   10432:	ed9f 8b05 	vldr	d8, [pc, #20]	; 10448 <_strtod_l+0x9e0>
   10436:	f8c8 3000 	str.w	r3, [r8]
   1043a:	e4d2      	b.n	fde2 <_strtod_l+0x37a>
   1043c:	2322      	movs	r3, #34	; 0x22
   1043e:	ed9f 8b04 	vldr	d8, [pc, #16]	; 10450 <_strtod_l+0x9e8>
   10442:	f8c8 3000 	str.w	r3, [r8]
   10446:	e4cc      	b.n	fde2 <_strtod_l+0x37a>
	...
   10454:	7ff00000 	.word	0x7ff00000
   10458:	bff00000 	.word	0xbff00000
   1045c:	7ff00000 	.word	0x7ff00000
   10460:	7c9fffff 	.word	0x7c9fffff
   10464:	7fefffff 	.word	0x7fefffff
   10468:	20000280 	.word	0x20000280
   1046c:	7ca00000 	.word	0x7ca00000
   10470:	200002a8 	.word	0x200002a8
   10474:	20000370 	.word	0x20000370
   10478:	9302      	str	r3, [sp, #8]
   1047a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1047c:	9301      	str	r3, [sp, #4]
   1047e:	ab12      	add	r3, sp, #72	; 0x48
   10480:	9300      	str	r3, [sp, #0]
   10482:	4aa7      	ldr	r2, [pc, #668]	; (10720 <_strtod_l+0xcb8>)
   10484:	ab13      	add	r3, sp, #76	; 0x4c
   10486:	a911      	add	r1, sp, #68	; 0x44
   10488:	4640      	mov	r0, r8
   1048a:	f001 fca3 	bl	11dd4 <__gethex>
   1048e:	f010 050f 	ands.w	r5, r0, #15
   10492:	4604      	mov	r4, r0
   10494:	f43f aca3 	beq.w	fdde <_strtod_l+0x376>
   10498:	2d06      	cmp	r5, #6
   1049a:	d174      	bne.n	10586 <_strtod_l+0xb1e>
   1049c:	9b07      	ldr	r3, [sp, #28]
   1049e:	ed9f 8b9a 	vldr	d8, [pc, #616]	; 10708 <_strtod_l+0xca0>
   104a2:	3701      	adds	r7, #1
   104a4:	2b00      	cmp	r3, #0
   104a6:	f43f abce 	beq.w	fc46 <_strtod_l+0x1de>
   104aa:	601f      	str	r7, [r3, #0]
   104ac:	f7ff bbcb 	b.w	fc46 <_strtod_l+0x1de>
   104b0:	ed9d 8b04 	vldr	d8, [sp, #16]
   104b4:	e495      	b.n	fde2 <_strtod_l+0x37a>
   104b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   104b8:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
   104bc:	4403      	add	r3, r0
   104be:	930b      	str	r3, [sp, #44]	; 0x2c
   104c0:	2801      	cmp	r0, #1
   104c2:	f105 0301 	add.w	r3, r5, #1
   104c6:	461a      	mov	r2, r3
   104c8:	d014      	beq.n	104f4 <_strtod_l+0xa8c>
   104ca:	4428      	add	r0, r5
   104cc:	1e44      	subs	r4, r0, #1
   104ce:	e003      	b.n	104d8 <_strtod_l+0xa70>
   104d0:	0046      	lsls	r6, r0, #1
   104d2:	429c      	cmp	r4, r3
   104d4:	d00d      	beq.n	104f2 <_strtod_l+0xa8a>
   104d6:	3301      	adds	r3, #1
   104d8:	462a      	mov	r2, r5
   104da:	2a08      	cmp	r2, #8
   104dc:	461d      	mov	r5, r3
   104de:	eb06 0086 	add.w	r0, r6, r6, lsl #2
   104e2:	d9f5      	bls.n	104d0 <_strtod_l+0xa68>
   104e4:	2b10      	cmp	r3, #16
   104e6:	bfdc      	itt	le
   104e8:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
   104ec:	ea4f 0949 	movle.w	r9, r9, lsl #1
   104f0:	e7ef      	b.n	104d2 <_strtod_l+0xa6a>
   104f2:	3202      	adds	r2, #2
   104f4:	2d08      	cmp	r5, #8
   104f6:	dc3c      	bgt.n	10572 <_strtod_l+0xb0a>
   104f8:	4615      	mov	r5, r2
   104fa:	f7ff bb79 	b.w	fbf0 <_strtod_l+0x188>
   104fe:	4989      	ldr	r1, [pc, #548]	; (10724 <_strtod_l+0xcbc>)
   10500:	2201      	movs	r2, #1
   10502:	4638      	mov	r0, r7
   10504:	f000 fe86 	bl	11214 <strncmp>
   10508:	2800      	cmp	r0, #0
   1050a:	f000 8082 	beq.w	10612 <_strtod_l+0xbaa>
   1050e:	f04f 0e00 	mov.w	lr, #0
   10512:	46f1      	mov	r9, lr
   10514:	4676      	mov	r6, lr
   10516:	4675      	mov	r5, lr
   10518:	f7ff bbb5 	b.w	fc86 <_strtod_l+0x21e>
   1051c:	f644 631f 	movw	r3, #19999	; 0x4e1f
   10520:	459b      	cmp	fp, r3
   10522:	bfa8      	it	ge
   10524:	469b      	movge	fp, r3
   10526:	e42f      	b.n	fd88 <_strtod_l+0x320>
   10528:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1052c:	4618      	mov	r0, r3
   1052e:	2b00      	cmp	r3, #0
   10530:	f47f ae23 	bne.w	1017a <_strtod_l+0x712>
   10534:	2322      	movs	r3, #34	; 0x22
   10536:	ed9f 8b74 	vldr	d8, [pc, #464]	; 10708 <_strtod_l+0xca0>
   1053a:	9812      	ldr	r0, [sp, #72]	; 0x48
   1053c:	f8c8 3000 	str.w	r3, [r8]
   10540:	e678      	b.n	10234 <_strtod_l+0x7cc>
   10542:	eeb0 7b49 	vmov.f64	d7, d9
   10546:	e6c0      	b.n	102ca <_strtod_l+0x862>
   10548:	4977      	ldr	r1, [pc, #476]	; (10728 <_strtod_l+0xcc0>)
   1054a:	a811      	add	r0, sp, #68	; 0x44
   1054c:	f001 ff0c 	bl	12368 <__match>
   10550:	2800      	cmp	r0, #0
   10552:	f43f ab71 	beq.w	fc38 <_strtod_l+0x1d0>
   10556:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10558:	4974      	ldr	r1, [pc, #464]	; (1072c <_strtod_l+0xcc4>)
   1055a:	3b01      	subs	r3, #1
   1055c:	a811      	add	r0, sp, #68	; 0x44
   1055e:	9311      	str	r3, [sp, #68]	; 0x44
   10560:	f001 ff02 	bl	12368 <__match>
   10564:	b910      	cbnz	r0, 1056c <_strtod_l+0xb04>
   10566:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10568:	3301      	adds	r3, #1
   1056a:	9311      	str	r3, [sp, #68]	; 0x44
   1056c:	ed9f 8b68 	vldr	d8, [pc, #416]	; 10710 <_strtod_l+0xca8>
   10570:	e437      	b.n	fde2 <_strtod_l+0x37a>
   10572:	2a10      	cmp	r2, #16
   10574:	bfdc      	itt	le
   10576:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
   1057a:	eb01 0949 	addle.w	r9, r1, r9, lsl #1
   1057e:	4615      	mov	r5, r2
   10580:	2000      	movs	r0, #0
   10582:	f7ff bb3a 	b.w	fbfa <_strtod_l+0x192>
   10586:	9a12      	ldr	r2, [sp, #72]	; 0x48
   10588:	b13a      	cbz	r2, 1059a <_strtod_l+0xb32>
   1058a:	2135      	movs	r1, #53	; 0x35
   1058c:	a814      	add	r0, sp, #80	; 0x50
   1058e:	f002 fccf 	bl	12f30 <__copybits>
   10592:	9912      	ldr	r1, [sp, #72]	; 0x48
   10594:	4640      	mov	r0, r8
   10596:	f002 f817 	bl	125c8 <_Bfree>
   1059a:	3d01      	subs	r5, #1
   1059c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1059e:	2d04      	cmp	r5, #4
   105a0:	f200 818f 	bhi.w	108c2 <_strtod_l+0xe5a>
   105a4:	e8df f005 	tbb	[pc, r5]
   105a8:	1f2a2d03 	.word	0x1f2a2d03
   105ac:	03          	.byte	0x03
   105ad:	00          	.byte	0x00
   105ae:	9a14      	ldr	r2, [sp, #80]	; 0x50
   105b0:	9204      	str	r2, [sp, #16]
   105b2:	f203 4233 	addw	r2, r3, #1075	; 0x433
   105b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   105b8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   105bc:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
   105c0:	9305      	str	r3, [sp, #20]
   105c2:	05e5      	lsls	r5, r4, #23
   105c4:	d502      	bpl.n	105cc <_strtod_l+0xb64>
   105c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   105ca:	9305      	str	r3, [sp, #20]
   105cc:	4a58      	ldr	r2, [pc, #352]	; (10730 <_strtod_l+0xcc8>)
   105ce:	401a      	ands	r2, r3
   105d0:	ed9d 8b04 	vldr	d8, [sp, #16]
   105d4:	2a00      	cmp	r2, #0
   105d6:	f47f ac04 	bne.w	fde2 <_strtod_l+0x37a>
   105da:	f000 ff39 	bl	11450 <__errno>
   105de:	2322      	movs	r3, #34	; 0x22
   105e0:	6003      	str	r3, [r0, #0]
   105e2:	f7ff bbfe 	b.w	fde2 <_strtod_l+0x37a>
   105e6:	f04f 33ff 	mov.w	r3, #4294967295
   105ea:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   105ee:	e9cd 3604 	strd	r3, r6, [sp, #16]
   105f2:	05e3      	lsls	r3, r4, #23
   105f4:	f57f af5c 	bpl.w	104b0 <_strtod_l+0xa48>
   105f8:	9b05      	ldr	r3, [sp, #20]
   105fa:	e7e4      	b.n	105c6 <_strtod_l+0xb5e>
   105fc:	4b4c      	ldr	r3, [pc, #304]	; (10730 <_strtod_l+0xcc8>)
   105fe:	9305      	str	r3, [sp, #20]
   10600:	e7f7      	b.n	105f2 <_strtod_l+0xb8a>
   10602:	9b14      	ldr	r3, [sp, #80]	; 0x50
   10604:	9304      	str	r3, [sp, #16]
   10606:	9b15      	ldr	r3, [sp, #84]	; 0x54
   10608:	9305      	str	r3, [sp, #20]
   1060a:	e7da      	b.n	105c2 <_strtod_l+0xb5a>
   1060c:	2000      	movs	r0, #0
   1060e:	f7ff bae1 	b.w	fbd4 <_strtod_l+0x16c>
   10612:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10614:	461a      	mov	r2, r3
   10616:	3301      	adds	r3, #1
   10618:	9311      	str	r3, [sp, #68]	; 0x44
   1061a:	7854      	ldrb	r4, [r2, #1]
   1061c:	4606      	mov	r6, r0
   1061e:	4681      	mov	r9, r0
   10620:	f7ff bacd 	b.w	fbbe <_strtod_l+0x156>
   10624:	4b43      	ldr	r3, [pc, #268]	; (10734 <_strtod_l+0xccc>)
   10626:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1062a:	ed93 8b00 	vldr	d8, [r3]
   1062e:	ed9d 7b04 	vldr	d7, [sp, #16]
   10632:	ee28 8b07 	vmul.f64	d8, d8, d7
   10636:	f7ff bbd4 	b.w	fde2 <_strtod_l+0x37a>
   1063a:	eebe 7b00 	vmov.f64	d7, #224	; 0xbf000000 -0.5
   1063e:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
   10642:	e511      	b.n	10068 <_strtod_l+0x600>
   10644:	46ae      	mov	lr, r5
   10646:	900b      	str	r0, [sp, #44]	; 0x2c
   10648:	f7ff badc 	b.w	fc04 <_strtod_l+0x19c>
   1064c:	4b39      	ldr	r3, [pc, #228]	; (10734 <_strtod_l+0xccc>)
   1064e:	f1c5 050f 	rsb	r5, r5, #15
   10652:	1b4a      	subs	r2, r1, r5
   10654:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   10658:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1065c:	ed95 8b00 	vldr	d8, [r5]
   10660:	ed93 7b00 	vldr	d7, [r3]
   10664:	ed9d 6b04 	vldr	d6, [sp, #16]
   10668:	ee28 8b06 	vmul.f64	d8, d8, d6
   1066c:	ee28 8b07 	vmul.f64	d8, d8, d7
   10670:	f7ff bbb7 	b.w	fde2 <_strtod_l+0x37a>
   10674:	2d00      	cmp	r5, #0
   10676:	f000 8095 	beq.w	107a4 <_strtod_l+0xd3c>
   1067a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
   1067e:	4b2e      	ldr	r3, [pc, #184]	; (10738 <_strtod_l+0xcd0>)
   10680:	f3cc 0113 	ubfx	r1, ip, #0, #20
   10684:	4299      	cmp	r1, r3
   10686:	4662      	mov	r2, ip
   10688:	f000 80d2 	beq.w	10830 <_strtod_l+0xdc8>
   1068c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1068e:	2b00      	cmp	r3, #0
   10690:	f000 80a5 	beq.w	107de <_strtod_l+0xd76>
   10694:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   10698:	4213      	tst	r3, r2
   1069a:	4617      	mov	r7, r2
   1069c:	d01a      	beq.n	106d4 <_strtod_l+0xc6c>
   1069e:	eeb0 0b48 	vmov.f64	d0, d8
   106a2:	2d00      	cmp	r5, #0
   106a4:	f000 80a6 	beq.w	107f4 <_strtod_l+0xd8c>
   106a8:	f002 fb12 	bl	12cd0 <__ulp>
   106ac:	9b08      	ldr	r3, [sp, #32]
   106ae:	b17b      	cbz	r3, 106d0 <_strtod_l+0xc68>
   106b0:	f3c7 530a 	ubfx	r3, r7, #20, #11
   106b4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   106b8:	2b00      	cmp	r3, #0
   106ba:	dd09      	ble.n	106d0 <_strtod_l+0xc68>
   106bc:	051b      	lsls	r3, r3, #20
   106be:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
   106c2:	2000      	movs	r0, #0
   106c4:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
   106c8:	ec41 0b17 	vmov	d7, r0, r1
   106cc:	ee20 0b07 	vmul.f64	d0, d0, d7
   106d0:	ee38 8b00 	vadd.f64	d8, d8, d0
   106d4:	9b08      	ldr	r3, [sp, #32]
   106d6:	b15b      	cbz	r3, 106f0 <_strtod_l+0xc88>
   106d8:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 10718 <_strtod_l+0xcb0>
   106dc:	4b14      	ldr	r3, [pc, #80]	; (10730 <_strtod_l+0xcc8>)
   106de:	ee28 8b07 	vmul.f64	d8, d8, d7
   106e2:	ee18 2a90 	vmov	r2, s17
   106e6:	4013      	ands	r3, r2
   106e8:	b913      	cbnz	r3, 106f0 <_strtod_l+0xc88>
   106ea:	2322      	movs	r3, #34	; 0x22
   106ec:	f8c8 3000 	str.w	r3, [r8]
   106f0:	9812      	ldr	r0, [sp, #72]	; 0x48
   106f2:	e59f      	b.n	10234 <_strtod_l+0x7cc>
   106f4:	f102 7354 	add.w	r3, r2, #55574528	; 0x3500000
   106f8:	9305      	str	r3, [sp, #20]
   106fa:	2300      	movs	r3, #0
   106fc:	9308      	str	r3, [sp, #32]
   106fe:	f7ff bbb1 	b.w	fe64 <_strtod_l+0x3fc>
   10702:	bf00      	nop
   10704:	f3af 8000 	nop.w
	...
   10714:	7ff00000 	.word	0x7ff00000
   10718:	00000000 	.word	0x00000000
   1071c:	39500000 	.word	0x39500000
   10720:	2000a634 	.word	0x2000a634
   10724:	2000b3d4 	.word	0x2000b3d4
   10728:	20003820 	.word	0x20003820
   1072c:	20003824 	.word	0x20003824
   10730:	7ff00000 	.word	0x7ff00000
   10734:	200002a8 	.word	0x200002a8
   10738:	000fffff 	.word	0x000fffff
   1073c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   10740:	430d      	orrs	r5, r1
   10742:	d1c7      	bne.n	106d4 <_strtod_l+0xc6c>
   10744:	f3c2 0313 	ubfx	r3, r2, #0, #20
   10748:	4617      	mov	r7, r2
   1074a:	2b00      	cmp	r3, #0
   1074c:	d1c2      	bne.n	106d4 <_strtod_l+0xc6c>
   1074e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   10752:	0d1b      	lsrs	r3, r3, #20
   10754:	051b      	lsls	r3, r3, #20
   10756:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   1075a:	d9bb      	bls.n	106d4 <_strtod_l+0xc6c>
   1075c:	f8da 3014 	ldr.w	r3, [sl, #20]
   10760:	b91b      	cbnz	r3, 1076a <_strtod_l+0xd02>
   10762:	f8da 3010 	ldr.w	r3, [sl, #16]
   10766:	2b01      	cmp	r3, #1
   10768:	ddb4      	ble.n	106d4 <_strtod_l+0xc6c>
   1076a:	4651      	mov	r1, sl
   1076c:	2201      	movs	r2, #1
   1076e:	4640      	mov	r0, r8
   10770:	f002 f96a 	bl	12a48 <__lshift>
   10774:	4621      	mov	r1, r4
   10776:	4682      	mov	sl, r0
   10778:	f002 f9de 	bl	12b38 <__mcmp>
   1077c:	2800      	cmp	r0, #0
   1077e:	dda9      	ble.n	106d4 <_strtod_l+0xc6c>
   10780:	9b08      	ldr	r3, [sp, #32]
   10782:	2b00      	cmp	r3, #0
   10784:	d17e      	bne.n	10884 <_strtod_l+0xe1c>
   10786:	4b50      	ldr	r3, [pc, #320]	; (108c8 <_strtod_l+0xe60>)
   10788:	403b      	ands	r3, r7
   1078a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   1078e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
   10792:	ea6f 5303 	mvn.w	r3, r3, lsl #20
   10796:	9305      	str	r3, [sp, #20]
   10798:	f04f 33ff 	mov.w	r3, #4294967295
   1079c:	9304      	str	r3, [sp, #16]
   1079e:	ed9d 8b04 	vldr	d8, [sp, #16]
   107a2:	e797      	b.n	106d4 <_strtod_l+0xc6c>
   107a4:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   107a8:	f3c2 0313 	ubfx	r3, r2, #0, #20
   107ac:	430b      	orrs	r3, r1
   107ae:	4617      	mov	r7, r2
   107b0:	f47f af6c 	bne.w	1068c <_strtod_l+0xc24>
   107b4:	e7e4      	b.n	10780 <_strtod_l+0xd18>
   107b6:	4945      	ldr	r1, [pc, #276]	; (108cc <_strtod_l+0xe64>)
   107b8:	a811      	add	r0, sp, #68	; 0x44
   107ba:	aa14      	add	r2, sp, #80	; 0x50
   107bc:	f001 fdf0 	bl	123a0 <__hexnan>
   107c0:	2805      	cmp	r0, #5
   107c2:	f47f ab06 	bne.w	fdd2 <_strtod_l+0x36a>
   107c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   107c8:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
   107cc:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
   107d0:	9305      	str	r3, [sp, #20]
   107d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   107d4:	9304      	str	r3, [sp, #16]
   107d6:	ed9d 8b04 	vldr	d8, [sp, #16]
   107da:	f7ff bb02 	b.w	fde2 <_strtod_l+0x37a>
   107de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   107e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   107e4:	4203      	tst	r3, r0
   107e6:	f43f af75 	beq.w	106d4 <_strtod_l+0xc6c>
   107ea:	460f      	mov	r7, r1
   107ec:	e757      	b.n	1069e <_strtod_l+0xc36>
   107ee:	4c38      	ldr	r4, [pc, #224]	; (108d0 <_strtod_l+0xe68>)
   107f0:	2100      	movs	r1, #0
   107f2:	e58f      	b.n	10314 <_strtod_l+0x8ac>
   107f4:	f002 fa6c 	bl	12cd0 <__ulp>
   107f8:	9b08      	ldr	r3, [sp, #32]
   107fa:	2b00      	cmp	r3, #0
   107fc:	d055      	beq.n	108aa <_strtod_l+0xe42>
   107fe:	f3c7 530a 	ubfx	r3, r7, #20, #11
   10802:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   10806:	2b00      	cmp	r3, #0
   10808:	dd09      	ble.n	1081e <_strtod_l+0xdb6>
   1080a:	051b      	lsls	r3, r3, #20
   1080c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
   10810:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
   10814:	4628      	mov	r0, r5
   10816:	ec41 0b17 	vmov	d7, r0, r1
   1081a:	ee20 0b07 	vmul.f64	d0, d0, d7
   1081e:	ee38 8b40 	vsub.f64	d8, d8, d0
   10822:	eeb5 8b40 	vcmp.f64	d8, #0.0
   10826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1082a:	f47f af55 	bne.w	106d8 <_strtod_l+0xc70>
   1082e:	e681      	b.n	10534 <_strtod_l+0xacc>
   10830:	9b08      	ldr	r3, [sp, #32]
   10832:	9904      	ldr	r1, [sp, #16]
   10834:	b31b      	cbz	r3, 1087e <_strtod_l+0xe16>
   10836:	4b24      	ldr	r3, [pc, #144]	; (108c8 <_strtod_l+0xe60>)
   10838:	4013      	ands	r3, r2
   1083a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   1083e:	d81e      	bhi.n	1087e <_strtod_l+0xe16>
   10840:	0d1b      	lsrs	r3, r3, #20
   10842:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   10846:	f04f 30ff 	mov.w	r0, #4294967295
   1084a:	fa00 f303 	lsl.w	r3, r0, r3
   1084e:	4299      	cmp	r1, r3
   10850:	f47f af1c 	bne.w	1068c <_strtod_l+0xc24>
   10854:	4b1f      	ldr	r3, [pc, #124]	; (108d4 <_strtod_l+0xe6c>)
   10856:	429a      	cmp	r2, r3
   10858:	d030      	beq.n	108bc <_strtod_l+0xe54>
   1085a:	4b1b      	ldr	r3, [pc, #108]	; (108c8 <_strtod_l+0xe60>)
   1085c:	4013      	ands	r3, r2
   1085e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   10862:	9305      	str	r3, [sp, #20]
   10864:	2300      	movs	r3, #0
   10866:	9304      	str	r3, [sp, #16]
   10868:	ed9d 8b04 	vldr	d8, [sp, #16]
   1086c:	e732      	b.n	106d4 <_strtod_l+0xc6c>
   1086e:	f04f 32ff 	mov.w	r2, #4294967295
   10872:	fa02 f303 	lsl.w	r3, r2, r3
   10876:	9a04      	ldr	r2, [sp, #16]
   10878:	401a      	ands	r2, r3
   1087a:	9204      	str	r2, [sp, #16]
   1087c:	e5d0      	b.n	10420 <_strtod_l+0x9b8>
   1087e:	f04f 33ff 	mov.w	r3, #4294967295
   10882:	e7e4      	b.n	1084e <_strtod_l+0xde6>
   10884:	4b10      	ldr	r3, [pc, #64]	; (108c8 <_strtod_l+0xe60>)
   10886:	403b      	ands	r3, r7
   10888:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   1088c:	f73f af7d 	bgt.w	1078a <_strtod_l+0xd22>
   10890:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   10894:	f73f af20 	bgt.w	106d8 <_strtod_l+0xc70>
   10898:	e64c      	b.n	10534 <_strtod_l+0xacc>
   1089a:	f1c2 024b 	rsb	r2, r2, #75	; 0x4b
   1089e:	f04f 33ff 	mov.w	r3, #4294967295
   108a2:	4093      	lsls	r3, r2
   108a4:	400b      	ands	r3, r1
   108a6:	9305      	str	r3, [sp, #20]
   108a8:	e5ba      	b.n	10420 <_strtod_l+0x9b8>
   108aa:	ee38 8b40 	vsub.f64	d8, d8, d0
   108ae:	eeb5 8b40 	vcmp.f64	d8, #0.0
   108b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   108b6:	f47f af1b 	bne.w	106f0 <_strtod_l+0xc88>
   108ba:	e63b      	b.n	10534 <_strtod_l+0xacc>
   108bc:	3101      	adds	r1, #1
   108be:	d1cc      	bne.n	1085a <_strtod_l+0xdf2>
   108c0:	e409      	b.n	100d6 <_strtod_l+0x66e>
   108c2:	2300      	movs	r3, #0
   108c4:	e67d      	b.n	105c2 <_strtod_l+0xb5a>
   108c6:	bf00      	nop
   108c8:	7ff00000 	.word	0x7ff00000
   108cc:	2000a648 	.word	0x2000a648
   108d0:	20000280 	.word	0x20000280
   108d4:	7fefffff 	.word	0x7fefffff

000108d8 <_strtod_r>:
   108d8:	4b01      	ldr	r3, [pc, #4]	; (108e0 <_strtod_r+0x8>)
   108da:	f7ff b8c5 	b.w	fa68 <_strtod_l>
   108de:	bf00      	nop
   108e0:	2000c16c 	.word	0x2000c16c

000108e4 <_strtol_l.constprop.0>:
   108e4:	2b01      	cmp	r3, #1
   108e6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   108ea:	d040      	beq.n	1096e <_strtol_l.constprop.0+0x8a>
   108ec:	2b24      	cmp	r3, #36	; 0x24
   108ee:	4698      	mov	r8, r3
   108f0:	d83d      	bhi.n	1096e <_strtol_l.constprop.0+0x8a>
   108f2:	4d4c      	ldr	r5, [pc, #304]	; (10a24 <_strtol_l.constprop.0+0x140>)
   108f4:	468e      	mov	lr, r1
   108f6:	4676      	mov	r6, lr
   108f8:	f81e bb01 	ldrb.w	fp, [lr], #1
   108fc:	f815 400b 	ldrb.w	r4, [r5, fp]
   10900:	f014 0408 	ands.w	r4, r4, #8
   10904:	d1f7      	bne.n	108f6 <_strtol_l.constprop.0+0x12>
   10906:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
   1090a:	d072      	beq.n	109f2 <_strtol_l.constprop.0+0x10e>
   1090c:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
   10910:	bf08      	it	eq
   10912:	f89e b000 	ldrbeq.w	fp, [lr]
   10916:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
   1091a:	bf08      	it	eq
   1091c:	f106 0e02 	addeq.w	lr, r6, #2
   10920:	2b00      	cmp	r3, #0
   10922:	d042      	beq.n	109aa <_strtol_l.constprop.0+0xc6>
   10924:	2b10      	cmp	r3, #16
   10926:	d057      	beq.n	109d8 <_strtol_l.constprop.0+0xf4>
   10928:	fbb9 f7f8 	udiv	r7, r9, r8
   1092c:	2500      	movs	r5, #0
   1092e:	462e      	mov	r6, r5
   10930:	fb08 9a17 	mls	sl, r8, r7, r9
   10934:	e005      	b.n	10942 <_strtol_l.constprop.0+0x5e>
   10936:	d033      	beq.n	109a0 <_strtol_l.constprop.0+0xbc>
   10938:	fb08 c606 	mla	r6, r8, r6, ip
   1093c:	2501      	movs	r5, #1
   1093e:	f81e bb01 	ldrb.w	fp, [lr], #1
   10942:	f1ab 0c30 	sub.w	ip, fp, #48	; 0x30
   10946:	f1bc 0f09 	cmp.w	ip, #9
   1094a:	d906      	bls.n	1095a <_strtol_l.constprop.0+0x76>
   1094c:	f1ab 0c41 	sub.w	ip, fp, #65	; 0x41
   10950:	f1bc 0f19 	cmp.w	ip, #25
   10954:	d812      	bhi.n	1097c <_strtol_l.constprop.0+0x98>
   10956:	f1ab 0c37 	sub.w	ip, fp, #55	; 0x37
   1095a:	4563      	cmp	r3, ip
   1095c:	dd17      	ble.n	1098e <_strtol_l.constprop.0+0xaa>
   1095e:	f1b5 3fff 	cmp.w	r5, #4294967295
   10962:	d0ec      	beq.n	1093e <_strtol_l.constprop.0+0x5a>
   10964:	42b7      	cmp	r7, r6
   10966:	d2e6      	bcs.n	10936 <_strtol_l.constprop.0+0x52>
   10968:	f04f 35ff 	mov.w	r5, #4294967295
   1096c:	e7e7      	b.n	1093e <_strtol_l.constprop.0+0x5a>
   1096e:	f000 fd6f 	bl	11450 <__errno>
   10972:	2316      	movs	r3, #22
   10974:	6003      	str	r3, [r0, #0]
   10976:	2000      	movs	r0, #0
   10978:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1097c:	f1ab 0c61 	sub.w	ip, fp, #97	; 0x61
   10980:	f1bc 0f19 	cmp.w	ip, #25
   10984:	d803      	bhi.n	1098e <_strtol_l.constprop.0+0xaa>
   10986:	f1ab 0c57 	sub.w	ip, fp, #87	; 0x57
   1098a:	4563      	cmp	r3, ip
   1098c:	dce7      	bgt.n	1095e <_strtol_l.constprop.0+0x7a>
   1098e:	1c6b      	adds	r3, r5, #1
   10990:	d027      	beq.n	109e2 <_strtol_l.constprop.0+0xfe>
   10992:	b98c      	cbnz	r4, 109b8 <_strtol_l.constprop.0+0xd4>
   10994:	b10a      	cbz	r2, 1099a <_strtol_l.constprop.0+0xb6>
   10996:	bba5      	cbnz	r5, 10a02 <_strtol_l.constprop.0+0x11e>
   10998:	6011      	str	r1, [r2, #0]
   1099a:	4630      	mov	r0, r6
   1099c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   109a0:	45e2      	cmp	sl, ip
   109a2:	dac9      	bge.n	10938 <_strtol_l.constprop.0+0x54>
   109a4:	f04f 35ff 	mov.w	r5, #4294967295
   109a8:	e7c9      	b.n	1093e <_strtol_l.constprop.0+0x5a>
   109aa:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   109ae:	d005      	beq.n	109bc <_strtol_l.constprop.0+0xd8>
   109b0:	f04f 080a 	mov.w	r8, #10
   109b4:	4643      	mov	r3, r8
   109b6:	e7b7      	b.n	10928 <_strtol_l.constprop.0+0x44>
   109b8:	4276      	negs	r6, r6
   109ba:	e7eb      	b.n	10994 <_strtol_l.constprop.0+0xb0>
   109bc:	f89e 3000 	ldrb.w	r3, [lr]
   109c0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   109c4:	2b58      	cmp	r3, #88	; 0x58
   109c6:	d121      	bne.n	10a0c <_strtol_l.constprop.0+0x128>
   109c8:	f04f 0810 	mov.w	r8, #16
   109cc:	f89e b001 	ldrb.w	fp, [lr, #1]
   109d0:	4643      	mov	r3, r8
   109d2:	f10e 0e02 	add.w	lr, lr, #2
   109d6:	e7a7      	b.n	10928 <_strtol_l.constprop.0+0x44>
   109d8:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   109dc:	d01a      	beq.n	10a14 <_strtol_l.constprop.0+0x130>
   109de:	4698      	mov	r8, r3
   109e0:	e7a2      	b.n	10928 <_strtol_l.constprop.0+0x44>
   109e2:	2322      	movs	r3, #34	; 0x22
   109e4:	6003      	str	r3, [r0, #0]
   109e6:	b172      	cbz	r2, 10a06 <_strtol_l.constprop.0+0x122>
   109e8:	f10e 31ff 	add.w	r1, lr, #4294967295
   109ec:	464e      	mov	r6, r9
   109ee:	6011      	str	r1, [r2, #0]
   109f0:	e7d3      	b.n	1099a <_strtol_l.constprop.0+0xb6>
   109f2:	f89e b000 	ldrb.w	fp, [lr]
   109f6:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
   109fa:	f106 0e02 	add.w	lr, r6, #2
   109fe:	2401      	movs	r4, #1
   10a00:	e78e      	b.n	10920 <_strtol_l.constprop.0+0x3c>
   10a02:	46b1      	mov	r9, r6
   10a04:	e7f0      	b.n	109e8 <_strtol_l.constprop.0+0x104>
   10a06:	464e      	mov	r6, r9
   10a08:	4630      	mov	r0, r6
   10a0a:	e7c7      	b.n	1099c <_strtol_l.constprop.0+0xb8>
   10a0c:	f04f 0808 	mov.w	r8, #8
   10a10:	4643      	mov	r3, r8
   10a12:	e789      	b.n	10928 <_strtol_l.constprop.0+0x44>
   10a14:	f89e 5000 	ldrb.w	r5, [lr]
   10a18:	f005 05df 	and.w	r5, r5, #223	; 0xdf
   10a1c:	2d58      	cmp	r5, #88	; 0x58
   10a1e:	d0d3      	beq.n	109c8 <_strtol_l.constprop.0+0xe4>
   10a20:	4698      	mov	r8, r3
   10a22:	e781      	b.n	10928 <_strtol_l.constprop.0+0x44>
   10a24:	2000369d 	.word	0x2000369d

00010a28 <_strtol_r>:
   10a28:	f7ff bf5c 	b.w	108e4 <_strtol_l.constprop.0>

00010a2c <strtol>:
   10a2c:	b410      	push	{r4}
   10a2e:	4c05      	ldr	r4, [pc, #20]	; (10a44 <strtol+0x18>)
   10a30:	4684      	mov	ip, r0
   10a32:	4613      	mov	r3, r2
   10a34:	6820      	ldr	r0, [r4, #0]
   10a36:	f85d 4b04 	ldr.w	r4, [sp], #4
   10a3a:	460a      	mov	r2, r1
   10a3c:	4661      	mov	r1, ip
   10a3e:	f7ff bf51 	b.w	108e4 <_strtol_l.constprop.0>
   10a42:	bf00      	nop
   10a44:	2000c6f4 	.word	0x2000c6f4

00010a48 <__cxa_atexit>:
   10a48:	4613      	mov	r3, r2
   10a4a:	460a      	mov	r2, r1
   10a4c:	4601      	mov	r1, r0
   10a4e:	2002      	movs	r0, #2
   10a50:	f000 bfd4 	b.w	119fc <__register_exitproc>

00010a54 <toupper>:
   10a54:	4b03      	ldr	r3, [pc, #12]	; (10a64 <toupper+0x10>)
   10a56:	5c1b      	ldrb	r3, [r3, r0]
   10a58:	f003 0303 	and.w	r3, r3, #3
   10a5c:	2b02      	cmp	r3, #2
   10a5e:	bf08      	it	eq
   10a60:	3820      	subeq	r0, #32
   10a62:	4770      	bx	lr
   10a64:	2000369d 	.word	0x2000369d

00010a68 <stdio_exit_handler>:
   10a68:	4a02      	ldr	r2, [pc, #8]	; (10a74 <stdio_exit_handler+0xc>)
   10a6a:	4903      	ldr	r1, [pc, #12]	; (10a78 <stdio_exit_handler+0x10>)
   10a6c:	4803      	ldr	r0, [pc, #12]	; (10a7c <stdio_exit_handler+0x14>)
   10a6e:	f000 b8bb 	b.w	10be8 <_fwalk_sglue>
   10a72:	bf00      	nop
   10a74:	2000c6e8 	.word	0x2000c6e8
   10a78:	000163a5 	.word	0x000163a5
   10a7c:	2000bb48 	.word	0x2000bb48

00010a80 <cleanup_stdio>:
   10a80:	4b0c      	ldr	r3, [pc, #48]	; (10ab4 <cleanup_stdio+0x34>)
   10a82:	6841      	ldr	r1, [r0, #4]
   10a84:	4299      	cmp	r1, r3
   10a86:	b510      	push	{r4, lr}
   10a88:	4604      	mov	r4, r0
   10a8a:	d001      	beq.n	10a90 <cleanup_stdio+0x10>
   10a8c:	f005 fc8a 	bl	163a4 <_fclose_r>
   10a90:	68a1      	ldr	r1, [r4, #8]
   10a92:	4b09      	ldr	r3, [pc, #36]	; (10ab8 <cleanup_stdio+0x38>)
   10a94:	4299      	cmp	r1, r3
   10a96:	d002      	beq.n	10a9e <cleanup_stdio+0x1e>
   10a98:	4620      	mov	r0, r4
   10a9a:	f005 fc83 	bl	163a4 <_fclose_r>
   10a9e:	68e1      	ldr	r1, [r4, #12]
   10aa0:	4b06      	ldr	r3, [pc, #24]	; (10abc <cleanup_stdio+0x3c>)
   10aa2:	4299      	cmp	r1, r3
   10aa4:	d004      	beq.n	10ab0 <cleanup_stdio+0x30>
   10aa6:	4620      	mov	r0, r4
   10aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10aac:	f005 bc7a 	b.w	163a4 <_fclose_r>
   10ab0:	bd10      	pop	{r4, pc}
   10ab2:	bf00      	nop
   10ab4:	2005e2ac 	.word	0x2005e2ac
   10ab8:	2005e314 	.word	0x2005e314
   10abc:	2005e37c 	.word	0x2005e37c

00010ac0 <global_stdio_init.part.0>:
   10ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10ac4:	4c2a      	ldr	r4, [pc, #168]	; (10b70 <global_stdio_init.part.0+0xb0>)
   10ac6:	4b2b      	ldr	r3, [pc, #172]	; (10b74 <global_stdio_init.part.0+0xb4>)
   10ac8:	482b      	ldr	r0, [pc, #172]	; (10b78 <global_stdio_init.part.0+0xb8>)
   10aca:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 10b8c <global_stdio_init.part.0+0xcc>
   10ace:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 10b90 <global_stdio_init.part.0+0xd0>
   10ad2:	4f2a      	ldr	r7, [pc, #168]	; (10b7c <global_stdio_init.part.0+0xbc>)
   10ad4:	6018      	str	r0, [r3, #0]
   10ad6:	2500      	movs	r5, #0
   10ad8:	2304      	movs	r3, #4
   10ada:	2208      	movs	r2, #8
   10adc:	4629      	mov	r1, r5
   10ade:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   10ae2:	4e27      	ldr	r6, [pc, #156]	; (10b80 <global_stdio_init.part.0+0xc0>)
   10ae4:	6665      	str	r5, [r4, #100]	; 0x64
   10ae6:	e9c4 5302 	strd	r5, r3, [r4, #8]
   10aea:	e9c4 5500 	strd	r5, r5, [r4]
   10aee:	e9c4 5504 	strd	r5, r5, [r4, #16]
   10af2:	61a5      	str	r5, [r4, #24]
   10af4:	f000 fa5e 	bl	10fb4 <memset>
   10af8:	4b22      	ldr	r3, [pc, #136]	; (10b84 <global_stdio_init.part.0+0xc4>)
   10afa:	6763      	str	r3, [r4, #116]	; 0x74
   10afc:	2208      	movs	r2, #8
   10afe:	4629      	mov	r1, r5
   10b00:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   10b04:	e9c4 4907 	strd	r4, r9, [r4, #28]
   10b08:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
   10b0c:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
   10b10:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
   10b14:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
   10b18:	6725      	str	r5, [r4, #112]	; 0x70
   10b1a:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
   10b1e:	62e6      	str	r6, [r4, #44]	; 0x2c
   10b20:	f000 fa48 	bl	10fb4 <memset>
   10b24:	4b18      	ldr	r3, [pc, #96]	; (10b88 <global_stdio_init.part.0+0xc8>)
   10b26:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
   10b2a:	4629      	mov	r1, r5
   10b2c:	f104 0368 	add.w	r3, r4, #104	; 0x68
   10b30:	2208      	movs	r2, #8
   10b32:	f504 7096 	add.w	r0, r4, #300	; 0x12c
   10b36:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
   10b3a:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
   10b3e:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
   10b42:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
   10b46:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
   10b4a:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
   10b4e:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
   10b52:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
   10b56:	f000 fa2d 	bl	10fb4 <memset>
   10b5a:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
   10b5e:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
   10b62:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
   10b66:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
   10b6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10b6e:	bf00      	nop
   10b70:	2005e2ac 	.word	0x2005e2ac
   10b74:	2005e3e4 	.word	0x2005e3e4
   10b78:	00010a69 	.word	0x00010a69
   10b7c:	00010d31 	.word	0x00010d31
   10b80:	00010d51 	.word	0x00010d51
   10b84:	00010009 	.word	0x00010009
   10b88:	00020012 	.word	0x00020012
   10b8c:	00010cc9 	.word	0x00010cc9
   10b90:	00010cf1 	.word	0x00010cf1

00010b94 <__sinit>:
   10b94:	b510      	push	{r4, lr}
   10b96:	4604      	mov	r4, r0
   10b98:	480a      	ldr	r0, [pc, #40]	; (10bc4 <__sinit+0x30>)
   10b9a:	f000 fc87 	bl	114ac <__retarget_lock_acquire_recursive>
   10b9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   10ba0:	b923      	cbnz	r3, 10bac <__sinit+0x18>
   10ba2:	4b09      	ldr	r3, [pc, #36]	; (10bc8 <__sinit+0x34>)
   10ba4:	4a09      	ldr	r2, [pc, #36]	; (10bcc <__sinit+0x38>)
   10ba6:	681b      	ldr	r3, [r3, #0]
   10ba8:	6362      	str	r2, [r4, #52]	; 0x34
   10baa:	b123      	cbz	r3, 10bb6 <__sinit+0x22>
   10bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10bb0:	4804      	ldr	r0, [pc, #16]	; (10bc4 <__sinit+0x30>)
   10bb2:	f000 bc7d 	b.w	114b0 <__retarget_lock_release_recursive>
   10bb6:	f7ff ff83 	bl	10ac0 <global_stdio_init.part.0>
   10bba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10bbe:	4801      	ldr	r0, [pc, #4]	; (10bc4 <__sinit+0x30>)
   10bc0:	f000 bc76 	b.w	114b0 <__retarget_lock_release_recursive>
   10bc4:	2005e274 	.word	0x2005e274
   10bc8:	2005e3e4 	.word	0x2005e3e4
   10bcc:	00010a81 	.word	0x00010a81

00010bd0 <__sfp_lock_acquire>:
   10bd0:	4801      	ldr	r0, [pc, #4]	; (10bd8 <__sfp_lock_acquire+0x8>)
   10bd2:	f000 bc6b 	b.w	114ac <__retarget_lock_acquire_recursive>
   10bd6:	bf00      	nop
   10bd8:	2005e274 	.word	0x2005e274

00010bdc <__sfp_lock_release>:
   10bdc:	4801      	ldr	r0, [pc, #4]	; (10be4 <__sfp_lock_release+0x8>)
   10bde:	f000 bc67 	b.w	114b0 <__retarget_lock_release_recursive>
   10be2:	bf00      	nop
   10be4:	2005e274 	.word	0x2005e274

00010be8 <_fwalk_sglue>:
   10be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10bec:	4680      	mov	r8, r0
   10bee:	460f      	mov	r7, r1
   10bf0:	4616      	mov	r6, r2
   10bf2:	f04f 0900 	mov.w	r9, #0
   10bf6:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
   10bfa:	3d01      	subs	r5, #1
   10bfc:	d411      	bmi.n	10c22 <_fwalk_sglue+0x3a>
   10bfe:	89a3      	ldrh	r3, [r4, #12]
   10c00:	2b01      	cmp	r3, #1
   10c02:	f105 35ff 	add.w	r5, r5, #4294967295
   10c06:	d908      	bls.n	10c1a <_fwalk_sglue+0x32>
   10c08:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   10c0c:	3301      	adds	r3, #1
   10c0e:	4621      	mov	r1, r4
   10c10:	d003      	beq.n	10c1a <_fwalk_sglue+0x32>
   10c12:	4640      	mov	r0, r8
   10c14:	47b8      	blx	r7
   10c16:	ea49 0900 	orr.w	r9, r9, r0
   10c1a:	1c6b      	adds	r3, r5, #1
   10c1c:	f104 0468 	add.w	r4, r4, #104	; 0x68
   10c20:	d1ed      	bne.n	10bfe <_fwalk_sglue+0x16>
   10c22:	6836      	ldr	r6, [r6, #0]
   10c24:	2e00      	cmp	r6, #0
   10c26:	d1e6      	bne.n	10bf6 <_fwalk_sglue+0xe>
   10c28:	4648      	mov	r0, r9
   10c2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10c2e:	bf00      	nop

00010c30 <sprintf>:
   10c30:	b40e      	push	{r1, r2, r3}
   10c32:	b510      	push	{r4, lr}
   10c34:	b09d      	sub	sp, #116	; 0x74
   10c36:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   10c3a:	ab1f      	add	r3, sp, #124	; 0x7c
   10c3c:	e9cd 0106 	strd	r0, r1, [sp, #24]
   10c40:	9104      	str	r1, [sp, #16]
   10c42:	4909      	ldr	r1, [pc, #36]	; (10c68 <sprintf+0x38>)
   10c44:	f853 2b04 	ldr.w	r2, [r3], #4
   10c48:	9002      	str	r0, [sp, #8]
   10c4a:	4c08      	ldr	r4, [pc, #32]	; (10c6c <sprintf+0x3c>)
   10c4c:	6808      	ldr	r0, [r1, #0]
   10c4e:	9301      	str	r3, [sp, #4]
   10c50:	a902      	add	r1, sp, #8
   10c52:	9405      	str	r4, [sp, #20]
   10c54:	f002 f9dc 	bl	13010 <_svfprintf_r>
   10c58:	9b02      	ldr	r3, [sp, #8]
   10c5a:	2200      	movs	r2, #0
   10c5c:	701a      	strb	r2, [r3, #0]
   10c5e:	b01d      	add	sp, #116	; 0x74
   10c60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10c64:	b003      	add	sp, #12
   10c66:	4770      	bx	lr
   10c68:	2000c6f4 	.word	0x2000c6f4
   10c6c:	ffff0208 	.word	0xffff0208

00010c70 <sscanf>:
   10c70:	b40e      	push	{r1, r2, r3}
   10c72:	b510      	push	{r4, lr}
   10c74:	b09f      	sub	sp, #124	; 0x7c
   10c76:	ac21      	add	r4, sp, #132	; 0x84
   10c78:	f44f 7101 	mov.w	r1, #516	; 0x204
   10c7c:	f854 2b04 	ldr.w	r2, [r4], #4
   10c80:	9201      	str	r2, [sp, #4]
   10c82:	f8ad 101c 	strh.w	r1, [sp, #28]
   10c86:	9004      	str	r0, [sp, #16]
   10c88:	9008      	str	r0, [sp, #32]
   10c8a:	f000 fe39 	bl	11900 <strlen>
   10c8e:	9005      	str	r0, [sp, #20]
   10c90:	9009      	str	r0, [sp, #36]	; 0x24
   10c92:	480b      	ldr	r0, [pc, #44]	; (10cc0 <sscanf+0x50>)
   10c94:	490b      	ldr	r1, [pc, #44]	; (10cc4 <sscanf+0x54>)
   10c96:	910c      	str	r1, [sp, #48]	; 0x30
   10c98:	2300      	movs	r3, #0
   10c9a:	f64f 7cff 	movw	ip, #65535	; 0xffff
   10c9e:	9310      	str	r3, [sp, #64]	; 0x40
   10ca0:	9315      	str	r3, [sp, #84]	; 0x54
   10ca2:	9a01      	ldr	r2, [sp, #4]
   10ca4:	6800      	ldr	r0, [r0, #0]
   10ca6:	f8ad c01e 	strh.w	ip, [sp, #30]
   10caa:	4623      	mov	r3, r4
   10cac:	a904      	add	r1, sp, #16
   10cae:	9403      	str	r4, [sp, #12]
   10cb0:	f003 ff50 	bl	14b54 <__ssvfscanf_r>
   10cb4:	b01f      	add	sp, #124	; 0x7c
   10cb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10cba:	b003      	add	sp, #12
   10cbc:	4770      	bx	lr
   10cbe:	bf00      	nop
   10cc0:	2000c6f4 	.word	0x2000c6f4
   10cc4:	00010ced 	.word	0x00010ced

00010cc8 <__sread>:
   10cc8:	b510      	push	{r4, lr}
   10cca:	460c      	mov	r4, r1
   10ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   10cd0:	f000 fb80 	bl	113d4 <_read_r>
   10cd4:	2800      	cmp	r0, #0
   10cd6:	db03      	blt.n	10ce0 <__sread+0x18>
   10cd8:	6d23      	ldr	r3, [r4, #80]	; 0x50
   10cda:	4403      	add	r3, r0
   10cdc:	6523      	str	r3, [r4, #80]	; 0x50
   10cde:	bd10      	pop	{r4, pc}
   10ce0:	89a3      	ldrh	r3, [r4, #12]
   10ce2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   10ce6:	81a3      	strh	r3, [r4, #12]
   10ce8:	bd10      	pop	{r4, pc}
   10cea:	bf00      	nop

00010cec <__seofread>:
   10cec:	2000      	movs	r0, #0
   10cee:	4770      	bx	lr

00010cf0 <__swrite>:
   10cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10cf4:	460c      	mov	r4, r1
   10cf6:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   10cfa:	461f      	mov	r7, r3
   10cfc:	05cb      	lsls	r3, r1, #23
   10cfe:	4605      	mov	r5, r0
   10d00:	4616      	mov	r6, r2
   10d02:	d40b      	bmi.n	10d1c <__swrite+0x2c>
   10d04:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   10d08:	81a1      	strh	r1, [r4, #12]
   10d0a:	463b      	mov	r3, r7
   10d0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   10d10:	4632      	mov	r2, r6
   10d12:	4628      	mov	r0, r5
   10d14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   10d18:	f000 bb84 	b.w	11424 <_write_r>
   10d1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   10d20:	2302      	movs	r3, #2
   10d22:	2200      	movs	r2, #0
   10d24:	f000 fb40 	bl	113a8 <_lseek_r>
   10d28:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   10d2c:	e7ea      	b.n	10d04 <__swrite+0x14>
   10d2e:	bf00      	nop

00010d30 <__sseek>:
   10d30:	b510      	push	{r4, lr}
   10d32:	460c      	mov	r4, r1
   10d34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   10d38:	f000 fb36 	bl	113a8 <_lseek_r>
   10d3c:	89a3      	ldrh	r3, [r4, #12]
   10d3e:	1c42      	adds	r2, r0, #1
   10d40:	bf0e      	itee	eq
   10d42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   10d46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   10d4a:	6520      	strne	r0, [r4, #80]	; 0x50
   10d4c:	81a3      	strh	r3, [r4, #12]
   10d4e:	bd10      	pop	{r4, pc}

00010d50 <__sclose>:
   10d50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   10d54:	f000 bb16 	b.w	11384 <_close_r>

00010d58 <_vdprintf_r>:
   10d58:	b5f0      	push	{r4, r5, r6, r7, lr}
   10d5a:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
   10d5e:	af04      	add	r7, sp, #16
   10d60:	9300      	str	r3, [sp, #0]
   10d62:	4613      	mov	r3, r2
   10d64:	f44f 7200 	mov.w	r2, #512	; 0x200
   10d68:	460e      	mov	r6, r1
   10d6a:	9203      	str	r2, [sp, #12]
   10d6c:	4639      	mov	r1, r7
   10d6e:	aa03      	add	r2, sp, #12
   10d70:	4605      	mov	r5, r0
   10d72:	f000 f841 	bl	10df8 <_vasnprintf_r>
   10d76:	b188      	cbz	r0, 10d9c <_vdprintf_r+0x44>
   10d78:	4604      	mov	r4, r0
   10d7a:	4602      	mov	r2, r0
   10d7c:	9b03      	ldr	r3, [sp, #12]
   10d7e:	4631      	mov	r1, r6
   10d80:	4628      	mov	r0, r5
   10d82:	f000 fb4f 	bl	11424 <_write_r>
   10d86:	42bc      	cmp	r4, r7
   10d88:	9003      	str	r0, [sp, #12]
   10d8a:	d004      	beq.n	10d96 <_vdprintf_r+0x3e>
   10d8c:	4628      	mov	r0, r5
   10d8e:	4621      	mov	r1, r4
   10d90:	f000 fec8 	bl	11b24 <_free_r>
   10d94:	9803      	ldr	r0, [sp, #12]
   10d96:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
   10d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10d9c:	f04f 30ff 	mov.w	r0, #4294967295
   10da0:	e7f9      	b.n	10d96 <_vdprintf_r+0x3e>
   10da2:	bf00      	nop

00010da4 <vdprintf>:
   10da4:	b410      	push	{r4}
   10da6:	4c05      	ldr	r4, [pc, #20]	; (10dbc <vdprintf+0x18>)
   10da8:	4684      	mov	ip, r0
   10daa:	4613      	mov	r3, r2
   10dac:	6820      	ldr	r0, [r4, #0]
   10dae:	f85d 4b04 	ldr.w	r4, [sp], #4
   10db2:	460a      	mov	r2, r1
   10db4:	4661      	mov	r1, ip
   10db6:	f7ff bfcf 	b.w	10d58 <_vdprintf_r>
   10dba:	bf00      	nop
   10dbc:	2000c6f4 	.word	0x2000c6f4

00010dc0 <vsprintf>:
   10dc0:	b570      	push	{r4, r5, r6, lr}
   10dc2:	4e0b      	ldr	r6, [pc, #44]	; (10df0 <vsprintf+0x30>)
   10dc4:	b09a      	sub	sp, #104	; 0x68
   10dc6:	4604      	mov	r4, r0
   10dc8:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   10dcc:	e9cd 4504 	strd	r4, r5, [sp, #16]
   10dd0:	4613      	mov	r3, r2
   10dd2:	9400      	str	r4, [sp, #0]
   10dd4:	460a      	mov	r2, r1
   10dd6:	6830      	ldr	r0, [r6, #0]
   10dd8:	4c06      	ldr	r4, [pc, #24]	; (10df4 <vsprintf+0x34>)
   10dda:	9502      	str	r5, [sp, #8]
   10ddc:	4669      	mov	r1, sp
   10dde:	9403      	str	r4, [sp, #12]
   10de0:	f002 f916 	bl	13010 <_svfprintf_r>
   10de4:	9b00      	ldr	r3, [sp, #0]
   10de6:	2200      	movs	r2, #0
   10de8:	701a      	strb	r2, [r3, #0]
   10dea:	b01a      	add	sp, #104	; 0x68
   10dec:	bd70      	pop	{r4, r5, r6, pc}
   10dee:	bf00      	nop
   10df0:	2000c6f4 	.word	0x2000c6f4
   10df4:	ffff0208 	.word	0xffff0208

00010df8 <_vasnprintf_r>:
   10df8:	b530      	push	{r4, r5, lr}
   10dfa:	6814      	ldr	r4, [r2, #0]
   10dfc:	4615      	mov	r5, r2
   10dfe:	b09b      	sub	sp, #108	; 0x6c
   10e00:	461a      	mov	r2, r3
   10e02:	b109      	cbz	r1, 10e08 <_vasnprintf_r+0x10>
   10e04:	2c00      	cmp	r4, #0
   10e06:	d119      	bne.n	10e3c <_vasnprintf_r+0x44>
   10e08:	2100      	movs	r1, #0
   10e0a:	f44f 7322 	mov.w	r3, #648	; 0x288
   10e0e:	f8ad 300c 	strh.w	r3, [sp, #12]
   10e12:	9100      	str	r1, [sp, #0]
   10e14:	9104      	str	r1, [sp, #16]
   10e16:	f64f 73ff 	movw	r3, #65535	; 0xffff
   10e1a:	9102      	str	r1, [sp, #8]
   10e1c:	9105      	str	r1, [sp, #20]
   10e1e:	f8ad 300e 	strh.w	r3, [sp, #14]
   10e22:	4669      	mov	r1, sp
   10e24:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   10e26:	f002 f8f3 	bl	13010 <_svfprintf_r>
   10e2a:	2800      	cmp	r0, #0
   10e2c:	db13      	blt.n	10e56 <_vasnprintf_r+0x5e>
   10e2e:	9b00      	ldr	r3, [sp, #0]
   10e30:	6028      	str	r0, [r5, #0]
   10e32:	2200      	movs	r2, #0
   10e34:	701a      	strb	r2, [r3, #0]
   10e36:	9804      	ldr	r0, [sp, #16]
   10e38:	b01b      	add	sp, #108	; 0x6c
   10e3a:	bd30      	pop	{r4, r5, pc}
   10e3c:	f44f 63c1 	mov.w	r3, #1544	; 0x608
   10e40:	9100      	str	r1, [sp, #0]
   10e42:	9104      	str	r1, [sp, #16]
   10e44:	f8ad 300c 	strh.w	r3, [sp, #12]
   10e48:	4621      	mov	r1, r4
   10e4a:	dae4      	bge.n	10e16 <_vasnprintf_r+0x1e>
   10e4c:	238b      	movs	r3, #139	; 0x8b
   10e4e:	6003      	str	r3, [r0, #0]
   10e50:	2000      	movs	r0, #0
   10e52:	b01b      	add	sp, #108	; 0x6c
   10e54:	bd30      	pop	{r4, r5, pc}
   10e56:	2000      	movs	r0, #0
   10e58:	e7ee      	b.n	10e38 <_vasnprintf_r+0x40>
   10e5a:	bf00      	nop

00010e5c <memcmp>:
   10e5c:	2a03      	cmp	r2, #3
   10e5e:	b570      	push	{r4, r5, r6, lr}
   10e60:	d914      	bls.n	10e8c <memcmp+0x30>
   10e62:	ea40 0301 	orr.w	r3, r0, r1
   10e66:	079b      	lsls	r3, r3, #30
   10e68:	d122      	bne.n	10eb0 <memcmp+0x54>
   10e6a:	4604      	mov	r4, r0
   10e6c:	460b      	mov	r3, r1
   10e6e:	4619      	mov	r1, r3
   10e70:	4620      	mov	r0, r4
   10e72:	680e      	ldr	r6, [r1, #0]
   10e74:	6805      	ldr	r5, [r0, #0]
   10e76:	42b5      	cmp	r5, r6
   10e78:	f104 0404 	add.w	r4, r4, #4
   10e7c:	f103 0304 	add.w	r3, r3, #4
   10e80:	d116      	bne.n	10eb0 <memcmp+0x54>
   10e82:	3a04      	subs	r2, #4
   10e84:	2a03      	cmp	r2, #3
   10e86:	4620      	mov	r0, r4
   10e88:	4619      	mov	r1, r3
   10e8a:	d8f0      	bhi.n	10e6e <memcmp+0x12>
   10e8c:	1e54      	subs	r4, r2, #1
   10e8e:	b19a      	cbz	r2, 10eb8 <memcmp+0x5c>
   10e90:	1e42      	subs	r2, r0, #1
   10e92:	3901      	subs	r1, #1
   10e94:	e001      	b.n	10e9a <memcmp+0x3e>
   10e96:	18c3      	adds	r3, r0, r3
   10e98:	d00c      	beq.n	10eb4 <memcmp+0x58>
   10e9a:	f812 ef01 	ldrb.w	lr, [r2, #1]!
   10e9e:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   10ea2:	45e6      	cmp	lr, ip
   10ea4:	eba4 0302 	sub.w	r3, r4, r2
   10ea8:	d0f5      	beq.n	10e96 <memcmp+0x3a>
   10eaa:	ebae 000c 	sub.w	r0, lr, ip
   10eae:	bd70      	pop	{r4, r5, r6, pc}
   10eb0:	1e54      	subs	r4, r2, #1
   10eb2:	e7ed      	b.n	10e90 <memcmp+0x34>
   10eb4:	4618      	mov	r0, r3
   10eb6:	bd70      	pop	{r4, r5, r6, pc}
   10eb8:	4610      	mov	r0, r2
   10eba:	bd70      	pop	{r4, r5, r6, pc}

00010ebc <memmove>:
   10ebc:	4288      	cmp	r0, r1
   10ebe:	d90d      	bls.n	10edc <memmove+0x20>
   10ec0:	188b      	adds	r3, r1, r2
   10ec2:	4283      	cmp	r3, r0
   10ec4:	d90a      	bls.n	10edc <memmove+0x20>
   10ec6:	eb00 0c02 	add.w	ip, r0, r2
   10eca:	b1ba      	cbz	r2, 10efc <memmove+0x40>
   10ecc:	4662      	mov	r2, ip
   10ece:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
   10ed2:	f802 cd01 	strb.w	ip, [r2, #-1]!
   10ed6:	4299      	cmp	r1, r3
   10ed8:	d1f9      	bne.n	10ece <memmove+0x12>
   10eda:	4770      	bx	lr
   10edc:	2a0f      	cmp	r2, #15
   10ede:	d80e      	bhi.n	10efe <memmove+0x42>
   10ee0:	4603      	mov	r3, r0
   10ee2:	f102 3cff 	add.w	ip, r2, #4294967295
   10ee6:	b14a      	cbz	r2, 10efc <memmove+0x40>
   10ee8:	f10c 0c01 	add.w	ip, ip, #1
   10eec:	3b01      	subs	r3, #1
   10eee:	448c      	add	ip, r1
   10ef0:	f811 2b01 	ldrb.w	r2, [r1], #1
   10ef4:	f803 2f01 	strb.w	r2, [r3, #1]!
   10ef8:	4561      	cmp	r1, ip
   10efa:	d1f9      	bne.n	10ef0 <memmove+0x34>
   10efc:	4770      	bx	lr
   10efe:	ea40 0301 	orr.w	r3, r0, r1
   10f02:	079b      	lsls	r3, r3, #30
   10f04:	d150      	bne.n	10fa8 <memmove+0xec>
   10f06:	f1a2 0310 	sub.w	r3, r2, #16
   10f0a:	b570      	push	{r4, r5, r6, lr}
   10f0c:	f101 0c20 	add.w	ip, r1, #32
   10f10:	f023 050f 	bic.w	r5, r3, #15
   10f14:	f101 0e10 	add.w	lr, r1, #16
   10f18:	f100 0410 	add.w	r4, r0, #16
   10f1c:	44ac      	add	ip, r5
   10f1e:	091b      	lsrs	r3, r3, #4
   10f20:	f85e 5c10 	ldr.w	r5, [lr, #-16]
   10f24:	f844 5c10 	str.w	r5, [r4, #-16]
   10f28:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   10f2c:	f844 5c0c 	str.w	r5, [r4, #-12]
   10f30:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   10f34:	f844 5c08 	str.w	r5, [r4, #-8]
   10f38:	f85e 5c04 	ldr.w	r5, [lr, #-4]
   10f3c:	f844 5c04 	str.w	r5, [r4, #-4]
   10f40:	f10e 0e10 	add.w	lr, lr, #16
   10f44:	45e6      	cmp	lr, ip
   10f46:	f104 0410 	add.w	r4, r4, #16
   10f4a:	d1e9      	bne.n	10f20 <memmove+0x64>
   10f4c:	3301      	adds	r3, #1
   10f4e:	f012 0f0c 	tst.w	r2, #12
   10f52:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   10f56:	f002 040f 	and.w	r4, r2, #15
   10f5a:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   10f5e:	d027      	beq.n	10fb0 <memmove+0xf4>
   10f60:	3c04      	subs	r4, #4
   10f62:	f024 0603 	bic.w	r6, r4, #3
   10f66:	ea4f 0c94 	mov.w	ip, r4, lsr #2
   10f6a:	441e      	add	r6, r3
   10f6c:	1f1c      	subs	r4, r3, #4
   10f6e:	468e      	mov	lr, r1
   10f70:	f85e 5b04 	ldr.w	r5, [lr], #4
   10f74:	f844 5f04 	str.w	r5, [r4, #4]!
   10f78:	42b4      	cmp	r4, r6
   10f7a:	d1f9      	bne.n	10f70 <memmove+0xb4>
   10f7c:	f10c 0401 	add.w	r4, ip, #1
   10f80:	f002 0203 	and.w	r2, r2, #3
   10f84:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   10f88:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   10f8c:	f102 3cff 	add.w	ip, r2, #4294967295
   10f90:	b14a      	cbz	r2, 10fa6 <memmove+0xea>
   10f92:	f10c 0c01 	add.w	ip, ip, #1
   10f96:	3b01      	subs	r3, #1
   10f98:	448c      	add	ip, r1
   10f9a:	f811 2b01 	ldrb.w	r2, [r1], #1
   10f9e:	f803 2f01 	strb.w	r2, [r3, #1]!
   10fa2:	4561      	cmp	r1, ip
   10fa4:	d1f9      	bne.n	10f9a <memmove+0xde>
   10fa6:	bd70      	pop	{r4, r5, r6, pc}
   10fa8:	f102 3cff 	add.w	ip, r2, #4294967295
   10fac:	4603      	mov	r3, r0
   10fae:	e79b      	b.n	10ee8 <memmove+0x2c>
   10fb0:	4622      	mov	r2, r4
   10fb2:	e7eb      	b.n	10f8c <memmove+0xd0>

00010fb4 <memset>:
   10fb4:	0783      	lsls	r3, r0, #30
   10fb6:	b530      	push	{r4, r5, lr}
   10fb8:	d048      	beq.n	1104c <memset+0x98>
   10fba:	1e54      	subs	r4, r2, #1
   10fbc:	2a00      	cmp	r2, #0
   10fbe:	d03f      	beq.n	11040 <memset+0x8c>
   10fc0:	b2ca      	uxtb	r2, r1
   10fc2:	4603      	mov	r3, r0
   10fc4:	e001      	b.n	10fca <memset+0x16>
   10fc6:	3c01      	subs	r4, #1
   10fc8:	d33a      	bcc.n	11040 <memset+0x8c>
   10fca:	f803 2b01 	strb.w	r2, [r3], #1
   10fce:	079d      	lsls	r5, r3, #30
   10fd0:	d1f9      	bne.n	10fc6 <memset+0x12>
   10fd2:	2c03      	cmp	r4, #3
   10fd4:	d92d      	bls.n	11032 <memset+0x7e>
   10fd6:	b2cd      	uxtb	r5, r1
   10fd8:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   10fdc:	2c0f      	cmp	r4, #15
   10fde:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   10fe2:	d936      	bls.n	11052 <memset+0x9e>
   10fe4:	f1a4 0210 	sub.w	r2, r4, #16
   10fe8:	f022 0c0f 	bic.w	ip, r2, #15
   10fec:	f103 0e20 	add.w	lr, r3, #32
   10ff0:	44e6      	add	lr, ip
   10ff2:	ea4f 1c12 	mov.w	ip, r2, lsr #4
   10ff6:	f103 0210 	add.w	r2, r3, #16
   10ffa:	e942 5504 	strd	r5, r5, [r2, #-16]
   10ffe:	e942 5502 	strd	r5, r5, [r2, #-8]
   11002:	3210      	adds	r2, #16
   11004:	4572      	cmp	r2, lr
   11006:	d1f8      	bne.n	10ffa <memset+0x46>
   11008:	f10c 0201 	add.w	r2, ip, #1
   1100c:	f014 0f0c 	tst.w	r4, #12
   11010:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   11014:	f004 0c0f 	and.w	ip, r4, #15
   11018:	d013      	beq.n	11042 <memset+0x8e>
   1101a:	f1ac 0304 	sub.w	r3, ip, #4
   1101e:	f023 0303 	bic.w	r3, r3, #3
   11022:	3304      	adds	r3, #4
   11024:	4413      	add	r3, r2
   11026:	f842 5b04 	str.w	r5, [r2], #4
   1102a:	4293      	cmp	r3, r2
   1102c:	d1fb      	bne.n	11026 <memset+0x72>
   1102e:	f00c 0403 	and.w	r4, ip, #3
   11032:	b12c      	cbz	r4, 11040 <memset+0x8c>
   11034:	b2c9      	uxtb	r1, r1
   11036:	441c      	add	r4, r3
   11038:	f803 1b01 	strb.w	r1, [r3], #1
   1103c:	429c      	cmp	r4, r3
   1103e:	d1fb      	bne.n	11038 <memset+0x84>
   11040:	bd30      	pop	{r4, r5, pc}
   11042:	4664      	mov	r4, ip
   11044:	4613      	mov	r3, r2
   11046:	2c00      	cmp	r4, #0
   11048:	d1f4      	bne.n	11034 <memset+0x80>
   1104a:	e7f9      	b.n	11040 <memset+0x8c>
   1104c:	4603      	mov	r3, r0
   1104e:	4614      	mov	r4, r2
   11050:	e7bf      	b.n	10fd2 <memset+0x1e>
   11052:	461a      	mov	r2, r3
   11054:	46a4      	mov	ip, r4
   11056:	e7e0      	b.n	1101a <memset+0x66>

00011058 <strcasecmp>:
   11058:	b430      	push	{r4, r5}
   1105a:	4d13      	ldr	r5, [pc, #76]	; (110a8 <strcasecmp+0x50>)
   1105c:	f810 4b01 	ldrb.w	r4, [r0], #1
   11060:	5d2b      	ldrb	r3, [r5, r4]
   11062:	f003 0303 	and.w	r3, r3, #3
   11066:	2b01      	cmp	r3, #1
   11068:	f811 3b01 	ldrb.w	r3, [r1], #1
   1106c:	f815 c003 	ldrb.w	ip, [r5, r3]
   11070:	f00c 0c03 	and.w	ip, ip, #3
   11074:	4622      	mov	r2, r4
   11076:	bf08      	it	eq
   11078:	f104 0220 	addeq.w	r2, r4, #32
   1107c:	f1bc 0f01 	cmp.w	ip, #1
   11080:	461c      	mov	r4, r3
   11082:	d006      	beq.n	11092 <strcasecmp+0x3a>
   11084:	1ad2      	subs	r2, r2, r3
   11086:	d10a      	bne.n	1109e <strcasecmp+0x46>
   11088:	2b00      	cmp	r3, #0
   1108a:	d1e7      	bne.n	1105c <strcasecmp+0x4>
   1108c:	4620      	mov	r0, r4
   1108e:	bc30      	pop	{r4, r5}
   11090:	4770      	bx	lr
   11092:	3320      	adds	r3, #32
   11094:	1ad4      	subs	r4, r2, r3
   11096:	d0e1      	beq.n	1105c <strcasecmp+0x4>
   11098:	4620      	mov	r0, r4
   1109a:	bc30      	pop	{r4, r5}
   1109c:	4770      	bx	lr
   1109e:	4614      	mov	r4, r2
   110a0:	4620      	mov	r0, r4
   110a2:	bc30      	pop	{r4, r5}
   110a4:	4770      	bx	lr
   110a6:	bf00      	nop
   110a8:	2000369d 	.word	0x2000369d

000110ac <strcat>:
   110ac:	0783      	lsls	r3, r0, #30
   110ae:	b510      	push	{r4, lr}
   110b0:	4604      	mov	r4, r0
   110b2:	d110      	bne.n	110d6 <strcat+0x2a>
   110b4:	6802      	ldr	r2, [r0, #0]
   110b6:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   110ba:	ea23 0302 	bic.w	r3, r3, r2
   110be:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   110c2:	d108      	bne.n	110d6 <strcat+0x2a>
   110c4:	f850 2f04 	ldr.w	r2, [r0, #4]!
   110c8:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   110cc:	ea23 0302 	bic.w	r3, r3, r2
   110d0:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   110d4:	d0f6      	beq.n	110c4 <strcat+0x18>
   110d6:	7803      	ldrb	r3, [r0, #0]
   110d8:	b11b      	cbz	r3, 110e2 <strcat+0x36>
   110da:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   110de:	2b00      	cmp	r3, #0
   110e0:	d1fb      	bne.n	110da <strcat+0x2e>
   110e2:	f000 fb5b 	bl	1179c <strcpy>
   110e6:	4620      	mov	r0, r4
   110e8:	bd10      	pop	{r4, pc}
   110ea:	bf00      	nop

000110ec <strchr>:
   110ec:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
   110f0:	4603      	mov	r3, r0
   110f2:	d044      	beq.n	1117e <strchr+0x92>
   110f4:	0782      	lsls	r2, r0, #30
   110f6:	d132      	bne.n	1115e <strchr+0x72>
   110f8:	b510      	push	{r4, lr}
   110fa:	6804      	ldr	r4, [r0, #0]
   110fc:	ea41 2e01 	orr.w	lr, r1, r1, lsl #8
   11100:	ea4e 4e0e 	orr.w	lr, lr, lr, lsl #16
   11104:	ea8e 0204 	eor.w	r2, lr, r4
   11108:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   1110c:	ea23 0302 	bic.w	r3, r3, r2
   11110:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   11114:	ea22 0204 	bic.w	r2, r2, r4
   11118:	4313      	orrs	r3, r2
   1111a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   1111e:	d10f      	bne.n	11140 <strchr+0x54>
   11120:	f850 4f04 	ldr.w	r4, [r0, #4]!
   11124:	ea84 0c0e 	eor.w	ip, r4, lr
   11128:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
   1112c:	f1ac 3201 	sub.w	r2, ip, #16843009	; 0x1010101
   11130:	ea23 0304 	bic.w	r3, r3, r4
   11134:	ea22 020c 	bic.w	r2, r2, ip
   11138:	4313      	orrs	r3, r2
   1113a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   1113e:	d0ef      	beq.n	11120 <strchr+0x34>
   11140:	7803      	ldrb	r3, [r0, #0]
   11142:	b923      	cbnz	r3, 1114e <strchr+0x62>
   11144:	e036      	b.n	111b4 <strchr+0xc8>
   11146:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1114a:	2b00      	cmp	r3, #0
   1114c:	d032      	beq.n	111b4 <strchr+0xc8>
   1114e:	4299      	cmp	r1, r3
   11150:	d1f9      	bne.n	11146 <strchr+0x5a>
   11152:	bd10      	pop	{r4, pc}
   11154:	428a      	cmp	r2, r1
   11156:	d011      	beq.n	1117c <strchr+0x90>
   11158:	079a      	lsls	r2, r3, #30
   1115a:	4618      	mov	r0, r3
   1115c:	d0cc      	beq.n	110f8 <strchr+0xc>
   1115e:	4618      	mov	r0, r3
   11160:	f813 2b01 	ldrb.w	r2, [r3], #1
   11164:	2a00      	cmp	r2, #0
   11166:	d1f5      	bne.n	11154 <strchr+0x68>
   11168:	4610      	mov	r0, r2
   1116a:	4770      	bx	lr
   1116c:	0799      	lsls	r1, r3, #30
   1116e:	4618      	mov	r0, r3
   11170:	d007      	beq.n	11182 <strchr+0x96>
   11172:	4618      	mov	r0, r3
   11174:	3301      	adds	r3, #1
   11176:	7802      	ldrb	r2, [r0, #0]
   11178:	2a00      	cmp	r2, #0
   1117a:	d1f7      	bne.n	1116c <strchr+0x80>
   1117c:	4770      	bx	lr
   1117e:	0782      	lsls	r2, r0, #30
   11180:	d1f7      	bne.n	11172 <strchr+0x86>
   11182:	6802      	ldr	r2, [r0, #0]
   11184:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   11188:	ea23 0302 	bic.w	r3, r3, r2
   1118c:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   11190:	d108      	bne.n	111a4 <strchr+0xb8>
   11192:	f850 2f04 	ldr.w	r2, [r0, #4]!
   11196:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   1119a:	ea23 0302 	bic.w	r3, r3, r2
   1119e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   111a2:	d0f6      	beq.n	11192 <strchr+0xa6>
   111a4:	7803      	ldrb	r3, [r0, #0]
   111a6:	2b00      	cmp	r3, #0
   111a8:	d0e8      	beq.n	1117c <strchr+0x90>
   111aa:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   111ae:	2b00      	cmp	r3, #0
   111b0:	d1fb      	bne.n	111aa <strchr+0xbe>
   111b2:	4770      	bx	lr
   111b4:	4618      	mov	r0, r3
   111b6:	bd10      	pop	{r4, pc}

000111b8 <strncat>:
   111b8:	0783      	lsls	r3, r0, #30
   111ba:	b430      	push	{r4, r5}
   111bc:	d127      	bne.n	1120e <strncat+0x56>
   111be:	6804      	ldr	r4, [r0, #0]
   111c0:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
   111c4:	ea23 0304 	bic.w	r3, r3, r4
   111c8:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   111cc:	4603      	mov	r3, r0
   111ce:	d108      	bne.n	111e2 <strncat+0x2a>
   111d0:	f853 5f04 	ldr.w	r5, [r3, #4]!
   111d4:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   111d8:	ea24 0405 	bic.w	r4, r4, r5
   111dc:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   111e0:	d0f6      	beq.n	111d0 <strncat+0x18>
   111e2:	781c      	ldrb	r4, [r3, #0]
   111e4:	b11c      	cbz	r4, 111ee <strncat+0x36>
   111e6:	f813 4f01 	ldrb.w	r4, [r3, #1]!
   111ea:	2c00      	cmp	r4, #0
   111ec:	d1fb      	bne.n	111e6 <strncat+0x2e>
   111ee:	3901      	subs	r1, #1
   111f0:	eb03 0c02 	add.w	ip, r3, r2
   111f4:	459c      	cmp	ip, r3
   111f6:	d008      	beq.n	1120a <strncat+0x52>
   111f8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   111fc:	f803 2b01 	strb.w	r2, [r3], #1
   11200:	b11a      	cbz	r2, 1120a <strncat+0x52>
   11202:	4563      	cmp	r3, ip
   11204:	d1f6      	bne.n	111f4 <strncat+0x3c>
   11206:	2200      	movs	r2, #0
   11208:	701a      	strb	r2, [r3, #0]
   1120a:	bc30      	pop	{r4, r5}
   1120c:	4770      	bx	lr
   1120e:	4603      	mov	r3, r0
   11210:	e7e7      	b.n	111e2 <strncat+0x2a>
   11212:	bf00      	nop

00011214 <strncmp>:
   11214:	2a00      	cmp	r2, #0
   11216:	d03e      	beq.n	11296 <strncmp+0x82>
   11218:	ea40 0301 	orr.w	r3, r0, r1
   1121c:	079b      	lsls	r3, r3, #30
   1121e:	b530      	push	{r4, r5, lr}
   11220:	4684      	mov	ip, r0
   11222:	d12f      	bne.n	11284 <strncmp+0x70>
   11224:	2a03      	cmp	r2, #3
   11226:	d92d      	bls.n	11284 <strncmp+0x70>
   11228:	460b      	mov	r3, r1
   1122a:	e008      	b.n	1123e <strncmp+0x2a>
   1122c:	3a04      	subs	r2, #4
   1122e:	4684      	mov	ip, r0
   11230:	4619      	mov	r1, r3
   11232:	d025      	beq.n	11280 <strncmp+0x6c>
   11234:	f01e 3f80 	tst.w	lr, #2155905152	; 0x80808080
   11238:	d122      	bne.n	11280 <strncmp+0x6c>
   1123a:	2a03      	cmp	r2, #3
   1123c:	d922      	bls.n	11284 <strncmp+0x70>
   1123e:	6804      	ldr	r4, [r0, #0]
   11240:	4619      	mov	r1, r3
   11242:	f853 5b04 	ldr.w	r5, [r3], #4
   11246:	f1a4 3e01 	sub.w	lr, r4, #16843009	; 0x1010101
   1124a:	42ac      	cmp	r4, r5
   1124c:	4684      	mov	ip, r0
   1124e:	ea2e 0e04 	bic.w	lr, lr, r4
   11252:	f100 0004 	add.w	r0, r0, #4
   11256:	d0e9      	beq.n	1122c <strncmp+0x18>
   11258:	f89c 0000 	ldrb.w	r0, [ip]
   1125c:	780c      	ldrb	r4, [r1, #0]
   1125e:	42a0      	cmp	r0, r4
   11260:	d11b      	bne.n	1129a <strncmp+0x86>
   11262:	46e6      	mov	lr, ip
   11264:	b168      	cbz	r0, 11282 <strncmp+0x6e>
   11266:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
   1126a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1126e:	eba2 030e 	sub.w	r3, r2, lr
   11272:	42a0      	cmp	r0, r4
   11274:	f103 33ff 	add.w	r3, r3, #4294967295
   11278:	d10f      	bne.n	1129a <strncmp+0x86>
   1127a:	eb1c 0303 	adds.w	r3, ip, r3
   1127e:	d1f1      	bne.n	11264 <strncmp+0x50>
   11280:	2000      	movs	r0, #0
   11282:	bd30      	pop	{r4, r5, pc}
   11284:	f89c 0000 	ldrb.w	r0, [ip]
   11288:	780c      	ldrb	r4, [r1, #0]
   1128a:	4284      	cmp	r4, r0
   1128c:	d105      	bne.n	1129a <strncmp+0x86>
   1128e:	2a01      	cmp	r2, #1
   11290:	d0f6      	beq.n	11280 <strncmp+0x6c>
   11292:	46e6      	mov	lr, ip
   11294:	e7e6      	b.n	11264 <strncmp+0x50>
   11296:	4610      	mov	r0, r2
   11298:	4770      	bx	lr
   1129a:	1b00      	subs	r0, r0, r4
   1129c:	bd30      	pop	{r4, r5, pc}
   1129e:	bf00      	nop

000112a0 <strncpy>:
   112a0:	ea40 0301 	orr.w	r3, r0, r1
   112a4:	079b      	lsls	r3, r3, #30
   112a6:	b530      	push	{r4, r5, lr}
   112a8:	d101      	bne.n	112ae <strncpy+0xe>
   112aa:	2a03      	cmp	r2, #3
   112ac:	d80f      	bhi.n	112ce <strncpy+0x2e>
   112ae:	4684      	mov	ip, r0
   112b0:	f101 3eff 	add.w	lr, r1, #4294967295
   112b4:	e007      	b.n	112c6 <strncpy+0x26>
   112b6:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
   112ba:	f803 1b01 	strb.w	r1, [r3], #1
   112be:	1e54      	subs	r4, r2, #1
   112c0:	b1c1      	cbz	r1, 112f4 <strncpy+0x54>
   112c2:	469c      	mov	ip, r3
   112c4:	4622      	mov	r2, r4
   112c6:	4663      	mov	r3, ip
   112c8:	2a00      	cmp	r2, #0
   112ca:	d1f4      	bne.n	112b6 <strncpy+0x16>
   112cc:	bd30      	pop	{r4, r5, pc}
   112ce:	460b      	mov	r3, r1
   112d0:	4684      	mov	ip, r0
   112d2:	4619      	mov	r1, r3
   112d4:	f853 5b04 	ldr.w	r5, [r3], #4
   112d8:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   112dc:	ea24 0405 	bic.w	r4, r4, r5
   112e0:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   112e4:	d1e4      	bne.n	112b0 <strncpy+0x10>
   112e6:	3a04      	subs	r2, #4
   112e8:	2a03      	cmp	r2, #3
   112ea:	f84c 5b04 	str.w	r5, [ip], #4
   112ee:	4619      	mov	r1, r3
   112f0:	d8ef      	bhi.n	112d2 <strncpy+0x32>
   112f2:	e7dd      	b.n	112b0 <strncpy+0x10>
   112f4:	4494      	add	ip, r2
   112f6:	2c00      	cmp	r4, #0
   112f8:	d0e8      	beq.n	112cc <strncpy+0x2c>
   112fa:	f803 1b01 	strb.w	r1, [r3], #1
   112fe:	4563      	cmp	r3, ip
   11300:	d1fb      	bne.n	112fa <strncpy+0x5a>
   11302:	bd30      	pop	{r4, r5, pc}

00011304 <strrchr>:
   11304:	b538      	push	{r3, r4, r5, lr}
   11306:	f011 04ff 	ands.w	r4, r1, #255	; 0xff
   1130a:	d00c      	beq.n	11326 <strrchr+0x22>
   1130c:	4603      	mov	r3, r0
   1130e:	2500      	movs	r5, #0
   11310:	e001      	b.n	11316 <strrchr+0x12>
   11312:	1c43      	adds	r3, r0, #1
   11314:	4605      	mov	r5, r0
   11316:	4618      	mov	r0, r3
   11318:	4621      	mov	r1, r4
   1131a:	f7ff fee7 	bl	110ec <strchr>
   1131e:	2800      	cmp	r0, #0
   11320:	d1f7      	bne.n	11312 <strrchr+0xe>
   11322:	4628      	mov	r0, r5
   11324:	bd38      	pop	{r3, r4, r5, pc}
   11326:	4621      	mov	r1, r4
   11328:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1132c:	f7ff bede 	b.w	110ec <strchr>

00011330 <stpcpy>:
   11330:	ea41 0300 	orr.w	r3, r1, r0
   11334:	079b      	lsls	r3, r3, #30
   11336:	d115      	bne.n	11364 <stpcpy+0x34>
   11338:	680b      	ldr	r3, [r1, #0]
   1133a:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   1133e:	ea22 0203 	bic.w	r2, r2, r3
   11342:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   11346:	d10d      	bne.n	11364 <stpcpy+0x34>
   11348:	f101 0c04 	add.w	ip, r1, #4
   1134c:	f840 3b04 	str.w	r3, [r0], #4
   11350:	4661      	mov	r1, ip
   11352:	f85c 3b04 	ldr.w	r3, [ip], #4
   11356:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   1135a:	ea22 0203 	bic.w	r2, r2, r3
   1135e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   11362:	d0f3      	beq.n	1134c <stpcpy+0x1c>
   11364:	4603      	mov	r3, r0
   11366:	f811 2b01 	ldrb.w	r2, [r1], #1
   1136a:	4618      	mov	r0, r3
   1136c:	f803 2b01 	strb.w	r2, [r3], #1
   11370:	2a00      	cmp	r2, #0
   11372:	d1f8      	bne.n	11366 <stpcpy+0x36>
   11374:	4770      	bx	lr
   11376:	bf00      	nop

00011378 <__locale_mb_cur_max>:
   11378:	4b01      	ldr	r3, [pc, #4]	; (11380 <__locale_mb_cur_max+0x8>)
   1137a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   1137e:	4770      	bx	lr
   11380:	2000c16c 	.word	0x2000c16c

00011384 <_close_r>:
   11384:	b538      	push	{r3, r4, r5, lr}
   11386:	4d07      	ldr	r5, [pc, #28]	; (113a4 <_close_r+0x20>)
   11388:	2200      	movs	r2, #0
   1138a:	4604      	mov	r4, r0
   1138c:	4608      	mov	r0, r1
   1138e:	602a      	str	r2, [r5, #0]
   11390:	f7fc faa2 	bl	d8d8 <_close>
   11394:	1c43      	adds	r3, r0, #1
   11396:	d000      	beq.n	1139a <_close_r+0x16>
   11398:	bd38      	pop	{r3, r4, r5, pc}
   1139a:	682b      	ldr	r3, [r5, #0]
   1139c:	2b00      	cmp	r3, #0
   1139e:	d0fb      	beq.n	11398 <_close_r+0x14>
   113a0:	6023      	str	r3, [r4, #0]
   113a2:	bd38      	pop	{r3, r4, r5, pc}
   113a4:	2005e3f8 	.word	0x2005e3f8

000113a8 <_lseek_r>:
   113a8:	b538      	push	{r3, r4, r5, lr}
   113aa:	460c      	mov	r4, r1
   113ac:	4d08      	ldr	r5, [pc, #32]	; (113d0 <_lseek_r+0x28>)
   113ae:	4684      	mov	ip, r0
   113b0:	4611      	mov	r1, r2
   113b2:	4620      	mov	r0, r4
   113b4:	461a      	mov	r2, r3
   113b6:	2300      	movs	r3, #0
   113b8:	602b      	str	r3, [r5, #0]
   113ba:	4664      	mov	r4, ip
   113bc:	f7fc fa98 	bl	d8f0 <_lseek>
   113c0:	1c43      	adds	r3, r0, #1
   113c2:	d000      	beq.n	113c6 <_lseek_r+0x1e>
   113c4:	bd38      	pop	{r3, r4, r5, pc}
   113c6:	682b      	ldr	r3, [r5, #0]
   113c8:	2b00      	cmp	r3, #0
   113ca:	d0fb      	beq.n	113c4 <_lseek_r+0x1c>
   113cc:	6023      	str	r3, [r4, #0]
   113ce:	bd38      	pop	{r3, r4, r5, pc}
   113d0:	2005e3f8 	.word	0x2005e3f8

000113d4 <_read_r>:
   113d4:	b538      	push	{r3, r4, r5, lr}
   113d6:	460c      	mov	r4, r1
   113d8:	4d08      	ldr	r5, [pc, #32]	; (113fc <_read_r+0x28>)
   113da:	4684      	mov	ip, r0
   113dc:	4611      	mov	r1, r2
   113de:	4620      	mov	r0, r4
   113e0:	461a      	mov	r2, r3
   113e2:	2300      	movs	r3, #0
   113e4:	602b      	str	r3, [r5, #0]
   113e6:	4664      	mov	r4, ip
   113e8:	f7fc fa74 	bl	d8d4 <_read>
   113ec:	1c43      	adds	r3, r0, #1
   113ee:	d000      	beq.n	113f2 <_read_r+0x1e>
   113f0:	bd38      	pop	{r3, r4, r5, pc}
   113f2:	682b      	ldr	r3, [r5, #0]
   113f4:	2b00      	cmp	r3, #0
   113f6:	d0fb      	beq.n	113f0 <_read_r+0x1c>
   113f8:	6023      	str	r3, [r4, #0]
   113fa:	bd38      	pop	{r3, r4, r5, pc}
   113fc:	2005e3f8 	.word	0x2005e3f8

00011400 <_sbrk_r>:
   11400:	b538      	push	{r3, r4, r5, lr}
   11402:	4d07      	ldr	r5, [pc, #28]	; (11420 <_sbrk_r+0x20>)
   11404:	2200      	movs	r2, #0
   11406:	4604      	mov	r4, r0
   11408:	4608      	mov	r0, r1
   1140a:	602a      	str	r2, [r5, #0]
   1140c:	f7fc fa48 	bl	d8a0 <_sbrk>
   11410:	1c43      	adds	r3, r0, #1
   11412:	d000      	beq.n	11416 <_sbrk_r+0x16>
   11414:	bd38      	pop	{r3, r4, r5, pc}
   11416:	682b      	ldr	r3, [r5, #0]
   11418:	2b00      	cmp	r3, #0
   1141a:	d0fb      	beq.n	11414 <_sbrk_r+0x14>
   1141c:	6023      	str	r3, [r4, #0]
   1141e:	bd38      	pop	{r3, r4, r5, pc}
   11420:	2005e3f8 	.word	0x2005e3f8

00011424 <_write_r>:
   11424:	b538      	push	{r3, r4, r5, lr}
   11426:	460c      	mov	r4, r1
   11428:	4d08      	ldr	r5, [pc, #32]	; (1144c <_write_r+0x28>)
   1142a:	4684      	mov	ip, r0
   1142c:	4611      	mov	r1, r2
   1142e:	4620      	mov	r0, r4
   11430:	461a      	mov	r2, r3
   11432:	2300      	movs	r3, #0
   11434:	602b      	str	r3, [r5, #0]
   11436:	4664      	mov	r4, ip
   11438:	f7fb f9a8 	bl	c78c <_write>
   1143c:	1c43      	adds	r3, r0, #1
   1143e:	d000      	beq.n	11442 <_write_r+0x1e>
   11440:	bd38      	pop	{r3, r4, r5, pc}
   11442:	682b      	ldr	r3, [r5, #0]
   11444:	2b00      	cmp	r3, #0
   11446:	d0fb      	beq.n	11440 <_write_r+0x1c>
   11448:	6023      	str	r3, [r4, #0]
   1144a:	bd38      	pop	{r3, r4, r5, pc}
   1144c:	2005e3f8 	.word	0x2005e3f8

00011450 <__errno>:
   11450:	4b01      	ldr	r3, [pc, #4]	; (11458 <__errno+0x8>)
   11452:	6818      	ldr	r0, [r3, #0]
   11454:	4770      	bx	lr
   11456:	bf00      	nop
   11458:	2000c6f4 	.word	0x2000c6f4

0001145c <__libc_init_array>:
   1145c:	b570      	push	{r4, r5, r6, lr}
   1145e:	4e0d      	ldr	r6, [pc, #52]	; (11494 <__libc_init_array+0x38>)
   11460:	4d0d      	ldr	r5, [pc, #52]	; (11498 <__libc_init_array+0x3c>)
   11462:	1b76      	subs	r6, r6, r5
   11464:	10b6      	asrs	r6, r6, #2
   11466:	d006      	beq.n	11476 <__libc_init_array+0x1a>
   11468:	2400      	movs	r4, #0
   1146a:	f855 3b04 	ldr.w	r3, [r5], #4
   1146e:	3401      	adds	r4, #1
   11470:	4798      	blx	r3
   11472:	42a6      	cmp	r6, r4
   11474:	d1f9      	bne.n	1146a <__libc_init_array+0xe>
   11476:	4e09      	ldr	r6, [pc, #36]	; (1149c <__libc_init_array+0x40>)
   11478:	4d09      	ldr	r5, [pc, #36]	; (114a0 <__libc_init_array+0x44>)
   1147a:	1b76      	subs	r6, r6, r5
   1147c:	f008 fbe0 	bl	19c40 <___init_veneer>
   11480:	10b6      	asrs	r6, r6, #2
   11482:	d006      	beq.n	11492 <__libc_init_array+0x36>
   11484:	2400      	movs	r4, #0
   11486:	f855 3b04 	ldr.w	r3, [r5], #4
   1148a:	3401      	adds	r4, #1
   1148c:	4798      	blx	r3
   1148e:	42a6      	cmp	r6, r4
   11490:	d1f9      	bne.n	11486 <__libc_init_array+0x2a>
   11492:	bd70      	pop	{r4, r5, r6, pc}
   11494:	600056f8 	.word	0x600056f8
   11498:	600056f8 	.word	0x600056f8
   1149c:	60005704 	.word	0x60005704
   114a0:	600056f8 	.word	0x600056f8

000114a4 <__retarget_lock_init_recursive>:
   114a4:	4770      	bx	lr
   114a6:	bf00      	nop

000114a8 <__retarget_lock_close_recursive>:
   114a8:	4770      	bx	lr
   114aa:	bf00      	nop

000114ac <__retarget_lock_acquire_recursive>:
   114ac:	4770      	bx	lr
   114ae:	bf00      	nop

000114b0 <__retarget_lock_release_recursive>:
   114b0:	4770      	bx	lr
   114b2:	bf00      	nop
	...
   114c0:	eba2 0003 	sub.w	r0, r2, r3
   114c4:	4770      	bx	lr
   114c6:	bf00      	nop

000114c8 <strcmp>:
   114c8:	7802      	ldrb	r2, [r0, #0]
   114ca:	780b      	ldrb	r3, [r1, #0]
   114cc:	2a01      	cmp	r2, #1
   114ce:	bf28      	it	cs
   114d0:	429a      	cmpcs	r2, r3
   114d2:	d1f5      	bne.n	114c0 <__retarget_lock_release_recursive+0x10>
   114d4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
   114d8:	ea40 0401 	orr.w	r4, r0, r1
   114dc:	e9cd 6702 	strd	r6, r7, [sp, #8]
   114e0:	f06f 0c00 	mvn.w	ip, #0
   114e4:	ea4f 7244 	mov.w	r2, r4, lsl #29
   114e8:	b312      	cbz	r2, 11530 <strcmp+0x68>
   114ea:	ea80 0401 	eor.w	r4, r0, r1
   114ee:	f014 0f07 	tst.w	r4, #7
   114f2:	d16a      	bne.n	115ca <strcmp+0x102>
   114f4:	f000 0407 	and.w	r4, r0, #7
   114f8:	f020 0007 	bic.w	r0, r0, #7
   114fc:	f004 0503 	and.w	r5, r4, #3
   11500:	f021 0107 	bic.w	r1, r1, #7
   11504:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   11508:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   1150c:	f014 0f04 	tst.w	r4, #4
   11510:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   11514:	fa0c f405 	lsl.w	r4, ip, r5
   11518:	ea62 0204 	orn	r2, r2, r4
   1151c:	ea66 0604 	orn	r6, r6, r4
   11520:	d00a      	beq.n	11538 <strcmp+0x70>
   11522:	ea63 0304 	orn	r3, r3, r4
   11526:	4662      	mov	r2, ip
   11528:	ea67 0704 	orn	r7, r7, r4
   1152c:	4666      	mov	r6, ip
   1152e:	e003      	b.n	11538 <strcmp+0x70>
   11530:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   11534:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   11538:	fa82 f54c 	uadd8	r5, r2, ip
   1153c:	ea82 0406 	eor.w	r4, r2, r6
   11540:	faa4 f48c 	sel	r4, r4, ip
   11544:	bb6c      	cbnz	r4, 115a2 <strcmp+0xda>
   11546:	fa83 f54c 	uadd8	r5, r3, ip
   1154a:	ea83 0507 	eor.w	r5, r3, r7
   1154e:	faa5 f58c 	sel	r5, r5, ip
   11552:	b995      	cbnz	r5, 1157a <strcmp+0xb2>
   11554:	e950 2302 	ldrd	r2, r3, [r0, #-8]
   11558:	e951 6702 	ldrd	r6, r7, [r1, #-8]
   1155c:	fa82 f54c 	uadd8	r5, r2, ip
   11560:	ea82 0406 	eor.w	r4, r2, r6
   11564:	faa4 f48c 	sel	r4, r4, ip
   11568:	fa83 f54c 	uadd8	r5, r3, ip
   1156c:	ea83 0507 	eor.w	r5, r3, r7
   11570:	faa5 f58c 	sel	r5, r5, ip
   11574:	4325      	orrs	r5, r4
   11576:	d0db      	beq.n	11530 <strcmp+0x68>
   11578:	b99c      	cbnz	r4, 115a2 <strcmp+0xda>
   1157a:	ba2d      	rev	r5, r5
   1157c:	fab5 f485 	clz	r4, r5
   11580:	f024 0407 	bic.w	r4, r4, #7
   11584:	fa27 f104 	lsr.w	r1, r7, r4
   11588:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1158c:	fa23 f304 	lsr.w	r3, r3, r4
   11590:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   11594:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   11598:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1159c:	eba0 0001 	sub.w	r0, r0, r1
   115a0:	4770      	bx	lr
   115a2:	ba24      	rev	r4, r4
   115a4:	fab4 f484 	clz	r4, r4
   115a8:	f024 0407 	bic.w	r4, r4, #7
   115ac:	fa26 f104 	lsr.w	r1, r6, r4
   115b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   115b4:	fa22 f204 	lsr.w	r2, r2, r4
   115b8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   115bc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   115c0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   115c4:	eba0 0001 	sub.w	r0, r0, r1
   115c8:	4770      	bx	lr
   115ca:	f014 0f03 	tst.w	r4, #3
   115ce:	d13c      	bne.n	1164a <strcmp+0x182>
   115d0:	f010 0403 	ands.w	r4, r0, #3
   115d4:	d128      	bne.n	11628 <strcmp+0x160>
   115d6:	f850 2b08 	ldr.w	r2, [r0], #8
   115da:	f851 3b08 	ldr.w	r3, [r1], #8
   115de:	fa82 f54c 	uadd8	r5, r2, ip
   115e2:	ea82 0503 	eor.w	r5, r2, r3
   115e6:	faa5 f58c 	sel	r5, r5, ip
   115ea:	b95d      	cbnz	r5, 11604 <strcmp+0x13c>
   115ec:	f850 2c04 	ldr.w	r2, [r0, #-4]
   115f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
   115f4:	fa82 f54c 	uadd8	r5, r2, ip
   115f8:	ea82 0503 	eor.w	r5, r2, r3
   115fc:	faa5 f58c 	sel	r5, r5, ip
   11600:	2d00      	cmp	r5, #0
   11602:	d0e8      	beq.n	115d6 <strcmp+0x10e>
   11604:	ba2d      	rev	r5, r5
   11606:	fab5 f485 	clz	r4, r5
   1160a:	f024 0407 	bic.w	r4, r4, #7
   1160e:	fa23 f104 	lsr.w	r1, r3, r4
   11612:	fa22 f204 	lsr.w	r2, r2, r4
   11616:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   1161a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1161e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   11622:	eba0 0001 	sub.w	r0, r0, r1
   11626:	4770      	bx	lr
   11628:	ea4f 04c4 	mov.w	r4, r4, lsl #3
   1162c:	f020 0003 	bic.w	r0, r0, #3
   11630:	f850 2b08 	ldr.w	r2, [r0], #8
   11634:	f021 0103 	bic.w	r1, r1, #3
   11638:	f851 3b08 	ldr.w	r3, [r1], #8
   1163c:	fa0c f404 	lsl.w	r4, ip, r4
   11640:	ea62 0204 	orn	r2, r2, r4
   11644:	ea63 0304 	orn	r3, r3, r4
   11648:	e7c9      	b.n	115de <strcmp+0x116>
   1164a:	f010 0403 	ands.w	r4, r0, #3
   1164e:	d01a      	beq.n	11686 <strcmp+0x1be>
   11650:	eba1 0104 	sub.w	r1, r1, r4
   11654:	f020 0003 	bic.w	r0, r0, #3
   11658:	07e4      	lsls	r4, r4, #31
   1165a:	f850 2b04 	ldr.w	r2, [r0], #4
   1165e:	d006      	beq.n	1166e <strcmp+0x1a6>
   11660:	d20f      	bcs.n	11682 <strcmp+0x1ba>
   11662:	788b      	ldrb	r3, [r1, #2]
   11664:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
   11668:	1ae4      	subs	r4, r4, r3
   1166a:	d106      	bne.n	1167a <strcmp+0x1b2>
   1166c:	b12b      	cbz	r3, 1167a <strcmp+0x1b2>
   1166e:	78cb      	ldrb	r3, [r1, #3]
   11670:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
   11674:	1ae4      	subs	r4, r4, r3
   11676:	d100      	bne.n	1167a <strcmp+0x1b2>
   11678:	b91b      	cbnz	r3, 11682 <strcmp+0x1ba>
   1167a:	4620      	mov	r0, r4
   1167c:	f85d 4b10 	ldr.w	r4, [sp], #16
   11680:	4770      	bx	lr
   11682:	f101 0104 	add.w	r1, r1, #4
   11686:	f850 2b04 	ldr.w	r2, [r0], #4
   1168a:	07cc      	lsls	r4, r1, #31
   1168c:	f021 0103 	bic.w	r1, r1, #3
   11690:	f851 3b04 	ldr.w	r3, [r1], #4
   11694:	d848      	bhi.n	11728 <strcmp+0x260>
   11696:	d224      	bcs.n	116e2 <strcmp+0x21a>
   11698:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
   1169c:	fa82 f54c 	uadd8	r5, r2, ip
   116a0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
   116a4:	faa5 f58c 	sel	r5, r5, ip
   116a8:	d10a      	bne.n	116c0 <strcmp+0x1f8>
   116aa:	b965      	cbnz	r5, 116c6 <strcmp+0x1fe>
   116ac:	f851 3b04 	ldr.w	r3, [r1], #4
   116b0:	ea84 0402 	eor.w	r4, r4, r2
   116b4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
   116b8:	d10e      	bne.n	116d8 <strcmp+0x210>
   116ba:	f850 2b04 	ldr.w	r2, [r0], #4
   116be:	e7eb      	b.n	11698 <strcmp+0x1d0>
   116c0:	ea4f 2313 	mov.w	r3, r3, lsr #8
   116c4:	e055      	b.n	11772 <strcmp+0x2aa>
   116c6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
   116ca:	d14d      	bne.n	11768 <strcmp+0x2a0>
   116cc:	7808      	ldrb	r0, [r1, #0]
   116ce:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   116d2:	f1c0 0000 	rsb	r0, r0, #0
   116d6:	4770      	bx	lr
   116d8:	ea4f 6212 	mov.w	r2, r2, lsr #24
   116dc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   116e0:	e047      	b.n	11772 <strcmp+0x2aa>
   116e2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
   116e6:	fa82 f54c 	uadd8	r5, r2, ip
   116ea:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
   116ee:	faa5 f58c 	sel	r5, r5, ip
   116f2:	d10a      	bne.n	1170a <strcmp+0x242>
   116f4:	b965      	cbnz	r5, 11710 <strcmp+0x248>
   116f6:	f851 3b04 	ldr.w	r3, [r1], #4
   116fa:	ea84 0402 	eor.w	r4, r4, r2
   116fe:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
   11702:	d10c      	bne.n	1171e <strcmp+0x256>
   11704:	f850 2b04 	ldr.w	r2, [r0], #4
   11708:	e7eb      	b.n	116e2 <strcmp+0x21a>
   1170a:	ea4f 4313 	mov.w	r3, r3, lsr #16
   1170e:	e030      	b.n	11772 <strcmp+0x2aa>
   11710:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
   11714:	d128      	bne.n	11768 <strcmp+0x2a0>
   11716:	880b      	ldrh	r3, [r1, #0]
   11718:	ea4f 4212 	mov.w	r2, r2, lsr #16
   1171c:	e029      	b.n	11772 <strcmp+0x2aa>
   1171e:	ea4f 4212 	mov.w	r2, r2, lsr #16
   11722:	ea03 431c 	and.w	r3, r3, ip, lsr #16
   11726:	e024      	b.n	11772 <strcmp+0x2aa>
   11728:	f002 04ff 	and.w	r4, r2, #255	; 0xff
   1172c:	fa82 f54c 	uadd8	r5, r2, ip
   11730:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
   11734:	faa5 f58c 	sel	r5, r5, ip
   11738:	d10a      	bne.n	11750 <strcmp+0x288>
   1173a:	b965      	cbnz	r5, 11756 <strcmp+0x28e>
   1173c:	f851 3b04 	ldr.w	r3, [r1], #4
   11740:	ea84 0402 	eor.w	r4, r4, r2
   11744:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
   11748:	d109      	bne.n	1175e <strcmp+0x296>
   1174a:	f850 2b04 	ldr.w	r2, [r0], #4
   1174e:	e7eb      	b.n	11728 <strcmp+0x260>
   11750:	ea4f 6313 	mov.w	r3, r3, lsr #24
   11754:	e00d      	b.n	11772 <strcmp+0x2aa>
   11756:	f015 0fff 	tst.w	r5, #255	; 0xff
   1175a:	d105      	bne.n	11768 <strcmp+0x2a0>
   1175c:	680b      	ldr	r3, [r1, #0]
   1175e:	ea4f 2212 	mov.w	r2, r2, lsr #8
   11762:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   11766:	e004      	b.n	11772 <strcmp+0x2aa>
   11768:	f04f 0000 	mov.w	r0, #0
   1176c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   11770:	4770      	bx	lr
   11772:	ba12      	rev	r2, r2
   11774:	ba1b      	rev	r3, r3
   11776:	fa82 f44c 	uadd8	r4, r2, ip
   1177a:	ea82 0403 	eor.w	r4, r2, r3
   1177e:	faa4 f58c 	sel	r5, r4, ip
   11782:	fab5 f485 	clz	r4, r5
   11786:	fa02 f204 	lsl.w	r2, r2, r4
   1178a:	fa03 f304 	lsl.w	r3, r3, r4
   1178e:	ea4f 6012 	mov.w	r0, r2, lsr #24
   11792:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   11796:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
   1179a:	4770      	bx	lr

0001179c <strcpy>:
   1179c:	ea80 0201 	eor.w	r2, r0, r1
   117a0:	4684      	mov	ip, r0
   117a2:	f012 0f03 	tst.w	r2, #3
   117a6:	d14f      	bne.n	11848 <strcpy+0xac>
   117a8:	f011 0f03 	tst.w	r1, #3
   117ac:	d132      	bne.n	11814 <strcpy+0x78>
   117ae:	f84d 4d04 	str.w	r4, [sp, #-4]!
   117b2:	f011 0f04 	tst.w	r1, #4
   117b6:	f851 3b04 	ldr.w	r3, [r1], #4
   117ba:	d00b      	beq.n	117d4 <strcpy+0x38>
   117bc:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   117c0:	439a      	bics	r2, r3
   117c2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   117c6:	bf04      	itt	eq
   117c8:	f84c 3b04 	streq.w	r3, [ip], #4
   117cc:	f851 3b04 	ldreq.w	r3, [r1], #4
   117d0:	d116      	bne.n	11800 <strcpy+0x64>
   117d2:	bf00      	nop
   117d4:	f851 4b04 	ldr.w	r4, [r1], #4
   117d8:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   117dc:	439a      	bics	r2, r3
   117de:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   117e2:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   117e6:	d10b      	bne.n	11800 <strcpy+0x64>
   117e8:	f84c 3b04 	str.w	r3, [ip], #4
   117ec:	43a2      	bics	r2, r4
   117ee:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   117f2:	bf04      	itt	eq
   117f4:	f851 3b04 	ldreq.w	r3, [r1], #4
   117f8:	f84c 4b04 	streq.w	r4, [ip], #4
   117fc:	d0ea      	beq.n	117d4 <strcpy+0x38>
   117fe:	4623      	mov	r3, r4
   11800:	f80c 3b01 	strb.w	r3, [ip], #1
   11804:	f013 0fff 	tst.w	r3, #255	; 0xff
   11808:	ea4f 2333 	mov.w	r3, r3, ror #8
   1180c:	d1f8      	bne.n	11800 <strcpy+0x64>
   1180e:	f85d 4b04 	ldr.w	r4, [sp], #4
   11812:	4770      	bx	lr
   11814:	f011 0f01 	tst.w	r1, #1
   11818:	d006      	beq.n	11828 <strcpy+0x8c>
   1181a:	f811 2b01 	ldrb.w	r2, [r1], #1
   1181e:	f80c 2b01 	strb.w	r2, [ip], #1
   11822:	2a00      	cmp	r2, #0
   11824:	bf08      	it	eq
   11826:	4770      	bxeq	lr
   11828:	f011 0f02 	tst.w	r1, #2
   1182c:	d0bf      	beq.n	117ae <strcpy+0x12>
   1182e:	f831 2b02 	ldrh.w	r2, [r1], #2
   11832:	f012 0fff 	tst.w	r2, #255	; 0xff
   11836:	bf16      	itet	ne
   11838:	f82c 2b02 	strhne.w	r2, [ip], #2
   1183c:	f88c 2000 	strbeq.w	r2, [ip]
   11840:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   11844:	d1b3      	bne.n	117ae <strcpy+0x12>
   11846:	4770      	bx	lr
   11848:	f811 2b01 	ldrb.w	r2, [r1], #1
   1184c:	f80c 2b01 	strb.w	r2, [ip], #1
   11850:	2a00      	cmp	r2, #0
   11852:	d1f9      	bne.n	11848 <strcpy+0xac>
   11854:	4770      	bx	lr
   11856:	bf00      	nop
	...

00011860 <memchr>:
   11860:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   11864:	2a10      	cmp	r2, #16
   11866:	db2b      	blt.n	118c0 <memchr+0x60>
   11868:	f010 0f07 	tst.w	r0, #7
   1186c:	d008      	beq.n	11880 <memchr+0x20>
   1186e:	f810 3b01 	ldrb.w	r3, [r0], #1
   11872:	3a01      	subs	r2, #1
   11874:	428b      	cmp	r3, r1
   11876:	d02d      	beq.n	118d4 <memchr+0x74>
   11878:	f010 0f07 	tst.w	r0, #7
   1187c:	b342      	cbz	r2, 118d0 <memchr+0x70>
   1187e:	d1f6      	bne.n	1186e <memchr+0xe>
   11880:	b4f0      	push	{r4, r5, r6, r7}
   11882:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   11886:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   1188a:	f022 0407 	bic.w	r4, r2, #7
   1188e:	f07f 0700 	mvns.w	r7, #0
   11892:	2300      	movs	r3, #0
   11894:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   11898:	3c08      	subs	r4, #8
   1189a:	ea85 0501 	eor.w	r5, r5, r1
   1189e:	ea86 0601 	eor.w	r6, r6, r1
   118a2:	fa85 f547 	uadd8	r5, r5, r7
   118a6:	faa3 f587 	sel	r5, r3, r7
   118aa:	fa86 f647 	uadd8	r6, r6, r7
   118ae:	faa5 f687 	sel	r6, r5, r7
   118b2:	b98e      	cbnz	r6, 118d8 <memchr+0x78>
   118b4:	d1ee      	bne.n	11894 <memchr+0x34>
   118b6:	bcf0      	pop	{r4, r5, r6, r7}
   118b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   118bc:	f002 0207 	and.w	r2, r2, #7
   118c0:	b132      	cbz	r2, 118d0 <memchr+0x70>
   118c2:	f810 3b01 	ldrb.w	r3, [r0], #1
   118c6:	3a01      	subs	r2, #1
   118c8:	ea83 0301 	eor.w	r3, r3, r1
   118cc:	b113      	cbz	r3, 118d4 <memchr+0x74>
   118ce:	d1f8      	bne.n	118c2 <memchr+0x62>
   118d0:	2000      	movs	r0, #0
   118d2:	4770      	bx	lr
   118d4:	3801      	subs	r0, #1
   118d6:	4770      	bx	lr
   118d8:	2d00      	cmp	r5, #0
   118da:	bf06      	itte	eq
   118dc:	4635      	moveq	r5, r6
   118de:	3803      	subeq	r0, #3
   118e0:	3807      	subne	r0, #7
   118e2:	f015 0f01 	tst.w	r5, #1
   118e6:	d107      	bne.n	118f8 <memchr+0x98>
   118e8:	3001      	adds	r0, #1
   118ea:	f415 7f80 	tst.w	r5, #256	; 0x100
   118ee:	bf02      	ittt	eq
   118f0:	3001      	addeq	r0, #1
   118f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   118f6:	3001      	addeq	r0, #1
   118f8:	bcf0      	pop	{r4, r5, r6, r7}
   118fa:	3801      	subs	r0, #1
   118fc:	4770      	bx	lr
   118fe:	bf00      	nop

00011900 <strlen>:
   11900:	f890 f000 	pld	[r0]
   11904:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   11908:	f020 0107 	bic.w	r1, r0, #7
   1190c:	f06f 0c00 	mvn.w	ip, #0
   11910:	f010 0407 	ands.w	r4, r0, #7
   11914:	f891 f020 	pld	[r1, #32]
   11918:	f040 8049 	bne.w	119ae <strlen+0xae>
   1191c:	f04f 0400 	mov.w	r4, #0
   11920:	f06f 0007 	mvn.w	r0, #7
   11924:	e9d1 2300 	ldrd	r2, r3, [r1]
   11928:	f891 f040 	pld	[r1, #64]	; 0x40
   1192c:	f100 0008 	add.w	r0, r0, #8
   11930:	fa82 f24c 	uadd8	r2, r2, ip
   11934:	faa4 f28c 	sel	r2, r4, ip
   11938:	fa83 f34c 	uadd8	r3, r3, ip
   1193c:	faa2 f38c 	sel	r3, r2, ip
   11940:	bb4b      	cbnz	r3, 11996 <strlen+0x96>
   11942:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   11946:	fa82 f24c 	uadd8	r2, r2, ip
   1194a:	f100 0008 	add.w	r0, r0, #8
   1194e:	faa4 f28c 	sel	r2, r4, ip
   11952:	fa83 f34c 	uadd8	r3, r3, ip
   11956:	faa2 f38c 	sel	r3, r2, ip
   1195a:	b9e3      	cbnz	r3, 11996 <strlen+0x96>
   1195c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   11960:	fa82 f24c 	uadd8	r2, r2, ip
   11964:	f100 0008 	add.w	r0, r0, #8
   11968:	faa4 f28c 	sel	r2, r4, ip
   1196c:	fa83 f34c 	uadd8	r3, r3, ip
   11970:	faa2 f38c 	sel	r3, r2, ip
   11974:	b97b      	cbnz	r3, 11996 <strlen+0x96>
   11976:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   1197a:	f101 0120 	add.w	r1, r1, #32
   1197e:	fa82 f24c 	uadd8	r2, r2, ip
   11982:	f100 0008 	add.w	r0, r0, #8
   11986:	faa4 f28c 	sel	r2, r4, ip
   1198a:	fa83 f34c 	uadd8	r3, r3, ip
   1198e:	faa2 f38c 	sel	r3, r2, ip
   11992:	2b00      	cmp	r3, #0
   11994:	d0c6      	beq.n	11924 <strlen+0x24>
   11996:	2a00      	cmp	r2, #0
   11998:	bf04      	itt	eq
   1199a:	3004      	addeq	r0, #4
   1199c:	461a      	moveq	r2, r3
   1199e:	ba12      	rev	r2, r2
   119a0:	fab2 f282 	clz	r2, r2
   119a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   119a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   119ac:	4770      	bx	lr
   119ae:	e9d1 2300 	ldrd	r2, r3, [r1]
   119b2:	f004 0503 	and.w	r5, r4, #3
   119b6:	f1c4 0000 	rsb	r0, r4, #0
   119ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   119be:	f014 0f04 	tst.w	r4, #4
   119c2:	f891 f040 	pld	[r1, #64]	; 0x40
   119c6:	fa0c f505 	lsl.w	r5, ip, r5
   119ca:	ea62 0205 	orn	r2, r2, r5
   119ce:	bf1c      	itt	ne
   119d0:	ea63 0305 	ornne	r3, r3, r5
   119d4:	4662      	movne	r2, ip
   119d6:	f04f 0400 	mov.w	r4, #0
   119da:	e7a9      	b.n	11930 <strlen+0x30>
   119dc:	0000      	movs	r0, r0
	...

000119e0 <nan>:
   119e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 119e8 <nan+0x8>
   119e4:	4770      	bx	lr
   119e6:	bf00      	nop
   119e8:	00000000 	.word	0x00000000
   119ec:	7ff80000 	.word	0x7ff80000

000119f0 <nanf>:
   119f0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 119f8 <nanf+0x8>
   119f4:	4770      	bx	lr
   119f6:	bf00      	nop
   119f8:	7fc00000 	.word	0x7fc00000

000119fc <__register_exitproc>:
   119fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11a00:	f8df a07c 	ldr.w	sl, [pc, #124]	; 11a80 <__register_exitproc+0x84>
   11a04:	4606      	mov	r6, r0
   11a06:	f8da 0000 	ldr.w	r0, [sl]
   11a0a:	4698      	mov	r8, r3
   11a0c:	460f      	mov	r7, r1
   11a0e:	4691      	mov	r9, r2
   11a10:	f7ff fd4c 	bl	114ac <__retarget_lock_acquire_recursive>
   11a14:	4b18      	ldr	r3, [pc, #96]	; (11a78 <__register_exitproc+0x7c>)
   11a16:	681c      	ldr	r4, [r3, #0]
   11a18:	b324      	cbz	r4, 11a64 <__register_exitproc+0x68>
   11a1a:	6865      	ldr	r5, [r4, #4]
   11a1c:	2d1f      	cmp	r5, #31
   11a1e:	dc24      	bgt.n	11a6a <__register_exitproc+0x6e>
   11a20:	b95e      	cbnz	r6, 11a3a <__register_exitproc+0x3e>
   11a22:	1c6b      	adds	r3, r5, #1
   11a24:	3502      	adds	r5, #2
   11a26:	f8da 0000 	ldr.w	r0, [sl]
   11a2a:	6063      	str	r3, [r4, #4]
   11a2c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   11a30:	f7ff fd3e 	bl	114b0 <__retarget_lock_release_recursive>
   11a34:	2000      	movs	r0, #0
   11a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11a3a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   11a3e:	2301      	movs	r3, #1
   11a40:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   11a44:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   11a48:	40ab      	lsls	r3, r5
   11a4a:	431a      	orrs	r2, r3
   11a4c:	2e02      	cmp	r6, #2
   11a4e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   11a52:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   11a56:	d1e4      	bne.n	11a22 <__register_exitproc+0x26>
   11a58:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   11a5c:	431a      	orrs	r2, r3
   11a5e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   11a62:	e7de      	b.n	11a22 <__register_exitproc+0x26>
   11a64:	4c05      	ldr	r4, [pc, #20]	; (11a7c <__register_exitproc+0x80>)
   11a66:	601c      	str	r4, [r3, #0]
   11a68:	e7d7      	b.n	11a1a <__register_exitproc+0x1e>
   11a6a:	f8da 0000 	ldr.w	r0, [sl]
   11a6e:	f7ff fd1f 	bl	114b0 <__retarget_lock_release_recursive>
   11a72:	f04f 30ff 	mov.w	r0, #4294967295
   11a76:	e7de      	b.n	11a36 <__register_exitproc+0x3a>
   11a78:	2005e0d8 	.word	0x2005e0d8
   11a7c:	2005e0dc 	.word	0x2005e0dc
   11a80:	2000c160 	.word	0x2000c160

00011a84 <_malloc_trim_r>:
   11a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11a86:	4f24      	ldr	r7, [pc, #144]	; (11b18 <_malloc_trim_r+0x94>)
   11a88:	460c      	mov	r4, r1
   11a8a:	4606      	mov	r6, r0
   11a8c:	f7fd fde6 	bl	f65c <__malloc_lock>
   11a90:	68bb      	ldr	r3, [r7, #8]
   11a92:	685d      	ldr	r5, [r3, #4]
   11a94:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   11a98:	310f      	adds	r1, #15
   11a9a:	f025 0503 	bic.w	r5, r5, #3
   11a9e:	194b      	adds	r3, r1, r5
   11aa0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   11aa4:	f023 030f 	bic.w	r3, r3, #15
   11aa8:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
   11aac:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   11ab0:	db07      	blt.n	11ac2 <_malloc_trim_r+0x3e>
   11ab2:	2100      	movs	r1, #0
   11ab4:	4630      	mov	r0, r6
   11ab6:	f7ff fca3 	bl	11400 <_sbrk_r>
   11aba:	68bb      	ldr	r3, [r7, #8]
   11abc:	442b      	add	r3, r5
   11abe:	4298      	cmp	r0, r3
   11ac0:	d004      	beq.n	11acc <_malloc_trim_r+0x48>
   11ac2:	4630      	mov	r0, r6
   11ac4:	f7fd fdd0 	bl	f668 <__malloc_unlock>
   11ac8:	2000      	movs	r0, #0
   11aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11acc:	4261      	negs	r1, r4
   11ace:	4630      	mov	r0, r6
   11ad0:	f7ff fc96 	bl	11400 <_sbrk_r>
   11ad4:	3001      	adds	r0, #1
   11ad6:	d00d      	beq.n	11af4 <_malloc_trim_r+0x70>
   11ad8:	4a10      	ldr	r2, [pc, #64]	; (11b1c <_malloc_trim_r+0x98>)
   11ada:	68bb      	ldr	r3, [r7, #8]
   11adc:	1b2d      	subs	r5, r5, r4
   11ade:	f045 0501 	orr.w	r5, r5, #1
   11ae2:	605d      	str	r5, [r3, #4]
   11ae4:	6813      	ldr	r3, [r2, #0]
   11ae6:	4630      	mov	r0, r6
   11ae8:	1b1b      	subs	r3, r3, r4
   11aea:	6013      	str	r3, [r2, #0]
   11aec:	f7fd fdbc 	bl	f668 <__malloc_unlock>
   11af0:	2001      	movs	r0, #1
   11af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11af4:	2100      	movs	r1, #0
   11af6:	4630      	mov	r0, r6
   11af8:	f7ff fc82 	bl	11400 <_sbrk_r>
   11afc:	68ba      	ldr	r2, [r7, #8]
   11afe:	1a83      	subs	r3, r0, r2
   11b00:	2b0f      	cmp	r3, #15
   11b02:	ddde      	ble.n	11ac2 <_malloc_trim_r+0x3e>
   11b04:	f043 0301 	orr.w	r3, r3, #1
   11b08:	6053      	str	r3, [r2, #4]
   11b0a:	4b05      	ldr	r3, [pc, #20]	; (11b20 <_malloc_trim_r+0x9c>)
   11b0c:	4903      	ldr	r1, [pc, #12]	; (11b1c <_malloc_trim_r+0x98>)
   11b0e:	681b      	ldr	r3, [r3, #0]
   11b10:	1ac0      	subs	r0, r0, r3
   11b12:	6008      	str	r0, [r1, #0]
   11b14:	e7d5      	b.n	11ac2 <_malloc_trim_r+0x3e>
   11b16:	bf00      	nop
   11b18:	2000c2d8 	.word	0x2000c2d8
   11b1c:	2005e278 	.word	0x2005e278
   11b20:	2000c6e0 	.word	0x2000c6e0

00011b24 <_free_r>:
   11b24:	2900      	cmp	r1, #0
   11b26:	d061      	beq.n	11bec <_free_r+0xc8>
   11b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11b2a:	460c      	mov	r4, r1
   11b2c:	4606      	mov	r6, r0
   11b2e:	f7fd fd95 	bl	f65c <__malloc_lock>
   11b32:	f854 2c04 	ldr.w	r2, [r4, #-4]
   11b36:	4f7b      	ldr	r7, [pc, #492]	; (11d24 <_free_r+0x200>)
   11b38:	f1a4 0508 	sub.w	r5, r4, #8
   11b3c:	f022 0101 	bic.w	r1, r2, #1
   11b40:	eb05 0c01 	add.w	ip, r5, r1
   11b44:	68b8      	ldr	r0, [r7, #8]
   11b46:	f8dc 3004 	ldr.w	r3, [ip, #4]
   11b4a:	4560      	cmp	r0, ip
   11b4c:	f023 0303 	bic.w	r3, r3, #3
   11b50:	f000 808b 	beq.w	11c6a <_free_r+0x146>
   11b54:	07d2      	lsls	r2, r2, #31
   11b56:	f8cc 3004 	str.w	r3, [ip, #4]
   11b5a:	d432      	bmi.n	11bc2 <_free_r+0x9e>
   11b5c:	f854 2c08 	ldr.w	r2, [r4, #-8]
   11b60:	1aad      	subs	r5, r5, r2
   11b62:	4411      	add	r1, r2
   11b64:	68aa      	ldr	r2, [r5, #8]
   11b66:	f107 0008 	add.w	r0, r7, #8
   11b6a:	4282      	cmp	r2, r0
   11b6c:	d06a      	beq.n	11c44 <_free_r+0x120>
   11b6e:	eb0c 0403 	add.w	r4, ip, r3
   11b72:	f8d4 e004 	ldr.w	lr, [r4, #4]
   11b76:	68ec      	ldr	r4, [r5, #12]
   11b78:	60d4      	str	r4, [r2, #12]
   11b7a:	f01e 0f01 	tst.w	lr, #1
   11b7e:	60a2      	str	r2, [r4, #8]
   11b80:	f000 8097 	beq.w	11cb2 <_free_r+0x18e>
   11b84:	f041 0301 	orr.w	r3, r1, #1
   11b88:	606b      	str	r3, [r5, #4]
   11b8a:	f8cc 1000 	str.w	r1, [ip]
   11b8e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   11b92:	d235      	bcs.n	11c00 <_free_r+0xdc>
   11b94:	6878      	ldr	r0, [r7, #4]
   11b96:	08cb      	lsrs	r3, r1, #3
   11b98:	2201      	movs	r2, #1
   11b9a:	0949      	lsrs	r1, r1, #5
   11b9c:	3301      	adds	r3, #1
   11b9e:	408a      	lsls	r2, r1
   11ba0:	4302      	orrs	r2, r0
   11ba2:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
   11ba6:	607a      	str	r2, [r7, #4]
   11ba8:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   11bac:	3a08      	subs	r2, #8
   11bae:	e9c5 1202 	strd	r1, r2, [r5, #8]
   11bb2:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
   11bb6:	60cd      	str	r5, [r1, #12]
   11bb8:	4630      	mov	r0, r6
   11bba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   11bbe:	f7fd bd53 	b.w	f668 <__malloc_unlock>
   11bc2:	eb0c 0203 	add.w	r2, ip, r3
   11bc6:	6852      	ldr	r2, [r2, #4]
   11bc8:	07d0      	lsls	r0, r2, #31
   11bca:	d410      	bmi.n	11bee <_free_r+0xca>
   11bcc:	4419      	add	r1, r3
   11bce:	f107 0008 	add.w	r0, r7, #8
   11bd2:	f8dc 3008 	ldr.w	r3, [ip, #8]
   11bd6:	4283      	cmp	r3, r0
   11bd8:	d073      	beq.n	11cc2 <_free_r+0x19e>
   11bda:	f8dc 200c 	ldr.w	r2, [ip, #12]
   11bde:	60da      	str	r2, [r3, #12]
   11be0:	6093      	str	r3, [r2, #8]
   11be2:	f041 0301 	orr.w	r3, r1, #1
   11be6:	606b      	str	r3, [r5, #4]
   11be8:	5069      	str	r1, [r5, r1]
   11bea:	e7d0      	b.n	11b8e <_free_r+0x6a>
   11bec:	4770      	bx	lr
   11bee:	f041 0301 	orr.w	r3, r1, #1
   11bf2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   11bf6:	f844 3c04 	str.w	r3, [r4, #-4]
   11bfa:	f8cc 1000 	str.w	r1, [ip]
   11bfe:	d3c9      	bcc.n	11b94 <_free_r+0x70>
   11c00:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
   11c04:	ea4f 2351 	mov.w	r3, r1, lsr #9
   11c08:	d248      	bcs.n	11c9c <_free_r+0x178>
   11c0a:	098b      	lsrs	r3, r1, #6
   11c0c:	f103 0039 	add.w	r0, r3, #57	; 0x39
   11c10:	f103 0238 	add.w	r2, r3, #56	; 0x38
   11c14:	00c3      	lsls	r3, r0, #3
   11c16:	18f8      	adds	r0, r7, r3
   11c18:	58fb      	ldr	r3, [r7, r3]
   11c1a:	3808      	subs	r0, #8
   11c1c:	4298      	cmp	r0, r3
   11c1e:	d059      	beq.n	11cd4 <_free_r+0x1b0>
   11c20:	685a      	ldr	r2, [r3, #4]
   11c22:	f022 0203 	bic.w	r2, r2, #3
   11c26:	428a      	cmp	r2, r1
   11c28:	d902      	bls.n	11c30 <_free_r+0x10c>
   11c2a:	689b      	ldr	r3, [r3, #8]
   11c2c:	4298      	cmp	r0, r3
   11c2e:	d1f7      	bne.n	11c20 <_free_r+0xfc>
   11c30:	68d8      	ldr	r0, [r3, #12]
   11c32:	e9c5 3002 	strd	r3, r0, [r5, #8]
   11c36:	6085      	str	r5, [r0, #8]
   11c38:	60dd      	str	r5, [r3, #12]
   11c3a:	4630      	mov	r0, r6
   11c3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   11c40:	f7fd bd12 	b.w	f668 <__malloc_unlock>
   11c44:	eb0c 0203 	add.w	r2, ip, r3
   11c48:	6852      	ldr	r2, [r2, #4]
   11c4a:	07d2      	lsls	r2, r2, #31
   11c4c:	d463      	bmi.n	11d16 <_free_r+0x1f2>
   11c4e:	440b      	add	r3, r1
   11c50:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
   11c54:	60ca      	str	r2, [r1, #12]
   11c56:	6091      	str	r1, [r2, #8]
   11c58:	f043 0201 	orr.w	r2, r3, #1
   11c5c:	606a      	str	r2, [r5, #4]
   11c5e:	4630      	mov	r0, r6
   11c60:	50eb      	str	r3, [r5, r3]
   11c62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   11c66:	f7fd bcff 	b.w	f668 <__malloc_unlock>
   11c6a:	440b      	add	r3, r1
   11c6c:	07d1      	lsls	r1, r2, #31
   11c6e:	d407      	bmi.n	11c80 <_free_r+0x15c>
   11c70:	f854 2c08 	ldr.w	r2, [r4, #-8]
   11c74:	1aad      	subs	r5, r5, r2
   11c76:	4413      	add	r3, r2
   11c78:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
   11c7c:	60ca      	str	r2, [r1, #12]
   11c7e:	6091      	str	r1, [r2, #8]
   11c80:	f043 0201 	orr.w	r2, r3, #1
   11c84:	606a      	str	r2, [r5, #4]
   11c86:	4a28      	ldr	r2, [pc, #160]	; (11d28 <_free_r+0x204>)
   11c88:	60bd      	str	r5, [r7, #8]
   11c8a:	6812      	ldr	r2, [r2, #0]
   11c8c:	429a      	cmp	r2, r3
   11c8e:	d893      	bhi.n	11bb8 <_free_r+0x94>
   11c90:	4b26      	ldr	r3, [pc, #152]	; (11d2c <_free_r+0x208>)
   11c92:	4630      	mov	r0, r6
   11c94:	6819      	ldr	r1, [r3, #0]
   11c96:	f7ff fef5 	bl	11a84 <_malloc_trim_r>
   11c9a:	e78d      	b.n	11bb8 <_free_r+0x94>
   11c9c:	2b14      	cmp	r3, #20
   11c9e:	d90a      	bls.n	11cb6 <_free_r+0x192>
   11ca0:	2b54      	cmp	r3, #84	; 0x54
   11ca2:	d81f      	bhi.n	11ce4 <_free_r+0x1c0>
   11ca4:	0b0b      	lsrs	r3, r1, #12
   11ca6:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   11caa:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   11cae:	00c3      	lsls	r3, r0, #3
   11cb0:	e7b1      	b.n	11c16 <_free_r+0xf2>
   11cb2:	4419      	add	r1, r3
   11cb4:	e78d      	b.n	11bd2 <_free_r+0xae>
   11cb6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   11cba:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   11cbe:	00c3      	lsls	r3, r0, #3
   11cc0:	e7a9      	b.n	11c16 <_free_r+0xf2>
   11cc2:	f041 0301 	orr.w	r3, r1, #1
   11cc6:	e9c7 5504 	strd	r5, r5, [r7, #16]
   11cca:	e9c5 0002 	strd	r0, r0, [r5, #8]
   11cce:	606b      	str	r3, [r5, #4]
   11cd0:	5069      	str	r1, [r5, r1]
   11cd2:	e771      	b.n	11bb8 <_free_r+0x94>
   11cd4:	6879      	ldr	r1, [r7, #4]
   11cd6:	1092      	asrs	r2, r2, #2
   11cd8:	2401      	movs	r4, #1
   11cda:	fa04 f202 	lsl.w	r2, r4, r2
   11cde:	430a      	orrs	r2, r1
   11ce0:	607a      	str	r2, [r7, #4]
   11ce2:	e7a6      	b.n	11c32 <_free_r+0x10e>
   11ce4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   11ce8:	d806      	bhi.n	11cf8 <_free_r+0x1d4>
   11cea:	0bcb      	lsrs	r3, r1, #15
   11cec:	f103 0078 	add.w	r0, r3, #120	; 0x78
   11cf0:	f103 0277 	add.w	r2, r3, #119	; 0x77
   11cf4:	00c3      	lsls	r3, r0, #3
   11cf6:	e78e      	b.n	11c16 <_free_r+0xf2>
   11cf8:	f240 5254 	movw	r2, #1364	; 0x554
   11cfc:	4293      	cmp	r3, r2
   11cfe:	d806      	bhi.n	11d0e <_free_r+0x1ea>
   11d00:	0c8b      	lsrs	r3, r1, #18
   11d02:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   11d06:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   11d0a:	00c3      	lsls	r3, r0, #3
   11d0c:	e783      	b.n	11c16 <_free_r+0xf2>
   11d0e:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   11d12:	227e      	movs	r2, #126	; 0x7e
   11d14:	e77f      	b.n	11c16 <_free_r+0xf2>
   11d16:	f041 0301 	orr.w	r3, r1, #1
   11d1a:	606b      	str	r3, [r5, #4]
   11d1c:	f8cc 1000 	str.w	r1, [ip]
   11d20:	e74a      	b.n	11bb8 <_free_r+0x94>
   11d22:	bf00      	nop
   11d24:	2000c2d8 	.word	0x2000c2d8
   11d28:	2000c6e4 	.word	0x2000c6e4
   11d2c:	2005e2a8 	.word	0x2005e2a8

00011d30 <rshift>:
   11d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11d34:	6904      	ldr	r4, [r0, #16]
   11d36:	ebb4 1f61 	cmp.w	r4, r1, asr #5
   11d3a:	dd2f      	ble.n	11d9c <rshift+0x6c>
   11d3c:	f100 0e14 	add.w	lr, r0, #20
   11d40:	114e      	asrs	r6, r1, #5
   11d42:	f011 0c1f 	ands.w	ip, r1, #31
   11d46:	eb0e 0584 	add.w	r5, lr, r4, lsl #2
   11d4a:	eb0e 0386 	add.w	r3, lr, r6, lsl #2
   11d4e:	d02b      	beq.n	11da8 <rshift+0x78>
   11d50:	f85e 1026 	ldr.w	r1, [lr, r6, lsl #2]
   11d54:	3304      	adds	r3, #4
   11d56:	429d      	cmp	r5, r3
   11d58:	fa21 f10c 	lsr.w	r1, r1, ip
   11d5c:	f1cc 0820 	rsb	r8, ip, #32
   11d60:	d918      	bls.n	11d94 <rshift+0x64>
   11d62:	4677      	mov	r7, lr
   11d64:	681a      	ldr	r2, [r3, #0]
   11d66:	fa02 f208 	lsl.w	r2, r2, r8
   11d6a:	430a      	orrs	r2, r1
   11d6c:	f847 2b04 	str.w	r2, [r7], #4
   11d70:	f853 1b04 	ldr.w	r1, [r3], #4
   11d74:	429d      	cmp	r5, r3
   11d76:	fa21 f10c 	lsr.w	r1, r1, ip
   11d7a:	d8f3      	bhi.n	11d64 <rshift+0x34>
   11d7c:	1ba3      	subs	r3, r4, r6
   11d7e:	009b      	lsls	r3, r3, #2
   11d80:	3b05      	subs	r3, #5
   11d82:	089b      	lsrs	r3, r3, #2
   11d84:	3301      	adds	r3, #1
   11d86:	eb0e 0483 	add.w	r4, lr, r3, lsl #2
   11d8a:	f84e 1023 	str.w	r1, [lr, r3, lsl #2]
   11d8e:	b1c9      	cbz	r1, 11dc4 <rshift+0x94>
   11d90:	3404      	adds	r4, #4
   11d92:	e017      	b.n	11dc4 <rshift+0x94>
   11d94:	6141      	str	r1, [r0, #20]
   11d96:	4674      	mov	r4, lr
   11d98:	2900      	cmp	r1, #0
   11d9a:	d1f9      	bne.n	11d90 <rshift+0x60>
   11d9c:	2300      	movs	r3, #0
   11d9e:	6103      	str	r3, [r0, #16]
   11da0:	2300      	movs	r3, #0
   11da2:	6143      	str	r3, [r0, #20]
   11da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11da8:	429d      	cmp	r5, r3
   11daa:	bf88      	it	hi
   11dac:	f100 0210 	addhi.w	r2, r0, #16
   11db0:	d9f4      	bls.n	11d9c <rshift+0x6c>
   11db2:	f853 1b04 	ldr.w	r1, [r3], #4
   11db6:	f842 1f04 	str.w	r1, [r2, #4]!
   11dba:	429d      	cmp	r5, r3
   11dbc:	d8f9      	bhi.n	11db2 <rshift+0x82>
   11dbe:	1ba4      	subs	r4, r4, r6
   11dc0:	eb0e 0484 	add.w	r4, lr, r4, lsl #2
   11dc4:	eba4 030e 	sub.w	r3, r4, lr
   11dc8:	109b      	asrs	r3, r3, #2
   11dca:	4574      	cmp	r4, lr
   11dcc:	6103      	str	r3, [r0, #16]
   11dce:	d0e7      	beq.n	11da0 <rshift+0x70>
   11dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00011dd4 <__gethex>:
   11dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11dd8:	ed2d 8b02 	vpush	{d8}
   11ddc:	680c      	ldr	r4, [r1, #0]
   11dde:	468b      	mov	fp, r1
   11de0:	78a1      	ldrb	r1, [r4, #2]
   11de2:	b085      	sub	sp, #20
   11de4:	2930      	cmp	r1, #48	; 0x30
   11de6:	ee08 0a10 	vmov	s16, r0
   11dea:	4692      	mov	sl, r2
   11dec:	9302      	str	r3, [sp, #8]
   11dee:	f040 81ce 	bne.w	1218e <__gethex+0x3ba>
   11df2:	f06f 0001 	mvn.w	r0, #1
   11df6:	1b00      	subs	r0, r0, r4
   11df8:	1ce2      	adds	r2, r4, #3
   11dfa:	1883      	adds	r3, r0, r2
   11dfc:	4614      	mov	r4, r2
   11dfe:	f812 1b01 	ldrb.w	r1, [r2], #1
   11e02:	2930      	cmp	r1, #48	; 0x30
   11e04:	d0f9      	beq.n	11dfa <__gethex+0x26>
   11e06:	f8df 8300 	ldr.w	r8, [pc, #768]	; 12108 <__gethex+0x334>
   11e0a:	f818 2001 	ldrb.w	r2, [r8, r1]
   11e0e:	2a00      	cmp	r2, #0
   11e10:	f000 80e5 	beq.w	11fde <__gethex+0x20a>
   11e14:	7822      	ldrb	r2, [r4, #0]
   11e16:	2700      	movs	r7, #0
   11e18:	f818 2002 	ldrb.w	r2, [r8, r2]
   11e1c:	463d      	mov	r5, r7
   11e1e:	4626      	mov	r6, r4
   11e20:	b12a      	cbz	r2, 11e2e <__gethex+0x5a>
   11e22:	f816 2f01 	ldrb.w	r2, [r6, #1]!
   11e26:	f818 2002 	ldrb.w	r2, [r8, r2]
   11e2a:	2a00      	cmp	r2, #0
   11e2c:	d1f9      	bne.n	11e22 <__gethex+0x4e>
   11e2e:	49b5      	ldr	r1, [pc, #724]	; (12104 <__gethex+0x330>)
   11e30:	9301      	str	r3, [sp, #4]
   11e32:	2201      	movs	r2, #1
   11e34:	4630      	mov	r0, r6
   11e36:	f7ff f9ed 	bl	11214 <strncmp>
   11e3a:	9b01      	ldr	r3, [sp, #4]
   11e3c:	4681      	mov	r9, r0
   11e3e:	2800      	cmp	r0, #0
   11e40:	d04d      	beq.n	11ede <__gethex+0x10a>
   11e42:	2d00      	cmp	r5, #0
   11e44:	d14e      	bne.n	11ee4 <__gethex+0x110>
   11e46:	7832      	ldrb	r2, [r6, #0]
   11e48:	46a9      	mov	r9, r5
   11e4a:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   11e4e:	2a50      	cmp	r2, #80	; 0x50
   11e50:	4635      	mov	r5, r6
   11e52:	d050      	beq.n	11ef6 <__gethex+0x122>
   11e54:	f8cb 6000 	str.w	r6, [fp]
   11e58:	2f00      	cmp	r7, #0
   11e5a:	d169      	bne.n	11f30 <__gethex+0x15c>
   11e5c:	1b2b      	subs	r3, r5, r4
   11e5e:	3b01      	subs	r3, #1
   11e60:	2b07      	cmp	r3, #7
   11e62:	4639      	mov	r1, r7
   11e64:	dd04      	ble.n	11e70 <__gethex+0x9c>
   11e66:	105b      	asrs	r3, r3, #1
   11e68:	2b07      	cmp	r3, #7
   11e6a:	f101 0101 	add.w	r1, r1, #1
   11e6e:	dcfa      	bgt.n	11e66 <__gethex+0x92>
   11e70:	ee18 0a10 	vmov	r0, s16
   11e74:	f000 fb82 	bl	1257c <_Balloc>
   11e78:	4683      	mov	fp, r0
   11e7a:	2800      	cmp	r0, #0
   11e7c:	f000 8266 	beq.w	1234c <__gethex+0x578>
   11e80:	f100 0614 	add.w	r6, r0, #20
   11e84:	42ac      	cmp	r4, r5
   11e86:	9601      	str	r6, [sp, #4]
   11e88:	f080 81d2 	bcs.w	12230 <__gethex+0x45c>
   11e8c:	2700      	movs	r7, #0
   11e8e:	f8cd 900c 	str.w	r9, [sp, #12]
   11e92:	499c      	ldr	r1, [pc, #624]	; (12104 <__gethex+0x330>)
   11e94:	46a1      	mov	r9, r4
   11e96:	463c      	mov	r4, r7
   11e98:	e00c      	b.n	11eb4 <__gethex+0xe0>
   11e9a:	2f20      	cmp	r7, #32
   11e9c:	d019      	beq.n	11ed2 <__gethex+0xfe>
   11e9e:	4638      	mov	r0, r7
   11ea0:	3704      	adds	r7, #4
   11ea2:	782a      	ldrb	r2, [r5, #0]
   11ea4:	f818 2002 	ldrb.w	r2, [r8, r2]
   11ea8:	f002 020f 	and.w	r2, r2, #15
   11eac:	4082      	lsls	r2, r0
   11eae:	4314      	orrs	r4, r2
   11eb0:	454d      	cmp	r5, r9
   11eb2:	d047      	beq.n	11f44 <__gethex+0x170>
   11eb4:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
   11eb8:	2a2e      	cmp	r2, #46	; 0x2e
   11eba:	d1ee      	bne.n	11e9a <__gethex+0xc6>
   11ebc:	454d      	cmp	r5, r9
   11ebe:	d3ec      	bcc.n	11e9a <__gethex+0xc6>
   11ec0:	2201      	movs	r2, #1
   11ec2:	4628      	mov	r0, r5
   11ec4:	f7ff f9a6 	bl	11214 <strncmp>
   11ec8:	498e      	ldr	r1, [pc, #568]	; (12104 <__gethex+0x330>)
   11eca:	2800      	cmp	r0, #0
   11ecc:	d0f0      	beq.n	11eb0 <__gethex+0xdc>
   11ece:	2f20      	cmp	r7, #32
   11ed0:	d1e5      	bne.n	11e9e <__gethex+0xca>
   11ed2:	2000      	movs	r0, #0
   11ed4:	f846 4b04 	str.w	r4, [r6], #4
   11ed8:	2704      	movs	r7, #4
   11eda:	4604      	mov	r4, r0
   11edc:	e7e1      	b.n	11ea2 <__gethex+0xce>
   11ede:	2d00      	cmp	r5, #0
   11ee0:	f000 8142 	beq.w	12168 <__gethex+0x394>
   11ee4:	7832      	ldrb	r2, [r6, #0]
   11ee6:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   11eea:	1bad      	subs	r5, r5, r6
   11eec:	2a50      	cmp	r2, #80	; 0x50
   11eee:	ea4f 0985 	mov.w	r9, r5, lsl #2
   11ef2:	4635      	mov	r5, r6
   11ef4:	d1ae      	bne.n	11e54 <__gethex+0x80>
   11ef6:	786a      	ldrb	r2, [r5, #1]
   11ef8:	2a2b      	cmp	r2, #43	; 0x2b
   11efa:	f000 8125 	beq.w	12148 <__gethex+0x374>
   11efe:	2a2d      	cmp	r2, #45	; 0x2d
   11f00:	f000 80a5 	beq.w	1204e <__gethex+0x27a>
   11f04:	1c6e      	adds	r6, r5, #1
   11f06:	2000      	movs	r0, #0
   11f08:	f818 1002 	ldrb.w	r1, [r8, r2]
   11f0c:	1e4a      	subs	r2, r1, #1
   11f0e:	2a18      	cmp	r2, #24
   11f10:	f200 809b 	bhi.w	1204a <__gethex+0x276>
   11f14:	7872      	ldrb	r2, [r6, #1]
   11f16:	f818 2002 	ldrb.w	r2, [r8, r2]
   11f1a:	3910      	subs	r1, #16
   11f1c:	3601      	adds	r6, #1
   11f1e:	2a00      	cmp	r2, #0
   11f20:	d15a      	bne.n	11fd8 <__gethex+0x204>
   11f22:	b100      	cbz	r0, 11f26 <__gethex+0x152>
   11f24:	4249      	negs	r1, r1
   11f26:	4489      	add	r9, r1
   11f28:	f8cb 6000 	str.w	r6, [fp]
   11f2c:	2f00      	cmp	r7, #0
   11f2e:	d095      	beq.n	11e5c <__gethex+0x88>
   11f30:	2b00      	cmp	r3, #0
   11f32:	bf14      	ite	ne
   11f34:	2500      	movne	r5, #0
   11f36:	2506      	moveq	r5, #6
   11f38:	4628      	mov	r0, r5
   11f3a:	b005      	add	sp, #20
   11f3c:	ecbd 8b02 	vpop	{d8}
   11f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f44:	f8dd 900c 	ldr.w	r9, [sp, #12]
   11f48:	4623      	mov	r3, r4
   11f4a:	f846 3b04 	str.w	r3, [r6], #4
   11f4e:	4618      	mov	r0, r3
   11f50:	9b01      	ldr	r3, [sp, #4]
   11f52:	1af6      	subs	r6, r6, r3
   11f54:	10b6      	asrs	r6, r6, #2
   11f56:	f8cb 6010 	str.w	r6, [fp, #16]
   11f5a:	f000 fbe9 	bl	12730 <__hi0bits>
   11f5e:	0176      	lsls	r6, r6, #5
   11f60:	f8da 4000 	ldr.w	r4, [sl]
   11f64:	1a30      	subs	r0, r6, r0
   11f66:	42a0      	cmp	r0, r4
   11f68:	dc75      	bgt.n	12056 <__gethex+0x282>
   11f6a:	f2c0 80ef 	blt.w	1214c <__gethex+0x378>
   11f6e:	2700      	movs	r7, #0
   11f70:	f8da 3008 	ldr.w	r3, [sl, #8]
   11f74:	454b      	cmp	r3, r9
   11f76:	f2c0 8151 	blt.w	1221c <__gethex+0x448>
   11f7a:	f8da 3004 	ldr.w	r3, [sl, #4]
   11f7e:	454b      	cmp	r3, r9
   11f80:	dd4a      	ble.n	12018 <__gethex+0x244>
   11f82:	eba3 0909 	sub.w	r9, r3, r9
   11f86:	454c      	cmp	r4, r9
   11f88:	f300 8082 	bgt.w	12090 <__gethex+0x2bc>
   11f8c:	f8da 200c 	ldr.w	r2, [sl, #12]
   11f90:	2a02      	cmp	r2, #2
   11f92:	f000 8165 	beq.w	12260 <__gethex+0x48c>
   11f96:	2a03      	cmp	r2, #3
   11f98:	f000 8181 	beq.w	1229e <__gethex+0x4ca>
   11f9c:	2a01      	cmp	r2, #1
   11f9e:	f000 816f 	beq.w	12280 <__gethex+0x4ac>
   11fa2:	ee18 0a10 	vmov	r0, s16
   11fa6:	4659      	mov	r1, fp
   11fa8:	f000 fb0e 	bl	125c8 <_Bfree>
   11fac:	2550      	movs	r5, #80	; 0x50
   11fae:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11fb0:	2300      	movs	r3, #0
   11fb2:	4628      	mov	r0, r5
   11fb4:	6013      	str	r3, [r2, #0]
   11fb6:	b005      	add	sp, #20
   11fb8:	ecbd 8b02 	vpop	{d8}
   11fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11fc0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   11fc4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   11fc8:	f1a2 0110 	sub.w	r1, r2, #16
   11fcc:	f816 2f01 	ldrb.w	r2, [r6, #1]!
   11fd0:	f818 2002 	ldrb.w	r2, [r8, r2]
   11fd4:	2a00      	cmp	r2, #0
   11fd6:	d0a4      	beq.n	11f22 <__gethex+0x14e>
   11fd8:	2a19      	cmp	r2, #25
   11fda:	ddf1      	ble.n	11fc0 <__gethex+0x1ec>
   11fdc:	e7a1      	b.n	11f22 <__gethex+0x14e>
   11fde:	4949      	ldr	r1, [pc, #292]	; (12104 <__gethex+0x330>)
   11fe0:	9301      	str	r3, [sp, #4]
   11fe2:	2201      	movs	r2, #1
   11fe4:	4620      	mov	r0, r4
   11fe6:	f7ff f915 	bl	11214 <strncmp>
   11fea:	9b01      	ldr	r3, [sp, #4]
   11fec:	2800      	cmp	r0, #0
   11fee:	d16d      	bne.n	120cc <__gethex+0x2f8>
   11ff0:	7861      	ldrb	r1, [r4, #1]
   11ff2:	f818 2001 	ldrb.w	r2, [r8, r1]
   11ff6:	1c65      	adds	r5, r4, #1
   11ff8:	2a00      	cmp	r2, #0
   11ffa:	d069      	beq.n	120d0 <__gethex+0x2fc>
   11ffc:	2930      	cmp	r1, #48	; 0x30
   11ffe:	462c      	mov	r4, r5
   12000:	d105      	bne.n	1200e <__gethex+0x23a>
   12002:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   12006:	2b30      	cmp	r3, #48	; 0x30
   12008:	d0fb      	beq.n	12002 <__gethex+0x22e>
   1200a:	f818 2003 	ldrb.w	r2, [r8, r3]
   1200e:	fab2 f782 	clz	r7, r2
   12012:	097f      	lsrs	r7, r7, #5
   12014:	2301      	movs	r3, #1
   12016:	e702      	b.n	11e1e <__gethex+0x4a>
   12018:	2501      	movs	r5, #1
   1201a:	b157      	cbz	r7, 12032 <__gethex+0x25e>
   1201c:	f8da 300c 	ldr.w	r3, [sl, #12]
   12020:	2b02      	cmp	r3, #2
   12022:	d05d      	beq.n	120e0 <__gethex+0x30c>
   12024:	2b03      	cmp	r3, #3
   12026:	d05f      	beq.n	120e8 <__gethex+0x314>
   12028:	2b01      	cmp	r3, #1
   1202a:	f000 8084 	beq.w	12136 <__gethex+0x362>
   1202e:	f045 0510 	orr.w	r5, r5, #16
   12032:	9b10      	ldr	r3, [sp, #64]	; 0x40
   12034:	f8c3 b000 	str.w	fp, [r3]
   12038:	9b02      	ldr	r3, [sp, #8]
   1203a:	4628      	mov	r0, r5
   1203c:	f8c3 9000 	str.w	r9, [r3]
   12040:	b005      	add	sp, #20
   12042:	ecbd 8b02 	vpop	{d8}
   12046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1204a:	462e      	mov	r6, r5
   1204c:	e702      	b.n	11e54 <__gethex+0x80>
   1204e:	2001      	movs	r0, #1
   12050:	78aa      	ldrb	r2, [r5, #2]
   12052:	1cae      	adds	r6, r5, #2
   12054:	e758      	b.n	11f08 <__gethex+0x134>
   12056:	1b06      	subs	r6, r0, r4
   12058:	4631      	mov	r1, r6
   1205a:	4658      	mov	r0, fp
   1205c:	f000 ff96 	bl	12f8c <__any_on>
   12060:	4607      	mov	r7, r0
   12062:	b178      	cbz	r0, 12084 <__gethex+0x2b0>
   12064:	1e72      	subs	r2, r6, #1
   12066:	1153      	asrs	r3, r2, #5
   12068:	9901      	ldr	r1, [sp, #4]
   1206a:	2701      	movs	r7, #1
   1206c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
   12070:	f002 031f 	and.w	r3, r2, #31
   12074:	fa07 f303 	lsl.w	r3, r7, r3
   12078:	420b      	tst	r3, r1
   1207a:	d003      	beq.n	12084 <__gethex+0x2b0>
   1207c:	42ba      	cmp	r2, r7
   1207e:	f300 80e2 	bgt.w	12246 <__gethex+0x472>
   12082:	2702      	movs	r7, #2
   12084:	4631      	mov	r1, r6
   12086:	4658      	mov	r0, fp
   12088:	44b1      	add	r9, r6
   1208a:	f7ff fe51 	bl	11d30 <rshift>
   1208e:	e76f      	b.n	11f70 <__gethex+0x19c>
   12090:	f109 35ff 	add.w	r5, r9, #4294967295
   12094:	2f00      	cmp	r7, #0
   12096:	f040 80ce 	bne.w	12236 <__gethex+0x462>
   1209a:	2d00      	cmp	r5, #0
   1209c:	f040 80cd 	bne.w	1223a <__gethex+0x466>
   120a0:	116b      	asrs	r3, r5, #5
   120a2:	9a01      	ldr	r2, [sp, #4]
   120a4:	f005 051f 	and.w	r5, r5, #31
   120a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   120ac:	2301      	movs	r3, #1
   120ae:	40ab      	lsls	r3, r5
   120b0:	4213      	tst	r3, r2
   120b2:	4649      	mov	r1, r9
   120b4:	4658      	mov	r0, fp
   120b6:	bf18      	it	ne
   120b8:	f047 0702 	orrne.w	r7, r7, #2
   120bc:	eba4 0409 	sub.w	r4, r4, r9
   120c0:	f7ff fe36 	bl	11d30 <rshift>
   120c4:	2502      	movs	r5, #2
   120c6:	f8da 9004 	ldr.w	r9, [sl, #4]
   120ca:	e7a6      	b.n	1201a <__gethex+0x246>
   120cc:	7821      	ldrb	r1, [r4, #0]
   120ce:	4625      	mov	r5, r4
   120d0:	f001 01df 	and.w	r1, r1, #223	; 0xdf
   120d4:	2950      	cmp	r1, #80	; 0x50
   120d6:	f000 80bf 	beq.w	12258 <__gethex+0x484>
   120da:	f8cb 5000 	str.w	r5, [fp]
   120de:	e727      	b.n	11f30 <__gethex+0x15c>
   120e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   120e2:	f1c3 0301 	rsb	r3, r3, #1
   120e6:	9311      	str	r3, [sp, #68]	; 0x44
   120e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   120ea:	2b00      	cmp	r3, #0
   120ec:	d09f      	beq.n	1202e <__gethex+0x25a>
   120ee:	f8db 7010 	ldr.w	r7, [fp, #16]
   120f2:	f8dd 8004 	ldr.w	r8, [sp, #4]
   120f6:	00ba      	lsls	r2, r7, #2
   120f8:	4643      	mov	r3, r8
   120fa:	9201      	str	r2, [sp, #4]
   120fc:	eb08 0087 	add.w	r0, r8, r7, lsl #2
   12100:	2100      	movs	r1, #0
   12102:	e007      	b.n	12114 <__gethex+0x340>
   12104:	2000b3d4 	.word	0x2000b3d4
   12108:	20003538 	.word	0x20003538
   1210c:	4298      	cmp	r0, r3
   1210e:	f843 1c04 	str.w	r1, [r3, #-4]
   12112:	d93f      	bls.n	12194 <__gethex+0x3c0>
   12114:	461e      	mov	r6, r3
   12116:	f853 2b04 	ldr.w	r2, [r3], #4
   1211a:	f1b2 3fff 	cmp.w	r2, #4294967295
   1211e:	d0f5      	beq.n	1210c <__gethex+0x338>
   12120:	3201      	adds	r2, #1
   12122:	2d02      	cmp	r5, #2
   12124:	6032      	str	r2, [r6, #0]
   12126:	f000 80bf 	beq.w	122a8 <__gethex+0x4d4>
   1212a:	f014 041f 	ands.w	r4, r4, #31
   1212e:	f040 80e7 	bne.w	12300 <__gethex+0x52c>
   12132:	2521      	movs	r5, #33	; 0x21
   12134:	e77d      	b.n	12032 <__gethex+0x25e>
   12136:	07ba      	lsls	r2, r7, #30
   12138:	f57f af79 	bpl.w	1202e <__gethex+0x25a>
   1213c:	9b01      	ldr	r3, [sp, #4]
   1213e:	681b      	ldr	r3, [r3, #0]
   12140:	431f      	orrs	r7, r3
   12142:	07fb      	lsls	r3, r7, #31
   12144:	d4d3      	bmi.n	120ee <__gethex+0x31a>
   12146:	e772      	b.n	1202e <__gethex+0x25a>
   12148:	2000      	movs	r0, #0
   1214a:	e781      	b.n	12050 <__gethex+0x27c>
   1214c:	1a22      	subs	r2, r4, r0
   1214e:	4659      	mov	r1, fp
   12150:	ee18 0a10 	vmov	r0, s16
   12154:	eba9 0902 	sub.w	r9, r9, r2
   12158:	f000 fc76 	bl	12a48 <__lshift>
   1215c:	f100 0314 	add.w	r3, r0, #20
   12160:	4683      	mov	fp, r0
   12162:	9301      	str	r3, [sp, #4]
   12164:	2700      	movs	r7, #0
   12166:	e703      	b.n	11f70 <__gethex+0x19c>
   12168:	7872      	ldrb	r2, [r6, #1]
   1216a:	f818 0002 	ldrb.w	r0, [r8, r2]
   1216e:	1c71      	adds	r1, r6, #1
   12170:	2800      	cmp	r0, #0
   12172:	f000 80a0 	beq.w	122b6 <__gethex+0x4e2>
   12176:	460d      	mov	r5, r1
   12178:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1217c:	f818 0002 	ldrb.w	r0, [r8, r2]
   12180:	2800      	cmp	r0, #0
   12182:	d1f8      	bne.n	12176 <__gethex+0x3a2>
   12184:	1b75      	subs	r5, r6, r5
   12186:	ea4f 0985 	mov.w	r9, r5, lsl #2
   1218a:	460e      	mov	r6, r1
   1218c:	e65d      	b.n	11e4a <__gethex+0x76>
   1218e:	3402      	adds	r4, #2
   12190:	2300      	movs	r3, #0
   12192:	e638      	b.n	11e06 <__gethex+0x32>
   12194:	f8db 3008 	ldr.w	r3, [fp, #8]
   12198:	429f      	cmp	r7, r3
   1219a:	f280 808e 	bge.w	122ba <__gethex+0x4e6>
   1219e:	463b      	mov	r3, r7
   121a0:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
   121a4:	2101      	movs	r1, #1
   121a6:	3301      	adds	r3, #1
   121a8:	2d02      	cmp	r5, #2
   121aa:	f8cb 3010 	str.w	r3, [fp, #16]
   121ae:	6151      	str	r1, [r2, #20]
   121b0:	d07a      	beq.n	122a8 <__gethex+0x4d4>
   121b2:	429f      	cmp	r7, r3
   121b4:	dab9      	bge.n	1212a <__gethex+0x356>
   121b6:	2b00      	cmp	r3, #0
   121b8:	f340 809b 	ble.w	122f2 <__gethex+0x51e>
   121bc:	f8db 2014 	ldr.w	r2, [fp, #20]
   121c0:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   121c4:	f10b 0018 	add.w	r0, fp, #24
   121c8:	4283      	cmp	r3, r0
   121ca:	ea4f 0252 	mov.w	r2, r2, lsr #1
   121ce:	f240 80b1 	bls.w	12334 <__gethex+0x560>
   121d2:	4644      	mov	r4, r8
   121d4:	6801      	ldr	r1, [r0, #0]
   121d6:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
   121da:	f844 2b04 	str.w	r2, [r4], #4
   121de:	f850 2b04 	ldr.w	r2, [r0], #4
   121e2:	4283      	cmp	r3, r0
   121e4:	ea4f 0252 	mov.w	r2, r2, lsr #1
   121e8:	d8f4      	bhi.n	121d4 <__gethex+0x400>
   121ea:	eba3 030b 	sub.w	r3, r3, fp
   121ee:	3b19      	subs	r3, #25
   121f0:	089b      	lsrs	r3, r3, #2
   121f2:	3301      	adds	r3, #1
   121f4:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
   121f8:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   121fc:	2a00      	cmp	r2, #0
   121fe:	f040 809d 	bne.w	1233c <__gethex+0x568>
   12202:	eba3 0208 	sub.w	r2, r3, r8
   12206:	1092      	asrs	r2, r2, #2
   12208:	4543      	cmp	r3, r8
   1220a:	f8cb 2010 	str.w	r2, [fp, #16]
   1220e:	d073      	beq.n	122f8 <__gethex+0x524>
   12210:	f8da 3008 	ldr.w	r3, [sl, #8]
   12214:	f109 0901 	add.w	r9, r9, #1
   12218:	454b      	cmp	r3, r9
   1221a:	da8a      	bge.n	12132 <__gethex+0x35e>
   1221c:	ee18 0a10 	vmov	r0, s16
   12220:	4659      	mov	r1, fp
   12222:	f000 f9d1 	bl	125c8 <_Bfree>
   12226:	9a10      	ldr	r2, [sp, #64]	; 0x40
   12228:	2300      	movs	r3, #0
   1222a:	6013      	str	r3, [r2, #0]
   1222c:	25a3      	movs	r5, #163	; 0xa3
   1222e:	e683      	b.n	11f38 <__gethex+0x164>
   12230:	9e01      	ldr	r6, [sp, #4]
   12232:	2300      	movs	r3, #0
   12234:	e689      	b.n	11f4a <__gethex+0x176>
   12236:	2701      	movs	r7, #1
   12238:	e732      	b.n	120a0 <__gethex+0x2cc>
   1223a:	4629      	mov	r1, r5
   1223c:	4658      	mov	r0, fp
   1223e:	f000 fea5 	bl	12f8c <__any_on>
   12242:	4607      	mov	r7, r0
   12244:	e72c      	b.n	120a0 <__gethex+0x2cc>
   12246:	1eb1      	subs	r1, r6, #2
   12248:	4658      	mov	r0, fp
   1224a:	f000 fe9f 	bl	12f8c <__any_on>
   1224e:	2800      	cmp	r0, #0
   12250:	f43f af17 	beq.w	12082 <__gethex+0x2ae>
   12254:	2703      	movs	r7, #3
   12256:	e715      	b.n	12084 <__gethex+0x2b0>
   12258:	f04f 0900 	mov.w	r9, #0
   1225c:	2701      	movs	r7, #1
   1225e:	e64a      	b.n	11ef6 <__gethex+0x122>
   12260:	9a11      	ldr	r2, [sp, #68]	; 0x44
   12262:	2a00      	cmp	r2, #0
   12264:	f47f ae9d 	bne.w	11fa2 <__gethex+0x1ce>
   12268:	9902      	ldr	r1, [sp, #8]
   1226a:	600b      	str	r3, [r1, #0]
   1226c:	9b01      	ldr	r3, [sp, #4]
   1226e:	2201      	movs	r2, #1
   12270:	f8cb 2010 	str.w	r2, [fp, #16]
   12274:	601a      	str	r2, [r3, #0]
   12276:	9b10      	ldr	r3, [sp, #64]	; 0x40
   12278:	2562      	movs	r5, #98	; 0x62
   1227a:	f8c3 b000 	str.w	fp, [r3]
   1227e:	e65b      	b.n	11f38 <__gethex+0x164>
   12280:	454c      	cmp	r4, r9
   12282:	f47f ae8e 	bne.w	11fa2 <__gethex+0x1ce>
   12286:	2c01      	cmp	r4, #1
   12288:	d0ee      	beq.n	12268 <__gethex+0x494>
   1228a:	1e61      	subs	r1, r4, #1
   1228c:	4658      	mov	r0, fp
   1228e:	f000 fe7d 	bl	12f8c <__any_on>
   12292:	2800      	cmp	r0, #0
   12294:	f43f ae85 	beq.w	11fa2 <__gethex+0x1ce>
   12298:	f8da 3004 	ldr.w	r3, [sl, #4]
   1229c:	e7e4      	b.n	12268 <__gethex+0x494>
   1229e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   122a0:	2a00      	cmp	r2, #0
   122a2:	f43f ae7e 	beq.w	11fa2 <__gethex+0x1ce>
   122a6:	e7df      	b.n	12268 <__gethex+0x494>
   122a8:	f8da 3000 	ldr.w	r3, [sl]
   122ac:	3b01      	subs	r3, #1
   122ae:	42a3      	cmp	r3, r4
   122b0:	d034      	beq.n	1231c <__gethex+0x548>
   122b2:	2522      	movs	r5, #34	; 0x22
   122b4:	e6bd      	b.n	12032 <__gethex+0x25e>
   122b6:	460e      	mov	r6, r1
   122b8:	e5c7      	b.n	11e4a <__gethex+0x76>
   122ba:	f8db 1004 	ldr.w	r1, [fp, #4]
   122be:	ee18 0a10 	vmov	r0, s16
   122c2:	3101      	adds	r1, #1
   122c4:	f000 f95a 	bl	1257c <_Balloc>
   122c8:	4606      	mov	r6, r0
   122ca:	b3c8      	cbz	r0, 12340 <__gethex+0x56c>
   122cc:	f8db 3010 	ldr.w	r3, [fp, #16]
   122d0:	3302      	adds	r3, #2
   122d2:	009a      	lsls	r2, r3, #2
   122d4:	f10b 010c 	add.w	r1, fp, #12
   122d8:	300c      	adds	r0, #12
   122da:	f7fb f939 	bl	d550 <memcpy>
   122de:	4659      	mov	r1, fp
   122e0:	ee18 0a10 	vmov	r0, s16
   122e4:	f000 f970 	bl	125c8 <_Bfree>
   122e8:	f106 0814 	add.w	r8, r6, #20
   122ec:	6933      	ldr	r3, [r6, #16]
   122ee:	46b3      	mov	fp, r6
   122f0:	e756      	b.n	121a0 <__gethex+0x3cc>
   122f2:	2300      	movs	r3, #0
   122f4:	f8cb 3010 	str.w	r3, [fp, #16]
   122f8:	2300      	movs	r3, #0
   122fa:	f8cb 3014 	str.w	r3, [fp, #20]
   122fe:	e787      	b.n	12210 <__gethex+0x43c>
   12300:	9b01      	ldr	r3, [sp, #4]
   12302:	4443      	add	r3, r8
   12304:	f1c4 0420 	rsb	r4, r4, #32
   12308:	f853 0c04 	ldr.w	r0, [r3, #-4]
   1230c:	f000 fa10 	bl	12730 <__hi0bits>
   12310:	42a0      	cmp	r0, r4
   12312:	f6bf af0e 	bge.w	12132 <__gethex+0x35e>
   12316:	f8db 3010 	ldr.w	r3, [fp, #16]
   1231a:	e74c      	b.n	121b6 <__gethex+0x3e2>
   1231c:	1163      	asrs	r3, r4, #5
   1231e:	f004 041f 	and.w	r4, r4, #31
   12322:	f858 2023 	ldr.w	r2, [r8, r3, lsl #2]
   12326:	2301      	movs	r3, #1
   12328:	40a3      	lsls	r3, r4
   1232a:	4213      	tst	r3, r2
   1232c:	bf0c      	ite	eq
   1232e:	2522      	moveq	r5, #34	; 0x22
   12330:	2521      	movne	r5, #33	; 0x21
   12332:	e67e      	b.n	12032 <__gethex+0x25e>
   12334:	f8c8 2000 	str.w	r2, [r8]
   12338:	4643      	mov	r3, r8
   1233a:	b16a      	cbz	r2, 12358 <__gethex+0x584>
   1233c:	3304      	adds	r3, #4
   1233e:	e760      	b.n	12202 <__gethex+0x42e>
   12340:	4b07      	ldr	r3, [pc, #28]	; (12360 <__gethex+0x58c>)
   12342:	4808      	ldr	r0, [pc, #32]	; (12364 <__gethex+0x590>)
   12344:	4632      	mov	r2, r6
   12346:	2184      	movs	r1, #132	; 0x84
   12348:	f004 fa0a 	bl	16760 <__assert_func>
   1234c:	4b04      	ldr	r3, [pc, #16]	; (12360 <__gethex+0x58c>)
   1234e:	4805      	ldr	r0, [pc, #20]	; (12364 <__gethex+0x590>)
   12350:	465a      	mov	r2, fp
   12352:	21e4      	movs	r1, #228	; 0xe4
   12354:	f004 fa04 	bl	16760 <__assert_func>
   12358:	f8cb 2010 	str.w	r2, [fp, #16]
   1235c:	e7cc      	b.n	122f8 <__gethex+0x524>
   1235e:	bf00      	nop
   12360:	200034c0 	.word	0x200034c0
   12364:	200034d4 	.word	0x200034d4

00012368 <__match>:
   12368:	b410      	push	{r4}
   1236a:	6804      	ldr	r4, [r0, #0]
   1236c:	e009      	b.n	12382 <__match+0x1a>
   1236e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   12372:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   12376:	f1bc 0f19 	cmp.w	ip, #25
   1237a:	bf98      	it	ls
   1237c:	3320      	addls	r3, #32
   1237e:	4293      	cmp	r3, r2
   12380:	d109      	bne.n	12396 <__match+0x2e>
   12382:	f811 2b01 	ldrb.w	r2, [r1], #1
   12386:	2a00      	cmp	r2, #0
   12388:	d1f1      	bne.n	1236e <__match+0x6>
   1238a:	3401      	adds	r4, #1
   1238c:	6004      	str	r4, [r0, #0]
   1238e:	2001      	movs	r0, #1
   12390:	f85d 4b04 	ldr.w	r4, [sp], #4
   12394:	4770      	bx	lr
   12396:	2000      	movs	r0, #0
   12398:	f85d 4b04 	ldr.w	r4, [sp], #4
   1239c:	4770      	bx	lr
   1239e:	bf00      	nop

000123a0 <__hexnan>:
   123a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   123a4:	6809      	ldr	r1, [r1, #0]
   123a6:	b085      	sub	sp, #20
   123a8:	114b      	asrs	r3, r1, #5
   123aa:	f011 011f 	ands.w	r1, r1, #31
   123ae:	9002      	str	r0, [sp, #8]
   123b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   123b4:	9103      	str	r1, [sp, #12]
   123b6:	f040 808f 	bne.w	124d8 <__hexnan+0x138>
   123ba:	1f1d      	subs	r5, r3, #4
   123bc:	9301      	str	r3, [sp, #4]
   123be:	9b02      	ldr	r3, [sp, #8]
   123c0:	9901      	ldr	r1, [sp, #4]
   123c2:	681c      	ldr	r4, [r3, #0]
   123c4:	2300      	movs	r3, #0
   123c6:	f841 3c04 	str.w	r3, [r1, #-4]
   123ca:	7861      	ldrb	r1, [r4, #1]
   123cc:	3401      	adds	r4, #1
   123ce:	2900      	cmp	r1, #0
   123d0:	f000 8098 	beq.w	12504 <__hexnan+0x164>
   123d4:	f8df 9174 	ldr.w	r9, [pc, #372]	; 1254c <__hexnan+0x1ac>
   123d8:	46a8      	mov	r8, r5
   123da:	46ac      	mov	ip, r5
   123dc:	469a      	mov	sl, r3
   123de:	461e      	mov	r6, r3
   123e0:	e00e      	b.n	12400 <__hexnan+0x60>
   123e2:	2920      	cmp	r1, #32
   123e4:	f200 808c 	bhi.w	12500 <__hexnan+0x160>
   123e8:	4556      	cmp	r6, sl
   123ea:	dd06      	ble.n	123fa <__hexnan+0x5a>
   123ec:	45c4      	cmp	ip, r8
   123ee:	d201      	bcs.n	123f4 <__hexnan+0x54>
   123f0:	2b07      	cmp	r3, #7
   123f2:	dd5b      	ble.n	124ac <__hexnan+0x10c>
   123f4:	4562      	cmp	r2, ip
   123f6:	d351      	bcc.n	1249c <__hexnan+0xfc>
   123f8:	2308      	movs	r3, #8
   123fa:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   123fe:	b1a1      	cbz	r1, 1242a <__hexnan+0x8a>
   12400:	f819 0001 	ldrb.w	r0, [r9, r1]
   12404:	2800      	cmp	r0, #0
   12406:	d0ec      	beq.n	123e2 <__hexnan+0x42>
   12408:	3301      	adds	r3, #1
   1240a:	2b08      	cmp	r3, #8
   1240c:	f106 0601 	add.w	r6, r6, #1
   12410:	dc3a      	bgt.n	12488 <__hexnan+0xe8>
   12412:	f8dc 1000 	ldr.w	r1, [ip]
   12416:	0109      	lsls	r1, r1, #4
   12418:	f000 000f 	and.w	r0, r0, #15
   1241c:	4308      	orrs	r0, r1
   1241e:	f8cc 0000 	str.w	r0, [ip]
   12422:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   12426:	2900      	cmp	r1, #0
   12428:	d1ea      	bne.n	12400 <__hexnan+0x60>
   1242a:	2e00      	cmp	r6, #0
   1242c:	d06a      	beq.n	12504 <__hexnan+0x164>
   1242e:	45c4      	cmp	ip, r8
   12430:	d201      	bcs.n	12436 <__hexnan+0x96>
   12432:	2b07      	cmp	r3, #7
   12434:	dd74      	ble.n	12520 <__hexnan+0x180>
   12436:	4562      	cmp	r2, ip
   12438:	d252      	bcs.n	124e0 <__hexnan+0x140>
   1243a:	1f11      	subs	r1, r2, #4
   1243c:	4663      	mov	r3, ip
   1243e:	f853 0b04 	ldr.w	r0, [r3], #4
   12442:	f841 0f04 	str.w	r0, [r1, #4]!
   12446:	42ab      	cmp	r3, r5
   12448:	d9f9      	bls.n	1243e <__hexnan+0x9e>
   1244a:	eba5 030c 	sub.w	r3, r5, ip
   1244e:	f023 0303 	bic.w	r3, r3, #3
   12452:	1c69      	adds	r1, r5, #1
   12454:	3304      	adds	r3, #4
   12456:	f10c 0c01 	add.w	ip, ip, #1
   1245a:	4561      	cmp	r1, ip
   1245c:	bf38      	it	cc
   1245e:	2304      	movcc	r3, #4
   12460:	4413      	add	r3, r2
   12462:	2100      	movs	r1, #0
   12464:	f843 1b04 	str.w	r1, [r3], #4
   12468:	42ab      	cmp	r3, r5
   1246a:	d9fb      	bls.n	12464 <__hexnan+0xc4>
   1246c:	9b01      	ldr	r3, [sp, #4]
   1246e:	f853 3c04 	ldr.w	r3, [r3, #-4]
   12472:	b92b      	cbnz	r3, 12480 <__hexnan+0xe0>
   12474:	42aa      	cmp	r2, r5
   12476:	d049      	beq.n	1250c <__hexnan+0x16c>
   12478:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   1247c:	2b00      	cmp	r3, #0
   1247e:	d0f9      	beq.n	12474 <__hexnan+0xd4>
   12480:	2005      	movs	r0, #5
   12482:	b005      	add	sp, #20
   12484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12488:	4562      	cmp	r2, ip
   1248a:	d2b6      	bcs.n	123fa <__hexnan+0x5a>
   1248c:	2300      	movs	r3, #0
   1248e:	f84c 3c04 	str.w	r3, [ip, #-4]
   12492:	4619      	mov	r1, r3
   12494:	f1ac 0c04 	sub.w	ip, ip, #4
   12498:	2301      	movs	r3, #1
   1249a:	e7bd      	b.n	12418 <__hexnan+0x78>
   1249c:	2300      	movs	r3, #0
   1249e:	f1ac 0804 	sub.w	r8, ip, #4
   124a2:	f84c 3c04 	str.w	r3, [ip, #-4]
   124a6:	46b2      	mov	sl, r6
   124a8:	46c4      	mov	ip, r8
   124aa:	e7a6      	b.n	123fa <__hexnan+0x5a>
   124ac:	f1c3 0108 	rsb	r1, r3, #8
   124b0:	f8dc 3000 	ldr.w	r3, [ip]
   124b4:	0089      	lsls	r1, r1, #2
   124b6:	f1c1 0e20 	rsb	lr, r1, #32
   124ba:	4660      	mov	r0, ip
   124bc:	469b      	mov	fp, r3
   124be:	6847      	ldr	r7, [r0, #4]
   124c0:	fa07 f30e 	lsl.w	r3, r7, lr
   124c4:	ea43 030b 	orr.w	r3, r3, fp
   124c8:	fa27 fb01 	lsr.w	fp, r7, r1
   124cc:	6003      	str	r3, [r0, #0]
   124ce:	f840 bf04 	str.w	fp, [r0, #4]!
   124d2:	4540      	cmp	r0, r8
   124d4:	d3f3      	bcc.n	124be <__hexnan+0x11e>
   124d6:	e78d      	b.n	123f4 <__hexnan+0x54>
   124d8:	1d19      	adds	r1, r3, #4
   124da:	9101      	str	r1, [sp, #4]
   124dc:	461d      	mov	r5, r3
   124de:	e76e      	b.n	123be <__hexnan+0x1e>
   124e0:	9b03      	ldr	r3, [sp, #12]
   124e2:	2b00      	cmp	r3, #0
   124e4:	d0c2      	beq.n	1246c <__hexnan+0xcc>
   124e6:	9b03      	ldr	r3, [sp, #12]
   124e8:	9801      	ldr	r0, [sp, #4]
   124ea:	f1c3 0120 	rsb	r1, r3, #32
   124ee:	f04f 33ff 	mov.w	r3, #4294967295
   124f2:	40cb      	lsrs	r3, r1
   124f4:	f850 1c04 	ldr.w	r1, [r0, #-4]
   124f8:	400b      	ands	r3, r1
   124fa:	f840 3c04 	str.w	r3, [r0, #-4]
   124fe:	e7b8      	b.n	12472 <__hexnan+0xd2>
   12500:	2929      	cmp	r1, #41	; 0x29
   12502:	d009      	beq.n	12518 <__hexnan+0x178>
   12504:	2004      	movs	r0, #4
   12506:	b005      	add	sp, #20
   12508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1250c:	2301      	movs	r3, #1
   1250e:	2005      	movs	r0, #5
   12510:	602b      	str	r3, [r5, #0]
   12512:	b005      	add	sp, #20
   12514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12518:	9902      	ldr	r1, [sp, #8]
   1251a:	3401      	adds	r4, #1
   1251c:	600c      	str	r4, [r1, #0]
   1251e:	e784      	b.n	1242a <__hexnan+0x8a>
   12520:	f8dc 1000 	ldr.w	r1, [ip]
   12524:	f1c3 0308 	rsb	r3, r3, #8
   12528:	009b      	lsls	r3, r3, #2
   1252a:	f1c3 0720 	rsb	r7, r3, #32
   1252e:	4664      	mov	r4, ip
   12530:	4608      	mov	r0, r1
   12532:	6866      	ldr	r6, [r4, #4]
   12534:	fa06 f107 	lsl.w	r1, r6, r7
   12538:	4301      	orrs	r1, r0
   1253a:	fa26 f003 	lsr.w	r0, r6, r3
   1253e:	6021      	str	r1, [r4, #0]
   12540:	f844 0f04 	str.w	r0, [r4, #4]!
   12544:	4544      	cmp	r4, r8
   12546:	d3f4      	bcc.n	12532 <__hexnan+0x192>
   12548:	e775      	b.n	12436 <__hexnan+0x96>
   1254a:	bf00      	nop
   1254c:	20003538 	.word	0x20003538

00012550 <__ascii_mbtowc>:
   12550:	b082      	sub	sp, #8
   12552:	b149      	cbz	r1, 12568 <__ascii_mbtowc+0x18>
   12554:	b15a      	cbz	r2, 1256e <__ascii_mbtowc+0x1e>
   12556:	b16b      	cbz	r3, 12574 <__ascii_mbtowc+0x24>
   12558:	7813      	ldrb	r3, [r2, #0]
   1255a:	600b      	str	r3, [r1, #0]
   1255c:	7812      	ldrb	r2, [r2, #0]
   1255e:	1e10      	subs	r0, r2, #0
   12560:	bf18      	it	ne
   12562:	2001      	movne	r0, #1
   12564:	b002      	add	sp, #8
   12566:	4770      	bx	lr
   12568:	a901      	add	r1, sp, #4
   1256a:	2a00      	cmp	r2, #0
   1256c:	d1f3      	bne.n	12556 <__ascii_mbtowc+0x6>
   1256e:	4610      	mov	r0, r2
   12570:	b002      	add	sp, #8
   12572:	4770      	bx	lr
   12574:	f06f 0001 	mvn.w	r0, #1
   12578:	e7f4      	b.n	12564 <__ascii_mbtowc+0x14>
   1257a:	bf00      	nop

0001257c <_Balloc>:
   1257c:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1257e:	b570      	push	{r4, r5, r6, lr}
   12580:	4605      	mov	r5, r0
   12582:	460c      	mov	r4, r1
   12584:	b14b      	cbz	r3, 1259a <_Balloc+0x1e>
   12586:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   1258a:	b180      	cbz	r0, 125ae <_Balloc+0x32>
   1258c:	6802      	ldr	r2, [r0, #0]
   1258e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   12592:	2300      	movs	r3, #0
   12594:	e9c0 3303 	strd	r3, r3, [r0, #12]
   12598:	bd70      	pop	{r4, r5, r6, pc}
   1259a:	2221      	movs	r2, #33	; 0x21
   1259c:	2104      	movs	r1, #4
   1259e:	f7fc fd61 	bl	f064 <_calloc_r>
   125a2:	4603      	mov	r3, r0
   125a4:	6468      	str	r0, [r5, #68]	; 0x44
   125a6:	2800      	cmp	r0, #0
   125a8:	d1ed      	bne.n	12586 <_Balloc+0xa>
   125aa:	2000      	movs	r0, #0
   125ac:	bd70      	pop	{r4, r5, r6, pc}
   125ae:	2101      	movs	r1, #1
   125b0:	fa01 f604 	lsl.w	r6, r1, r4
   125b4:	1d72      	adds	r2, r6, #5
   125b6:	0092      	lsls	r2, r2, #2
   125b8:	4628      	mov	r0, r5
   125ba:	f7fc fd53 	bl	f064 <_calloc_r>
   125be:	2800      	cmp	r0, #0
   125c0:	d0f3      	beq.n	125aa <_Balloc+0x2e>
   125c2:	e9c0 4601 	strd	r4, r6, [r0, #4]
   125c6:	e7e4      	b.n	12592 <_Balloc+0x16>

000125c8 <_Bfree>:
   125c8:	b131      	cbz	r1, 125d8 <_Bfree+0x10>
   125ca:	6c43      	ldr	r3, [r0, #68]	; 0x44
   125cc:	684a      	ldr	r2, [r1, #4]
   125ce:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   125d2:	6008      	str	r0, [r1, #0]
   125d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   125d8:	4770      	bx	lr
   125da:	bf00      	nop

000125dc <__multadd>:
   125dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   125e0:	690e      	ldr	r6, [r1, #16]
   125e2:	4680      	mov	r8, r0
   125e4:	460f      	mov	r7, r1
   125e6:	461d      	mov	r5, r3
   125e8:	f101 0e14 	add.w	lr, r1, #20
   125ec:	2000      	movs	r0, #0
   125ee:	f8de 1000 	ldr.w	r1, [lr]
   125f2:	b28c      	uxth	r4, r1
   125f4:	fb02 5304 	mla	r3, r2, r4, r5
   125f8:	0c09      	lsrs	r1, r1, #16
   125fa:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   125fe:	fb02 cc01 	mla	ip, r2, r1, ip
   12602:	3001      	adds	r0, #1
   12604:	b29c      	uxth	r4, r3
   12606:	eb04 440c 	add.w	r4, r4, ip, lsl #16
   1260a:	4286      	cmp	r6, r0
   1260c:	f84e 4b04 	str.w	r4, [lr], #4
   12610:	ea4f 451c 	mov.w	r5, ip, lsr #16
   12614:	dceb      	bgt.n	125ee <__multadd+0x12>
   12616:	b13d      	cbz	r5, 12628 <__multadd+0x4c>
   12618:	68bb      	ldr	r3, [r7, #8]
   1261a:	42b3      	cmp	r3, r6
   1261c:	dd07      	ble.n	1262e <__multadd+0x52>
   1261e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   12622:	3601      	adds	r6, #1
   12624:	615d      	str	r5, [r3, #20]
   12626:	613e      	str	r6, [r7, #16]
   12628:	4638      	mov	r0, r7
   1262a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1262e:	6879      	ldr	r1, [r7, #4]
   12630:	4640      	mov	r0, r8
   12632:	3101      	adds	r1, #1
   12634:	f7ff ffa2 	bl	1257c <_Balloc>
   12638:	4604      	mov	r4, r0
   1263a:	b1b0      	cbz	r0, 1266a <__multadd+0x8e>
   1263c:	693a      	ldr	r2, [r7, #16]
   1263e:	3202      	adds	r2, #2
   12640:	f107 010c 	add.w	r1, r7, #12
   12644:	0092      	lsls	r2, r2, #2
   12646:	300c      	adds	r0, #12
   12648:	f7fa ff82 	bl	d550 <memcpy>
   1264c:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
   12650:	687a      	ldr	r2, [r7, #4]
   12652:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   12656:	6039      	str	r1, [r7, #0]
   12658:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   1265c:	4627      	mov	r7, r4
   1265e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   12662:	3601      	adds	r6, #1
   12664:	615d      	str	r5, [r3, #20]
   12666:	613e      	str	r6, [r7, #16]
   12668:	e7de      	b.n	12628 <__multadd+0x4c>
   1266a:	4b03      	ldr	r3, [pc, #12]	; (12678 <__multadd+0x9c>)
   1266c:	4803      	ldr	r0, [pc, #12]	; (1267c <__multadd+0xa0>)
   1266e:	4622      	mov	r2, r4
   12670:	21ba      	movs	r1, #186	; 0xba
   12672:	f004 f875 	bl	16760 <__assert_func>
   12676:	bf00      	nop
   12678:	200034c0 	.word	0x200034c0
   1267c:	20003638 	.word	0x20003638

00012680 <__s2b>:
   12680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12684:	4617      	mov	r7, r2
   12686:	4a27      	ldr	r2, [pc, #156]	; (12724 <__s2b+0xa4>)
   12688:	461e      	mov	r6, r3
   1268a:	3308      	adds	r3, #8
   1268c:	460c      	mov	r4, r1
   1268e:	2e09      	cmp	r6, #9
   12690:	fb82 1203 	smull	r1, r2, r2, r3
   12694:	ea4f 73e3 	mov.w	r3, r3, asr #31
   12698:	4605      	mov	r5, r0
   1269a:	ebc3 0362 	rsb	r3, r3, r2, asr #1
   1269e:	dd39      	ble.n	12714 <__s2b+0x94>
   126a0:	f04f 0c01 	mov.w	ip, #1
   126a4:	2100      	movs	r1, #0
   126a6:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   126aa:	4563      	cmp	r3, ip
   126ac:	f101 0101 	add.w	r1, r1, #1
   126b0:	dcf9      	bgt.n	126a6 <__s2b+0x26>
   126b2:	4628      	mov	r0, r5
   126b4:	f7ff ff62 	bl	1257c <_Balloc>
   126b8:	4601      	mov	r1, r0
   126ba:	b368      	cbz	r0, 12718 <__s2b+0x98>
   126bc:	9b08      	ldr	r3, [sp, #32]
   126be:	6143      	str	r3, [r0, #20]
   126c0:	2f09      	cmp	r7, #9
   126c2:	f04f 0301 	mov.w	r3, #1
   126c6:	6103      	str	r3, [r0, #16]
   126c8:	dc12      	bgt.n	126f0 <__s2b+0x70>
   126ca:	340a      	adds	r4, #10
   126cc:	2709      	movs	r7, #9
   126ce:	42be      	cmp	r6, r7
   126d0:	dd0b      	ble.n	126ea <__s2b+0x6a>
   126d2:	1bf2      	subs	r2, r6, r7
   126d4:	18a6      	adds	r6, r4, r2
   126d6:	f814 3b01 	ldrb.w	r3, [r4], #1
   126da:	220a      	movs	r2, #10
   126dc:	3b30      	subs	r3, #48	; 0x30
   126de:	4628      	mov	r0, r5
   126e0:	f7ff ff7c 	bl	125dc <__multadd>
   126e4:	42a6      	cmp	r6, r4
   126e6:	4601      	mov	r1, r0
   126e8:	d1f5      	bne.n	126d6 <__s2b+0x56>
   126ea:	4608      	mov	r0, r1
   126ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   126f0:	f104 0909 	add.w	r9, r4, #9
   126f4:	46c8      	mov	r8, r9
   126f6:	443c      	add	r4, r7
   126f8:	f818 3b01 	ldrb.w	r3, [r8], #1
   126fc:	220a      	movs	r2, #10
   126fe:	3b30      	subs	r3, #48	; 0x30
   12700:	4628      	mov	r0, r5
   12702:	f7ff ff6b 	bl	125dc <__multadd>
   12706:	45a0      	cmp	r8, r4
   12708:	4601      	mov	r1, r0
   1270a:	d1f5      	bne.n	126f8 <__s2b+0x78>
   1270c:	f1a7 0408 	sub.w	r4, r7, #8
   12710:	444c      	add	r4, r9
   12712:	e7dc      	b.n	126ce <__s2b+0x4e>
   12714:	2100      	movs	r1, #0
   12716:	e7cc      	b.n	126b2 <__s2b+0x32>
   12718:	460a      	mov	r2, r1
   1271a:	4b03      	ldr	r3, [pc, #12]	; (12728 <__s2b+0xa8>)
   1271c:	4803      	ldr	r0, [pc, #12]	; (1272c <__s2b+0xac>)
   1271e:	21d3      	movs	r1, #211	; 0xd3
   12720:	f004 f81e 	bl	16760 <__assert_func>
   12724:	38e38e39 	.word	0x38e38e39
   12728:	200034c0 	.word	0x200034c0
   1272c:	20003638 	.word	0x20003638

00012730 <__hi0bits>:
   12730:	0c03      	lsrs	r3, r0, #16
   12732:	041b      	lsls	r3, r3, #16
   12734:	b9d3      	cbnz	r3, 1276c <__hi0bits+0x3c>
   12736:	0400      	lsls	r0, r0, #16
   12738:	2310      	movs	r3, #16
   1273a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   1273e:	bf04      	itt	eq
   12740:	0200      	lsleq	r0, r0, #8
   12742:	3308      	addeq	r3, #8
   12744:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   12748:	bf04      	itt	eq
   1274a:	0100      	lsleq	r0, r0, #4
   1274c:	3304      	addeq	r3, #4
   1274e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   12752:	bf04      	itt	eq
   12754:	0080      	lsleq	r0, r0, #2
   12756:	3302      	addeq	r3, #2
   12758:	2800      	cmp	r0, #0
   1275a:	db05      	blt.n	12768 <__hi0bits+0x38>
   1275c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   12760:	f103 0301 	add.w	r3, r3, #1
   12764:	bf08      	it	eq
   12766:	2320      	moveq	r3, #32
   12768:	4618      	mov	r0, r3
   1276a:	4770      	bx	lr
   1276c:	2300      	movs	r3, #0
   1276e:	e7e4      	b.n	1273a <__hi0bits+0xa>

00012770 <__lo0bits>:
   12770:	6803      	ldr	r3, [r0, #0]
   12772:	f013 0207 	ands.w	r2, r3, #7
   12776:	d008      	beq.n	1278a <__lo0bits+0x1a>
   12778:	07d9      	lsls	r1, r3, #31
   1277a:	d41f      	bmi.n	127bc <__lo0bits+0x4c>
   1277c:	079a      	lsls	r2, r3, #30
   1277e:	d522      	bpl.n	127c6 <__lo0bits+0x56>
   12780:	085b      	lsrs	r3, r3, #1
   12782:	6003      	str	r3, [r0, #0]
   12784:	2201      	movs	r2, #1
   12786:	4610      	mov	r0, r2
   12788:	4770      	bx	lr
   1278a:	b299      	uxth	r1, r3
   1278c:	b909      	cbnz	r1, 12792 <__lo0bits+0x22>
   1278e:	0c1b      	lsrs	r3, r3, #16
   12790:	2210      	movs	r2, #16
   12792:	b2d9      	uxtb	r1, r3
   12794:	b909      	cbnz	r1, 1279a <__lo0bits+0x2a>
   12796:	3208      	adds	r2, #8
   12798:	0a1b      	lsrs	r3, r3, #8
   1279a:	0719      	lsls	r1, r3, #28
   1279c:	bf04      	itt	eq
   1279e:	091b      	lsreq	r3, r3, #4
   127a0:	3204      	addeq	r2, #4
   127a2:	0799      	lsls	r1, r3, #30
   127a4:	bf04      	itt	eq
   127a6:	089b      	lsreq	r3, r3, #2
   127a8:	3202      	addeq	r2, #2
   127aa:	07d9      	lsls	r1, r3, #31
   127ac:	d403      	bmi.n	127b6 <__lo0bits+0x46>
   127ae:	085b      	lsrs	r3, r3, #1
   127b0:	f102 0201 	add.w	r2, r2, #1
   127b4:	d005      	beq.n	127c2 <__lo0bits+0x52>
   127b6:	6003      	str	r3, [r0, #0]
   127b8:	4610      	mov	r0, r2
   127ba:	4770      	bx	lr
   127bc:	2200      	movs	r2, #0
   127be:	4610      	mov	r0, r2
   127c0:	4770      	bx	lr
   127c2:	2220      	movs	r2, #32
   127c4:	e7df      	b.n	12786 <__lo0bits+0x16>
   127c6:	089b      	lsrs	r3, r3, #2
   127c8:	2202      	movs	r2, #2
   127ca:	6003      	str	r3, [r0, #0]
   127cc:	4610      	mov	r0, r2
   127ce:	4770      	bx	lr

000127d0 <__i2b>:
   127d0:	b538      	push	{r3, r4, r5, lr}
   127d2:	6c43      	ldr	r3, [r0, #68]	; 0x44
   127d4:	4604      	mov	r4, r0
   127d6:	460d      	mov	r5, r1
   127d8:	b14b      	cbz	r3, 127ee <__i2b+0x1e>
   127da:	6858      	ldr	r0, [r3, #4]
   127dc:	b1b0      	cbz	r0, 1280c <__i2b+0x3c>
   127de:	6802      	ldr	r2, [r0, #0]
   127e0:	605a      	str	r2, [r3, #4]
   127e2:	2200      	movs	r2, #0
   127e4:	2301      	movs	r3, #1
   127e6:	e9c0 3504 	strd	r3, r5, [r0, #16]
   127ea:	60c2      	str	r2, [r0, #12]
   127ec:	bd38      	pop	{r3, r4, r5, pc}
   127ee:	2221      	movs	r2, #33	; 0x21
   127f0:	2104      	movs	r1, #4
   127f2:	f7fc fc37 	bl	f064 <_calloc_r>
   127f6:	4603      	mov	r3, r0
   127f8:	6460      	str	r0, [r4, #68]	; 0x44
   127fa:	2800      	cmp	r0, #0
   127fc:	d1ed      	bne.n	127da <__i2b+0xa>
   127fe:	4b09      	ldr	r3, [pc, #36]	; (12824 <__i2b+0x54>)
   12800:	4809      	ldr	r0, [pc, #36]	; (12828 <__i2b+0x58>)
   12802:	2200      	movs	r2, #0
   12804:	f240 1145 	movw	r1, #325	; 0x145
   12808:	f003 ffaa 	bl	16760 <__assert_func>
   1280c:	221c      	movs	r2, #28
   1280e:	2101      	movs	r1, #1
   12810:	4620      	mov	r0, r4
   12812:	f7fc fc27 	bl	f064 <_calloc_r>
   12816:	2800      	cmp	r0, #0
   12818:	d0f1      	beq.n	127fe <__i2b+0x2e>
   1281a:	2201      	movs	r2, #1
   1281c:	2302      	movs	r3, #2
   1281e:	e9c0 2301 	strd	r2, r3, [r0, #4]
   12822:	e7de      	b.n	127e2 <__i2b+0x12>
   12824:	200034c0 	.word	0x200034c0
   12828:	20003638 	.word	0x20003638

0001282c <__multiply>:
   1282c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12830:	690e      	ldr	r6, [r1, #16]
   12832:	6915      	ldr	r5, [r2, #16]
   12834:	42ae      	cmp	r6, r5
   12836:	b085      	sub	sp, #20
   12838:	4688      	mov	r8, r1
   1283a:	4614      	mov	r4, r2
   1283c:	db05      	blt.n	1284a <__multiply+0x1e>
   1283e:	462a      	mov	r2, r5
   12840:	4623      	mov	r3, r4
   12842:	4635      	mov	r5, r6
   12844:	460c      	mov	r4, r1
   12846:	4616      	mov	r6, r2
   12848:	4698      	mov	r8, r3
   1284a:	68a3      	ldr	r3, [r4, #8]
   1284c:	6861      	ldr	r1, [r4, #4]
   1284e:	19af      	adds	r7, r5, r6
   12850:	42bb      	cmp	r3, r7
   12852:	bfb8      	it	lt
   12854:	3101      	addlt	r1, #1
   12856:	f7ff fe91 	bl	1257c <_Balloc>
   1285a:	9001      	str	r0, [sp, #4]
   1285c:	2800      	cmp	r0, #0
   1285e:	f000 8087 	beq.w	12970 <__multiply+0x144>
   12862:	9b01      	ldr	r3, [sp, #4]
   12864:	f103 0914 	add.w	r9, r3, #20
   12868:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
   1286c:	45d1      	cmp	r9, sl
   1286e:	d205      	bcs.n	1287c <__multiply+0x50>
   12870:	464b      	mov	r3, r9
   12872:	2200      	movs	r2, #0
   12874:	f843 2b04 	str.w	r2, [r3], #4
   12878:	459a      	cmp	sl, r3
   1287a:	d8fb      	bhi.n	12874 <__multiply+0x48>
   1287c:	f108 0814 	add.w	r8, r8, #20
   12880:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
   12884:	f104 0314 	add.w	r3, r4, #20
   12888:	45d8      	cmp	r8, fp
   1288a:	461a      	mov	r2, r3
   1288c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   12890:	d25f      	bcs.n	12952 <__multiply+0x126>
   12892:	1b2b      	subs	r3, r5, r4
   12894:	3b15      	subs	r3, #21
   12896:	f023 0303 	bic.w	r3, r3, #3
   1289a:	3304      	adds	r3, #4
   1289c:	3415      	adds	r4, #21
   1289e:	42a5      	cmp	r5, r4
   128a0:	bf38      	it	cc
   128a2:	2304      	movcc	r3, #4
   128a4:	e9cd a702 	strd	sl, r7, [sp, #8]
   128a8:	46ac      	mov	ip, r5
   128aa:	461f      	mov	r7, r3
   128ac:	4692      	mov	sl, r2
   128ae:	e005      	b.n	128bc <__multiply+0x90>
   128b0:	0c09      	lsrs	r1, r1, #16
   128b2:	d129      	bne.n	12908 <__multiply+0xdc>
   128b4:	45c3      	cmp	fp, r8
   128b6:	f109 0904 	add.w	r9, r9, #4
   128ba:	d948      	bls.n	1294e <__multiply+0x122>
   128bc:	f858 1b04 	ldr.w	r1, [r8], #4
   128c0:	b28d      	uxth	r5, r1
   128c2:	2d00      	cmp	r5, #0
   128c4:	d0f4      	beq.n	128b0 <__multiply+0x84>
   128c6:	4656      	mov	r6, sl
   128c8:	464c      	mov	r4, r9
   128ca:	2300      	movs	r3, #0
   128cc:	f856 1b04 	ldr.w	r1, [r6], #4
   128d0:	6822      	ldr	r2, [r4, #0]
   128d2:	fa1f fe81 	uxth.w	lr, r1
   128d6:	b290      	uxth	r0, r2
   128d8:	0c09      	lsrs	r1, r1, #16
   128da:	fb05 000e 	mla	r0, r5, lr, r0
   128de:	0c12      	lsrs	r2, r2, #16
   128e0:	4403      	add	r3, r0
   128e2:	fb05 2201 	mla	r2, r5, r1, r2
   128e6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   128ea:	b29b      	uxth	r3, r3
   128ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   128f0:	45b4      	cmp	ip, r6
   128f2:	f844 3b04 	str.w	r3, [r4], #4
   128f6:	ea4f 4312 	mov.w	r3, r2, lsr #16
   128fa:	d8e7      	bhi.n	128cc <__multiply+0xa0>
   128fc:	f849 3007 	str.w	r3, [r9, r7]
   12900:	f858 1c04 	ldr.w	r1, [r8, #-4]
   12904:	0c09      	lsrs	r1, r1, #16
   12906:	d0d5      	beq.n	128b4 <__multiply+0x88>
   12908:	f8d9 3000 	ldr.w	r3, [r9]
   1290c:	4650      	mov	r0, sl
   1290e:	461a      	mov	r2, r3
   12910:	464c      	mov	r4, r9
   12912:	2600      	movs	r6, #0
   12914:	8805      	ldrh	r5, [r0, #0]
   12916:	0c12      	lsrs	r2, r2, #16
   12918:	fb01 2205 	mla	r2, r1, r5, r2
   1291c:	4416      	add	r6, r2
   1291e:	b29b      	uxth	r3, r3
   12920:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   12924:	f844 3b04 	str.w	r3, [r4], #4
   12928:	f850 5b04 	ldr.w	r5, [r0], #4
   1292c:	6822      	ldr	r2, [r4, #0]
   1292e:	0c2d      	lsrs	r5, r5, #16
   12930:	b293      	uxth	r3, r2
   12932:	fb01 3305 	mla	r3, r1, r5, r3
   12936:	eb03 4316 	add.w	r3, r3, r6, lsr #16
   1293a:	4584      	cmp	ip, r0
   1293c:	ea4f 4613 	mov.w	r6, r3, lsr #16
   12940:	d8e8      	bhi.n	12914 <__multiply+0xe8>
   12942:	45c3      	cmp	fp, r8
   12944:	f849 3007 	str.w	r3, [r9, r7]
   12948:	f109 0904 	add.w	r9, r9, #4
   1294c:	d8b6      	bhi.n	128bc <__multiply+0x90>
   1294e:	e9dd a702 	ldrd	sl, r7, [sp, #8]
   12952:	2f00      	cmp	r7, #0
   12954:	dc02      	bgt.n	1295c <__multiply+0x130>
   12956:	e005      	b.n	12964 <__multiply+0x138>
   12958:	3f01      	subs	r7, #1
   1295a:	d003      	beq.n	12964 <__multiply+0x138>
   1295c:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   12960:	2b00      	cmp	r3, #0
   12962:	d0f9      	beq.n	12958 <__multiply+0x12c>
   12964:	9b01      	ldr	r3, [sp, #4]
   12966:	4618      	mov	r0, r3
   12968:	611f      	str	r7, [r3, #16]
   1296a:	b005      	add	sp, #20
   1296c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12970:	4b03      	ldr	r3, [pc, #12]	; (12980 <__multiply+0x154>)
   12972:	4804      	ldr	r0, [pc, #16]	; (12984 <__multiply+0x158>)
   12974:	9a01      	ldr	r2, [sp, #4]
   12976:	f44f 71b1 	mov.w	r1, #354	; 0x162
   1297a:	f003 fef1 	bl	16760 <__assert_func>
   1297e:	bf00      	nop
   12980:	200034c0 	.word	0x200034c0
   12984:	20003638 	.word	0x20003638

00012988 <__pow5mult>:
   12988:	f012 0303 	ands.w	r3, r2, #3
   1298c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12990:	4614      	mov	r4, r2
   12992:	4606      	mov	r6, r0
   12994:	d132      	bne.n	129fc <__pow5mult+0x74>
   12996:	460d      	mov	r5, r1
   12998:	10a4      	asrs	r4, r4, #2
   1299a:	d020      	beq.n	129de <__pow5mult+0x56>
   1299c:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
   129a0:	f1b8 0f00 	cmp.w	r8, #0
   129a4:	d033      	beq.n	12a0e <__pow5mult+0x86>
   129a6:	07e3      	lsls	r3, r4, #31
   129a8:	f04f 0700 	mov.w	r7, #0
   129ac:	d407      	bmi.n	129be <__pow5mult+0x36>
   129ae:	1064      	asrs	r4, r4, #1
   129b0:	d015      	beq.n	129de <__pow5mult+0x56>
   129b2:	f8d8 0000 	ldr.w	r0, [r8]
   129b6:	b1a8      	cbz	r0, 129e4 <__pow5mult+0x5c>
   129b8:	4680      	mov	r8, r0
   129ba:	07e3      	lsls	r3, r4, #31
   129bc:	d5f7      	bpl.n	129ae <__pow5mult+0x26>
   129be:	4642      	mov	r2, r8
   129c0:	4629      	mov	r1, r5
   129c2:	4630      	mov	r0, r6
   129c4:	f7ff ff32 	bl	1282c <__multiply>
   129c8:	b1b5      	cbz	r5, 129f8 <__pow5mult+0x70>
   129ca:	6869      	ldr	r1, [r5, #4]
   129cc:	6c73      	ldr	r3, [r6, #68]	; 0x44
   129ce:	1064      	asrs	r4, r4, #1
   129d0:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   129d4:	602a      	str	r2, [r5, #0]
   129d6:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
   129da:	4605      	mov	r5, r0
   129dc:	d1e9      	bne.n	129b2 <__pow5mult+0x2a>
   129de:	4628      	mov	r0, r5
   129e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   129e4:	4642      	mov	r2, r8
   129e6:	4641      	mov	r1, r8
   129e8:	4630      	mov	r0, r6
   129ea:	f7ff ff1f 	bl	1282c <__multiply>
   129ee:	f8c8 0000 	str.w	r0, [r8]
   129f2:	6007      	str	r7, [r0, #0]
   129f4:	4680      	mov	r8, r0
   129f6:	e7e0      	b.n	129ba <__pow5mult+0x32>
   129f8:	4605      	mov	r5, r0
   129fa:	e7d8      	b.n	129ae <__pow5mult+0x26>
   129fc:	3b01      	subs	r3, #1
   129fe:	4a0f      	ldr	r2, [pc, #60]	; (12a3c <__pow5mult+0xb4>)
   12a00:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   12a04:	2300      	movs	r3, #0
   12a06:	f7ff fde9 	bl	125dc <__multadd>
   12a0a:	4605      	mov	r5, r0
   12a0c:	e7c4      	b.n	12998 <__pow5mult+0x10>
   12a0e:	2101      	movs	r1, #1
   12a10:	4630      	mov	r0, r6
   12a12:	f7ff fdb3 	bl	1257c <_Balloc>
   12a16:	4680      	mov	r8, r0
   12a18:	b140      	cbz	r0, 12a2c <__pow5mult+0xa4>
   12a1a:	2301      	movs	r3, #1
   12a1c:	f240 2271 	movw	r2, #625	; 0x271
   12a20:	e9c0 3204 	strd	r3, r2, [r0, #16]
   12a24:	2300      	movs	r3, #0
   12a26:	6430      	str	r0, [r6, #64]	; 0x40
   12a28:	6003      	str	r3, [r0, #0]
   12a2a:	e7bc      	b.n	129a6 <__pow5mult+0x1e>
   12a2c:	4b04      	ldr	r3, [pc, #16]	; (12a40 <__pow5mult+0xb8>)
   12a2e:	4805      	ldr	r0, [pc, #20]	; (12a44 <__pow5mult+0xbc>)
   12a30:	4642      	mov	r2, r8
   12a32:	f240 1145 	movw	r1, #325	; 0x145
   12a36:	f003 fe93 	bl	16760 <__assert_func>
   12a3a:	bf00      	nop
   12a3c:	2000a688 	.word	0x2000a688
   12a40:	200034c0 	.word	0x200034c0
   12a44:	20003638 	.word	0x20003638

00012a48 <__lshift>:
   12a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12a4c:	460d      	mov	r5, r1
   12a4e:	4614      	mov	r4, r2
   12a50:	692f      	ldr	r7, [r5, #16]
   12a52:	68ab      	ldr	r3, [r5, #8]
   12a54:	6849      	ldr	r1, [r1, #4]
   12a56:	eb07 1762 	add.w	r7, r7, r2, asr #5
   12a5a:	1c7e      	adds	r6, r7, #1
   12a5c:	429e      	cmp	r6, r3
   12a5e:	4680      	mov	r8, r0
   12a60:	ea4f 1962 	mov.w	r9, r2, asr #5
   12a64:	dd04      	ble.n	12a70 <__lshift+0x28>
   12a66:	005b      	lsls	r3, r3, #1
   12a68:	429e      	cmp	r6, r3
   12a6a:	f101 0101 	add.w	r1, r1, #1
   12a6e:	dcfa      	bgt.n	12a66 <__lshift+0x1e>
   12a70:	4640      	mov	r0, r8
   12a72:	f7ff fd83 	bl	1257c <_Balloc>
   12a76:	4684      	mov	ip, r0
   12a78:	2800      	cmp	r0, #0
   12a7a:	d052      	beq.n	12b22 <__lshift+0xda>
   12a7c:	f1b9 0f00 	cmp.w	r9, #0
   12a80:	f100 0214 	add.w	r2, r0, #20
   12a84:	dd0e      	ble.n	12aa4 <__lshift+0x5c>
   12a86:	f109 0105 	add.w	r1, r9, #5
   12a8a:	ea4f 0e81 	mov.w	lr, r1, lsl #2
   12a8e:	4613      	mov	r3, r2
   12a90:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   12a94:	2000      	movs	r0, #0
   12a96:	f843 0b04 	str.w	r0, [r3], #4
   12a9a:	428b      	cmp	r3, r1
   12a9c:	d1fb      	bne.n	12a96 <__lshift+0x4e>
   12a9e:	f1ae 0314 	sub.w	r3, lr, #20
   12aa2:	441a      	add	r2, r3
   12aa4:	6929      	ldr	r1, [r5, #16]
   12aa6:	f105 0314 	add.w	r3, r5, #20
   12aaa:	f014 0e1f 	ands.w	lr, r4, #31
   12aae:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   12ab2:	d02e      	beq.n	12b12 <__lshift+0xca>
   12ab4:	f1ce 0920 	rsb	r9, lr, #32
   12ab8:	4610      	mov	r0, r2
   12aba:	f04f 0a00 	mov.w	sl, #0
   12abe:	681c      	ldr	r4, [r3, #0]
   12ac0:	fa04 f40e 	lsl.w	r4, r4, lr
   12ac4:	ea44 040a 	orr.w	r4, r4, sl
   12ac8:	f840 4b04 	str.w	r4, [r0], #4
   12acc:	f853 4b04 	ldr.w	r4, [r3], #4
   12ad0:	4299      	cmp	r1, r3
   12ad2:	fa24 fa09 	lsr.w	sl, r4, r9
   12ad6:	d8f2      	bhi.n	12abe <__lshift+0x76>
   12ad8:	1b4b      	subs	r3, r1, r5
   12ada:	3b15      	subs	r3, #21
   12adc:	f023 0303 	bic.w	r3, r3, #3
   12ae0:	3304      	adds	r3, #4
   12ae2:	f105 0015 	add.w	r0, r5, #21
   12ae6:	4281      	cmp	r1, r0
   12ae8:	bf38      	it	cc
   12aea:	2304      	movcc	r3, #4
   12aec:	f1ba 0f00 	cmp.w	sl, #0
   12af0:	bf18      	it	ne
   12af2:	4637      	movne	r7, r6
   12af4:	f842 a003 	str.w	sl, [r2, r3]
   12af8:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
   12afc:	686a      	ldr	r2, [r5, #4]
   12afe:	f8cc 7010 	str.w	r7, [ip, #16]
   12b02:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   12b06:	6029      	str	r1, [r5, #0]
   12b08:	4660      	mov	r0, ip
   12b0a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   12b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12b12:	3a04      	subs	r2, #4
   12b14:	f853 0b04 	ldr.w	r0, [r3], #4
   12b18:	f842 0f04 	str.w	r0, [r2, #4]!
   12b1c:	4299      	cmp	r1, r3
   12b1e:	d8f9      	bhi.n	12b14 <__lshift+0xcc>
   12b20:	e7ea      	b.n	12af8 <__lshift+0xb0>
   12b22:	4b03      	ldr	r3, [pc, #12]	; (12b30 <__lshift+0xe8>)
   12b24:	4803      	ldr	r0, [pc, #12]	; (12b34 <__lshift+0xec>)
   12b26:	4662      	mov	r2, ip
   12b28:	f44f 71ef 	mov.w	r1, #478	; 0x1de
   12b2c:	f003 fe18 	bl	16760 <__assert_func>
   12b30:	200034c0 	.word	0x200034c0
   12b34:	20003638 	.word	0x20003638

00012b38 <__mcmp>:
   12b38:	690b      	ldr	r3, [r1, #16]
   12b3a:	4684      	mov	ip, r0
   12b3c:	6900      	ldr	r0, [r0, #16]
   12b3e:	1ac0      	subs	r0, r0, r3
   12b40:	d116      	bne.n	12b70 <__mcmp+0x38>
   12b42:	f10c 0c14 	add.w	ip, ip, #20
   12b46:	3114      	adds	r1, #20
   12b48:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
   12b4c:	b410      	push	{r4}
   12b4e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   12b52:	e001      	b.n	12b58 <__mcmp+0x20>
   12b54:	4594      	cmp	ip, r2
   12b56:	d208      	bcs.n	12b6a <__mcmp+0x32>
   12b58:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   12b5c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   12b60:	428c      	cmp	r4, r1
   12b62:	d0f7      	beq.n	12b54 <__mcmp+0x1c>
   12b64:	d205      	bcs.n	12b72 <__mcmp+0x3a>
   12b66:	f04f 30ff 	mov.w	r0, #4294967295
   12b6a:	f85d 4b04 	ldr.w	r4, [sp], #4
   12b6e:	4770      	bx	lr
   12b70:	4770      	bx	lr
   12b72:	2001      	movs	r0, #1
   12b74:	f85d 4b04 	ldr.w	r4, [sp], #4
   12b78:	4770      	bx	lr
   12b7a:	bf00      	nop

00012b7c <__mdiff>:
   12b7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b80:	690f      	ldr	r7, [r1, #16]
   12b82:	6913      	ldr	r3, [r2, #16]
   12b84:	1aff      	subs	r7, r7, r3
   12b86:	2f00      	cmp	r7, #0
   12b88:	460e      	mov	r6, r1
   12b8a:	4690      	mov	r8, r2
   12b8c:	d17f      	bne.n	12c8e <__mdiff+0x112>
   12b8e:	f101 0514 	add.w	r5, r1, #20
   12b92:	3214      	adds	r2, #20
   12b94:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   12b98:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   12b9c:	e001      	b.n	12ba2 <__mdiff+0x26>
   12b9e:	429d      	cmp	r5, r3
   12ba0:	d278      	bcs.n	12c94 <__mdiff+0x118>
   12ba2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   12ba6:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   12baa:	42a1      	cmp	r1, r4
   12bac:	d0f7      	beq.n	12b9e <__mdiff+0x22>
   12bae:	d369      	bcc.n	12c84 <__mdiff+0x108>
   12bb0:	6871      	ldr	r1, [r6, #4]
   12bb2:	f7ff fce3 	bl	1257c <_Balloc>
   12bb6:	4681      	mov	r9, r0
   12bb8:	2800      	cmp	r0, #0
   12bba:	d077      	beq.n	12cac <__mdiff+0x130>
   12bbc:	6935      	ldr	r5, [r6, #16]
   12bbe:	f8d8 2010 	ldr.w	r2, [r8, #16]
   12bc2:	60c7      	str	r7, [r0, #12]
   12bc4:	f108 0e14 	add.w	lr, r8, #20
   12bc8:	f106 0014 	add.w	r0, r6, #20
   12bcc:	f109 0a14 	add.w	sl, r9, #20
   12bd0:	f106 0110 	add.w	r1, r6, #16
   12bd4:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
   12bd8:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   12bdc:	4656      	mov	r6, sl
   12bde:	f04f 0c00 	mov.w	ip, #0
   12be2:	f85e 4b04 	ldr.w	r4, [lr], #4
   12be6:	f851 bf04 	ldr.w	fp, [r1, #4]!
   12bea:	b2a3      	uxth	r3, r4
   12bec:	fa1c fc8b 	uxtah	ip, ip, fp
   12bf0:	ebac 0303 	sub.w	r3, ip, r3
   12bf4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
   12bf8:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
   12bfc:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
   12c00:	b29b      	uxth	r3, r3
   12c02:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   12c06:	4572      	cmp	r2, lr
   12c08:	f846 3b04 	str.w	r3, [r6], #4
   12c0c:	ea4f 4c2c 	mov.w	ip, ip, asr #16
   12c10:	d8e7      	bhi.n	12be2 <__mdiff+0x66>
   12c12:	eba2 0108 	sub.w	r1, r2, r8
   12c16:	3915      	subs	r1, #21
   12c18:	f108 0815 	add.w	r8, r8, #21
   12c1c:	4542      	cmp	r2, r8
   12c1e:	f021 0403 	bic.w	r4, r1, #3
   12c22:	f104 0404 	add.w	r4, r4, #4
   12c26:	bf38      	it	cc
   12c28:	2404      	movcc	r4, #4
   12c2a:	4420      	add	r0, r4
   12c2c:	f021 0203 	bic.w	r2, r1, #3
   12c30:	bf38      	it	cc
   12c32:	2200      	movcc	r2, #0
   12c34:	4287      	cmp	r7, r0
   12c36:	4452      	add	r2, sl
   12c38:	4454      	add	r4, sl
   12c3a:	d918      	bls.n	12c6e <__mdiff+0xf2>
   12c3c:	4626      	mov	r6, r4
   12c3e:	4601      	mov	r1, r0
   12c40:	f851 3b04 	ldr.w	r3, [r1], #4
   12c44:	fa1c fc83 	uxtah	ip, ip, r3
   12c48:	ea4f 422c 	mov.w	r2, ip, asr #16
   12c4c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   12c50:	fa1f fc8c 	uxth.w	ip, ip
   12c54:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
   12c58:	428f      	cmp	r7, r1
   12c5a:	f846 3b04 	str.w	r3, [r6], #4
   12c5e:	ea4f 4c22 	mov.w	ip, r2, asr #16
   12c62:	d8ed      	bhi.n	12c40 <__mdiff+0xc4>
   12c64:	3f01      	subs	r7, #1
   12c66:	1a3f      	subs	r7, r7, r0
   12c68:	f027 0703 	bic.w	r7, r7, #3
   12c6c:	19e2      	adds	r2, r4, r7
   12c6e:	b923      	cbnz	r3, 12c7a <__mdiff+0xfe>
   12c70:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   12c74:	3d01      	subs	r5, #1
   12c76:	2b00      	cmp	r3, #0
   12c78:	d0fa      	beq.n	12c70 <__mdiff+0xf4>
   12c7a:	f8c9 5010 	str.w	r5, [r9, #16]
   12c7e:	4648      	mov	r0, r9
   12c80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c84:	4633      	mov	r3, r6
   12c86:	2701      	movs	r7, #1
   12c88:	4646      	mov	r6, r8
   12c8a:	4698      	mov	r8, r3
   12c8c:	e790      	b.n	12bb0 <__mdiff+0x34>
   12c8e:	dbf9      	blt.n	12c84 <__mdiff+0x108>
   12c90:	2700      	movs	r7, #0
   12c92:	e78d      	b.n	12bb0 <__mdiff+0x34>
   12c94:	2100      	movs	r1, #0
   12c96:	f7ff fc71 	bl	1257c <_Balloc>
   12c9a:	4681      	mov	r9, r0
   12c9c:	b168      	cbz	r0, 12cba <__mdiff+0x13e>
   12c9e:	2201      	movs	r2, #1
   12ca0:	2300      	movs	r3, #0
   12ca2:	e9c9 2304 	strd	r2, r3, [r9, #16]
   12ca6:	4648      	mov	r0, r9
   12ca8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12cac:	4b06      	ldr	r3, [pc, #24]	; (12cc8 <__mdiff+0x14c>)
   12cae:	4807      	ldr	r0, [pc, #28]	; (12ccc <__mdiff+0x150>)
   12cb0:	464a      	mov	r2, r9
   12cb2:	f240 2145 	movw	r1, #581	; 0x245
   12cb6:	f003 fd53 	bl	16760 <__assert_func>
   12cba:	4b03      	ldr	r3, [pc, #12]	; (12cc8 <__mdiff+0x14c>)
   12cbc:	4803      	ldr	r0, [pc, #12]	; (12ccc <__mdiff+0x150>)
   12cbe:	464a      	mov	r2, r9
   12cc0:	f240 2137 	movw	r1, #567	; 0x237
   12cc4:	f003 fd4c 	bl	16760 <__assert_func>
   12cc8:	200034c0 	.word	0x200034c0
   12ccc:	20003638 	.word	0x20003638

00012cd0 <__ulp>:
   12cd0:	b082      	sub	sp, #8
   12cd2:	ed8d 0b00 	vstr	d0, [sp]
   12cd6:	4b16      	ldr	r3, [pc, #88]	; (12d30 <__ulp+0x60>)
   12cd8:	9a01      	ldr	r2, [sp, #4]
   12cda:	4013      	ands	r3, r2
   12cdc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
   12ce0:	2b00      	cmp	r3, #0
   12ce2:	dd06      	ble.n	12cf2 <__ulp+0x22>
   12ce4:	2200      	movs	r2, #0
   12ce6:	4619      	mov	r1, r3
   12ce8:	4610      	mov	r0, r2
   12cea:	ec41 0b10 	vmov	d0, r0, r1
   12cee:	b002      	add	sp, #8
   12cf0:	4770      	bx	lr
   12cf2:	425b      	negs	r3, r3
   12cf4:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
   12cf8:	ea4f 5223 	mov.w	r2, r3, asr #20
   12cfc:	da09      	bge.n	12d12 <__ulp+0x42>
   12cfe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   12d02:	4113      	asrs	r3, r2
   12d04:	2200      	movs	r2, #0
   12d06:	4619      	mov	r1, r3
   12d08:	4610      	mov	r0, r2
   12d0a:	ec41 0b10 	vmov	d0, r0, r1
   12d0e:	b002      	add	sp, #8
   12d10:	4770      	bx	lr
   12d12:	f1a2 0314 	sub.w	r3, r2, #20
   12d16:	2b1e      	cmp	r3, #30
   12d18:	bfda      	itte	le
   12d1a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
   12d1e:	40da      	lsrle	r2, r3
   12d20:	2201      	movgt	r2, #1
   12d22:	2300      	movs	r3, #0
   12d24:	4619      	mov	r1, r3
   12d26:	4610      	mov	r0, r2
   12d28:	ec41 0b10 	vmov	d0, r0, r1
   12d2c:	b002      	add	sp, #8
   12d2e:	4770      	bx	lr
   12d30:	7ff00000 	.word	0x7ff00000

00012d34 <__b2d>:
   12d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12d36:	6904      	ldr	r4, [r0, #16]
   12d38:	f100 0614 	add.w	r6, r0, #20
   12d3c:	eb06 0484 	add.w	r4, r6, r4, lsl #2
   12d40:	1f27      	subs	r7, r4, #4
   12d42:	f854 5c04 	ldr.w	r5, [r4, #-4]
   12d46:	4628      	mov	r0, r5
   12d48:	f7ff fcf2 	bl	12730 <__hi0bits>
   12d4c:	f1c0 0320 	rsb	r3, r0, #32
   12d50:	280a      	cmp	r0, #10
   12d52:	600b      	str	r3, [r1, #0]
   12d54:	dd1b      	ble.n	12d8e <__b2d+0x5a>
   12d56:	42be      	cmp	r6, r7
   12d58:	d20b      	bcs.n	12d72 <__b2d+0x3e>
   12d5a:	380b      	subs	r0, #11
   12d5c:	f854 1c08 	ldr.w	r1, [r4, #-8]
   12d60:	d12e      	bne.n	12dc0 <__b2d+0x8c>
   12d62:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   12d66:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   12d6a:	460a      	mov	r2, r1
   12d6c:	ec43 2b10 	vmov	d0, r2, r3
   12d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12d72:	f1b0 010b 	subs.w	r1, r0, #11
   12d76:	d0f4      	beq.n	12d62 <__b2d+0x2e>
   12d78:	fa05 f101 	lsl.w	r1, r5, r1
   12d7c:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   12d80:	2100      	movs	r1, #0
   12d82:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   12d86:	460a      	mov	r2, r1
   12d88:	ec43 2b10 	vmov	d0, r2, r3
   12d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12d8e:	f1c0 0c0b 	rsb	ip, r0, #11
   12d92:	fa25 f10c 	lsr.w	r1, r5, ip
   12d96:	42be      	cmp	r6, r7
   12d98:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   12d9c:	bf38      	it	cc
   12d9e:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
   12da2:	f100 0015 	add.w	r0, r0, #21
   12da6:	bf34      	ite	cc
   12da8:	fa21 f10c 	lsrcc.w	r1, r1, ip
   12dac:	2100      	movcs	r1, #0
   12dae:	fa05 f000 	lsl.w	r0, r5, r0
   12db2:	4301      	orrs	r1, r0
   12db4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   12db8:	460a      	mov	r2, r1
   12dba:	ec43 2b10 	vmov	d0, r2, r3
   12dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12dc0:	f1c0 0c20 	rsb	ip, r0, #32
   12dc4:	4085      	lsls	r5, r0
   12dc6:	fa21 f30c 	lsr.w	r3, r1, ip
   12dca:	ea45 0703 	orr.w	r7, r5, r3
   12dce:	f1a4 0508 	sub.w	r5, r4, #8
   12dd2:	42ae      	cmp	r6, r5
   12dd4:	fa01 f100 	lsl.w	r1, r1, r0
   12dd8:	bf3c      	itt	cc
   12dda:	f854 0c0c 	ldrcc.w	r0, [r4, #-12]
   12dde:	fa20 f00c 	lsrcc.w	r0, r0, ip
   12de2:	f047 537f 	orr.w	r3, r7, #1069547520	; 0x3fc00000
   12de6:	bf38      	it	cc
   12de8:	4301      	orrcc	r1, r0
   12dea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   12dee:	460a      	mov	r2, r1
   12df0:	ec43 2b10 	vmov	d0, r2, r3
   12df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12df6:	bf00      	nop

00012df8 <__d2b>:
   12df8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12dfc:	4688      	mov	r8, r1
   12dfe:	b083      	sub	sp, #12
   12e00:	2101      	movs	r1, #1
   12e02:	ec57 6b10 	vmov	r6, r7, d0
   12e06:	4615      	mov	r5, r2
   12e08:	f7ff fbb8 	bl	1257c <_Balloc>
   12e0c:	4604      	mov	r4, r0
   12e0e:	2800      	cmp	r0, #0
   12e10:	d051      	beq.n	12eb6 <__d2b+0xbe>
   12e12:	f3c7 590a 	ubfx	r9, r7, #20, #11
   12e16:	f3c7 0313 	ubfx	r3, r7, #0, #20
   12e1a:	f1b9 0f00 	cmp.w	r9, #0
   12e1e:	d001      	beq.n	12e24 <__d2b+0x2c>
   12e20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   12e24:	2e00      	cmp	r6, #0
   12e26:	9301      	str	r3, [sp, #4]
   12e28:	d118      	bne.n	12e5c <__d2b+0x64>
   12e2a:	a801      	add	r0, sp, #4
   12e2c:	f7ff fca0 	bl	12770 <__lo0bits>
   12e30:	9a01      	ldr	r2, [sp, #4]
   12e32:	6162      	str	r2, [r4, #20]
   12e34:	2201      	movs	r2, #1
   12e36:	f100 0320 	add.w	r3, r0, #32
   12e3a:	6122      	str	r2, [r4, #16]
   12e3c:	f1b9 0f00 	cmp.w	r9, #0
   12e40:	d025      	beq.n	12e8e <__d2b+0x96>
   12e42:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
   12e46:	eb09 0203 	add.w	r2, r9, r3
   12e4a:	4620      	mov	r0, r4
   12e4c:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
   12e50:	f8c8 2000 	str.w	r2, [r8]
   12e54:	602b      	str	r3, [r5, #0]
   12e56:	b003      	add	sp, #12
   12e58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12e5c:	4668      	mov	r0, sp
   12e5e:	9600      	str	r6, [sp, #0]
   12e60:	f7ff fc86 	bl	12770 <__lo0bits>
   12e64:	4603      	mov	r3, r0
   12e66:	b310      	cbz	r0, 12eae <__d2b+0xb6>
   12e68:	e9dd 0200 	ldrd	r0, r2, [sp]
   12e6c:	f1c3 0120 	rsb	r1, r3, #32
   12e70:	fa02 f101 	lsl.w	r1, r2, r1
   12e74:	4301      	orrs	r1, r0
   12e76:	40da      	lsrs	r2, r3
   12e78:	6161      	str	r1, [r4, #20]
   12e7a:	9201      	str	r2, [sp, #4]
   12e7c:	2a00      	cmp	r2, #0
   12e7e:	61a2      	str	r2, [r4, #24]
   12e80:	bf14      	ite	ne
   12e82:	2202      	movne	r2, #2
   12e84:	2201      	moveq	r2, #1
   12e86:	6122      	str	r2, [r4, #16]
   12e88:	f1b9 0f00 	cmp.w	r9, #0
   12e8c:	d1d9      	bne.n	12e42 <__d2b+0x4a>
   12e8e:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
   12e92:	f8c8 3000 	str.w	r3, [r8]
   12e96:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   12e9a:	6918      	ldr	r0, [r3, #16]
   12e9c:	f7ff fc48 	bl	12730 <__hi0bits>
   12ea0:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
   12ea4:	4620      	mov	r0, r4
   12ea6:	602b      	str	r3, [r5, #0]
   12ea8:	b003      	add	sp, #12
   12eaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12eae:	9a00      	ldr	r2, [sp, #0]
   12eb0:	6162      	str	r2, [r4, #20]
   12eb2:	9a01      	ldr	r2, [sp, #4]
   12eb4:	e7e2      	b.n	12e7c <__d2b+0x84>
   12eb6:	4b03      	ldr	r3, [pc, #12]	; (12ec4 <__d2b+0xcc>)
   12eb8:	4803      	ldr	r0, [pc, #12]	; (12ec8 <__d2b+0xd0>)
   12eba:	4622      	mov	r2, r4
   12ebc:	f240 310f 	movw	r1, #783	; 0x30f
   12ec0:	f003 fc4e 	bl	16760 <__assert_func>
   12ec4:	200034c0 	.word	0x200034c0
   12ec8:	20003638 	.word	0x20003638

00012ecc <__ratio>:
   12ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
   12ece:	b083      	sub	sp, #12
   12ed0:	460e      	mov	r6, r1
   12ed2:	4669      	mov	r1, sp
   12ed4:	4607      	mov	r7, r0
   12ed6:	f7ff ff2d 	bl	12d34 <__b2d>
   12eda:	a901      	add	r1, sp, #4
   12edc:	4630      	mov	r0, r6
   12ede:	ec55 4b10 	vmov	r4, r5, d0
   12ee2:	eeb0 7b40 	vmov.f64	d7, d0
   12ee6:	f7ff ff25 	bl	12d34 <__b2d>
   12eea:	6933      	ldr	r3, [r6, #16]
   12eec:	693a      	ldr	r2, [r7, #16]
   12eee:	1ad2      	subs	r2, r2, r3
   12ef0:	e9dd 3100 	ldrd	r3, r1, [sp]
   12ef4:	1a5b      	subs	r3, r3, r1
   12ef6:	eb03 1342 	add.w	r3, r3, r2, lsl #5
   12efa:	2b00      	cmp	r3, #0
   12efc:	dd09      	ble.n	12f12 <__ratio+0x46>
   12efe:	ee17 2a90 	vmov	r2, s15
   12f02:	eb02 5503 	add.w	r5, r2, r3, lsl #20
   12f06:	ec45 4b17 	vmov	d7, r4, r5
   12f0a:	ee87 0b00 	vdiv.f64	d0, d7, d0
   12f0e:	b003      	add	sp, #12
   12f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12f12:	ee10 2a90 	vmov	r2, s1
   12f16:	ec51 0b10 	vmov	r0, r1, d0
   12f1a:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
   12f1e:	eb02 5103 	add.w	r1, r2, r3, lsl #20
   12f22:	ec41 0b10 	vmov	d0, r0, r1
   12f26:	ee87 0b00 	vdiv.f64	d0, d7, d0
   12f2a:	b003      	add	sp, #12
   12f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12f2e:	bf00      	nop

00012f30 <__copybits>:
   12f30:	3901      	subs	r1, #1
   12f32:	1149      	asrs	r1, r1, #5
   12f34:	f101 0c01 	add.w	ip, r1, #1
   12f38:	6911      	ldr	r1, [r2, #16]
   12f3a:	f102 0314 	add.w	r3, r2, #20
   12f3e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   12f42:	428b      	cmp	r3, r1
   12f44:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
   12f48:	d217      	bcs.n	12f7a <__copybits+0x4a>
   12f4a:	b510      	push	{r4, lr}
   12f4c:	f1a0 0e04 	sub.w	lr, r0, #4
   12f50:	f853 4b04 	ldr.w	r4, [r3], #4
   12f54:	f84e 4f04 	str.w	r4, [lr, #4]!
   12f58:	4299      	cmp	r1, r3
   12f5a:	d8f9      	bhi.n	12f50 <__copybits+0x20>
   12f5c:	1a8a      	subs	r2, r1, r2
   12f5e:	f1a2 0315 	sub.w	r3, r2, #21
   12f62:	f023 0303 	bic.w	r3, r3, #3
   12f66:	3304      	adds	r3, #4
   12f68:	4418      	add	r0, r3
   12f6a:	4584      	cmp	ip, r0
   12f6c:	d904      	bls.n	12f78 <__copybits+0x48>
   12f6e:	2300      	movs	r3, #0
   12f70:	f840 3b04 	str.w	r3, [r0], #4
   12f74:	4584      	cmp	ip, r0
   12f76:	d8fb      	bhi.n	12f70 <__copybits+0x40>
   12f78:	bd10      	pop	{r4, pc}
   12f7a:	4584      	cmp	ip, r0
   12f7c:	d905      	bls.n	12f8a <__copybits+0x5a>
   12f7e:	2300      	movs	r3, #0
   12f80:	f840 3b04 	str.w	r3, [r0], #4
   12f84:	4584      	cmp	ip, r0
   12f86:	d8fb      	bhi.n	12f80 <__copybits+0x50>
   12f88:	4770      	bx	lr
   12f8a:	4770      	bx	lr

00012f8c <__any_on>:
   12f8c:	6903      	ldr	r3, [r0, #16]
   12f8e:	114a      	asrs	r2, r1, #5
   12f90:	4293      	cmp	r3, r2
   12f92:	f100 0014 	add.w	r0, r0, #20
   12f96:	da09      	bge.n	12fac <__any_on+0x20>
   12f98:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   12f9c:	e002      	b.n	12fa4 <__any_on+0x18>
   12f9e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   12fa2:	b9c2      	cbnz	r2, 12fd6 <__any_on+0x4a>
   12fa4:	4283      	cmp	r3, r0
   12fa6:	d8fa      	bhi.n	12f9e <__any_on+0x12>
   12fa8:	2000      	movs	r0, #0
   12faa:	4770      	bx	lr
   12fac:	dd10      	ble.n	12fd0 <__any_on+0x44>
   12fae:	f011 011f 	ands.w	r1, r1, #31
   12fb2:	d00d      	beq.n	12fd0 <__any_on+0x44>
   12fb4:	b410      	push	{r4}
   12fb6:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   12fba:	eb00 0382 	add.w	r3, r0, r2, lsl #2
   12fbe:	fa24 f201 	lsr.w	r2, r4, r1
   12fc2:	408a      	lsls	r2, r1
   12fc4:	4294      	cmp	r4, r2
   12fc6:	d00c      	beq.n	12fe2 <__any_on+0x56>
   12fc8:	2001      	movs	r0, #1
   12fca:	f85d 4b04 	ldr.w	r4, [sp], #4
   12fce:	4770      	bx	lr
   12fd0:	eb00 0382 	add.w	r3, r0, r2, lsl #2
   12fd4:	e7e6      	b.n	12fa4 <__any_on+0x18>
   12fd6:	2001      	movs	r0, #1
   12fd8:	4770      	bx	lr
   12fda:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   12fde:	2a00      	cmp	r2, #0
   12fe0:	d1f2      	bne.n	12fc8 <__any_on+0x3c>
   12fe2:	4283      	cmp	r3, r0
   12fe4:	d8f9      	bhi.n	12fda <__any_on+0x4e>
   12fe6:	2000      	movs	r0, #0
   12fe8:	f85d 4b04 	ldr.w	r4, [sp], #4
   12fec:	4770      	bx	lr
   12fee:	bf00      	nop

00012ff0 <__ascii_wctomb>:
   12ff0:	b149      	cbz	r1, 13006 <__ascii_wctomb+0x16>
   12ff2:	2aff      	cmp	r2, #255	; 0xff
   12ff4:	d802      	bhi.n	12ffc <__ascii_wctomb+0xc>
   12ff6:	700a      	strb	r2, [r1, #0]
   12ff8:	2001      	movs	r0, #1
   12ffa:	4770      	bx	lr
   12ffc:	238a      	movs	r3, #138	; 0x8a
   12ffe:	6003      	str	r3, [r0, #0]
   13000:	f04f 30ff 	mov.w	r0, #4294967295
   13004:	4770      	bx	lr
   13006:	4608      	mov	r0, r1
   13008:	4770      	bx	lr
   1300a:	bf00      	nop
   1300c:	0000      	movs	r0, r0
	...

00013010 <_svfprintf_r>:
   13010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13014:	ed2d 8b08 	vpush	{d8-d11}
   13018:	b0d1      	sub	sp, #324	; 0x144
   1301a:	460c      	mov	r4, r1
   1301c:	ee0b 1a10 	vmov	s22, r1
   13020:	4690      	mov	r8, r2
   13022:	9308      	str	r3, [sp, #32]
   13024:	4683      	mov	fp, r0
   13026:	f003 fb59 	bl	166dc <_localeconv_r>
   1302a:	6803      	ldr	r3, [r0, #0]
   1302c:	9312      	str	r3, [sp, #72]	; 0x48
   1302e:	4618      	mov	r0, r3
   13030:	f7fe fc66 	bl	11900 <strlen>
   13034:	af20      	add	r7, sp, #128	; 0x80
   13036:	9010      	str	r0, [sp, #64]	; 0x40
   13038:	2208      	movs	r2, #8
   1303a:	2100      	movs	r1, #0
   1303c:	4638      	mov	r0, r7
   1303e:	f7fd ffb9 	bl	10fb4 <memset>
   13042:	89a3      	ldrh	r3, [r4, #12]
   13044:	061b      	lsls	r3, r3, #24
   13046:	d503      	bpl.n	13050 <_svfprintf_r+0x40>
   13048:	6923      	ldr	r3, [r4, #16]
   1304a:	2b00      	cmp	r3, #0
   1304c:	f000 8755 	beq.w	13efa <_svfprintf_r+0xeea>
   13050:	2300      	movs	r3, #0
   13052:	ed9f 8b83 	vldr	d8, [pc, #524]	; 13260 <_svfprintf_r+0x250>
   13056:	ed9f 9b84 	vldr	d9, [pc, #528]	; 13268 <_svfprintf_r+0x258>
   1305a:	e9cd 3325 	strd	r3, r3, [sp, #148]	; 0x94
   1305e:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
   13062:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
   13066:	aa27      	add	r2, sp, #156	; 0x9c
   13068:	930e      	str	r3, [sp, #56]	; 0x38
   1306a:	9224      	str	r2, [sp, #144]	; 0x90
   1306c:	4692      	mov	sl, r2
   1306e:	9311      	str	r3, [sp, #68]	; 0x44
   13070:	9304      	str	r3, [sp, #16]
   13072:	4644      	mov	r4, r8
   13074:	46a1      	mov	r9, r4
   13076:	4b7e      	ldr	r3, [pc, #504]	; (13270 <_svfprintf_r+0x260>)
   13078:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   1307c:	f7fe f97c 	bl	11378 <__locale_mb_cur_max>
   13080:	464a      	mov	r2, r9
   13082:	4603      	mov	r3, r0
   13084:	a91c      	add	r1, sp, #112	; 0x70
   13086:	9700      	str	r7, [sp, #0]
   13088:	4658      	mov	r0, fp
   1308a:	47a8      	blx	r5
   1308c:	2800      	cmp	r0, #0
   1308e:	f000 80b0 	beq.w	131f2 <_svfprintf_r+0x1e2>
   13092:	f2c0 80a6 	blt.w	131e2 <_svfprintf_r+0x1d2>
   13096:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   13098:	2a25      	cmp	r2, #37	; 0x25
   1309a:	4603      	mov	r3, r0
   1309c:	d001      	beq.n	130a2 <_svfprintf_r+0x92>
   1309e:	4499      	add	r9, r3
   130a0:	e7e9      	b.n	13076 <_svfprintf_r+0x66>
   130a2:	ebb9 0504 	subs.w	r5, r9, r4
   130a6:	4606      	mov	r6, r0
   130a8:	f040 80a7 	bne.w	131fa <_svfprintf_r+0x1ea>
   130ac:	2300      	movs	r3, #0
   130ae:	f04f 32ff 	mov.w	r2, #4294967295
   130b2:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
   130b6:	4698      	mov	r8, r3
   130b8:	9306      	str	r3, [sp, #24]
   130ba:	f109 0901 	add.w	r9, r9, #1
   130be:	f899 3000 	ldrb.w	r3, [r9]
   130c2:	9203      	str	r2, [sp, #12]
   130c4:	252b      	movs	r5, #43	; 0x2b
   130c6:	2620      	movs	r6, #32
   130c8:	f109 0901 	add.w	r9, r9, #1
   130cc:	f1a3 0220 	sub.w	r2, r3, #32
   130d0:	2a5a      	cmp	r2, #90	; 0x5a
   130d2:	f200 80cf 	bhi.w	13274 <_svfprintf_r+0x264>
   130d6:	e8df f012 	tbh	[pc, r2, lsl #1]
   130da:	02e8      	.short	0x02e8
   130dc:	00cd00cd 	.word	0x00cd00cd
   130e0:	00cd02e3 	.word	0x00cd02e3
   130e4:	00cd00cd 	.word	0x00cd00cd
   130e8:	00cd006a 	.word	0x00cd006a
   130ec:	020500cd 	.word	0x020500cd
   130f0:	00cd0284 	.word	0x00cd0284
   130f4:	02c90210 	.word	0x02c90210
   130f8:	02bd00cd 	.word	0x02bd00cd
   130fc:	005b005b 	.word	0x005b005b
   13100:	005b005b 	.word	0x005b005b
   13104:	005b005b 	.word	0x005b005b
   13108:	005b005b 	.word	0x005b005b
   1310c:	00cd005b 	.word	0x00cd005b
   13110:	00cd00cd 	.word	0x00cd00cd
   13114:	00cd00cd 	.word	0x00cd00cd
   13118:	00cd00cd 	.word	0x00cd00cd
   1311c:	00cd0153 	.word	0x00cd0153
   13120:	021a0183 	.word	0x021a0183
   13124:	01530153 	.word	0x01530153
   13128:	00cd0153 	.word	0x00cd0153
   1312c:	00cd00cd 	.word	0x00cd00cd
   13130:	021500cd 	.word	0x021500cd
   13134:	00cd00cd 	.word	0x00cd00cd
   13138:	00cd0296 	.word	0x00cd0296
   1313c:	00cd00cd 	.word	0x00cd00cd
   13140:	00cd01ab 	.word	0x00cd01ab
   13144:	00cd02aa 	.word	0x00cd02aa
   13148:	06e300cd 	.word	0x06e300cd
   1314c:	00cd00cd 	.word	0x00cd00cd
   13150:	00cd00cd 	.word	0x00cd00cd
   13154:	00cd00cd 	.word	0x00cd00cd
   13158:	00cd00cd 	.word	0x00cd00cd
   1315c:	00cd0153 	.word	0x00cd0153
   13160:	01de0183 	.word	0x01de0183
   13164:	01530153 	.word	0x01530153
   13168:	02770153 	.word	0x02770153
   1316c:	007f01de 	.word	0x007f01de
   13170:	028900cd 	.word	0x028900cd
   13174:	025f00cd 	.word	0x025f00cd
   13178:	022f06e0 	.word	0x022f06e0
   1317c:	00cd007f 	.word	0x00cd007f
   13180:	007c01ab 	.word	0x007c01ab
   13184:	00cd06b8 	.word	0x00cd06b8
   13188:	06bd00cd 	.word	0x06bd00cd
   1318c:	007c00cd 	.word	0x007c00cd
   13190:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   13194:	2100      	movs	r1, #0
   13196:	f819 3b01 	ldrb.w	r3, [r9], #1
   1319a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   1319e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   131a2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   131a6:	2a09      	cmp	r2, #9
   131a8:	d9f5      	bls.n	13196 <_svfprintf_r+0x186>
   131aa:	9106      	str	r1, [sp, #24]
   131ac:	e78e      	b.n	130cc <_svfprintf_r+0xbc>
   131ae:	4658      	mov	r0, fp
   131b0:	f003 fa94 	bl	166dc <_localeconv_r>
   131b4:	6843      	ldr	r3, [r0, #4]
   131b6:	9315      	str	r3, [sp, #84]	; 0x54
   131b8:	4618      	mov	r0, r3
   131ba:	f7fe fba1 	bl	11900 <strlen>
   131be:	9016      	str	r0, [sp, #88]	; 0x58
   131c0:	4658      	mov	r0, fp
   131c2:	f003 fa8b 	bl	166dc <_localeconv_r>
   131c6:	6883      	ldr	r3, [r0, #8]
   131c8:	9313      	str	r3, [sp, #76]	; 0x4c
   131ca:	9b16      	ldr	r3, [sp, #88]	; 0x58
   131cc:	2b00      	cmp	r3, #0
   131ce:	f040 862d 	bne.w	13e2c <_svfprintf_r+0xe1c>
   131d2:	f899 3000 	ldrb.w	r3, [r9]
   131d6:	e777      	b.n	130c8 <_svfprintf_r+0xb8>
   131d8:	f899 3000 	ldrb.w	r3, [r9]
   131dc:	f048 0820 	orr.w	r8, r8, #32
   131e0:	e772      	b.n	130c8 <_svfprintf_r+0xb8>
   131e2:	2208      	movs	r2, #8
   131e4:	2100      	movs	r1, #0
   131e6:	4638      	mov	r0, r7
   131e8:	f7fd fee4 	bl	10fb4 <memset>
   131ec:	2301      	movs	r3, #1
   131ee:	4499      	add	r9, r3
   131f0:	e741      	b.n	13076 <_svfprintf_r+0x66>
   131f2:	ebb9 0504 	subs.w	r5, r9, r4
   131f6:	4606      	mov	r6, r0
   131f8:	d011      	beq.n	1321e <_svfprintf_r+0x20e>
   131fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
   131fc:	442b      	add	r3, r5
   131fe:	9326      	str	r3, [sp, #152]	; 0x98
   13200:	9b25      	ldr	r3, [sp, #148]	; 0x94
   13202:	3301      	adds	r3, #1
   13204:	2b07      	cmp	r3, #7
   13206:	e9ca 4500 	strd	r4, r5, [sl]
   1320a:	9325      	str	r3, [sp, #148]	; 0x94
   1320c:	dc1c      	bgt.n	13248 <_svfprintf_r+0x238>
   1320e:	f10a 0a08 	add.w	sl, sl, #8
   13212:	9b04      	ldr	r3, [sp, #16]
   13214:	442b      	add	r3, r5
   13216:	9304      	str	r3, [sp, #16]
   13218:	2e00      	cmp	r6, #0
   1321a:	f47f af47 	bne.w	130ac <_svfprintf_r+0x9c>
   1321e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   13220:	2b00      	cmp	r3, #0
   13222:	f041 820b 	bne.w	1463c <_svfprintf_r+0x162c>
   13226:	ee1b 3a10 	vmov	r3, s22
   1322a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   1322e:	f013 0f40 	tst.w	r3, #64	; 0x40
   13232:	9b04      	ldr	r3, [sp, #16]
   13234:	bf18      	it	ne
   13236:	f04f 33ff 	movne.w	r3, #4294967295
   1323a:	9304      	str	r3, [sp, #16]
   1323c:	9804      	ldr	r0, [sp, #16]
   1323e:	b051      	add	sp, #324	; 0x144
   13240:	ecbd 8b08 	vpop	{d8-d11}
   13244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13248:	ee1b 1a10 	vmov	r1, s22
   1324c:	aa24      	add	r2, sp, #144	; 0x90
   1324e:	4658      	mov	r0, fp
   13250:	f004 fd2e 	bl	17cb0 <__ssprint_r>
   13254:	2800      	cmp	r0, #0
   13256:	d1e6      	bne.n	13226 <_svfprintf_r+0x216>
   13258:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1325c:	e7d9      	b.n	13212 <_svfprintf_r+0x202>
   1325e:	bf00      	nop
	...
   13268:	ffffffff 	.word	0xffffffff
   1326c:	7fefffff 	.word	0x7fefffff
   13270:	2000c16c 	.word	0x2000c16c
   13274:	930b      	str	r3, [sp, #44]	; 0x2c
   13276:	2b00      	cmp	r3, #0
   13278:	d0d1      	beq.n	1321e <_svfprintf_r+0x20e>
   1327a:	2100      	movs	r1, #0
   1327c:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
   13280:	f88d 30dc 	strb.w	r3, [sp, #220]	; 0xdc
   13284:	2301      	movs	r3, #1
   13286:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   1328a:	9302      	str	r3, [sp, #8]
   1328c:	9107      	str	r1, [sp, #28]
   1328e:	9305      	str	r3, [sp, #20]
   13290:	9103      	str	r1, [sp, #12]
   13292:	910f      	str	r1, [sp, #60]	; 0x3c
   13294:	ac37      	add	r4, sp, #220	; 0xdc
   13296:	f018 0302 	ands.w	r3, r8, #2
   1329a:	9309      	str	r3, [sp, #36]	; 0x24
   1329c:	d002      	beq.n	132a4 <_svfprintf_r+0x294>
   1329e:	9b02      	ldr	r3, [sp, #8]
   132a0:	3302      	adds	r3, #2
   132a2:	9302      	str	r3, [sp, #8]
   132a4:	f018 0384 	ands.w	r3, r8, #132	; 0x84
   132a8:	930a      	str	r3, [sp, #40]	; 0x28
   132aa:	d105      	bne.n	132b8 <_svfprintf_r+0x2a8>
   132ac:	9b06      	ldr	r3, [sp, #24]
   132ae:	9a02      	ldr	r2, [sp, #8]
   132b0:	1a9d      	subs	r5, r3, r2
   132b2:	2d00      	cmp	r5, #0
   132b4:	f300 8369 	bgt.w	1398a <_svfprintf_r+0x97a>
   132b8:	9a26      	ldr	r2, [sp, #152]	; 0x98
   132ba:	b189      	cbz	r1, 132e0 <_svfprintf_r+0x2d0>
   132bc:	9925      	ldr	r1, [sp, #148]	; 0x94
   132be:	f10d 0067 	add.w	r0, sp, #103	; 0x67
   132c2:	3101      	adds	r1, #1
   132c4:	3201      	adds	r2, #1
   132c6:	f8ca 0000 	str.w	r0, [sl]
   132ca:	2907      	cmp	r1, #7
   132cc:	f04f 0001 	mov.w	r0, #1
   132d0:	9226      	str	r2, [sp, #152]	; 0x98
   132d2:	9125      	str	r1, [sp, #148]	; 0x94
   132d4:	f8ca 0004 	str.w	r0, [sl, #4]
   132d8:	f300 83a2 	bgt.w	13a20 <_svfprintf_r+0xa10>
   132dc:	f10a 0a08 	add.w	sl, sl, #8
   132e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   132e2:	b183      	cbz	r3, 13306 <_svfprintf_r+0x2f6>
   132e4:	9b25      	ldr	r3, [sp, #148]	; 0x94
   132e6:	a91a      	add	r1, sp, #104	; 0x68
   132e8:	3301      	adds	r3, #1
   132ea:	3202      	adds	r2, #2
   132ec:	f8ca 1000 	str.w	r1, [sl]
   132f0:	2b07      	cmp	r3, #7
   132f2:	f04f 0102 	mov.w	r1, #2
   132f6:	9226      	str	r2, [sp, #152]	; 0x98
   132f8:	9325      	str	r3, [sp, #148]	; 0x94
   132fa:	f8ca 1004 	str.w	r1, [sl, #4]
   132fe:	f300 83a3 	bgt.w	13a48 <_svfprintf_r+0xa38>
   13302:	f10a 0a08 	add.w	sl, sl, #8
   13306:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13308:	2b80      	cmp	r3, #128	; 0x80
   1330a:	f000 826c 	beq.w	137e6 <_svfprintf_r+0x7d6>
   1330e:	9b03      	ldr	r3, [sp, #12]
   13310:	9905      	ldr	r1, [sp, #20]
   13312:	1a5d      	subs	r5, r3, r1
   13314:	2d00      	cmp	r5, #0
   13316:	f300 82a5 	bgt.w	13864 <_svfprintf_r+0x854>
   1331a:	f418 7f80 	tst.w	r8, #256	; 0x100
   1331e:	f040 820d 	bne.w	1373c <_svfprintf_r+0x72c>
   13322:	9b05      	ldr	r3, [sp, #20]
   13324:	f8ca 3004 	str.w	r3, [sl, #4]
   13328:	441a      	add	r2, r3
   1332a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1332c:	f8ca 4000 	str.w	r4, [sl]
   13330:	3301      	adds	r3, #1
   13332:	2b07      	cmp	r3, #7
   13334:	9226      	str	r2, [sp, #152]	; 0x98
   13336:	9325      	str	r3, [sp, #148]	; 0x94
   13338:	f300 831b 	bgt.w	13972 <_svfprintf_r+0x962>
   1333c:	f10a 0a08 	add.w	sl, sl, #8
   13340:	f018 0f04 	tst.w	r8, #4
   13344:	d005      	beq.n	13352 <_svfprintf_r+0x342>
   13346:	9b06      	ldr	r3, [sp, #24]
   13348:	9902      	ldr	r1, [sp, #8]
   1334a:	1a5c      	subs	r4, r3, r1
   1334c:	2c00      	cmp	r4, #0
   1334e:	f300 8388 	bgt.w	13a62 <_svfprintf_r+0xa52>
   13352:	9b04      	ldr	r3, [sp, #16]
   13354:	9906      	ldr	r1, [sp, #24]
   13356:	9802      	ldr	r0, [sp, #8]
   13358:	4281      	cmp	r1, r0
   1335a:	bfac      	ite	ge
   1335c:	185b      	addge	r3, r3, r1
   1335e:	181b      	addlt	r3, r3, r0
   13360:	9304      	str	r3, [sp, #16]
   13362:	2a00      	cmp	r2, #0
   13364:	f040 82b0 	bne.w	138c8 <_svfprintf_r+0x8b8>
   13368:	2300      	movs	r3, #0
   1336a:	9325      	str	r3, [sp, #148]	; 0x94
   1336c:	9b07      	ldr	r3, [sp, #28]
   1336e:	b11b      	cbz	r3, 13378 <_svfprintf_r+0x368>
   13370:	9907      	ldr	r1, [sp, #28]
   13372:	4658      	mov	r0, fp
   13374:	f7fe fbd6 	bl	11b24 <_free_r>
   13378:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1337c:	464c      	mov	r4, r9
   1337e:	e679      	b.n	13074 <_svfprintf_r+0x64>
   13380:	930b      	str	r3, [sp, #44]	; 0x2c
   13382:	9b08      	ldr	r3, [sp, #32]
   13384:	3307      	adds	r3, #7
   13386:	f023 0307 	bic.w	r3, r3, #7
   1338a:	ecb3 8b02 	vldmia	r3!, {d8}
   1338e:	eeb0 7bc8 	vabs.f64	d7, d8
   13392:	eeb4 7b49 	vcmp.f64	d7, d9
   13396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1339a:	9308      	str	r3, [sp, #32]
   1339c:	f340 84e9 	ble.w	13d72 <_svfprintf_r+0xd62>
   133a0:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
   133a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   133a8:	f101 8059 	bmi.w	1445e <_svfprintf_r+0x144e>
   133ac:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   133b0:	4cab      	ldr	r4, [pc, #684]	; (13660 <_svfprintf_r+0x650>)
   133b2:	4bac      	ldr	r3, [pc, #688]	; (13664 <_svfprintf_r+0x654>)
   133b4:	f028 0880 	bic.w	r8, r8, #128	; 0x80
   133b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   133ba:	2a47      	cmp	r2, #71	; 0x47
   133bc:	bfc8      	it	gt
   133be:	461c      	movgt	r4, r3
   133c0:	2300      	movs	r3, #0
   133c2:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   133c6:	2203      	movs	r2, #3
   133c8:	9307      	str	r3, [sp, #28]
   133ca:	9202      	str	r2, [sp, #8]
   133cc:	9205      	str	r2, [sp, #20]
   133ce:	9303      	str	r3, [sp, #12]
   133d0:	930f      	str	r3, [sp, #60]	; 0x3c
   133d2:	2900      	cmp	r1, #0
   133d4:	f43f af5f 	beq.w	13296 <_svfprintf_r+0x286>
   133d8:	9b02      	ldr	r3, [sp, #8]
   133da:	3301      	adds	r3, #1
   133dc:	9302      	str	r3, [sp, #8]
   133de:	e75a      	b.n	13296 <_svfprintf_r+0x286>
   133e0:	2b43      	cmp	r3, #67	; 0x43
   133e2:	930b      	str	r3, [sp, #44]	; 0x2c
   133e4:	d003      	beq.n	133ee <_svfprintf_r+0x3de>
   133e6:	f018 0f10 	tst.w	r8, #16
   133ea:	f000 855d 	beq.w	13ea8 <_svfprintf_r+0xe98>
   133ee:	9d08      	ldr	r5, [sp, #32]
   133f0:	2208      	movs	r2, #8
   133f2:	2100      	movs	r1, #0
   133f4:	a822      	add	r0, sp, #136	; 0x88
   133f6:	ac37      	add	r4, sp, #220	; 0xdc
   133f8:	f7fd fddc 	bl	10fb4 <memset>
   133fc:	ab22      	add	r3, sp, #136	; 0x88
   133fe:	f855 2b04 	ldr.w	r2, [r5], #4
   13402:	4621      	mov	r1, r4
   13404:	4658      	mov	r0, fp
   13406:	f004 fb29 	bl	17a5c <_wcrtomb_r>
   1340a:	4603      	mov	r3, r0
   1340c:	3301      	adds	r3, #1
   1340e:	9005      	str	r0, [sp, #20]
   13410:	f001 82ee 	beq.w	149f0 <_svfprintf_r+0x19e0>
   13414:	9b05      	ldr	r3, [sp, #20]
   13416:	9508      	str	r5, [sp, #32]
   13418:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1341c:	9302      	str	r3, [sp, #8]
   1341e:	2100      	movs	r1, #0
   13420:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
   13424:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   13428:	9107      	str	r1, [sp, #28]
   1342a:	9103      	str	r1, [sp, #12]
   1342c:	910f      	str	r1, [sp, #60]	; 0x3c
   1342e:	e732      	b.n	13296 <_svfprintf_r+0x286>
   13430:	930b      	str	r3, [sp, #44]	; 0x2c
   13432:	9b08      	ldr	r3, [sp, #32]
   13434:	461a      	mov	r2, r3
   13436:	2300      	movs	r3, #0
   13438:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
   1343c:	4613      	mov	r3, r2
   1343e:	f853 4b04 	ldr.w	r4, [r3], #4
   13442:	9308      	str	r3, [sp, #32]
   13444:	2c00      	cmp	r4, #0
   13446:	f000 8548 	beq.w	13eda <_svfprintf_r+0xeca>
   1344a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1344c:	2b53      	cmp	r3, #83	; 0x53
   1344e:	f000 86ec 	beq.w	1422a <_svfprintf_r+0x121a>
   13452:	f018 0310 	ands.w	r3, r8, #16
   13456:	930c      	str	r3, [sp, #48]	; 0x30
   13458:	f040 86e7 	bne.w	1422a <_svfprintf_r+0x121a>
   1345c:	9b03      	ldr	r3, [sp, #12]
   1345e:	1c5d      	adds	r5, r3, #1
   13460:	f001 80e5 	beq.w	1462e <_svfprintf_r+0x161e>
   13464:	990c      	ldr	r1, [sp, #48]	; 0x30
   13466:	461a      	mov	r2, r3
   13468:	4620      	mov	r0, r4
   1346a:	f7fe f9f9 	bl	11860 <memchr>
   1346e:	9007      	str	r0, [sp, #28]
   13470:	2800      	cmp	r0, #0
   13472:	f001 8328 	beq.w	14ac6 <_svfprintf_r+0x1ab6>
   13476:	9b07      	ldr	r3, [sp, #28]
   13478:	1b1a      	subs	r2, r3, r4
   1347a:	9205      	str	r2, [sp, #20]
   1347c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1347e:	9303      	str	r3, [sp, #12]
   13480:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   13484:	930f      	str	r3, [sp, #60]	; 0x3c
   13486:	930d      	str	r3, [sp, #52]	; 0x34
   13488:	9307      	str	r3, [sp, #28]
   1348a:	2373      	movs	r3, #115	; 0x73
   1348c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   13490:	9202      	str	r2, [sp, #8]
   13492:	930b      	str	r3, [sp, #44]	; 0x2c
   13494:	e79d      	b.n	133d2 <_svfprintf_r+0x3c2>
   13496:	f018 0f20 	tst.w	r8, #32
   1349a:	930b      	str	r3, [sp, #44]	; 0x2c
   1349c:	9b08      	ldr	r3, [sp, #32]
   1349e:	d03d      	beq.n	1351c <_svfprintf_r+0x50c>
   134a0:	3307      	adds	r3, #7
   134a2:	f023 0307 	bic.w	r3, r3, #7
   134a6:	461a      	mov	r2, r3
   134a8:	4611      	mov	r1, r2
   134aa:	685b      	ldr	r3, [r3, #4]
   134ac:	f851 2b08 	ldr.w	r2, [r1], #8
   134b0:	9108      	str	r1, [sp, #32]
   134b2:	4619      	mov	r1, r3
   134b4:	2b00      	cmp	r3, #0
   134b6:	f2c0 840c 	blt.w	13cd2 <_svfprintf_r+0xcc2>
   134ba:	9b03      	ldr	r3, [sp, #12]
   134bc:	3301      	adds	r3, #1
   134be:	f000 829e 	beq.w	139fe <_svfprintf_r+0x9ee>
   134c2:	f028 0080 	bic.w	r0, r8, #128	; 0x80
   134c6:	ea52 0301 	orrs.w	r3, r2, r1
   134ca:	9002      	str	r0, [sp, #8]
   134cc:	f040 8299 	bne.w	13a02 <_svfprintf_r+0x9f2>
   134d0:	9b03      	ldr	r3, [sp, #12]
   134d2:	2b00      	cmp	r3, #0
   134d4:	f040 829a 	bne.w	13a0c <_svfprintf_r+0x9fc>
   134d8:	4680      	mov	r8, r0
   134da:	2300      	movs	r3, #0
   134dc:	9303      	str	r3, [sp, #12]
   134de:	9305      	str	r3, [sp, #20]
   134e0:	ac50      	add	r4, sp, #320	; 0x140
   134e2:	e106      	b.n	136f2 <_svfprintf_r+0x6e2>
   134e4:	9b08      	ldr	r3, [sp, #32]
   134e6:	f853 2b04 	ldr.w	r2, [r3], #4
   134ea:	9206      	str	r2, [sp, #24]
   134ec:	2a00      	cmp	r2, #0
   134ee:	f280 8419 	bge.w	13d24 <_svfprintf_r+0xd14>
   134f2:	9a06      	ldr	r2, [sp, #24]
   134f4:	9308      	str	r3, [sp, #32]
   134f6:	4252      	negs	r2, r2
   134f8:	9206      	str	r2, [sp, #24]
   134fa:	f899 3000 	ldrb.w	r3, [r9]
   134fe:	f048 0804 	orr.w	r8, r8, #4
   13502:	e5e1      	b.n	130c8 <_svfprintf_r+0xb8>
   13504:	f899 3000 	ldrb.w	r3, [r9]
   13508:	f048 0808 	orr.w	r8, r8, #8
   1350c:	e5dc      	b.n	130c8 <_svfprintf_r+0xb8>
   1350e:	f048 0810 	orr.w	r8, r8, #16
   13512:	f018 0f20 	tst.w	r8, #32
   13516:	930b      	str	r3, [sp, #44]	; 0x2c
   13518:	9b08      	ldr	r3, [sp, #32]
   1351a:	d1c1      	bne.n	134a0 <_svfprintf_r+0x490>
   1351c:	f018 0f10 	tst.w	r8, #16
   13520:	f040 840b 	bne.w	13d3a <_svfprintf_r+0xd2a>
   13524:	f018 0f40 	tst.w	r8, #64	; 0x40
   13528:	f000 8403 	beq.w	13d32 <_svfprintf_r+0xd22>
   1352c:	f933 2b04 	ldrsh.w	r2, [r3], #4
   13530:	9308      	str	r3, [sp, #32]
   13532:	17d1      	asrs	r1, r2, #31
   13534:	460b      	mov	r3, r1
   13536:	e7bd      	b.n	134b4 <_svfprintf_r+0x4a4>
   13538:	9b08      	ldr	r3, [sp, #32]
   1353a:	f048 0202 	orr.w	r2, r8, #2
   1353e:	9202      	str	r2, [sp, #8]
   13540:	f853 2b04 	ldr.w	r2, [r3], #4
   13544:	9308      	str	r3, [sp, #32]
   13546:	f647 0330 	movw	r3, #30768	; 0x7830
   1354a:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
   1354e:	2078      	movs	r0, #120	; 0x78
   13550:	4b45      	ldr	r3, [pc, #276]	; (13668 <_svfprintf_r+0x658>)
   13552:	9311      	str	r3, [sp, #68]	; 0x44
   13554:	2100      	movs	r1, #0
   13556:	2302      	movs	r3, #2
   13558:	900b      	str	r0, [sp, #44]	; 0x2c
   1355a:	2000      	movs	r0, #0
   1355c:	9c03      	ldr	r4, [sp, #12]
   1355e:	f88d 0067 	strb.w	r0, [sp, #103]	; 0x67
   13562:	1c60      	adds	r0, r4, #1
   13564:	f000 80ad 	beq.w	136c2 <_svfprintf_r+0x6b2>
   13568:	9802      	ldr	r0, [sp, #8]
   1356a:	f020 0880 	bic.w	r8, r0, #128	; 0x80
   1356e:	ea52 0001 	orrs.w	r0, r2, r1
   13572:	f040 80a4 	bne.w	136be <_svfprintf_r+0x6ae>
   13576:	2c00      	cmp	r4, #0
   13578:	f040 86ae 	bne.w	142d8 <_svfprintf_r+0x12c8>
   1357c:	2b00      	cmp	r3, #0
   1357e:	d1ac      	bne.n	134da <_svfprintf_r+0x4ca>
   13580:	9b02      	ldr	r3, [sp, #8]
   13582:	f013 0301 	ands.w	r3, r3, #1
   13586:	9305      	str	r3, [sp, #20]
   13588:	f000 83d1 	beq.w	13d2e <_svfprintf_r+0xd1e>
   1358c:	2330      	movs	r3, #48	; 0x30
   1358e:	f88d 313f 	strb.w	r3, [sp, #319]	; 0x13f
   13592:	f20d 143f 	addw	r4, sp, #319	; 0x13f
   13596:	e0ac      	b.n	136f2 <_svfprintf_r+0x6e2>
   13598:	f018 0f20 	tst.w	r8, #32
   1359c:	f040 83d4 	bne.w	13d48 <_svfprintf_r+0xd38>
   135a0:	f018 0f10 	tst.w	r8, #16
   135a4:	f040 869f 	bne.w	142e6 <_svfprintf_r+0x12d6>
   135a8:	f018 0f40 	tst.w	r8, #64	; 0x40
   135ac:	f040 8797 	bne.w	144de <_svfprintf_r+0x14ce>
   135b0:	f418 7f00 	tst.w	r8, #512	; 0x200
   135b4:	f000 8697 	beq.w	142e6 <_svfprintf_r+0x12d6>
   135b8:	9b08      	ldr	r3, [sp, #32]
   135ba:	9904      	ldr	r1, [sp, #16]
   135bc:	f853 2b04 	ldr.w	r2, [r3], #4
   135c0:	9308      	str	r3, [sp, #32]
   135c2:	7011      	strb	r1, [r2, #0]
   135c4:	464c      	mov	r4, r9
   135c6:	e555      	b.n	13074 <_svfprintf_r+0x64>
   135c8:	f899 3000 	ldrb.w	r3, [r9]
   135cc:	2b68      	cmp	r3, #104	; 0x68
   135ce:	bf03      	ittte	eq
   135d0:	f899 3001 	ldrbeq.w	r3, [r9, #1]
   135d4:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
   135d8:	f109 0901 	addeq.w	r9, r9, #1
   135dc:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
   135e0:	e572      	b.n	130c8 <_svfprintf_r+0xb8>
   135e2:	f899 3000 	ldrb.w	r3, [r9]
   135e6:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
   135ea:	e56d      	b.n	130c8 <_svfprintf_r+0xb8>
   135ec:	f899 3000 	ldrb.w	r3, [r9]
   135f0:	2b6c      	cmp	r3, #108	; 0x6c
   135f2:	bf03      	ittte	eq
   135f4:	f899 3001 	ldrbeq.w	r3, [r9, #1]
   135f8:	f048 0820 	orreq.w	r8, r8, #32
   135fc:	f109 0901 	addeq.w	r9, r9, #1
   13600:	f048 0810 	orrne.w	r8, r8, #16
   13604:	e560      	b.n	130c8 <_svfprintf_r+0xb8>
   13606:	930b      	str	r3, [sp, #44]	; 0x2c
   13608:	f048 0810 	orr.w	r8, r8, #16
   1360c:	f018 0120 	ands.w	r1, r8, #32
   13610:	f000 8351 	beq.w	13cb6 <_svfprintf_r+0xca6>
   13614:	9b08      	ldr	r3, [sp, #32]
   13616:	3307      	adds	r3, #7
   13618:	f023 0307 	bic.w	r3, r3, #7
   1361c:	6859      	ldr	r1, [r3, #4]
   1361e:	f853 2b08 	ldr.w	r2, [r3], #8
   13622:	9308      	str	r3, [sp, #32]
   13624:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
   13628:	9302      	str	r3, [sp, #8]
   1362a:	2300      	movs	r3, #0
   1362c:	e795      	b.n	1355a <_svfprintf_r+0x54a>
   1362e:	930b      	str	r3, [sp, #44]	; 0x2c
   13630:	f048 0310 	orr.w	r3, r8, #16
   13634:	9302      	str	r3, [sp, #8]
   13636:	9b02      	ldr	r3, [sp, #8]
   13638:	f013 0120 	ands.w	r1, r3, #32
   1363c:	f000 8329 	beq.w	13c92 <_svfprintf_r+0xc82>
   13640:	9b08      	ldr	r3, [sp, #32]
   13642:	3307      	adds	r3, #7
   13644:	f023 0307 	bic.w	r3, r3, #7
   13648:	6859      	ldr	r1, [r3, #4]
   1364a:	f853 2b08 	ldr.w	r2, [r3], #8
   1364e:	9308      	str	r3, [sp, #32]
   13650:	2301      	movs	r3, #1
   13652:	e782      	b.n	1355a <_svfprintf_r+0x54a>
   13654:	f899 3000 	ldrb.w	r3, [r9]
   13658:	f048 0880 	orr.w	r8, r8, #128	; 0x80
   1365c:	e534      	b.n	130c8 <_svfprintf_r+0xb8>
   1365e:	bf00      	nop
   13660:	20003830 	.word	0x20003830
   13664:	200031c0 	.word	0x200031c0
   13668:	20003838 	.word	0x20003838
   1366c:	4649      	mov	r1, r9
   1366e:	f811 3b01 	ldrb.w	r3, [r1], #1
   13672:	2b2a      	cmp	r3, #42	; 0x2a
   13674:	f001 8249 	beq.w	14b0a <_svfprintf_r+0x1afa>
   13678:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   1367c:	2a09      	cmp	r2, #9
   1367e:	4689      	mov	r9, r1
   13680:	bf98      	it	ls
   13682:	2100      	movls	r1, #0
   13684:	f201 8144 	bhi.w	14910 <_svfprintf_r+0x1900>
   13688:	f819 3b01 	ldrb.w	r3, [r9], #1
   1368c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   13690:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   13694:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   13698:	2a09      	cmp	r2, #9
   1369a:	d9f5      	bls.n	13688 <_svfprintf_r+0x678>
   1369c:	9103      	str	r1, [sp, #12]
   1369e:	e515      	b.n	130cc <_svfprintf_r+0xbc>
   136a0:	f899 3000 	ldrb.w	r3, [r9]
   136a4:	f048 0801 	orr.w	r8, r8, #1
   136a8:	e50e      	b.n	130c8 <_svfprintf_r+0xb8>
   136aa:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
   136ae:	2b00      	cmp	r3, #0
   136b0:	f47f ad8f 	bne.w	131d2 <_svfprintf_r+0x1c2>
   136b4:	f899 3000 	ldrb.w	r3, [r9]
   136b8:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
   136bc:	e504      	b.n	130c8 <_svfprintf_r+0xb8>
   136be:	f8cd 8008 	str.w	r8, [sp, #8]
   136c2:	2b01      	cmp	r3, #1
   136c4:	f000 819d 	beq.w	13a02 <_svfprintf_r+0x9f2>
   136c8:	2b02      	cmp	r3, #2
   136ca:	ac50      	add	r4, sp, #320	; 0x140
   136cc:	d120      	bne.n	13710 <_svfprintf_r+0x700>
   136ce:	9811      	ldr	r0, [sp, #68]	; 0x44
   136d0:	f002 030f 	and.w	r3, r2, #15
   136d4:	0912      	lsrs	r2, r2, #4
   136d6:	5cc3      	ldrb	r3, [r0, r3]
   136d8:	f804 3d01 	strb.w	r3, [r4, #-1]!
   136dc:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
   136e0:	0909      	lsrs	r1, r1, #4
   136e2:	ea52 0301 	orrs.w	r3, r2, r1
   136e6:	d1f3      	bne.n	136d0 <_svfprintf_r+0x6c0>
   136e8:	ab50      	add	r3, sp, #320	; 0x140
   136ea:	1b1b      	subs	r3, r3, r4
   136ec:	f8dd 8008 	ldr.w	r8, [sp, #8]
   136f0:	9305      	str	r3, [sp, #20]
   136f2:	9a05      	ldr	r2, [sp, #20]
   136f4:	9803      	ldr	r0, [sp, #12]
   136f6:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   136fa:	4282      	cmp	r2, r0
   136fc:	f04f 0300 	mov.w	r3, #0
   13700:	bfb8      	it	lt
   13702:	4602      	movlt	r2, r0
   13704:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   13708:	9307      	str	r3, [sp, #28]
   1370a:	9202      	str	r2, [sp, #8]
   1370c:	930f      	str	r3, [sp, #60]	; 0x3c
   1370e:	e660      	b.n	133d2 <_svfprintf_r+0x3c2>
   13710:	f002 0307 	and.w	r3, r2, #7
   13714:	08d2      	lsrs	r2, r2, #3
   13716:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
   1371a:	08c9      	lsrs	r1, r1, #3
   1371c:	3330      	adds	r3, #48	; 0x30
   1371e:	ea52 0501 	orrs.w	r5, r2, r1
   13722:	4620      	mov	r0, r4
   13724:	f804 3d01 	strb.w	r3, [r4, #-1]!
   13728:	d1f2      	bne.n	13710 <_svfprintf_r+0x700>
   1372a:	9a02      	ldr	r2, [sp, #8]
   1372c:	07d1      	lsls	r1, r2, #31
   1372e:	f100 824d 	bmi.w	13bcc <_svfprintf_r+0xbbc>
   13732:	ab50      	add	r3, sp, #320	; 0x140
   13734:	1b1b      	subs	r3, r3, r4
   13736:	4690      	mov	r8, r2
   13738:	9305      	str	r3, [sp, #20]
   1373a:	e7da      	b.n	136f2 <_svfprintf_r+0x6e2>
   1373c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1373e:	2b65      	cmp	r3, #101	; 0x65
   13740:	f340 80d4 	ble.w	138ec <_svfprintf_r+0x8dc>
   13744:	eeb5 8b40 	vcmp.f64	d8, #0.0
   13748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1374c:	f040 81c1 	bne.w	13ad2 <_svfprintf_r+0xac2>
   13750:	9b25      	ldr	r3, [sp, #148]	; 0x94
   13752:	49ba      	ldr	r1, [pc, #744]	; (13a3c <_svfprintf_r+0xa2c>)
   13754:	f8ca 1000 	str.w	r1, [sl]
   13758:	3301      	adds	r3, #1
   1375a:	3201      	adds	r2, #1
   1375c:	2101      	movs	r1, #1
   1375e:	2b07      	cmp	r3, #7
   13760:	9226      	str	r2, [sp, #152]	; 0x98
   13762:	9325      	str	r3, [sp, #148]	; 0x94
   13764:	f8ca 1004 	str.w	r1, [sl, #4]
   13768:	f300 8551 	bgt.w	1420e <_svfprintf_r+0x11fe>
   1376c:	f10a 0a08 	add.w	sl, sl, #8
   13770:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   13772:	990e      	ldr	r1, [sp, #56]	; 0x38
   13774:	428b      	cmp	r3, r1
   13776:	f280 82d0 	bge.w	13d1a <_svfprintf_r+0xd0a>
   1377a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1377c:	9912      	ldr	r1, [sp, #72]	; 0x48
   1377e:	441a      	add	r2, r3
   13780:	e9ca 1300 	strd	r1, r3, [sl]
   13784:	9b25      	ldr	r3, [sp, #148]	; 0x94
   13786:	9226      	str	r2, [sp, #152]	; 0x98
   13788:	3301      	adds	r3, #1
   1378a:	2b07      	cmp	r3, #7
   1378c:	9325      	str	r3, [sp, #148]	; 0x94
   1378e:	f300 8397 	bgt.w	13ec0 <_svfprintf_r+0xeb0>
   13792:	f10a 0a08 	add.w	sl, sl, #8
   13796:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   13798:	1e5c      	subs	r4, r3, #1
   1379a:	2c00      	cmp	r4, #0
   1379c:	f77f add0 	ble.w	13340 <_svfprintf_r+0x330>
   137a0:	2c10      	cmp	r4, #16
   137a2:	9b25      	ldr	r3, [sp, #148]	; 0x94
   137a4:	f340 856e 	ble.w	14284 <_svfprintf_r+0x1274>
   137a8:	ee1b 6a10 	vmov	r6, s22
   137ac:	2510      	movs	r5, #16
   137ae:	e005      	b.n	137bc <_svfprintf_r+0x7ac>
   137b0:	f10a 0a08 	add.w	sl, sl, #8
   137b4:	3c10      	subs	r4, #16
   137b6:	2c10      	cmp	r4, #16
   137b8:	f340 8564 	ble.w	14284 <_svfprintf_r+0x1274>
   137bc:	3301      	adds	r3, #1
   137be:	49a0      	ldr	r1, [pc, #640]	; (13a40 <_svfprintf_r+0xa30>)
   137c0:	3210      	adds	r2, #16
   137c2:	2b07      	cmp	r3, #7
   137c4:	e9ca 1500 	strd	r1, r5, [sl]
   137c8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   137cc:	ddf0      	ble.n	137b0 <_svfprintf_r+0x7a0>
   137ce:	aa24      	add	r2, sp, #144	; 0x90
   137d0:	4631      	mov	r1, r6
   137d2:	4658      	mov	r0, fp
   137d4:	f004 fa6c 	bl	17cb0 <__ssprint_r>
   137d8:	2800      	cmp	r0, #0
   137da:	d17e      	bne.n	138da <_svfprintf_r+0x8ca>
   137dc:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   137e0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   137e4:	e7e6      	b.n	137b4 <_svfprintf_r+0x7a4>
   137e6:	9b06      	ldr	r3, [sp, #24]
   137e8:	9902      	ldr	r1, [sp, #8]
   137ea:	1a5d      	subs	r5, r3, r1
   137ec:	2d00      	cmp	r5, #0
   137ee:	f77f ad8e 	ble.w	1330e <_svfprintf_r+0x2fe>
   137f2:	2d10      	cmp	r5, #16
   137f4:	9b25      	ldr	r3, [sp, #148]	; 0x94
   137f6:	dd21      	ble.n	1383c <_svfprintf_r+0x82c>
   137f8:	9409      	str	r4, [sp, #36]	; 0x24
   137fa:	2610      	movs	r6, #16
   137fc:	ee1b 4a10 	vmov	r4, s22
   13800:	e004      	b.n	1380c <_svfprintf_r+0x7fc>
   13802:	3d10      	subs	r5, #16
   13804:	2d10      	cmp	r5, #16
   13806:	f10a 0a08 	add.w	sl, sl, #8
   1380a:	dd16      	ble.n	1383a <_svfprintf_r+0x82a>
   1380c:	3301      	adds	r3, #1
   1380e:	498c      	ldr	r1, [pc, #560]	; (13a40 <_svfprintf_r+0xa30>)
   13810:	3210      	adds	r2, #16
   13812:	2b07      	cmp	r3, #7
   13814:	e9ca 1600 	strd	r1, r6, [sl]
   13818:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1381c:	ddf1      	ble.n	13802 <_svfprintf_r+0x7f2>
   1381e:	aa24      	add	r2, sp, #144	; 0x90
   13820:	4621      	mov	r1, r4
   13822:	4658      	mov	r0, fp
   13824:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   13828:	f004 fa42 	bl	17cb0 <__ssprint_r>
   1382c:	2800      	cmp	r0, #0
   1382e:	d154      	bne.n	138da <_svfprintf_r+0x8ca>
   13830:	3d10      	subs	r5, #16
   13832:	2d10      	cmp	r5, #16
   13834:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   13838:	dce8      	bgt.n	1380c <_svfprintf_r+0x7fc>
   1383a:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1383c:	4980      	ldr	r1, [pc, #512]	; (13a40 <_svfprintf_r+0xa30>)
   1383e:	f8ca 5004 	str.w	r5, [sl, #4]
   13842:	3301      	adds	r3, #1
   13844:	442a      	add	r2, r5
   13846:	2b07      	cmp	r3, #7
   13848:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1384c:	f8ca 1000 	str.w	r1, [sl]
   13850:	f300 8526 	bgt.w	142a0 <_svfprintf_r+0x1290>
   13854:	9b03      	ldr	r3, [sp, #12]
   13856:	9905      	ldr	r1, [sp, #20]
   13858:	1a5d      	subs	r5, r3, r1
   1385a:	2d00      	cmp	r5, #0
   1385c:	f10a 0a08 	add.w	sl, sl, #8
   13860:	f77f ad5b 	ble.w	1331a <_svfprintf_r+0x30a>
   13864:	2d10      	cmp	r5, #16
   13866:	9b25      	ldr	r3, [sp, #148]	; 0x94
   13868:	dd1f      	ble.n	138aa <_svfprintf_r+0x89a>
   1386a:	4651      	mov	r1, sl
   1386c:	2610      	movs	r6, #16
   1386e:	ee1b aa10 	vmov	sl, s22
   13872:	e004      	b.n	1387e <_svfprintf_r+0x86e>
   13874:	3d10      	subs	r5, #16
   13876:	2d10      	cmp	r5, #16
   13878:	f101 0108 	add.w	r1, r1, #8
   1387c:	dd14      	ble.n	138a8 <_svfprintf_r+0x898>
   1387e:	3301      	adds	r3, #1
   13880:	486f      	ldr	r0, [pc, #444]	; (13a40 <_svfprintf_r+0xa30>)
   13882:	3210      	adds	r2, #16
   13884:	2b07      	cmp	r3, #7
   13886:	e9c1 0600 	strd	r0, r6, [r1]
   1388a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1388e:	ddf1      	ble.n	13874 <_svfprintf_r+0x864>
   13890:	aa24      	add	r2, sp, #144	; 0x90
   13892:	4651      	mov	r1, sl
   13894:	4658      	mov	r0, fp
   13896:	f004 fa0b 	bl	17cb0 <__ssprint_r>
   1389a:	b9f0      	cbnz	r0, 138da <_svfprintf_r+0x8ca>
   1389c:	3d10      	subs	r5, #16
   1389e:	2d10      	cmp	r5, #16
   138a0:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   138a4:	a927      	add	r1, sp, #156	; 0x9c
   138a6:	dcea      	bgt.n	1387e <_svfprintf_r+0x86e>
   138a8:	468a      	mov	sl, r1
   138aa:	3301      	adds	r3, #1
   138ac:	4964      	ldr	r1, [pc, #400]	; (13a40 <_svfprintf_r+0xa30>)
   138ae:	f8ca 5004 	str.w	r5, [sl, #4]
   138b2:	442a      	add	r2, r5
   138b4:	2b07      	cmp	r3, #7
   138b6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   138ba:	f8ca 1000 	str.w	r1, [sl]
   138be:	f300 81da 	bgt.w	13c76 <_svfprintf_r+0xc66>
   138c2:	f10a 0a08 	add.w	sl, sl, #8
   138c6:	e528      	b.n	1331a <_svfprintf_r+0x30a>
   138c8:	ee1b 1a10 	vmov	r1, s22
   138cc:	aa24      	add	r2, sp, #144	; 0x90
   138ce:	4658      	mov	r0, fp
   138d0:	f004 f9ee 	bl	17cb0 <__ssprint_r>
   138d4:	2800      	cmp	r0, #0
   138d6:	f43f ad47 	beq.w	13368 <_svfprintf_r+0x358>
   138da:	9b07      	ldr	r3, [sp, #28]
   138dc:	2b00      	cmp	r3, #0
   138de:	f43f aca2 	beq.w	13226 <_svfprintf_r+0x216>
   138e2:	9907      	ldr	r1, [sp, #28]
   138e4:	4658      	mov	r0, fp
   138e6:	f7fe f91d 	bl	11b24 <_free_r>
   138ea:	e49c      	b.n	13226 <_svfprintf_r+0x216>
   138ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   138ee:	2b01      	cmp	r3, #1
   138f0:	f340 817a 	ble.w	13be8 <_svfprintf_r+0xbd8>
   138f4:	9b25      	ldr	r3, [sp, #148]	; 0x94
   138f6:	f8ca 4000 	str.w	r4, [sl]
   138fa:	3301      	adds	r3, #1
   138fc:	3201      	adds	r2, #1
   138fe:	2101      	movs	r1, #1
   13900:	2b07      	cmp	r3, #7
   13902:	9226      	str	r2, [sp, #152]	; 0x98
   13904:	9325      	str	r3, [sp, #148]	; 0x94
   13906:	f8ca 1004 	str.w	r1, [sl, #4]
   1390a:	f300 81f8 	bgt.w	13cfe <_svfprintf_r+0xcee>
   1390e:	f10a 0a08 	add.w	sl, sl, #8
   13912:	9910      	ldr	r1, [sp, #64]	; 0x40
   13914:	9812      	ldr	r0, [sp, #72]	; 0x48
   13916:	3301      	adds	r3, #1
   13918:	440a      	add	r2, r1
   1391a:	2b07      	cmp	r3, #7
   1391c:	e9ca 0100 	strd	r0, r1, [sl]
   13920:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   13924:	f300 81dd 	bgt.w	13ce2 <_svfprintf_r+0xcd2>
   13928:	f10a 0a08 	add.w	sl, sl, #8
   1392c:	eeb5 8b40 	vcmp.f64	d8, #0.0
   13930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13934:	f000 8177 	beq.w	13c26 <_svfprintf_r+0xc16>
   13938:	990e      	ldr	r1, [sp, #56]	; 0x38
   1393a:	3301      	adds	r3, #1
   1393c:	3901      	subs	r1, #1
   1393e:	3401      	adds	r4, #1
   13940:	440a      	add	r2, r1
   13942:	2b07      	cmp	r3, #7
   13944:	f8ca 4000 	str.w	r4, [sl]
   13948:	9325      	str	r3, [sp, #148]	; 0x94
   1394a:	f8ca 1004 	str.w	r1, [sl, #4]
   1394e:	9226      	str	r2, [sp, #152]	; 0x98
   13950:	f300 815b 	bgt.w	13c0a <_svfprintf_r+0xbfa>
   13954:	f10a 0a08 	add.w	sl, sl, #8
   13958:	9914      	ldr	r1, [sp, #80]	; 0x50
   1395a:	f8ca 1004 	str.w	r1, [sl, #4]
   1395e:	3301      	adds	r3, #1
   13960:	440a      	add	r2, r1
   13962:	2b07      	cmp	r3, #7
   13964:	a91e      	add	r1, sp, #120	; 0x78
   13966:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1396a:	f8ca 1000 	str.w	r1, [sl]
   1396e:	f77f ace5 	ble.w	1333c <_svfprintf_r+0x32c>
   13972:	ee1b 1a10 	vmov	r1, s22
   13976:	aa24      	add	r2, sp, #144	; 0x90
   13978:	4658      	mov	r0, fp
   1397a:	f004 f999 	bl	17cb0 <__ssprint_r>
   1397e:	2800      	cmp	r0, #0
   13980:	d1ab      	bne.n	138da <_svfprintf_r+0x8ca>
   13982:	9a26      	ldr	r2, [sp, #152]	; 0x98
   13984:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   13988:	e4da      	b.n	13340 <_svfprintf_r+0x330>
   1398a:	2d10      	cmp	r5, #16
   1398c:	e9dd 1225 	ldrd	r1, r2, [sp, #148]	; 0x94
   13990:	4e2c      	ldr	r6, [pc, #176]	; (13a44 <_svfprintf_r+0xa34>)
   13992:	dd24      	ble.n	139de <_svfprintf_r+0x9ce>
   13994:	9417      	str	r4, [sp, #92]	; 0x5c
   13996:	2310      	movs	r3, #16
   13998:	ee1b 4a10 	vmov	r4, s22
   1399c:	4608      	mov	r0, r1
   1399e:	e004      	b.n	139aa <_svfprintf_r+0x99a>
   139a0:	3d10      	subs	r5, #16
   139a2:	2d10      	cmp	r5, #16
   139a4:	f10a 0a08 	add.w	sl, sl, #8
   139a8:	dd17      	ble.n	139da <_svfprintf_r+0x9ca>
   139aa:	3001      	adds	r0, #1
   139ac:	3210      	adds	r2, #16
   139ae:	2807      	cmp	r0, #7
   139b0:	e9ca 6300 	strd	r6, r3, [sl]
   139b4:	e9cd 0225 	strd	r0, r2, [sp, #148]	; 0x94
   139b8:	ddf2      	ble.n	139a0 <_svfprintf_r+0x990>
   139ba:	aa24      	add	r2, sp, #144	; 0x90
   139bc:	4621      	mov	r1, r4
   139be:	4658      	mov	r0, fp
   139c0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   139c4:	f004 f974 	bl	17cb0 <__ssprint_r>
   139c8:	2800      	cmp	r0, #0
   139ca:	d186      	bne.n	138da <_svfprintf_r+0x8ca>
   139cc:	3d10      	subs	r5, #16
   139ce:	2d10      	cmp	r5, #16
   139d0:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	; 0x94
   139d4:	f04f 0310 	mov.w	r3, #16
   139d8:	dce7      	bgt.n	139aa <_svfprintf_r+0x99a>
   139da:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   139dc:	4601      	mov	r1, r0
   139de:	3101      	adds	r1, #1
   139e0:	442a      	add	r2, r5
   139e2:	2907      	cmp	r1, #7
   139e4:	e9cd 1225 	strd	r1, r2, [sp, #148]	; 0x94
   139e8:	f8ca 6000 	str.w	r6, [sl]
   139ec:	f8ca 5004 	str.w	r5, [sl, #4]
   139f0:	f300 83bd 	bgt.w	1416e <_svfprintf_r+0x115e>
   139f4:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   139f8:	f10a 0a08 	add.w	sl, sl, #8
   139fc:	e45d      	b.n	132ba <_svfprintf_r+0x2aa>
   139fe:	f8cd 8008 	str.w	r8, [sp, #8]
   13a02:	2a0a      	cmp	r2, #10
   13a04:	f171 0300 	sbcs.w	r3, r1, #0
   13a08:	f080 8345 	bcs.w	14096 <_svfprintf_r+0x1086>
   13a0c:	3230      	adds	r2, #48	; 0x30
   13a0e:	2301      	movs	r3, #1
   13a10:	f8dd 8008 	ldr.w	r8, [sp, #8]
   13a14:	f88d 213f 	strb.w	r2, [sp, #319]	; 0x13f
   13a18:	9305      	str	r3, [sp, #20]
   13a1a:	f20d 143f 	addw	r4, sp, #319	; 0x13f
   13a1e:	e668      	b.n	136f2 <_svfprintf_r+0x6e2>
   13a20:	ee1b 1a10 	vmov	r1, s22
   13a24:	aa24      	add	r2, sp, #144	; 0x90
   13a26:	4658      	mov	r0, fp
   13a28:	f004 f942 	bl	17cb0 <__ssprint_r>
   13a2c:	2800      	cmp	r0, #0
   13a2e:	f47f af54 	bne.w	138da <_svfprintf_r+0x8ca>
   13a32:	9a26      	ldr	r2, [sp, #152]	; 0x98
   13a34:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   13a38:	e452      	b.n	132e0 <_svfprintf_r+0x2d0>
   13a3a:	bf00      	nop
   13a3c:	20003868 	.word	0x20003868
   13a40:	2000bb24 	.word	0x2000bb24
   13a44:	200052e4 	.word	0x200052e4
   13a48:	ee1b 1a10 	vmov	r1, s22
   13a4c:	aa24      	add	r2, sp, #144	; 0x90
   13a4e:	4658      	mov	r0, fp
   13a50:	f004 f92e 	bl	17cb0 <__ssprint_r>
   13a54:	2800      	cmp	r0, #0
   13a56:	f47f af40 	bne.w	138da <_svfprintf_r+0x8ca>
   13a5a:	9a26      	ldr	r2, [sp, #152]	; 0x98
   13a5c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   13a60:	e451      	b.n	13306 <_svfprintf_r+0x2f6>
   13a62:	2c10      	cmp	r4, #16
   13a64:	9b25      	ldr	r3, [sp, #148]	; 0x94
   13a66:	4ebe      	ldr	r6, [pc, #760]	; (13d60 <_svfprintf_r+0xd50>)
   13a68:	dd1f      	ble.n	13aaa <_svfprintf_r+0xa9a>
   13a6a:	ee1b 8a10 	vmov	r8, s22
   13a6e:	2510      	movs	r5, #16
   13a70:	e004      	b.n	13a7c <_svfprintf_r+0xa6c>
   13a72:	3c10      	subs	r4, #16
   13a74:	2c10      	cmp	r4, #16
   13a76:	f10a 0a08 	add.w	sl, sl, #8
   13a7a:	dd16      	ble.n	13aaa <_svfprintf_r+0xa9a>
   13a7c:	3301      	adds	r3, #1
   13a7e:	3210      	adds	r2, #16
   13a80:	2b07      	cmp	r3, #7
   13a82:	e9ca 6500 	strd	r6, r5, [sl]
   13a86:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   13a8a:	ddf2      	ble.n	13a72 <_svfprintf_r+0xa62>
   13a8c:	aa24      	add	r2, sp, #144	; 0x90
   13a8e:	4641      	mov	r1, r8
   13a90:	4658      	mov	r0, fp
   13a92:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   13a96:	f004 f90b 	bl	17cb0 <__ssprint_r>
   13a9a:	2800      	cmp	r0, #0
   13a9c:	f47f af1d 	bne.w	138da <_svfprintf_r+0x8ca>
   13aa0:	3c10      	subs	r4, #16
   13aa2:	2c10      	cmp	r4, #16
   13aa4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   13aa8:	dce8      	bgt.n	13a7c <_svfprintf_r+0xa6c>
   13aaa:	3301      	adds	r3, #1
   13aac:	4422      	add	r2, r4
   13aae:	2b07      	cmp	r3, #7
   13ab0:	e9ca 6400 	strd	r6, r4, [sl]
   13ab4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   13ab8:	f77f ac4b 	ble.w	13352 <_svfprintf_r+0x342>
   13abc:	ee1b 1a10 	vmov	r1, s22
   13ac0:	aa24      	add	r2, sp, #144	; 0x90
   13ac2:	4658      	mov	r0, fp
   13ac4:	f004 f8f4 	bl	17cb0 <__ssprint_r>
   13ac8:	2800      	cmp	r0, #0
   13aca:	f47f af06 	bne.w	138da <_svfprintf_r+0x8ca>
   13ace:	9a26      	ldr	r2, [sp, #152]	; 0x98
   13ad0:	e43f      	b.n	13352 <_svfprintf_r+0x342>
   13ad2:	991b      	ldr	r1, [sp, #108]	; 0x6c
   13ad4:	2900      	cmp	r1, #0
   13ad6:	f340 835a 	ble.w	1418e <_svfprintf_r+0x117e>
   13ada:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   13adc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   13ade:	429e      	cmp	r6, r3
   13ae0:	bfa8      	it	ge
   13ae2:	461e      	movge	r6, r3
   13ae4:	2e00      	cmp	r6, #0
   13ae6:	dd0b      	ble.n	13b00 <_svfprintf_r+0xaf0>
   13ae8:	9b25      	ldr	r3, [sp, #148]	; 0x94
   13aea:	3301      	adds	r3, #1
   13aec:	4432      	add	r2, r6
   13aee:	2b07      	cmp	r3, #7
   13af0:	e9ca 4600 	strd	r4, r6, [sl]
   13af4:	9226      	str	r2, [sp, #152]	; 0x98
   13af6:	9325      	str	r3, [sp, #148]	; 0x94
   13af8:	f300 8689 	bgt.w	1480e <_svfprintf_r+0x17fe>
   13afc:	f10a 0a08 	add.w	sl, sl, #8
   13b00:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   13b02:	2e00      	cmp	r6, #0
   13b04:	bfa8      	it	ge
   13b06:	1bad      	subge	r5, r5, r6
   13b08:	2d00      	cmp	r5, #0
   13b0a:	f300 8203 	bgt.w	13f14 <_svfprintf_r+0xf04>
   13b0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13b10:	f418 6f80 	tst.w	r8, #1024	; 0x400
   13b14:	4423      	add	r3, r4
   13b16:	9305      	str	r3, [sp, #20]
   13b18:	f040 821f 	bne.w	13f5a <_svfprintf_r+0xf4a>
   13b1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   13b1e:	990e      	ldr	r1, [sp, #56]	; 0x38
   13b20:	428b      	cmp	r3, r1
   13b22:	db03      	blt.n	13b2c <_svfprintf_r+0xb1c>
   13b24:	f018 0f01 	tst.w	r8, #1
   13b28:	f000 84cf 	beq.w	144ca <_svfprintf_r+0x14ba>
   13b2c:	9910      	ldr	r1, [sp, #64]	; 0x40
   13b2e:	9812      	ldr	r0, [sp, #72]	; 0x48
   13b30:	440a      	add	r2, r1
   13b32:	e9ca 0100 	strd	r0, r1, [sl]
   13b36:	9925      	ldr	r1, [sp, #148]	; 0x94
   13b38:	9226      	str	r2, [sp, #152]	; 0x98
   13b3a:	3101      	adds	r1, #1
   13b3c:	2907      	cmp	r1, #7
   13b3e:	9125      	str	r1, [sp, #148]	; 0x94
   13b40:	f300 86a5 	bgt.w	1488e <_svfprintf_r+0x187e>
   13b44:	f10a 0a08 	add.w	sl, sl, #8
   13b48:	990e      	ldr	r1, [sp, #56]	; 0x38
   13b4a:	1865      	adds	r5, r4, r1
   13b4c:	1acc      	subs	r4, r1, r3
   13b4e:	9b05      	ldr	r3, [sp, #20]
   13b50:	1aed      	subs	r5, r5, r3
   13b52:	42a5      	cmp	r5, r4
   13b54:	bfa8      	it	ge
   13b56:	4625      	movge	r5, r4
   13b58:	2d00      	cmp	r5, #0
   13b5a:	dd0d      	ble.n	13b78 <_svfprintf_r+0xb68>
   13b5c:	f8ca 3000 	str.w	r3, [sl]
   13b60:	9b25      	ldr	r3, [sp, #148]	; 0x94
   13b62:	f8ca 5004 	str.w	r5, [sl, #4]
   13b66:	3301      	adds	r3, #1
   13b68:	442a      	add	r2, r5
   13b6a:	2b07      	cmp	r3, #7
   13b6c:	9226      	str	r2, [sp, #152]	; 0x98
   13b6e:	9325      	str	r3, [sp, #148]	; 0x94
   13b70:	f300 86bb 	bgt.w	148ea <_svfprintf_r+0x18da>
   13b74:	f10a 0a08 	add.w	sl, sl, #8
   13b78:	2d00      	cmp	r5, #0
   13b7a:	bfa8      	it	ge
   13b7c:	1b64      	subge	r4, r4, r5
   13b7e:	2c00      	cmp	r4, #0
   13b80:	f77f abde 	ble.w	13340 <_svfprintf_r+0x330>
   13b84:	2c10      	cmp	r4, #16
   13b86:	9b25      	ldr	r3, [sp, #148]	; 0x94
   13b88:	f340 837c 	ble.w	14284 <_svfprintf_r+0x1274>
   13b8c:	ee1b 6a10 	vmov	r6, s22
   13b90:	2510      	movs	r5, #16
   13b92:	e005      	b.n	13ba0 <_svfprintf_r+0xb90>
   13b94:	f10a 0a08 	add.w	sl, sl, #8
   13b98:	3c10      	subs	r4, #16
   13b9a:	2c10      	cmp	r4, #16
   13b9c:	f340 8372 	ble.w	14284 <_svfprintf_r+0x1274>
   13ba0:	3301      	adds	r3, #1
   13ba2:	4970      	ldr	r1, [pc, #448]	; (13d64 <_svfprintf_r+0xd54>)
   13ba4:	3210      	adds	r2, #16
   13ba6:	2b07      	cmp	r3, #7
   13ba8:	e9ca 1500 	strd	r1, r5, [sl]
   13bac:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   13bb0:	ddf0      	ble.n	13b94 <_svfprintf_r+0xb84>
   13bb2:	aa24      	add	r2, sp, #144	; 0x90
   13bb4:	4631      	mov	r1, r6
   13bb6:	4658      	mov	r0, fp
   13bb8:	f004 f87a 	bl	17cb0 <__ssprint_r>
   13bbc:	2800      	cmp	r0, #0
   13bbe:	f47f ae8c 	bne.w	138da <_svfprintf_r+0x8ca>
   13bc2:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   13bc6:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   13bca:	e7e5      	b.n	13b98 <_svfprintf_r+0xb88>
   13bcc:	2b30      	cmp	r3, #48	; 0x30
   13bce:	f43f ad8b 	beq.w	136e8 <_svfprintf_r+0x6d8>
   13bd2:	2330      	movs	r3, #48	; 0x30
   13bd4:	3802      	subs	r0, #2
   13bd6:	f804 3c01 	strb.w	r3, [r4, #-1]
   13bda:	ab50      	add	r3, sp, #320	; 0x140
   13bdc:	1a1b      	subs	r3, r3, r0
   13bde:	f8dd 8008 	ldr.w	r8, [sp, #8]
   13be2:	9305      	str	r3, [sp, #20]
   13be4:	4604      	mov	r4, r0
   13be6:	e584      	b.n	136f2 <_svfprintf_r+0x6e2>
   13be8:	f018 0f01 	tst.w	r8, #1
   13bec:	f47f ae82 	bne.w	138f4 <_svfprintf_r+0x8e4>
   13bf0:	9b25      	ldr	r3, [sp, #148]	; 0x94
   13bf2:	f8ca 4000 	str.w	r4, [sl]
   13bf6:	3301      	adds	r3, #1
   13bf8:	3201      	adds	r2, #1
   13bfa:	2101      	movs	r1, #1
   13bfc:	2b07      	cmp	r3, #7
   13bfe:	9226      	str	r2, [sp, #152]	; 0x98
   13c00:	9325      	str	r3, [sp, #148]	; 0x94
   13c02:	f8ca 1004 	str.w	r1, [sl, #4]
   13c06:	f77f aea5 	ble.w	13954 <_svfprintf_r+0x944>
   13c0a:	ee1b 1a10 	vmov	r1, s22
   13c0e:	aa24      	add	r2, sp, #144	; 0x90
   13c10:	4658      	mov	r0, fp
   13c12:	f004 f84d 	bl	17cb0 <__ssprint_r>
   13c16:	2800      	cmp	r0, #0
   13c18:	f47f ae5f 	bne.w	138da <_svfprintf_r+0x8ca>
   13c1c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   13c20:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   13c24:	e698      	b.n	13958 <_svfprintf_r+0x948>
   13c26:	990e      	ldr	r1, [sp, #56]	; 0x38
   13c28:	1e4c      	subs	r4, r1, #1
   13c2a:	2c00      	cmp	r4, #0
   13c2c:	f77f ae94 	ble.w	13958 <_svfprintf_r+0x948>
   13c30:	2c10      	cmp	r4, #16
   13c32:	f340 8361 	ble.w	142f8 <_svfprintf_r+0x12e8>
   13c36:	ee1b 6a10 	vmov	r6, s22
   13c3a:	2510      	movs	r5, #16
   13c3c:	e005      	b.n	13c4a <_svfprintf_r+0xc3a>
   13c3e:	f10a 0a08 	add.w	sl, sl, #8
   13c42:	3c10      	subs	r4, #16
   13c44:	2c10      	cmp	r4, #16
   13c46:	f340 8357 	ble.w	142f8 <_svfprintf_r+0x12e8>
   13c4a:	3301      	adds	r3, #1
   13c4c:	4945      	ldr	r1, [pc, #276]	; (13d64 <_svfprintf_r+0xd54>)
   13c4e:	3210      	adds	r2, #16
   13c50:	2b07      	cmp	r3, #7
   13c52:	e9ca 1500 	strd	r1, r5, [sl]
   13c56:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   13c5a:	ddf0      	ble.n	13c3e <_svfprintf_r+0xc2e>
   13c5c:	aa24      	add	r2, sp, #144	; 0x90
   13c5e:	4631      	mov	r1, r6
   13c60:	4658      	mov	r0, fp
   13c62:	f004 f825 	bl	17cb0 <__ssprint_r>
   13c66:	2800      	cmp	r0, #0
   13c68:	f47f ae37 	bne.w	138da <_svfprintf_r+0x8ca>
   13c6c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   13c70:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   13c74:	e7e5      	b.n	13c42 <_svfprintf_r+0xc32>
   13c76:	ee1b 1a10 	vmov	r1, s22
   13c7a:	aa24      	add	r2, sp, #144	; 0x90
   13c7c:	4658      	mov	r0, fp
   13c7e:	f004 f817 	bl	17cb0 <__ssprint_r>
   13c82:	2800      	cmp	r0, #0
   13c84:	f47f ae29 	bne.w	138da <_svfprintf_r+0x8ca>
   13c88:	9a26      	ldr	r2, [sp, #152]	; 0x98
   13c8a:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   13c8e:	f7ff bb44 	b.w	1331a <_svfprintf_r+0x30a>
   13c92:	9b02      	ldr	r3, [sp, #8]
   13c94:	f013 0310 	ands.w	r3, r3, #16
   13c98:	f040 80c1 	bne.w	13e1e <_svfprintf_r+0xe0e>
   13c9c:	9a02      	ldr	r2, [sp, #8]
   13c9e:	f012 0240 	ands.w	r2, r2, #64	; 0x40
   13ca2:	f000 837a 	beq.w	1439a <_svfprintf_r+0x138a>
   13ca6:	9808      	ldr	r0, [sp, #32]
   13ca8:	f850 2b04 	ldr.w	r2, [r0], #4
   13cac:	9008      	str	r0, [sp, #32]
   13cae:	4619      	mov	r1, r3
   13cb0:	b292      	uxth	r2, r2
   13cb2:	2301      	movs	r3, #1
   13cb4:	e451      	b.n	1355a <_svfprintf_r+0x54a>
   13cb6:	f018 0310 	ands.w	r3, r8, #16
   13cba:	d155      	bne.n	13d68 <_svfprintf_r+0xd58>
   13cbc:	f018 0240 	ands.w	r2, r8, #64	; 0x40
   13cc0:	f000 835d 	beq.w	1437e <_svfprintf_r+0x136e>
   13cc4:	9808      	ldr	r0, [sp, #32]
   13cc6:	f850 2b04 	ldr.w	r2, [r0], #4
   13cca:	9008      	str	r0, [sp, #32]
   13ccc:	4619      	mov	r1, r3
   13cce:	b292      	uxth	r2, r2
   13cd0:	e4a8      	b.n	13624 <_svfprintf_r+0x614>
   13cd2:	4252      	negs	r2, r2
   13cd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   13cd8:	f8cd 8008 	str.w	r8, [sp, #8]
   13cdc:	202d      	movs	r0, #45	; 0x2d
   13cde:	2301      	movs	r3, #1
   13ce0:	e43c      	b.n	1355c <_svfprintf_r+0x54c>
   13ce2:	ee1b 1a10 	vmov	r1, s22
   13ce6:	aa24      	add	r2, sp, #144	; 0x90
   13ce8:	4658      	mov	r0, fp
   13cea:	f003 ffe1 	bl	17cb0 <__ssprint_r>
   13cee:	2800      	cmp	r0, #0
   13cf0:	f47f adf3 	bne.w	138da <_svfprintf_r+0x8ca>
   13cf4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   13cf8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   13cfc:	e616      	b.n	1392c <_svfprintf_r+0x91c>
   13cfe:	ee1b 1a10 	vmov	r1, s22
   13d02:	aa24      	add	r2, sp, #144	; 0x90
   13d04:	4658      	mov	r0, fp
   13d06:	f003 ffd3 	bl	17cb0 <__ssprint_r>
   13d0a:	2800      	cmp	r0, #0
   13d0c:	f47f ade5 	bne.w	138da <_svfprintf_r+0x8ca>
   13d10:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   13d14:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   13d18:	e5fb      	b.n	13912 <_svfprintf_r+0x902>
   13d1a:	f018 0f01 	tst.w	r8, #1
   13d1e:	f43f ab0f 	beq.w	13340 <_svfprintf_r+0x330>
   13d22:	e52a      	b.n	1377a <_svfprintf_r+0x76a>
   13d24:	9308      	str	r3, [sp, #32]
   13d26:	f899 3000 	ldrb.w	r3, [r9]
   13d2a:	f7ff b9cd 	b.w	130c8 <_svfprintf_r+0xb8>
   13d2e:	ac50      	add	r4, sp, #320	; 0x140
   13d30:	e4df      	b.n	136f2 <_svfprintf_r+0x6e2>
   13d32:	f418 7f00 	tst.w	r8, #512	; 0x200
   13d36:	f040 83db 	bne.w	144f0 <_svfprintf_r+0x14e0>
   13d3a:	f853 2b04 	ldr.w	r2, [r3], #4
   13d3e:	9308      	str	r3, [sp, #32]
   13d40:	17d1      	asrs	r1, r2, #31
   13d42:	460b      	mov	r3, r1
   13d44:	f7ff bbb6 	b.w	134b4 <_svfprintf_r+0x4a4>
   13d48:	9b08      	ldr	r3, [sp, #32]
   13d4a:	9804      	ldr	r0, [sp, #16]
   13d4c:	f853 1b04 	ldr.w	r1, [r3], #4
   13d50:	9308      	str	r3, [sp, #32]
   13d52:	17c2      	asrs	r2, r0, #31
   13d54:	e9c1 0200 	strd	r0, r2, [r1]
   13d58:	464c      	mov	r4, r9
   13d5a:	f7ff b98b 	b.w	13074 <_svfprintf_r+0x64>
   13d5e:	bf00      	nop
   13d60:	200052e4 	.word	0x200052e4
   13d64:	2000bb24 	.word	0x2000bb24
   13d68:	9b08      	ldr	r3, [sp, #32]
   13d6a:	f853 2b04 	ldr.w	r2, [r3], #4
   13d6e:	9308      	str	r3, [sp, #32]
   13d70:	e458      	b.n	13624 <_svfprintf_r+0x614>
   13d72:	eeb4 8b48 	vcmp.f64	d8, d8
   13d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13d7a:	f180 8694 	bvs.w	14aa6 <_svfprintf_r+0x1a96>
   13d7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13d80:	2b61      	cmp	r3, #97	; 0x61
   13d82:	f000 8552 	beq.w	1482a <_svfprintf_r+0x181a>
   13d86:	2b41      	cmp	r3, #65	; 0x41
   13d88:	f000 85c0 	beq.w	1490c <_svfprintf_r+0x18fc>
   13d8c:	9b03      	ldr	r3, [sp, #12]
   13d8e:	3301      	adds	r3, #1
   13d90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13d92:	f023 0520 	bic.w	r5, r3, #32
   13d96:	f000 8480 	beq.w	1469a <_svfprintf_r+0x168a>
   13d9a:	2d47      	cmp	r5, #71	; 0x47
   13d9c:	d104      	bne.n	13da8 <_svfprintf_r+0xd98>
   13d9e:	9b03      	ldr	r3, [sp, #12]
   13da0:	2b00      	cmp	r3, #0
   13da2:	bf08      	it	eq
   13da4:	2301      	moveq	r3, #1
   13da6:	9303      	str	r3, [sp, #12]
   13da8:	ee18 3a90 	vmov	r3, s17
   13dac:	2b00      	cmp	r3, #0
   13dae:	f448 7280 	orr.w	r2, r8, #256	; 0x100
   13db2:	4646      	mov	r6, r8
   13db4:	f2c0 8618 	blt.w	149e8 <_svfprintf_r+0x19d8>
   13db8:	eeb0 ab48 	vmov.f64	d10, d8
   13dbc:	2300      	movs	r3, #0
   13dbe:	4690      	mov	r8, r2
   13dc0:	9309      	str	r3, [sp, #36]	; 0x24
   13dc2:	9307      	str	r3, [sp, #28]
   13dc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13dc6:	3b41      	subs	r3, #65	; 0x41
   13dc8:	2b25      	cmp	r3, #37	; 0x25
   13dca:	f200 8398 	bhi.w	144fe <_svfprintf_r+0x14ee>
   13dce:	e8df f013 	tbh	[pc, r3, lsl #1]
   13dd2:	046f      	.short	0x046f
   13dd4:	03960396 	.word	0x03960396
   13dd8:	04680396 	.word	0x04680396
   13ddc:	0396046c 	.word	0x0396046c
   13de0:	03960396 	.word	0x03960396
   13de4:	03960396 	.word	0x03960396
   13de8:	03960396 	.word	0x03960396
   13dec:	03960396 	.word	0x03960396
   13df0:	03960396 	.word	0x03960396
   13df4:	03960396 	.word	0x03960396
   13df8:	03960396 	.word	0x03960396
   13dfc:	03960396 	.word	0x03960396
   13e00:	03960396 	.word	0x03960396
   13e04:	03960396 	.word	0x03960396
   13e08:	03960396 	.word	0x03960396
   13e0c:	03960396 	.word	0x03960396
   13e10:	03960396 	.word	0x03960396
   13e14:	03960396 	.word	0x03960396
   13e18:	04680396 	.word	0x04680396
   13e1c:	046c      	.short	0x046c
   13e1e:	9b08      	ldr	r3, [sp, #32]
   13e20:	f853 2b04 	ldr.w	r2, [r3], #4
   13e24:	9308      	str	r3, [sp, #32]
   13e26:	2301      	movs	r3, #1
   13e28:	f7ff bb97 	b.w	1355a <_svfprintf_r+0x54a>
   13e2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   13e2e:	2b00      	cmp	r3, #0
   13e30:	f43f a9cf 	beq.w	131d2 <_svfprintf_r+0x1c2>
   13e34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   13e36:	781b      	ldrb	r3, [r3, #0]
   13e38:	2b00      	cmp	r3, #0
   13e3a:	f43f a9ca 	beq.w	131d2 <_svfprintf_r+0x1c2>
   13e3e:	f899 3000 	ldrb.w	r3, [r9]
   13e42:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
   13e46:	f7ff b93f 	b.w	130c8 <_svfprintf_r+0xb8>
   13e4a:	930b      	str	r3, [sp, #44]	; 0x2c
   13e4c:	f8cd 8008 	str.w	r8, [sp, #8]
   13e50:	f7ff bbf1 	b.w	13636 <_svfprintf_r+0x626>
   13e54:	930b      	str	r3, [sp, #44]	; 0x2c
   13e56:	4b9a      	ldr	r3, [pc, #616]	; (140c0 <_svfprintf_r+0x10b0>)
   13e58:	9311      	str	r3, [sp, #68]	; 0x44
   13e5a:	f018 0120 	ands.w	r1, r8, #32
   13e5e:	f000 8105 	beq.w	1406c <_svfprintf_r+0x105c>
   13e62:	9b08      	ldr	r3, [sp, #32]
   13e64:	3307      	adds	r3, #7
   13e66:	f023 0307 	bic.w	r3, r3, #7
   13e6a:	6859      	ldr	r1, [r3, #4]
   13e6c:	f853 2b08 	ldr.w	r2, [r3], #8
   13e70:	9308      	str	r3, [sp, #32]
   13e72:	f018 0f01 	tst.w	r8, #1
   13e76:	d00a      	beq.n	13e8e <_svfprintf_r+0xe7e>
   13e78:	ea52 0301 	orrs.w	r3, r2, r1
   13e7c:	d007      	beq.n	13e8e <_svfprintf_r+0xe7e>
   13e7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13e80:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
   13e84:	2330      	movs	r3, #48	; 0x30
   13e86:	f048 0802 	orr.w	r8, r8, #2
   13e8a:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
   13e8e:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
   13e92:	9302      	str	r3, [sp, #8]
   13e94:	2302      	movs	r3, #2
   13e96:	f7ff bb60 	b.w	1355a <_svfprintf_r+0x54a>
   13e9a:	930b      	str	r3, [sp, #44]	; 0x2c
   13e9c:	f7ff bbb6 	b.w	1360c <_svfprintf_r+0x5fc>
   13ea0:	930b      	str	r3, [sp, #44]	; 0x2c
   13ea2:	4b88      	ldr	r3, [pc, #544]	; (140c4 <_svfprintf_r+0x10b4>)
   13ea4:	9311      	str	r3, [sp, #68]	; 0x44
   13ea6:	e7d8      	b.n	13e5a <_svfprintf_r+0xe4a>
   13ea8:	9b08      	ldr	r3, [sp, #32]
   13eaa:	2101      	movs	r1, #1
   13eac:	f853 2b04 	ldr.w	r2, [r3], #4
   13eb0:	9102      	str	r1, [sp, #8]
   13eb2:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
   13eb6:	9308      	str	r3, [sp, #32]
   13eb8:	9105      	str	r1, [sp, #20]
   13eba:	ac37      	add	r4, sp, #220	; 0xdc
   13ebc:	f7ff baaf 	b.w	1341e <_svfprintf_r+0x40e>
   13ec0:	ee1b 1a10 	vmov	r1, s22
   13ec4:	aa24      	add	r2, sp, #144	; 0x90
   13ec6:	4658      	mov	r0, fp
   13ec8:	f003 fef2 	bl	17cb0 <__ssprint_r>
   13ecc:	2800      	cmp	r0, #0
   13ece:	f47f ad04 	bne.w	138da <_svfprintf_r+0x8ca>
   13ed2:	9a26      	ldr	r2, [sp, #152]	; 0x98
   13ed4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   13ed8:	e45d      	b.n	13796 <_svfprintf_r+0x786>
   13eda:	9b03      	ldr	r3, [sp, #12]
   13edc:	9407      	str	r4, [sp, #28]
   13ede:	2b06      	cmp	r3, #6
   13ee0:	4622      	mov	r2, r4
   13ee2:	bf28      	it	cs
   13ee4:	2306      	movcs	r3, #6
   13ee6:	9403      	str	r4, [sp, #12]
   13ee8:	4621      	mov	r1, r4
   13eea:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
   13eee:	4c76      	ldr	r4, [pc, #472]	; (140c8 <_svfprintf_r+0x10b8>)
   13ef0:	9302      	str	r3, [sp, #8]
   13ef2:	9305      	str	r3, [sp, #20]
   13ef4:	920f      	str	r2, [sp, #60]	; 0x3c
   13ef6:	f7ff ba6c 	b.w	133d2 <_svfprintf_r+0x3c2>
   13efa:	2140      	movs	r1, #64	; 0x40
   13efc:	4658      	mov	r0, fp
   13efe:	f7fb f8fd 	bl	f0fc <_malloc_r>
   13f02:	6020      	str	r0, [r4, #0]
   13f04:	6120      	str	r0, [r4, #16]
   13f06:	2800      	cmp	r0, #0
   13f08:	f000 860f 	beq.w	14b2a <_svfprintf_r+0x1b1a>
   13f0c:	2340      	movs	r3, #64	; 0x40
   13f0e:	6163      	str	r3, [r4, #20]
   13f10:	f7ff b89e 	b.w	13050 <_svfprintf_r+0x40>
   13f14:	2d10      	cmp	r5, #16
   13f16:	9b25      	ldr	r3, [sp, #148]	; 0x94
   13f18:	f340 825d 	ble.w	143d6 <_svfprintf_r+0x13c6>
   13f1c:	4651      	mov	r1, sl
   13f1e:	2610      	movs	r6, #16
   13f20:	ee1b aa10 	vmov	sl, s22
   13f24:	e004      	b.n	13f30 <_svfprintf_r+0xf20>
   13f26:	3108      	adds	r1, #8
   13f28:	3d10      	subs	r5, #16
   13f2a:	2d10      	cmp	r5, #16
   13f2c:	f340 8252 	ble.w	143d4 <_svfprintf_r+0x13c4>
   13f30:	3301      	adds	r3, #1
   13f32:	4866      	ldr	r0, [pc, #408]	; (140cc <_svfprintf_r+0x10bc>)
   13f34:	3210      	adds	r2, #16
   13f36:	2b07      	cmp	r3, #7
   13f38:	e9c1 0600 	strd	r0, r6, [r1]
   13f3c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   13f40:	ddf1      	ble.n	13f26 <_svfprintf_r+0xf16>
   13f42:	aa24      	add	r2, sp, #144	; 0x90
   13f44:	4651      	mov	r1, sl
   13f46:	4658      	mov	r0, fp
   13f48:	f003 feb2 	bl	17cb0 <__ssprint_r>
   13f4c:	2800      	cmp	r0, #0
   13f4e:	f47f acc4 	bne.w	138da <_svfprintf_r+0x8ca>
   13f52:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   13f56:	a927      	add	r1, sp, #156	; 0x9c
   13f58:	e7e6      	b.n	13f28 <_svfprintf_r+0xf18>
   13f5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   13f5c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   13f60:	18e3      	adds	r3, r4, r3
   13f62:	9303      	str	r3, [sp, #12]
   13f64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13f66:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   13f6a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   13f6c:	9d05      	ldr	r5, [sp, #20]
   13f6e:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
   13f72:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   13f76:	940b      	str	r4, [sp, #44]	; 0x2c
   13f78:	ee1b 1a10 	vmov	r1, s22
   13f7c:	4650      	mov	r0, sl
   13f7e:	2b00      	cmp	r3, #0
   13f80:	d034      	beq.n	13fec <_svfprintf_r+0xfdc>
   13f82:	f1b8 0f00 	cmp.w	r8, #0
   13f86:	d135      	bne.n	13ff4 <_svfprintf_r+0xfe4>
   13f88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13f8a:	3b01      	subs	r3, #1
   13f8c:	3e01      	subs	r6, #1
   13f8e:	930d      	str	r3, [sp, #52]	; 0x34
   13f90:	9b15      	ldr	r3, [sp, #84]	; 0x54
   13f92:	e9c0 3900 	strd	r3, r9, [r0]
   13f96:	9b25      	ldr	r3, [sp, #148]	; 0x94
   13f98:	3301      	adds	r3, #1
   13f9a:	444a      	add	r2, r9
   13f9c:	2b07      	cmp	r3, #7
   13f9e:	9226      	str	r2, [sp, #152]	; 0x98
   13fa0:	9325      	str	r3, [sp, #148]	; 0x94
   13fa2:	dc6c      	bgt.n	1407e <_svfprintf_r+0x106e>
   13fa4:	3008      	adds	r0, #8
   13fa6:	9b03      	ldr	r3, [sp, #12]
   13fa8:	f896 c000 	ldrb.w	ip, [r6]
   13fac:	1b5b      	subs	r3, r3, r5
   13fae:	4563      	cmp	r3, ip
   13fb0:	bfa8      	it	ge
   13fb2:	4663      	movge	r3, ip
   13fb4:	2b00      	cmp	r3, #0
   13fb6:	469a      	mov	sl, r3
   13fb8:	dd0c      	ble.n	13fd4 <_svfprintf_r+0xfc4>
   13fba:	9c25      	ldr	r4, [sp, #148]	; 0x94
   13fbc:	3401      	adds	r4, #1
   13fbe:	441a      	add	r2, r3
   13fc0:	2c07      	cmp	r4, #7
   13fc2:	e9c0 5300 	strd	r5, r3, [r0]
   13fc6:	9226      	str	r2, [sp, #152]	; 0x98
   13fc8:	9425      	str	r4, [sp, #148]	; 0x94
   13fca:	f300 8177 	bgt.w	142bc <_svfprintf_r+0x12ac>
   13fce:	f896 c000 	ldrb.w	ip, [r6]
   13fd2:	3008      	adds	r0, #8
   13fd4:	f1ba 0f00 	cmp.w	sl, #0
   13fd8:	bfac      	ite	ge
   13fda:	ebac 040a 	subge.w	r4, ip, sl
   13fde:	4664      	movlt	r4, ip
   13fe0:	2c00      	cmp	r4, #0
   13fe2:	dc0a      	bgt.n	13ffa <_svfprintf_r+0xfea>
   13fe4:	4465      	add	r5, ip
   13fe6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13fe8:	2b00      	cmp	r3, #0
   13fea:	d1ca      	bne.n	13f82 <_svfprintf_r+0xf72>
   13fec:	f1b8 0f00 	cmp.w	r8, #0
   13ff0:	f000 83ac 	beq.w	1474c <_svfprintf_r+0x173c>
   13ff4:	f108 38ff 	add.w	r8, r8, #4294967295
   13ff8:	e7ca      	b.n	13f90 <_svfprintf_r+0xf80>
   13ffa:	2c10      	cmp	r4, #16
   13ffc:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
   14000:	dd24      	ble.n	1404c <_svfprintf_r+0x103c>
   14002:	9505      	str	r5, [sp, #20]
   14004:	f04f 0a10 	mov.w	sl, #16
   14008:	4663      	mov	r3, ip
   1400a:	460d      	mov	r5, r1
   1400c:	e004      	b.n	14018 <_svfprintf_r+0x1008>
   1400e:	3c10      	subs	r4, #16
   14010:	2c10      	cmp	r4, #16
   14012:	f100 0008 	add.w	r0, r0, #8
   14016:	dd16      	ble.n	14046 <_svfprintf_r+0x1036>
   14018:	3301      	adds	r3, #1
   1401a:	492c      	ldr	r1, [pc, #176]	; (140cc <_svfprintf_r+0x10bc>)
   1401c:	3210      	adds	r2, #16
   1401e:	2b07      	cmp	r3, #7
   14020:	e9c0 1a00 	strd	r1, sl, [r0]
   14024:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   14028:	ddf1      	ble.n	1400e <_svfprintf_r+0xffe>
   1402a:	aa24      	add	r2, sp, #144	; 0x90
   1402c:	4629      	mov	r1, r5
   1402e:	4658      	mov	r0, fp
   14030:	f003 fe3e 	bl	17cb0 <__ssprint_r>
   14034:	2800      	cmp	r0, #0
   14036:	f47f ac50 	bne.w	138da <_svfprintf_r+0x8ca>
   1403a:	3c10      	subs	r4, #16
   1403c:	2c10      	cmp	r4, #16
   1403e:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   14042:	a827      	add	r0, sp, #156	; 0x9c
   14044:	dce8      	bgt.n	14018 <_svfprintf_r+0x1008>
   14046:	4629      	mov	r1, r5
   14048:	9d05      	ldr	r5, [sp, #20]
   1404a:	469c      	mov	ip, r3
   1404c:	f10c 0301 	add.w	r3, ip, #1
   14050:	4422      	add	r2, r4
   14052:	6044      	str	r4, [r0, #4]
   14054:	2b07      	cmp	r3, #7
   14056:	4c1d      	ldr	r4, [pc, #116]	; (140cc <_svfprintf_r+0x10bc>)
   14058:	6004      	str	r4, [r0, #0]
   1405a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1405e:	f300 83c6 	bgt.w	147ee <_svfprintf_r+0x17de>
   14062:	f896 c000 	ldrb.w	ip, [r6]
   14066:	3008      	adds	r0, #8
   14068:	4465      	add	r5, ip
   1406a:	e7bc      	b.n	13fe6 <_svfprintf_r+0xfd6>
   1406c:	f018 0310 	ands.w	r3, r8, #16
   14070:	f000 80c2 	beq.w	141f8 <_svfprintf_r+0x11e8>
   14074:	9b08      	ldr	r3, [sp, #32]
   14076:	f853 2b04 	ldr.w	r2, [r3], #4
   1407a:	9308      	str	r3, [sp, #32]
   1407c:	e6f9      	b.n	13e72 <_svfprintf_r+0xe62>
   1407e:	aa24      	add	r2, sp, #144	; 0x90
   14080:	4658      	mov	r0, fp
   14082:	9105      	str	r1, [sp, #20]
   14084:	f003 fe14 	bl	17cb0 <__ssprint_r>
   14088:	2800      	cmp	r0, #0
   1408a:	f47f ac26 	bne.w	138da <_svfprintf_r+0x8ca>
   1408e:	9a26      	ldr	r2, [sp, #152]	; 0x98
   14090:	9905      	ldr	r1, [sp, #20]
   14092:	a827      	add	r0, sp, #156	; 0x9c
   14094:	e787      	b.n	13fa6 <_svfprintf_r+0xf96>
   14096:	9802      	ldr	r0, [sp, #8]
   14098:	f8cd a01c 	str.w	sl, [sp, #28]
   1409c:	ac50      	add	r4, sp, #320	; 0x140
   1409e:	f400 6080 	and.w	r0, r0, #1024	; 0x400
   140a2:	2500      	movs	r5, #0
   140a4:	ee0a ba10 	vmov	s20, fp
   140a8:	4b09      	ldr	r3, [pc, #36]	; (140d0 <_svfprintf_r+0x10c0>)
   140aa:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   140ae:	f8cd 9014 	str.w	r9, [sp, #20]
   140b2:	46a3      	mov	fp, r4
   140b4:	f04f 0805 	mov.w	r8, #5
   140b8:	46ac      	mov	ip, r5
   140ba:	4604      	mov	r4, r0
   140bc:	e010      	b.n	140e0 <_svfprintf_r+0x10d0>
   140be:	bf00      	nop
   140c0:	20003838 	.word	0x20003838
   140c4:	2000384c 	.word	0x2000384c
   140c8:	20003860 	.word	0x20003860
   140cc:	2000bb24 	.word	0x2000bb24
   140d0:	cccccccd 	.word	0xcccccccd
   140d4:	2a0a      	cmp	r2, #10
   140d6:	f171 0100 	sbcs.w	r1, r1, #0
   140da:	d336      	bcc.n	1414a <_svfprintf_r+0x113a>
   140dc:	464a      	mov	r2, r9
   140de:	4631      	mov	r1, r6
   140e0:	1850      	adds	r0, r2, r1
   140e2:	f140 0000 	adc.w	r0, r0, #0
   140e6:	fba3 5600 	umull	r5, r6, r3, r0
   140ea:	f026 0503 	bic.w	r5, r6, #3
   140ee:	eb05 0596 	add.w	r5, r5, r6, lsr #2
   140f2:	1b40      	subs	r0, r0, r5
   140f4:	1a15      	subs	r5, r2, r0
   140f6:	f04f 36cc 	mov.w	r6, #3435973836	; 0xcccccccc
   140fa:	f161 0e00 	sbc.w	lr, r1, #0
   140fe:	fb06 f605 	mul.w	r6, r6, r5
   14102:	fba5 9503 	umull	r9, r5, r5, r3
   14106:	fb03 660e 	mla	r6, r3, lr, r6
   1410a:	f009 0e01 	and.w	lr, r9, #1
   1410e:	442e      	add	r6, r5
   14110:	fbae 5e08 	umull	r5, lr, lr, r8
   14114:	182d      	adds	r5, r5, r0
   14116:	ea4f 0959 	mov.w	r9, r9, lsr #1
   1411a:	3530      	adds	r5, #48	; 0x30
   1411c:	f80b 5c01 	strb.w	r5, [fp, #-1]
   14120:	ea49 79c6 	orr.w	r9, r9, r6, lsl #31
   14124:	f10c 0c01 	add.w	ip, ip, #1
   14128:	f10b 3bff 	add.w	fp, fp, #4294967295
   1412c:	0876      	lsrs	r6, r6, #1
   1412e:	2c00      	cmp	r4, #0
   14130:	d0d0      	beq.n	140d4 <_svfprintf_r+0x10c4>
   14132:	f89a 0000 	ldrb.w	r0, [sl]
   14136:	4584      	cmp	ip, r0
   14138:	d1cc      	bne.n	140d4 <_svfprintf_r+0x10c4>
   1413a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   1413e:	d0c9      	beq.n	140d4 <_svfprintf_r+0x10c4>
   14140:	2a0a      	cmp	r2, #10
   14142:	f171 0100 	sbcs.w	r1, r1, #0
   14146:	f080 818f 	bcs.w	14468 <_svfprintf_r+0x1458>
   1414a:	465c      	mov	r4, fp
   1414c:	ab50      	add	r3, sp, #320	; 0x140
   1414e:	1b1b      	subs	r3, r3, r4
   14150:	f8dd 9014 	ldr.w	r9, [sp, #20]
   14154:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
   14158:	ee1a ba10 	vmov	fp, s20
   1415c:	f8dd a01c 	ldr.w	sl, [sp, #28]
   14160:	f8dd 8008 	ldr.w	r8, [sp, #8]
   14164:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
   14168:	9305      	str	r3, [sp, #20]
   1416a:	f7ff bac2 	b.w	136f2 <_svfprintf_r+0x6e2>
   1416e:	ee1b 1a10 	vmov	r1, s22
   14172:	aa24      	add	r2, sp, #144	; 0x90
   14174:	4658      	mov	r0, fp
   14176:	f003 fd9b 	bl	17cb0 <__ssprint_r>
   1417a:	2800      	cmp	r0, #0
   1417c:	f47f abad 	bne.w	138da <_svfprintf_r+0x8ca>
   14180:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   14184:	9a26      	ldr	r2, [sp, #152]	; 0x98
   14186:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1418a:	f7ff b896 	b.w	132ba <_svfprintf_r+0x2aa>
   1418e:	9b25      	ldr	r3, [sp, #148]	; 0x94
   14190:	48be      	ldr	r0, [pc, #760]	; (1448c <_svfprintf_r+0x147c>)
   14192:	f8ca 0000 	str.w	r0, [sl]
   14196:	3301      	adds	r3, #1
   14198:	3201      	adds	r2, #1
   1419a:	2001      	movs	r0, #1
   1419c:	2b07      	cmp	r3, #7
   1419e:	9226      	str	r2, [sp, #152]	; 0x98
   141a0:	9325      	str	r3, [sp, #148]	; 0x94
   141a2:	f8ca 0004 	str.w	r0, [sl, #4]
   141a6:	f300 8177 	bgt.w	14498 <_svfprintf_r+0x1488>
   141aa:	f10a 0a08 	add.w	sl, sl, #8
   141ae:	2900      	cmp	r1, #0
   141b0:	f040 80af 	bne.w	14312 <_svfprintf_r+0x1302>
   141b4:	990e      	ldr	r1, [sp, #56]	; 0x38
   141b6:	f008 0301 	and.w	r3, r8, #1
   141ba:	430b      	orrs	r3, r1
   141bc:	f43f a8c0 	beq.w	13340 <_svfprintf_r+0x330>
   141c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   141c2:	9912      	ldr	r1, [sp, #72]	; 0x48
   141c4:	441a      	add	r2, r3
   141c6:	e9ca 1300 	strd	r1, r3, [sl]
   141ca:	9b25      	ldr	r3, [sp, #148]	; 0x94
   141cc:	9226      	str	r2, [sp, #152]	; 0x98
   141ce:	3301      	adds	r3, #1
   141d0:	2b07      	cmp	r3, #7
   141d2:	9325      	str	r3, [sp, #148]	; 0x94
   141d4:	f300 8252 	bgt.w	1467c <_svfprintf_r+0x166c>
   141d8:	f10a 0a08 	add.w	sl, sl, #8
   141dc:	990e      	ldr	r1, [sp, #56]	; 0x38
   141de:	f8ca 4000 	str.w	r4, [sl]
   141e2:	3301      	adds	r3, #1
   141e4:	440a      	add	r2, r1
   141e6:	2b07      	cmp	r3, #7
   141e8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   141ec:	f8ca 1004 	str.w	r1, [sl, #4]
   141f0:	f77f a8a4 	ble.w	1333c <_svfprintf_r+0x32c>
   141f4:	f7ff bbbd 	b.w	13972 <_svfprintf_r+0x962>
   141f8:	f018 0240 	ands.w	r2, r8, #64	; 0x40
   141fc:	f000 80dd 	beq.w	143ba <_svfprintf_r+0x13aa>
   14200:	9808      	ldr	r0, [sp, #32]
   14202:	f850 2b04 	ldr.w	r2, [r0], #4
   14206:	9008      	str	r0, [sp, #32]
   14208:	4619      	mov	r1, r3
   1420a:	b292      	uxth	r2, r2
   1420c:	e631      	b.n	13e72 <_svfprintf_r+0xe62>
   1420e:	ee1b 1a10 	vmov	r1, s22
   14212:	aa24      	add	r2, sp, #144	; 0x90
   14214:	4658      	mov	r0, fp
   14216:	f003 fd4b 	bl	17cb0 <__ssprint_r>
   1421a:	2800      	cmp	r0, #0
   1421c:	f47f ab5d 	bne.w	138da <_svfprintf_r+0x8ca>
   14220:	9a26      	ldr	r2, [sp, #152]	; 0x98
   14222:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   14226:	f7ff baa3 	b.w	13770 <_svfprintf_r+0x760>
   1422a:	ae22      	add	r6, sp, #136	; 0x88
   1422c:	2208      	movs	r2, #8
   1422e:	2100      	movs	r1, #0
   14230:	4630      	mov	r0, r6
   14232:	941d      	str	r4, [sp, #116]	; 0x74
   14234:	f7fc febe 	bl	10fb4 <memset>
   14238:	9b03      	ldr	r3, [sp, #12]
   1423a:	1c5a      	adds	r2, r3, #1
   1423c:	f000 80db 	beq.w	143f6 <_svfprintf_r+0x13e6>
   14240:	2500      	movs	r5, #0
   14242:	f8cd 9008 	str.w	r9, [sp, #8]
   14246:	f8cd 801c 	str.w	r8, [sp, #28]
   1424a:	4699      	mov	r9, r3
   1424c:	46a8      	mov	r8, r5
   1424e:	e00c      	b.n	1426a <_svfprintf_r+0x125a>
   14250:	a937      	add	r1, sp, #220	; 0xdc
   14252:	4658      	mov	r0, fp
   14254:	f003 fc02 	bl	17a5c <_wcrtomb_r>
   14258:	1c43      	adds	r3, r0, #1
   1425a:	4440      	add	r0, r8
   1425c:	f000 83c8 	beq.w	149f0 <_svfprintf_r+0x19e0>
   14260:	4548      	cmp	r0, r9
   14262:	dc08      	bgt.n	14276 <_svfprintf_r+0x1266>
   14264:	f000 8418 	beq.w	14a98 <_svfprintf_r+0x1a88>
   14268:	4680      	mov	r8, r0
   1426a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   1426c:	5952      	ldr	r2, [r2, r5]
   1426e:	4633      	mov	r3, r6
   14270:	3504      	adds	r5, #4
   14272:	2a00      	cmp	r2, #0
   14274:	d1ec      	bne.n	14250 <_svfprintf_r+0x1240>
   14276:	f8cd 8014 	str.w	r8, [sp, #20]
   1427a:	f8dd 9008 	ldr.w	r9, [sp, #8]
   1427e:	f8dd 801c 	ldr.w	r8, [sp, #28]
   14282:	e0c5      	b.n	14410 <_svfprintf_r+0x1400>
   14284:	3301      	adds	r3, #1
   14286:	4982      	ldr	r1, [pc, #520]	; (14490 <_svfprintf_r+0x1480>)
   14288:	f8ca 4004 	str.w	r4, [sl, #4]
   1428c:	4422      	add	r2, r4
   1428e:	2b07      	cmp	r3, #7
   14290:	f8ca 1000 	str.w	r1, [sl]
   14294:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   14298:	f77f a850 	ble.w	1333c <_svfprintf_r+0x32c>
   1429c:	f7ff bb69 	b.w	13972 <_svfprintf_r+0x962>
   142a0:	ee1b 1a10 	vmov	r1, s22
   142a4:	aa24      	add	r2, sp, #144	; 0x90
   142a6:	4658      	mov	r0, fp
   142a8:	f003 fd02 	bl	17cb0 <__ssprint_r>
   142ac:	2800      	cmp	r0, #0
   142ae:	f47f ab14 	bne.w	138da <_svfprintf_r+0x8ca>
   142b2:	9a26      	ldr	r2, [sp, #152]	; 0x98
   142b4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   142b8:	f7ff b829 	b.w	1330e <_svfprintf_r+0x2fe>
   142bc:	aa24      	add	r2, sp, #144	; 0x90
   142be:	4658      	mov	r0, fp
   142c0:	9105      	str	r1, [sp, #20]
   142c2:	f003 fcf5 	bl	17cb0 <__ssprint_r>
   142c6:	2800      	cmp	r0, #0
   142c8:	f47f ab07 	bne.w	138da <_svfprintf_r+0x8ca>
   142cc:	f896 c000 	ldrb.w	ip, [r6]
   142d0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   142d2:	9905      	ldr	r1, [sp, #20]
   142d4:	a827      	add	r0, sp, #156	; 0x9c
   142d6:	e67d      	b.n	13fd4 <_svfprintf_r+0xfc4>
   142d8:	2b01      	cmp	r3, #1
   142da:	f8cd 8008 	str.w	r8, [sp, #8]
   142de:	f47f a9f3 	bne.w	136c8 <_svfprintf_r+0x6b8>
   142e2:	f7ff bb93 	b.w	13a0c <_svfprintf_r+0x9fc>
   142e6:	9b08      	ldr	r3, [sp, #32]
   142e8:	9904      	ldr	r1, [sp, #16]
   142ea:	f853 2b04 	ldr.w	r2, [r3], #4
   142ee:	464c      	mov	r4, r9
   142f0:	6011      	str	r1, [r2, #0]
   142f2:	9308      	str	r3, [sp, #32]
   142f4:	f7fe bebe 	b.w	13074 <_svfprintf_r+0x64>
   142f8:	3301      	adds	r3, #1
   142fa:	4965      	ldr	r1, [pc, #404]	; (14490 <_svfprintf_r+0x1480>)
   142fc:	f8ca 4004 	str.w	r4, [sl, #4]
   14300:	4422      	add	r2, r4
   14302:	2b07      	cmp	r3, #7
   14304:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   14308:	f8ca 1000 	str.w	r1, [sl]
   1430c:	f77f ab22 	ble.w	13954 <_svfprintf_r+0x944>
   14310:	e47b      	b.n	13c0a <_svfprintf_r+0xbfa>
   14312:	9b10      	ldr	r3, [sp, #64]	; 0x40
   14314:	9812      	ldr	r0, [sp, #72]	; 0x48
   14316:	441a      	add	r2, r3
   14318:	e9ca 0300 	strd	r0, r3, [sl]
   1431c:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1431e:	9226      	str	r2, [sp, #152]	; 0x98
   14320:	3301      	adds	r3, #1
   14322:	2b07      	cmp	r3, #7
   14324:	9325      	str	r3, [sp, #148]	; 0x94
   14326:	f300 81a9 	bgt.w	1467c <_svfprintf_r+0x166c>
   1432a:	f10a 0a08 	add.w	sl, sl, #8
   1432e:	2900      	cmp	r1, #0
   14330:	f6bf af54 	bge.w	141dc <_svfprintf_r+0x11cc>
   14334:	424d      	negs	r5, r1
   14336:	3110      	adds	r1, #16
   14338:	f280 830f 	bge.w	1495a <_svfprintf_r+0x194a>
   1433c:	ee1b 1a10 	vmov	r1, s22
   14340:	2610      	movs	r6, #16
   14342:	e005      	b.n	14350 <_svfprintf_r+0x1340>
   14344:	f10a 0a08 	add.w	sl, sl, #8
   14348:	3d10      	subs	r5, #16
   1434a:	2d10      	cmp	r5, #16
   1434c:	f340 8305 	ble.w	1495a <_svfprintf_r+0x194a>
   14350:	3301      	adds	r3, #1
   14352:	484f      	ldr	r0, [pc, #316]	; (14490 <_svfprintf_r+0x1480>)
   14354:	3210      	adds	r2, #16
   14356:	2b07      	cmp	r3, #7
   14358:	e9ca 0600 	strd	r0, r6, [sl]
   1435c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   14360:	ddf0      	ble.n	14344 <_svfprintf_r+0x1334>
   14362:	aa24      	add	r2, sp, #144	; 0x90
   14364:	4658      	mov	r0, fp
   14366:	9103      	str	r1, [sp, #12]
   14368:	f003 fca2 	bl	17cb0 <__ssprint_r>
   1436c:	2800      	cmp	r0, #0
   1436e:	f47f aab4 	bne.w	138da <_svfprintf_r+0x8ca>
   14372:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   14376:	9903      	ldr	r1, [sp, #12]
   14378:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1437c:	e7e4      	b.n	14348 <_svfprintf_r+0x1338>
   1437e:	9b08      	ldr	r3, [sp, #32]
   14380:	f418 7100 	ands.w	r1, r8, #512	; 0x200
   14384:	bf1a      	itte	ne
   14386:	4611      	movne	r1, r2
   14388:	f853 2b04 	ldrne.w	r2, [r3], #4
   1438c:	f853 2b04 	ldreq.w	r2, [r3], #4
   14390:	9308      	str	r3, [sp, #32]
   14392:	bf18      	it	ne
   14394:	b2d2      	uxtbne	r2, r2
   14396:	f7ff b945 	b.w	13624 <_svfprintf_r+0x614>
   1439a:	9b02      	ldr	r3, [sp, #8]
   1439c:	f413 7100 	ands.w	r1, r3, #512	; 0x200
   143a0:	9b08      	ldr	r3, [sp, #32]
   143a2:	bf1a      	itte	ne
   143a4:	4611      	movne	r1, r2
   143a6:	f853 2b04 	ldrne.w	r2, [r3], #4
   143aa:	f853 2b04 	ldreq.w	r2, [r3], #4
   143ae:	9308      	str	r3, [sp, #32]
   143b0:	bf18      	it	ne
   143b2:	b2d2      	uxtbne	r2, r2
   143b4:	2301      	movs	r3, #1
   143b6:	f7ff b8d0 	b.w	1355a <_svfprintf_r+0x54a>
   143ba:	9b08      	ldr	r3, [sp, #32]
   143bc:	f418 7100 	ands.w	r1, r8, #512	; 0x200
   143c0:	bf1a      	itte	ne
   143c2:	4611      	movne	r1, r2
   143c4:	f853 2b04 	ldrne.w	r2, [r3], #4
   143c8:	f853 2b04 	ldreq.w	r2, [r3], #4
   143cc:	9308      	str	r3, [sp, #32]
   143ce:	bf18      	it	ne
   143d0:	b2d2      	uxtbne	r2, r2
   143d2:	e54e      	b.n	13e72 <_svfprintf_r+0xe62>
   143d4:	468a      	mov	sl, r1
   143d6:	3301      	adds	r3, #1
   143d8:	492d      	ldr	r1, [pc, #180]	; (14490 <_svfprintf_r+0x1480>)
   143da:	f8ca 5004 	str.w	r5, [sl, #4]
   143de:	442a      	add	r2, r5
   143e0:	2b07      	cmp	r3, #7
   143e2:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   143e6:	f8ca 1000 	str.w	r1, [sl]
   143ea:	f300 8139 	bgt.w	14660 <_svfprintf_r+0x1650>
   143ee:	f10a 0a08 	add.w	sl, sl, #8
   143f2:	f7ff bb8c 	b.w	13b0e <_svfprintf_r+0xafe>
   143f6:	2300      	movs	r3, #0
   143f8:	4619      	mov	r1, r3
   143fa:	9600      	str	r6, [sp, #0]
   143fc:	aa1d      	add	r2, sp, #116	; 0x74
   143fe:	4658      	mov	r0, fp
   14400:	f003 fb52 	bl	17aa8 <_wcsrtombs_r>
   14404:	4603      	mov	r3, r0
   14406:	3301      	adds	r3, #1
   14408:	9005      	str	r0, [sp, #20]
   1440a:	f000 82f1 	beq.w	149f0 <_svfprintf_r+0x19e0>
   1440e:	941d      	str	r4, [sp, #116]	; 0x74
   14410:	9b05      	ldr	r3, [sp, #20]
   14412:	2b00      	cmp	r3, #0
   14414:	d04e      	beq.n	144b4 <_svfprintf_r+0x14a4>
   14416:	2b63      	cmp	r3, #99	; 0x63
   14418:	f300 8118 	bgt.w	1464c <_svfprintf_r+0x163c>
   1441c:	2300      	movs	r3, #0
   1441e:	9307      	str	r3, [sp, #28]
   14420:	ac37      	add	r4, sp, #220	; 0xdc
   14422:	2208      	movs	r2, #8
   14424:	2100      	movs	r1, #0
   14426:	4630      	mov	r0, r6
   14428:	f7fc fdc4 	bl	10fb4 <memset>
   1442c:	9d05      	ldr	r5, [sp, #20]
   1442e:	9600      	str	r6, [sp, #0]
   14430:	462b      	mov	r3, r5
   14432:	aa1d      	add	r2, sp, #116	; 0x74
   14434:	4621      	mov	r1, r4
   14436:	4658      	mov	r0, fp
   14438:	f003 fb36 	bl	17aa8 <_wcsrtombs_r>
   1443c:	4285      	cmp	r5, r0
   1443e:	f040 837c 	bne.w	14b3a <_svfprintf_r+0x1b2a>
   14442:	9a05      	ldr	r2, [sp, #20]
   14444:	2300      	movs	r3, #0
   14446:	54a3      	strb	r3, [r4, r2]
   14448:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   1444c:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   14450:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   14454:	9303      	str	r3, [sp, #12]
   14456:	9202      	str	r2, [sp, #8]
   14458:	930f      	str	r3, [sp, #60]	; 0x3c
   1445a:	f7fe bfba 	b.w	133d2 <_svfprintf_r+0x3c2>
   1445e:	212d      	movs	r1, #45	; 0x2d
   14460:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   14464:	f7fe bfa4 	b.w	133b0 <_svfprintf_r+0x3a0>
   14468:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1446a:	9915      	ldr	r1, [sp, #84]	; 0x54
   1446c:	ebab 0b03 	sub.w	fp, fp, r3
   14470:	461a      	mov	r2, r3
   14472:	4658      	mov	r0, fp
   14474:	f7fc ff14 	bl	112a0 <strncpy>
   14478:	f89a 2001 	ldrb.w	r2, [sl, #1]
   1447c:	4b05      	ldr	r3, [pc, #20]	; (14494 <_svfprintf_r+0x1484>)
   1447e:	b10a      	cbz	r2, 14484 <_svfprintf_r+0x1474>
   14480:	f10a 0a01 	add.w	sl, sl, #1
   14484:	f04f 0c00 	mov.w	ip, #0
   14488:	e628      	b.n	140dc <_svfprintf_r+0x10cc>
   1448a:	bf00      	nop
   1448c:	20003868 	.word	0x20003868
   14490:	2000bb24 	.word	0x2000bb24
   14494:	cccccccd 	.word	0xcccccccd
   14498:	ee1b 1a10 	vmov	r1, s22
   1449c:	aa24      	add	r2, sp, #144	; 0x90
   1449e:	4658      	mov	r0, fp
   144a0:	f003 fc06 	bl	17cb0 <__ssprint_r>
   144a4:	2800      	cmp	r0, #0
   144a6:	f47f aa18 	bne.w	138da <_svfprintf_r+0x8ca>
   144aa:	991b      	ldr	r1, [sp, #108]	; 0x6c
   144ac:	9a26      	ldr	r2, [sp, #152]	; 0x98
   144ae:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   144b2:	e67c      	b.n	141ae <_svfprintf_r+0x119e>
   144b4:	9b05      	ldr	r3, [sp, #20]
   144b6:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   144ba:	930f      	str	r3, [sp, #60]	; 0x3c
   144bc:	e9cd 3302 	strd	r3, r3, [sp, #8]
   144c0:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   144c4:	9307      	str	r3, [sp, #28]
   144c6:	f7fe bf84 	b.w	133d2 <_svfprintf_r+0x3c2>
   144ca:	990e      	ldr	r1, [sp, #56]	; 0x38
   144cc:	9805      	ldr	r0, [sp, #20]
   144ce:	1865      	adds	r5, r4, r1
   144d0:	1a2d      	subs	r5, r5, r0
   144d2:	1acc      	subs	r4, r1, r3
   144d4:	42a5      	cmp	r5, r4
   144d6:	bfa8      	it	ge
   144d8:	4625      	movge	r5, r4
   144da:	f7ff bb4d 	b.w	13b78 <_svfprintf_r+0xb68>
   144de:	9b08      	ldr	r3, [sp, #32]
   144e0:	9904      	ldr	r1, [sp, #16]
   144e2:	f853 2b04 	ldr.w	r2, [r3], #4
   144e6:	9308      	str	r3, [sp, #32]
   144e8:	8011      	strh	r1, [r2, #0]
   144ea:	464c      	mov	r4, r9
   144ec:	f7fe bdc2 	b.w	13074 <_svfprintf_r+0x64>
   144f0:	f913 2b04 	ldrsb.w	r2, [r3], #4
   144f4:	9308      	str	r3, [sp, #32]
   144f6:	17d1      	asrs	r1, r2, #31
   144f8:	460b      	mov	r3, r1
   144fa:	f7fe bfdb 	b.w	134b4 <_svfprintf_r+0x4a4>
   144fe:	9a03      	ldr	r2, [sp, #12]
   14500:	2102      	movs	r1, #2
   14502:	ab22      	add	r3, sp, #136	; 0x88
   14504:	9301      	str	r3, [sp, #4]
   14506:	ab1d      	add	r3, sp, #116	; 0x74
   14508:	9300      	str	r3, [sp, #0]
   1450a:	4658      	mov	r0, fp
   1450c:	ab1b      	add	r3, sp, #108	; 0x6c
   1450e:	eeb0 0b4a 	vmov.f64	d0, d10
   14512:	9202      	str	r2, [sp, #8]
   14514:	f002 f9d8 	bl	168c8 <_dtoa_r>
   14518:	2d47      	cmp	r5, #71	; 0x47
   1451a:	9a02      	ldr	r2, [sp, #8]
   1451c:	4604      	mov	r4, r0
   1451e:	f000 8161 	beq.w	147e4 <_svfprintf_r+0x17d4>
   14522:	2d46      	cmp	r5, #70	; 0x46
   14524:	4410      	add	r0, r2
   14526:	d105      	bne.n	14534 <_svfprintf_r+0x1524>
   14528:	7823      	ldrb	r3, [r4, #0]
   1452a:	2b30      	cmp	r3, #48	; 0x30
   1452c:	f000 826f 	beq.w	14a0e <_svfprintf_r+0x19fe>
   14530:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   14532:	4410      	add	r0, r2
   14534:	eeb5 ab40 	vcmp.f64	d10, #0.0
   14538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1453c:	f040 8146 	bne.w	147cc <_svfprintf_r+0x17bc>
   14540:	4603      	mov	r3, r0
   14542:	1b1b      	subs	r3, r3, r4
   14544:	930e      	str	r3, [sp, #56]	; 0x38
   14546:	2d47      	cmp	r5, #71	; 0x47
   14548:	f000 8110 	beq.w	1476c <_svfprintf_r+0x175c>
   1454c:	2d46      	cmp	r5, #70	; 0x46
   1454e:	f000 81b5 	beq.w	148bc <_svfprintf_r+0x18ac>
   14552:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   14554:	930c      	str	r3, [sp, #48]	; 0x30
   14556:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   14558:	2d41      	cmp	r5, #65	; 0x41
   1455a:	f103 33ff 	add.w	r3, r3, #4294967295
   1455e:	931b      	str	r3, [sp, #108]	; 0x6c
   14560:	f000 81e5 	beq.w	1492e <_svfprintf_r+0x191e>
   14564:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   14568:	2100      	movs	r1, #0
   1456a:	2b00      	cmp	r3, #0
   1456c:	bfb8      	it	lt
   1456e:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
   14570:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   14574:	bfba      	itte	lt
   14576:	f1c3 0301 	rsblt	r3, r3, #1
   1457a:	222d      	movlt	r2, #45	; 0x2d
   1457c:	222b      	movge	r2, #43	; 0x2b
   1457e:	2b09      	cmp	r3, #9
   14580:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   14584:	f340 81da 	ble.w	1493c <_svfprintf_r+0x192c>
   14588:	f10d 058f 	add.w	r5, sp, #143	; 0x8f
   1458c:	f8df c41c 	ldr.w	ip, [pc, #1052]	; 149ac <_svfprintf_r+0x199c>
   14590:	462a      	mov	r2, r5
   14592:	4610      	mov	r0, r2
   14594:	fb8c 2103 	smull	r2, r1, ip, r3
   14598:	17da      	asrs	r2, r3, #31
   1459a:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
   1459e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   145a2:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
   145a6:	3130      	adds	r1, #48	; 0x30
   145a8:	f800 1c01 	strb.w	r1, [r0, #-1]
   145ac:	4619      	mov	r1, r3
   145ae:	2963      	cmp	r1, #99	; 0x63
   145b0:	4613      	mov	r3, r2
   145b2:	f100 32ff 	add.w	r2, r0, #4294967295
   145b6:	dcec      	bgt.n	14592 <_svfprintf_r+0x1582>
   145b8:	3330      	adds	r3, #48	; 0x30
   145ba:	b2d9      	uxtb	r1, r3
   145bc:	1e83      	subs	r3, r0, #2
   145be:	429d      	cmp	r5, r3
   145c0:	f802 1c01 	strb.w	r1, [r2, #-1]
   145c4:	f240 828b 	bls.w	14ade <_svfprintf_r+0x1ace>
   145c8:	4613      	mov	r3, r2
   145ca:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   145ce:	e001      	b.n	145d4 <_svfprintf_r+0x15c4>
   145d0:	f813 1b01 	ldrb.w	r1, [r3], #1
   145d4:	f802 1b01 	strb.w	r1, [r2], #1
   145d8:	429d      	cmp	r5, r3
   145da:	d1f9      	bne.n	145d0 <_svfprintf_r+0x15c0>
   145dc:	f10d 0391 	add.w	r3, sp, #145	; 0x91
   145e0:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   145e4:	1a1b      	subs	r3, r3, r0
   145e6:	4413      	add	r3, r2
   145e8:	aa1e      	add	r2, sp, #120	; 0x78
   145ea:	1a9b      	subs	r3, r3, r2
   145ec:	9314      	str	r3, [sp, #80]	; 0x50
   145ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   145f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
   145f2:	2b01      	cmp	r3, #1
   145f4:	441a      	add	r2, r3
   145f6:	9205      	str	r2, [sp, #20]
   145f8:	f340 8203 	ble.w	14a02 <_svfprintf_r+0x19f2>
   145fc:	9b05      	ldr	r3, [sp, #20]
   145fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
   14600:	4413      	add	r3, r2
   14602:	9305      	str	r3, [sp, #20]
   14604:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
   14608:	9a05      	ldr	r2, [sp, #20]
   1460a:	f443 7880 	orr.w	r8, r3, #256	; 0x100
   1460e:	2300      	movs	r3, #0
   14610:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   14614:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   14618:	930f      	str	r3, [sp, #60]	; 0x3c
   1461a:	9202      	str	r2, [sp, #8]
   1461c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1461e:	2b00      	cmp	r3, #0
   14620:	f040 80b1 	bne.w	14786 <_svfprintf_r+0x1776>
   14624:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   14628:	9303      	str	r3, [sp, #12]
   1462a:	f7fe bed2 	b.w	133d2 <_svfprintf_r+0x3c2>
   1462e:	4620      	mov	r0, r4
   14630:	f7fd f966 	bl	11900 <strlen>
   14634:	4602      	mov	r2, r0
   14636:	9005      	str	r0, [sp, #20]
   14638:	f7fe bf20 	b.w	1347c <_svfprintf_r+0x46c>
   1463c:	ee1b 1a10 	vmov	r1, s22
   14640:	aa24      	add	r2, sp, #144	; 0x90
   14642:	4658      	mov	r0, fp
   14644:	f003 fb34 	bl	17cb0 <__ssprint_r>
   14648:	f7fe bded 	b.w	13226 <_svfprintf_r+0x216>
   1464c:	1c59      	adds	r1, r3, #1
   1464e:	4658      	mov	r0, fp
   14650:	f7fa fd54 	bl	f0fc <_malloc_r>
   14654:	4604      	mov	r4, r0
   14656:	2800      	cmp	r0, #0
   14658:	f000 81ca 	beq.w	149f0 <_svfprintf_r+0x19e0>
   1465c:	9007      	str	r0, [sp, #28]
   1465e:	e6e0      	b.n	14422 <_svfprintf_r+0x1412>
   14660:	ee1b 1a10 	vmov	r1, s22
   14664:	aa24      	add	r2, sp, #144	; 0x90
   14666:	4658      	mov	r0, fp
   14668:	f003 fb22 	bl	17cb0 <__ssprint_r>
   1466c:	2800      	cmp	r0, #0
   1466e:	f47f a934 	bne.w	138da <_svfprintf_r+0x8ca>
   14672:	9a26      	ldr	r2, [sp, #152]	; 0x98
   14674:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   14678:	f7ff ba49 	b.w	13b0e <_svfprintf_r+0xafe>
   1467c:	ee1b 1a10 	vmov	r1, s22
   14680:	aa24      	add	r2, sp, #144	; 0x90
   14682:	4658      	mov	r0, fp
   14684:	f003 fb14 	bl	17cb0 <__ssprint_r>
   14688:	2800      	cmp	r0, #0
   1468a:	f47f a926 	bne.w	138da <_svfprintf_r+0x8ca>
   1468e:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   14692:	991b      	ldr	r1, [sp, #108]	; 0x6c
   14694:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   14698:	e649      	b.n	1432e <_svfprintf_r+0x131e>
   1469a:	2306      	movs	r3, #6
   1469c:	9303      	str	r3, [sp, #12]
   1469e:	f7ff bb83 	b.w	13da8 <_svfprintf_r+0xd98>
   146a2:	9b03      	ldr	r3, [sp, #12]
   146a4:	2102      	movs	r1, #2
   146a6:	1c5a      	adds	r2, r3, #1
   146a8:	e72b      	b.n	14502 <_svfprintf_r+0x14f2>
   146aa:	9a03      	ldr	r2, [sp, #12]
   146ac:	2103      	movs	r1, #3
   146ae:	e728      	b.n	14502 <_svfprintf_r+0x14f2>
   146b0:	a81b      	add	r0, sp, #108	; 0x6c
   146b2:	eeb0 0b4a 	vmov.f64	d0, d10
   146b6:	f002 f817 	bl	166e8 <frexp>
   146ba:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
   146be:	ee20 0b07 	vmul.f64	d0, d0, d7
   146c2:	eeb5 0b40 	vcmp.f64	d0, #0.0
   146c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   146ca:	d101      	bne.n	146d0 <_svfprintf_r+0x16c0>
   146cc:	2301      	movs	r3, #1
   146ce:	931b      	str	r3, [sp, #108]	; 0x6c
   146d0:	48b3      	ldr	r0, [pc, #716]	; (149a0 <_svfprintf_r+0x1990>)
   146d2:	9b03      	ldr	r3, [sp, #12]
   146d4:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
   146d8:	3b01      	subs	r3, #1
   146da:	4622      	mov	r2, r4
   146dc:	e004      	b.n	146e8 <_svfprintf_r+0x16d8>
   146de:	eeb5 0b40 	vcmp.f64	d0, #0.0
   146e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   146e6:	d013      	beq.n	14710 <_svfprintf_r+0x1700>
   146e8:	ee20 0b05 	vmul.f64	d0, d0, d5
   146ec:	eefd 7bc0 	vcvt.s32.f64	s15, d0
   146f0:	f1b3 3fff 	cmp.w	r3, #4294967295
   146f4:	ee17 1a90 	vmov	r1, s15
   146f8:	5c41      	ldrb	r1, [r0, r1]
   146fa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
   146fe:	4694      	mov	ip, r2
   14700:	ee30 0b46 	vsub.f64	d0, d0, d6
   14704:	f802 1b01 	strb.w	r1, [r2], #1
   14708:	4619      	mov	r1, r3
   1470a:	f103 33ff 	add.w	r3, r3, #4294967295
   1470e:	d1e6      	bne.n	146de <_svfprintf_r+0x16ce>
   14710:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
   14714:	eeb4 0bc6 	vcmpe.f64	d0, d6
   14718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1471c:	f300 8148 	bgt.w	149b0 <_svfprintf_r+0x19a0>
   14720:	eeb4 0b46 	vcmp.f64	d0, d6
   14724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14728:	d104      	bne.n	14734 <_svfprintf_r+0x1724>
   1472a:	ee17 3a90 	vmov	r3, s15
   1472e:	07db      	lsls	r3, r3, #31
   14730:	f100 813e 	bmi.w	149b0 <_svfprintf_r+0x19a0>
   14734:	2900      	cmp	r1, #0
   14736:	db06      	blt.n	14746 <_svfprintf_r+0x1736>
   14738:	1c4b      	adds	r3, r1, #1
   1473a:	4413      	add	r3, r2
   1473c:	2130      	movs	r1, #48	; 0x30
   1473e:	f802 1b01 	strb.w	r1, [r2], #1
   14742:	4293      	cmp	r3, r2
   14744:	d1fb      	bne.n	1473e <_svfprintf_r+0x172e>
   14746:	1b13      	subs	r3, r2, r4
   14748:	930e      	str	r3, [sp, #56]	; 0x38
   1474a:	e6fc      	b.n	14546 <_svfprintf_r+0x1536>
   1474c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1474e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   14750:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   14754:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   14758:	9613      	str	r6, [sp, #76]	; 0x4c
   1475a:	18e3      	adds	r3, r4, r3
   1475c:	429d      	cmp	r5, r3
   1475e:	4629      	mov	r1, r5
   14760:	bf28      	it	cs
   14762:	4619      	movcs	r1, r3
   14764:	4682      	mov	sl, r0
   14766:	9105      	str	r1, [sp, #20]
   14768:	f7ff b9d8 	b.w	13b1c <_svfprintf_r+0xb0c>
   1476c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1476e:	930c      	str	r3, [sp, #48]	; 0x30
   14770:	1cda      	adds	r2, r3, #3
   14772:	db02      	blt.n	1477a <_svfprintf_r+0x176a>
   14774:	9a03      	ldr	r2, [sp, #12]
   14776:	4293      	cmp	r3, r2
   14778:	dd0c      	ble.n	14794 <_svfprintf_r+0x1784>
   1477a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1477c:	3b02      	subs	r3, #2
   1477e:	930b      	str	r3, [sp, #44]	; 0x2c
   14780:	f023 0520 	bic.w	r5, r3, #32
   14784:	e6e7      	b.n	14556 <_svfprintf_r+0x1546>
   14786:	212d      	movs	r1, #45	; 0x2d
   14788:	2300      	movs	r3, #0
   1478a:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   1478e:	9303      	str	r3, [sp, #12]
   14790:	f7fe be22 	b.w	133d8 <_svfprintf_r+0x3c8>
   14794:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   14796:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   14798:	4293      	cmp	r3, r2
   1479a:	f2c0 80bd 	blt.w	14918 <_svfprintf_r+0x1908>
   1479e:	07f0      	lsls	r0, r6, #31
   147a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   147a2:	f140 8132 	bpl.w	14a0a <_svfprintf_r+0x19fa>
   147a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
   147a8:	4413      	add	r3, r2
   147aa:	9305      	str	r3, [sp, #20]
   147ac:	0571      	lsls	r1, r6, #21
   147ae:	d503      	bpl.n	147b8 <_svfprintf_r+0x17a8>
   147b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   147b2:	2b00      	cmp	r3, #0
   147b4:	f300 8135 	bgt.w	14a22 <_svfprintf_r+0x1a12>
   147b8:	9b05      	ldr	r3, [sp, #20]
   147ba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   147be:	9302      	str	r3, [sp, #8]
   147c0:	2367      	movs	r3, #103	; 0x67
   147c2:	930b      	str	r3, [sp, #44]	; 0x2c
   147c4:	2300      	movs	r3, #0
   147c6:	930f      	str	r3, [sp, #60]	; 0x3c
   147c8:	930d      	str	r3, [sp, #52]	; 0x34
   147ca:	e727      	b.n	1461c <_svfprintf_r+0x160c>
   147cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
   147ce:	4283      	cmp	r3, r0
   147d0:	f4bf aeb7 	bcs.w	14542 <_svfprintf_r+0x1532>
   147d4:	2130      	movs	r1, #48	; 0x30
   147d6:	1c5a      	adds	r2, r3, #1
   147d8:	9222      	str	r2, [sp, #136]	; 0x88
   147da:	7019      	strb	r1, [r3, #0]
   147dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
   147de:	4298      	cmp	r0, r3
   147e0:	d8f9      	bhi.n	147d6 <_svfprintf_r+0x17c6>
   147e2:	e6ae      	b.n	14542 <_svfprintf_r+0x1532>
   147e4:	07f3      	lsls	r3, r6, #31
   147e6:	f100 80a7 	bmi.w	14938 <_svfprintf_r+0x1928>
   147ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
   147ec:	e6a9      	b.n	14542 <_svfprintf_r+0x1532>
   147ee:	aa24      	add	r2, sp, #144	; 0x90
   147f0:	4658      	mov	r0, fp
   147f2:	9105      	str	r1, [sp, #20]
   147f4:	f003 fa5c 	bl	17cb0 <__ssprint_r>
   147f8:	2800      	cmp	r0, #0
   147fa:	f47f a86e 	bne.w	138da <_svfprintf_r+0x8ca>
   147fe:	f896 c000 	ldrb.w	ip, [r6]
   14802:	9a26      	ldr	r2, [sp, #152]	; 0x98
   14804:	9905      	ldr	r1, [sp, #20]
   14806:	a827      	add	r0, sp, #156	; 0x9c
   14808:	4465      	add	r5, ip
   1480a:	f7ff bbec 	b.w	13fe6 <_svfprintf_r+0xfd6>
   1480e:	ee1b 1a10 	vmov	r1, s22
   14812:	aa24      	add	r2, sp, #144	; 0x90
   14814:	4658      	mov	r0, fp
   14816:	f003 fa4b 	bl	17cb0 <__ssprint_r>
   1481a:	2800      	cmp	r0, #0
   1481c:	f47f a85d 	bne.w	138da <_svfprintf_r+0x8ca>
   14820:	9a26      	ldr	r2, [sp, #152]	; 0x98
   14822:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   14826:	f7ff b96b 	b.w	13b00 <_svfprintf_r+0xaf0>
   1482a:	2378      	movs	r3, #120	; 0x78
   1482c:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
   14830:	2330      	movs	r3, #48	; 0x30
   14832:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
   14836:	9b03      	ldr	r3, [sp, #12]
   14838:	2b63      	cmp	r3, #99	; 0x63
   1483a:	f048 0602 	orr.w	r6, r8, #2
   1483e:	f300 80a6 	bgt.w	1498e <_svfprintf_r+0x197e>
   14842:	2300      	movs	r3, #0
   14844:	9307      	str	r3, [sp, #28]
   14846:	ac37      	add	r4, sp, #220	; 0xdc
   14848:	ee18 3a90 	vmov	r3, s17
   1484c:	2b00      	cmp	r3, #0
   1484e:	f448 7881 	orr.w	r8, r8, #258	; 0x102
   14852:	db2b      	blt.n	148ac <_svfprintf_r+0x189c>
   14854:	eeb0 ab48 	vmov.f64	d10, d8
   14858:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1485a:	f023 0520 	bic.w	r5, r3, #32
   1485e:	2300      	movs	r3, #0
   14860:	9309      	str	r3, [sp, #36]	; 0x24
   14862:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14864:	2b61      	cmp	r3, #97	; 0x61
   14866:	f47f aaad 	bne.w	13dc4 <_svfprintf_r+0xdb4>
   1486a:	eeb0 0b4a 	vmov.f64	d0, d10
   1486e:	a81b      	add	r0, sp, #108	; 0x6c
   14870:	f001 ff3a 	bl	166e8 <frexp>
   14874:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
   14878:	ee20 0b07 	vmul.f64	d0, d0, d7
   1487c:	eeb5 0b40 	vcmp.f64	d0, #0.0
   14880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14884:	d101      	bne.n	1488a <_svfprintf_r+0x187a>
   14886:	2301      	movs	r3, #1
   14888:	931b      	str	r3, [sp, #108]	; 0x6c
   1488a:	4846      	ldr	r0, [pc, #280]	; (149a4 <_svfprintf_r+0x1994>)
   1488c:	e721      	b.n	146d2 <_svfprintf_r+0x16c2>
   1488e:	ee1b 1a10 	vmov	r1, s22
   14892:	aa24      	add	r2, sp, #144	; 0x90
   14894:	4658      	mov	r0, fp
   14896:	f003 fa0b 	bl	17cb0 <__ssprint_r>
   1489a:	2800      	cmp	r0, #0
   1489c:	f47f a81d 	bne.w	138da <_svfprintf_r+0x8ca>
   148a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   148a2:	9a26      	ldr	r2, [sp, #152]	; 0x98
   148a4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   148a8:	f7ff b94e 	b.w	13b48 <_svfprintf_r+0xb38>
   148ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   148ae:	f023 0520 	bic.w	r5, r3, #32
   148b2:	232d      	movs	r3, #45	; 0x2d
   148b4:	9309      	str	r3, [sp, #36]	; 0x24
   148b6:	eeb1 ab48 	vneg.f64	d10, d8
   148ba:	e7d2      	b.n	14862 <_svfprintf_r+0x1852>
   148bc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   148be:	920c      	str	r2, [sp, #48]	; 0x30
   148c0:	2a00      	cmp	r2, #0
   148c2:	f006 0301 	and.w	r3, r6, #1
   148c6:	f340 810d 	ble.w	14ae4 <_svfprintf_r+0x1ad4>
   148ca:	9903      	ldr	r1, [sp, #12]
   148cc:	430b      	orrs	r3, r1
   148ce:	f040 80cf 	bne.w	14a70 <_svfprintf_r+0x1a60>
   148d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   148d4:	9305      	str	r3, [sp, #20]
   148d6:	2366      	movs	r3, #102	; 0x66
   148d8:	930b      	str	r3, [sp, #44]	; 0x2c
   148da:	0572      	lsls	r2, r6, #21
   148dc:	f100 80a3 	bmi.w	14a26 <_svfprintf_r+0x1a16>
   148e0:	9b05      	ldr	r3, [sp, #20]
   148e2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   148e6:	9302      	str	r3, [sp, #8]
   148e8:	e76c      	b.n	147c4 <_svfprintf_r+0x17b4>
   148ea:	ee1b 1a10 	vmov	r1, s22
   148ee:	aa24      	add	r2, sp, #144	; 0x90
   148f0:	4658      	mov	r0, fp
   148f2:	f003 f9dd 	bl	17cb0 <__ssprint_r>
   148f6:	2800      	cmp	r0, #0
   148f8:	f47e afef 	bne.w	138da <_svfprintf_r+0x8ca>
   148fc:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
   148fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   14900:	9a26      	ldr	r2, [sp, #152]	; 0x98
   14902:	1b1c      	subs	r4, r3, r4
   14904:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   14908:	f7ff b936 	b.w	13b78 <_svfprintf_r+0xb68>
   1490c:	2358      	movs	r3, #88	; 0x58
   1490e:	e78d      	b.n	1482c <_svfprintf_r+0x181c>
   14910:	2200      	movs	r2, #0
   14912:	9203      	str	r2, [sp, #12]
   14914:	f7fe bbda 	b.w	130cc <_svfprintf_r+0xbc>
   14918:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1491a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1491c:	189a      	adds	r2, r3, r2
   1491e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   14920:	9205      	str	r2, [sp, #20]
   14922:	2b00      	cmp	r3, #0
   14924:	f340 80ab 	ble.w	14a7e <_svfprintf_r+0x1a6e>
   14928:	2367      	movs	r3, #103	; 0x67
   1492a:	930b      	str	r3, [sp, #44]	; 0x2c
   1492c:	e7d5      	b.n	148da <_svfprintf_r+0x18ca>
   1492e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   14930:	320f      	adds	r2, #15
   14932:	b2d2      	uxtb	r2, r2
   14934:	2101      	movs	r1, #1
   14936:	e618      	b.n	1456a <_svfprintf_r+0x155a>
   14938:	18a0      	adds	r0, r4, r2
   1493a:	e5fb      	b.n	14534 <_svfprintf_r+0x1524>
   1493c:	2900      	cmp	r1, #0
   1493e:	f040 80a8 	bne.w	14a92 <_svfprintf_r+0x1a82>
   14942:	2230      	movs	r2, #48	; 0x30
   14944:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
   14948:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
   1494c:	3330      	adds	r3, #48	; 0x30
   1494e:	f802 3b01 	strb.w	r3, [r2], #1
   14952:	ab1e      	add	r3, sp, #120	; 0x78
   14954:	1ad3      	subs	r3, r2, r3
   14956:	9314      	str	r3, [sp, #80]	; 0x50
   14958:	e649      	b.n	145ee <_svfprintf_r+0x15de>
   1495a:	3301      	adds	r3, #1
   1495c:	4912      	ldr	r1, [pc, #72]	; (149a8 <_svfprintf_r+0x1998>)
   1495e:	f8ca 5004 	str.w	r5, [sl, #4]
   14962:	442a      	add	r2, r5
   14964:	2b07      	cmp	r3, #7
   14966:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1496a:	f8ca 1000 	str.w	r1, [sl]
   1496e:	f77f ac33 	ble.w	141d8 <_svfprintf_r+0x11c8>
   14972:	ee1b 1a10 	vmov	r1, s22
   14976:	aa24      	add	r2, sp, #144	; 0x90
   14978:	4658      	mov	r0, fp
   1497a:	f003 f999 	bl	17cb0 <__ssprint_r>
   1497e:	2800      	cmp	r0, #0
   14980:	f47e afab 	bne.w	138da <_svfprintf_r+0x8ca>
   14984:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   14988:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1498c:	e426      	b.n	141dc <_svfprintf_r+0x11cc>
   1498e:	1c59      	adds	r1, r3, #1
   14990:	4658      	mov	r0, fp
   14992:	f7fa fbb3 	bl	f0fc <_malloc_r>
   14996:	4604      	mov	r4, r0
   14998:	b350      	cbz	r0, 149f0 <_svfprintf_r+0x19e0>
   1499a:	9007      	str	r0, [sp, #28]
   1499c:	e754      	b.n	14848 <_svfprintf_r+0x1838>
   1499e:	bf00      	nop
   149a0:	2000384c 	.word	0x2000384c
   149a4:	20003838 	.word	0x20003838
   149a8:	2000bb24 	.word	0x2000bb24
   149ac:	66666667 	.word	0x66666667
   149b0:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
   149b4:	f812 1c01 	ldrb.w	r1, [r2, #-1]
   149b8:	f890 c00f 	ldrb.w	ip, [r0, #15]
   149bc:	4561      	cmp	r1, ip
   149be:	4613      	mov	r3, r2
   149c0:	d10a      	bne.n	149d8 <_svfprintf_r+0x19c8>
   149c2:	f04f 0e30 	mov.w	lr, #48	; 0x30
   149c6:	f803 ec01 	strb.w	lr, [r3, #-1]
   149ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
   149cc:	1e59      	subs	r1, r3, #1
   149ce:	9122      	str	r1, [sp, #136]	; 0x88
   149d0:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   149d4:	458c      	cmp	ip, r1
   149d6:	d0f6      	beq.n	149c6 <_svfprintf_r+0x19b6>
   149d8:	2939      	cmp	r1, #57	; 0x39
   149da:	bf16      	itet	ne
   149dc:	3101      	addne	r1, #1
   149de:	7a81      	ldrbeq	r1, [r0, #10]
   149e0:	b2c9      	uxtbne	r1, r1
   149e2:	f803 1c01 	strb.w	r1, [r3, #-1]
   149e6:	e6ae      	b.n	14746 <_svfprintf_r+0x1736>
   149e8:	2300      	movs	r3, #0
   149ea:	4690      	mov	r8, r2
   149ec:	9307      	str	r3, [sp, #28]
   149ee:	e760      	b.n	148b2 <_svfprintf_r+0x18a2>
   149f0:	ee1b 2a10 	vmov	r2, s22
   149f4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   149f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   149fc:	8193      	strh	r3, [r2, #12]
   149fe:	f7fe bc16 	b.w	1322e <_svfprintf_r+0x21e>
   14a02:	07f5      	lsls	r5, r6, #31
   14a04:	f57f adfe 	bpl.w	14604 <_svfprintf_r+0x15f4>
   14a08:	e5f8      	b.n	145fc <_svfprintf_r+0x15ec>
   14a0a:	9305      	str	r3, [sp, #20]
   14a0c:	e6ce      	b.n	147ac <_svfprintf_r+0x179c>
   14a0e:	eeb5 ab40 	vcmp.f64	d10, #0.0
   14a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14a16:	f43f ad8b 	beq.w	14530 <_svfprintf_r+0x1520>
   14a1a:	f1c2 0201 	rsb	r2, r2, #1
   14a1e:	921b      	str	r2, [sp, #108]	; 0x6c
   14a20:	e587      	b.n	14532 <_svfprintf_r+0x1522>
   14a22:	2367      	movs	r3, #103	; 0x67
   14a24:	930b      	str	r3, [sp, #44]	; 0x2c
   14a26:	9913      	ldr	r1, [sp, #76]	; 0x4c
   14a28:	780b      	ldrb	r3, [r1, #0]
   14a2a:	2bff      	cmp	r3, #255	; 0xff
   14a2c:	d079      	beq.n	14b22 <_svfprintf_r+0x1b12>
   14a2e:	2500      	movs	r5, #0
   14a30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14a32:	4628      	mov	r0, r5
   14a34:	e003      	b.n	14a3e <_svfprintf_r+0x1a2e>
   14a36:	3001      	adds	r0, #1
   14a38:	3101      	adds	r1, #1
   14a3a:	2bff      	cmp	r3, #255	; 0xff
   14a3c:	d008      	beq.n	14a50 <_svfprintf_r+0x1a40>
   14a3e:	4293      	cmp	r3, r2
   14a40:	da06      	bge.n	14a50 <_svfprintf_r+0x1a40>
   14a42:	1ad2      	subs	r2, r2, r3
   14a44:	784b      	ldrb	r3, [r1, #1]
   14a46:	2b00      	cmp	r3, #0
   14a48:	d1f5      	bne.n	14a36 <_svfprintf_r+0x1a26>
   14a4a:	780b      	ldrb	r3, [r1, #0]
   14a4c:	3501      	adds	r5, #1
   14a4e:	e7f4      	b.n	14a3a <_svfprintf_r+0x1a2a>
   14a50:	920c      	str	r2, [sp, #48]	; 0x30
   14a52:	9113      	str	r1, [sp, #76]	; 0x4c
   14a54:	900d      	str	r0, [sp, #52]	; 0x34
   14a56:	950f      	str	r5, [sp, #60]	; 0x3c
   14a58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   14a5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14a5c:	9916      	ldr	r1, [sp, #88]	; 0x58
   14a5e:	4413      	add	r3, r2
   14a60:	9a05      	ldr	r2, [sp, #20]
   14a62:	fb01 2303 	mla	r3, r1, r3, r2
   14a66:	9305      	str	r3, [sp, #20]
   14a68:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   14a6c:	9302      	str	r3, [sp, #8]
   14a6e:	e5d5      	b.n	1461c <_svfprintf_r+0x160c>
   14a70:	9b10      	ldr	r3, [sp, #64]	; 0x40
   14a72:	18d3      	adds	r3, r2, r3
   14a74:	4419      	add	r1, r3
   14a76:	2366      	movs	r3, #102	; 0x66
   14a78:	9105      	str	r1, [sp, #20]
   14a7a:	930b      	str	r3, [sp, #44]	; 0x2c
   14a7c:	e72d      	b.n	148da <_svfprintf_r+0x18ca>
   14a7e:	f1c3 0301 	rsb	r3, r3, #1
   14a82:	441a      	add	r2, r3
   14a84:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   14a88:	9302      	str	r3, [sp, #8]
   14a8a:	2367      	movs	r3, #103	; 0x67
   14a8c:	9205      	str	r2, [sp, #20]
   14a8e:	930b      	str	r3, [sp, #44]	; 0x2c
   14a90:	e698      	b.n	147c4 <_svfprintf_r+0x17b4>
   14a92:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   14a96:	e759      	b.n	1494c <_svfprintf_r+0x193c>
   14a98:	9b03      	ldr	r3, [sp, #12]
   14a9a:	f8dd 9008 	ldr.w	r9, [sp, #8]
   14a9e:	f8dd 801c 	ldr.w	r8, [sp, #28]
   14aa2:	9305      	str	r3, [sp, #20]
   14aa4:	e4b4      	b.n	14410 <_svfprintf_r+0x1400>
   14aa6:	ee18 3a90 	vmov	r3, s17
   14aaa:	2b00      	cmp	r3, #0
   14aac:	bfb4      	ite	lt
   14aae:	212d      	movlt	r1, #45	; 0x2d
   14ab0:	f89d 1067 	ldrbge.w	r1, [sp, #103]	; 0x67
   14ab4:	4c25      	ldr	r4, [pc, #148]	; (14b4c <_svfprintf_r+0x1b3c>)
   14ab6:	4b26      	ldr	r3, [pc, #152]	; (14b50 <_svfprintf_r+0x1b40>)
   14ab8:	bfb8      	it	lt
   14aba:	f88d 1067 	strblt.w	r1, [sp, #103]	; 0x67
   14abe:	f028 0880 	bic.w	r8, r8, #128	; 0x80
   14ac2:	f7fe bc79 	b.w	133b8 <_svfprintf_r+0x3a8>
   14ac6:	9b03      	ldr	r3, [sp, #12]
   14ac8:	9302      	str	r3, [sp, #8]
   14aca:	9305      	str	r3, [sp, #20]
   14acc:	2373      	movs	r3, #115	; 0x73
   14ace:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   14ad2:	9003      	str	r0, [sp, #12]
   14ad4:	900f      	str	r0, [sp, #60]	; 0x3c
   14ad6:	900d      	str	r0, [sp, #52]	; 0x34
   14ad8:	930b      	str	r3, [sp, #44]	; 0x2c
   14ada:	f7fe bc7a 	b.w	133d2 <_svfprintf_r+0x3c2>
   14ade:	2302      	movs	r3, #2
   14ae0:	9314      	str	r3, [sp, #80]	; 0x50
   14ae2:	e584      	b.n	145ee <_svfprintf_r+0x15de>
   14ae4:	9a03      	ldr	r2, [sp, #12]
   14ae6:	4313      	orrs	r3, r2
   14ae8:	d105      	bne.n	14af6 <_svfprintf_r+0x1ae6>
   14aea:	2301      	movs	r3, #1
   14aec:	2266      	movs	r2, #102	; 0x66
   14aee:	9302      	str	r3, [sp, #8]
   14af0:	920b      	str	r2, [sp, #44]	; 0x2c
   14af2:	9305      	str	r3, [sp, #20]
   14af4:	e666      	b.n	147c4 <_svfprintf_r+0x17b4>
   14af6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   14af8:	3301      	adds	r3, #1
   14afa:	441a      	add	r2, r3
   14afc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   14b00:	9302      	str	r3, [sp, #8]
   14b02:	2366      	movs	r3, #102	; 0x66
   14b04:	9205      	str	r2, [sp, #20]
   14b06:	930b      	str	r3, [sp, #44]	; 0x2c
   14b08:	e65c      	b.n	147c4 <_svfprintf_r+0x17b4>
   14b0a:	9a08      	ldr	r2, [sp, #32]
   14b0c:	f899 3001 	ldrb.w	r3, [r9, #1]
   14b10:	4689      	mov	r9, r1
   14b12:	f852 1b04 	ldr.w	r1, [r2], #4
   14b16:	9208      	str	r2, [sp, #32]
   14b18:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
   14b1c:	9103      	str	r1, [sp, #12]
   14b1e:	f7fe bad3 	b.w	130c8 <_svfprintf_r+0xb8>
   14b22:	2300      	movs	r3, #0
   14b24:	930f      	str	r3, [sp, #60]	; 0x3c
   14b26:	930d      	str	r3, [sp, #52]	; 0x34
   14b28:	e796      	b.n	14a58 <_svfprintf_r+0x1a48>
   14b2a:	230c      	movs	r3, #12
   14b2c:	f8cb 3000 	str.w	r3, [fp]
   14b30:	f04f 33ff 	mov.w	r3, #4294967295
   14b34:	9304      	str	r3, [sp, #16]
   14b36:	f7fe bb81 	b.w	1323c <_svfprintf_r+0x22c>
   14b3a:	ee1b 2a10 	vmov	r2, s22
   14b3e:	8993      	ldrh	r3, [r2, #12]
   14b40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14b44:	8193      	strh	r3, [r2, #12]
   14b46:	f7fe bec8 	b.w	138da <_svfprintf_r+0x8ca>
   14b4a:	bf00      	nop
   14b4c:	20003834 	.word	0x20003834
   14b50:	200031bc 	.word	0x200031bc

00014b54 <__ssvfscanf_r>:
   14b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b58:	ed2d 8b02 	vpush	{d8}
   14b5c:	f5ad 7d37 	sub.w	sp, sp, #732	; 0x2dc
   14b60:	468b      	mov	fp, r1
   14b62:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   14b66:	af02      	add	r7, sp, #8
   14b68:	048c      	lsls	r4, r1, #18
   14b6a:	4681      	mov	r9, r0
   14b6c:	64fa      	str	r2, [r7, #76]	; 0x4c
   14b6e:	633b      	str	r3, [r7, #48]	; 0x30
   14b70:	d409      	bmi.n	14b86 <__ssvfscanf_r+0x32>
   14b72:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   14b76:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   14b7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   14b7e:	f8ab 100c 	strh.w	r1, [fp, #12]
   14b82:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   14b86:	2300      	movs	r3, #0
   14b88:	461c      	mov	r4, r3
   14b8a:	2208      	movs	r2, #8
   14b8c:	4619      	mov	r1, r3
   14b8e:	f107 0058 	add.w	r0, r7, #88	; 0x58
   14b92:	62fb      	str	r3, [r7, #44]	; 0x2c
   14b94:	46a2      	mov	sl, r4
   14b96:	f7fc fa0d 	bl	10fb4 <memset>
   14b9a:	643c      	str	r4, [r7, #64]	; 0x40
   14b9c:	627c      	str	r4, [r7, #36]	; 0x24
   14b9e:	63bc      	str	r4, [r7, #56]	; 0x38
   14ba0:	647c      	str	r4, [r7, #68]	; 0x44
   14ba2:	4b83      	ldr	r3, [pc, #524]	; (14db0 <__ssvfscanf_r+0x25c>)
   14ba4:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
   14ba8:	f7fc fbe6 	bl	11378 <__locale_mb_cur_max>
   14bac:	f107 0258 	add.w	r2, r7, #88	; 0x58
   14bb0:	4603      	mov	r3, r0
   14bb2:	9200      	str	r2, [sp, #0]
   14bb4:	f107 0154 	add.w	r1, r7, #84	; 0x54
   14bb8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   14bba:	4648      	mov	r0, r9
   14bbc:	47a0      	blx	r4
   14bbe:	1e05      	subs	r5, r0, #0
   14bc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   14bc2:	db33      	blt.n	14c2c <__ssvfscanf_r+0xd8>
   14bc4:	442b      	add	r3, r5
   14bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
   14bc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   14bca:	462e      	mov	r6, r5
   14bcc:	2b00      	cmp	r3, #0
   14bce:	f000 80b6 	beq.w	14d3e <__ssvfscanf_r+0x1ea>
   14bd2:	2d01      	cmp	r5, #1
   14bd4:	d038      	beq.n	14c48 <__ssvfscanf_r+0xf4>
   14bd6:	2b25      	cmp	r3, #37	; 0x25
   14bd8:	d040      	beq.n	14c5c <__ssvfscanf_r+0x108>
   14bda:	2d00      	cmp	r5, #0
   14bdc:	d0e1      	beq.n	14ba2 <__ssvfscanf_r+0x4e>
   14bde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   14be0:	1b9e      	subs	r6, r3, r6
   14be2:	f8db 3004 	ldr.w	r3, [fp, #4]
   14be6:	1e74      	subs	r4, r6, #1
   14be8:	2b00      	cmp	r3, #0
   14bea:	f340 8098 	ble.w	14d1e <__ssvfscanf_r+0x1ca>
   14bee:	f8db 1000 	ldr.w	r1, [fp]
   14bf2:	f894 c001 	ldrb.w	ip, [r4, #1]
   14bf6:	f891 e000 	ldrb.w	lr, [r1]
   14bfa:	1ca3      	adds	r3, r4, #2
   14bfc:	eb0a 0003 	add.w	r0, sl, r3
   14c00:	45e6      	cmp	lr, ip
   14c02:	f101 0101 	add.w	r1, r1, #1
   14c06:	eba3 0206 	sub.w	r2, r3, r6
   14c0a:	f104 0401 	add.w	r4, r4, #1
   14c0e:	eba0 0006 	sub.w	r0, r0, r6
   14c12:	f040 8094 	bne.w	14d3e <__ssvfscanf_r+0x1ea>
   14c16:	f8db 3004 	ldr.w	r3, [fp, #4]
   14c1a:	f8cb 1000 	str.w	r1, [fp]
   14c1e:	3b01      	subs	r3, #1
   14c20:	42aa      	cmp	r2, r5
   14c22:	f8cb 3004 	str.w	r3, [fp, #4]
   14c26:	dbdf      	blt.n	14be8 <__ssvfscanf_r+0x94>
   14c28:	4682      	mov	sl, r0
   14c2a:	e7ba      	b.n	14ba2 <__ssvfscanf_r+0x4e>
   14c2c:	3301      	adds	r3, #1
   14c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
   14c30:	2208      	movs	r2, #8
   14c32:	f64f 73fd 	movw	r3, #65533	; 0xfffd
   14c36:	2100      	movs	r1, #0
   14c38:	f107 0058 	add.w	r0, r7, #88	; 0x58
   14c3c:	657b      	str	r3, [r7, #84]	; 0x54
   14c3e:	f7fc f9b9 	bl	10fb4 <memset>
   14c42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   14c44:	2b00      	cmp	r3, #0
   14c46:	d07a      	beq.n	14d3e <__ssvfscanf_r+0x1ea>
   14c48:	4e5a      	ldr	r6, [pc, #360]	; (14db4 <__ssvfscanf_r+0x260>)
   14c4a:	5cf2      	ldrb	r2, [r6, r3]
   14c4c:	0710      	lsls	r0, r2, #28
   14c4e:	f100 851c 	bmi.w	1568a <__ssvfscanf_r+0xb36>
   14c52:	2b25      	cmp	r3, #37	; 0x25
   14c54:	f040 8086 	bne.w	14d64 <__ssvfscanf_r+0x210>
   14c58:	2501      	movs	r5, #1
   14c5a:	462e      	mov	r6, r5
   14c5c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   14c5e:	2400      	movs	r4, #0
   14c60:	7802      	ldrb	r2, [r0, #0]
   14c62:	46a0      	mov	r8, r4
   14c64:	f1a2 0325 	sub.w	r3, r2, #37	; 0x25
   14c68:	1c41      	adds	r1, r0, #1
   14c6a:	2b55      	cmp	r3, #85	; 0x55
   14c6c:	d867      	bhi.n	14d3e <__ssvfscanf_r+0x1ea>
   14c6e:	e8df f013 	tbh	[pc, r3, lsl #1]
   14c72:	070a      	.short	0x070a
   14c74:	00660066 	.word	0x00660066
   14c78:	00660066 	.word	0x00660066
   14c7c:	00660701 	.word	0x00660701
   14c80:	00660066 	.word	0x00660066
   14c84:	00660066 	.word	0x00660066
   14c88:	060c060c 	.word	0x060c060c
   14c8c:	060c060c 	.word	0x060c060c
   14c90:	060c060c 	.word	0x060c060c
   14c94:	060c060c 	.word	0x060c060c
   14c98:	060c060c 	.word	0x060c060c
   14c9c:	00660066 	.word	0x00660066
   14ca0:	00660066 	.word	0x00660066
   14ca4:	00660066 	.word	0x00660066
   14ca8:	06180066 	.word	0x06180066
   14cac:	048e0066 	.word	0x048e0066
   14cb0:	061804c9 	.word	0x061804c9
   14cb4:	06180618 	.word	0x06180618
   14cb8:	00660066 	.word	0x00660066
   14cbc:	00660066 	.word	0x00660066
   14cc0:	00660082 	.word	0x00660082
   14cc4:	04bf0066 	.word	0x04bf0066
   14cc8:	00660066 	.word	0x00660066
   14ccc:	00890066 	.word	0x00890066
   14cd0:	00660066 	.word	0x00660066
   14cd4:	00660066 	.word	0x00660066
   14cd8:	0066066b 	.word	0x0066066b
   14cdc:	06dd0066 	.word	0x06dd0066
   14ce0:	00660066 	.word	0x00660066
   14ce4:	00660066 	.word	0x00660066
   14ce8:	06180066 	.word	0x06180066
   14cec:	04900066 	.word	0x04900066
   14cf0:	061804cb 	.word	0x061804cb
   14cf4:	06180618 	.word	0x06180618
   14cf8:	06d206be 	.word	0x06d206be
   14cfc:	00660082 	.word	0x00660082
   14d00:	06f306e7 	.word	0x06f306e7
   14d04:	04c106ac 	.word	0x04c106ac
   14d08:	006606da 	.word	0x006606da
   14d0c:	008b0066 	.word	0x008b0066
   14d10:	06ca007d 	.word	0x06ca007d
   14d14:	00660066 	.word	0x00660066
   14d18:	0066066b 	.word	0x0066066b
   14d1c:	007d      	.short	0x007d
   14d1e:	4659      	mov	r1, fp
   14d20:	4648      	mov	r0, r9
   14d22:	f003 f885 	bl	17e30 <__ssrefill_r>
   14d26:	2800      	cmp	r0, #0
   14d28:	f43f af61 	beq.w	14bee <__ssvfscanf_r+0x9a>
   14d2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   14d2e:	2b00      	cmp	r3, #0
   14d30:	f001 8052 	beq.w	15dd8 <__ssvfscanf_r+0x1284>
   14d34:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   14d38:	065a      	lsls	r2, r3, #25
   14d3a:	f101 804d 	bmi.w	15dd8 <__ssvfscanf_r+0x1284>
   14d3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   14d40:	b143      	cbz	r3, 14d54 <__ssvfscanf_r+0x200>
   14d42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   14d44:	f8d3 8000 	ldr.w	r8, [r3]
   14d48:	f1b8 0f00 	cmp.w	r8, #0
   14d4c:	d002      	beq.n	14d54 <__ssvfscanf_r+0x200>
   14d4e:	4640      	mov	r0, r8
   14d50:	f7fa f9cc 	bl	f0ec <free>
   14d54:	6c78      	ldr	r0, [r7, #68]	; 0x44
   14d56:	f507 7735 	add.w	r7, r7, #724	; 0x2d4
   14d5a:	46bd      	mov	sp, r7
   14d5c:	ecbd 8b02 	vpop	{d8}
   14d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   14d66:	2501      	movs	r5, #1
   14d68:	1e5e      	subs	r6, r3, #1
   14d6a:	e73a      	b.n	14be2 <__ssvfscanf_r+0x8e>
   14d6c:	0723      	lsls	r3, r4, #28
   14d6e:	d1e6      	bne.n	14d3e <__ssvfscanf_r+0x1ea>
   14d70:	7842      	ldrb	r2, [r0, #1]
   14d72:	4608      	mov	r0, r1
   14d74:	e776      	b.n	14c64 <__ssvfscanf_r+0x110>
   14d76:	0722      	lsls	r2, r4, #28
   14d78:	d1e1      	bne.n	14d3e <__ssvfscanf_r+0x1ea>
   14d7a:	7842      	ldrb	r2, [r0, #1]
   14d7c:	f044 0402 	orr.w	r4, r4, #2
   14d80:	4608      	mov	r0, r1
   14d82:	e76f      	b.n	14c64 <__ssvfscanf_r+0x110>
   14d84:	f044 0401 	orr.w	r4, r4, #1
   14d88:	64f9      	str	r1, [r7, #76]	; 0x4c
   14d8a:	2502      	movs	r5, #2
   14d8c:	f8db 3004 	ldr.w	r3, [fp, #4]
   14d90:	2b00      	cmp	r3, #0
   14d92:	f340 8408 	ble.w	155a6 <__ssvfscanf_r+0xa52>
   14d96:	0660      	lsls	r0, r4, #25
   14d98:	f140 840f 	bpl.w	155ba <__ssvfscanf_r+0xa66>
   14d9c:	1e6b      	subs	r3, r5, #1
   14d9e:	2b03      	cmp	r3, #3
   14da0:	f201 80eb 	bhi.w	15f7a <__ssvfscanf_r+0x1426>
   14da4:	e8df f013 	tbh	[pc, r3, lsl #1]
   14da8:	01f1027b 	.word	0x01f1027b
   14dac:	0008014b 	.word	0x0008014b
   14db0:	2000c16c 	.word	0x2000c16c
   14db4:	2000369d 	.word	0x2000369d
   14db8:	4648      	mov	r0, r9
   14dba:	f001 fc8f 	bl	166dc <_localeconv_r>
   14dbe:	6803      	ldr	r3, [r0, #0]
   14dc0:	623b      	str	r3, [r7, #32]
   14dc2:	f108 33ff 	add.w	r3, r8, #4294967295
   14dc6:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
   14dca:	f240 855a 	bls.w	15882 <__ssvfscanf_r+0xd2e>
   14dce:	f46f 75ae 	mvn.w	r5, #348	; 0x15c
   14dd2:	eb08 0305 	add.w	r3, r8, r5
   14dd6:	613b      	str	r3, [r7, #16]
   14dd8:	f240 185d 	movw	r8, #349	; 0x15d
   14ddc:	2600      	movs	r6, #0
   14dde:	f507 73b8 	add.w	r3, r7, #368	; 0x170
   14de2:	ee08 9a10 	vmov	s16, r9
   14de6:	e9c7 6605 	strd	r6, r6, [r7, #20]
   14dea:	63fe      	str	r6, [r7, #60]	; 0x3c
   14dec:	637e      	str	r6, [r7, #52]	; 0x34
   14dee:	61fe      	str	r6, [r7, #28]
   14df0:	64be      	str	r6, [r7, #72]	; 0x48
   14df2:	f444 64f0 	orr.w	r4, r4, #1920	; 0x780
   14df6:	62bb      	str	r3, [r7, #40]	; 0x28
   14df8:	461d      	mov	r5, r3
   14dfa:	4646      	mov	r6, r8
   14dfc:	f8db 1000 	ldr.w	r1, [fp]
   14e00:	780a      	ldrb	r2, [r1, #0]
   14e02:	f1a2 032b 	sub.w	r3, r2, #43	; 0x2b
   14e06:	2b4e      	cmp	r3, #78	; 0x4e
   14e08:	d850      	bhi.n	14eac <__ssvfscanf_r+0x358>
   14e0a:	e8df f013 	tbh	[pc, r3, lsl #1]
   14e0e:	037e      	.short	0x037e
   14e10:	037e004f 	.word	0x037e004f
   14e14:	004f004f 	.word	0x004f004f
   14e18:	00a600a3 	.word	0x00a600a3
   14e1c:	00a600a6 	.word	0x00a600a6
   14e20:	00a600a6 	.word	0x00a600a6
   14e24:	00a600a6 	.word	0x00a600a6
   14e28:	00a600a6 	.word	0x00a600a6
   14e2c:	004f004f 	.word	0x004f004f
   14e30:	004f004f 	.word	0x004f004f
   14e34:	004f004f 	.word	0x004f004f
   14e38:	0374004f 	.word	0x0374004f
   14e3c:	030b030b 	.word	0x030b030b
   14e40:	039e030b 	.word	0x039e030b
   14e44:	004f0394 	.word	0x004f0394
   14e48:	0384004f 	.word	0x0384004f
   14e4c:	004f004f 	.word	0x004f004f
   14e50:	004f004f 	.word	0x004f004f
   14e54:	004f035d 	.word	0x004f035d
   14e58:	004f033a 	.word	0x004f033a
   14e5c:	004f004f 	.word	0x004f004f
   14e60:	004f0333 	.word	0x004f0333
   14e64:	004f004f 	.word	0x004f004f
   14e68:	036d031e 	.word	0x036d031e
   14e6c:	004f004f 	.word	0x004f004f
   14e70:	004f004f 	.word	0x004f004f
   14e74:	004f004f 	.word	0x004f004f
   14e78:	0374004f 	.word	0x0374004f
   14e7c:	030b030b 	.word	0x030b030b
   14e80:	039e030b 	.word	0x039e030b
   14e84:	004f0394 	.word	0x004f0394
   14e88:	0384004f 	.word	0x0384004f
   14e8c:	004f004f 	.word	0x004f004f
   14e90:	004f004f 	.word	0x004f004f
   14e94:	004f035d 	.word	0x004f035d
   14e98:	004f033a 	.word	0x004f033a
   14e9c:	004f004f 	.word	0x004f004f
   14ea0:	004f0333 	.word	0x004f0333
   14ea4:	004f004f 	.word	0x004f004f
   14ea8:	036d031e 	.word	0x036d031e
   14eac:	05a0      	lsls	r0, r4, #22
   14eae:	d56f      	bpl.n	14f90 <__ssvfscanf_r+0x43c>
   14eb0:	6a38      	ldr	r0, [r7, #32]
   14eb2:	7803      	ldrb	r3, [r0, #0]
   14eb4:	4293      	cmp	r3, r2
   14eb6:	d16b      	bne.n	14f90 <__ssvfscanf_r+0x43c>
   14eb8:	e9c7 4502 	strd	r4, r5, [r7, #8]
   14ebc:	607e      	str	r6, [r7, #4]
   14ebe:	4681      	mov	r9, r0
   14ec0:	ee18 6a10 	vmov	r6, s16
   14ec4:	f04f 0800 	mov.w	r8, #0
   14ec8:	465c      	mov	r4, fp
   14eca:	e007      	b.n	14edc <__ssvfscanf_r+0x388>
   14ecc:	6021      	str	r1, [r4, #0]
   14ece:	f891 e000 	ldrb.w	lr, [r1]
   14ed2:	f899 0000 	ldrb.w	r0, [r9]
   14ed6:	4586      	cmp	lr, r0
   14ed8:	d11c      	bne.n	14f14 <__ssvfscanf_r+0x3c0>
   14eda:	46da      	mov	sl, fp
   14edc:	f819 0f01 	ldrb.w	r0, [r9, #1]!
   14ee0:	4645      	mov	r5, r8
   14ee2:	f10a 0b01 	add.w	fp, sl, #1
   14ee6:	3101      	adds	r1, #1
   14ee8:	f108 0801 	add.w	r8, r8, #1
   14eec:	2800      	cmp	r0, #0
   14eee:	f000 8664 	beq.w	15bba <__ssvfscanf_r+0x1066>
   14ef2:	6860      	ldr	r0, [r4, #4]
   14ef4:	3801      	subs	r0, #1
   14ef6:	2800      	cmp	r0, #0
   14ef8:	6060      	str	r0, [r4, #4]
   14efa:	dce7      	bgt.n	14ecc <__ssvfscanf_r+0x378>
   14efc:	4621      	mov	r1, r4
   14efe:	4630      	mov	r0, r6
   14f00:	f002 ff96 	bl	17e30 <__ssrefill_r>
   14f04:	b930      	cbnz	r0, 14f14 <__ssvfscanf_r+0x3c0>
   14f06:	6821      	ldr	r1, [r4, #0]
   14f08:	f899 0000 	ldrb.w	r0, [r9]
   14f0c:	f891 e000 	ldrb.w	lr, [r1]
   14f10:	4586      	cmp	lr, r0
   14f12:	d0e2      	beq.n	14eda <__ssvfscanf_r+0x386>
   14f14:	46a3      	mov	fp, r4
   14f16:	6a3a      	ldr	r2, [r7, #32]
   14f18:	68bc      	ldr	r4, [r7, #8]
   14f1a:	613d      	str	r5, [r7, #16]
   14f1c:	462b      	mov	r3, r5
   14f1e:	46b1      	mov	r9, r6
   14f20:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   14f22:	68fd      	ldr	r5, [r7, #12]
   14f24:	64bd      	str	r5, [r7, #72]	; 0x48
   14f26:	3301      	adds	r3, #1
   14f28:	465d      	mov	r5, fp
   14f2a:	eb02 0803 	add.w	r8, r2, r3
   14f2e:	46b3      	mov	fp, r6
   14f30:	4626      	mov	r6, r4
   14f32:	4614      	mov	r4, r2
   14f34:	f818 1d01 	ldrb.w	r1, [r8, #-1]!
   14f38:	462a      	mov	r2, r5
   14f3a:	4648      	mov	r0, r9
   14f3c:	f002 ff38 	bl	17db0 <_sungetc_r>
   14f40:	4544      	cmp	r4, r8
   14f42:	d1f7      	bne.n	14f34 <__ssvfscanf_r+0x3e0>
   14f44:	693b      	ldr	r3, [r7, #16]
   14f46:	4634      	mov	r4, r6
   14f48:	ebaa 0a03 	sub.w	sl, sl, r3
   14f4c:	465e      	mov	r6, fp
   14f4e:	46ab      	mov	fp, r5
   14f50:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   14f52:	e020      	b.n	14f96 <__ssvfscanf_r+0x442>
   14f54:	05e0      	lsls	r0, r4, #23
   14f56:	f100 8501 	bmi.w	1595c <__ssvfscanf_r+0xe08>
   14f5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   14f5c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   14f5e:	42d9      	cmn	r1, r3
   14f60:	d116      	bne.n	14f90 <__ssvfscanf_r+0x43c>
   14f62:	f424 74c0 	bic.w	r4, r4, #384	; 0x180
   14f66:	f805 2b01 	strb.w	r2, [r5], #1
   14f6a:	3e01      	subs	r6, #1
   14f6c:	f8db 3004 	ldr.w	r3, [fp, #4]
   14f70:	3b01      	subs	r3, #1
   14f72:	2b00      	cmp	r3, #0
   14f74:	f10a 0a01 	add.w	sl, sl, #1
   14f78:	f8cb 3004 	str.w	r3, [fp, #4]
   14f7c:	f340 836f 	ble.w	1565e <__ssvfscanf_r+0xb0a>
   14f80:	f8db 3000 	ldr.w	r3, [fp]
   14f84:	3301      	adds	r3, #1
   14f86:	f8cb 3000 	str.w	r3, [fp]
   14f8a:	2e00      	cmp	r6, #0
   14f8c:	f47f af36 	bne.w	14dfc <__ssvfscanf_r+0x2a8>
   14f90:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   14f92:	ee18 9a10 	vmov	r9, s16
   14f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14f98:	2b00      	cmp	r3, #0
   14f9a:	f040 82dc 	bne.w	15556 <__ssvfscanf_r+0xa02>
   14f9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14fa0:	3b01      	subs	r3, #1
   14fa2:	2b01      	cmp	r3, #1
   14fa4:	f241 8016 	bls.w	15fd4 <__ssvfscanf_r+0x1480>
   14fa8:	1e73      	subs	r3, r6, #1
   14faa:	2b06      	cmp	r3, #6
   14fac:	f240 8627 	bls.w	15bfe <__ssvfscanf_r+0x10aa>
   14fb0:	05e3      	lsls	r3, r4, #23
   14fb2:	d51b      	bpl.n	14fec <__ssvfscanf_r+0x498>
   14fb4:	0566      	lsls	r6, r4, #21
   14fb6:	f101 80b5 	bmi.w	16124 <__ssvfscanf_r+0x15d0>
   14fba:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   14fbe:	2965      	cmp	r1, #101	; 0x65
   14fc0:	f105 33ff 	add.w	r3, r5, #4294967295
   14fc4:	f10a 36ff 	add.w	r6, sl, #4294967295
   14fc8:	d00a      	beq.n	14fe0 <__ssvfscanf_r+0x48c>
   14fca:	2945      	cmp	r1, #69	; 0x45
   14fcc:	d008      	beq.n	14fe0 <__ssvfscanf_r+0x48c>
   14fce:	465a      	mov	r2, fp
   14fd0:	4648      	mov	r0, r9
   14fd2:	f002 feed 	bl	17db0 <_sungetc_r>
   14fd6:	f815 1c02 	ldrb.w	r1, [r5, #-2]
   14fda:	f1aa 0602 	sub.w	r6, sl, #2
   14fde:	1eab      	subs	r3, r5, #2
   14fe0:	465a      	mov	r2, fp
   14fe2:	4648      	mov	r0, r9
   14fe4:	46b2      	mov	sl, r6
   14fe6:	461d      	mov	r5, r3
   14fe8:	f002 fee2 	bl	17db0 <_sungetc_r>
   14fec:	f014 0210 	ands.w	r2, r4, #16
   14ff0:	f47f add7 	bne.w	14ba2 <__ssvfscanf_r+0x4e>
   14ff4:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
   14ff8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   14ffc:	702a      	strb	r2, [r5, #0]
   14ffe:	f000 84d2 	beq.w	159a6 <__ssvfscanf_r+0xe52>
   15002:	69bb      	ldr	r3, [r7, #24]
   15004:	2b00      	cmp	r3, #0
   15006:	f040 872c 	bne.w	15e62 <__ssvfscanf_r+0x130e>
   1500a:	4648      	mov	r0, r9
   1500c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1500e:	2200      	movs	r2, #0
   15010:	f7fb fc62 	bl	108d8 <_strtod_r>
   15014:	07e0      	lsls	r0, r4, #31
   15016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   15018:	f100 85c9 	bmi.w	15bae <__ssvfscanf_r+0x105a>
   1501c:	07a1      	lsls	r1, r4, #30
   1501e:	f100 85c6 	bmi.w	15bae <__ssvfscanf_r+0x105a>
   15022:	eeb4 0b40 	vcmp.f64	d0, d0
   15026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1502a:	f853 4b04 	ldr.w	r4, [r3], #4
   1502e:	f180 86f4 	bvs.w	15e1a <__ssvfscanf_r+0x12c6>
   15032:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
   15036:	633b      	str	r3, [r7, #48]	; 0x30
   15038:	ed84 0a00 	vstr	s0, [r4]
   1503c:	e3a2      	b.n	15784 <__ssvfscanf_r+0xc30>
   1503e:	f108 33ff 	add.w	r3, r8, #4294967295
   15042:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
   15046:	f240 83a2 	bls.w	1578e <__ssvfscanf_r+0xc3a>
   1504a:	f46f 72ae 	mvn.w	r2, #348	; 0x15c
   1504e:	eb08 0302 	add.w	r3, r8, r2
   15052:	63fb      	str	r3, [r7, #60]	; 0x3c
   15054:	f240 185d 	movw	r8, #349	; 0x15d
   15058:	f507 73b8 	add.w	r3, r7, #368	; 0x170
   1505c:	2200      	movs	r2, #0
   1505e:	6bbe      	ldr	r6, [r7, #56]	; 0x38
   15060:	62bb      	str	r3, [r7, #40]	; 0x28
   15062:	4659      	mov	r1, fp
   15064:	f444 6458 	orr.w	r4, r4, #3456	; 0xd80
   15068:	46d3      	mov	fp, sl
   1506a:	461d      	mov	r5, r3
   1506c:	4692      	mov	sl, r2
   1506e:	680a      	ldr	r2, [r1, #0]
   15070:	7810      	ldrb	r0, [r2, #0]
   15072:	f1a0 032b 	sub.w	r3, r0, #43	; 0x2b
   15076:	2b4d      	cmp	r3, #77	; 0x4d
   15078:	d860      	bhi.n	1513c <__ssvfscanf_r+0x5e8>
   1507a:	e8df f013 	tbh	[pc, r3, lsl #1]
   1507e:	0282      	.short	0x0282
   15080:	0282005f 	.word	0x0282005f
   15084:	005f005f 	.word	0x005f005f
   15088:	01e002cd 	.word	0x01e002cd
   1508c:	01e001e0 	.word	0x01e001e0
   15090:	01e001e0 	.word	0x01e001e0
   15094:	01e001e0 	.word	0x01e001e0
   15098:	026f026f 	.word	0x026f026f
   1509c:	005f005f 	.word	0x005f005f
   150a0:	005f005f 	.word	0x005f005f
   150a4:	005f005f 	.word	0x005f005f
   150a8:	004e005f 	.word	0x004e005f
   150ac:	004e004e 	.word	0x004e004e
   150b0:	004e004e 	.word	0x004e004e
   150b4:	005f004e 	.word	0x005f004e
   150b8:	005f005f 	.word	0x005f005f
   150bc:	005f005f 	.word	0x005f005f
   150c0:	005f005f 	.word	0x005f005f
   150c4:	005f005f 	.word	0x005f005f
   150c8:	005f005f 	.word	0x005f005f
   150cc:	005f005f 	.word	0x005f005f
   150d0:	005f005f 	.word	0x005f005f
   150d4:	005f005f 	.word	0x005f005f
   150d8:	005f0276 	.word	0x005f0276
   150dc:	005f005f 	.word	0x005f005f
   150e0:	005f005f 	.word	0x005f005f
   150e4:	005f005f 	.word	0x005f005f
   150e8:	004e005f 	.word	0x004e005f
   150ec:	004e004e 	.word	0x004e004e
   150f0:	004e004e 	.word	0x004e004e
   150f4:	005f004e 	.word	0x005f004e
   150f8:	005f005f 	.word	0x005f005f
   150fc:	005f005f 	.word	0x005f005f
   15100:	005f005f 	.word	0x005f005f
   15104:	005f005f 	.word	0x005f005f
   15108:	005f005f 	.word	0x005f005f
   1510c:	005f005f 	.word	0x005f005f
   15110:	005f005f 	.word	0x005f005f
   15114:	005f005f 	.word	0x005f005f
   15118:	0276      	.short	0x0276
   1511a:	2e0a      	cmp	r6, #10
   1511c:	dd0e      	ble.n	1513c <__ssvfscanf_r+0x5e8>
   1511e:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
   15122:	684b      	ldr	r3, [r1, #4]
   15124:	f805 0b01 	strb.w	r0, [r5], #1
   15128:	3b01      	subs	r3, #1
   1512a:	2b00      	cmp	r3, #0
   1512c:	604b      	str	r3, [r1, #4]
   1512e:	f340 828d 	ble.w	1564c <__ssvfscanf_r+0xaf8>
   15132:	3201      	adds	r2, #1
   15134:	600a      	str	r2, [r1, #0]
   15136:	f1b8 0801 	subs.w	r8, r8, #1
   1513a:	d198      	bne.n	1506e <__ssvfscanf_r+0x51a>
   1513c:	05e0      	lsls	r0, r4, #23
   1513e:	46d0      	mov	r8, sl
   15140:	63be      	str	r6, [r7, #56]	; 0x38
   15142:	46da      	mov	sl, fp
   15144:	468b      	mov	fp, r1
   15146:	d507      	bpl.n	15158 <__ssvfscanf_r+0x604>
   15148:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1514a:	429d      	cmp	r5, r3
   1514c:	f200 8422 	bhi.w	15994 <__ssvfscanf_r+0xe40>
   15150:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15152:	429d      	cmp	r5, r3
   15154:	f43f adf3 	beq.w	14d3e <__ssvfscanf_r+0x1ea>
   15158:	f014 0210 	ands.w	r2, r4, #16
   1515c:	d110      	bne.n	15180 <__ssvfscanf_r+0x62c>
   1515e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   15160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   15162:	6afe      	ldr	r6, [r7, #44]	; 0x2c
   15164:	702a      	strb	r2, [r5, #0]
   15166:	4648      	mov	r0, r9
   15168:	47b0      	blx	r6
   1516a:	06a1      	lsls	r1, r4, #26
   1516c:	f140 8408 	bpl.w	15980 <__ssvfscanf_r+0xe2c>
   15170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   15172:	f853 2b04 	ldr.w	r2, [r3], #4
   15176:	6010      	str	r0, [r2, #0]
   15178:	633b      	str	r3, [r7, #48]	; 0x30
   1517a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1517c:	3301      	adds	r3, #1
   1517e:	647b      	str	r3, [r7, #68]	; 0x44
   15180:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15182:	1aed      	subs	r5, r5, r3
   15184:	4445      	add	r5, r8
   15186:	44aa      	add	sl, r5
   15188:	e50b      	b.n	14ba2 <__ssvfscanf_r+0x4e>
   1518a:	f1b8 0f00 	cmp.w	r8, #0
   1518e:	bf08      	it	eq
   15190:	f04f 38ff 	moveq.w	r8, #4294967295
   15194:	07e0      	lsls	r0, r4, #31
   15196:	f140 8295 	bpl.w	156c4 <__ssvfscanf_r+0xb70>
   1519a:	f014 0310 	ands.w	r3, r4, #16
   1519e:	637b      	str	r3, [r7, #52]	; 0x34
   151a0:	f040 8474 	bne.w	15a8c <__ssvfscanf_r+0xf38>
   151a4:	0621      	lsls	r1, r4, #24
   151a6:	f140 8666 	bpl.w	15e76 <__ssvfscanf_r+0x1322>
   151aa:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   151ac:	f854 3b04 	ldr.w	r3, [r4], #4
   151b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   151b2:	2b00      	cmp	r3, #0
   151b4:	f43f adc3 	beq.w	14d3e <__ssvfscanf_r+0x1ea>
   151b8:	2080      	movs	r0, #128	; 0x80
   151ba:	f7f9 ff8f 	bl	f0dc <malloc>
   151be:	64b8      	str	r0, [r7, #72]	; 0x48
   151c0:	2800      	cmp	r0, #0
   151c2:	f000 8778 	beq.w	160b6 <__ssvfscanf_r+0x1562>
   151c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   151c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
   151ca:	601a      	str	r2, [r3, #0]
   151cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   151ce:	88d5      	ldrh	r5, [r2, #6]
   151d0:	8893      	ldrh	r3, [r2, #4]
   151d2:	429d      	cmp	r5, r3
   151d4:	f080 8552 	bcs.w	15c7c <__ssvfscanf_r+0x1128>
   151d8:	6810      	ldr	r0, [r2, #0]
   151da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   151dc:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
   151e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   151e2:	633c      	str	r4, [r7, #48]	; 0x30
   151e4:	3501      	adds	r5, #1
   151e6:	80dd      	strh	r5, [r3, #6]
   151e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   151ea:	62bb      	str	r3, [r7, #40]	; 0x28
   151ec:	2320      	movs	r3, #32
   151ee:	623b      	str	r3, [r7, #32]
   151f0:	f8db 3000 	ldr.w	r3, [fp]
   151f4:	4eb1      	ldr	r6, [pc, #708]	; (154bc <__ssvfscanf_r+0x968>)
   151f6:	781b      	ldrb	r3, [r3, #0]
   151f8:	5cf3      	ldrb	r3, [r6, r3]
   151fa:	f013 0308 	ands.w	r3, r3, #8
   151fe:	f040 84bb 	bne.w	15b78 <__ssvfscanf_r+0x1024>
   15202:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   15204:	627e      	str	r6, [r7, #36]	; 0x24
   15206:	461d      	mov	r5, r3
   15208:	f7fc f8b6 	bl	11378 <__locale_mb_cur_max>
   1520c:	42a8      	cmp	r0, r5
   1520e:	f43f ad8d 	beq.w	14d2c <__ssvfscanf_r+0x1d8>
   15212:	e9db 3200 	ldrd	r3, r2, [fp]
   15216:	f507 70b8 	add.w	r0, r7, #368	; 0x170
   1521a:	f813 1b01 	ldrb.w	r1, [r3], #1
   1521e:	5541      	strb	r1, [r0, r5]
   15220:	3a01      	subs	r2, #1
   15222:	2c03      	cmp	r4, #3
   15224:	e9cb 3200 	strd	r3, r2, [fp]
   15228:	f105 0501 	add.w	r5, r5, #1
   1522c:	f107 0668 	add.w	r6, r7, #104	; 0x68
   15230:	d102      	bne.n	15238 <__ssvfscanf_r+0x6e4>
   15232:	6833      	ldr	r3, [r6, #0]
   15234:	2b04      	cmp	r3, #4
   15236:	d004      	beq.n	15242 <__ssvfscanf_r+0x6ee>
   15238:	2208      	movs	r2, #8
   1523a:	2100      	movs	r1, #0
   1523c:	4630      	mov	r0, r6
   1523e:	f7fb feb9 	bl	10fb4 <memset>
   15242:	f507 72b8 	add.w	r2, r7, #368	; 0x170
   15246:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   15248:	9600      	str	r6, [sp, #0]
   1524a:	462b      	mov	r3, r5
   1524c:	4648      	mov	r0, r9
   1524e:	f002 fbdb 	bl	17a08 <_mbrtowc_r>
   15252:	1c42      	adds	r2, r0, #1
   15254:	4604      	mov	r4, r0
   15256:	f43f ad69 	beq.w	14d2c <__ssvfscanf_r+0x1d8>
   1525a:	2800      	cmp	r0, #0
   1525c:	f040 8478 	bne.w	15b50 <__ssvfscanf_r+0xffc>
   15260:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   15262:	6018      	str	r0, [r3, #0]
   15264:	f002 fc2c 	bl	17ac0 <iswspace>
   15268:	2800      	cmp	r0, #0
   1526a:	f040 865c 	bne.w	15f26 <__ssvfscanf_r+0x13d2>
   1526e:	44aa      	add	sl, r5
   15270:	f108 38ff 	add.w	r8, r8, #4294967295
   15274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15276:	2b00      	cmp	r3, #0
   15278:	f040 8633 	bne.w	15ee2 <__ssvfscanf_r+0x138e>
   1527c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1527e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   15280:	3304      	adds	r3, #4
   15282:	64bb      	str	r3, [r7, #72]	; 0x48
   15284:	2a00      	cmp	r2, #0
   15286:	f000 862c 	beq.w	15ee2 <__ssvfscanf_r+0x138e>
   1528a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1528c:	1a9d      	subs	r5, r3, r2
   1528e:	6a3b      	ldr	r3, [r7, #32]
   15290:	ebb3 0fa5 	cmp.w	r3, r5, asr #2
   15294:	f240 8756 	bls.w	16144 <__ssvfscanf_r+0x15f0>
   15298:	6b7d      	ldr	r5, [r7, #52]	; 0x34
   1529a:	f000 bc5c 	b.w	15b56 <__ssvfscanf_r+0x1002>
   1529e:	f1b8 0f00 	cmp.w	r8, #0
   152a2:	bf08      	it	eq
   152a4:	f04f 38ff 	moveq.w	r8, #4294967295
   152a8:	07e0      	lsls	r0, r4, #31
   152aa:	f140 827b 	bpl.w	157a4 <__ssvfscanf_r+0xc50>
   152ae:	f014 0310 	ands.w	r3, r4, #16
   152b2:	62bb      	str	r3, [r7, #40]	; 0x28
   152b4:	f040 83f3 	bne.w	15a9e <__ssvfscanf_r+0xf4a>
   152b8:	0621      	lsls	r1, r4, #24
   152ba:	f140 85ed 	bpl.w	15e98 <__ssvfscanf_r+0x1344>
   152be:	6b3e      	ldr	r6, [r7, #48]	; 0x30
   152c0:	f856 3b04 	ldr.w	r3, [r6], #4
   152c4:	623b      	str	r3, [r7, #32]
   152c6:	2b00      	cmp	r3, #0
   152c8:	f43f ad39 	beq.w	14d3e <__ssvfscanf_r+0x1ea>
   152cc:	2080      	movs	r0, #128	; 0x80
   152ce:	f7f9 ff05 	bl	f0dc <malloc>
   152d2:	4604      	mov	r4, r0
   152d4:	2800      	cmp	r0, #0
   152d6:	f000 86ee 	beq.w	160b6 <__ssvfscanf_r+0x1562>
   152da:	6a3b      	ldr	r3, [r7, #32]
   152dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   152de:	6018      	str	r0, [r3, #0]
   152e0:	88d5      	ldrh	r5, [r2, #6]
   152e2:	8893      	ldrh	r3, [r2, #4]
   152e4:	429d      	cmp	r5, r3
   152e6:	f080 84dd 	bcs.w	15ca4 <__ssvfscanf_r+0x1150>
   152ea:	6810      	ldr	r0, [r2, #0]
   152ec:	6a3b      	ldr	r3, [r7, #32]
   152ee:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
   152f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   152f4:	633e      	str	r6, [r7, #48]	; 0x30
   152f6:	3501      	adds	r5, #1
   152f8:	80dd      	strh	r5, [r3, #6]
   152fa:	2320      	movs	r3, #32
   152fc:	61fc      	str	r4, [r7, #28]
   152fe:	61bb      	str	r3, [r7, #24]
   15300:	6a7e      	ldr	r6, [r7, #36]	; 0x24
   15302:	f8c7 a03c 	str.w	sl, [r7, #60]	; 0x3c
   15306:	2500      	movs	r5, #0
   15308:	46c2      	mov	sl, r8
   1530a:	46a0      	mov	r8, r4
   1530c:	f7fc f834 	bl	11378 <__locale_mb_cur_max>
   15310:	42a8      	cmp	r0, r5
   15312:	f43f ad0b 	beq.w	14d2c <__ssvfscanf_r+0x1d8>
   15316:	e9db 3200 	ldrd	r3, r2, [fp]
   1531a:	f813 1b01 	ldrb.w	r1, [r3], #1
   1531e:	3a01      	subs	r2, #1
   15320:	f507 70b8 	add.w	r0, r7, #368	; 0x170
   15324:	e9cb 3200 	strd	r3, r2, [fp]
   15328:	2e03      	cmp	r6, #3
   1532a:	f105 0301 	add.w	r3, r5, #1
   1532e:	5541      	strb	r1, [r0, r5]
   15330:	64bb      	str	r3, [r7, #72]	; 0x48
   15332:	f107 0460 	add.w	r4, r7, #96	; 0x60
   15336:	d102      	bne.n	1533e <__ssvfscanf_r+0x7ea>
   15338:	6823      	ldr	r3, [r4, #0]
   1533a:	2b04      	cmp	r3, #4
   1533c:	d004      	beq.n	15348 <__ssvfscanf_r+0x7f4>
   1533e:	2208      	movs	r2, #8
   15340:	2100      	movs	r1, #0
   15342:	4620      	mov	r0, r4
   15344:	f7fb fe36 	bl	10fb4 <memset>
   15348:	f507 72b8 	add.w	r2, r7, #368	; 0x170
   1534c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1534e:	9400      	str	r4, [sp, #0]
   15350:	4641      	mov	r1, r8
   15352:	4648      	mov	r0, r9
   15354:	f002 fb58 	bl	17a08 <_mbrtowc_r>
   15358:	1c42      	adds	r2, r0, #1
   1535a:	4606      	mov	r6, r0
   1535c:	f43f ace6 	beq.w	14d2c <__ssvfscanf_r+0x1d8>
   15360:	2800      	cmp	r0, #0
   15362:	f040 82ca 	bne.w	158fa <__ssvfscanf_r+0xda6>
   15366:	f8c8 0000 	str.w	r0, [r8]
   1536a:	4605      	mov	r5, r0
   1536c:	f107 0368 	add.w	r3, r7, #104	; 0x68
   15370:	2208      	movs	r2, #8
   15372:	2100      	movs	r1, #0
   15374:	4618      	mov	r0, r3
   15376:	637b      	str	r3, [r7, #52]	; 0x34
   15378:	f7fb fe1c 	bl	10fb4 <memset>
   1537c:	4950      	ldr	r1, [pc, #320]	; (154c0 <__ssvfscanf_r+0x96c>)
   1537e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15380:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
   15384:	462a      	mov	r2, r5
   15386:	4648      	mov	r0, r9
   15388:	460d      	mov	r5, r1
   1538a:	f107 0150 	add.w	r1, r7, #80	; 0x50
   1538e:	47a8      	blx	r5
   15390:	2801      	cmp	r0, #1
   15392:	f000 83d5 	beq.w	15b40 <__ssvfscanf_r+0xfec>
   15396:	2200      	movs	r2, #0
   15398:	f107 0370 	add.w	r3, r7, #112	; 0x70
   1539c:	5c9b      	ldrb	r3, [r3, r2]
   1539e:	2b00      	cmp	r3, #0
   153a0:	f000 85a1 	beq.w	15ee6 <__ssvfscanf_r+0x1392>
   153a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   153a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
   153a8:	2e03      	cmp	r6, #3
   153aa:	4413      	add	r3, r2
   153ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   153ae:	f000 83ca 	beq.w	15b46 <__ssvfscanf_r+0xff2>
   153b2:	f10a 3aff 	add.w	sl, sl, #4294967295
   153b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   153b8:	b95b      	cbnz	r3, 153d2 <__ssvfscanf_r+0x87e>
   153ba:	6a3b      	ldr	r3, [r7, #32]
   153bc:	f108 0804 	add.w	r8, r8, #4
   153c0:	b13b      	cbz	r3, 153d2 <__ssvfscanf_r+0x87e>
   153c2:	69fb      	ldr	r3, [r7, #28]
   153c4:	eba8 0403 	sub.w	r4, r8, r3
   153c8:	69bb      	ldr	r3, [r7, #24]
   153ca:	ebb3 0fa4 	cmp.w	r3, r4, asr #2
   153ce:	f240 8405 	bls.w	15bdc <__ssvfscanf_r+0x1088>
   153d2:	f8db 3004 	ldr.w	r3, [fp, #4]
   153d6:	2b00      	cmp	r3, #0
   153d8:	f04f 0500 	mov.w	r5, #0
   153dc:	f340 8296 	ble.w	1590c <__ssvfscanf_r+0xdb8>
   153e0:	f1ba 0f00 	cmp.w	sl, #0
   153e4:	d192      	bne.n	1530c <__ssvfscanf_r+0x7b8>
   153e6:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   153ea:	627e      	str	r6, [r7, #36]	; 0x24
   153ec:	4644      	mov	r4, r8
   153ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   153f0:	2b00      	cmp	r3, #0
   153f2:	f47f abd6 	bne.w	14ba2 <__ssvfscanf_r+0x4e>
   153f6:	6023      	str	r3, [r4, #0]
   153f8:	6a3b      	ldr	r3, [r7, #32]
   153fa:	2b00      	cmp	r3, #0
   153fc:	f000 81c2 	beq.w	15784 <__ssvfscanf_r+0xc30>
   15400:	69fb      	ldr	r3, [r7, #28]
   15402:	69ba      	ldr	r2, [r7, #24]
   15404:	1ae1      	subs	r1, r4, r3
   15406:	108b      	asrs	r3, r1, #2
   15408:	3301      	adds	r3, #1
   1540a:	429a      	cmp	r2, r3
   1540c:	f240 81ba 	bls.w	15784 <__ssvfscanf_r+0xc30>
   15410:	6a3c      	ldr	r4, [r7, #32]
   15412:	3104      	adds	r1, #4
   15414:	6820      	ldr	r0, [r4, #0]
   15416:	f7fa f92d 	bl	f674 <realloc>
   1541a:	2800      	cmp	r0, #0
   1541c:	f000 81b2 	beq.w	15784 <__ssvfscanf_r+0xc30>
   15420:	6020      	str	r0, [r4, #0]
   15422:	e1af      	b.n	15784 <__ssvfscanf_r+0xc30>
   15424:	0521      	lsls	r1, r4, #20
   15426:	f57f adb3 	bpl.w	14f90 <__ssvfscanf_r+0x43c>
   1542a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1542c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   1542e:	185b      	adds	r3, r3, r1
   15430:	f47f adae 	bne.w	14f90 <__ssvfscanf_r+0x43c>
   15434:	64bb      	str	r3, [r7, #72]	; 0x48
   15436:	f424 74c0 	bic.w	r4, r4, #384	; 0x180
   1543a:	63fb      	str	r3, [r7, #60]	; 0x3c
   1543c:	e593      	b.n	14f66 <__ssvfscanf_r+0x412>
   1543e:	4b21      	ldr	r3, [pc, #132]	; (154c4 <__ssvfscanf_r+0x970>)
   15440:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
   15444:	f933 6016 	ldrsh.w	r6, [r3, r6, lsl #1]
   15448:	e66b      	b.n	15122 <__ssvfscanf_r+0x5ce>
   1544a:	f404 6318 	and.w	r3, r4, #2432	; 0x980
   1544e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   15452:	f47f ad9d 	bne.w	14f90 <__ssvfscanf_r+0x43c>
   15456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15458:	2b01      	cmp	r3, #1
   1545a:	f47f ad99 	bne.w	14f90 <__ssvfscanf_r+0x43c>
   1545e:	2330      	movs	r3, #48	; 0x30
   15460:	f805 3b01 	strb.w	r3, [r5], #1
   15464:	f424 7480 	bic.w	r4, r4, #256	; 0x100
   15468:	2300      	movs	r3, #0
   1546a:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   1546e:	3e01      	subs	r6, #1
   15470:	637b      	str	r3, [r7, #52]	; 0x34
   15472:	e578      	b.n	14f66 <__ssvfscanf_r+0x412>
   15474:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   15476:	2b06      	cmp	r3, #6
   15478:	f040 8574 	bne.w	15f64 <__ssvfscanf_r+0x1410>
   1547c:	2307      	movs	r3, #7
   1547e:	64bb      	str	r3, [r7, #72]	; 0x48
   15480:	e571      	b.n	14f66 <__ssvfscanf_r+0x412>
   15482:	0523      	lsls	r3, r4, #20
   15484:	f57f ad84 	bpl.w	14f90 <__ssvfscanf_r+0x43c>
   15488:	f404 63a0 	and.w	r3, r4, #1280	; 0x500
   1548c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   15490:	d005      	beq.n	1549e <__ssvfscanf_r+0x94a>
   15492:	0561      	lsls	r1, r4, #21
   15494:	f57f ad7c 	bpl.w	14f90 <__ssvfscanf_r+0x43c>
   15498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1549a:	2b00      	cmp	r3, #0
   1549c:	d047      	beq.n	1552e <__ssvfscanf_r+0x9da>
   1549e:	05a3      	lsls	r3, r4, #22
   154a0:	d404      	bmi.n	154ac <__ssvfscanf_r+0x958>
   154a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   154a4:	69f9      	ldr	r1, [r7, #28]
   154a6:	1a5b      	subs	r3, r3, r1
   154a8:	e9c7 5305 	strd	r5, r3, [r7, #20]
   154ac:	f424 6478 	bic.w	r4, r4, #3968	; 0xf80
   154b0:	2300      	movs	r3, #0
   154b2:	f444 74c0 	orr.w	r4, r4, #384	; 0x180
   154b6:	637b      	str	r3, [r7, #52]	; 0x34
   154b8:	e555      	b.n	14f66 <__ssvfscanf_r+0x412>
   154ba:	bf00      	nop
   154bc:	2000369d 	.word	0x2000369d
   154c0:	2000c16c 	.word	0x2000c16c
   154c4:	200052c0 	.word	0x200052c0
   154c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   154ca:	2b00      	cmp	r3, #0
   154cc:	f000 81ff 	beq.w	158ce <__ssvfscanf_r+0xd7a>
   154d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   154d2:	2b02      	cmp	r3, #2
   154d4:	f000 83b0 	beq.w	15c38 <__ssvfscanf_r+0x10e4>
   154d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   154da:	2b01      	cmp	r3, #1
   154dc:	f000 81f1 	beq.w	158c2 <__ssvfscanf_r+0xd6e>
   154e0:	2b04      	cmp	r3, #4
   154e2:	f000 81ee 	beq.w	158c2 <__ssvfscanf_r+0xd6e>
   154e6:	e553      	b.n	14f90 <__ssvfscanf_r+0x43c>
   154e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   154ea:	2b07      	cmp	r3, #7
   154ec:	f040 853a 	bne.w	15f64 <__ssvfscanf_r+0x1410>
   154f0:	2308      	movs	r3, #8
   154f2:	64bb      	str	r3, [r7, #72]	; 0x48
   154f4:	e537      	b.n	14f66 <__ssvfscanf_r+0x412>
   154f6:	0520      	lsls	r0, r4, #20
   154f8:	f100 81f9 	bmi.w	158ee <__ssvfscanf_r+0xd9a>
   154fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   154fe:	2b01      	cmp	r3, #1
   15500:	f47f ad46 	bne.w	14f90 <__ssvfscanf_r+0x43c>
   15504:	2302      	movs	r3, #2
   15506:	63fb      	str	r3, [r7, #60]	; 0x3c
   15508:	e52d      	b.n	14f66 <__ssvfscanf_r+0x412>
   1550a:	0623      	lsls	r3, r4, #24
   1550c:	f57f ad40 	bpl.w	14f90 <__ssvfscanf_r+0x43c>
   15510:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   15514:	e527      	b.n	14f66 <__ssvfscanf_r+0x412>
   15516:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   15518:	2b00      	cmp	r3, #0
   1551a:	f040 81cc 	bne.w	158b6 <__ssvfscanf_r+0xd62>
   1551e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15520:	b9b3      	cbnz	r3, 15550 <__ssvfscanf_r+0x9fc>
   15522:	f404 63e0 	and.w	r3, r4, #1792	; 0x700
   15526:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
   1552a:	f000 8520 	beq.w	15f6e <__ssvfscanf_r+0x141a>
   1552e:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   15530:	ee18 9a10 	vmov	r9, s16
   15534:	e533      	b.n	14f9e <__ssvfscanf_r+0x44a>
   15536:	0521      	lsls	r1, r4, #20
   15538:	f100 81b7 	bmi.w	158aa <__ssvfscanf_r+0xd56>
   1553c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1553e:	2b02      	cmp	r3, #2
   15540:	f040 8510 	bne.w	15f64 <__ssvfscanf_r+0x1410>
   15544:	2303      	movs	r3, #3
   15546:	64bb      	str	r3, [r7, #72]	; 0x48
   15548:	e50d      	b.n	14f66 <__ssvfscanf_r+0x412>
   1554a:	0520      	lsls	r0, r4, #20
   1554c:	d59c      	bpl.n	15488 <__ssvfscanf_r+0x934>
   1554e:	e76c      	b.n	1542a <__ssvfscanf_r+0x8d6>
   15550:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   15552:	ee18 9a10 	vmov	r9, s16
   15556:	f424 7480 	bic.w	r4, r4, #256	; 0x100
   1555a:	e520      	b.n	14f9e <__ssvfscanf_r+0x44a>
   1555c:	4b8d      	ldr	r3, [pc, #564]	; (15794 <__ssvfscanf_r+0xc40>)
   1555e:	f933 6016 	ldrsh.w	r6, [r3, r6, lsl #1]
   15562:	2e08      	cmp	r6, #8
   15564:	f73f addb 	bgt.w	1511e <__ssvfscanf_r+0x5ca>
   15568:	e5e8      	b.n	1513c <__ssvfscanf_r+0x5e8>
   1556a:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
   1556e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   15572:	f47f ade3 	bne.w	1513c <__ssvfscanf_r+0x5e8>
   15576:	f424 7400 	bic.w	r4, r4, #512	; 0x200
   1557a:	f444 64a0 	orr.w	r4, r4, #1280	; 0x500
   1557e:	2610      	movs	r6, #16
   15580:	e5cf      	b.n	15122 <__ssvfscanf_r+0x5ce>
   15582:	0623      	lsls	r3, r4, #24
   15584:	f57f adda 	bpl.w	1513c <__ssvfscanf_r+0x5e8>
   15588:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   1558c:	e5c9      	b.n	15122 <__ssvfscanf_r+0x5ce>
   1558e:	f044 0401 	orr.w	r4, r4, #1
   15592:	f8db 3004 	ldr.w	r3, [fp, #4]
   15596:	64f9      	str	r1, [r7, #76]	; 0x4c
   15598:	2b00      	cmp	r3, #0
   1559a:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   1559e:	f04f 0500 	mov.w	r5, #0
   155a2:	f73f abf8 	bgt.w	14d96 <__ssvfscanf_r+0x242>
   155a6:	4659      	mov	r1, fp
   155a8:	4648      	mov	r0, r9
   155aa:	f002 fc41 	bl	17e30 <__ssrefill_r>
   155ae:	2800      	cmp	r0, #0
   155b0:	f47f abbc 	bne.w	14d2c <__ssvfscanf_r+0x1d8>
   155b4:	0660      	lsls	r0, r4, #25
   155b6:	f53f abf1 	bmi.w	14d9c <__ssvfscanf_r+0x248>
   155ba:	f8db 2000 	ldr.w	r2, [fp]
   155be:	4e76      	ldr	r6, [pc, #472]	; (15798 <__ssvfscanf_r+0xc44>)
   155c0:	7813      	ldrb	r3, [r2, #0]
   155c2:	5cf3      	ldrb	r3, [r6, r3]
   155c4:	0719      	lsls	r1, r3, #28
   155c6:	f57f abe9 	bpl.w	14d9c <__ssvfscanf_r+0x248>
   155ca:	f8db 3004 	ldr.w	r3, [fp, #4]
   155ce:	3b01      	subs	r3, #1
   155d0:	2b00      	cmp	r3, #0
   155d2:	f10a 0a01 	add.w	sl, sl, #1
   155d6:	f8cb 3004 	str.w	r3, [fp, #4]
   155da:	f102 0201 	add.w	r2, r2, #1
   155de:	dd4a      	ble.n	15676 <__ssvfscanf_r+0xb22>
   155e0:	f8cb 2000 	str.w	r2, [fp]
   155e4:	7813      	ldrb	r3, [r2, #0]
   155e6:	5cf3      	ldrb	r3, [r6, r3]
   155e8:	0719      	lsls	r1, r3, #28
   155ea:	f57f abd7 	bpl.w	14d9c <__ssvfscanf_r+0x248>
   155ee:	e7ec      	b.n	155ca <__ssvfscanf_r+0xa76>
   155f0:	f044 0401 	orr.w	r4, r4, #1
   155f4:	4b69      	ldr	r3, [pc, #420]	; (1579c <__ssvfscanf_r+0xc48>)
   155f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   155f8:	2308      	movs	r3, #8
   155fa:	64f9      	str	r1, [r7, #76]	; 0x4c
   155fc:	63bb      	str	r3, [r7, #56]	; 0x38
   155fe:	2503      	movs	r5, #3
   15600:	f7ff bbc4 	b.w	14d8c <__ssvfscanf_r+0x238>
   15604:	f044 0401 	orr.w	r4, r4, #1
   15608:	4b65      	ldr	r3, [pc, #404]	; (157a0 <__ssvfscanf_r+0xc4c>)
   1560a:	62fb      	str	r3, [r7, #44]	; 0x2c
   1560c:	230a      	movs	r3, #10
   1560e:	64f9      	str	r1, [r7, #76]	; 0x4c
   15610:	63bb      	str	r3, [r7, #56]	; 0x38
   15612:	2503      	movs	r5, #3
   15614:	f7ff bbba 	b.w	14d8c <__ssvfscanf_r+0x238>
   15618:	0523      	lsls	r3, r4, #20
   1561a:	f57f ad82 	bpl.w	15122 <__ssvfscanf_r+0x5ce>
   1561e:	b916      	cbnz	r6, 15626 <__ssvfscanf_r+0xad2>
   15620:	f444 7400 	orr.w	r4, r4, #512	; 0x200
   15624:	2608      	movs	r6, #8
   15626:	0563      	lsls	r3, r4, #21
   15628:	f100 81a6 	bmi.w	15978 <__ssvfscanf_r+0xe24>
   1562c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1562e:	f424 7460 	bic.w	r4, r4, #896	; 0x380
   15632:	b11b      	cbz	r3, 1563c <__ssvfscanf_r+0xae8>
   15634:	3b01      	subs	r3, #1
   15636:	63fb      	str	r3, [r7, #60]	; 0x3c
   15638:	f108 0801 	add.w	r8, r8, #1
   1563c:	684b      	ldr	r3, [r1, #4]
   1563e:	3b01      	subs	r3, #1
   15640:	2b00      	cmp	r3, #0
   15642:	f10a 0a01 	add.w	sl, sl, #1
   15646:	604b      	str	r3, [r1, #4]
   15648:	f73f ad73 	bgt.w	15132 <__ssvfscanf_r+0x5de>
   1564c:	4648      	mov	r0, r9
   1564e:	64b9      	str	r1, [r7, #72]	; 0x48
   15650:	f002 fbee 	bl	17e30 <__ssrefill_r>
   15654:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   15656:	2800      	cmp	r0, #0
   15658:	f43f ad6d 	beq.w	15136 <__ssvfscanf_r+0x5e2>
   1565c:	e56e      	b.n	1513c <__ssvfscanf_r+0x5e8>
   1565e:	ee18 0a10 	vmov	r0, s16
   15662:	4659      	mov	r1, fp
   15664:	f002 fbe4 	bl	17e30 <__ssrefill_r>
   15668:	2800      	cmp	r0, #0
   1566a:	f47f ac91 	bne.w	14f90 <__ssvfscanf_r+0x43c>
   1566e:	2e00      	cmp	r6, #0
   15670:	f47f abc4 	bne.w	14dfc <__ssvfscanf_r+0x2a8>
   15674:	e48c      	b.n	14f90 <__ssvfscanf_r+0x43c>
   15676:	4659      	mov	r1, fp
   15678:	4648      	mov	r0, r9
   1567a:	f002 fbd9 	bl	17e30 <__ssrefill_r>
   1567e:	2800      	cmp	r0, #0
   15680:	f47f ab54 	bne.w	14d2c <__ssvfscanf_r+0x1d8>
   15684:	f8db 2000 	ldr.w	r2, [fp]
   15688:	e79a      	b.n	155c0 <__ssvfscanf_r+0xa6c>
   1568a:	f8db 2004 	ldr.w	r2, [fp, #4]
   1568e:	e00f      	b.n	156b0 <__ssvfscanf_r+0xb5c>
   15690:	f8db 3000 	ldr.w	r3, [fp]
   15694:	781a      	ldrb	r2, [r3, #0]
   15696:	5cb2      	ldrb	r2, [r6, r2]
   15698:	0711      	lsls	r1, r2, #28
   1569a:	f103 0301 	add.w	r3, r3, #1
   1569e:	f57f aa80 	bpl.w	14ba2 <__ssvfscanf_r+0x4e>
   156a2:	f8db 2004 	ldr.w	r2, [fp, #4]
   156a6:	3a01      	subs	r2, #1
   156a8:	e9cb 3200 	strd	r3, r2, [fp]
   156ac:	f10a 0a01 	add.w	sl, sl, #1
   156b0:	2a00      	cmp	r2, #0
   156b2:	dced      	bgt.n	15690 <__ssvfscanf_r+0xb3c>
   156b4:	4659      	mov	r1, fp
   156b6:	4648      	mov	r0, r9
   156b8:	f002 fbba 	bl	17e30 <__ssrefill_r>
   156bc:	2800      	cmp	r0, #0
   156be:	d0e7      	beq.n	15690 <__ssvfscanf_r+0xb3c>
   156c0:	f7ff ba6f 	b.w	14ba2 <__ssvfscanf_r+0x4e>
   156c4:	06e1      	lsls	r1, r4, #27
   156c6:	f100 8349 	bmi.w	15d5c <__ssvfscanf_r+0x1208>
   156ca:	f014 0480 	ands.w	r4, r4, #128	; 0x80
   156ce:	f000 83ab 	beq.w	15e28 <__ssvfscanf_r+0x12d4>
   156d2:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   156d4:	f854 6b04 	ldr.w	r6, [r4], #4
   156d8:	64be      	str	r6, [r7, #72]	; 0x48
   156da:	2e00      	cmp	r6, #0
   156dc:	f43f ab2f 	beq.w	14d3e <__ssvfscanf_r+0x1ea>
   156e0:	2020      	movs	r0, #32
   156e2:	f7f9 fcfb 	bl	f0dc <malloc>
   156e6:	4605      	mov	r5, r0
   156e8:	2800      	cmp	r0, #0
   156ea:	f000 8462 	beq.w	15fb2 <__ssvfscanf_r+0x145e>
   156ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   156f0:	6030      	str	r0, [r6, #0]
   156f2:	8893      	ldrh	r3, [r2, #4]
   156f4:	88d6      	ldrh	r6, [r2, #6]
   156f6:	429e      	cmp	r6, r3
   156f8:	f080 82a8 	bcs.w	15c4c <__ssvfscanf_r+0x10f8>
   156fc:	6810      	ldr	r0, [r2, #0]
   156fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   15700:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
   15704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   15706:	633c      	str	r4, [r7, #48]	; 0x30
   15708:	3601      	adds	r6, #1
   1570a:	80de      	strh	r6, [r3, #6]
   1570c:	2320      	movs	r3, #32
   1570e:	63fb      	str	r3, [r7, #60]	; 0x3c
   15710:	f8db 2000 	ldr.w	r2, [fp]
   15714:	4e20      	ldr	r6, [pc, #128]	; (15798 <__ssvfscanf_r+0xc44>)
   15716:	7811      	ldrb	r1, [r2, #0]
   15718:	5c71      	ldrb	r1, [r6, r1]
   1571a:	0708      	lsls	r0, r1, #28
   1571c:	f100 82ac 	bmi.w	15c78 <__ssvfscanf_r+0x1124>
   15720:	4633      	mov	r3, r6
   15722:	462c      	mov	r4, r5
   15724:	4610      	mov	r0, r2
   15726:	462e      	mov	r6, r5
   15728:	f8db 1004 	ldr.w	r1, [fp, #4]
   1572c:	6cba      	ldr	r2, [r7, #72]	; 0x48
   1572e:	3901      	subs	r1, #1
   15730:	f8cb 1004 	str.w	r1, [fp, #4]
   15734:	1c41      	adds	r1, r0, #1
   15736:	f8cb 1000 	str.w	r1, [fp]
   1573a:	4635      	mov	r5, r6
   1573c:	7801      	ldrb	r1, [r0, #0]
   1573e:	f805 1b01 	strb.w	r1, [r5], #1
   15742:	b122      	cbz	r2, 1574e <__ssvfscanf_r+0xbfa>
   15744:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   15746:	1b2e      	subs	r6, r5, r4
   15748:	4296      	cmp	r6, r2
   1574a:	f080 837a 	bcs.w	15e42 <__ssvfscanf_r+0x12ee>
   1574e:	f1b8 0801 	subs.w	r8, r8, #1
   15752:	d00b      	beq.n	1576c <__ssvfscanf_r+0xc18>
   15754:	f8db 1004 	ldr.w	r1, [fp, #4]
   15758:	2900      	cmp	r1, #0
   1575a:	462e      	mov	r6, r5
   1575c:	f340 83ae 	ble.w	15ebc <__ssvfscanf_r+0x1368>
   15760:	f8db 0000 	ldr.w	r0, [fp]
   15764:	7801      	ldrb	r1, [r0, #0]
   15766:	5c59      	ldrb	r1, [r3, r1]
   15768:	0709      	lsls	r1, r1, #28
   1576a:	d5dd      	bpl.n	15728 <__ssvfscanf_r+0xbd4>
   1576c:	1b29      	subs	r1, r5, r4
   1576e:	448a      	add	sl, r1
   15770:	3101      	adds	r1, #1
   15772:	f04f 0300 	mov.w	r3, #0
   15776:	702b      	strb	r3, [r5, #0]
   15778:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1577a:	b11b      	cbz	r3, 15784 <__ssvfscanf_r+0xc30>
   1577c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1577e:	428b      	cmp	r3, r1
   15780:	f200 8394 	bhi.w	15eac <__ssvfscanf_r+0x1358>
   15784:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   15786:	3301      	adds	r3, #1
   15788:	647b      	str	r3, [r7, #68]	; 0x44
   1578a:	f7ff ba0a 	b.w	14ba2 <__ssvfscanf_r+0x4e>
   1578e:	2300      	movs	r3, #0
   15790:	63fb      	str	r3, [r7, #60]	; 0x3c
   15792:	e461      	b.n	15058 <__ssvfscanf_r+0x504>
   15794:	200052c0 	.word	0x200052c0
   15798:	2000369d 	.word	0x2000369d
   1579c:	000176f5 	.word	0x000176f5
   157a0:	00010a29 	.word	0x00010a29
   157a4:	06e6      	lsls	r6, r4, #27
   157a6:	f100 8181 	bmi.w	15aac <__ssvfscanf_r+0xf58>
   157aa:	f014 0480 	ands.w	r4, r4, #128	; 0x80
   157ae:	f000 836d 	beq.w	15e8c <__ssvfscanf_r+0x1338>
   157b2:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   157b4:	f854 6b04 	ldr.w	r6, [r4], #4
   157b8:	64be      	str	r6, [r7, #72]	; 0x48
   157ba:	2e00      	cmp	r6, #0
   157bc:	f43f aabf 	beq.w	14d3e <__ssvfscanf_r+0x1ea>
   157c0:	2020      	movs	r0, #32
   157c2:	f7f9 fc8b 	bl	f0dc <malloc>
   157c6:	4605      	mov	r5, r0
   157c8:	2800      	cmp	r0, #0
   157ca:	f000 83f2 	beq.w	15fb2 <__ssvfscanf_r+0x145e>
   157ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   157d0:	6030      	str	r0, [r6, #0]
   157d2:	8893      	ldrh	r3, [r2, #4]
   157d4:	88d6      	ldrh	r6, [r2, #6]
   157d6:	429e      	cmp	r6, r3
   157d8:	f080 827a 	bcs.w	15cd0 <__ssvfscanf_r+0x117c>
   157dc:	6810      	ldr	r0, [r2, #0]
   157de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   157e0:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
   157e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   157e6:	633c      	str	r4, [r7, #48]	; 0x30
   157e8:	3601      	adds	r6, #1
   157ea:	80de      	strh	r6, [r3, #6]
   157ec:	2420      	movs	r4, #32
   157ee:	f8db 2000 	ldr.w	r2, [fp]
   157f2:	f107 0370 	add.w	r3, r7, #112	; 0x70
   157f6:	4619      	mov	r1, r3
   157f8:	7813      	ldrb	r3, [r2, #0]
   157fa:	5ccb      	ldrb	r3, [r1, r3]
   157fc:	2b00      	cmp	r3, #0
   157fe:	f43f aa9e 	beq.w	14d3e <__ssvfscanf_r+0x1ea>
   15802:	ee08 9a10 	vmov	s16, r9
   15806:	f8d7 9048 	ldr.w	r9, [r7, #72]	; 0x48
   1580a:	f8c7 a03c 	str.w	sl, [r7, #60]	; 0x3c
   1580e:	462e      	mov	r6, r5
   15810:	46a2      	mov	sl, r4
   15812:	4610      	mov	r0, r2
   15814:	460c      	mov	r4, r1
   15816:	f8db 1004 	ldr.w	r1, [fp, #4]
   1581a:	1c43      	adds	r3, r0, #1
   1581c:	3901      	subs	r1, #1
   1581e:	e9cb 3100 	strd	r3, r1, [fp]
   15822:	4629      	mov	r1, r5
   15824:	7800      	ldrb	r0, [r0, #0]
   15826:	f801 0b01 	strb.w	r0, [r1], #1
   1582a:	f1b9 0f00 	cmp.w	r9, #0
   1582e:	d002      	beq.n	15836 <__ssvfscanf_r+0xce2>
   15830:	1b8d      	subs	r5, r1, r6
   15832:	4555      	cmp	r5, sl
   15834:	d27a      	bcs.n	1592c <__ssvfscanf_r+0xdd8>
   15836:	460d      	mov	r5, r1
   15838:	f1b8 0801 	subs.w	r8, r8, #1
   1583c:	d00a      	beq.n	15854 <__ssvfscanf_r+0xd00>
   1583e:	f8db 1004 	ldr.w	r1, [fp, #4]
   15842:	2900      	cmp	r1, #0
   15844:	f340 816a 	ble.w	15b1c <__ssvfscanf_r+0xfc8>
   15848:	f8db 0000 	ldr.w	r0, [fp]
   1584c:	7801      	ldrb	r1, [r0, #0]
   1584e:	5c61      	ldrb	r1, [r4, r1]
   15850:	2900      	cmp	r1, #0
   15852:	d1e0      	bne.n	15816 <__ssvfscanf_r+0xcc2>
   15854:	4654      	mov	r4, sl
   15856:	ee18 9a10 	vmov	r9, s16
   1585a:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   1585e:	1bae      	subs	r6, r5, r6
   15860:	f43f aa6d 	beq.w	14d3e <__ssvfscanf_r+0x1ea>
   15864:	f04f 0300 	mov.w	r3, #0
   15868:	702b      	strb	r3, [r5, #0]
   1586a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1586c:	b11b      	cbz	r3, 15876 <__ssvfscanf_r+0xd22>
   1586e:	1c71      	adds	r1, r6, #1
   15870:	428c      	cmp	r4, r1
   15872:	f200 832d 	bhi.w	15ed0 <__ssvfscanf_r+0x137c>
   15876:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   15878:	3301      	adds	r3, #1
   1587a:	44b2      	add	sl, r6
   1587c:	647b      	str	r3, [r7, #68]	; 0x44
   1587e:	f7ff b990 	b.w	14ba2 <__ssvfscanf_r+0x4e>
   15882:	2300      	movs	r3, #0
   15884:	613b      	str	r3, [r7, #16]
   15886:	f7ff baa9 	b.w	14ddc <__ssvfscanf_r+0x288>
   1588a:	f014 0f8f 	tst.w	r4, #143	; 0x8f
   1588e:	f47f aa56 	bne.w	14d3e <__ssvfscanf_r+0x1ea>
   15892:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   15896:	eb02 0848 	add.w	r8, r2, r8, lsl #1
   1589a:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
   1589e:	f7ff ba67 	b.w	14d70 <__ssvfscanf_r+0x21c>
   158a2:	64f9      	str	r1, [r7, #76]	; 0x4c
   158a4:	2504      	movs	r5, #4
   158a6:	f7ff ba71 	b.w	14d8c <__ssvfscanf_r+0x238>
   158aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   158ac:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   158ae:	185b      	adds	r3, r3, r1
   158b0:	f47f ae44 	bne.w	1553c <__ssvfscanf_r+0x9e8>
   158b4:	e5be      	b.n	15434 <__ssvfscanf_r+0x8e0>
   158b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   158b8:	2b03      	cmp	r3, #3
   158ba:	d002      	beq.n	158c2 <__ssvfscanf_r+0xd6e>
   158bc:	2b05      	cmp	r3, #5
   158be:	f47f ab67 	bne.w	14f90 <__ssvfscanf_r+0x43c>
   158c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   158c4:	3301      	adds	r3, #1
   158c6:	b2db      	uxtb	r3, r3
   158c8:	64bb      	str	r3, [r7, #72]	; 0x48
   158ca:	f7ff bb4c 	b.w	14f66 <__ssvfscanf_r+0x412>
   158ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   158d0:	2b00      	cmp	r3, #0
   158d2:	f47f ae01 	bne.w	154d8 <__ssvfscanf_r+0x984>
   158d6:	f404 63e0 	and.w	r3, r4, #1792	; 0x700
   158da:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
   158de:	f47f adfb 	bne.w	154d8 <__ssvfscanf_r+0x984>
   158e2:	2301      	movs	r3, #1
   158e4:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
   158e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   158ea:	f7ff bb3c 	b.w	14f66 <__ssvfscanf_r+0x412>
   158ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   158f0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   158f2:	185b      	adds	r3, r3, r1
   158f4:	f47f ae02 	bne.w	154fc <__ssvfscanf_r+0x9a8>
   158f8:	e59c      	b.n	15434 <__ssvfscanf_r+0x8e0>
   158fa:	1c83      	adds	r3, r0, #2
   158fc:	f040 845b 	bne.w	161b6 <__ssvfscanf_r+0x1662>
   15900:	f8db 3004 	ldr.w	r3, [fp, #4]
   15904:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   15906:	2b00      	cmp	r3, #0
   15908:	f73f ad00 	bgt.w	1530c <__ssvfscanf_r+0x7b8>
   1590c:	4659      	mov	r1, fp
   1590e:	4648      	mov	r0, r9
   15910:	f002 fa8e 	bl	17e30 <__ssrefill_r>
   15914:	2800      	cmp	r0, #0
   15916:	f43f ad63 	beq.w	153e0 <__ssvfscanf_r+0x88c>
   1591a:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   1591e:	627e      	str	r6, [r7, #36]	; 0x24
   15920:	4644      	mov	r4, r8
   15922:	2d00      	cmp	r5, #0
   15924:	f43f ad63 	beq.w	153ee <__ssvfscanf_r+0x89a>
   15928:	f7ff ba00 	b.w	14d2c <__ssvfscanf_r+0x1d8>
   1592c:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
   15930:	4630      	mov	r0, r6
   15932:	4651      	mov	r1, sl
   15934:	f7f9 fe9e 	bl	f674 <realloc>
   15938:	4606      	mov	r6, r0
   1593a:	2800      	cmp	r0, #0
   1593c:	f000 8339 	beq.w	15fb2 <__ssvfscanf_r+0x145e>
   15940:	4405      	add	r5, r0
   15942:	f8c9 0000 	str.w	r0, [r9]
   15946:	e777      	b.n	15838 <__ssvfscanf_r+0xce4>
   15948:	f444 7400 	orr.w	r4, r4, #512	; 0x200
   1594c:	4bbc      	ldr	r3, [pc, #752]	; (15c40 <__ssvfscanf_r+0x10ec>)
   1594e:	62fb      	str	r3, [r7, #44]	; 0x2c
   15950:	2310      	movs	r3, #16
   15952:	64f9      	str	r1, [r7, #76]	; 0x4c
   15954:	63bb      	str	r3, [r7, #56]	; 0x38
   15956:	2503      	movs	r5, #3
   15958:	f7ff ba18 	b.w	14d8c <__ssvfscanf_r+0x238>
   1595c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1595e:	3301      	adds	r3, #1
   15960:	637b      	str	r3, [r7, #52]	; 0x34
   15962:	693b      	ldr	r3, [r7, #16]
   15964:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   15968:	2b00      	cmp	r3, #0
   1596a:	f43f aafe 	beq.w	14f6a <__ssvfscanf_r+0x416>
   1596e:	693b      	ldr	r3, [r7, #16]
   15970:	3b01      	subs	r3, #1
   15972:	613b      	str	r3, [r7, #16]
   15974:	f7ff bafa 	b.w	14f6c <__ssvfscanf_r+0x418>
   15978:	f424 64b0 	bic.w	r4, r4, #1408	; 0x580
   1597c:	f7ff bbd1 	b.w	15122 <__ssvfscanf_r+0x5ce>
   15980:	0722      	lsls	r2, r4, #28
   15982:	f140 81c7 	bpl.w	15d14 <__ssvfscanf_r+0x11c0>
   15986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   15988:	f853 2b04 	ldr.w	r2, [r3], #4
   1598c:	633b      	str	r3, [r7, #48]	; 0x30
   1598e:	7010      	strb	r0, [r2, #0]
   15990:	f7ff bbf3 	b.w	1517a <__ssvfscanf_r+0x626>
   15994:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   15998:	465a      	mov	r2, fp
   1599a:	4648      	mov	r0, r9
   1599c:	3d01      	subs	r5, #1
   1599e:	f002 fa07 	bl	17db0 <_sungetc_r>
   159a2:	f7ff bbd5 	b.w	15150 <__ssvfscanf_r+0x5fc>
   159a6:	69fb      	ldr	r3, [r7, #28]
   159a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   159aa:	4293      	cmp	r3, r2
   159ac:	f43f ab2d 	beq.w	1500a <__ssvfscanf_r+0x4b6>
   159b0:	1a9a      	subs	r2, r3, r2
   159b2:	f207 23c3 	addw	r3, r7, #707	; 0x2c3
   159b6:	429d      	cmp	r5, r3
   159b8:	bf28      	it	cs
   159ba:	f207 25c2 	addwcs	r5, r7, #706	; 0x2c2
   159be:	49a1      	ldr	r1, [pc, #644]	; (15c44 <__ssvfscanf_r+0x10f0>)
   159c0:	4628      	mov	r0, r5
   159c2:	f7fb f935 	bl	10c30 <sprintf>
   159c6:	f7ff bb20 	b.w	1500a <__ssvfscanf_r+0x4b6>
   159ca:	06e2      	lsls	r2, r4, #27
   159cc:	f100 8131 	bmi.w	15c32 <__ssvfscanf_r+0x10de>
   159d0:	0723      	lsls	r3, r4, #28
   159d2:	f100 81ba 	bmi.w	15d4a <__ssvfscanf_r+0x11f6>
   159d6:	0766      	lsls	r6, r4, #29
   159d8:	f140 82b4 	bpl.w	15f44 <__ssvfscanf_r+0x13f0>
   159dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   159de:	64f9      	str	r1, [r7, #76]	; 0x4c
   159e0:	f853 2b04 	ldr.w	r2, [r3], #4
   159e4:	633b      	str	r3, [r7, #48]	; 0x30
   159e6:	f8a2 a000 	strh.w	sl, [r2]
   159ea:	f7ff b8da 	b.w	14ba2 <__ssvfscanf_r+0x4e>
   159ee:	0723      	lsls	r3, r4, #28
   159f0:	f47f a9a5 	bne.w	14d3e <__ssvfscanf_r+0x1ea>
   159f4:	7842      	ldrb	r2, [r0, #1]
   159f6:	2a68      	cmp	r2, #104	; 0x68
   159f8:	f000 8186 	beq.w	15d08 <__ssvfscanf_r+0x11b4>
   159fc:	f044 0404 	orr.w	r4, r4, #4
   15a00:	4608      	mov	r0, r1
   15a02:	f7ff b92f 	b.w	14c64 <__ssvfscanf_r+0x110>
   15a06:	4b8e      	ldr	r3, [pc, #568]	; (15c40 <__ssvfscanf_r+0x10ec>)
   15a08:	62fb      	str	r3, [r7, #44]	; 0x2c
   15a0a:	230a      	movs	r3, #10
   15a0c:	64f9      	str	r1, [r7, #76]	; 0x4c
   15a0e:	63bb      	str	r3, [r7, #56]	; 0x38
   15a10:	2503      	movs	r5, #3
   15a12:	f7ff b9bb 	b.w	14d8c <__ssvfscanf_r+0x238>
   15a16:	4b8c      	ldr	r3, [pc, #560]	; (15c48 <__ssvfscanf_r+0x10f4>)
   15a18:	62fb      	str	r3, [r7, #44]	; 0x2c
   15a1a:	2300      	movs	r3, #0
   15a1c:	64f9      	str	r1, [r7, #76]	; 0x4c
   15a1e:	63bb      	str	r3, [r7, #56]	; 0x38
   15a20:	2503      	movs	r5, #3
   15a22:	f7ff b9b3 	b.w	14d8c <__ssvfscanf_r+0x238>
   15a26:	f444 7408 	orr.w	r4, r4, #544	; 0x220
   15a2a:	e78f      	b.n	1594c <__ssvfscanf_r+0xdf8>
   15a2c:	f107 0070 	add.w	r0, r7, #112	; 0x70
   15a30:	f000 fdde 	bl	165f0 <__sccl>
   15a34:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   15a38:	64f8      	str	r0, [r7, #76]	; 0x4c
   15a3a:	2501      	movs	r5, #1
   15a3c:	f7ff b9a6 	b.w	14d8c <__ssvfscanf_r+0x238>
   15a40:	0722      	lsls	r2, r4, #28
   15a42:	f47f a97c 	bne.w	14d3e <__ssvfscanf_r+0x1ea>
   15a46:	7842      	ldrb	r2, [r0, #1]
   15a48:	2a6c      	cmp	r2, #108	; 0x6c
   15a4a:	f000 8157 	beq.w	15cfc <__ssvfscanf_r+0x11a8>
   15a4e:	f044 0401 	orr.w	r4, r4, #1
   15a52:	4608      	mov	r0, r1
   15a54:	f7ff b906 	b.w	14c64 <__ssvfscanf_r+0x110>
   15a58:	f014 038f 	ands.w	r3, r4, #143	; 0x8f
   15a5c:	f47f a96f 	bne.w	14d3e <__ssvfscanf_r+0x1ea>
   15a60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   15a62:	2a00      	cmp	r2, #0
   15a64:	f000 81e7 	beq.w	15e36 <__ssvfscanf_r+0x12e2>
   15a68:	7842      	ldrb	r2, [r0, #1]
   15a6a:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   15a6e:	4608      	mov	r0, r1
   15a70:	f7ff b8f8 	b.w	14c64 <__ssvfscanf_r+0x110>
   15a74:	ea58 0804 	orrs.w	r8, r8, r4
   15a78:	f47f a961 	bne.w	14d3e <__ssvfscanf_r+0x1ea>
   15a7c:	7842      	ldrb	r2, [r0, #1]
   15a7e:	2410      	movs	r4, #16
   15a80:	4608      	mov	r0, r1
   15a82:	f7ff b8ef 	b.w	14c64 <__ssvfscanf_r+0x110>
   15a86:	64f9      	str	r1, [r7, #76]	; 0x4c
   15a88:	f7ff b8a7 	b.w	14bda <__ssvfscanf_r+0x86>
   15a8c:	2300      	movs	r3, #0
   15a8e:	623b      	str	r3, [r7, #32]
   15a90:	62bb      	str	r3, [r7, #40]	; 0x28
   15a92:	63fb      	str	r3, [r7, #60]	; 0x3c
   15a94:	f107 0354 	add.w	r3, r7, #84	; 0x54
   15a98:	64bb      	str	r3, [r7, #72]	; 0x48
   15a9a:	f7ff bba9 	b.w	151f0 <__ssvfscanf_r+0x69c>
   15a9e:	2300      	movs	r3, #0
   15aa0:	e9c7 3306 	strd	r3, r3, [r7, #24]
   15aa4:	623b      	str	r3, [r7, #32]
   15aa6:	f107 0454 	add.w	r4, r7, #84	; 0x54
   15aaa:	e429      	b.n	15300 <__ssvfscanf_r+0x7ac>
   15aac:	f8db 3000 	ldr.w	r3, [fp]
   15ab0:	f107 0270 	add.w	r2, r7, #112	; 0x70
   15ab4:	4611      	mov	r1, r2
   15ab6:	781a      	ldrb	r2, [r3, #0]
   15ab8:	5c8a      	ldrb	r2, [r1, r2]
   15aba:	2a00      	cmp	r2, #0
   15abc:	f43f a93f 	beq.w	14d3e <__ssvfscanf_r+0x1ea>
   15ac0:	3301      	adds	r3, #1
   15ac2:	f8cb 3000 	str.w	r3, [fp]
   15ac6:	f8db 3004 	ldr.w	r3, [fp, #4]
   15aca:	f1b8 0f01 	cmp.w	r8, #1
   15ace:	f103 33ff 	add.w	r3, r3, #4294967295
   15ad2:	f8cb 3004 	str.w	r3, [fp, #4]
   15ad6:	bf18      	it	ne
   15ad8:	460c      	movne	r4, r1
   15ada:	d114      	bne.n	15b06 <__ssvfscanf_r+0xfb2>
   15adc:	f7ff bb53 	b.w	15186 <__ssvfscanf_r+0x632>
   15ae0:	f8db 3000 	ldr.w	r3, [fp]
   15ae4:	781a      	ldrb	r2, [r3, #0]
   15ae6:	5ca2      	ldrb	r2, [r4, r2]
   15ae8:	3301      	adds	r3, #1
   15aea:	2a00      	cmp	r2, #0
   15aec:	f43f ab4b 	beq.w	15186 <__ssvfscanf_r+0x632>
   15af0:	f8cb 3000 	str.w	r3, [fp]
   15af4:	f8db 3004 	ldr.w	r3, [fp, #4]
   15af8:	3501      	adds	r5, #1
   15afa:	3b01      	subs	r3, #1
   15afc:	4545      	cmp	r5, r8
   15afe:	f8cb 3004 	str.w	r3, [fp, #4]
   15b02:	f43f ab40 	beq.w	15186 <__ssvfscanf_r+0x632>
   15b06:	2b00      	cmp	r3, #0
   15b08:	dcea      	bgt.n	15ae0 <__ssvfscanf_r+0xf8c>
   15b0a:	4659      	mov	r1, fp
   15b0c:	4648      	mov	r0, r9
   15b0e:	f002 f98f 	bl	17e30 <__ssrefill_r>
   15b12:	2800      	cmp	r0, #0
   15b14:	d0e4      	beq.n	15ae0 <__ssvfscanf_r+0xf8c>
   15b16:	44aa      	add	sl, r5
   15b18:	f7ff b843 	b.w	14ba2 <__ssvfscanf_r+0x4e>
   15b1c:	ee18 0a10 	vmov	r0, s16
   15b20:	4659      	mov	r1, fp
   15b22:	f002 f985 	bl	17e30 <__ssrefill_r>
   15b26:	2800      	cmp	r0, #0
   15b28:	f43f ae8e 	beq.w	15848 <__ssvfscanf_r+0xcf4>
   15b2c:	42b5      	cmp	r5, r6
   15b2e:	4654      	mov	r4, sl
   15b30:	ee18 9a10 	vmov	r9, s16
   15b34:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   15b38:	f47f ae91 	bne.w	1585e <__ssvfscanf_r+0xd0a>
   15b3c:	f7ff b8f6 	b.w	14d2c <__ssvfscanf_r+0x1d8>
   15b40:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
   15b44:	e428      	b.n	15398 <__ssvfscanf_r+0x844>
   15b46:	6823      	ldr	r3, [r4, #0]
   15b48:	2b04      	cmp	r3, #4
   15b4a:	f47f ac32 	bne.w	153b2 <__ssvfscanf_r+0x85e>
   15b4e:	e432      	b.n	153b6 <__ssvfscanf_r+0x862>
   15b50:	1c83      	adds	r3, r0, #2
   15b52:	f040 8339 	bne.w	161c8 <__ssvfscanf_r+0x1674>
   15b56:	f8db 3004 	ldr.w	r3, [fp, #4]
   15b5a:	2b00      	cmp	r3, #0
   15b5c:	f340 81d7 	ble.w	15f0e <__ssvfscanf_r+0x13ba>
   15b60:	f8db 3000 	ldr.w	r3, [fp]
   15b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   15b66:	781b      	ldrb	r3, [r3, #0]
   15b68:	5cd3      	ldrb	r3, [r2, r3]
   15b6a:	0718      	lsls	r0, r3, #28
   15b6c:	d403      	bmi.n	15b76 <__ssvfscanf_r+0x1022>
   15b6e:	f1b8 0f00 	cmp.w	r8, #0
   15b72:	f47f ab49 	bne.w	15208 <__ssvfscanf_r+0x6b4>
   15b76:	627c      	str	r4, [r7, #36]	; 0x24
   15b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15b7a:	2b00      	cmp	r3, #0
   15b7c:	f47f a811 	bne.w	14ba2 <__ssvfscanf_r+0x4e>
   15b80:	6cba      	ldr	r2, [r7, #72]	; 0x48
   15b82:	6013      	str	r3, [r2, #0]
   15b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   15b86:	2b00      	cmp	r3, #0
   15b88:	f43f adfc 	beq.w	15784 <__ssvfscanf_r+0xc30>
   15b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15b8e:	1ad1      	subs	r1, r2, r3
   15b90:	108b      	asrs	r3, r1, #2
   15b92:	6a3a      	ldr	r2, [r7, #32]
   15b94:	3301      	adds	r3, #1
   15b96:	429a      	cmp	r2, r3
   15b98:	f67f adf4 	bls.w	15784 <__ssvfscanf_r+0xc30>
   15b9c:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
   15b9e:	3104      	adds	r1, #4
   15ba0:	6820      	ldr	r0, [r4, #0]
   15ba2:	f7f9 fd67 	bl	f674 <realloc>
   15ba6:	2800      	cmp	r0, #0
   15ba8:	f47f ac3a 	bne.w	15420 <__ssvfscanf_r+0x8cc>
   15bac:	e5ea      	b.n	15784 <__ssvfscanf_r+0xc30>
   15bae:	f853 2b04 	ldr.w	r2, [r3], #4
   15bb2:	ed82 0b00 	vstr	d0, [r2]
   15bb6:	633b      	str	r3, [r7, #48]	; 0x30
   15bb8:	e5e4      	b.n	15784 <__ssvfscanf_r+0xc30>
   15bba:	68fd      	ldr	r5, [r7, #12]
   15bbc:	6a39      	ldr	r1, [r7, #32]
   15bbe:	687e      	ldr	r6, [r7, #4]
   15bc0:	4628      	mov	r0, r5
   15bc2:	4642      	mov	r2, r8
   15bc4:	46a3      	mov	fp, r4
   15bc6:	68bc      	ldr	r4, [r7, #8]
   15bc8:	f000 fd56 	bl	16678 <stpncpy>
   15bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15bce:	61fb      	str	r3, [r7, #28]
   15bd0:	f424 7420 	bic.w	r4, r4, #640	; 0x280
   15bd4:	3e01      	subs	r6, #1
   15bd6:	4605      	mov	r5, r0
   15bd8:	f7ff b9c8 	b.w	14f6c <__ssvfscanf_r+0x418>
   15bdc:	69f8      	ldr	r0, [r7, #28]
   15bde:	00d9      	lsls	r1, r3, #3
   15be0:	461d      	mov	r5, r3
   15be2:	f7f9 fd47 	bl	f674 <realloc>
   15be6:	61f8      	str	r0, [r7, #28]
   15be8:	2800      	cmp	r0, #0
   15bea:	f000 8264 	beq.w	160b6 <__ssvfscanf_r+0x1562>
   15bee:	6a3a      	ldr	r2, [r7, #32]
   15bf0:	006b      	lsls	r3, r5, #1
   15bf2:	eb00 0804 	add.w	r8, r0, r4
   15bf6:	6010      	str	r0, [r2, #0]
   15bf8:	61bb      	str	r3, [r7, #24]
   15bfa:	f7ff bbea 	b.w	153d2 <__ssvfscanf_r+0x87e>
   15bfe:	2e02      	cmp	r6, #2
   15c00:	f240 82c4 	bls.w	1618c <__ssvfscanf_r+0x1638>
   15c04:	2e03      	cmp	r6, #3
   15c06:	f43f a9d3 	beq.w	14fb0 <__ssvfscanf_r+0x45c>
   15c0a:	3e04      	subs	r6, #4
   15c0c:	fa5f f886 	uxtb.w	r8, r6
   15c10:	ea6f 0308 	mvn.w	r3, r8
   15c14:	18ee      	adds	r6, r5, r3
   15c16:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   15c1a:	465a      	mov	r2, fp
   15c1c:	4648      	mov	r0, r9
   15c1e:	f002 f8c7 	bl	17db0 <_sungetc_r>
   15c22:	42ae      	cmp	r6, r5
   15c24:	d1f7      	bne.n	15c16 <__ssvfscanf_r+0x10c2>
   15c26:	f10a 3aff 	add.w	sl, sl, #4294967295
   15c2a:	ebaa 0a08 	sub.w	sl, sl, r8
   15c2e:	f7ff b9bf 	b.w	14fb0 <__ssvfscanf_r+0x45c>
   15c32:	64f9      	str	r1, [r7, #76]	; 0x4c
   15c34:	f7fe bfb5 	b.w	14ba2 <__ssvfscanf_r+0x4e>
   15c38:	2303      	movs	r3, #3
   15c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   15c3c:	f7ff b993 	b.w	14f66 <__ssvfscanf_r+0x412>
   15c40:	000176f5 	.word	0x000176f5
   15c44:	20003694 	.word	0x20003694
   15c48:	00010a29 	.word	0x00010a29
   15c4c:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   15c50:	4293      	cmp	r3, r2
   15c52:	f200 8297 	bhi.w	16184 <__ssvfscanf_r+0x1630>
   15c56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   15c58:	3308      	adds	r3, #8
   15c5a:	b29b      	uxth	r3, r3
   15c5c:	6810      	ldr	r0, [r2, #0]
   15c5e:	63f8      	str	r0, [r7, #60]	; 0x3c
   15c60:	0099      	lsls	r1, r3, #2
   15c62:	637b      	str	r3, [r7, #52]	; 0x34
   15c64:	f7f9 fd06 	bl	f674 <realloc>
   15c68:	2800      	cmp	r0, #0
   15c6a:	f000 827b 	beq.w	16164 <__ssvfscanf_r+0x1610>
   15c6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   15c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15c72:	8093      	strh	r3, [r2, #4]
   15c74:	6010      	str	r0, [r2, #0]
   15c76:	e542      	b.n	156fe <__ssvfscanf_r+0xbaa>
   15c78:	2101      	movs	r1, #1
   15c7a:	e57a      	b.n	15772 <__ssvfscanf_r+0xc1e>
   15c7c:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   15c80:	4293      	cmp	r3, r2
   15c82:	f200 8293 	bhi.w	161ac <__ssvfscanf_r+0x1658>
   15c86:	3308      	adds	r3, #8
   15c88:	b29e      	uxth	r6, r3
   15c8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   15c8c:	00b1      	lsls	r1, r6, #2
   15c8e:	6818      	ldr	r0, [r3, #0]
   15c90:	f7f9 fcf0 	bl	f674 <realloc>
   15c94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   15c96:	2800      	cmp	r0, #0
   15c98:	f000 823e 	beq.w	16118 <__ssvfscanf_r+0x15c4>
   15c9c:	809e      	strh	r6, [r3, #4]
   15c9e:	6018      	str	r0, [r3, #0]
   15ca0:	f7ff ba9b 	b.w	151da <__ssvfscanf_r+0x686>
   15ca4:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   15ca8:	4293      	cmp	r3, r2
   15caa:	f200 827f 	bhi.w	161ac <__ssvfscanf_r+0x1658>
   15cae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   15cb0:	3308      	adds	r3, #8
   15cb2:	b29b      	uxth	r3, r3
   15cb4:	0099      	lsls	r1, r3, #2
   15cb6:	6810      	ldr	r0, [r2, #0]
   15cb8:	64bb      	str	r3, [r7, #72]	; 0x48
   15cba:	f7f9 fcdb 	bl	f674 <realloc>
   15cbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   15cc0:	2800      	cmp	r0, #0
   15cc2:	f000 8228 	beq.w	16116 <__ssvfscanf_r+0x15c2>
   15cc6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   15cc8:	8093      	strh	r3, [r2, #4]
   15cca:	6010      	str	r0, [r2, #0]
   15ccc:	f7ff bb0e 	b.w	152ec <__ssvfscanf_r+0x798>
   15cd0:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   15cd4:	4293      	cmp	r3, r2
   15cd6:	f200 8255 	bhi.w	16184 <__ssvfscanf_r+0x1630>
   15cda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   15cdc:	3308      	adds	r3, #8
   15cde:	b29b      	uxth	r3, r3
   15ce0:	6810      	ldr	r0, [r2, #0]
   15ce2:	63f8      	str	r0, [r7, #60]	; 0x3c
   15ce4:	0099      	lsls	r1, r3, #2
   15ce6:	637b      	str	r3, [r7, #52]	; 0x34
   15ce8:	f7f9 fcc4 	bl	f674 <realloc>
   15cec:	2800      	cmp	r0, #0
   15cee:	f000 8239 	beq.w	16164 <__ssvfscanf_r+0x1610>
   15cf2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   15cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15cf6:	8093      	strh	r3, [r2, #4]
   15cf8:	6010      	str	r0, [r2, #0]
   15cfa:	e570      	b.n	157de <__ssvfscanf_r+0xc8a>
   15cfc:	7882      	ldrb	r2, [r0, #2]
   15cfe:	f044 0402 	orr.w	r4, r4, #2
   15d02:	3002      	adds	r0, #2
   15d04:	f7fe bfae 	b.w	14c64 <__ssvfscanf_r+0x110>
   15d08:	7882      	ldrb	r2, [r0, #2]
   15d0a:	f044 0408 	orr.w	r4, r4, #8
   15d0e:	3002      	adds	r0, #2
   15d10:	f7fe bfa8 	b.w	14c64 <__ssvfscanf_r+0x110>
   15d14:	0763      	lsls	r3, r4, #29
   15d16:	d458      	bmi.n	15dca <__ssvfscanf_r+0x1276>
   15d18:	f014 0201 	ands.w	r2, r4, #1
   15d1c:	f47f aa28 	bne.w	15170 <__ssvfscanf_r+0x61c>
   15d20:	07a6      	lsls	r6, r4, #30
   15d22:	f57f aa25 	bpl.w	15170 <__ssvfscanf_r+0x61c>
   15d26:	4bb3      	ldr	r3, [pc, #716]	; (15ff4 <__ssvfscanf_r+0x14a0>)
   15d28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   15d2a:	4299      	cmp	r1, r3
   15d2c:	4648      	mov	r0, r9
   15d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   15d30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   15d32:	f000 823d 	beq.w	161b0 <__ssvfscanf_r+0x165c>
   15d36:	f001 fd95 	bl	17864 <_strtoll_r>
   15d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   15d3c:	f853 2b04 	ldr.w	r2, [r3], #4
   15d40:	633b      	str	r3, [r7, #48]	; 0x30
   15d42:	e9c2 0100 	strd	r0, r1, [r2]
   15d46:	f7ff ba18 	b.w	1517a <__ssvfscanf_r+0x626>
   15d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   15d4c:	64f9      	str	r1, [r7, #76]	; 0x4c
   15d4e:	f853 2b04 	ldr.w	r2, [r3], #4
   15d52:	633b      	str	r3, [r7, #48]	; 0x30
   15d54:	f882 a000 	strb.w	sl, [r2]
   15d58:	f7fe bf23 	b.w	14ba2 <__ssvfscanf_r+0x4e>
   15d5c:	f8db 3000 	ldr.w	r3, [fp]
   15d60:	4ea5      	ldr	r6, [pc, #660]	; (15ff8 <__ssvfscanf_r+0x14a4>)
   15d62:	781a      	ldrb	r2, [r3, #0]
   15d64:	5cb2      	ldrb	r2, [r6, r2]
   15d66:	0712      	lsls	r2, r2, #28
   15d68:	f53e af1b 	bmi.w	14ba2 <__ssvfscanf_r+0x4e>
   15d6c:	3301      	adds	r3, #1
   15d6e:	f8cb 3000 	str.w	r3, [fp]
   15d72:	f8db 3004 	ldr.w	r3, [fp, #4]
   15d76:	f1b8 0f01 	cmp.w	r8, #1
   15d7a:	f103 33ff 	add.w	r3, r3, #4294967295
   15d7e:	f8cb 3004 	str.w	r3, [fp, #4]
   15d82:	bf08      	it	eq
   15d84:	f10a 0a01 	addeq.w	sl, sl, #1
   15d88:	f43e af0b 	beq.w	14ba2 <__ssvfscanf_r+0x4e>
   15d8c:	2401      	movs	r4, #1
   15d8e:	e011      	b.n	15db4 <__ssvfscanf_r+0x1260>
   15d90:	f8db 3000 	ldr.w	r3, [fp]
   15d94:	781a      	ldrb	r2, [r3, #0]
   15d96:	5cb2      	ldrb	r2, [r6, r2]
   15d98:	0715      	lsls	r5, r2, #28
   15d9a:	f103 0301 	add.w	r3, r3, #1
   15d9e:	d411      	bmi.n	15dc4 <__ssvfscanf_r+0x1270>
   15da0:	f8cb 3000 	str.w	r3, [fp]
   15da4:	f8db 3004 	ldr.w	r3, [fp, #4]
   15da8:	3401      	adds	r4, #1
   15daa:	3b01      	subs	r3, #1
   15dac:	4544      	cmp	r4, r8
   15dae:	f8cb 3004 	str.w	r3, [fp, #4]
   15db2:	d007      	beq.n	15dc4 <__ssvfscanf_r+0x1270>
   15db4:	2b00      	cmp	r3, #0
   15db6:	dceb      	bgt.n	15d90 <__ssvfscanf_r+0x123c>
   15db8:	4659      	mov	r1, fp
   15dba:	4648      	mov	r0, r9
   15dbc:	f002 f838 	bl	17e30 <__ssrefill_r>
   15dc0:	2800      	cmp	r0, #0
   15dc2:	d0e5      	beq.n	15d90 <__ssvfscanf_r+0x123c>
   15dc4:	44a2      	add	sl, r4
   15dc6:	f7fe beec 	b.w	14ba2 <__ssvfscanf_r+0x4e>
   15dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   15dcc:	f853 2b04 	ldr.w	r2, [r3], #4
   15dd0:	633b      	str	r3, [r7, #48]	; 0x30
   15dd2:	8010      	strh	r0, [r2, #0]
   15dd4:	f7ff b9d1 	b.w	1517a <__ssvfscanf_r+0x626>
   15dd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   15dda:	2b00      	cmp	r3, #0
   15ddc:	f000 816e 	beq.w	160bc <__ssvfscanf_r+0x1568>
   15de0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   15de2:	f8d3 8000 	ldr.w	r8, [r3]
   15de6:	88de      	ldrh	r6, [r3, #6]
   15de8:	b176      	cbz	r6, 15e08 <__ssvfscanf_r+0x12b4>
   15dea:	2400      	movs	r4, #0
   15dec:	f1a8 0504 	sub.w	r5, r8, #4
   15df0:	46a1      	mov	r9, r4
   15df2:	f855 3f04 	ldr.w	r3, [r5, #4]!
   15df6:	6818      	ldr	r0, [r3, #0]
   15df8:	f7f9 f978 	bl	f0ec <free>
   15dfc:	3401      	adds	r4, #1
   15dfe:	682b      	ldr	r3, [r5, #0]
   15e00:	42a6      	cmp	r6, r4
   15e02:	f8c3 9000 	str.w	r9, [r3]
   15e06:	d1f4      	bne.n	15df2 <__ssvfscanf_r+0x129e>
   15e08:	f04f 33ff 	mov.w	r3, #4294967295
   15e0c:	647b      	str	r3, [r7, #68]	; 0x44
   15e0e:	f1b8 0f00 	cmp.w	r8, #0
   15e12:	f47e af9c 	bne.w	14d4e <__ssvfscanf_r+0x1fa>
   15e16:	f7fe bf9d 	b.w	14d54 <__ssvfscanf_r+0x200>
   15e1a:	4878      	ldr	r0, [pc, #480]	; (15ffc <__ssvfscanf_r+0x14a8>)
   15e1c:	633b      	str	r3, [r7, #48]	; 0x30
   15e1e:	f7fb fde7 	bl	119f0 <nanf>
   15e22:	ed84 0a00 	vstr	s0, [r4]
   15e26:	e4ad      	b.n	15784 <__ssvfscanf_r+0xc30>
   15e28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   15e2a:	63fc      	str	r4, [r7, #60]	; 0x3c
   15e2c:	f852 5b04 	ldr.w	r5, [r2], #4
   15e30:	633a      	str	r2, [r7, #48]	; 0x30
   15e32:	64bc      	str	r4, [r7, #72]	; 0x48
   15e34:	e46c      	b.n	15710 <__ssvfscanf_r+0xbbc>
   15e36:	b082      	sub	sp, #8
   15e38:	e9cd 3302 	strd	r3, r3, [sp, #8]
   15e3c:	ab02      	add	r3, sp, #8
   15e3e:	643b      	str	r3, [r7, #64]	; 0x40
   15e40:	e612      	b.n	15a68 <__ssvfscanf_r+0xf14>
   15e42:	637b      	str	r3, [r7, #52]	; 0x34
   15e44:	0053      	lsls	r3, r2, #1
   15e46:	4620      	mov	r0, r4
   15e48:	4619      	mov	r1, r3
   15e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   15e4c:	f7f9 fc12 	bl	f674 <realloc>
   15e50:	4604      	mov	r4, r0
   15e52:	2800      	cmp	r0, #0
   15e54:	f000 80ad 	beq.w	15fb2 <__ssvfscanf_r+0x145e>
   15e58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   15e5a:	1985      	adds	r5, r0, r6
   15e5c:	6018      	str	r0, [r3, #0]
   15e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15e60:	e475      	b.n	1574e <__ssvfscanf_r+0xbfa>
   15e62:	697d      	ldr	r5, [r7, #20]
   15e64:	4629      	mov	r1, r5
   15e66:	230a      	movs	r3, #10
   15e68:	3101      	adds	r1, #1
   15e6a:	4648      	mov	r0, r9
   15e6c:	f7fa fddc 	bl	10a28 <_strtol_r>
   15e70:	69bb      	ldr	r3, [r7, #24]
   15e72:	1ac2      	subs	r2, r0, r3
   15e74:	e59d      	b.n	159b2 <__ssvfscanf_r+0xe5e>
   15e76:	e9d7 320c 	ldrd	r3, r2, [r7, #48]	; 0x30
   15e7a:	f853 1b04 	ldr.w	r1, [r3], #4
   15e7e:	623a      	str	r2, [r7, #32]
   15e80:	64b9      	str	r1, [r7, #72]	; 0x48
   15e82:	633b      	str	r3, [r7, #48]	; 0x30
   15e84:	62ba      	str	r2, [r7, #40]	; 0x28
   15e86:	63fa      	str	r2, [r7, #60]	; 0x3c
   15e88:	f7ff b9b2 	b.w	151f0 <__ssvfscanf_r+0x69c>
   15e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   15e8e:	64bc      	str	r4, [r7, #72]	; 0x48
   15e90:	f853 5b04 	ldr.w	r5, [r3], #4
   15e94:	633b      	str	r3, [r7, #48]	; 0x30
   15e96:	e4aa      	b.n	157ee <__ssvfscanf_r+0xc9a>
   15e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   15e9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   15e9c:	f853 4b04 	ldr.w	r4, [r3], #4
   15ea0:	61ba      	str	r2, [r7, #24]
   15ea2:	e9c7 2207 	strd	r2, r2, [r7, #28]
   15ea6:	633b      	str	r3, [r7, #48]	; 0x30
   15ea8:	f7ff ba2a 	b.w	15300 <__ssvfscanf_r+0x7ac>
   15eac:	6cbc      	ldr	r4, [r7, #72]	; 0x48
   15eae:	6820      	ldr	r0, [r4, #0]
   15eb0:	f7f9 fbe0 	bl	f674 <realloc>
   15eb4:	2800      	cmp	r0, #0
   15eb6:	f47f aab3 	bne.w	15420 <__ssvfscanf_r+0x8cc>
   15eba:	e463      	b.n	15784 <__ssvfscanf_r+0xc30>
   15ebc:	4659      	mov	r1, fp
   15ebe:	4648      	mov	r0, r9
   15ec0:	637b      	str	r3, [r7, #52]	; 0x34
   15ec2:	f001 ffb5 	bl	17e30 <__ssrefill_r>
   15ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15ec8:	2800      	cmp	r0, #0
   15eca:	f43f ac49 	beq.w	15760 <__ssvfscanf_r+0xc0c>
   15ece:	e44d      	b.n	1576c <__ssvfscanf_r+0xc18>
   15ed0:	6818      	ldr	r0, [r3, #0]
   15ed2:	461c      	mov	r4, r3
   15ed4:	f7f9 fbce 	bl	f674 <realloc>
   15ed8:	2800      	cmp	r0, #0
   15eda:	f43f accc 	beq.w	15876 <__ssvfscanf_r+0xd22>
   15ede:	6020      	str	r0, [r4, #0]
   15ee0:	e4c9      	b.n	15876 <__ssvfscanf_r+0xd22>
   15ee2:	2500      	movs	r5, #0
   15ee4:	e637      	b.n	15b56 <__ssvfscanf_r+0x1002>
   15ee6:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   15ee8:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   15eec:	627e      	str	r6, [r7, #36]	; 0x24
   15eee:	4644      	mov	r4, r8
   15ef0:	2d00      	cmp	r5, #0
   15ef2:	f43f aa7c 	beq.w	153ee <__ssvfscanf_r+0x89a>
   15ef6:	3d01      	subs	r5, #1
   15ef8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
   15efc:	465a      	mov	r2, fp
   15efe:	5d59      	ldrb	r1, [r3, r5]
   15f00:	4648      	mov	r0, r9
   15f02:	f001 ff55 	bl	17db0 <_sungetc_r>
   15f06:	2d00      	cmp	r5, #0
   15f08:	d1f5      	bne.n	15ef6 <__ssvfscanf_r+0x13a2>
   15f0a:	f7ff ba70 	b.w	153ee <__ssvfscanf_r+0x89a>
   15f0e:	4659      	mov	r1, fp
   15f10:	4648      	mov	r0, r9
   15f12:	f001 ff8d 	bl	17e30 <__ssrefill_r>
   15f16:	2800      	cmp	r0, #0
   15f18:	f43f ae22 	beq.w	15b60 <__ssvfscanf_r+0x100c>
   15f1c:	627c      	str	r4, [r7, #36]	; 0x24
   15f1e:	2d00      	cmp	r5, #0
   15f20:	f47e af04 	bne.w	14d2c <__ssvfscanf_r+0x1d8>
   15f24:	e628      	b.n	15b78 <__ssvfscanf_r+0x1024>
   15f26:	627c      	str	r4, [r7, #36]	; 0x24
   15f28:	2d00      	cmp	r5, #0
   15f2a:	f43f ae25 	beq.w	15b78 <__ssvfscanf_r+0x1024>
   15f2e:	3d01      	subs	r5, #1
   15f30:	f507 73b8 	add.w	r3, r7, #368	; 0x170
   15f34:	465a      	mov	r2, fp
   15f36:	5d59      	ldrb	r1, [r3, r5]
   15f38:	4648      	mov	r0, r9
   15f3a:	f001 ff39 	bl	17db0 <_sungetc_r>
   15f3e:	2d00      	cmp	r5, #0
   15f40:	d1f5      	bne.n	15f2e <__ssvfscanf_r+0x13da>
   15f42:	e619      	b.n	15b78 <__ssvfscanf_r+0x1024>
   15f44:	07e5      	lsls	r5, r4, #31
   15f46:	d43c      	bmi.n	15fc2 <__ssvfscanf_r+0x146e>
   15f48:	07a4      	lsls	r4, r4, #30
   15f4a:	d53a      	bpl.n	15fc2 <__ssvfscanf_r+0x146e>
   15f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   15f4e:	64f9      	str	r1, [r7, #76]	; 0x4c
   15f50:	f853 2b04 	ldr.w	r2, [r3], #4
   15f54:	633b      	str	r3, [r7, #48]	; 0x30
   15f56:	ea4f 73ea 	mov.w	r3, sl, asr #31
   15f5a:	f8c2 a000 	str.w	sl, [r2]
   15f5e:	6053      	str	r3, [r2, #4]
   15f60:	f7fe be1f 	b.w	14ba2 <__ssvfscanf_r+0x4e>
   15f64:	ee18 9a10 	vmov	r9, s16
   15f68:	461e      	mov	r6, r3
   15f6a:	f7ff b814 	b.w	14f96 <__ssvfscanf_r+0x442>
   15f6e:	2301      	movs	r3, #1
   15f70:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
   15f74:	64bb      	str	r3, [r7, #72]	; 0x48
   15f76:	f7fe bff6 	b.w	14f66 <__ssvfscanf_r+0x412>
   15f7a:	f1b8 0f01 	cmp.w	r8, #1
   15f7e:	bf38      	it	cc
   15f80:	f04f 0801 	movcc.w	r8, #1
   15f84:	f014 0301 	ands.w	r3, r4, #1
   15f88:	d13a      	bne.n	16000 <__ssvfscanf_r+0x14ac>
   15f8a:	06e5      	lsls	r5, r4, #27
   15f8c:	f100 8136 	bmi.w	161fc <__ssvfscanf_r+0x16a8>
   15f90:	0624      	lsls	r4, r4, #24
   15f92:	f140 814c 	bpl.w	1622e <__ssvfscanf_r+0x16da>
   15f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   15f98:	f853 5b04 	ldr.w	r5, [r3], #4
   15f9c:	64bb      	str	r3, [r7, #72]	; 0x48
   15f9e:	2d00      	cmp	r5, #0
   15fa0:	f43e aecd 	beq.w	14d3e <__ssvfscanf_r+0x1ea>
   15fa4:	4640      	mov	r0, r8
   15fa6:	f7f9 f899 	bl	f0dc <malloc>
   15faa:	4603      	mov	r3, r0
   15fac:	2800      	cmp	r0, #0
   15fae:	f040 80dc 	bne.w	1616a <__ssvfscanf_r+0x1616>
   15fb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   15fb4:	2b00      	cmp	r3, #0
   15fb6:	f000 8081 	beq.w	160bc <__ssvfscanf_r+0x1568>
   15fba:	f8d3 8000 	ldr.w	r8, [r3]
   15fbe:	88de      	ldrh	r6, [r3, #6]
   15fc0:	e712      	b.n	15de8 <__ssvfscanf_r+0x1294>
   15fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   15fc4:	64f9      	str	r1, [r7, #76]	; 0x4c
   15fc6:	f853 2b04 	ldr.w	r2, [r3], #4
   15fca:	f8c2 a000 	str.w	sl, [r2]
   15fce:	633b      	str	r3, [r7, #48]	; 0x30
   15fd0:	f7fe bde7 	b.w	14ba2 <__ssvfscanf_r+0x4e>
   15fd4:	462b      	mov	r3, r5
   15fd6:	6abd      	ldr	r5, [r7, #40]	; 0x28
   15fd8:	42ab      	cmp	r3, r5
   15fda:	f67e aeb0 	bls.w	14d3e <__ssvfscanf_r+0x1ea>
   15fde:	461c      	mov	r4, r3
   15fe0:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   15fe4:	465a      	mov	r2, fp
   15fe6:	4648      	mov	r0, r9
   15fe8:	f001 fee2 	bl	17db0 <_sungetc_r>
   15fec:	42ac      	cmp	r4, r5
   15fee:	d1f7      	bne.n	15fe0 <__ssvfscanf_r+0x148c>
   15ff0:	f7fe bea5 	b.w	14d3e <__ssvfscanf_r+0x1ea>
   15ff4:	000176f5 	.word	0x000176f5
   15ff8:	2000369d 	.word	0x2000369d
   15ffc:	2000b0f8 	.word	0x2000b0f8
   16000:	f014 0310 	ands.w	r3, r4, #16
   16004:	637b      	str	r3, [r7, #52]	; 0x34
   16006:	d05e      	beq.n	160c6 <__ssvfscanf_r+0x1572>
   16008:	2500      	movs	r5, #0
   1600a:	63fd      	str	r5, [r7, #60]	; 0x3c
   1600c:	64bd      	str	r5, [r7, #72]	; 0x48
   1600e:	462e      	mov	r6, r5
   16010:	2400      	movs	r4, #0
   16012:	464b      	mov	r3, r9
   16014:	46c1      	mov	r9, r8
   16016:	46a8      	mov	r8, r5
   16018:	4625      	mov	r5, r4
   1601a:	461c      	mov	r4, r3
   1601c:	f7fb f9ac 	bl	11378 <__locale_mb_cur_max>
   16020:	42a8      	cmp	r0, r5
   16022:	f43e ae83 	beq.w	14d2c <__ssvfscanf_r+0x1d8>
   16026:	e9db 3200 	ldrd	r3, r2, [fp]
   1602a:	f813 1b01 	ldrb.w	r1, [r3], #1
   1602e:	3a01      	subs	r2, #1
   16030:	e9cb 3200 	strd	r3, r2, [fp]
   16034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   16036:	f507 70b8 	add.w	r0, r7, #368	; 0x170
   1603a:	2a03      	cmp	r2, #3
   1603c:	5541      	strb	r1, [r0, r5]
   1603e:	f105 0301 	add.w	r3, r5, #1
   16042:	f107 0568 	add.w	r5, r7, #104	; 0x68
   16046:	d102      	bne.n	1604e <__ssvfscanf_r+0x14fa>
   16048:	682a      	ldr	r2, [r5, #0]
   1604a:	2a04      	cmp	r2, #4
   1604c:	d006      	beq.n	1605c <__ssvfscanf_r+0x1508>
   1604e:	2208      	movs	r2, #8
   16050:	2100      	movs	r1, #0
   16052:	4628      	mov	r0, r5
   16054:	62bb      	str	r3, [r7, #40]	; 0x28
   16056:	f7fa ffad 	bl	10fb4 <memset>
   1605a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1605c:	9500      	str	r5, [sp, #0]
   1605e:	f507 72b8 	add.w	r2, r7, #368	; 0x170
   16062:	4631      	mov	r1, r6
   16064:	4620      	mov	r0, r4
   16066:	62bb      	str	r3, [r7, #40]	; 0x28
   16068:	f001 fcce 	bl	17a08 <_mbrtowc_r>
   1606c:	1c43      	adds	r3, r0, #1
   1606e:	6278      	str	r0, [r7, #36]	; 0x24
   16070:	f43e ae5c 	beq.w	14d2c <__ssvfscanf_r+0x1d8>
   16074:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16076:	2800      	cmp	r0, #0
   16078:	f040 8147 	bne.w	1630a <__ssvfscanf_r+0x17b6>
   1607c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1607e:	b902      	cbnz	r2, 16082 <__ssvfscanf_r+0x152e>
   16080:	6032      	str	r2, [r6, #0]
   16082:	449a      	add	sl, r3
   16084:	f109 39ff 	add.w	r9, r9, #4294967295
   16088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1608a:	2b00      	cmp	r3, #0
   1608c:	f040 8175 	bne.w	1637a <__ssvfscanf_r+0x1826>
   16090:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16092:	2b00      	cmp	r3, #0
   16094:	f000 8170 	beq.w	16378 <__ssvfscanf_r+0x1824>
   16098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1609a:	1af5      	subs	r5, r6, r3
   1609c:	ebb8 0fa5 	cmp.w	r8, r5, asr #2
   160a0:	f200 816a 	bhi.w	16378 <__ssvfscanf_r+0x1824>
   160a4:	4618      	mov	r0, r3
   160a6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
   160aa:	f7f9 fae3 	bl	f674 <realloc>
   160ae:	63f8      	str	r0, [r7, #60]	; 0x3c
   160b0:	2800      	cmp	r0, #0
   160b2:	f040 815c 	bne.w	1636e <__ssvfscanf_r+0x181a>
   160b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   160b8:	2b00      	cmp	r3, #0
   160ba:	d12d      	bne.n	16118 <__ssvfscanf_r+0x15c4>
   160bc:	f04f 33ff 	mov.w	r3, #4294967295
   160c0:	647b      	str	r3, [r7, #68]	; 0x44
   160c2:	f7fe be47 	b.w	14d54 <__ssvfscanf_r+0x200>
   160c6:	0622      	lsls	r2, r4, #24
   160c8:	f140 808f 	bpl.w	161ea <__ssvfscanf_r+0x1696>
   160cc:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   160ce:	f854 3b04 	ldr.w	r3, [r4], #4
   160d2:	64bb      	str	r3, [r7, #72]	; 0x48
   160d4:	2b00      	cmp	r3, #0
   160d6:	f43e ae32 	beq.w	14d3e <__ssvfscanf_r+0x1ea>
   160da:	2080      	movs	r0, #128	; 0x80
   160dc:	f7f8 fffe 	bl	f0dc <malloc>
   160e0:	4606      	mov	r6, r0
   160e2:	2800      	cmp	r0, #0
   160e4:	d0e7      	beq.n	160b6 <__ssvfscanf_r+0x1562>
   160e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   160e8:	6018      	str	r0, [r3, #0]
   160ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   160ec:	88dd      	ldrh	r5, [r3, #6]
   160ee:	889a      	ldrh	r2, [r3, #4]
   160f0:	4295      	cmp	r5, r2
   160f2:	f0c0 80b3 	bcc.w	1625c <__ssvfscanf_r+0x1708>
   160f6:	f64f 71f6 	movw	r1, #65526	; 0xfff6
   160fa:	428a      	cmp	r2, r1
   160fc:	d856      	bhi.n	161ac <__ssvfscanf_r+0x1658>
   160fe:	3208      	adds	r2, #8
   16100:	b293      	uxth	r3, r2
   16102:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   16104:	63fb      	str	r3, [r7, #60]	; 0x3c
   16106:	0099      	lsls	r1, r3, #2
   16108:	6810      	ldr	r0, [r2, #0]
   1610a:	f7f9 fab3 	bl	f674 <realloc>
   1610e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16110:	2800      	cmp	r0, #0
   16112:	f040 80ae 	bne.w	16272 <__ssvfscanf_r+0x171e>
   16116:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16118:	88db      	ldrh	r3, [r3, #6]
   1611a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1611c:	461e      	mov	r6, r3
   1611e:	f8d2 8000 	ldr.w	r8, [r2]
   16122:	e661      	b.n	15de8 <__ssvfscanf_r+0x1294>
   16124:	462b      	mov	r3, r5
   16126:	6abd      	ldr	r5, [r7, #40]	; 0x28
   16128:	42ab      	cmp	r3, r5
   1612a:	f67e ae08 	bls.w	14d3e <__ssvfscanf_r+0x1ea>
   1612e:	461c      	mov	r4, r3
   16130:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   16134:	465a      	mov	r2, fp
   16136:	4648      	mov	r0, r9
   16138:	f001 fe3a 	bl	17db0 <_sungetc_r>
   1613c:	42ac      	cmp	r4, r5
   1613e:	d1f7      	bne.n	16130 <__ssvfscanf_r+0x15dc>
   16140:	f7fe bdfd 	b.w	14d3e <__ssvfscanf_r+0x1ea>
   16144:	4610      	mov	r0, r2
   16146:	00d9      	lsls	r1, r3, #3
   16148:	461e      	mov	r6, r3
   1614a:	f7f9 fa93 	bl	f674 <realloc>
   1614e:	62b8      	str	r0, [r7, #40]	; 0x28
   16150:	2800      	cmp	r0, #0
   16152:	d0b0      	beq.n	160b6 <__ssvfscanf_r+0x1562>
   16154:	1942      	adds	r2, r0, r5
   16156:	64ba      	str	r2, [r7, #72]	; 0x48
   16158:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1615a:	6b7d      	ldr	r5, [r7, #52]	; 0x34
   1615c:	6010      	str	r0, [r2, #0]
   1615e:	0073      	lsls	r3, r6, #1
   16160:	623b      	str	r3, [r7, #32]
   16162:	e4f8      	b.n	15b56 <__ssvfscanf_r+0x1002>
   16164:	f8d7 803c 	ldr.w	r8, [r7, #60]	; 0x3c
   16168:	e63e      	b.n	15de8 <__ssvfscanf_r+0x1294>
   1616a:	6c39      	ldr	r1, [r7, #64]	; 0x40
   1616c:	6028      	str	r0, [r5, #0]
   1616e:	88ce      	ldrh	r6, [r1, #6]
   16170:	888a      	ldrh	r2, [r1, #4]
   16172:	4296      	cmp	r6, r2
   16174:	f0c0 808e 	bcc.w	16294 <__ssvfscanf_r+0x1740>
   16178:	f64f 71f6 	movw	r1, #65526	; 0xfff6
   1617c:	428a      	cmp	r2, r1
   1617e:	6338      	str	r0, [r7, #48]	; 0x30
   16180:	f240 80a5 	bls.w	162ce <__ssvfscanf_r+0x177a>
   16184:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16186:	f8d3 8000 	ldr.w	r8, [r3]
   1618a:	e62d      	b.n	15de8 <__ssvfscanf_r+0x1294>
   1618c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1618e:	4295      	cmp	r5, r2
   16190:	f67e add5 	bls.w	14d3e <__ssvfscanf_r+0x1ea>
   16194:	462c      	mov	r4, r5
   16196:	6abd      	ldr	r5, [r7, #40]	; 0x28
   16198:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   1619c:	465a      	mov	r2, fp
   1619e:	4648      	mov	r0, r9
   161a0:	f001 fe06 	bl	17db0 <_sungetc_r>
   161a4:	42ac      	cmp	r4, r5
   161a6:	d1f7      	bne.n	16198 <__ssvfscanf_r+0x1644>
   161a8:	f7fe bdc9 	b.w	14d3e <__ssvfscanf_r+0x1ea>
   161ac:	462b      	mov	r3, r5
   161ae:	e7b4      	b.n	1611a <__ssvfscanf_r+0x15c6>
   161b0:	f001 fc28 	bl	17a04 <_strtoull_r>
   161b4:	e5c1      	b.n	15d3a <__ssvfscanf_r+0x11e6>
   161b6:	f8d8 3000 	ldr.w	r3, [r8]
   161ba:	461d      	mov	r5, r3
   161bc:	3301      	adds	r3, #1
   161be:	f47f a8d5 	bne.w	1536c <__ssvfscanf_r+0x818>
   161c2:	462a      	mov	r2, r5
   161c4:	f7ff b8e8 	b.w	15398 <__ssvfscanf_r+0x844>
   161c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   161ca:	6818      	ldr	r0, [r3, #0]
   161cc:	f001 fc78 	bl	17ac0 <iswspace>
   161d0:	2800      	cmp	r0, #0
   161d2:	f47f aea8 	bne.w	15f26 <__ssvfscanf_r+0x13d2>
   161d6:	2c03      	cmp	r4, #3
   161d8:	44aa      	add	sl, r5
   161da:	f47f a849 	bne.w	15270 <__ssvfscanf_r+0x71c>
   161de:	6833      	ldr	r3, [r6, #0]
   161e0:	2b04      	cmp	r3, #4
   161e2:	f47f a845 	bne.w	15270 <__ssvfscanf_r+0x71c>
   161e6:	f7ff b845 	b.w	15274 <__ssvfscanf_r+0x720>
   161ea:	e9d7 320c 	ldrd	r3, r2, [r7, #48]	; 0x30
   161ee:	f853 6b04 	ldr.w	r6, [r3], #4
   161f2:	633b      	str	r3, [r7, #48]	; 0x30
   161f4:	4615      	mov	r5, r2
   161f6:	63fa      	str	r2, [r7, #60]	; 0x3c
   161f8:	64ba      	str	r2, [r7, #72]	; 0x48
   161fa:	e709      	b.n	16010 <__ssvfscanf_r+0x14bc>
   161fc:	461c      	mov	r4, r3
   161fe:	f8db 3004 	ldr.w	r3, [fp, #4]
   16202:	4598      	cmp	r8, r3
   16204:	dd39      	ble.n	1627a <__ssvfscanf_r+0x1726>
   16206:	f8db 2000 	ldr.w	r2, [fp]
   1620a:	441a      	add	r2, r3
   1620c:	f8cb 2000 	str.w	r2, [fp]
   16210:	4659      	mov	r1, fp
   16212:	4648      	mov	r0, r9
   16214:	441c      	add	r4, r3
   16216:	eba8 0803 	sub.w	r8, r8, r3
   1621a:	f001 fe09 	bl	17e30 <__ssrefill_r>
   1621e:	2800      	cmp	r0, #0
   16220:	d0ed      	beq.n	161fe <__ssvfscanf_r+0x16aa>
   16222:	2c00      	cmp	r4, #0
   16224:	f43e ad82 	beq.w	14d2c <__ssvfscanf_r+0x1d8>
   16228:	44a2      	add	sl, r4
   1622a:	f7fe bcba 	b.w	14ba2 <__ssvfscanf_r+0x4e>
   1622e:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   16230:	4643      	mov	r3, r8
   16232:	6829      	ldr	r1, [r5, #0]
   16234:	f8cd b000 	str.w	fp, [sp]
   16238:	2201      	movs	r2, #1
   1623a:	4648      	mov	r0, r9
   1623c:	f001 fe16 	bl	17e6c <_sfread_r>
   16240:	4604      	mov	r4, r0
   16242:	2800      	cmp	r0, #0
   16244:	f43e ad72 	beq.w	14d2c <__ssvfscanf_r+0x1d8>
   16248:	3504      	adds	r5, #4
   1624a:	64bd      	str	r5, [r7, #72]	; 0x48
   1624c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1624e:	3301      	adds	r3, #1
   16250:	647b      	str	r3, [r7, #68]	; 0x44
   16252:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16254:	633b      	str	r3, [r7, #48]	; 0x30
   16256:	44a2      	add	sl, r4
   16258:	f7fe bca3 	b.w	14ba2 <__ssvfscanf_r+0x4e>
   1625c:	6818      	ldr	r0, [r3, #0]
   1625e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16260:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
   16264:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16266:	633c      	str	r4, [r7, #48]	; 0x30
   16268:	3501      	adds	r5, #1
   1626a:	80dd      	strh	r5, [r3, #6]
   1626c:	63fe      	str	r6, [r7, #60]	; 0x3c
   1626e:	2520      	movs	r5, #32
   16270:	e6ce      	b.n	16010 <__ssvfscanf_r+0x14bc>
   16272:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   16274:	8093      	strh	r3, [r2, #4]
   16276:	6010      	str	r0, [r2, #0]
   16278:	e7f1      	b.n	1625e <__ssvfscanf_r+0x170a>
   1627a:	eba3 0308 	sub.w	r3, r3, r8
   1627e:	f8cb 3004 	str.w	r3, [fp, #4]
   16282:	f8db 3000 	ldr.w	r3, [fp]
   16286:	4444      	add	r4, r8
   16288:	4443      	add	r3, r8
   1628a:	f8cb 3000 	str.w	r3, [fp]
   1628e:	44a2      	add	sl, r4
   16290:	f7fe bc87 	b.w	14ba2 <__ssvfscanf_r+0x4e>
   16294:	680a      	ldr	r2, [r1, #0]
   16296:	63fa      	str	r2, [r7, #60]	; 0x3c
   16298:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1629a:	f842 5026 	str.w	r5, [r2, r6, lsl #2]
   1629e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   162a0:	3601      	adds	r6, #1
   162a2:	b2b6      	uxth	r6, r6
   162a4:	80d6      	strh	r6, [r2, #6]
   162a6:	4619      	mov	r1, r3
   162a8:	f8cd b000 	str.w	fp, [sp]
   162ac:	4643      	mov	r3, r8
   162ae:	2201      	movs	r2, #1
   162b0:	4648      	mov	r0, r9
   162b2:	f001 fddb 	bl	17e6c <_sfread_r>
   162b6:	4604      	mov	r4, r0
   162b8:	b1d8      	cbz	r0, 162f2 <__ssvfscanf_r+0x179e>
   162ba:	4580      	cmp	r8, r0
   162bc:	d9c6      	bls.n	1624c <__ssvfscanf_r+0x16f8>
   162be:	6828      	ldr	r0, [r5, #0]
   162c0:	4621      	mov	r1, r4
   162c2:	f7f9 f9d7 	bl	f674 <realloc>
   162c6:	2800      	cmp	r0, #0
   162c8:	d0c0      	beq.n	1624c <__ssvfscanf_r+0x16f8>
   162ca:	6028      	str	r0, [r5, #0]
   162cc:	e7be      	b.n	1624c <__ssvfscanf_r+0x16f8>
   162ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   162d0:	3208      	adds	r2, #8
   162d2:	b294      	uxth	r4, r2
   162d4:	681a      	ldr	r2, [r3, #0]
   162d6:	637a      	str	r2, [r7, #52]	; 0x34
   162d8:	4610      	mov	r0, r2
   162da:	00a1      	lsls	r1, r4, #2
   162dc:	f7f9 f9ca 	bl	f674 <realloc>
   162e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   162e2:	63f8      	str	r0, [r7, #60]	; 0x3c
   162e4:	2800      	cmp	r0, #0
   162e6:	d05b      	beq.n	163a0 <__ssvfscanf_r+0x184c>
   162e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   162ea:	809c      	strh	r4, [r3, #4]
   162ec:	6018      	str	r0, [r3, #0]
   162ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   162f0:	e7d2      	b.n	16298 <__ssvfscanf_r+0x1744>
   162f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   162f4:	f8d7 803c 	ldr.w	r8, [r7, #60]	; 0x3c
   162f8:	2b00      	cmp	r3, #0
   162fa:	f43f ad75 	beq.w	15de8 <__ssvfscanf_r+0x1294>
   162fe:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   16302:	065b      	lsls	r3, r3, #25
   16304:	f57e ad1d 	bpl.w	14d42 <__ssvfscanf_r+0x1ee>
   16308:	e56a      	b.n	15de0 <__ssvfscanf_r+0x128c>
   1630a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1630c:	3202      	adds	r2, #2
   1630e:	d11d      	bne.n	1634c <__ssvfscanf_r+0x17f8>
   16310:	f8db 2004 	ldr.w	r2, [fp, #4]
   16314:	2a00      	cmp	r2, #0
   16316:	461d      	mov	r5, r3
   16318:	f73f ae80 	bgt.w	1601c <__ssvfscanf_r+0x14c8>
   1631c:	4659      	mov	r1, fp
   1631e:	4620      	mov	r0, r4
   16320:	f001 fd86 	bl	17e30 <__ssrefill_r>
   16324:	b9e0      	cbnz	r0, 16360 <__ssvfscanf_r+0x180c>
   16326:	f1b9 0f00 	cmp.w	r9, #0
   1632a:	f47f ae77 	bne.w	1601c <__ssvfscanf_r+0x14c8>
   1632e:	4645      	mov	r5, r8
   16330:	46a1      	mov	r9, r4
   16332:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16334:	b123      	cbz	r3, 16340 <__ssvfscanf_r+0x17ec>
   16336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16338:	1af1      	subs	r1, r6, r3
   1633a:	ebb5 0fa1 	cmp.w	r5, r1, asr #2
   1633e:	d827      	bhi.n	16390 <__ssvfscanf_r+0x183c>
   16340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16342:	2b00      	cmp	r3, #0
   16344:	f47e ac2d 	bne.w	14ba2 <__ssvfscanf_r+0x4e>
   16348:	f7ff ba1c 	b.w	15784 <__ssvfscanf_r+0xc30>
   1634c:	449a      	add	sl, r3
   1634e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16350:	2b03      	cmp	r3, #3
   16352:	f47f ae97 	bne.w	16084 <__ssvfscanf_r+0x1530>
   16356:	682b      	ldr	r3, [r5, #0]
   16358:	2b04      	cmp	r3, #4
   1635a:	f47f ae93 	bne.w	16084 <__ssvfscanf_r+0x1530>
   1635e:	e693      	b.n	16088 <__ssvfscanf_r+0x1534>
   16360:	46a1      	mov	r9, r4
   16362:	462c      	mov	r4, r5
   16364:	4645      	mov	r5, r8
   16366:	2c00      	cmp	r4, #0
   16368:	d0e3      	beq.n	16332 <__ssvfscanf_r+0x17de>
   1636a:	f7fe bcdf 	b.w	14d2c <__ssvfscanf_r+0x1d8>
   1636e:	6cba      	ldr	r2, [r7, #72]	; 0x48
   16370:	1946      	adds	r6, r0, r5
   16372:	6010      	str	r0, [r2, #0]
   16374:	ea4f 0848 	mov.w	r8, r8, lsl #1
   16378:	3604      	adds	r6, #4
   1637a:	f8db 3004 	ldr.w	r3, [fp, #4]
   1637e:	2b00      	cmp	r3, #0
   16380:	f04f 0500 	mov.w	r5, #0
   16384:	ddca      	ble.n	1631c <__ssvfscanf_r+0x17c8>
   16386:	f1b9 0f00 	cmp.w	r9, #0
   1638a:	f47f ae47 	bne.w	1601c <__ssvfscanf_r+0x14c8>
   1638e:	e7ce      	b.n	1632e <__ssvfscanf_r+0x17da>
   16390:	6cbc      	ldr	r4, [r7, #72]	; 0x48
   16392:	6820      	ldr	r0, [r4, #0]
   16394:	f7f9 f96e 	bl	f674 <realloc>
   16398:	2800      	cmp	r0, #0
   1639a:	d0d1      	beq.n	16340 <__ssvfscanf_r+0x17ec>
   1639c:	6020      	str	r0, [r4, #0]
   1639e:	e7cf      	b.n	16340 <__ssvfscanf_r+0x17ec>
   163a0:	4690      	mov	r8, r2
   163a2:	e521      	b.n	15de8 <__ssvfscanf_r+0x1294>

000163a4 <_fclose_r>:
   163a4:	b570      	push	{r4, r5, r6, lr}
   163a6:	2900      	cmp	r1, #0
   163a8:	d04b      	beq.n	16442 <_fclose_r+0x9e>
   163aa:	4606      	mov	r6, r0
   163ac:	460c      	mov	r4, r1
   163ae:	b110      	cbz	r0, 163b6 <_fclose_r+0x12>
   163b0:	6b43      	ldr	r3, [r0, #52]	; 0x34
   163b2:	2b00      	cmp	r3, #0
   163b4:	d048      	beq.n	16448 <_fclose_r+0xa4>
   163b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
   163b8:	07d8      	lsls	r0, r3, #31
   163ba:	d534      	bpl.n	16426 <_fclose_r+0x82>
   163bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   163c0:	2b00      	cmp	r3, #0
   163c2:	d03e      	beq.n	16442 <_fclose_r+0x9e>
   163c4:	4621      	mov	r1, r4
   163c6:	4630      	mov	r0, r6
   163c8:	f000 f850 	bl	1646c <__sflush_r>
   163cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   163ce:	4605      	mov	r5, r0
   163d0:	b133      	cbz	r3, 163e0 <_fclose_r+0x3c>
   163d2:	69e1      	ldr	r1, [r4, #28]
   163d4:	4630      	mov	r0, r6
   163d6:	4798      	blx	r3
   163d8:	2800      	cmp	r0, #0
   163da:	bfb8      	it	lt
   163dc:	f04f 35ff 	movlt.w	r5, #4294967295
   163e0:	89a3      	ldrh	r3, [r4, #12]
   163e2:	061a      	lsls	r2, r3, #24
   163e4:	d43c      	bmi.n	16460 <_fclose_r+0xbc>
   163e6:	6b21      	ldr	r1, [r4, #48]	; 0x30
   163e8:	b141      	cbz	r1, 163fc <_fclose_r+0x58>
   163ea:	f104 0340 	add.w	r3, r4, #64	; 0x40
   163ee:	4299      	cmp	r1, r3
   163f0:	d002      	beq.n	163f8 <_fclose_r+0x54>
   163f2:	4630      	mov	r0, r6
   163f4:	f7fb fb96 	bl	11b24 <_free_r>
   163f8:	2300      	movs	r3, #0
   163fa:	6323      	str	r3, [r4, #48]	; 0x30
   163fc:	6c61      	ldr	r1, [r4, #68]	; 0x44
   163fe:	b121      	cbz	r1, 1640a <_fclose_r+0x66>
   16400:	4630      	mov	r0, r6
   16402:	f7fb fb8f 	bl	11b24 <_free_r>
   16406:	2300      	movs	r3, #0
   16408:	6463      	str	r3, [r4, #68]	; 0x44
   1640a:	f7fa fbe1 	bl	10bd0 <__sfp_lock_acquire>
   1640e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   16410:	2200      	movs	r2, #0
   16412:	07db      	lsls	r3, r3, #31
   16414:	81a2      	strh	r2, [r4, #12]
   16416:	d51f      	bpl.n	16458 <_fclose_r+0xb4>
   16418:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1641a:	f7fb f845 	bl	114a8 <__retarget_lock_close_recursive>
   1641e:	f7fa fbdd 	bl	10bdc <__sfp_lock_release>
   16422:	4628      	mov	r0, r5
   16424:	bd70      	pop	{r4, r5, r6, pc}
   16426:	89a3      	ldrh	r3, [r4, #12]
   16428:	0599      	lsls	r1, r3, #22
   1642a:	d4cb      	bmi.n	163c4 <_fclose_r+0x20>
   1642c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1642e:	f7fb f83d 	bl	114ac <__retarget_lock_acquire_recursive>
   16432:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   16436:	2b00      	cmp	r3, #0
   16438:	d1c4      	bne.n	163c4 <_fclose_r+0x20>
   1643a:	6e65      	ldr	r5, [r4, #100]	; 0x64
   1643c:	f015 0501 	ands.w	r5, r5, #1
   16440:	d005      	beq.n	1644e <_fclose_r+0xaa>
   16442:	2500      	movs	r5, #0
   16444:	4628      	mov	r0, r5
   16446:	bd70      	pop	{r4, r5, r6, pc}
   16448:	f7fa fba4 	bl	10b94 <__sinit>
   1644c:	e7b3      	b.n	163b6 <_fclose_r+0x12>
   1644e:	6da0      	ldr	r0, [r4, #88]	; 0x58
   16450:	f7fb f82e 	bl	114b0 <__retarget_lock_release_recursive>
   16454:	4628      	mov	r0, r5
   16456:	bd70      	pop	{r4, r5, r6, pc}
   16458:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1645a:	f7fb f829 	bl	114b0 <__retarget_lock_release_recursive>
   1645e:	e7db      	b.n	16418 <_fclose_r+0x74>
   16460:	6921      	ldr	r1, [r4, #16]
   16462:	4630      	mov	r0, r6
   16464:	f7fb fb5e 	bl	11b24 <_free_r>
   16468:	e7bd      	b.n	163e6 <_fclose_r+0x42>
   1646a:	bf00      	nop

0001646c <__sflush_r>:
   1646c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   16470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16474:	460c      	mov	r4, r1
   16476:	0711      	lsls	r1, r2, #28
   16478:	4680      	mov	r8, r0
   1647a:	d447      	bmi.n	1650c <__sflush_r+0xa0>
   1647c:	6863      	ldr	r3, [r4, #4]
   1647e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   16482:	2b00      	cmp	r3, #0
   16484:	81a2      	strh	r2, [r4, #12]
   16486:	dd5e      	ble.n	16546 <__sflush_r+0xda>
   16488:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   1648a:	2d00      	cmp	r5, #0
   1648c:	d058      	beq.n	16540 <__sflush_r+0xd4>
   1648e:	2300      	movs	r3, #0
   16490:	f8d8 6000 	ldr.w	r6, [r8]
   16494:	f8c8 3000 	str.w	r3, [r8]
   16498:	b293      	uxth	r3, r2
   1649a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   1649e:	d156      	bne.n	1654e <__sflush_r+0xe2>
   164a0:	2301      	movs	r3, #1
   164a2:	69e1      	ldr	r1, [r4, #28]
   164a4:	4640      	mov	r0, r8
   164a6:	47a8      	blx	r5
   164a8:	1c43      	adds	r3, r0, #1
   164aa:	d067      	beq.n	1657c <__sflush_r+0x110>
   164ac:	89a3      	ldrh	r3, [r4, #12]
   164ae:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   164b0:	075f      	lsls	r7, r3, #29
   164b2:	d505      	bpl.n	164c0 <__sflush_r+0x54>
   164b4:	6863      	ldr	r3, [r4, #4]
   164b6:	1ac0      	subs	r0, r0, r3
   164b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   164ba:	b10b      	cbz	r3, 164c0 <__sflush_r+0x54>
   164bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   164be:	1ac0      	subs	r0, r0, r3
   164c0:	69e1      	ldr	r1, [r4, #28]
   164c2:	4602      	mov	r2, r0
   164c4:	2300      	movs	r3, #0
   164c6:	4640      	mov	r0, r8
   164c8:	47a8      	blx	r5
   164ca:	1c41      	adds	r1, r0, #1
   164cc:	d141      	bne.n	16552 <__sflush_r+0xe6>
   164ce:	f8d8 3000 	ldr.w	r3, [r8]
   164d2:	2b00      	cmp	r3, #0
   164d4:	d03d      	beq.n	16552 <__sflush_r+0xe6>
   164d6:	2b1d      	cmp	r3, #29
   164d8:	d001      	beq.n	164de <__sflush_r+0x72>
   164da:	2b16      	cmp	r3, #22
   164dc:	d156      	bne.n	1658c <__sflush_r+0x120>
   164de:	89a3      	ldrh	r3, [r4, #12]
   164e0:	6922      	ldr	r2, [r4, #16]
   164e2:	6022      	str	r2, [r4, #0]
   164e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   164e8:	2100      	movs	r1, #0
   164ea:	6061      	str	r1, [r4, #4]
   164ec:	81a3      	strh	r3, [r4, #12]
   164ee:	6b21      	ldr	r1, [r4, #48]	; 0x30
   164f0:	f8c8 6000 	str.w	r6, [r8]
   164f4:	b321      	cbz	r1, 16540 <__sflush_r+0xd4>
   164f6:	f104 0340 	add.w	r3, r4, #64	; 0x40
   164fa:	4299      	cmp	r1, r3
   164fc:	d002      	beq.n	16504 <__sflush_r+0x98>
   164fe:	4640      	mov	r0, r8
   16500:	f7fb fb10 	bl	11b24 <_free_r>
   16504:	2000      	movs	r0, #0
   16506:	6320      	str	r0, [r4, #48]	; 0x30
   16508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1650c:	6926      	ldr	r6, [r4, #16]
   1650e:	b1be      	cbz	r6, 16540 <__sflush_r+0xd4>
   16510:	b293      	uxth	r3, r2
   16512:	6825      	ldr	r5, [r4, #0]
   16514:	6026      	str	r6, [r4, #0]
   16516:	079a      	lsls	r2, r3, #30
   16518:	bf0c      	ite	eq
   1651a:	6963      	ldreq	r3, [r4, #20]
   1651c:	2300      	movne	r3, #0
   1651e:	1bad      	subs	r5, r5, r6
   16520:	60a3      	str	r3, [r4, #8]
   16522:	e00b      	b.n	1653c <__sflush_r+0xd0>
   16524:	462b      	mov	r3, r5
   16526:	4632      	mov	r2, r6
   16528:	69e1      	ldr	r1, [r4, #28]
   1652a:	6a67      	ldr	r7, [r4, #36]	; 0x24
   1652c:	4640      	mov	r0, r8
   1652e:	47b8      	blx	r7
   16530:	f1b0 0c00 	subs.w	ip, r0, #0
   16534:	eba5 050c 	sub.w	r5, r5, ip
   16538:	4466      	add	r6, ip
   1653a:	dd17      	ble.n	1656c <__sflush_r+0x100>
   1653c:	2d00      	cmp	r5, #0
   1653e:	dcf1      	bgt.n	16524 <__sflush_r+0xb8>
   16540:	2000      	movs	r0, #0
   16542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16546:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   16548:	2b00      	cmp	r3, #0
   1654a:	dc9d      	bgt.n	16488 <__sflush_r+0x1c>
   1654c:	e7f8      	b.n	16540 <__sflush_r+0xd4>
   1654e:	6d20      	ldr	r0, [r4, #80]	; 0x50
   16550:	e7ae      	b.n	164b0 <__sflush_r+0x44>
   16552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   16556:	6922      	ldr	r2, [r4, #16]
   16558:	6022      	str	r2, [r4, #0]
   1655a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   1655e:	81a3      	strh	r3, [r4, #12]
   16560:	2200      	movs	r2, #0
   16562:	04db      	lsls	r3, r3, #19
   16564:	6062      	str	r2, [r4, #4]
   16566:	d5c2      	bpl.n	164ee <__sflush_r+0x82>
   16568:	6520      	str	r0, [r4, #80]	; 0x50
   1656a:	e7c0      	b.n	164ee <__sflush_r+0x82>
   1656c:	89a3      	ldrh	r3, [r4, #12]
   1656e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   16572:	f04f 30ff 	mov.w	r0, #4294967295
   16576:	81a3      	strh	r3, [r4, #12]
   16578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1657c:	f8d8 3000 	ldr.w	r3, [r8]
   16580:	2b00      	cmp	r3, #0
   16582:	d093      	beq.n	164ac <__sflush_r+0x40>
   16584:	2b1d      	cmp	r3, #29
   16586:	d006      	beq.n	16596 <__sflush_r+0x12a>
   16588:	2b16      	cmp	r3, #22
   1658a:	d004      	beq.n	16596 <__sflush_r+0x12a>
   1658c:	89a3      	ldrh	r3, [r4, #12]
   1658e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   16592:	81a3      	strh	r3, [r4, #12]
   16594:	e7d5      	b.n	16542 <__sflush_r+0xd6>
   16596:	f8c8 6000 	str.w	r6, [r8]
   1659a:	e7d1      	b.n	16540 <__sflush_r+0xd4>

0001659c <_fflush_r>:
   1659c:	b538      	push	{r3, r4, r5, lr}
   1659e:	460c      	mov	r4, r1
   165a0:	4605      	mov	r5, r0
   165a2:	b108      	cbz	r0, 165a8 <_fflush_r+0xc>
   165a4:	6b43      	ldr	r3, [r0, #52]	; 0x34
   165a6:	b303      	cbz	r3, 165ea <_fflush_r+0x4e>
   165a8:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   165ac:	b188      	cbz	r0, 165d2 <_fflush_r+0x36>
   165ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
   165b0:	07db      	lsls	r3, r3, #31
   165b2:	d401      	bmi.n	165b8 <_fflush_r+0x1c>
   165b4:	0581      	lsls	r1, r0, #22
   165b6:	d50f      	bpl.n	165d8 <_fflush_r+0x3c>
   165b8:	4628      	mov	r0, r5
   165ba:	4621      	mov	r1, r4
   165bc:	f7ff ff56 	bl	1646c <__sflush_r>
   165c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   165c2:	07da      	lsls	r2, r3, #31
   165c4:	4605      	mov	r5, r0
   165c6:	d402      	bmi.n	165ce <_fflush_r+0x32>
   165c8:	89a3      	ldrh	r3, [r4, #12]
   165ca:	059b      	lsls	r3, r3, #22
   165cc:	d508      	bpl.n	165e0 <_fflush_r+0x44>
   165ce:	4628      	mov	r0, r5
   165d0:	bd38      	pop	{r3, r4, r5, pc}
   165d2:	4605      	mov	r5, r0
   165d4:	4628      	mov	r0, r5
   165d6:	bd38      	pop	{r3, r4, r5, pc}
   165d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   165da:	f7fa ff67 	bl	114ac <__retarget_lock_acquire_recursive>
   165de:	e7eb      	b.n	165b8 <_fflush_r+0x1c>
   165e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   165e2:	f7fa ff65 	bl	114b0 <__retarget_lock_release_recursive>
   165e6:	4628      	mov	r0, r5
   165e8:	bd38      	pop	{r3, r4, r5, pc}
   165ea:	f7fa fad3 	bl	10b94 <__sinit>
   165ee:	e7db      	b.n	165a8 <_fflush_r+0xc>

000165f0 <__sccl>:
   165f0:	b570      	push	{r4, r5, r6, lr}
   165f2:	780c      	ldrb	r4, [r1, #0]
   165f4:	2c5e      	cmp	r4, #94	; 0x5e
   165f6:	4686      	mov	lr, r0
   165f8:	d01e      	beq.n	16638 <__sccl+0x48>
   165fa:	2200      	movs	r2, #0
   165fc:	1c48      	adds	r0, r1, #1
   165fe:	4694      	mov	ip, r2
   16600:	f10e 33ff 	add.w	r3, lr, #4294967295
   16604:	f10e 01ff 	add.w	r1, lr, #255	; 0xff
   16608:	f803 2f01 	strb.w	r2, [r3, #1]!
   1660c:	428b      	cmp	r3, r1
   1660e:	d1fb      	bne.n	16608 <__sccl+0x18>
   16610:	b184      	cbz	r4, 16634 <__sccl+0x44>
   16612:	f08c 0101 	eor.w	r1, ip, #1
   16616:	f80e 1004 	strb.w	r1, [lr, r4]
   1661a:	1c45      	adds	r5, r0, #1
   1661c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   16620:	2b2d      	cmp	r3, #45	; 0x2d
   16622:	d00e      	beq.n	16642 <__sccl+0x52>
   16624:	2b5d      	cmp	r3, #93	; 0x5d
   16626:	d003      	beq.n	16630 <__sccl+0x40>
   16628:	b11b      	cbz	r3, 16632 <__sccl+0x42>
   1662a:	461c      	mov	r4, r3
   1662c:	4628      	mov	r0, r5
   1662e:	e7f2      	b.n	16616 <__sccl+0x26>
   16630:	4628      	mov	r0, r5
   16632:	bd70      	pop	{r4, r5, r6, pc}
   16634:	3801      	subs	r0, #1
   16636:	bd70      	pop	{r4, r5, r6, pc}
   16638:	2201      	movs	r2, #1
   1663a:	784c      	ldrb	r4, [r1, #1]
   1663c:	1c88      	adds	r0, r1, #2
   1663e:	4694      	mov	ip, r2
   16640:	e7de      	b.n	16600 <__sccl+0x10>
   16642:	f890 c001 	ldrb.w	ip, [r0, #1]
   16646:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   1664a:	d0ee      	beq.n	1662a <__sccl+0x3a>
   1664c:	4564      	cmp	r4, ip
   1664e:	dcec      	bgt.n	1662a <__sccl+0x3a>
   16650:	1c66      	adds	r6, r4, #1
   16652:	3002      	adds	r0, #2
   16654:	eb0e 0206 	add.w	r2, lr, r6
   16658:	f802 1b01 	strb.w	r1, [r2], #1
   1665c:	eba2 030e 	sub.w	r3, r2, lr
   16660:	3b01      	subs	r3, #1
   16662:	459c      	cmp	ip, r3
   16664:	dcf8      	bgt.n	16658 <__sccl+0x68>
   16666:	ebac 0304 	sub.w	r3, ip, r4
   1666a:	3b01      	subs	r3, #1
   1666c:	4564      	cmp	r4, ip
   1666e:	bfa8      	it	ge
   16670:	2300      	movge	r3, #0
   16672:	3502      	adds	r5, #2
   16674:	199c      	adds	r4, r3, r6
   16676:	e7d1      	b.n	1661c <__sccl+0x2c>

00016678 <stpncpy>:
   16678:	ea41 0300 	orr.w	r3, r1, r0
   1667c:	079b      	lsls	r3, r3, #30
   1667e:	b430      	push	{r4, r5}
   16680:	d101      	bne.n	16686 <stpncpy+0xe>
   16682:	2a03      	cmp	r2, #3
   16684:	d80f      	bhi.n	166a6 <stpncpy+0x2e>
   16686:	f101 3cff 	add.w	ip, r1, #4294967295
   1668a:	e007      	b.n	1669c <stpncpy+0x24>
   1668c:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
   16690:	f803 1b01 	strb.w	r1, [r3], #1
   16694:	1e54      	subs	r4, r2, #1
   16696:	b1c1      	cbz	r1, 166ca <stpncpy+0x52>
   16698:	4622      	mov	r2, r4
   1669a:	4618      	mov	r0, r3
   1669c:	4603      	mov	r3, r0
   1669e:	2a00      	cmp	r2, #0
   166a0:	d1f4      	bne.n	1668c <stpncpy+0x14>
   166a2:	bc30      	pop	{r4, r5}
   166a4:	4770      	bx	lr
   166a6:	460b      	mov	r3, r1
   166a8:	4619      	mov	r1, r3
   166aa:	f853 5b04 	ldr.w	r5, [r3], #4
   166ae:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   166b2:	ea24 0405 	bic.w	r4, r4, r5
   166b6:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   166ba:	d1e4      	bne.n	16686 <stpncpy+0xe>
   166bc:	3a04      	subs	r2, #4
   166be:	2a03      	cmp	r2, #3
   166c0:	f840 5b04 	str.w	r5, [r0], #4
   166c4:	4619      	mov	r1, r3
   166c6:	d8ef      	bhi.n	166a8 <stpncpy+0x30>
   166c8:	e7dd      	b.n	16686 <stpncpy+0xe>
   166ca:	4402      	add	r2, r0
   166cc:	2c00      	cmp	r4, #0
   166ce:	d0e8      	beq.n	166a2 <stpncpy+0x2a>
   166d0:	f803 1b01 	strb.w	r1, [r3], #1
   166d4:	4293      	cmp	r3, r2
   166d6:	d1fb      	bne.n	166d0 <stpncpy+0x58>
   166d8:	bc30      	pop	{r4, r5}
   166da:	4770      	bx	lr

000166dc <_localeconv_r>:
   166dc:	4800      	ldr	r0, [pc, #0]	; (166e0 <_localeconv_r+0x4>)
   166de:	4770      	bx	lr
   166e0:	2000c25c 	.word	0x2000c25c
   166e4:	00000000 	.word	0x00000000

000166e8 <frexp>:
   166e8:	b430      	push	{r4, r5}
   166ea:	b082      	sub	sp, #8
   166ec:	ed8d 0b00 	vstr	d0, [sp]
   166f0:	9a01      	ldr	r2, [sp, #4]
   166f2:	4c19      	ldr	r4, [pc, #100]	; (16758 <frexp+0x70>)
   166f4:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   166f8:	2100      	movs	r1, #0
   166fa:	42a3      	cmp	r3, r4
   166fc:	6001      	str	r1, [r0, #0]
   166fe:	dc21      	bgt.n	16744 <frexp+0x5c>
   16700:	9c00      	ldr	r4, [sp, #0]
   16702:	431c      	orrs	r4, r3
   16704:	d01e      	beq.n	16744 <frexp+0x5c>
   16706:	4c15      	ldr	r4, [pc, #84]	; (1675c <frexp+0x74>)
   16708:	4014      	ands	r4, r2
   1670a:	b954      	cbnz	r4, 16722 <frexp+0x3a>
   1670c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 16750 <frexp+0x68>
   16710:	ee20 7b07 	vmul.f64	d7, d0, d7
   16714:	ed8d 7b00 	vstr	d7, [sp]
   16718:	9a01      	ldr	r2, [sp, #4]
   1671a:	f06f 0135 	mvn.w	r1, #53	; 0x35
   1671e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   16722:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
   16726:	e9dd 4500 	ldrd	r4, r5, [sp]
   1672a:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
   1672e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
   16732:	151b      	asrs	r3, r3, #20
   16734:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   16738:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   1673c:	e9cd 4500 	strd	r4, r5, [sp]
   16740:	440b      	add	r3, r1
   16742:	6003      	str	r3, [r0, #0]
   16744:	ed9d 0b00 	vldr	d0, [sp]
   16748:	b002      	add	sp, #8
   1674a:	bc30      	pop	{r4, r5}
   1674c:	4770      	bx	lr
   1674e:	bf00      	nop
   16750:	00000000 	.word	0x00000000
   16754:	43500000 	.word	0x43500000
   16758:	7fefffff 	.word	0x7fefffff
   1675c:	7ff00000 	.word	0x7ff00000

00016760 <__assert_func>:
   16760:	b500      	push	{lr}
   16762:	4c0b      	ldr	r4, [pc, #44]	; (16790 <__assert_func+0x30>)
   16764:	6825      	ldr	r5, [r4, #0]
   16766:	4614      	mov	r4, r2
   16768:	68ee      	ldr	r6, [r5, #12]
   1676a:	461a      	mov	r2, r3
   1676c:	b085      	sub	sp, #20
   1676e:	4603      	mov	r3, r0
   16770:	460d      	mov	r5, r1
   16772:	b14c      	cbz	r4, 16788 <__assert_func+0x28>
   16774:	4907      	ldr	r1, [pc, #28]	; (16794 <__assert_func+0x34>)
   16776:	9500      	str	r5, [sp, #0]
   16778:	e9cd 1401 	strd	r1, r4, [sp, #4]
   1677c:	4630      	mov	r0, r6
   1677e:	4906      	ldr	r1, [pc, #24]	; (16798 <__assert_func+0x38>)
   16780:	f001 fa82 	bl	17c88 <fiprintf>
   16784:	f7f7 f8ba 	bl	d8fc <abort>
   16788:	4904      	ldr	r1, [pc, #16]	; (1679c <__assert_func+0x3c>)
   1678a:	460c      	mov	r4, r1
   1678c:	e7f3      	b.n	16776 <__assert_func+0x16>
   1678e:	bf00      	nop
   16790:	2000c6f4 	.word	0x2000c6f4
   16794:	20003480 	.word	0x20003480
   16798:	20003490 	.word	0x20003490
   1679c:	2000b0f8 	.word	0x2000b0f8

000167a0 <quorem>:
   167a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   167a4:	6903      	ldr	r3, [r0, #16]
   167a6:	690c      	ldr	r4, [r1, #16]
   167a8:	42a3      	cmp	r3, r4
   167aa:	b083      	sub	sp, #12
   167ac:	f2c0 8087 	blt.w	168be <quorem+0x11e>
   167b0:	3c01      	subs	r4, #1
   167b2:	f101 0514 	add.w	r5, r1, #20
   167b6:	00a3      	lsls	r3, r4, #2
   167b8:	f100 0814 	add.w	r8, r0, #20
   167bc:	9300      	str	r3, [sp, #0]
   167be:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   167c2:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   167c6:	3301      	adds	r3, #1
   167c8:	4681      	mov	r9, r0
   167ca:	429a      	cmp	r2, r3
   167cc:	eb08 0084 	add.w	r0, r8, r4, lsl #2
   167d0:	eb05 0784 	add.w	r7, r5, r4, lsl #2
   167d4:	9001      	str	r0, [sp, #4]
   167d6:	fbb2 f6f3 	udiv	r6, r2, r3
   167da:	d33b      	bcc.n	16854 <quorem+0xb4>
   167dc:	f04f 0c00 	mov.w	ip, #0
   167e0:	46ae      	mov	lr, r5
   167e2:	4640      	mov	r0, r8
   167e4:	46e2      	mov	sl, ip
   167e6:	4663      	mov	r3, ip
   167e8:	f85e bb04 	ldr.w	fp, [lr], #4
   167ec:	6802      	ldr	r2, [r0, #0]
   167ee:	fa1f fc8b 	uxth.w	ip, fp
   167f2:	fb06 330c 	mla	r3, r6, ip, r3
   167f6:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   167fa:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   167fe:	fb06 cc0b 	mla	ip, r6, fp, ip
   16802:	b29b      	uxth	r3, r3
   16804:	ebaa 0303 	sub.w	r3, sl, r3
   16808:	fa1f fa8c 	uxth.w	sl, ip
   1680c:	fa13 f382 	uxtah	r3, r3, r2
   16810:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   16814:	eb02 4223 	add.w	r2, r2, r3, asr #16
   16818:	b29b      	uxth	r3, r3
   1681a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   1681e:	4577      	cmp	r7, lr
   16820:	f840 3b04 	str.w	r3, [r0], #4
   16824:	ea4f 4a22 	mov.w	sl, r2, asr #16
   16828:	ea4f 431c 	mov.w	r3, ip, lsr #16
   1682c:	d2dc      	bcs.n	167e8 <quorem+0x48>
   1682e:	9b00      	ldr	r3, [sp, #0]
   16830:	f858 3003 	ldr.w	r3, [r8, r3]
   16834:	b973      	cbnz	r3, 16854 <quorem+0xb4>
   16836:	9b01      	ldr	r3, [sp, #4]
   16838:	3b04      	subs	r3, #4
   1683a:	4598      	cmp	r8, r3
   1683c:	d304      	bcc.n	16848 <quorem+0xa8>
   1683e:	e007      	b.n	16850 <quorem+0xb0>
   16840:	4598      	cmp	r8, r3
   16842:	f104 34ff 	add.w	r4, r4, #4294967295
   16846:	d203      	bcs.n	16850 <quorem+0xb0>
   16848:	f853 2904 	ldr.w	r2, [r3], #-4
   1684c:	2a00      	cmp	r2, #0
   1684e:	d0f7      	beq.n	16840 <quorem+0xa0>
   16850:	f8c9 4010 	str.w	r4, [r9, #16]
   16854:	4648      	mov	r0, r9
   16856:	f7fc f96f 	bl	12b38 <__mcmp>
   1685a:	2800      	cmp	r0, #0
   1685c:	db2b      	blt.n	168b6 <quorem+0x116>
   1685e:	3601      	adds	r6, #1
   16860:	4641      	mov	r1, r8
   16862:	2300      	movs	r3, #0
   16864:	f855 0b04 	ldr.w	r0, [r5], #4
   16868:	f8d1 c000 	ldr.w	ip, [r1]
   1686c:	b282      	uxth	r2, r0
   1686e:	1a9a      	subs	r2, r3, r2
   16870:	0c03      	lsrs	r3, r0, #16
   16872:	fa12 f28c 	uxtah	r2, r2, ip
   16876:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
   1687a:	eb03 4322 	add.w	r3, r3, r2, asr #16
   1687e:	b292      	uxth	r2, r2
   16880:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   16884:	42af      	cmp	r7, r5
   16886:	f841 2b04 	str.w	r2, [r1], #4
   1688a:	ea4f 4323 	mov.w	r3, r3, asr #16
   1688e:	d2e9      	bcs.n	16864 <quorem+0xc4>
   16890:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   16894:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   16898:	b96a      	cbnz	r2, 168b6 <quorem+0x116>
   1689a:	3b04      	subs	r3, #4
   1689c:	4598      	cmp	r8, r3
   1689e:	d304      	bcc.n	168aa <quorem+0x10a>
   168a0:	e007      	b.n	168b2 <quorem+0x112>
   168a2:	4598      	cmp	r8, r3
   168a4:	f104 34ff 	add.w	r4, r4, #4294967295
   168a8:	d203      	bcs.n	168b2 <quorem+0x112>
   168aa:	f853 2904 	ldr.w	r2, [r3], #-4
   168ae:	2a00      	cmp	r2, #0
   168b0:	d0f7      	beq.n	168a2 <quorem+0x102>
   168b2:	f8c9 4010 	str.w	r4, [r9, #16]
   168b6:	4630      	mov	r0, r6
   168b8:	b003      	add	sp, #12
   168ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   168be:	2000      	movs	r0, #0
   168c0:	b003      	add	sp, #12
   168c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   168c6:	bf00      	nop

000168c8 <_dtoa_r>:
   168c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   168cc:	ed2d 8b02 	vpush	{d8}
   168d0:	b08f      	sub	sp, #60	; 0x3c
   168d2:	ed8d 0b02 	vstr	d0, [sp, #8]
   168d6:	9101      	str	r1, [sp, #4]
   168d8:	6b81      	ldr	r1, [r0, #56]	; 0x38
   168da:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   168dc:	9305      	str	r3, [sp, #20]
   168de:	ec57 6b10 	vmov	r6, r7, d0
   168e2:	4604      	mov	r4, r0
   168e4:	4693      	mov	fp, r2
   168e6:	b141      	cbz	r1, 168fa <_dtoa_r+0x32>
   168e8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
   168ea:	604a      	str	r2, [r1, #4]
   168ec:	2301      	movs	r3, #1
   168ee:	4093      	lsls	r3, r2
   168f0:	608b      	str	r3, [r1, #8]
   168f2:	f7fb fe69 	bl	125c8 <_Bfree>
   168f6:	2300      	movs	r3, #0
   168f8:	63a3      	str	r3, [r4, #56]	; 0x38
   168fa:	f1b7 0800 	subs.w	r8, r7, #0
   168fe:	bfb4      	ite	lt
   16900:	2301      	movlt	r3, #1
   16902:	2300      	movge	r3, #0
   16904:	602b      	str	r3, [r5, #0]
   16906:	4bbe      	ldr	r3, [pc, #760]	; (16c00 <_dtoa_r+0x338>)
   16908:	bfbc      	itt	lt
   1690a:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
   1690e:	f8cd 800c 	strlt.w	r8, [sp, #12]
   16912:	ea33 0308 	bics.w	r3, r3, r8
   16916:	f000 809f 	beq.w	16a58 <_dtoa_r+0x190>
   1691a:	ed9d 8b02 	vldr	d8, [sp, #8]
   1691e:	eeb5 8b40 	vcmp.f64	d8, #0.0
   16922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16926:	d111      	bne.n	1694c <_dtoa_r+0x84>
   16928:	9a05      	ldr	r2, [sp, #20]
   1692a:	2301      	movs	r3, #1
   1692c:	6013      	str	r3, [r2, #0]
   1692e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   16930:	2b00      	cmp	r3, #0
   16932:	f000 823f 	beq.w	16db4 <_dtoa_r+0x4ec>
   16936:	4bb3      	ldr	r3, [pc, #716]	; (16c04 <_dtoa_r+0x33c>)
   16938:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1693a:	6013      	str	r3, [r2, #0]
   1693c:	3b01      	subs	r3, #1
   1693e:	9300      	str	r3, [sp, #0]
   16940:	9800      	ldr	r0, [sp, #0]
   16942:	b00f      	add	sp, #60	; 0x3c
   16944:	ecbd 8b02 	vpop	{d8}
   16948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1694c:	aa0c      	add	r2, sp, #48	; 0x30
   1694e:	a90d      	add	r1, sp, #52	; 0x34
   16950:	4620      	mov	r0, r4
   16952:	eeb0 0b48 	vmov.f64	d0, d8
   16956:	f7fc fa4f 	bl	12df8 <__d2b>
   1695a:	ea5f 5318 	movs.w	r3, r8, lsr #20
   1695e:	4605      	mov	r5, r0
   16960:	f040 8092 	bne.w	16a88 <_dtoa_r+0x1c0>
   16964:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
   16968:	440b      	add	r3, r1
   1696a:	f203 4232 	addw	r2, r3, #1074	; 0x432
   1696e:	2a20      	cmp	r2, #32
   16970:	f340 82fa 	ble.w	16f68 <_dtoa_r+0x6a0>
   16974:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
   16978:	fa08 f802 	lsl.w	r8, r8, r2
   1697c:	f203 4212 	addw	r2, r3, #1042	; 0x412
   16980:	40d6      	lsrs	r6, r2
   16982:	ea48 0206 	orr.w	r2, r8, r6
   16986:	ee07 2a10 	vmov	s14, r2
   1698a:	eeb8 7b47 	vcvt.f64.u32	d7, s14
   1698e:	1e58      	subs	r0, r3, #1
   16990:	ee17 6a90 	vmov	r6, s15
   16994:	ec53 2b17 	vmov	r2, r3, d7
   16998:	f04f 0a01 	mov.w	sl, #1
   1699c:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
   169a0:	ed9f 3b91 	vldr	d3, [pc, #580]	; 16be8 <_dtoa_r+0x320>
   169a4:	ed9f 7b92 	vldr	d7, [pc, #584]	; 16bf0 <_dtoa_r+0x328>
   169a8:	ed9f 5b93 	vldr	d5, [pc, #588]	; 16bf8 <_dtoa_r+0x330>
   169ac:	ee06 0a90 	vmov	s13, r0
   169b0:	ec43 2b12 	vmov	d2, r2, r3
   169b4:	eeb8 4be6 	vcvt.f64.s32	d4, s13
   169b8:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
   169bc:	ee32 6b46 	vsub.f64	d6, d2, d6
   169c0:	eea6 7b03 	vfma.f64	d7, d6, d3
   169c4:	eea4 7b05 	vfma.f64	d7, d4, d5
   169c8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   169cc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   169d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   169d4:	ee16 7a90 	vmov	r7, s13
   169d8:	d508      	bpl.n	169ec <_dtoa_r+0x124>
   169da:	eeb8 6be6 	vcvt.f64.s32	d6, s13
   169de:	eeb4 6b47 	vcmp.f64	d6, d7
   169e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   169e6:	bf18      	it	ne
   169e8:	f107 37ff 	addne.w	r7, r7, #4294967295
   169ec:	2f16      	cmp	r7, #22
   169ee:	f200 8145 	bhi.w	16c7c <_dtoa_r+0x3b4>
   169f2:	4b85      	ldr	r3, [pc, #532]	; (16c08 <_dtoa_r+0x340>)
   169f4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   169f8:	ed93 7b00 	vldr	d7, [r3]
   169fc:	eeb4 8bc7 	vcmpe.f64	d8, d7
   16a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16a04:	d557      	bpl.n	16ab6 <_dtoa_r+0x1ee>
   16a06:	1a09      	subs	r1, r1, r0
   16a08:	2300      	movs	r3, #0
   16a0a:	f1b1 0801 	subs.w	r8, r1, #1
   16a0e:	f107 37ff 	add.w	r7, r7, #4294967295
   16a12:	930a      	str	r3, [sp, #40]	; 0x28
   16a14:	f100 8139 	bmi.w	16c8a <_dtoa_r+0x3c2>
   16a18:	2300      	movs	r3, #0
   16a1a:	9306      	str	r3, [sp, #24]
   16a1c:	2f00      	cmp	r7, #0
   16a1e:	da52      	bge.n	16ac6 <_dtoa_r+0x1fe>
   16a20:	9b06      	ldr	r3, [sp, #24]
   16a22:	9704      	str	r7, [sp, #16]
   16a24:	1bdb      	subs	r3, r3, r7
   16a26:	9306      	str	r3, [sp, #24]
   16a28:	427b      	negs	r3, r7
   16a2a:	9308      	str	r3, [sp, #32]
   16a2c:	9b01      	ldr	r3, [sp, #4]
   16a2e:	2b09      	cmp	r3, #9
   16a30:	f04f 0700 	mov.w	r7, #0
   16a34:	d84e      	bhi.n	16ad4 <_dtoa_r+0x20c>
   16a36:	2b05      	cmp	r3, #5
   16a38:	f340 829d 	ble.w	16f76 <_dtoa_r+0x6ae>
   16a3c:	3b04      	subs	r3, #4
   16a3e:	9301      	str	r3, [sp, #4]
   16a40:	2600      	movs	r6, #0
   16a42:	9b01      	ldr	r3, [sp, #4]
   16a44:	1e9a      	subs	r2, r3, #2
   16a46:	2a03      	cmp	r2, #3
   16a48:	f200 8125 	bhi.w	16c96 <_dtoa_r+0x3ce>
   16a4c:	e8df f012 	tbh	[pc, r2, lsl #1]
   16a50:	03a703aa 	.word	0x03a703aa
   16a54:	037e039d 	.word	0x037e039d
   16a58:	9a05      	ldr	r2, [sp, #20]
   16a5a:	f3c8 0813 	ubfx	r8, r8, #0, #20
   16a5e:	f242 730f 	movw	r3, #9999	; 0x270f
   16a62:	ea58 0806 	orrs.w	r8, r8, r6
   16a66:	6013      	str	r3, [r2, #0]
   16a68:	d11e      	bne.n	16aa8 <_dtoa_r+0x1e0>
   16a6a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   16a6c:	2b00      	cmp	r3, #0
   16a6e:	f000 8591 	beq.w	17594 <_dtoa_r+0xccc>
   16a72:	4b66      	ldr	r3, [pc, #408]	; (16c0c <_dtoa_r+0x344>)
   16a74:	9300      	str	r3, [sp, #0]
   16a76:	3308      	adds	r3, #8
   16a78:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   16a7a:	9800      	ldr	r0, [sp, #0]
   16a7c:	6013      	str	r3, [r2, #0]
   16a7e:	b00f      	add	sp, #60	; 0x3c
   16a80:	ecbd 8b02 	vpop	{d8}
   16a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a88:	ee18 6a90 	vmov	r6, s17
   16a8c:	f3c6 0613 	ubfx	r6, r6, #0, #20
   16a90:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
   16a94:	ec53 2b18 	vmov	r2, r3, d8
   16a98:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
   16a9c:	990c      	ldr	r1, [sp, #48]	; 0x30
   16a9e:	f04f 0a00 	mov.w	sl, #0
   16aa2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   16aa6:	e77b      	b.n	169a0 <_dtoa_r+0xd8>
   16aa8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   16aaa:	2b00      	cmp	r3, #0
   16aac:	f040 833b 	bne.w	17126 <_dtoa_r+0x85e>
   16ab0:	4b57      	ldr	r3, [pc, #348]	; (16c10 <_dtoa_r+0x348>)
   16ab2:	9300      	str	r3, [sp, #0]
   16ab4:	e744      	b.n	16940 <_dtoa_r+0x78>
   16ab6:	1a09      	subs	r1, r1, r0
   16ab8:	2300      	movs	r3, #0
   16aba:	f1b1 0801 	subs.w	r8, r1, #1
   16abe:	930a      	str	r3, [sp, #40]	; 0x28
   16ac0:	f100 80e3 	bmi.w	16c8a <_dtoa_r+0x3c2>
   16ac4:	9306      	str	r3, [sp, #24]
   16ac6:	2300      	movs	r3, #0
   16ac8:	9308      	str	r3, [sp, #32]
   16aca:	9b01      	ldr	r3, [sp, #4]
   16acc:	9704      	str	r7, [sp, #16]
   16ace:	2b09      	cmp	r3, #9
   16ad0:	44b8      	add	r8, r7
   16ad2:	d9b0      	bls.n	16a36 <_dtoa_r+0x16e>
   16ad4:	2300      	movs	r3, #0
   16ad6:	2601      	movs	r6, #1
   16ad8:	9301      	str	r3, [sp, #4]
   16ada:	9607      	str	r6, [sp, #28]
   16adc:	f04f 39ff 	mov.w	r9, #4294967295
   16ae0:	469b      	mov	fp, r3
   16ae2:	2100      	movs	r1, #0
   16ae4:	63e1      	str	r1, [r4, #60]	; 0x3c
   16ae6:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   16aea:	4620      	mov	r0, r4
   16aec:	f7fb fd46 	bl	1257c <_Balloc>
   16af0:	9000      	str	r0, [sp, #0]
   16af2:	2800      	cmp	r0, #0
   16af4:	f000 8540 	beq.w	17578 <_dtoa_r+0xcb0>
   16af8:	9b00      	ldr	r3, [sp, #0]
   16afa:	63a3      	str	r3, [r4, #56]	; 0x38
   16afc:	f1b9 0f0e 	cmp.w	r9, #14
   16b00:	f200 80dc 	bhi.w	16cbc <_dtoa_r+0x3f4>
   16b04:	2e00      	cmp	r6, #0
   16b06:	f000 80d9 	beq.w	16cbc <_dtoa_r+0x3f4>
   16b0a:	9b04      	ldr	r3, [sp, #16]
   16b0c:	2b00      	cmp	r3, #0
   16b0e:	f340 83de 	ble.w	172ce <_dtoa_r+0xa06>
   16b12:	4a3d      	ldr	r2, [pc, #244]	; (16c08 <_dtoa_r+0x340>)
   16b14:	f003 010f 	and.w	r1, r3, #15
   16b18:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   16b1c:	ed92 7b00 	vldr	d7, [r2]
   16b20:	111a      	asrs	r2, r3, #4
   16b22:	05db      	lsls	r3, r3, #23
   16b24:	f140 8382 	bpl.w	1722c <_dtoa_r+0x964>
   16b28:	493a      	ldr	r1, [pc, #232]	; (16c14 <_dtoa_r+0x34c>)
   16b2a:	ed91 6b08 	vldr	d6, [r1, #32]
   16b2e:	f002 020f 	and.w	r2, r2, #15
   16b32:	2003      	movs	r0, #3
   16b34:	ee88 5b06 	vdiv.f64	d5, d8, d6
   16b38:	b15a      	cbz	r2, 16b52 <_dtoa_r+0x28a>
   16b3a:	4936      	ldr	r1, [pc, #216]	; (16c14 <_dtoa_r+0x34c>)
   16b3c:	07d6      	lsls	r6, r2, #31
   16b3e:	d504      	bpl.n	16b4a <_dtoa_r+0x282>
   16b40:	ed91 6b00 	vldr	d6, [r1]
   16b44:	3001      	adds	r0, #1
   16b46:	ee27 7b06 	vmul.f64	d7, d7, d6
   16b4a:	1052      	asrs	r2, r2, #1
   16b4c:	f101 0108 	add.w	r1, r1, #8
   16b50:	d1f4      	bne.n	16b3c <_dtoa_r+0x274>
   16b52:	ee85 6b07 	vdiv.f64	d6, d5, d7
   16b56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16b58:	b13b      	cbz	r3, 16b6a <_dtoa_r+0x2a2>
   16b5a:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   16b5e:	eeb4 6bc7 	vcmpe.f64	d6, d7
   16b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16b66:	f100 84ae 	bmi.w	174c6 <_dtoa_r+0xbfe>
   16b6a:	ee07 0a90 	vmov	s15, r0
   16b6e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   16b72:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   16b76:	eea5 7b06 	vfma.f64	d7, d5, d6
   16b7a:	ee17 2a90 	vmov	r2, s15
   16b7e:	ec51 0b17 	vmov	r0, r1, d7
   16b82:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   16b86:	f1b9 0f00 	cmp.w	r9, #0
   16b8a:	f000 8388 	beq.w	1729e <_dtoa_r+0x9d6>
   16b8e:	9e04      	ldr	r6, [sp, #16]
   16b90:	464a      	mov	r2, r9
   16b92:	9b07      	ldr	r3, [sp, #28]
   16b94:	2b00      	cmp	r3, #0
   16b96:	f000 8447 	beq.w	17428 <_dtoa_r+0xb60>
   16b9a:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
   16b9e:	4b1a      	ldr	r3, [pc, #104]	; (16c08 <_dtoa_r+0x340>)
   16ba0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
   16ba4:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   16ba8:	eeb8 7be4 	vcvt.f64.s32	d7, s9
   16bac:	ee36 7b47 	vsub.f64	d7, d6, d7
   16bb0:	ed1c 6b02 	vldr	d6, [ip, #-8]
   16bb4:	ee83 5b06 	vdiv.f64	d5, d3, d6
   16bb8:	ec41 0b16 	vmov	d6, r0, r1
   16bbc:	ee14 0a90 	vmov	r0, s9
   16bc0:	ee35 5b46 	vsub.f64	d5, d5, d6
   16bc4:	9900      	ldr	r1, [sp, #0]
   16bc6:	eeb4 5bc7 	vcmpe.f64	d5, d7
   16bca:	3030      	adds	r0, #48	; 0x30
   16bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16bd0:	f801 0b01 	strb.w	r0, [r1], #1
   16bd4:	f300 84ac 	bgt.w	17530 <_dtoa_r+0xc68>
   16bd8:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
   16bdc:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   16be0:	f04f 0c00 	mov.w	ip, #0
   16be4:	e031      	b.n	16c4a <_dtoa_r+0x382>
   16be6:	bf00      	nop
   16be8:	636f4361 	.word	0x636f4361
   16bec:	3fd287a7 	.word	0x3fd287a7
   16bf0:	8b60c8b3 	.word	0x8b60c8b3
   16bf4:	3fc68a28 	.word	0x3fc68a28
   16bf8:	509f79fb 	.word	0x509f79fb
   16bfc:	3fd34413 	.word	0x3fd34413
   16c00:	7ff00000 	.word	0x7ff00000
   16c04:	20003869 	.word	0x20003869
   16c08:	200002a8 	.word	0x200002a8
   16c0c:	200037a0 	.word	0x200037a0
   16c10:	200037ac 	.word	0x200037ac
   16c14:	20000280 	.word	0x20000280
   16c18:	f10c 0c01 	add.w	ip, ip, #1
   16c1c:	4594      	cmp	ip, r2
   16c1e:	da4d      	bge.n	16cbc <_dtoa_r+0x3f4>
   16c20:	ee27 7b04 	vmul.f64	d7, d7, d4
   16c24:	ee25 5b04 	vmul.f64	d5, d5, d4
   16c28:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   16c2c:	ee16 3a90 	vmov	r3, s13
   16c30:	eeb8 3be6 	vcvt.f64.s32	d3, s13
   16c34:	3330      	adds	r3, #48	; 0x30
   16c36:	ee37 7b43 	vsub.f64	d7, d7, d3
   16c3a:	eeb4 7bc5 	vcmpe.f64	d7, d5
   16c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16c42:	f801 3b01 	strb.w	r3, [r1], #1
   16c46:	f100 8473 	bmi.w	17530 <_dtoa_r+0xc68>
   16c4a:	ee32 6b47 	vsub.f64	d6, d2, d7
   16c4e:	eeb4 6bc5 	vcmpe.f64	d6, d5
   16c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16c56:	d5df      	bpl.n	16c18 <_dtoa_r+0x350>
   16c58:	9a00      	ldr	r2, [sp, #0]
   16c5a:	9604      	str	r6, [sp, #16]
   16c5c:	e002      	b.n	16c64 <_dtoa_r+0x39c>
   16c5e:	428a      	cmp	r2, r1
   16c60:	f000 8450 	beq.w	17504 <_dtoa_r+0xc3c>
   16c64:	4689      	mov	r9, r1
   16c66:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   16c6a:	2b39      	cmp	r3, #57	; 0x39
   16c6c:	d0f7      	beq.n	16c5e <_dtoa_r+0x396>
   16c6e:	3301      	adds	r3, #1
   16c70:	b2db      	uxtb	r3, r3
   16c72:	700b      	strb	r3, [r1, #0]
   16c74:	9b04      	ldr	r3, [sp, #16]
   16c76:	3301      	adds	r3, #1
   16c78:	9304      	str	r3, [sp, #16]
   16c7a:	e155      	b.n	16f28 <_dtoa_r+0x660>
   16c7c:	1a09      	subs	r1, r1, r0
   16c7e:	2301      	movs	r3, #1
   16c80:	f1b1 0801 	subs.w	r8, r1, #1
   16c84:	930a      	str	r3, [sp, #40]	; 0x28
   16c86:	f57f aec7 	bpl.w	16a18 <_dtoa_r+0x150>
   16c8a:	f1c1 0301 	rsb	r3, r1, #1
   16c8e:	9306      	str	r3, [sp, #24]
   16c90:	f04f 0800 	mov.w	r8, #0
   16c94:	e6c2      	b.n	16a1c <_dtoa_r+0x154>
   16c96:	2600      	movs	r6, #0
   16c98:	63e6      	str	r6, [r4, #60]	; 0x3c
   16c9a:	4631      	mov	r1, r6
   16c9c:	4620      	mov	r0, r4
   16c9e:	f7fb fc6d 	bl	1257c <_Balloc>
   16ca2:	9000      	str	r0, [sp, #0]
   16ca4:	2800      	cmp	r0, #0
   16ca6:	f000 8467 	beq.w	17578 <_dtoa_r+0xcb0>
   16caa:	9b00      	ldr	r3, [sp, #0]
   16cac:	63a3      	str	r3, [r4, #56]	; 0x38
   16cae:	f04f 33ff 	mov.w	r3, #4294967295
   16cb2:	930b      	str	r3, [sp, #44]	; 0x2c
   16cb4:	4699      	mov	r9, r3
   16cb6:	2301      	movs	r3, #1
   16cb8:	46b3      	mov	fp, r6
   16cba:	9307      	str	r3, [sp, #28]
   16cbc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   16cbe:	2a00      	cmp	r2, #0
   16cc0:	db55      	blt.n	16d6e <_dtoa_r+0x4a6>
   16cc2:	9904      	ldr	r1, [sp, #16]
   16cc4:	290e      	cmp	r1, #14
   16cc6:	dc52      	bgt.n	16d6e <_dtoa_r+0x4a6>
   16cc8:	4bb7      	ldr	r3, [pc, #732]	; (16fa8 <_dtoa_r+0x6e0>)
   16cca:	f1bb 0f00 	cmp.w	fp, #0
   16cce:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   16cd2:	ed93 6b00 	vldr	d6, [r3]
   16cd6:	da15      	bge.n	16d04 <_dtoa_r+0x43c>
   16cd8:	f1b9 0f00 	cmp.w	r9, #0
   16cdc:	dc12      	bgt.n	16d04 <_dtoa_r+0x43c>
   16cde:	f040 82f2 	bne.w	172c6 <_dtoa_r+0x9fe>
   16ce2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   16ce6:	ee26 7b07 	vmul.f64	d7, d6, d7
   16cea:	eeb4 8bc7 	vcmpe.f64	d8, d7
   16cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16cf2:	46ca      	mov	sl, r9
   16cf4:	464e      	mov	r6, r9
   16cf6:	f200 826d 	bhi.w	171d4 <_dtoa_r+0x90c>
   16cfa:	f8dd 8000 	ldr.w	r8, [sp]
   16cfe:	ea6f 0b0b 	mvn.w	fp, fp
   16d02:	e270      	b.n	171e6 <_dtoa_r+0x91e>
   16d04:	ee88 7b06 	vdiv.f64	d7, d8, d6
   16d08:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   16d0c:	9900      	ldr	r1, [sp, #0]
   16d0e:	ee17 3a10 	vmov	r3, s14
   16d12:	f1b9 0f01 	cmp.w	r9, #1
   16d16:	f103 0330 	add.w	r3, r3, #48	; 0x30
   16d1a:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   16d1e:	f801 3b01 	strb.w	r3, [r1], #1
   16d22:	eea5 8b46 	vfms.f64	d8, d5, d6
   16d26:	f000 8334 	beq.w	17392 <_dtoa_r+0xaca>
   16d2a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   16d2e:	2301      	movs	r3, #1
   16d30:	e011      	b.n	16d56 <_dtoa_r+0x48e>
   16d32:	ee88 7b06 	vdiv.f64	d7, d8, d6
   16d36:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   16d3a:	3301      	adds	r3, #1
   16d3c:	ee17 2a10 	vmov	r2, s14
   16d40:	454b      	cmp	r3, r9
   16d42:	f102 0230 	add.w	r2, r2, #48	; 0x30
   16d46:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   16d4a:	f801 2b01 	strb.w	r2, [r1], #1
   16d4e:	eea5 8b46 	vfms.f64	d8, d5, d6
   16d52:	f000 831e 	beq.w	17392 <_dtoa_r+0xaca>
   16d56:	ee28 8b04 	vmul.f64	d8, d8, d4
   16d5a:	eeb5 8b40 	vcmp.f64	d8, #0.0
   16d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16d62:	d1e6      	bne.n	16d32 <_dtoa_r+0x46a>
   16d64:	9b04      	ldr	r3, [sp, #16]
   16d66:	3301      	adds	r3, #1
   16d68:	9304      	str	r3, [sp, #16]
   16d6a:	4689      	mov	r9, r1
   16d6c:	e0dc      	b.n	16f28 <_dtoa_r+0x660>
   16d6e:	9b07      	ldr	r3, [sp, #28]
   16d70:	b343      	cbz	r3, 16dc4 <_dtoa_r+0x4fc>
   16d72:	9b01      	ldr	r3, [sp, #4]
   16d74:	2b01      	cmp	r3, #1
   16d76:	f340 8276 	ble.w	17266 <_dtoa_r+0x99e>
   16d7a:	9b08      	ldr	r3, [sp, #32]
   16d7c:	f109 3aff 	add.w	sl, r9, #4294967295
   16d80:	4553      	cmp	r3, sl
   16d82:	f280 823f 	bge.w	17204 <_dtoa_r+0x93c>
   16d86:	9b08      	ldr	r3, [sp, #32]
   16d88:	f8cd a020 	str.w	sl, [sp, #32]
   16d8c:	ebaa 0203 	sub.w	r2, sl, r3
   16d90:	4417      	add	r7, r2
   16d92:	f04f 0a00 	mov.w	sl, #0
   16d96:	f1b9 0f00 	cmp.w	r9, #0
   16d9a:	f2c0 8325 	blt.w	173e8 <_dtoa_r+0xb20>
   16d9e:	9b06      	ldr	r3, [sp, #24]
   16da0:	9309      	str	r3, [sp, #36]	; 0x24
   16da2:	444b      	add	r3, r9
   16da4:	44c8      	add	r8, r9
   16da6:	9306      	str	r3, [sp, #24]
   16da8:	2101      	movs	r1, #1
   16daa:	4620      	mov	r0, r4
   16dac:	f7fb fd10 	bl	127d0 <__i2b>
   16db0:	4606      	mov	r6, r0
   16db2:	e00c      	b.n	16dce <_dtoa_r+0x506>
   16db4:	4b7d      	ldr	r3, [pc, #500]	; (16fac <_dtoa_r+0x6e4>)
   16db6:	9300      	str	r3, [sp, #0]
   16db8:	9800      	ldr	r0, [sp, #0]
   16dba:	b00f      	add	sp, #60	; 0x3c
   16dbc:	ecbd 8b02 	vpop	{d8}
   16dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16dc4:	9b06      	ldr	r3, [sp, #24]
   16dc6:	f8dd a020 	ldr.w	sl, [sp, #32]
   16dca:	9e07      	ldr	r6, [sp, #28]
   16dcc:	9309      	str	r3, [sp, #36]	; 0x24
   16dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16dd0:	b16b      	cbz	r3, 16dee <_dtoa_r+0x526>
   16dd2:	f1b8 0f00 	cmp.w	r8, #0
   16dd6:	dd0a      	ble.n	16dee <_dtoa_r+0x526>
   16dd8:	4543      	cmp	r3, r8
   16dda:	9906      	ldr	r1, [sp, #24]
   16ddc:	461a      	mov	r2, r3
   16dde:	bfa8      	it	ge
   16de0:	4642      	movge	r2, r8
   16de2:	1a89      	subs	r1, r1, r2
   16de4:	1a9b      	subs	r3, r3, r2
   16de6:	9106      	str	r1, [sp, #24]
   16de8:	9309      	str	r3, [sp, #36]	; 0x24
   16dea:	eba8 0802 	sub.w	r8, r8, r2
   16dee:	9b08      	ldr	r3, [sp, #32]
   16df0:	b163      	cbz	r3, 16e0c <_dtoa_r+0x544>
   16df2:	9b07      	ldr	r3, [sp, #28]
   16df4:	2b00      	cmp	r3, #0
   16df6:	f000 82a7 	beq.w	17348 <_dtoa_r+0xa80>
   16dfa:	f1ba 0f00 	cmp.w	sl, #0
   16dfe:	f300 8204 	bgt.w	1720a <_dtoa_r+0x942>
   16e02:	9b08      	ldr	r3, [sp, #32]
   16e04:	ebb3 020a 	subs.w	r2, r3, sl
   16e08:	f040 82ff 	bne.w	1740a <_dtoa_r+0xb42>
   16e0c:	2101      	movs	r1, #1
   16e0e:	4620      	mov	r0, r4
   16e10:	f7fb fcde 	bl	127d0 <__i2b>
   16e14:	2f00      	cmp	r7, #0
   16e16:	4682      	mov	sl, r0
   16e18:	f300 80af 	bgt.w	16f7a <_dtoa_r+0x6b2>
   16e1c:	9b01      	ldr	r3, [sp, #4]
   16e1e:	2b01      	cmp	r3, #1
   16e20:	f340 8187 	ble.w	17132 <_dtoa_r+0x86a>
   16e24:	2300      	movs	r3, #0
   16e26:	9308      	str	r3, [sp, #32]
   16e28:	2001      	movs	r0, #1
   16e2a:	2f00      	cmp	r7, #0
   16e2c:	f040 80b1 	bne.w	16f92 <_dtoa_r+0x6ca>
   16e30:	4440      	add	r0, r8
   16e32:	f010 001f 	ands.w	r0, r0, #31
   16e36:	f000 817a 	beq.w	1712e <_dtoa_r+0x866>
   16e3a:	f1c0 0220 	rsb	r2, r0, #32
   16e3e:	2a04      	cmp	r2, #4
   16e40:	f300 8088 	bgt.w	16f54 <_dtoa_r+0x68c>
   16e44:	f040 81f6 	bne.w	17234 <_dtoa_r+0x96c>
   16e48:	9b06      	ldr	r3, [sp, #24]
   16e4a:	2b00      	cmp	r3, #0
   16e4c:	dd05      	ble.n	16e5a <_dtoa_r+0x592>
   16e4e:	4629      	mov	r1, r5
   16e50:	461a      	mov	r2, r3
   16e52:	4620      	mov	r0, r4
   16e54:	f7fb fdf8 	bl	12a48 <__lshift>
   16e58:	4605      	mov	r5, r0
   16e5a:	f1b8 0f00 	cmp.w	r8, #0
   16e5e:	dd05      	ble.n	16e6c <_dtoa_r+0x5a4>
   16e60:	4651      	mov	r1, sl
   16e62:	4642      	mov	r2, r8
   16e64:	4620      	mov	r0, r4
   16e66:	f7fb fdef 	bl	12a48 <__lshift>
   16e6a:	4682      	mov	sl, r0
   16e6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16e6e:	2b00      	cmp	r3, #0
   16e70:	f040 813f 	bne.w	170f2 <_dtoa_r+0x82a>
   16e74:	f1b9 0f00 	cmp.w	r9, #0
   16e78:	f340 8125 	ble.w	170c6 <_dtoa_r+0x7fe>
   16e7c:	9b07      	ldr	r3, [sp, #28]
   16e7e:	2b00      	cmp	r3, #0
   16e80:	f040 80a3 	bne.w	16fca <_dtoa_r+0x702>
   16e84:	9b04      	ldr	r3, [sp, #16]
   16e86:	3301      	adds	r3, #1
   16e88:	9304      	str	r3, [sp, #16]
   16e8a:	f8dd 8000 	ldr.w	r8, [sp]
   16e8e:	2701      	movs	r7, #1
   16e90:	e007      	b.n	16ea2 <_dtoa_r+0x5da>
   16e92:	4629      	mov	r1, r5
   16e94:	2300      	movs	r3, #0
   16e96:	220a      	movs	r2, #10
   16e98:	4620      	mov	r0, r4
   16e9a:	f7fb fb9f 	bl	125dc <__multadd>
   16e9e:	3701      	adds	r7, #1
   16ea0:	4605      	mov	r5, r0
   16ea2:	4651      	mov	r1, sl
   16ea4:	4628      	mov	r0, r5
   16ea6:	f7ff fc7b 	bl	167a0 <quorem>
   16eaa:	45b9      	cmp	r9, r7
   16eac:	f100 0030 	add.w	r0, r0, #48	; 0x30
   16eb0:	f808 0b01 	strb.w	r0, [r8], #1
   16eb4:	dced      	bgt.n	16e92 <_dtoa_r+0x5ca>
   16eb6:	f1b9 0f00 	cmp.w	r9, #0
   16eba:	9a00      	ldr	r2, [sp, #0]
   16ebc:	bfcc      	ite	gt
   16ebe:	46cb      	movgt	fp, r9
   16ec0:	f04f 0b01 	movle.w	fp, #1
   16ec4:	4603      	mov	r3, r0
   16ec6:	4493      	add	fp, r2
   16ec8:	2700      	movs	r7, #0
   16eca:	4629      	mov	r1, r5
   16ecc:	2201      	movs	r2, #1
   16ece:	4620      	mov	r0, r4
   16ed0:	9301      	str	r3, [sp, #4]
   16ed2:	f7fb fdb9 	bl	12a48 <__lshift>
   16ed6:	4651      	mov	r1, sl
   16ed8:	4605      	mov	r5, r0
   16eda:	f7fb fe2d 	bl	12b38 <__mcmp>
   16ede:	2800      	cmp	r0, #0
   16ee0:	f340 81af 	ble.w	17242 <_dtoa_r+0x97a>
   16ee4:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   16ee8:	9a00      	ldr	r2, [sp, #0]
   16eea:	f10b 3bff 	add.w	fp, fp, #4294967295
   16eee:	e004      	b.n	16efa <_dtoa_r+0x632>
   16ef0:	455a      	cmp	r2, fp
   16ef2:	f000 81b1 	beq.w	17258 <_dtoa_r+0x990>
   16ef6:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   16efa:	2b39      	cmp	r3, #57	; 0x39
   16efc:	f10b 0901 	add.w	r9, fp, #1
   16f00:	d0f6      	beq.n	16ef0 <_dtoa_r+0x628>
   16f02:	3301      	adds	r3, #1
   16f04:	f88b 3000 	strb.w	r3, [fp]
   16f08:	4651      	mov	r1, sl
   16f0a:	4620      	mov	r0, r4
   16f0c:	f7fb fb5c 	bl	125c8 <_Bfree>
   16f10:	b156      	cbz	r6, 16f28 <_dtoa_r+0x660>
   16f12:	b12f      	cbz	r7, 16f20 <_dtoa_r+0x658>
   16f14:	42b7      	cmp	r7, r6
   16f16:	d003      	beq.n	16f20 <_dtoa_r+0x658>
   16f18:	4639      	mov	r1, r7
   16f1a:	4620      	mov	r0, r4
   16f1c:	f7fb fb54 	bl	125c8 <_Bfree>
   16f20:	4631      	mov	r1, r6
   16f22:	4620      	mov	r0, r4
   16f24:	f7fb fb50 	bl	125c8 <_Bfree>
   16f28:	4629      	mov	r1, r5
   16f2a:	4620      	mov	r0, r4
   16f2c:	f7fb fb4c 	bl	125c8 <_Bfree>
   16f30:	2300      	movs	r3, #0
   16f32:	f889 3000 	strb.w	r3, [r9]
   16f36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   16f3a:	601a      	str	r2, [r3, #0]
   16f3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   16f3e:	2b00      	cmp	r3, #0
   16f40:	f43f acfe 	beq.w	16940 <_dtoa_r+0x78>
   16f44:	9800      	ldr	r0, [sp, #0]
   16f46:	f8c3 9000 	str.w	r9, [r3]
   16f4a:	b00f      	add	sp, #60	; 0x3c
   16f4c:	ecbd 8b02 	vpop	{d8}
   16f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f54:	f1c0 001c 	rsb	r0, r0, #28
   16f58:	9b06      	ldr	r3, [sp, #24]
   16f5a:	4403      	add	r3, r0
   16f5c:	9306      	str	r3, [sp, #24]
   16f5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16f60:	4403      	add	r3, r0
   16f62:	9309      	str	r3, [sp, #36]	; 0x24
   16f64:	4480      	add	r8, r0
   16f66:	e76f      	b.n	16e48 <_dtoa_r+0x580>
   16f68:	f1c2 0220 	rsb	r2, r2, #32
   16f6c:	fa06 f202 	lsl.w	r2, r6, r2
   16f70:	ee07 2a10 	vmov	s14, r2
   16f74:	e509      	b.n	1698a <_dtoa_r+0xc2>
   16f76:	2601      	movs	r6, #1
   16f78:	e563      	b.n	16a42 <_dtoa_r+0x17a>
   16f7a:	4601      	mov	r1, r0
   16f7c:	463a      	mov	r2, r7
   16f7e:	4620      	mov	r0, r4
   16f80:	f7fb fd02 	bl	12988 <__pow5mult>
   16f84:	9b01      	ldr	r3, [sp, #4]
   16f86:	2b01      	cmp	r3, #1
   16f88:	4682      	mov	sl, r0
   16f8a:	f340 81c5 	ble.w	17318 <_dtoa_r+0xa50>
   16f8e:	2300      	movs	r3, #0
   16f90:	9308      	str	r3, [sp, #32]
   16f92:	f8da 2010 	ldr.w	r2, [sl, #16]
   16f96:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
   16f9a:	6910      	ldr	r0, [r2, #16]
   16f9c:	f7fb fbc8 	bl	12730 <__hi0bits>
   16fa0:	f1c0 0020 	rsb	r0, r0, #32
   16fa4:	e744      	b.n	16e30 <_dtoa_r+0x568>
   16fa6:	bf00      	nop
   16fa8:	200002a8 	.word	0x200002a8
   16fac:	20003868 	.word	0x20003868
   16fb0:	4631      	mov	r1, r6
   16fb2:	2300      	movs	r3, #0
   16fb4:	220a      	movs	r2, #10
   16fb6:	4620      	mov	r0, r4
   16fb8:	f7fb fb10 	bl	125dc <__multadd>
   16fbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16fbe:	2b00      	cmp	r3, #0
   16fc0:	4606      	mov	r6, r0
   16fc2:	f340 82ce 	ble.w	17562 <_dtoa_r+0xc9a>
   16fc6:	9704      	str	r7, [sp, #16]
   16fc8:	4699      	mov	r9, r3
   16fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16fcc:	2b00      	cmp	r3, #0
   16fce:	dd05      	ble.n	16fdc <_dtoa_r+0x714>
   16fd0:	4631      	mov	r1, r6
   16fd2:	461a      	mov	r2, r3
   16fd4:	4620      	mov	r0, r4
   16fd6:	f7fb fd37 	bl	12a48 <__lshift>
   16fda:	4606      	mov	r6, r0
   16fdc:	9b08      	ldr	r3, [sp, #32]
   16fde:	2b00      	cmp	r3, #0
   16fe0:	f040 81eb 	bne.w	173ba <_dtoa_r+0xaf2>
   16fe4:	46b0      	mov	r8, r6
   16fe6:	9b02      	ldr	r3, [sp, #8]
   16fe8:	9f00      	ldr	r7, [sp, #0]
   16fea:	f003 0201 	and.w	r2, r3, #1
   16fee:	1e7b      	subs	r3, r7, #1
   16ff0:	444b      	add	r3, r9
   16ff2:	9308      	str	r3, [sp, #32]
   16ff4:	9b01      	ldr	r3, [sp, #4]
   16ff6:	920a      	str	r2, [sp, #40]	; 0x28
   16ff8:	4313      	orrs	r3, r2
   16ffa:	9309      	str	r3, [sp, #36]	; 0x24
   16ffc:	4651      	mov	r1, sl
   16ffe:	4628      	mov	r0, r5
   17000:	f7ff fbce 	bl	167a0 <quorem>
   17004:	4631      	mov	r1, r6
   17006:	4683      	mov	fp, r0
   17008:	4628      	mov	r0, r5
   1700a:	f7fb fd95 	bl	12b38 <__mcmp>
   1700e:	4642      	mov	r2, r8
   17010:	4651      	mov	r1, sl
   17012:	4681      	mov	r9, r0
   17014:	4620      	mov	r0, r4
   17016:	f7fb fdb1 	bl	12b7c <__mdiff>
   1701a:	68c2      	ldr	r2, [r0, #12]
   1701c:	4601      	mov	r1, r0
   1701e:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   17022:	2a00      	cmp	r2, #0
   17024:	d142      	bne.n	170ac <_dtoa_r+0x7e4>
   17026:	e9cd 0306 	strd	r0, r3, [sp, #24]
   1702a:	4628      	mov	r0, r5
   1702c:	f7fb fd84 	bl	12b38 <__mcmp>
   17030:	9906      	ldr	r1, [sp, #24]
   17032:	9002      	str	r0, [sp, #8]
   17034:	4620      	mov	r0, r4
   17036:	f7fb fac7 	bl	125c8 <_Bfree>
   1703a:	9a02      	ldr	r2, [sp, #8]
   1703c:	9b07      	ldr	r3, [sp, #28]
   1703e:	b91a      	cbnz	r2, 17048 <_dtoa_r+0x780>
   17040:	9909      	ldr	r1, [sp, #36]	; 0x24
   17042:	2900      	cmp	r1, #0
   17044:	f000 827e 	beq.w	17544 <_dtoa_r+0xc7c>
   17048:	f1b9 0f00 	cmp.w	r9, #0
   1704c:	f2c0 8183 	blt.w	17356 <_dtoa_r+0xa8e>
   17050:	9901      	ldr	r1, [sp, #4]
   17052:	ea49 0901 	orr.w	r9, r9, r1
   17056:	990a      	ldr	r1, [sp, #40]	; 0x28
   17058:	ea51 0909 	orrs.w	r9, r1, r9
   1705c:	f000 817b 	beq.w	17356 <_dtoa_r+0xa8e>
   17060:	2a00      	cmp	r2, #0
   17062:	f300 81c6 	bgt.w	173f2 <_dtoa_r+0xb2a>
   17066:	9a08      	ldr	r2, [sp, #32]
   17068:	703b      	strb	r3, [r7, #0]
   1706a:	f107 0901 	add.w	r9, r7, #1
   1706e:	4297      	cmp	r7, r2
   17070:	46cb      	mov	fp, r9
   17072:	f000 81c4 	beq.w	173fe <_dtoa_r+0xb36>
   17076:	4629      	mov	r1, r5
   17078:	2300      	movs	r3, #0
   1707a:	220a      	movs	r2, #10
   1707c:	4620      	mov	r0, r4
   1707e:	f7fb faad 	bl	125dc <__multadd>
   17082:	4546      	cmp	r6, r8
   17084:	4605      	mov	r5, r0
   17086:	4631      	mov	r1, r6
   17088:	f04f 0300 	mov.w	r3, #0
   1708c:	f04f 020a 	mov.w	r2, #10
   17090:	4620      	mov	r0, r4
   17092:	d012      	beq.n	170ba <_dtoa_r+0x7f2>
   17094:	f7fb faa2 	bl	125dc <__multadd>
   17098:	4641      	mov	r1, r8
   1709a:	4606      	mov	r6, r0
   1709c:	2300      	movs	r3, #0
   1709e:	220a      	movs	r2, #10
   170a0:	4620      	mov	r0, r4
   170a2:	f7fb fa9b 	bl	125dc <__multadd>
   170a6:	464f      	mov	r7, r9
   170a8:	4680      	mov	r8, r0
   170aa:	e7a7      	b.n	16ffc <_dtoa_r+0x734>
   170ac:	4620      	mov	r0, r4
   170ae:	9302      	str	r3, [sp, #8]
   170b0:	f7fb fa8a 	bl	125c8 <_Bfree>
   170b4:	9b02      	ldr	r3, [sp, #8]
   170b6:	2201      	movs	r2, #1
   170b8:	e7c6      	b.n	17048 <_dtoa_r+0x780>
   170ba:	f7fb fa8f 	bl	125dc <__multadd>
   170be:	464f      	mov	r7, r9
   170c0:	4606      	mov	r6, r0
   170c2:	4680      	mov	r8, r0
   170c4:	e79a      	b.n	16ffc <_dtoa_r+0x734>
   170c6:	9b01      	ldr	r3, [sp, #4]
   170c8:	2b02      	cmp	r3, #2
   170ca:	dc71      	bgt.n	171b0 <_dtoa_r+0x8e8>
   170cc:	9b07      	ldr	r3, [sp, #28]
   170ce:	2b00      	cmp	r3, #0
   170d0:	f47f af7b 	bne.w	16fca <_dtoa_r+0x702>
   170d4:	9b04      	ldr	r3, [sp, #16]
   170d6:	4651      	mov	r1, sl
   170d8:	3301      	adds	r3, #1
   170da:	4628      	mov	r0, r5
   170dc:	9304      	str	r3, [sp, #16]
   170de:	f7ff fb5f 	bl	167a0 <quorem>
   170e2:	f8dd b000 	ldr.w	fp, [sp]
   170e6:	f100 0330 	add.w	r3, r0, #48	; 0x30
   170ea:	f80b 3b01 	strb.w	r3, [fp], #1
   170ee:	2700      	movs	r7, #0
   170f0:	e6eb      	b.n	16eca <_dtoa_r+0x602>
   170f2:	4651      	mov	r1, sl
   170f4:	4628      	mov	r0, r5
   170f6:	f7fb fd1f 	bl	12b38 <__mcmp>
   170fa:	2800      	cmp	r0, #0
   170fc:	f6bf aeba 	bge.w	16e74 <_dtoa_r+0x5ac>
   17100:	4629      	mov	r1, r5
   17102:	2300      	movs	r3, #0
   17104:	220a      	movs	r2, #10
   17106:	4620      	mov	r0, r4
   17108:	f7fb fa68 	bl	125dc <__multadd>
   1710c:	9b04      	ldr	r3, [sp, #16]
   1710e:	1e5f      	subs	r7, r3, #1
   17110:	9b07      	ldr	r3, [sp, #28]
   17112:	4605      	mov	r5, r0
   17114:	2b00      	cmp	r3, #0
   17116:	f47f af4b 	bne.w	16fb0 <_dtoa_r+0x6e8>
   1711a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1711c:	2b00      	cmp	r3, #0
   1711e:	f340 8218 	ble.w	17552 <_dtoa_r+0xc8a>
   17122:	4699      	mov	r9, r3
   17124:	e6b1      	b.n	16e8a <_dtoa_r+0x5c2>
   17126:	4bbc      	ldr	r3, [pc, #752]	; (17418 <_dtoa_r+0xb50>)
   17128:	9300      	str	r3, [sp, #0]
   1712a:	3303      	adds	r3, #3
   1712c:	e4a4      	b.n	16a78 <_dtoa_r+0x1b0>
   1712e:	201c      	movs	r0, #28
   17130:	e712      	b.n	16f58 <_dtoa_r+0x690>
   17132:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   17136:	2800      	cmp	r0, #0
   17138:	f47f ae74 	bne.w	16e24 <_dtoa_r+0x55c>
   1713c:	f3c1 0213 	ubfx	r2, r1, #0, #20
   17140:	2a00      	cmp	r2, #0
   17142:	f000 80f4 	beq.w	1732e <_dtoa_r+0xa66>
   17146:	9b02      	ldr	r3, [sp, #8]
   17148:	9308      	str	r3, [sp, #32]
   1714a:	e66d      	b.n	16e28 <_dtoa_r+0x560>
   1714c:	2301      	movs	r3, #1
   1714e:	9307      	str	r3, [sp, #28]
   17150:	9b04      	ldr	r3, [sp, #16]
   17152:	445b      	add	r3, fp
   17154:	f103 0901 	add.w	r9, r3, #1
   17158:	f1b9 0f01 	cmp.w	r9, #1
   1715c:	46cc      	mov	ip, r9
   1715e:	930b      	str	r3, [sp, #44]	; 0x2c
   17160:	bfb8      	it	lt
   17162:	f04f 0c01 	movlt.w	ip, #1
   17166:	2100      	movs	r1, #0
   17168:	f1bc 0f17 	cmp.w	ip, #23
   1716c:	63e1      	str	r1, [r4, #60]	; 0x3c
   1716e:	f77f acbc 	ble.w	16aea <_dtoa_r+0x222>
   17172:	2001      	movs	r0, #1
   17174:	2204      	movs	r2, #4
   17176:	0052      	lsls	r2, r2, #1
   17178:	f102 0314 	add.w	r3, r2, #20
   1717c:	4563      	cmp	r3, ip
   1717e:	4601      	mov	r1, r0
   17180:	f100 0001 	add.w	r0, r0, #1
   17184:	d9f7      	bls.n	17176 <_dtoa_r+0x8ae>
   17186:	63e1      	str	r1, [r4, #60]	; 0x3c
   17188:	e4af      	b.n	16aea <_dtoa_r+0x222>
   1718a:	2301      	movs	r3, #1
   1718c:	9307      	str	r3, [sp, #28]
   1718e:	f1bb 0f00 	cmp.w	fp, #0
   17192:	dd52      	ble.n	1723a <_dtoa_r+0x972>
   17194:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
   17198:	46d9      	mov	r9, fp
   1719a:	46dc      	mov	ip, fp
   1719c:	e7e3      	b.n	17166 <_dtoa_r+0x89e>
   1719e:	2300      	movs	r3, #0
   171a0:	9307      	str	r3, [sp, #28]
   171a2:	e7d5      	b.n	17150 <_dtoa_r+0x888>
   171a4:	2300      	movs	r3, #0
   171a6:	9307      	str	r3, [sp, #28]
   171a8:	e7f1      	b.n	1718e <_dtoa_r+0x8c6>
   171aa:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   171ae:	9704      	str	r7, [sp, #16]
   171b0:	f1b9 0f00 	cmp.w	r9, #0
   171b4:	f47f ada1 	bne.w	16cfa <_dtoa_r+0x432>
   171b8:	4651      	mov	r1, sl
   171ba:	464b      	mov	r3, r9
   171bc:	2205      	movs	r2, #5
   171be:	4620      	mov	r0, r4
   171c0:	f7fb fa0c 	bl	125dc <__multadd>
   171c4:	4601      	mov	r1, r0
   171c6:	4682      	mov	sl, r0
   171c8:	4628      	mov	r0, r5
   171ca:	f7fb fcb5 	bl	12b38 <__mcmp>
   171ce:	2800      	cmp	r0, #0
   171d0:	f77f ad93 	ble.w	16cfa <_dtoa_r+0x432>
   171d4:	9b04      	ldr	r3, [sp, #16]
   171d6:	f103 0b01 	add.w	fp, r3, #1
   171da:	9b00      	ldr	r3, [sp, #0]
   171dc:	2231      	movs	r2, #49	; 0x31
   171de:	4698      	mov	r8, r3
   171e0:	f803 2b01 	strb.w	r2, [r3], #1
   171e4:	9300      	str	r3, [sp, #0]
   171e6:	4651      	mov	r1, sl
   171e8:	4620      	mov	r0, r4
   171ea:	f7fb f9ed 	bl	125c8 <_Bfree>
   171ee:	f10b 0301 	add.w	r3, fp, #1
   171f2:	f8dd 9000 	ldr.w	r9, [sp]
   171f6:	9304      	str	r3, [sp, #16]
   171f8:	f8cd 8000 	str.w	r8, [sp]
   171fc:	2e00      	cmp	r6, #0
   171fe:	f47f ae8f 	bne.w	16f20 <_dtoa_r+0x658>
   17202:	e691      	b.n	16f28 <_dtoa_r+0x660>
   17204:	eba3 0a0a 	sub.w	sl, r3, sl
   17208:	e5c5      	b.n	16d96 <_dtoa_r+0x4ce>
   1720a:	4631      	mov	r1, r6
   1720c:	4652      	mov	r2, sl
   1720e:	4620      	mov	r0, r4
   17210:	f7fb fbba 	bl	12988 <__pow5mult>
   17214:	462a      	mov	r2, r5
   17216:	4601      	mov	r1, r0
   17218:	4606      	mov	r6, r0
   1721a:	4620      	mov	r0, r4
   1721c:	f7fb fb06 	bl	1282c <__multiply>
   17220:	4629      	mov	r1, r5
   17222:	4605      	mov	r5, r0
   17224:	4620      	mov	r0, r4
   17226:	f7fb f9cf 	bl	125c8 <_Bfree>
   1722a:	e5ea      	b.n	16e02 <_dtoa_r+0x53a>
   1722c:	2002      	movs	r0, #2
   1722e:	eeb0 5b48 	vmov.f64	d5, d8
   17232:	e481      	b.n	16b38 <_dtoa_r+0x270>
   17234:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   17238:	e68e      	b.n	16f58 <_dtoa_r+0x690>
   1723a:	f04f 0b01 	mov.w	fp, #1
   1723e:	46d9      	mov	r9, fp
   17240:	e44f      	b.n	16ae2 <_dtoa_r+0x21a>
   17242:	d103      	bne.n	1724c <_dtoa_r+0x984>
   17244:	9b01      	ldr	r3, [sp, #4]
   17246:	07db      	lsls	r3, r3, #31
   17248:	f53f ae4c 	bmi.w	16ee4 <_dtoa_r+0x61c>
   1724c:	46d9      	mov	r9, fp
   1724e:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   17252:	2b30      	cmp	r3, #48	; 0x30
   17254:	d0fa      	beq.n	1724c <_dtoa_r+0x984>
   17256:	e657      	b.n	16f08 <_dtoa_r+0x640>
   17258:	9b04      	ldr	r3, [sp, #16]
   1725a:	9a00      	ldr	r2, [sp, #0]
   1725c:	3301      	adds	r3, #1
   1725e:	9304      	str	r3, [sp, #16]
   17260:	2331      	movs	r3, #49	; 0x31
   17262:	7013      	strb	r3, [r2, #0]
   17264:	e650      	b.n	16f08 <_dtoa_r+0x640>
   17266:	f1ba 0f00 	cmp.w	sl, #0
   1726a:	f000 8123 	beq.w	174b4 <_dtoa_r+0xbec>
   1726e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   17272:	9b06      	ldr	r3, [sp, #24]
   17274:	9309      	str	r3, [sp, #36]	; 0x24
   17276:	4413      	add	r3, r2
   17278:	f8dd a020 	ldr.w	sl, [sp, #32]
   1727c:	9306      	str	r3, [sp, #24]
   1727e:	4490      	add	r8, r2
   17280:	e592      	b.n	16da8 <_dtoa_r+0x4e0>
   17282:	ee07 0a90 	vmov	s15, r0
   17286:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
   1728a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
   1728e:	eea6 5b07 	vfma.f64	d5, d6, d7
   17292:	ee15 2a90 	vmov	r2, s11
   17296:	ec51 0b15 	vmov	r0, r1, d5
   1729a:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   1729e:	ec41 0b15 	vmov	d5, r0, r1
   172a2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   172a6:	ee36 7b47 	vsub.f64	d7, d6, d7
   172aa:	eeb4 7bc5 	vcmpe.f64	d7, d5
   172ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   172b2:	f300 8137 	bgt.w	17524 <_dtoa_r+0xc5c>
   172b6:	eeb1 5b45 	vneg.f64	d5, d5
   172ba:	eeb4 7bc5 	vcmpe.f64	d7, d5
   172be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   172c2:	f57f acfb 	bpl.w	16cbc <_dtoa_r+0x3f4>
   172c6:	f04f 0a00 	mov.w	sl, #0
   172ca:	4656      	mov	r6, sl
   172cc:	e515      	b.n	16cfa <_dtoa_r+0x432>
   172ce:	f000 80f5 	beq.w	174bc <_dtoa_r+0xbf4>
   172d2:	9b04      	ldr	r3, [sp, #16]
   172d4:	4951      	ldr	r1, [pc, #324]	; (1741c <_dtoa_r+0xb54>)
   172d6:	425a      	negs	r2, r3
   172d8:	f002 000f 	and.w	r0, r2, #15
   172dc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   172e0:	ed91 6b00 	vldr	d6, [r1]
   172e4:	1112      	asrs	r2, r2, #4
   172e6:	ee28 6b06 	vmul.f64	d6, d8, d6
   172ea:	f000 8142 	beq.w	17572 <_dtoa_r+0xcaa>
   172ee:	eeb0 7b46 	vmov.f64	d7, d6
   172f2:	494b      	ldr	r1, [pc, #300]	; (17420 <_dtoa_r+0xb58>)
   172f4:	2600      	movs	r6, #0
   172f6:	2002      	movs	r0, #2
   172f8:	07d3      	lsls	r3, r2, #31
   172fa:	d505      	bpl.n	17308 <_dtoa_r+0xa40>
   172fc:	ed91 5b00 	vldr	d5, [r1]
   17300:	3001      	adds	r0, #1
   17302:	2601      	movs	r6, #1
   17304:	ee27 7b05 	vmul.f64	d7, d7, d5
   17308:	1052      	asrs	r2, r2, #1
   1730a:	f101 0108 	add.w	r1, r1, #8
   1730e:	d1f3      	bne.n	172f8 <_dtoa_r+0xa30>
   17310:	2e00      	cmp	r6, #0
   17312:	fe06 6b07 	vseleq.f64	d6, d6, d7
   17316:	e41e      	b.n	16b56 <_dtoa_r+0x28e>
   17318:	9b02      	ldr	r3, [sp, #8]
   1731a:	2b00      	cmp	r3, #0
   1731c:	f47f ae37 	bne.w	16f8e <_dtoa_r+0x6c6>
   17320:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   17324:	f3c1 0213 	ubfx	r2, r1, #0, #20
   17328:	2a00      	cmp	r2, #0
   1732a:	f040 8137 	bne.w	1759c <_dtoa_r+0xcd4>
   1732e:	4a3d      	ldr	r2, [pc, #244]	; (17424 <_dtoa_r+0xb5c>)
   17330:	400a      	ands	r2, r1
   17332:	2a00      	cmp	r2, #0
   17334:	f000 80fa 	beq.w	1752c <_dtoa_r+0xc64>
   17338:	9b06      	ldr	r3, [sp, #24]
   1733a:	3301      	adds	r3, #1
   1733c:	9306      	str	r3, [sp, #24]
   1733e:	2301      	movs	r3, #1
   17340:	f108 0801 	add.w	r8, r8, #1
   17344:	9308      	str	r3, [sp, #32]
   17346:	e56f      	b.n	16e28 <_dtoa_r+0x560>
   17348:	4629      	mov	r1, r5
   1734a:	9a08      	ldr	r2, [sp, #32]
   1734c:	4620      	mov	r0, r4
   1734e:	f7fb fb1b 	bl	12988 <__pow5mult>
   17352:	4605      	mov	r5, r0
   17354:	e55a      	b.n	16e0c <_dtoa_r+0x544>
   17356:	2a00      	cmp	r2, #0
   17358:	dd12      	ble.n	17380 <_dtoa_r+0xab8>
   1735a:	4629      	mov	r1, r5
   1735c:	2201      	movs	r2, #1
   1735e:	4620      	mov	r0, r4
   17360:	9301      	str	r3, [sp, #4]
   17362:	f7fb fb71 	bl	12a48 <__lshift>
   17366:	4651      	mov	r1, sl
   17368:	4605      	mov	r5, r0
   1736a:	f7fb fbe5 	bl	12b38 <__mcmp>
   1736e:	2800      	cmp	r0, #0
   17370:	9b01      	ldr	r3, [sp, #4]
   17372:	f340 80e1 	ble.w	17538 <_dtoa_r+0xc70>
   17376:	2b39      	cmp	r3, #57	; 0x39
   17378:	f000 80ca 	beq.w	17510 <_dtoa_r+0xc48>
   1737c:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   17380:	46b9      	mov	r9, r7
   17382:	f809 3b01 	strb.w	r3, [r9], #1
   17386:	9b04      	ldr	r3, [sp, #16]
   17388:	3301      	adds	r3, #1
   1738a:	4637      	mov	r7, r6
   1738c:	9304      	str	r3, [sp, #16]
   1738e:	4646      	mov	r6, r8
   17390:	e5ba      	b.n	16f08 <_dtoa_r+0x640>
   17392:	ee38 8b08 	vadd.f64	d8, d8, d8
   17396:	eeb4 8bc6 	vcmpe.f64	d8, d6
   1739a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1739e:	dc0a      	bgt.n	173b6 <_dtoa_r+0xaee>
   173a0:	eeb4 8b46 	vcmp.f64	d8, d6
   173a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   173a8:	f47f acdc 	bne.w	16d64 <_dtoa_r+0x49c>
   173ac:	ee17 3a10 	vmov	r3, s14
   173b0:	07d8      	lsls	r0, r3, #31
   173b2:	f57f acd7 	bpl.w	16d64 <_dtoa_r+0x49c>
   173b6:	9a00      	ldr	r2, [sp, #0]
   173b8:	e454      	b.n	16c64 <_dtoa_r+0x39c>
   173ba:	6871      	ldr	r1, [r6, #4]
   173bc:	4620      	mov	r0, r4
   173be:	f7fb f8dd 	bl	1257c <_Balloc>
   173c2:	4607      	mov	r7, r0
   173c4:	2800      	cmp	r0, #0
   173c6:	f000 80de 	beq.w	17586 <_dtoa_r+0xcbe>
   173ca:	6933      	ldr	r3, [r6, #16]
   173cc:	3302      	adds	r3, #2
   173ce:	009a      	lsls	r2, r3, #2
   173d0:	f106 010c 	add.w	r1, r6, #12
   173d4:	300c      	adds	r0, #12
   173d6:	f7f6 f8bb 	bl	d550 <memcpy>
   173da:	4639      	mov	r1, r7
   173dc:	2201      	movs	r2, #1
   173de:	4620      	mov	r0, r4
   173e0:	f7fb fb32 	bl	12a48 <__lshift>
   173e4:	4680      	mov	r8, r0
   173e6:	e5fe      	b.n	16fe6 <_dtoa_r+0x71e>
   173e8:	9b06      	ldr	r3, [sp, #24]
   173ea:	eba3 0309 	sub.w	r3, r3, r9
   173ee:	9309      	str	r3, [sp, #36]	; 0x24
   173f0:	e4da      	b.n	16da8 <_dtoa_r+0x4e0>
   173f2:	2b39      	cmp	r3, #57	; 0x39
   173f4:	f000 808c 	beq.w	17510 <_dtoa_r+0xc48>
   173f8:	46b9      	mov	r9, r7
   173fa:	3301      	adds	r3, #1
   173fc:	e7c1      	b.n	17382 <_dtoa_r+0xaba>
   173fe:	9a04      	ldr	r2, [sp, #16]
   17400:	3201      	adds	r2, #1
   17402:	4637      	mov	r7, r6
   17404:	9204      	str	r2, [sp, #16]
   17406:	4646      	mov	r6, r8
   17408:	e55f      	b.n	16eca <_dtoa_r+0x602>
   1740a:	4629      	mov	r1, r5
   1740c:	4620      	mov	r0, r4
   1740e:	f7fb fabb 	bl	12988 <__pow5mult>
   17412:	4605      	mov	r5, r0
   17414:	e4fa      	b.n	16e0c <_dtoa_r+0x544>
   17416:	bf00      	nop
   17418:	200037ac 	.word	0x200037ac
   1741c:	200002a8 	.word	0x200002a8
   17420:	20000280 	.word	0x20000280
   17424:	7ff00000 	.word	0x7ff00000
   17428:	4b5e      	ldr	r3, [pc, #376]	; (175a4 <_dtoa_r+0xcdc>)
   1742a:	eefd 5bc6 	vcvt.s32.f64	s11, d6
   1742e:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   17432:	ed1c 3b02 	vldr	d3, [ip, #-8]
   17436:	eeb8 7be5 	vcvt.f64.s32	d7, s11
   1743a:	ee36 7b47 	vsub.f64	d7, d6, d7
   1743e:	ec41 0b16 	vmov	d6, r0, r1
   17442:	ee15 1a90 	vmov	r1, s11
   17446:	ee23 3b06 	vmul.f64	d3, d3, d6
   1744a:	9800      	ldr	r0, [sp, #0]
   1744c:	3130      	adds	r1, #48	; 0x30
   1744e:	2a01      	cmp	r2, #1
   17450:	f800 1b01 	strb.w	r1, [r0], #1
   17454:	f000 8083 	beq.w	1755e <_dtoa_r+0xc96>
   17458:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   1745c:	9b00      	ldr	r3, [sp, #0]
   1745e:	1899      	adds	r1, r3, r2
   17460:	ee27 7b04 	vmul.f64	d7, d7, d4
   17464:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   17468:	ee16 3a90 	vmov	r3, s13
   1746c:	3330      	adds	r3, #48	; 0x30
   1746e:	f800 3b01 	strb.w	r3, [r0], #1
   17472:	4281      	cmp	r1, r0
   17474:	eeb8 5be6 	vcvt.f64.s32	d5, s13
   17478:	ee37 7b45 	vsub.f64	d7, d7, d5
   1747c:	d1f0      	bne.n	17460 <_dtoa_r+0xb98>
   1747e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
   17482:	ee33 5b06 	vadd.f64	d5, d3, d6
   17486:	eeb4 5bc7 	vcmpe.f64	d5, d7
   1748a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1748e:	f53f abe3 	bmi.w	16c58 <_dtoa_r+0x390>
   17492:	ee36 6b43 	vsub.f64	d6, d6, d3
   17496:	eeb4 6bc7 	vcmpe.f64	d6, d7
   1749a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1749e:	f77f ac0d 	ble.w	16cbc <_dtoa_r+0x3f4>
   174a2:	4689      	mov	r9, r1
   174a4:	3901      	subs	r1, #1
   174a6:	f819 3c01 	ldrb.w	r3, [r9, #-1]
   174aa:	2b30      	cmp	r3, #48	; 0x30
   174ac:	d0f9      	beq.n	174a2 <_dtoa_r+0xbda>
   174ae:	1c73      	adds	r3, r6, #1
   174b0:	9304      	str	r3, [sp, #16]
   174b2:	e539      	b.n	16f28 <_dtoa_r+0x660>
   174b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   174b6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   174ba:	e6da      	b.n	17272 <_dtoa_r+0x9aa>
   174bc:	2002      	movs	r0, #2
   174be:	eeb0 6b48 	vmov.f64	d6, d8
   174c2:	f7ff bb48 	b.w	16b56 <_dtoa_r+0x28e>
   174c6:	f1b9 0f00 	cmp.w	r9, #0
   174ca:	f43f aeda 	beq.w	17282 <_dtoa_r+0x9ba>
   174ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   174d0:	2a00      	cmp	r2, #0
   174d2:	f77f abf3 	ble.w	16cbc <_dtoa_r+0x3f4>
   174d6:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   174da:	ee26 6b04 	vmul.f64	d6, d6, d4
   174de:	3001      	adds	r0, #1
   174e0:	ee07 0a90 	vmov	s15, r0
   174e4:	9b04      	ldr	r3, [sp, #16]
   174e6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   174ea:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   174ee:	eea6 7b05 	vfma.f64	d7, d6, d5
   174f2:	ee17 ca90 	vmov	ip, s15
   174f6:	ec51 0b17 	vmov	r0, r1, d7
   174fa:	1e5e      	subs	r6, r3, #1
   174fc:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
   17500:	f7ff bb47 	b.w	16b92 <_dtoa_r+0x2ca>
   17504:	9b04      	ldr	r3, [sp, #16]
   17506:	3301      	adds	r3, #1
   17508:	9304      	str	r3, [sp, #16]
   1750a:	2331      	movs	r3, #49	; 0x31
   1750c:	f7ff bbb1 	b.w	16c72 <_dtoa_r+0x3aa>
   17510:	9b04      	ldr	r3, [sp, #16]
   17512:	46bb      	mov	fp, r7
   17514:	3301      	adds	r3, #1
   17516:	9304      	str	r3, [sp, #16]
   17518:	2339      	movs	r3, #57	; 0x39
   1751a:	4637      	mov	r7, r6
   1751c:	f80b 3b01 	strb.w	r3, [fp], #1
   17520:	4646      	mov	r6, r8
   17522:	e4e1      	b.n	16ee8 <_dtoa_r+0x620>
   17524:	f04f 0a00 	mov.w	sl, #0
   17528:	4656      	mov	r6, sl
   1752a:	e653      	b.n	171d4 <_dtoa_r+0x90c>
   1752c:	9208      	str	r2, [sp, #32]
   1752e:	e47b      	b.n	16e28 <_dtoa_r+0x560>
   17530:	1c73      	adds	r3, r6, #1
   17532:	9304      	str	r3, [sp, #16]
   17534:	4689      	mov	r9, r1
   17536:	e4f7      	b.n	16f28 <_dtoa_r+0x660>
   17538:	f47f af22 	bne.w	17380 <_dtoa_r+0xab8>
   1753c:	07da      	lsls	r2, r3, #31
   1753e:	f57f af1f 	bpl.w	17380 <_dtoa_r+0xab8>
   17542:	e718      	b.n	17376 <_dtoa_r+0xaae>
   17544:	2b39      	cmp	r3, #57	; 0x39
   17546:	d0e3      	beq.n	17510 <_dtoa_r+0xc48>
   17548:	f1b9 0f00 	cmp.w	r9, #0
   1754c:	f73f af16 	bgt.w	1737c <_dtoa_r+0xab4>
   17550:	e716      	b.n	17380 <_dtoa_r+0xab8>
   17552:	9b01      	ldr	r3, [sp, #4]
   17554:	2b02      	cmp	r3, #2
   17556:	f73f ae28 	bgt.w	171aa <_dtoa_r+0x8e2>
   1755a:	9704      	str	r7, [sp, #16]
   1755c:	e5ba      	b.n	170d4 <_dtoa_r+0x80c>
   1755e:	4601      	mov	r1, r0
   17560:	e78d      	b.n	1747e <_dtoa_r+0xbb6>
   17562:	9b01      	ldr	r3, [sp, #4]
   17564:	2b02      	cmp	r3, #2
   17566:	f73f ae20 	bgt.w	171aa <_dtoa_r+0x8e2>
   1756a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   1756e:	9704      	str	r7, [sp, #16]
   17570:	e52b      	b.n	16fca <_dtoa_r+0x702>
   17572:	2002      	movs	r0, #2
   17574:	f7ff baef 	b.w	16b56 <_dtoa_r+0x28e>
   17578:	4b0b      	ldr	r3, [pc, #44]	; (175a8 <_dtoa_r+0xce0>)
   1757a:	480c      	ldr	r0, [pc, #48]	; (175ac <_dtoa_r+0xce4>)
   1757c:	2200      	movs	r2, #0
   1757e:	f240 11af 	movw	r1, #431	; 0x1af
   17582:	f7ff f8ed 	bl	16760 <__assert_func>
   17586:	4b08      	ldr	r3, [pc, #32]	; (175a8 <_dtoa_r+0xce0>)
   17588:	4808      	ldr	r0, [pc, #32]	; (175ac <_dtoa_r+0xce4>)
   1758a:	463a      	mov	r2, r7
   1758c:	f240 21ef 	movw	r1, #751	; 0x2ef
   17590:	f7ff f8e6 	bl	16760 <__assert_func>
   17594:	4b06      	ldr	r3, [pc, #24]	; (175b0 <_dtoa_r+0xce8>)
   17596:	9300      	str	r3, [sp, #0]
   17598:	f7ff b9d2 	b.w	16940 <_dtoa_r+0x78>
   1759c:	9b02      	ldr	r3, [sp, #8]
   1759e:	9308      	str	r3, [sp, #32]
   175a0:	e4f7      	b.n	16f92 <_dtoa_r+0x6ca>
   175a2:	bf00      	nop
   175a4:	200002a8 	.word	0x200002a8
   175a8:	200034c0 	.word	0x200034c0
   175ac:	200037b0 	.word	0x200037b0
   175b0:	200037a0 	.word	0x200037a0

000175b4 <_strtoul_l.constprop.0>:
   175b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   175b8:	4607      	mov	r7, r0
   175ba:	484c      	ldr	r0, [pc, #304]	; (176ec <_strtoul_l.constprop.0+0x138>)
   175bc:	460e      	mov	r6, r1
   175be:	4635      	mov	r5, r6
   175c0:	f816 eb01 	ldrb.w	lr, [r6], #1
   175c4:	f810 c00e 	ldrb.w	ip, [r0, lr]
   175c8:	f01c 0c08 	ands.w	ip, ip, #8
   175cc:	d1f7      	bne.n	175be <_strtoul_l.constprop.0+0xa>
   175ce:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
   175d2:	d05a      	beq.n	1768a <_strtoul_l.constprop.0+0xd6>
   175d4:	f1be 0f2b 	cmp.w	lr, #43	; 0x2b
   175d8:	bf03      	ittte	eq
   175da:	f896 e000 	ldrbeq.w	lr, [r6]
   175de:	4664      	moveq	r4, ip
   175e0:	1cae      	addeq	r6, r5, #2
   175e2:	4664      	movne	r4, ip
   175e4:	b15b      	cbz	r3, 175fe <_strtoul_l.constprop.0+0x4a>
   175e6:	2b10      	cmp	r3, #16
   175e8:	d054      	beq.n	17694 <_strtoul_l.constprop.0+0xe0>
   175ea:	f04f 38ff 	mov.w	r8, #4294967295
   175ee:	fbb8 f8f3 	udiv	r8, r8, r3
   175f2:	fb03 fa08 	mul.w	sl, r3, r8
   175f6:	ea6f 0a0a 	mvn.w	sl, sl
   175fa:	4699      	mov	r9, r3
   175fc:	e008      	b.n	17610 <_strtoul_l.constprop.0+0x5c>
   175fe:	f1be 0f30 	cmp.w	lr, #48	; 0x30
   17602:	d05a      	beq.n	176ba <_strtoul_l.constprop.0+0x106>
   17604:	230a      	movs	r3, #10
   17606:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 176f0 <_strtoul_l.constprop.0+0x13c>
   1760a:	f04f 0a05 	mov.w	sl, #5
   1760e:	4699      	mov	r9, r3
   17610:	2500      	movs	r5, #0
   17612:	4628      	mov	r0, r5
   17614:	e005      	b.n	17622 <_strtoul_l.constprop.0+0x6e>
   17616:	d02c      	beq.n	17672 <_strtoul_l.constprop.0+0xbe>
   17618:	fb09 c000 	mla	r0, r9, r0, ip
   1761c:	2501      	movs	r5, #1
   1761e:	f816 eb01 	ldrb.w	lr, [r6], #1
   17622:	f1ae 0c30 	sub.w	ip, lr, #48	; 0x30
   17626:	f1bc 0f09 	cmp.w	ip, #9
   1762a:	d906      	bls.n	1763a <_strtoul_l.constprop.0+0x86>
   1762c:	f1ae 0c41 	sub.w	ip, lr, #65	; 0x41
   17630:	f1bc 0f19 	cmp.w	ip, #25
   17634:	d80b      	bhi.n	1764e <_strtoul_l.constprop.0+0x9a>
   17636:	f1ae 0c37 	sub.w	ip, lr, #55	; 0x37
   1763a:	4563      	cmp	r3, ip
   1763c:	dd10      	ble.n	17660 <_strtoul_l.constprop.0+0xac>
   1763e:	f1b5 3fff 	cmp.w	r5, #4294967295
   17642:	d0ec      	beq.n	1761e <_strtoul_l.constprop.0+0x6a>
   17644:	4540      	cmp	r0, r8
   17646:	d9e6      	bls.n	17616 <_strtoul_l.constprop.0+0x62>
   17648:	f04f 35ff 	mov.w	r5, #4294967295
   1764c:	e7e7      	b.n	1761e <_strtoul_l.constprop.0+0x6a>
   1764e:	f1ae 0c61 	sub.w	ip, lr, #97	; 0x61
   17652:	f1bc 0f19 	cmp.w	ip, #25
   17656:	d803      	bhi.n	17660 <_strtoul_l.constprop.0+0xac>
   17658:	f1ae 0c57 	sub.w	ip, lr, #87	; 0x57
   1765c:	4563      	cmp	r3, ip
   1765e:	dcee      	bgt.n	1763e <_strtoul_l.constprop.0+0x8a>
   17660:	1c6b      	adds	r3, r5, #1
   17662:	d00b      	beq.n	1767c <_strtoul_l.constprop.0+0xc8>
   17664:	b104      	cbz	r4, 17668 <_strtoul_l.constprop.0+0xb4>
   17666:	4240      	negs	r0, r0
   17668:	b10a      	cbz	r2, 1766e <_strtoul_l.constprop.0+0xba>
   1766a:	b965      	cbnz	r5, 17686 <_strtoul_l.constprop.0+0xd2>
   1766c:	6011      	str	r1, [r2, #0]
   1766e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17672:	45d4      	cmp	ip, sl
   17674:	ddd0      	ble.n	17618 <_strtoul_l.constprop.0+0x64>
   17676:	f04f 35ff 	mov.w	r5, #4294967295
   1767a:	e7d0      	b.n	1761e <_strtoul_l.constprop.0+0x6a>
   1767c:	2322      	movs	r3, #34	; 0x22
   1767e:	603b      	str	r3, [r7, #0]
   17680:	4628      	mov	r0, r5
   17682:	2a00      	cmp	r2, #0
   17684:	d0f3      	beq.n	1766e <_strtoul_l.constprop.0+0xba>
   17686:	1e71      	subs	r1, r6, #1
   17688:	e7f0      	b.n	1766c <_strtoul_l.constprop.0+0xb8>
   1768a:	f896 e000 	ldrb.w	lr, [r6]
   1768e:	2401      	movs	r4, #1
   17690:	1cae      	adds	r6, r5, #2
   17692:	e7a7      	b.n	175e4 <_strtoul_l.constprop.0+0x30>
   17694:	f1be 0f30 	cmp.w	lr, #48	; 0x30
   17698:	d121      	bne.n	176de <_strtoul_l.constprop.0+0x12a>
   1769a:	7830      	ldrb	r0, [r6, #0]
   1769c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   176a0:	2858      	cmp	r0, #88	; 0x58
   176a2:	d116      	bne.n	176d2 <_strtoul_l.constprop.0+0x11e>
   176a4:	f04f 0910 	mov.w	r9, #16
   176a8:	f896 e001 	ldrb.w	lr, [r6, #1]
   176ac:	f04f 0a0f 	mov.w	sl, #15
   176b0:	3602      	adds	r6, #2
   176b2:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   176b6:	464b      	mov	r3, r9
   176b8:	e7aa      	b.n	17610 <_strtoul_l.constprop.0+0x5c>
   176ba:	7833      	ldrb	r3, [r6, #0]
   176bc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   176c0:	2b58      	cmp	r3, #88	; 0x58
   176c2:	d0ef      	beq.n	176a4 <_strtoul_l.constprop.0+0xf0>
   176c4:	2308      	movs	r3, #8
   176c6:	f04f 0a07 	mov.w	sl, #7
   176ca:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
   176ce:	4699      	mov	r9, r3
   176d0:	e79e      	b.n	17610 <_strtoul_l.constprop.0+0x5c>
   176d2:	4699      	mov	r9, r3
   176d4:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   176d8:	f04f 0a0f 	mov.w	sl, #15
   176dc:	e798      	b.n	17610 <_strtoul_l.constprop.0+0x5c>
   176de:	f04f 0a0f 	mov.w	sl, #15
   176e2:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   176e6:	4699      	mov	r9, r3
   176e8:	e792      	b.n	17610 <_strtoul_l.constprop.0+0x5c>
   176ea:	bf00      	nop
   176ec:	2000369d 	.word	0x2000369d
   176f0:	19999999 	.word	0x19999999

000176f4 <_strtoul_r>:
   176f4:	f7ff bf5e 	b.w	175b4 <_strtoul_l.constprop.0>

000176f8 <_strtoll_l.constprop.0>:
   176f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   176fc:	b085      	sub	sp, #20
   176fe:	461f      	mov	r7, r3
   17700:	4b57      	ldr	r3, [pc, #348]	; (17860 <_strtoll_l.constprop.0+0x168>)
   17702:	9003      	str	r0, [sp, #12]
   17704:	468a      	mov	sl, r1
   17706:	9200      	str	r2, [sp, #0]
   17708:	460d      	mov	r5, r1
   1770a:	462a      	mov	r2, r5
   1770c:	f815 4b01 	ldrb.w	r4, [r5], #1
   17710:	5d1e      	ldrb	r6, [r3, r4]
   17712:	f016 0608 	ands.w	r6, r6, #8
   17716:	d1f8      	bne.n	1770a <_strtoll_l.constprop.0+0x12>
   17718:	2c2d      	cmp	r4, #45	; 0x2d
   1771a:	d075      	beq.n	17808 <_strtoll_l.constprop.0+0x110>
   1771c:	2c2b      	cmp	r4, #43	; 0x2b
   1771e:	bf05      	ittet	eq
   17720:	782c      	ldrbeq	r4, [r5, #0]
   17722:	9602      	streq	r6, [sp, #8]
   17724:	9602      	strne	r6, [sp, #8]
   17726:	1c95      	addeq	r5, r2, #2
   17728:	f04f 36ff 	mov.w	r6, #4294967295
   1772c:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   17730:	b12f      	cbz	r7, 1773e <_strtoll_l.constprop.0+0x46>
   17732:	2f10      	cmp	r7, #16
   17734:	d06f      	beq.n	17816 <_strtoll_l.constprop.0+0x11e>
   17736:	46b8      	mov	r8, r7
   17738:	ea4f 79e7 	mov.w	r9, r7, asr #31
   1773c:	e005      	b.n	1774a <_strtoll_l.constprop.0+0x52>
   1773e:	2c30      	cmp	r4, #48	; 0x30
   17740:	d074      	beq.n	1782c <_strtoll_l.constprop.0+0x134>
   17742:	f04f 080a 	mov.w	r8, #10
   17746:	46b9      	mov	r9, r7
   17748:	4647      	mov	r7, r8
   1774a:	4642      	mov	r2, r8
   1774c:	464b      	mov	r3, r9
   1774e:	4630      	mov	r0, r6
   17750:	4659      	mov	r1, fp
   17752:	f7f7 faf9 	bl	ed48 <__aeabi_uldivmod>
   17756:	2300      	movs	r3, #0
   17758:	9201      	str	r2, [sp, #4]
   1775a:	4684      	mov	ip, r0
   1775c:	460a      	mov	r2, r1
   1775e:	4618      	mov	r0, r3
   17760:	4619      	mov	r1, r3
   17762:	e011      	b.n	17788 <_strtoll_l.constprop.0+0x90>
   17764:	428a      	cmp	r2, r1
   17766:	bf08      	it	eq
   17768:	4584      	cmpeq	ip, r0
   1776a:	d03d      	beq.n	177e8 <_strtoll_l.constprop.0+0xf0>
   1776c:	fb00 f309 	mul.w	r3, r0, r9
   17770:	fb08 3301 	mla	r3, r8, r1, r3
   17774:	fba0 0108 	umull	r0, r1, r0, r8
   17778:	440b      	add	r3, r1
   1777a:	eb1e 0000 	adds.w	r0, lr, r0
   1777e:	eb43 71ee 	adc.w	r1, r3, lr, asr #31
   17782:	2301      	movs	r3, #1
   17784:	f815 4b01 	ldrb.w	r4, [r5], #1
   17788:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   1778c:	f1be 0f09 	cmp.w	lr, #9
   17790:	d906      	bls.n	177a0 <_strtoll_l.constprop.0+0xa8>
   17792:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   17796:	f1be 0f19 	cmp.w	lr, #25
   1779a:	d80c      	bhi.n	177b6 <_strtoll_l.constprop.0+0xbe>
   1779c:	f1a4 0e37 	sub.w	lr, r4, #55	; 0x37
   177a0:	4577      	cmp	r7, lr
   177a2:	dd11      	ble.n	177c8 <_strtoll_l.constprop.0+0xd0>
   177a4:	1c5c      	adds	r4, r3, #1
   177a6:	d0ed      	beq.n	17784 <_strtoll_l.constprop.0+0x8c>
   177a8:	4584      	cmp	ip, r0
   177aa:	eb72 0301 	sbcs.w	r3, r2, r1
   177ae:	d2d9      	bcs.n	17764 <_strtoll_l.constprop.0+0x6c>
   177b0:	f04f 33ff 	mov.w	r3, #4294967295
   177b4:	e7e6      	b.n	17784 <_strtoll_l.constprop.0+0x8c>
   177b6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   177ba:	f1be 0f19 	cmp.w	lr, #25
   177be:	d803      	bhi.n	177c8 <_strtoll_l.constprop.0+0xd0>
   177c0:	f1a4 0e57 	sub.w	lr, r4, #87	; 0x57
   177c4:	4577      	cmp	r7, lr
   177c6:	dced      	bgt.n	177a4 <_strtoll_l.constprop.0+0xac>
   177c8:	1c5a      	adds	r2, r3, #1
   177ca:	d013      	beq.n	177f4 <_strtoll_l.constprop.0+0xfc>
   177cc:	9a02      	ldr	r2, [sp, #8]
   177ce:	b112      	cbz	r2, 177d6 <_strtoll_l.constprop.0+0xde>
   177d0:	4240      	negs	r0, r0
   177d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   177d6:	9a00      	ldr	r2, [sp, #0]
   177d8:	b11a      	cbz	r2, 177e2 <_strtoll_l.constprop.0+0xea>
   177da:	bba3      	cbnz	r3, 17846 <_strtoll_l.constprop.0+0x14e>
   177dc:	9b00      	ldr	r3, [sp, #0]
   177de:	f8c3 a000 	str.w	sl, [r3]
   177e2:	b005      	add	sp, #20
   177e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   177e8:	9b01      	ldr	r3, [sp, #4]
   177ea:	4573      	cmp	r3, lr
   177ec:	dabe      	bge.n	1776c <_strtoll_l.constprop.0+0x74>
   177ee:	f04f 33ff 	mov.w	r3, #4294967295
   177f2:	e7c7      	b.n	17784 <_strtoll_l.constprop.0+0x8c>
   177f4:	9a03      	ldr	r2, [sp, #12]
   177f6:	2322      	movs	r3, #34	; 0x22
   177f8:	6013      	str	r3, [r2, #0]
   177fa:	9b00      	ldr	r3, [sp, #0]
   177fc:	b333      	cbz	r3, 1784c <_strtoll_l.constprop.0+0x154>
   177fe:	f105 3aff 	add.w	sl, r5, #4294967295
   17802:	4630      	mov	r0, r6
   17804:	4659      	mov	r1, fp
   17806:	e7e9      	b.n	177dc <_strtoll_l.constprop.0+0xe4>
   17808:	2301      	movs	r3, #1
   1780a:	782c      	ldrb	r4, [r5, #0]
   1780c:	9302      	str	r3, [sp, #8]
   1780e:	1c95      	adds	r5, r2, #2
   17810:	f04f 4b00 	mov.w	fp, #2147483648	; 0x80000000
   17814:	e78c      	b.n	17730 <_strtoll_l.constprop.0+0x38>
   17816:	2c30      	cmp	r4, #48	; 0x30
   17818:	d104      	bne.n	17824 <_strtoll_l.constprop.0+0x12c>
   1781a:	782b      	ldrb	r3, [r5, #0]
   1781c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   17820:	2b58      	cmp	r3, #88	; 0x58
   17822:	d008      	beq.n	17836 <_strtoll_l.constprop.0+0x13e>
   17824:	46b8      	mov	r8, r7
   17826:	f04f 0900 	mov.w	r9, #0
   1782a:	e78e      	b.n	1774a <_strtoll_l.constprop.0+0x52>
   1782c:	782b      	ldrb	r3, [r5, #0]
   1782e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   17832:	2b58      	cmp	r3, #88	; 0x58
   17834:	d10f      	bne.n	17856 <_strtoll_l.constprop.0+0x15e>
   17836:	f04f 0810 	mov.w	r8, #16
   1783a:	786c      	ldrb	r4, [r5, #1]
   1783c:	f04f 0900 	mov.w	r9, #0
   17840:	3502      	adds	r5, #2
   17842:	4647      	mov	r7, r8
   17844:	e781      	b.n	1774a <_strtoll_l.constprop.0+0x52>
   17846:	4606      	mov	r6, r0
   17848:	468b      	mov	fp, r1
   1784a:	e7d8      	b.n	177fe <_strtoll_l.constprop.0+0x106>
   1784c:	4630      	mov	r0, r6
   1784e:	4659      	mov	r1, fp
   17850:	b005      	add	sp, #20
   17852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17856:	f04f 0808 	mov.w	r8, #8
   1785a:	46b9      	mov	r9, r7
   1785c:	4647      	mov	r7, r8
   1785e:	e774      	b.n	1774a <_strtoll_l.constprop.0+0x52>
   17860:	2000369d 	.word	0x2000369d

00017864 <_strtoll_r>:
   17864:	f7ff bf48 	b.w	176f8 <_strtoll_l.constprop.0>

00017868 <_strtoull_l.constprop.0>:
   17868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1786c:	b085      	sub	sp, #20
   1786e:	468b      	mov	fp, r1
   17870:	9201      	str	r2, [sp, #4]
   17872:	4a62      	ldr	r2, [pc, #392]	; (179fc <_strtoull_l.constprop.0+0x194>)
   17874:	9003      	str	r0, [sp, #12]
   17876:	461e      	mov	r6, r3
   17878:	460d      	mov	r5, r1
   1787a:	4629      	mov	r1, r5
   1787c:	f815 4b01 	ldrb.w	r4, [r5], #1
   17880:	5d13      	ldrb	r3, [r2, r4]
   17882:	f013 0308 	ands.w	r3, r3, #8
   17886:	d1f8      	bne.n	1787a <_strtoull_l.constprop.0+0x12>
   17888:	2c2d      	cmp	r4, #45	; 0x2d
   1788a:	f000 8082 	beq.w	17992 <_strtoull_l.constprop.0+0x12a>
   1788e:	2c2b      	cmp	r4, #43	; 0x2b
   17890:	bf03      	ittte	eq
   17892:	782c      	ldrbeq	r4, [r5, #0]
   17894:	9302      	streq	r3, [sp, #8]
   17896:	1c8d      	addeq	r5, r1, #2
   17898:	9302      	strne	r3, [sp, #8]
   1789a:	b1be      	cbz	r6, 178cc <_strtoull_l.constprop.0+0x64>
   1789c:	2e10      	cmp	r6, #16
   1789e:	d07d      	beq.n	1799c <_strtoull_l.constprop.0+0x134>
   178a0:	ea4f 7ae6 	mov.w	sl, r6, asr #31
   178a4:	4632      	mov	r2, r6
   178a6:	4653      	mov	r3, sl
   178a8:	f04f 30ff 	mov.w	r0, #4294967295
   178ac:	f04f 31ff 	mov.w	r1, #4294967295
   178b0:	f7f7 fa4a 	bl	ed48 <__aeabi_uldivmod>
   178b4:	4632      	mov	r2, r6
   178b6:	4607      	mov	r7, r0
   178b8:	4688      	mov	r8, r1
   178ba:	4653      	mov	r3, sl
   178bc:	f04f 30ff 	mov.w	r0, #4294967295
   178c0:	f04f 31ff 	mov.w	r1, #4294967295
   178c4:	46b1      	mov	r9, r6
   178c6:	f7f7 fa3f 	bl	ed48 <__aeabi_uldivmod>
   178ca:	e00a      	b.n	178e2 <_strtoull_l.constprop.0+0x7a>
   178cc:	2c30      	cmp	r4, #48	; 0x30
   178ce:	d079      	beq.n	179c4 <_strtoull_l.constprop.0+0x15c>
   178d0:	f04f 090a 	mov.w	r9, #10
   178d4:	f8df 8128 	ldr.w	r8, [pc, #296]	; 17a00 <_strtoull_l.constprop.0+0x198>
   178d8:	46b2      	mov	sl, r6
   178da:	2205      	movs	r2, #5
   178dc:	f04f 3799 	mov.w	r7, #2576980377	; 0x99999999
   178e0:	464e      	mov	r6, r9
   178e2:	f04f 0c00 	mov.w	ip, #0
   178e6:	4660      	mov	r0, ip
   178e8:	4661      	mov	r1, ip
   178ea:	e011      	b.n	17910 <_strtoull_l.constprop.0+0xa8>
   178ec:	4541      	cmp	r1, r8
   178ee:	bf08      	it	eq
   178f0:	42b8      	cmpeq	r0, r7
   178f2:	d03e      	beq.n	17972 <_strtoull_l.constprop.0+0x10a>
   178f4:	fb00 f40a 	mul.w	r4, r0, sl
   178f8:	fb09 4101 	mla	r1, r9, r1, r4
   178fc:	fba0 0409 	umull	r0, r4, r0, r9
   17900:	4421      	add	r1, r4
   17902:	1818      	adds	r0, r3, r0
   17904:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   17908:	f04f 0c01 	mov.w	ip, #1
   1790c:	f815 4b01 	ldrb.w	r4, [r5], #1
   17910:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   17914:	2b09      	cmp	r3, #9
   17916:	d905      	bls.n	17924 <_strtoull_l.constprop.0+0xbc>
   17918:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
   1791c:	2b19      	cmp	r3, #25
   1791e:	d80d      	bhi.n	1793c <_strtoull_l.constprop.0+0xd4>
   17920:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
   17924:	429e      	cmp	r6, r3
   17926:	dd11      	ble.n	1794c <_strtoull_l.constprop.0+0xe4>
   17928:	f1bc 3fff 	cmp.w	ip, #4294967295
   1792c:	d0ee      	beq.n	1790c <_strtoull_l.constprop.0+0xa4>
   1792e:	4287      	cmp	r7, r0
   17930:	eb78 0401 	sbcs.w	r4, r8, r1
   17934:	d2da      	bcs.n	178ec <_strtoull_l.constprop.0+0x84>
   17936:	f04f 3cff 	mov.w	ip, #4294967295
   1793a:	e7e7      	b.n	1790c <_strtoull_l.constprop.0+0xa4>
   1793c:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   17940:	2b19      	cmp	r3, #25
   17942:	d803      	bhi.n	1794c <_strtoull_l.constprop.0+0xe4>
   17944:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
   17948:	429e      	cmp	r6, r3
   1794a:	dced      	bgt.n	17928 <_strtoull_l.constprop.0+0xc0>
   1794c:	f1bc 3fff 	cmp.w	ip, #4294967295
   17950:	d014      	beq.n	1797c <_strtoull_l.constprop.0+0x114>
   17952:	9b02      	ldr	r3, [sp, #8]
   17954:	b113      	cbz	r3, 1795c <_strtoull_l.constprop.0+0xf4>
   17956:	4240      	negs	r0, r0
   17958:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1795c:	9b01      	ldr	r3, [sp, #4]
   1795e:	b12b      	cbz	r3, 1796c <_strtoull_l.constprop.0+0x104>
   17960:	f1bc 0f00 	cmp.w	ip, #0
   17964:	d112      	bne.n	1798c <_strtoull_l.constprop.0+0x124>
   17966:	9b01      	ldr	r3, [sp, #4]
   17968:	f8c3 b000 	str.w	fp, [r3]
   1796c:	b005      	add	sp, #20
   1796e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17972:	4293      	cmp	r3, r2
   17974:	ddbe      	ble.n	178f4 <_strtoull_l.constprop.0+0x8c>
   17976:	f04f 3cff 	mov.w	ip, #4294967295
   1797a:	e7c7      	b.n	1790c <_strtoull_l.constprop.0+0xa4>
   1797c:	9a03      	ldr	r2, [sp, #12]
   1797e:	2322      	movs	r3, #34	; 0x22
   17980:	6013      	str	r3, [r2, #0]
   17982:	9b01      	ldr	r3, [sp, #4]
   17984:	4660      	mov	r0, ip
   17986:	4661      	mov	r1, ip
   17988:	2b00      	cmp	r3, #0
   1798a:	d0ef      	beq.n	1796c <_strtoull_l.constprop.0+0x104>
   1798c:	f105 3bff 	add.w	fp, r5, #4294967295
   17990:	e7e9      	b.n	17966 <_strtoull_l.constprop.0+0xfe>
   17992:	2301      	movs	r3, #1
   17994:	782c      	ldrb	r4, [r5, #0]
   17996:	9302      	str	r3, [sp, #8]
   17998:	1c8d      	adds	r5, r1, #2
   1799a:	e77e      	b.n	1789a <_strtoull_l.constprop.0+0x32>
   1799c:	2c30      	cmp	r4, #48	; 0x30
   1799e:	d123      	bne.n	179e8 <_strtoull_l.constprop.0+0x180>
   179a0:	782b      	ldrb	r3, [r5, #0]
   179a2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   179a6:	2b58      	cmp	r3, #88	; 0x58
   179a8:	d11b      	bne.n	179e2 <_strtoull_l.constprop.0+0x17a>
   179aa:	f04f 0910 	mov.w	r9, #16
   179ae:	786c      	ldrb	r4, [r5, #1]
   179b0:	220f      	movs	r2, #15
   179b2:	3502      	adds	r5, #2
   179b4:	f04f 37ff 	mov.w	r7, #4294967295
   179b8:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   179bc:	f04f 0a00 	mov.w	sl, #0
   179c0:	464e      	mov	r6, r9
   179c2:	e78e      	b.n	178e2 <_strtoull_l.constprop.0+0x7a>
   179c4:	782b      	ldrb	r3, [r5, #0]
   179c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   179ca:	2b58      	cmp	r3, #88	; 0x58
   179cc:	d0ed      	beq.n	179aa <_strtoull_l.constprop.0+0x142>
   179ce:	f04f 0908 	mov.w	r9, #8
   179d2:	46b2      	mov	sl, r6
   179d4:	2207      	movs	r2, #7
   179d6:	f04f 37ff 	mov.w	r7, #4294967295
   179da:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
   179de:	464e      	mov	r6, r9
   179e0:	e77f      	b.n	178e2 <_strtoull_l.constprop.0+0x7a>
   179e2:	f04f 0a00 	mov.w	sl, #0
   179e6:	e75d      	b.n	178a4 <_strtoull_l.constprop.0+0x3c>
   179e8:	220f      	movs	r2, #15
   179ea:	f04f 37ff 	mov.w	r7, #4294967295
   179ee:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   179f2:	46b1      	mov	r9, r6
   179f4:	f04f 0a00 	mov.w	sl, #0
   179f8:	e773      	b.n	178e2 <_strtoull_l.constprop.0+0x7a>
   179fa:	bf00      	nop
   179fc:	2000369d 	.word	0x2000369d
   17a00:	19999999 	.word	0x19999999

00017a04 <_strtoull_r>:
   17a04:	f7ff bf30 	b.w	17868 <_strtoull_l.constprop.0>

00017a08 <_mbrtowc_r>:
   17a08:	b570      	push	{r4, r5, r6, lr}
   17a0a:	b082      	sub	sp, #8
   17a0c:	4604      	mov	r4, r0
   17a0e:	9d06      	ldr	r5, [sp, #24]
   17a10:	b155      	cbz	r5, 17a28 <_mbrtowc_r+0x20>
   17a12:	b16a      	cbz	r2, 17a30 <_mbrtowc_r+0x28>
   17a14:	480f      	ldr	r0, [pc, #60]	; (17a54 <_mbrtowc_r+0x4c>)
   17a16:	9500      	str	r5, [sp, #0]
   17a18:	f8d0 60e4 	ldr.w	r6, [r0, #228]	; 0xe4
   17a1c:	4620      	mov	r0, r4
   17a1e:	47b0      	blx	r6
   17a20:	1c43      	adds	r3, r0, #1
   17a22:	d010      	beq.n	17a46 <_mbrtowc_r+0x3e>
   17a24:	b002      	add	sp, #8
   17a26:	bd70      	pop	{r4, r5, r6, pc}
   17a28:	f100 05f4 	add.w	r5, r0, #244	; 0xf4
   17a2c:	2a00      	cmp	r2, #0
   17a2e:	d1f1      	bne.n	17a14 <_mbrtowc_r+0xc>
   17a30:	4b08      	ldr	r3, [pc, #32]	; (17a54 <_mbrtowc_r+0x4c>)
   17a32:	9500      	str	r5, [sp, #0]
   17a34:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
   17a38:	4611      	mov	r1, r2
   17a3a:	2301      	movs	r3, #1
   17a3c:	4a06      	ldr	r2, [pc, #24]	; (17a58 <_mbrtowc_r+0x50>)
   17a3e:	4620      	mov	r0, r4
   17a40:	47b0      	blx	r6
   17a42:	1c43      	adds	r3, r0, #1
   17a44:	d1ee      	bne.n	17a24 <_mbrtowc_r+0x1c>
   17a46:	2200      	movs	r2, #0
   17a48:	238a      	movs	r3, #138	; 0x8a
   17a4a:	602a      	str	r2, [r5, #0]
   17a4c:	6023      	str	r3, [r4, #0]
   17a4e:	b002      	add	sp, #8
   17a50:	bd70      	pop	{r4, r5, r6, pc}
   17a52:	bf00      	nop
   17a54:	2000c16c 	.word	0x2000c16c
   17a58:	2000b0f8 	.word	0x2000b0f8

00017a5c <_wcrtomb_r>:
   17a5c:	b570      	push	{r4, r5, r6, lr}
   17a5e:	4605      	mov	r5, r0
   17a60:	b084      	sub	sp, #16
   17a62:	b15b      	cbz	r3, 17a7c <_wcrtomb_r+0x20>
   17a64:	461c      	mov	r4, r3
   17a66:	b169      	cbz	r1, 17a84 <_wcrtomb_r+0x28>
   17a68:	4b0e      	ldr	r3, [pc, #56]	; (17aa4 <_wcrtomb_r+0x48>)
   17a6a:	4628      	mov	r0, r5
   17a6c:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
   17a70:	4623      	mov	r3, r4
   17a72:	47b0      	blx	r6
   17a74:	1c43      	adds	r3, r0, #1
   17a76:	d00f      	beq.n	17a98 <_wcrtomb_r+0x3c>
   17a78:	b004      	add	sp, #16
   17a7a:	bd70      	pop	{r4, r5, r6, pc}
   17a7c:	f500 7482 	add.w	r4, r0, #260	; 0x104
   17a80:	2900      	cmp	r1, #0
   17a82:	d1f1      	bne.n	17a68 <_wcrtomb_r+0xc>
   17a84:	4a07      	ldr	r2, [pc, #28]	; (17aa4 <_wcrtomb_r+0x48>)
   17a86:	4623      	mov	r3, r4
   17a88:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
   17a8c:	4628      	mov	r0, r5
   17a8e:	460a      	mov	r2, r1
   17a90:	a901      	add	r1, sp, #4
   17a92:	47b0      	blx	r6
   17a94:	1c43      	adds	r3, r0, #1
   17a96:	d1ef      	bne.n	17a78 <_wcrtomb_r+0x1c>
   17a98:	2200      	movs	r2, #0
   17a9a:	238a      	movs	r3, #138	; 0x8a
   17a9c:	6022      	str	r2, [r4, #0]
   17a9e:	602b      	str	r3, [r5, #0]
   17aa0:	b004      	add	sp, #16
   17aa2:	bd70      	pop	{r4, r5, r6, pc}
   17aa4:	2000c16c 	.word	0x2000c16c

00017aa8 <_wcsrtombs_r>:
   17aa8:	b510      	push	{r4, lr}
   17aaa:	b082      	sub	sp, #8
   17aac:	9c04      	ldr	r4, [sp, #16]
   17aae:	e9cd 3400 	strd	r3, r4, [sp]
   17ab2:	f04f 33ff 	mov.w	r3, #4294967295
   17ab6:	f001 fd9f 	bl	195f8 <_wcsnrtombs_r>
   17aba:	b002      	add	sp, #8
   17abc:	bd10      	pop	{r4, pc}
   17abe:	bf00      	nop

00017ac0 <iswspace>:
   17ac0:	2100      	movs	r1, #0
   17ac2:	f000 b801 	b.w	17ac8 <iswspace_l>
   17ac6:	bf00      	nop

00017ac8 <iswspace_l>:
   17ac8:	b510      	push	{r4, lr}
   17aca:	f000 f8ab 	bl	17c24 <_jp2uc_l>
   17ace:	4604      	mov	r4, r0
   17ad0:	f001 fda4 	bl	1961c <category>
   17ad4:	f1a0 031a 	sub.w	r3, r0, #26
   17ad8:	b2db      	uxtb	r3, r3
   17ada:	2b02      	cmp	r3, #2
   17adc:	d906      	bls.n	17aec <iswspace_l+0x24>
   17ade:	f1a4 0009 	sub.w	r0, r4, #9
   17ae2:	2804      	cmp	r0, #4
   17ae4:	bf8c      	ite	hi
   17ae6:	2000      	movhi	r0, #0
   17ae8:	2001      	movls	r0, #1
   17aea:	bd10      	pop	{r4, pc}
   17aec:	2001      	movs	r0, #1
   17aee:	bd10      	pop	{r4, pc}

00017af0 <__jp2uc>:
   17af0:	2902      	cmp	r1, #2
   17af2:	d032      	beq.n	17b5a <__jp2uc+0x6a>
   17af4:	2903      	cmp	r1, #3
   17af6:	f3c0 2307 	ubfx	r3, r0, #8, #8
   17afa:	bf1d      	ittte	ne
   17afc:	f1a0 0280 	subne.w	r2, r0, #128	; 0x80
   17b00:	f083 0380 	eorne.w	r3, r3, #128	; 0x80
   17b04:	b2d2      	uxtbne	r2, r2
   17b06:	b2c2      	uxtbeq	r2, r0
   17b08:	f103 0150 	add.w	r1, r3, #80	; 0x50
   17b0c:	b2c9      	uxtb	r1, r1
   17b0e:	291f      	cmp	r1, #31
   17b10:	d806      	bhi.n	17b20 <__jp2uc+0x30>
   17b12:	f64c 71d3 	movw	r1, #53203	; 0xcfd3
   17b16:	4288      	cmp	r0, r1
   17b18:	d969      	bls.n	17bee <__jp2uc+0xfe>
   17b1a:	f04f 30ff 	mov.w	r0, #4294967295
   17b1e:	4770      	bx	lr
   17b20:	f103 0130 	add.w	r1, r3, #48	; 0x30
   17b24:	b2c9      	uxtb	r1, r1
   17b26:	2924      	cmp	r1, #36	; 0x24
   17b28:	d80e      	bhi.n	17b48 <__jp2uc+0x58>
   17b2a:	f24f 41a6 	movw	r1, #62630	; 0xf4a6
   17b2e:	4288      	cmp	r0, r1
   17b30:	d8f3      	bhi.n	17b1a <__jp2uc+0x2a>
   17b32:	3bd0      	subs	r3, #208	; 0xd0
   17b34:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
   17b38:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   17b3c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   17b40:	4a30      	ldr	r2, [pc, #192]	; (17c04 <__jp2uc+0x114>)
   17b42:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   17b46:	4770      	bx	lr
   17b48:	3ba1      	subs	r3, #161	; 0xa1
   17b4a:	2b07      	cmp	r3, #7
   17b4c:	d8e5      	bhi.n	17b1a <__jp2uc+0x2a>
   17b4e:	e8df f003 	tbb	[pc, r3]
   17b52:	3e48      	.short	0x3e48
   17b54:	25292e34 	.word	0x25292e34
   17b58:	1921      	.short	0x1921
   17b5a:	b2c2      	uxtb	r2, r0
   17b5c:	2a9e      	cmp	r2, #158	; 0x9e
   17b5e:	f3c0 2107 	ubfx	r1, r0, #8, #8
   17b62:	d90b      	bls.n	17b7c <__jp2uc+0x8c>
   17b64:	3223      	adds	r2, #35	; 0x23
   17b66:	b2d2      	uxtb	r2, r2
   17b68:	2380      	movs	r3, #128	; 0x80
   17b6a:	299f      	cmp	r1, #159	; 0x9f
   17b6c:	bf94      	ite	ls
   17b6e:	3970      	subls	r1, #112	; 0x70
   17b70:	3150      	addhi	r1, #80	; 0x50
   17b72:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   17b76:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   17b7a:	e7c5      	b.n	17b08 <__jp2uc+0x18>
   17b7c:	3a7e      	subs	r2, #126	; 0x7e
   17b7e:	b2d2      	uxtb	r2, r2
   17b80:	237f      	movs	r3, #127	; 0x7f
   17b82:	e7f2      	b.n	17b6a <__jp2uc+0x7a>
   17b84:	2ac0      	cmp	r2, #192	; 0xc0
   17b86:	d8c8      	bhi.n	17b1a <__jp2uc+0x2a>
   17b88:	4b1f      	ldr	r3, [pc, #124]	; (17c08 <__jp2uc+0x118>)
   17b8a:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   17b8e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   17b92:	4770      	bx	lr
   17b94:	2af1      	cmp	r2, #241	; 0xf1
   17b96:	d8c0      	bhi.n	17b1a <__jp2uc+0x2a>
   17b98:	4b1c      	ldr	r3, [pc, #112]	; (17c0c <__jp2uc+0x11c>)
   17b9a:	e019      	b.n	17bd0 <__jp2uc+0xe0>
   17b9c:	2ad8      	cmp	r2, #216	; 0xd8
   17b9e:	d8bc      	bhi.n	17b1a <__jp2uc+0x2a>
   17ba0:	4b1b      	ldr	r3, [pc, #108]	; (17c10 <__jp2uc+0x120>)
   17ba2:	e015      	b.n	17bd0 <__jp2uc+0xe0>
   17ba4:	2af6      	cmp	r2, #246	; 0xf6
   17ba6:	d8b8      	bhi.n	17b1a <__jp2uc+0x2a>
   17ba8:	f502 5040 	add.w	r0, r2, #12288	; 0x3000
   17bac:	4770      	bx	lr
   17bae:	2af3      	cmp	r2, #243	; 0xf3
   17bb0:	d8b3      	bhi.n	17b1a <__jp2uc+0x2a>
   17bb2:	f502 503e 	add.w	r0, r2, #12160	; 0x2f80
   17bb6:	3020      	adds	r0, #32
   17bb8:	4770      	bx	lr
   17bba:	4b16      	ldr	r3, [pc, #88]	; (17c14 <__jp2uc+0x124>)
   17bbc:	4413      	add	r3, r2
   17bbe:	f813 3ca1 	ldrb.w	r3, [r3, #-161]
   17bc2:	2b00      	cmp	r3, #0
   17bc4:	d0a9      	beq.n	17b1a <__jp2uc+0x2a>
   17bc6:	f502 407e 	add.w	r0, r2, #65024	; 0xfe00
   17bca:	3060      	adds	r0, #96	; 0x60
   17bcc:	4770      	bx	lr
   17bce:	4b12      	ldr	r3, [pc, #72]	; (17c18 <__jp2uc+0x128>)
   17bd0:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   17bd4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   17bd8:	2800      	cmp	r0, #0
   17bda:	bf08      	it	eq
   17bdc:	f04f 30ff 	moveq.w	r0, #4294967295
   17be0:	4770      	bx	lr
   17be2:	4b0e      	ldr	r3, [pc, #56]	; (17c1c <__jp2uc+0x12c>)
   17be4:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   17be8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   17bec:	4770      	bx	lr
   17bee:	3bb0      	subs	r3, #176	; 0xb0
   17bf0:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
   17bf4:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   17bf8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   17bfc:	4a08      	ldr	r2, [pc, #32]	; (17c20 <__jp2uc+0x130>)
   17bfe:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   17c02:	4770      	bx	lr
   17c04:	20008848 	.word	0x20008848
   17c08:	20003b54 	.word	0x20003b54
   17c0c:	20003ab0 	.word	0x20003ab0
   17c10:	20003a40 	.word	0x20003a40
   17c14:	200039e4 	.word	0x200039e4
   17c18:	20003928 	.word	0x20003928
   17c1c:	2000386c 	.word	0x2000386c
   17c20:	20003b94 	.word	0x20003b94

00017c24 <_jp2uc_l>:
   17c24:	b538      	push	{r3, r4, r5, lr}
   17c26:	4605      	mov	r5, r0
   17c28:	b1b9      	cbz	r1, 17c5a <_jp2uc_l+0x36>
   17c2a:	f501 7495 	add.w	r4, r1, #298	; 0x12a
   17c2e:	4912      	ldr	r1, [pc, #72]	; (17c78 <_jp2uc_l+0x54>)
   17c30:	4620      	mov	r0, r4
   17c32:	f7f9 fc49 	bl	114c8 <strcmp>
   17c36:	b928      	cbnz	r0, 17c44 <_jp2uc_l+0x20>
   17c38:	4628      	mov	r0, r5
   17c3a:	2101      	movs	r1, #1
   17c3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   17c40:	f7ff bf56 	b.w	17af0 <__jp2uc>
   17c44:	490d      	ldr	r1, [pc, #52]	; (17c7c <_jp2uc_l+0x58>)
   17c46:	4620      	mov	r0, r4
   17c48:	f7f9 fc3e 	bl	114c8 <strcmp>
   17c4c:	b938      	cbnz	r0, 17c5e <_jp2uc_l+0x3a>
   17c4e:	4628      	mov	r0, r5
   17c50:	2102      	movs	r1, #2
   17c52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   17c56:	f7ff bf4b 	b.w	17af0 <__jp2uc>
   17c5a:	4c09      	ldr	r4, [pc, #36]	; (17c80 <_jp2uc_l+0x5c>)
   17c5c:	e7e7      	b.n	17c2e <_jp2uc_l+0xa>
   17c5e:	4909      	ldr	r1, [pc, #36]	; (17c84 <_jp2uc_l+0x60>)
   17c60:	4620      	mov	r0, r4
   17c62:	f7f9 fc31 	bl	114c8 <strcmp>
   17c66:	b928      	cbnz	r0, 17c74 <_jp2uc_l+0x50>
   17c68:	4628      	mov	r0, r5
   17c6a:	2103      	movs	r1, #3
   17c6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   17c70:	f7ff bf3e 	b.w	17af0 <__jp2uc>
   17c74:	4628      	mov	r0, r5
   17c76:	bd38      	pop	{r3, r4, r5, pc}
   17c78:	2000380c 	.word	0x2000380c
   17c7c:	20003810 	.word	0x20003810
   17c80:	2000c296 	.word	0x2000c296
   17c84:	20003818 	.word	0x20003818

00017c88 <fiprintf>:
   17c88:	b40e      	push	{r1, r2, r3}
   17c8a:	b510      	push	{r4, lr}
   17c8c:	b083      	sub	sp, #12
   17c8e:	ab05      	add	r3, sp, #20
   17c90:	4c06      	ldr	r4, [pc, #24]	; (17cac <fiprintf+0x24>)
   17c92:	f853 2b04 	ldr.w	r2, [r3], #4
   17c96:	9301      	str	r3, [sp, #4]
   17c98:	4601      	mov	r1, r0
   17c9a:	6820      	ldr	r0, [r4, #0]
   17c9c:	f000 f97c 	bl	17f98 <_vfiprintf_r>
   17ca0:	b003      	add	sp, #12
   17ca2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17ca6:	b003      	add	sp, #12
   17ca8:	4770      	bx	lr
   17caa:	bf00      	nop
   17cac:	2000c6f4 	.word	0x2000c6f4

00017cb0 <__ssprint_r>:
   17cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17cb4:	6893      	ldr	r3, [r2, #8]
   17cb6:	6817      	ldr	r7, [r2, #0]
   17cb8:	b083      	sub	sp, #12
   17cba:	4692      	mov	sl, r2
   17cbc:	2b00      	cmp	r3, #0
   17cbe:	d070      	beq.n	17da2 <__ssprint_r+0xf2>
   17cc0:	4681      	mov	r9, r0
   17cc2:	688a      	ldr	r2, [r1, #8]
   17cc4:	6808      	ldr	r0, [r1, #0]
   17cc6:	460c      	mov	r4, r1
   17cc8:	3708      	adds	r7, #8
   17cca:	e043      	b.n	17d54 <__ssprint_r+0xa4>
   17ccc:	89a3      	ldrh	r3, [r4, #12]
   17cce:	f413 6f90 	tst.w	r3, #1152	; 0x480
   17cd2:	d02e      	beq.n	17d32 <__ssprint_r+0x82>
   17cd4:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
   17cd8:	eba0 0801 	sub.w	r8, r0, r1
   17cdc:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   17ce0:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
   17ce4:	f108 0001 	add.w	r0, r8, #1
   17ce8:	1076      	asrs	r6, r6, #1
   17cea:	4428      	add	r0, r5
   17cec:	42b0      	cmp	r0, r6
   17cee:	4632      	mov	r2, r6
   17cf0:	bf84      	itt	hi
   17cf2:	4606      	movhi	r6, r0
   17cf4:	4632      	movhi	r2, r6
   17cf6:	055b      	lsls	r3, r3, #21
   17cf8:	d537      	bpl.n	17d6a <__ssprint_r+0xba>
   17cfa:	4611      	mov	r1, r2
   17cfc:	4648      	mov	r0, r9
   17cfe:	f7f7 f9fd 	bl	f0fc <_malloc_r>
   17d02:	9001      	str	r0, [sp, #4]
   17d04:	2800      	cmp	r0, #0
   17d06:	d03a      	beq.n	17d7e <__ssprint_r+0xce>
   17d08:	4642      	mov	r2, r8
   17d0a:	6921      	ldr	r1, [r4, #16]
   17d0c:	f7f5 fc20 	bl	d550 <memcpy>
   17d10:	89a2      	ldrh	r2, [r4, #12]
   17d12:	9b01      	ldr	r3, [sp, #4]
   17d14:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   17d18:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   17d1c:	81a2      	strh	r2, [r4, #12]
   17d1e:	eba6 0208 	sub.w	r2, r6, r8
   17d22:	eb03 0008 	add.w	r0, r3, r8
   17d26:	6166      	str	r6, [r4, #20]
   17d28:	60a2      	str	r2, [r4, #8]
   17d2a:	6123      	str	r3, [r4, #16]
   17d2c:	6020      	str	r0, [r4, #0]
   17d2e:	462e      	mov	r6, r5
   17d30:	46a8      	mov	r8, r5
   17d32:	4642      	mov	r2, r8
   17d34:	4659      	mov	r1, fp
   17d36:	f7f9 f8c1 	bl	10ebc <memmove>
   17d3a:	f8da 3008 	ldr.w	r3, [sl, #8]
   17d3e:	68a2      	ldr	r2, [r4, #8]
   17d40:	6820      	ldr	r0, [r4, #0]
   17d42:	1b92      	subs	r2, r2, r6
   17d44:	4440      	add	r0, r8
   17d46:	1b5b      	subs	r3, r3, r5
   17d48:	60a2      	str	r2, [r4, #8]
   17d4a:	6020      	str	r0, [r4, #0]
   17d4c:	f8ca 3008 	str.w	r3, [sl, #8]
   17d50:	b33b      	cbz	r3, 17da2 <__ssprint_r+0xf2>
   17d52:	3708      	adds	r7, #8
   17d54:	e957 b502 	ldrd	fp, r5, [r7, #-8]
   17d58:	2d00      	cmp	r5, #0
   17d5a:	d0fa      	beq.n	17d52 <__ssprint_r+0xa2>
   17d5c:	42aa      	cmp	r2, r5
   17d5e:	4616      	mov	r6, r2
   17d60:	4690      	mov	r8, r2
   17d62:	d9b3      	bls.n	17ccc <__ssprint_r+0x1c>
   17d64:	462e      	mov	r6, r5
   17d66:	46a8      	mov	r8, r5
   17d68:	e7e3      	b.n	17d32 <__ssprint_r+0x82>
   17d6a:	4648      	mov	r0, r9
   17d6c:	f7f7 fc8e 	bl	f68c <_realloc_r>
   17d70:	4603      	mov	r3, r0
   17d72:	2800      	cmp	r0, #0
   17d74:	d1d3      	bne.n	17d1e <__ssprint_r+0x6e>
   17d76:	6921      	ldr	r1, [r4, #16]
   17d78:	4648      	mov	r0, r9
   17d7a:	f7f9 fed3 	bl	11b24 <_free_r>
   17d7e:	89a3      	ldrh	r3, [r4, #12]
   17d80:	220c      	movs	r2, #12
   17d82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   17d86:	f8c9 2000 	str.w	r2, [r9]
   17d8a:	f04f 30ff 	mov.w	r0, #4294967295
   17d8e:	81a3      	strh	r3, [r4, #12]
   17d90:	2200      	movs	r2, #0
   17d92:	2300      	movs	r3, #0
   17d94:	f8ca 2008 	str.w	r2, [sl, #8]
   17d98:	f8ca 3004 	str.w	r3, [sl, #4]
   17d9c:	b003      	add	sp, #12
   17d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17da2:	2000      	movs	r0, #0
   17da4:	2300      	movs	r3, #0
   17da6:	f8ca 3004 	str.w	r3, [sl, #4]
   17daa:	b003      	add	sp, #12
   17dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017db0 <_sungetc_r>:
   17db0:	b538      	push	{r3, r4, r5, lr}
   17db2:	1c4b      	adds	r3, r1, #1
   17db4:	d01a      	beq.n	17dec <_sungetc_r+0x3c>
   17db6:	8993      	ldrh	r3, [r2, #12]
   17db8:	4614      	mov	r4, r2
   17dba:	6b12      	ldr	r2, [r2, #48]	; 0x30
   17dbc:	f023 0320 	bic.w	r3, r3, #32
   17dc0:	81a3      	strh	r3, [r4, #12]
   17dc2:	b2cd      	uxtb	r5, r1
   17dc4:	b1aa      	cbz	r2, 17df2 <_sungetc_r+0x42>
   17dc6:	6862      	ldr	r2, [r4, #4]
   17dc8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   17dca:	429a      	cmp	r2, r3
   17dcc:	da09      	bge.n	17de2 <_sungetc_r+0x32>
   17dce:	6823      	ldr	r3, [r4, #0]
   17dd0:	1e5a      	subs	r2, r3, #1
   17dd2:	6022      	str	r2, [r4, #0]
   17dd4:	f803 5c01 	strb.w	r5, [r3, #-1]
   17dd8:	6863      	ldr	r3, [r4, #4]
   17dda:	3301      	adds	r3, #1
   17ddc:	6063      	str	r3, [r4, #4]
   17dde:	4628      	mov	r0, r5
   17de0:	bd38      	pop	{r3, r4, r5, pc}
   17de2:	4621      	mov	r1, r4
   17de4:	f001 fa58 	bl	19298 <__submore>
   17de8:	2800      	cmp	r0, #0
   17dea:	d0f0      	beq.n	17dce <_sungetc_r+0x1e>
   17dec:	f04f 35ff 	mov.w	r5, #4294967295
   17df0:	e7f5      	b.n	17dde <_sungetc_r+0x2e>
   17df2:	6923      	ldr	r3, [r4, #16]
   17df4:	6822      	ldr	r2, [r4, #0]
   17df6:	b12b      	cbz	r3, 17e04 <_sungetc_r+0x54>
   17df8:	4293      	cmp	r3, r2
   17dfa:	d203      	bcs.n	17e04 <_sungetc_r+0x54>
   17dfc:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   17e00:	42ab      	cmp	r3, r5
   17e02:	d00f      	beq.n	17e24 <_sungetc_r+0x74>
   17e04:	6861      	ldr	r1, [r4, #4]
   17e06:	63e1      	str	r1, [r4, #60]	; 0x3c
   17e08:	4623      	mov	r3, r4
   17e0a:	63a2      	str	r2, [r4, #56]	; 0x38
   17e0c:	f104 0140 	add.w	r1, r4, #64	; 0x40
   17e10:	2203      	movs	r2, #3
   17e12:	6362      	str	r2, [r4, #52]	; 0x34
   17e14:	6321      	str	r1, [r4, #48]	; 0x30
   17e16:	f803 5f42 	strb.w	r5, [r3, #66]!
   17e1a:	2201      	movs	r2, #1
   17e1c:	e9c4 3200 	strd	r3, r2, [r4]
   17e20:	4628      	mov	r0, r5
   17e22:	bd38      	pop	{r3, r4, r5, pc}
   17e24:	6863      	ldr	r3, [r4, #4]
   17e26:	3a01      	subs	r2, #1
   17e28:	3301      	adds	r3, #1
   17e2a:	e9c4 2300 	strd	r2, r3, [r4]
   17e2e:	e7d6      	b.n	17dde <_sungetc_r+0x2e>

00017e30 <__ssrefill_r>:
   17e30:	b510      	push	{r4, lr}
   17e32:	460c      	mov	r4, r1
   17e34:	6b09      	ldr	r1, [r1, #48]	; 0x30
   17e36:	b169      	cbz	r1, 17e54 <__ssrefill_r+0x24>
   17e38:	f104 0340 	add.w	r3, r4, #64	; 0x40
   17e3c:	4299      	cmp	r1, r3
   17e3e:	d001      	beq.n	17e44 <__ssrefill_r+0x14>
   17e40:	f7f9 fe70 	bl	11b24 <_free_r>
   17e44:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   17e46:	6063      	str	r3, [r4, #4]
   17e48:	2000      	movs	r0, #0
   17e4a:	6320      	str	r0, [r4, #48]	; 0x30
   17e4c:	b113      	cbz	r3, 17e54 <__ssrefill_r+0x24>
   17e4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   17e50:	6023      	str	r3, [r4, #0]
   17e52:	bd10      	pop	{r4, pc}
   17e54:	89a3      	ldrh	r3, [r4, #12]
   17e56:	6921      	ldr	r1, [r4, #16]
   17e58:	2200      	movs	r2, #0
   17e5a:	f043 0320 	orr.w	r3, r3, #32
   17e5e:	e9c4 1200 	strd	r1, r2, [r4]
   17e62:	81a3      	strh	r3, [r4, #12]
   17e64:	f04f 30ff 	mov.w	r0, #4294967295
   17e68:	bd10      	pop	{r4, pc}
   17e6a:	bf00      	nop

00017e6c <_sfread_r>:
   17e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e70:	b085      	sub	sp, #20
   17e72:	e9cd 3202 	strd	r3, r2, [sp, #8]
   17e76:	fb02 f303 	mul.w	r3, r2, r3
   17e7a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   17e7c:	9301      	str	r3, [sp, #4]
   17e7e:	b3a3      	cbz	r3, 17eea <_sfread_r+0x7e>
   17e80:	f8d4 a004 	ldr.w	sl, [r4, #4]
   17e84:	9b01      	ldr	r3, [sp, #4]
   17e86:	4553      	cmp	r3, sl
   17e88:	468b      	mov	fp, r1
   17e8a:	d946      	bls.n	17f1a <_sfread_r+0xae>
   17e8c:	46a0      	mov	r8, r4
   17e8e:	9d01      	ldr	r5, [sp, #4]
   17e90:	f858 1b40 	ldr.w	r1, [r8], #64
   17e94:	4607      	mov	r7, r0
   17e96:	2600      	movs	r6, #0
   17e98:	4652      	mov	r2, sl
   17e9a:	4658      	mov	r0, fp
   17e9c:	f7f5 fb58 	bl	d550 <memcpy>
   17ea0:	6823      	ldr	r3, [r4, #0]
   17ea2:	6b22      	ldr	r2, [r4, #48]	; 0x30
   17ea4:	4453      	add	r3, sl
   17ea6:	46a9      	mov	r9, r5
   17ea8:	e9c4 3600 	strd	r3, r6, [r4]
   17eac:	4611      	mov	r1, r2
   17eae:	4638      	mov	r0, r7
   17eb0:	44d3      	add	fp, sl
   17eb2:	eba5 050a 	sub.w	r5, r5, sl
   17eb6:	b1e2      	cbz	r2, 17ef2 <_sfread_r+0x86>
   17eb8:	4542      	cmp	r2, r8
   17eba:	d001      	beq.n	17ec0 <_sfread_r+0x54>
   17ebc:	f7f9 fe32 	bl	11b24 <_free_r>
   17ec0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   17ec2:	6326      	str	r6, [r4, #48]	; 0x30
   17ec4:	6063      	str	r3, [r4, #4]
   17ec6:	b1a3      	cbz	r3, 17ef2 <_sfread_r+0x86>
   17ec8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   17eca:	6021      	str	r1, [r4, #0]
   17ecc:	42ab      	cmp	r3, r5
   17ece:	469a      	mov	sl, r3
   17ed0:	d3e2      	bcc.n	17e98 <_sfread_r+0x2c>
   17ed2:	9b02      	ldr	r3, [sp, #8]
   17ed4:	9301      	str	r3, [sp, #4]
   17ed6:	462a      	mov	r2, r5
   17ed8:	4658      	mov	r0, fp
   17eda:	f7f5 fb39 	bl	d550 <memcpy>
   17ede:	e9d4 3200 	ldrd	r3, r2, [r4]
   17ee2:	1b52      	subs	r2, r2, r5
   17ee4:	442b      	add	r3, r5
   17ee6:	e9c4 3200 	strd	r3, r2, [r4]
   17eea:	9801      	ldr	r0, [sp, #4]
   17eec:	b005      	add	sp, #20
   17eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ef2:	9a01      	ldr	r2, [sp, #4]
   17ef4:	9b03      	ldr	r3, [sp, #12]
   17ef6:	4452      	add	r2, sl
   17ef8:	eba2 0209 	sub.w	r2, r2, r9
   17efc:	fbb2 f3f3 	udiv	r3, r2, r3
   17f00:	9301      	str	r3, [sp, #4]
   17f02:	89a3      	ldrh	r3, [r4, #12]
   17f04:	6922      	ldr	r2, [r4, #16]
   17f06:	9801      	ldr	r0, [sp, #4]
   17f08:	f043 0320 	orr.w	r3, r3, #32
   17f0c:	81a3      	strh	r3, [r4, #12]
   17f0e:	2300      	movs	r3, #0
   17f10:	e9c4 2300 	strd	r2, r3, [r4]
   17f14:	b005      	add	sp, #20
   17f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f1a:	6821      	ldr	r1, [r4, #0]
   17f1c:	461d      	mov	r5, r3
   17f1e:	e7d8      	b.n	17ed2 <_sfread_r+0x66>

00017f20 <__sprint_r.part.0>:
   17f20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f24:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   17f26:	049c      	lsls	r4, r3, #18
   17f28:	4690      	mov	r8, r2
   17f2a:	d52d      	bpl.n	17f88 <__sprint_r.part.0+0x68>
   17f2c:	6893      	ldr	r3, [r2, #8]
   17f2e:	6812      	ldr	r2, [r2, #0]
   17f30:	b343      	cbz	r3, 17f84 <__sprint_r.part.0+0x64>
   17f32:	468b      	mov	fp, r1
   17f34:	4606      	mov	r6, r0
   17f36:	f102 0908 	add.w	r9, r2, #8
   17f3a:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   17f3e:	ea5f 079a 	movs.w	r7, sl, lsr #2
   17f42:	d015      	beq.n	17f70 <__sprint_r.part.0+0x50>
   17f44:	3d04      	subs	r5, #4
   17f46:	2400      	movs	r4, #0
   17f48:	e001      	b.n	17f4e <__sprint_r.part.0+0x2e>
   17f4a:	42a7      	cmp	r7, r4
   17f4c:	d00e      	beq.n	17f6c <__sprint_r.part.0+0x4c>
   17f4e:	f855 1f04 	ldr.w	r1, [r5, #4]!
   17f52:	465a      	mov	r2, fp
   17f54:	4630      	mov	r0, r6
   17f56:	f001 fa97 	bl	19488 <_fputwc_r>
   17f5a:	1c43      	adds	r3, r0, #1
   17f5c:	f104 0401 	add.w	r4, r4, #1
   17f60:	d1f3      	bne.n	17f4a <__sprint_r.part.0+0x2a>
   17f62:	2300      	movs	r3, #0
   17f64:	e9c8 3301 	strd	r3, r3, [r8, #4]
   17f68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f6c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   17f70:	f02a 0a03 	bic.w	sl, sl, #3
   17f74:	eba3 030a 	sub.w	r3, r3, sl
   17f78:	f8c8 3008 	str.w	r3, [r8, #8]
   17f7c:	f109 0908 	add.w	r9, r9, #8
   17f80:	2b00      	cmp	r3, #0
   17f82:	d1da      	bne.n	17f3a <__sprint_r.part.0+0x1a>
   17f84:	2000      	movs	r0, #0
   17f86:	e7ec      	b.n	17f62 <__sprint_r.part.0+0x42>
   17f88:	f001 f80c 	bl	18fa4 <__sfvwrite_r>
   17f8c:	2300      	movs	r3, #0
   17f8e:	e9c8 3301 	strd	r3, r3, [r8, #4]
   17f92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f96:	bf00      	nop

00017f98 <_vfiprintf_r>:
   17f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f9c:	ed2d 8b02 	vpush	{d8}
   17fa0:	b0c5      	sub	sp, #276	; 0x114
   17fa2:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
   17fa6:	4683      	mov	fp, r0
   17fa8:	ee08 1a10 	vmov	s16, r1
   17fac:	4616      	mov	r6, r2
   17fae:	2100      	movs	r1, #0
   17fb0:	2208      	movs	r2, #8
   17fb2:	4650      	mov	r0, sl
   17fb4:	461c      	mov	r4, r3
   17fb6:	9307      	str	r3, [sp, #28]
   17fb8:	f7f8 fffc 	bl	10fb4 <memset>
   17fbc:	f1bb 0f00 	cmp.w	fp, #0
   17fc0:	d004      	beq.n	17fcc <_vfiprintf_r+0x34>
   17fc2:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
   17fc6:	2b00      	cmp	r3, #0
   17fc8:	f000 86a0 	beq.w	18d0c <_vfiprintf_r+0xd74>
   17fcc:	ee18 2a10 	vmov	r2, s16
   17fd0:	6e53      	ldr	r3, [r2, #100]	; 0x64
   17fd2:	07db      	lsls	r3, r3, #31
   17fd4:	f140 8513 	bpl.w	189fe <_vfiprintf_r+0xa66>
   17fd8:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   17fdc:	b28a      	uxth	r2, r1
   17fde:	0495      	lsls	r5, r2, #18
   17fe0:	d40b      	bmi.n	17ffa <_vfiprintf_r+0x62>
   17fe2:	ee18 3a10 	vmov	r3, s16
   17fe6:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   17fea:	8199      	strh	r1, [r3, #12]
   17fec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   17fee:	b28a      	uxth	r2, r1
   17ff0:	ee18 1a10 	vmov	r1, s16
   17ff4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   17ff8:	664b      	str	r3, [r1, #100]	; 0x64
   17ffa:	0710      	lsls	r0, r2, #28
   17ffc:	f140 8105 	bpl.w	1820a <_vfiprintf_r+0x272>
   18000:	ee18 3a10 	vmov	r3, s16
   18004:	691b      	ldr	r3, [r3, #16]
   18006:	2b00      	cmp	r3, #0
   18008:	f000 80ff 	beq.w	1820a <_vfiprintf_r+0x272>
   1800c:	f002 031a 	and.w	r3, r2, #26
   18010:	2b0a      	cmp	r3, #10
   18012:	f000 810a 	beq.w	1822a <_vfiprintf_r+0x292>
   18016:	2300      	movs	r3, #0
   18018:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
   1801c:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
   18020:	aa1b      	add	r2, sp, #108	; 0x6c
   18022:	930c      	str	r3, [sp, #48]	; 0x30
   18024:	9218      	str	r2, [sp, #96]	; 0x60
   18026:	4691      	mov	r9, r2
   18028:	930b      	str	r3, [sp, #44]	; 0x2c
   1802a:	9305      	str	r3, [sp, #20]
   1802c:	46b0      	mov	r8, r6
   1802e:	4644      	mov	r4, r8
   18030:	4ba8      	ldr	r3, [pc, #672]	; (182d4 <_vfiprintf_r+0x33c>)
   18032:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   18036:	f7f9 f99f 	bl	11378 <__locale_mb_cur_max>
   1803a:	4622      	mov	r2, r4
   1803c:	4603      	mov	r3, r0
   1803e:	a912      	add	r1, sp, #72	; 0x48
   18040:	f8cd a000 	str.w	sl, [sp]
   18044:	4658      	mov	r0, fp
   18046:	47a8      	blx	r5
   18048:	2800      	cmp	r0, #0
   1804a:	f000 8145 	beq.w	182d8 <_vfiprintf_r+0x340>
   1804e:	f2c0 8139 	blt.w	182c4 <_vfiprintf_r+0x32c>
   18052:	9a12      	ldr	r2, [sp, #72]	; 0x48
   18054:	2a25      	cmp	r2, #37	; 0x25
   18056:	4603      	mov	r3, r0
   18058:	d001      	beq.n	1805e <_vfiprintf_r+0xc6>
   1805a:	441c      	add	r4, r3
   1805c:	e7e8      	b.n	18030 <_vfiprintf_r+0x98>
   1805e:	ebb4 0608 	subs.w	r6, r4, r8
   18062:	4605      	mov	r5, r0
   18064:	f040 813c 	bne.w	182e0 <_vfiprintf_r+0x348>
   18068:	2300      	movs	r3, #0
   1806a:	7861      	ldrb	r1, [r4, #1]
   1806c:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   18070:	f104 0801 	add.w	r8, r4, #1
   18074:	9306      	str	r3, [sp, #24]
   18076:	f04f 37ff 	mov.w	r7, #4294967295
   1807a:	461e      	mov	r6, r3
   1807c:	242b      	movs	r4, #43	; 0x2b
   1807e:	f108 0801 	add.w	r8, r8, #1
   18082:	f1a1 0320 	sub.w	r3, r1, #32
   18086:	2b5a      	cmp	r3, #90	; 0x5a
   18088:	f200 8178 	bhi.w	1837c <_vfiprintf_r+0x3e4>
   1808c:	e8df f013 	tbh	[pc, r3, lsl #1]
   18090:	017602b5 	.word	0x017602b5
   18094:	02b00176 	.word	0x02b00176
   18098:	01760176 	.word	0x01760176
   1809c:	006a0176 	.word	0x006a0176
   180a0:	01760176 	.word	0x01760176
   180a4:	028d027d 	.word	0x028d027d
   180a8:	02880176 	.word	0x02880176
   180ac:	01760297 	.word	0x01760297
   180b0:	005b0292 	.word	0x005b0292
   180b4:	005b005b 	.word	0x005b005b
   180b8:	005b005b 	.word	0x005b005b
   180bc:	005b005b 	.word	0x005b005b
   180c0:	005b005b 	.word	0x005b005b
   180c4:	01760176 	.word	0x01760176
   180c8:	01760176 	.word	0x01760176
   180cc:	01760176 	.word	0x01760176
   180d0:	01760176 	.word	0x01760176
   180d4:	025c0176 	.word	0x025c0176
   180d8:	01760084 	.word	0x01760084
   180dc:	01760176 	.word	0x01760176
   180e0:	01760176 	.word	0x01760176
   180e4:	01760176 	.word	0x01760176
   180e8:	01760176 	.word	0x01760176
   180ec:	00e80176 	.word	0x00e80176
   180f0:	01760176 	.word	0x01760176
   180f4:	02330176 	.word	0x02330176
   180f8:	02da0176 	.word	0x02da0176
   180fc:	01760176 	.word	0x01760176
   18100:	0176058b 	.word	0x0176058b
   18104:	01760176 	.word	0x01760176
   18108:	01760176 	.word	0x01760176
   1810c:	01760176 	.word	0x01760176
   18110:	01760176 	.word	0x01760176
   18114:	025c0176 	.word	0x025c0176
   18118:	01760086 	.word	0x01760086
   1811c:	01760176 	.word	0x01760176
   18120:	008602cd 	.word	0x008602cd
   18124:	0176007f 	.word	0x0176007f
   18128:	017602c0 	.word	0x017602c0
   1812c:	00ea02fd 	.word	0x00ea02fd
   18130:	007f02ed 	.word	0x007f02ed
   18134:	02330176 	.word	0x02330176
   18138:	0569007c 	.word	0x0569007c
   1813c:	01760176 	.word	0x01760176
   18140:	0176056b 	.word	0x0176056b
   18144:	007c      	.short	0x007c
   18146:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   1814a:	2200      	movs	r2, #0
   1814c:	f818 1b01 	ldrb.w	r1, [r8], #1
   18150:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   18154:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   18158:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   1815c:	2b09      	cmp	r3, #9
   1815e:	d9f5      	bls.n	1814c <_vfiprintf_r+0x1b4>
   18160:	9206      	str	r2, [sp, #24]
   18162:	e78e      	b.n	18082 <_vfiprintf_r+0xea>
   18164:	4658      	mov	r0, fp
   18166:	f7fe fab9 	bl	166dc <_localeconv_r>
   1816a:	6843      	ldr	r3, [r0, #4]
   1816c:	930d      	str	r3, [sp, #52]	; 0x34
   1816e:	4618      	mov	r0, r3
   18170:	f7f9 fbc6 	bl	11900 <strlen>
   18174:	900e      	str	r0, [sp, #56]	; 0x38
   18176:	4605      	mov	r5, r0
   18178:	4658      	mov	r0, fp
   1817a:	f7fe faaf 	bl	166dc <_localeconv_r>
   1817e:	6883      	ldr	r3, [r0, #8]
   18180:	930b      	str	r3, [sp, #44]	; 0x2c
   18182:	2d00      	cmp	r5, #0
   18184:	f040 84d6 	bne.w	18b34 <_vfiprintf_r+0xb9c>
   18188:	f898 1000 	ldrb.w	r1, [r8]
   1818c:	e777      	b.n	1807e <_vfiprintf_r+0xe6>
   1818e:	f898 1000 	ldrb.w	r1, [r8]
   18192:	f046 0620 	orr.w	r6, r6, #32
   18196:	e772      	b.n	1807e <_vfiprintf_r+0xe6>
   18198:	f046 0610 	orr.w	r6, r6, #16
   1819c:	06b4      	lsls	r4, r6, #26
   1819e:	f140 818e 	bpl.w	184be <_vfiprintf_r+0x526>
   181a2:	9b07      	ldr	r3, [sp, #28]
   181a4:	3307      	adds	r3, #7
   181a6:	f023 0307 	bic.w	r3, r3, #7
   181aa:	461a      	mov	r2, r3
   181ac:	6859      	ldr	r1, [r3, #4]
   181ae:	f852 3b08 	ldr.w	r3, [r2], #8
   181b2:	9207      	str	r2, [sp, #28]
   181b4:	460a      	mov	r2, r1
   181b6:	2900      	cmp	r1, #0
   181b8:	f2c0 8470 	blt.w	18a9c <_vfiprintf_r+0xb04>
   181bc:	1c79      	adds	r1, r7, #1
   181be:	f000 85a2 	beq.w	18d06 <_vfiprintf_r+0xd6e>
   181c2:	f026 0180 	bic.w	r1, r6, #128	; 0x80
   181c6:	9103      	str	r1, [sp, #12]
   181c8:	ea53 0102 	orrs.w	r1, r3, r2
   181cc:	f000 843f 	beq.w	18a4e <_vfiprintf_r+0xab6>
   181d0:	2b0a      	cmp	r3, #10
   181d2:	f172 0100 	sbcs.w	r1, r2, #0
   181d6:	f080 8541 	bcs.w	18c5c <_vfiprintf_r+0xcc4>
   181da:	3330      	adds	r3, #48	; 0x30
   181dc:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   181e0:	9e03      	ldr	r6, [sp, #12]
   181e2:	2301      	movs	r3, #1
   181e4:	9304      	str	r3, [sp, #16]
   181e6:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   181ea:	9b04      	ldr	r3, [sp, #16]
   181ec:	42bb      	cmp	r3, r7
   181ee:	bfb8      	it	lt
   181f0:	463b      	movlt	r3, r7
   181f2:	9303      	str	r3, [sp, #12]
   181f4:	2300      	movs	r3, #0
   181f6:	9308      	str	r3, [sp, #32]
   181f8:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   181fc:	2b00      	cmp	r3, #0
   181fe:	f000 80cb 	beq.w	18398 <_vfiprintf_r+0x400>
   18202:	9b03      	ldr	r3, [sp, #12]
   18204:	3301      	adds	r3, #1
   18206:	9303      	str	r3, [sp, #12]
   18208:	e0c6      	b.n	18398 <_vfiprintf_r+0x400>
   1820a:	ee18 1a10 	vmov	r1, s16
   1820e:	4658      	mov	r0, fp
   18210:	ee18 5a10 	vmov	r5, s16
   18214:	f001 f87c 	bl	19310 <__swsetup_r>
   18218:	2800      	cmp	r0, #0
   1821a:	f040 8652 	bne.w	18ec2 <_vfiprintf_r+0xf2a>
   1821e:	89aa      	ldrh	r2, [r5, #12]
   18220:	f002 031a 	and.w	r3, r2, #26
   18224:	2b0a      	cmp	r3, #10
   18226:	f47f aef6 	bne.w	18016 <_vfiprintf_r+0x7e>
   1822a:	ee18 1a10 	vmov	r1, s16
   1822e:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   18232:	2b00      	cmp	r3, #0
   18234:	f6ff aeef 	blt.w	18016 <_vfiprintf_r+0x7e>
   18238:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   1823a:	07db      	lsls	r3, r3, #31
   1823c:	d402      	bmi.n	18244 <_vfiprintf_r+0x2ac>
   1823e:	0597      	lsls	r7, r2, #22
   18240:	f140 8612 	bpl.w	18e68 <_vfiprintf_r+0xed0>
   18244:	ee18 1a10 	vmov	r1, s16
   18248:	4623      	mov	r3, r4
   1824a:	4632      	mov	r2, r6
   1824c:	4658      	mov	r0, fp
   1824e:	f000 fe69 	bl	18f24 <__sbprintf>
   18252:	9005      	str	r0, [sp, #20]
   18254:	9805      	ldr	r0, [sp, #20]
   18256:	b045      	add	sp, #276	; 0x114
   18258:	ecbd 8b02 	vpop	{d8}
   1825c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18260:	f046 0610 	orr.w	r6, r6, #16
   18264:	f016 0220 	ands.w	r2, r6, #32
   18268:	f000 8136 	beq.w	184d8 <_vfiprintf_r+0x540>
   1826c:	9b07      	ldr	r3, [sp, #28]
   1826e:	3307      	adds	r3, #7
   18270:	f023 0307 	bic.w	r3, r3, #7
   18274:	4619      	mov	r1, r3
   18276:	685a      	ldr	r2, [r3, #4]
   18278:	f851 3b08 	ldr.w	r3, [r1], #8
   1827c:	9107      	str	r1, [sp, #28]
   1827e:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   18282:	9103      	str	r1, [sp, #12]
   18284:	2100      	movs	r1, #0
   18286:	2000      	movs	r0, #0
   18288:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   1828c:	1c78      	adds	r0, r7, #1
   1828e:	f000 8210 	beq.w	186b2 <_vfiprintf_r+0x71a>
   18292:	9803      	ldr	r0, [sp, #12]
   18294:	f020 0680 	bic.w	r6, r0, #128	; 0x80
   18298:	ea53 0002 	orrs.w	r0, r3, r2
   1829c:	f040 8208 	bne.w	186b0 <_vfiprintf_r+0x718>
   182a0:	2f00      	cmp	r7, #0
   182a2:	f040 8538 	bne.w	18d16 <_vfiprintf_r+0xd7e>
   182a6:	2900      	cmp	r1, #0
   182a8:	f040 83d5 	bne.w	18a56 <_vfiprintf_r+0xabe>
   182ac:	9b03      	ldr	r3, [sp, #12]
   182ae:	f013 0301 	ands.w	r3, r3, #1
   182b2:	9304      	str	r3, [sp, #16]
   182b4:	f000 8411 	beq.w	18ada <_vfiprintf_r+0xb42>
   182b8:	2330      	movs	r3, #48	; 0x30
   182ba:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   182be:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   182c2:	e792      	b.n	181ea <_vfiprintf_r+0x252>
   182c4:	2208      	movs	r2, #8
   182c6:	2100      	movs	r1, #0
   182c8:	4650      	mov	r0, sl
   182ca:	f7f8 fe73 	bl	10fb4 <memset>
   182ce:	2301      	movs	r3, #1
   182d0:	441c      	add	r4, r3
   182d2:	e6ad      	b.n	18030 <_vfiprintf_r+0x98>
   182d4:	2000c16c 	.word	0x2000c16c
   182d8:	ebb4 0608 	subs.w	r6, r4, r8
   182dc:	4605      	mov	r5, r0
   182de:	d01b      	beq.n	18318 <_vfiprintf_r+0x380>
   182e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
   182e2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   182e4:	3301      	adds	r3, #1
   182e6:	4432      	add	r2, r6
   182e8:	2b07      	cmp	r3, #7
   182ea:	e9c9 8600 	strd	r8, r6, [r9]
   182ee:	921a      	str	r2, [sp, #104]	; 0x68
   182f0:	9319      	str	r3, [sp, #100]	; 0x64
   182f2:	dd1c      	ble.n	1832e <_vfiprintf_r+0x396>
   182f4:	2a00      	cmp	r2, #0
   182f6:	f000 83a6 	beq.w	18a46 <_vfiprintf_r+0xaae>
   182fa:	ee18 1a10 	vmov	r1, s16
   182fe:	aa18      	add	r2, sp, #96	; 0x60
   18300:	4658      	mov	r0, fp
   18302:	f7ff fe0d 	bl	17f20 <__sprint_r.part.0>
   18306:	bb20      	cbnz	r0, 18352 <_vfiprintf_r+0x3ba>
   18308:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1830c:	9b05      	ldr	r3, [sp, #20]
   1830e:	4433      	add	r3, r6
   18310:	9305      	str	r3, [sp, #20]
   18312:	2d00      	cmp	r5, #0
   18314:	f47f aea8 	bne.w	18068 <_vfiprintf_r+0xd0>
   18318:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1831a:	2b00      	cmp	r3, #0
   1831c:	f040 85c1 	bne.w	18ea2 <_vfiprintf_r+0xf0a>
   18320:	ee18 3a10 	vmov	r3, s16
   18324:	2200      	movs	r2, #0
   18326:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   1832a:	9219      	str	r2, [sp, #100]	; 0x64
   1832c:	e015      	b.n	1835a <_vfiprintf_r+0x3c2>
   1832e:	f109 0908 	add.w	r9, r9, #8
   18332:	e7eb      	b.n	1830c <_vfiprintf_r+0x374>
   18334:	ee18 1a10 	vmov	r1, s16
   18338:	aa18      	add	r2, sp, #96	; 0x60
   1833a:	4658      	mov	r0, fp
   1833c:	f7ff fdf0 	bl	17f20 <__sprint_r.part.0>
   18340:	2800      	cmp	r0, #0
   18342:	f000 80a6 	beq.w	18492 <_vfiprintf_r+0x4fa>
   18346:	9b08      	ldr	r3, [sp, #32]
   18348:	b11b      	cbz	r3, 18352 <_vfiprintf_r+0x3ba>
   1834a:	9908      	ldr	r1, [sp, #32]
   1834c:	4658      	mov	r0, fp
   1834e:	f7f9 fbe9 	bl	11b24 <_free_r>
   18352:	ee18 3a10 	vmov	r3, s16
   18356:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   1835a:	ee18 2a10 	vmov	r2, s16
   1835e:	6e52      	ldr	r2, [r2, #100]	; 0x64
   18360:	f012 0f01 	tst.w	r2, #1
   18364:	b29a      	uxth	r2, r3
   18366:	f000 80a0 	beq.w	184aa <_vfiprintf_r+0x512>
   1836a:	0650      	lsls	r0, r2, #25
   1836c:	f100 85b2 	bmi.w	18ed4 <_vfiprintf_r+0xf3c>
   18370:	9805      	ldr	r0, [sp, #20]
   18372:	b045      	add	sp, #276	; 0x114
   18374:	ecbd 8b02 	vpop	{d8}
   18378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1837c:	2900      	cmp	r1, #0
   1837e:	d0cb      	beq.n	18318 <_vfiprintf_r+0x380>
   18380:	2300      	movs	r3, #0
   18382:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   18386:	2301      	movs	r3, #1
   18388:	e9cd 3303 	strd	r3, r3, [sp, #12]
   1838c:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
   18390:	ac2b      	add	r4, sp, #172	; 0xac
   18392:	2300      	movs	r3, #0
   18394:	9308      	str	r3, [sp, #32]
   18396:	461f      	mov	r7, r3
   18398:	f016 0302 	ands.w	r3, r6, #2
   1839c:	9309      	str	r3, [sp, #36]	; 0x24
   1839e:	d002      	beq.n	183a6 <_vfiprintf_r+0x40e>
   183a0:	9b03      	ldr	r3, [sp, #12]
   183a2:	3302      	adds	r3, #2
   183a4:	9303      	str	r3, [sp, #12]
   183a6:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   183aa:	930a      	str	r3, [sp, #40]	; 0x28
   183ac:	d105      	bne.n	183ba <_vfiprintf_r+0x422>
   183ae:	9b06      	ldr	r3, [sp, #24]
   183b0:	9a03      	ldr	r2, [sp, #12]
   183b2:	1a9d      	subs	r5, r3, r2
   183b4:	2d00      	cmp	r5, #0
   183b6:	f300 827b 	bgt.w	188b0 <_vfiprintf_r+0x918>
   183ba:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   183be:	1c41      	adds	r1, r0, #1
   183c0:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   183c4:	b182      	cbz	r2, 183e8 <_vfiprintf_r+0x450>
   183c6:	2201      	movs	r2, #1
   183c8:	3301      	adds	r3, #1
   183ca:	f8c9 2004 	str.w	r2, [r9, #4]
   183ce:	2907      	cmp	r1, #7
   183d0:	f10d 0243 	add.w	r2, sp, #67	; 0x43
   183d4:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   183d8:	f8c9 2000 	str.w	r2, [r9]
   183dc:	f300 824a 	bgt.w	18874 <_vfiprintf_r+0x8dc>
   183e0:	4608      	mov	r0, r1
   183e2:	f109 0908 	add.w	r9, r9, #8
   183e6:	3101      	adds	r1, #1
   183e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   183ea:	b1e2      	cbz	r2, 18426 <_vfiprintf_r+0x48e>
   183ec:	aa11      	add	r2, sp, #68	; 0x44
   183ee:	3302      	adds	r3, #2
   183f0:	f8c9 2000 	str.w	r2, [r9]
   183f4:	2907      	cmp	r1, #7
   183f6:	f04f 0202 	mov.w	r2, #2
   183fa:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   183fe:	f8c9 2004 	str.w	r2, [r9, #4]
   18402:	f340 8250 	ble.w	188a6 <_vfiprintf_r+0x90e>
   18406:	2b00      	cmp	r3, #0
   18408:	f000 8343 	beq.w	18a92 <_vfiprintf_r+0xafa>
   1840c:	ee18 1a10 	vmov	r1, s16
   18410:	aa18      	add	r2, sp, #96	; 0x60
   18412:	4658      	mov	r0, fp
   18414:	f7ff fd84 	bl	17f20 <__sprint_r.part.0>
   18418:	2800      	cmp	r0, #0
   1841a:	d194      	bne.n	18346 <_vfiprintf_r+0x3ae>
   1841c:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   18420:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   18424:	1c41      	adds	r1, r0, #1
   18426:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   18428:	2a80      	cmp	r2, #128	; 0x80
   1842a:	f000 8184 	beq.w	18736 <_vfiprintf_r+0x79e>
   1842e:	9a04      	ldr	r2, [sp, #16]
   18430:	1abd      	subs	r5, r7, r2
   18432:	2d00      	cmp	r5, #0
   18434:	f300 81d7 	bgt.w	187e6 <_vfiprintf_r+0x84e>
   18438:	9a04      	ldr	r2, [sp, #16]
   1843a:	f8c9 4000 	str.w	r4, [r9]
   1843e:	4413      	add	r3, r2
   18440:	2907      	cmp	r1, #7
   18442:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   18446:	f8c9 2004 	str.w	r2, [r9, #4]
   1844a:	f340 816e 	ble.w	1872a <_vfiprintf_r+0x792>
   1844e:	2b00      	cmp	r3, #0
   18450:	f000 8275 	beq.w	1893e <_vfiprintf_r+0x9a6>
   18454:	ee18 1a10 	vmov	r1, s16
   18458:	aa18      	add	r2, sp, #96	; 0x60
   1845a:	4658      	mov	r0, fp
   1845c:	f7ff fd60 	bl	17f20 <__sprint_r.part.0>
   18460:	2800      	cmp	r0, #0
   18462:	f47f af70 	bne.w	18346 <_vfiprintf_r+0x3ae>
   18466:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   18468:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1846c:	0775      	lsls	r5, r6, #29
   1846e:	d505      	bpl.n	1847c <_vfiprintf_r+0x4e4>
   18470:	9a06      	ldr	r2, [sp, #24]
   18472:	9903      	ldr	r1, [sp, #12]
   18474:	1a54      	subs	r4, r2, r1
   18476:	2c00      	cmp	r4, #0
   18478:	f300 826b 	bgt.w	18952 <_vfiprintf_r+0x9ba>
   1847c:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   18480:	9803      	ldr	r0, [sp, #12]
   18482:	4281      	cmp	r1, r0
   18484:	bfac      	ite	ge
   18486:	1852      	addge	r2, r2, r1
   18488:	1812      	addlt	r2, r2, r0
   1848a:	9205      	str	r2, [sp, #20]
   1848c:	2b00      	cmp	r3, #0
   1848e:	f47f af51 	bne.w	18334 <_vfiprintf_r+0x39c>
   18492:	9908      	ldr	r1, [sp, #32]
   18494:	2300      	movs	r3, #0
   18496:	9319      	str	r3, [sp, #100]	; 0x64
   18498:	2900      	cmp	r1, #0
   1849a:	f000 8149 	beq.w	18730 <_vfiprintf_r+0x798>
   1849e:	4658      	mov	r0, fp
   184a0:	f7f9 fb40 	bl	11b24 <_free_r>
   184a4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   184a8:	e5c1      	b.n	1802e <_vfiprintf_r+0x96>
   184aa:	059c      	lsls	r4, r3, #22
   184ac:	f53f af5d 	bmi.w	1836a <_vfiprintf_r+0x3d2>
   184b0:	ee18 4a10 	vmov	r4, s16
   184b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   184b6:	f7f8 fffb 	bl	114b0 <__retarget_lock_release_recursive>
   184ba:	89a2      	ldrh	r2, [r4, #12]
   184bc:	e755      	b.n	1836a <_vfiprintf_r+0x3d2>
   184be:	06f0      	lsls	r0, r6, #27
   184c0:	9a07      	ldr	r2, [sp, #28]
   184c2:	f100 831f 	bmi.w	18b04 <_vfiprintf_r+0xb6c>
   184c6:	0671      	lsls	r1, r6, #25
   184c8:	f140 8319 	bpl.w	18afe <_vfiprintf_r+0xb66>
   184cc:	f932 3b04 	ldrsh.w	r3, [r2], #4
   184d0:	9207      	str	r2, [sp, #28]
   184d2:	17da      	asrs	r2, r3, #31
   184d4:	4611      	mov	r1, r2
   184d6:	e66e      	b.n	181b6 <_vfiprintf_r+0x21e>
   184d8:	f016 0310 	ands.w	r3, r6, #16
   184dc:	9907      	ldr	r1, [sp, #28]
   184de:	f040 8309 	bne.w	18af4 <_vfiprintf_r+0xb5c>
   184e2:	f016 0040 	ands.w	r0, r6, #64	; 0x40
   184e6:	f000 8301 	beq.w	18aec <_vfiprintf_r+0xb54>
   184ea:	461a      	mov	r2, r3
   184ec:	f851 3b04 	ldr.w	r3, [r1], #4
   184f0:	9107      	str	r1, [sp, #28]
   184f2:	b29b      	uxth	r3, r3
   184f4:	e6c3      	b.n	1827e <_vfiprintf_r+0x2e6>
   184f6:	9b07      	ldr	r3, [sp, #28]
   184f8:	461a      	mov	r2, r3
   184fa:	2300      	movs	r3, #0
   184fc:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   18500:	4613      	mov	r3, r2
   18502:	f853 4b04 	ldr.w	r4, [r3], #4
   18506:	9303      	str	r3, [sp, #12]
   18508:	2c00      	cmp	r4, #0
   1850a:	f000 8412 	beq.w	18d32 <_vfiprintf_r+0xd9a>
   1850e:	2953      	cmp	r1, #83	; 0x53
   18510:	f000 8365 	beq.w	18bde <_vfiprintf_r+0xc46>
   18514:	f016 0510 	ands.w	r5, r6, #16
   18518:	f040 8361 	bne.w	18bde <_vfiprintf_r+0xc46>
   1851c:	1c7b      	adds	r3, r7, #1
   1851e:	f000 84b3 	beq.w	18e88 <_vfiprintf_r+0xef0>
   18522:	463a      	mov	r2, r7
   18524:	4629      	mov	r1, r5
   18526:	4620      	mov	r0, r4
   18528:	f7f9 f99a 	bl	11860 <memchr>
   1852c:	9008      	str	r0, [sp, #32]
   1852e:	2800      	cmp	r0, #0
   18530:	f000 849f 	beq.w	18e72 <_vfiprintf_r+0xeda>
   18534:	1b03      	subs	r3, r0, r4
   18536:	9a03      	ldr	r2, [sp, #12]
   18538:	9304      	str	r3, [sp, #16]
   1853a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1853e:	462f      	mov	r7, r5
   18540:	9207      	str	r2, [sp, #28]
   18542:	9303      	str	r3, [sp, #12]
   18544:	9508      	str	r5, [sp, #32]
   18546:	e657      	b.n	181f8 <_vfiprintf_r+0x260>
   18548:	2943      	cmp	r1, #67	; 0x43
   1854a:	d002      	beq.n	18552 <_vfiprintf_r+0x5ba>
   1854c:	06f5      	lsls	r5, r6, #27
   1854e:	f140 832d 	bpl.w	18bac <_vfiprintf_r+0xc14>
   18552:	9d07      	ldr	r5, [sp, #28]
   18554:	2208      	movs	r2, #8
   18556:	2100      	movs	r1, #0
   18558:	a816      	add	r0, sp, #88	; 0x58
   1855a:	ac2b      	add	r4, sp, #172	; 0xac
   1855c:	f7f8 fd2a 	bl	10fb4 <memset>
   18560:	ab16      	add	r3, sp, #88	; 0x58
   18562:	f855 2b04 	ldr.w	r2, [r5], #4
   18566:	4621      	mov	r1, r4
   18568:	4658      	mov	r0, fp
   1856a:	f7ff fa77 	bl	17a5c <_wcrtomb_r>
   1856e:	4603      	mov	r3, r0
   18570:	3301      	adds	r3, #1
   18572:	9004      	str	r0, [sp, #16]
   18574:	f000 84b3 	beq.w	18ede <_vfiprintf_r+0xf46>
   18578:	9b04      	ldr	r3, [sp, #16]
   1857a:	9507      	str	r5, [sp, #28]
   1857c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   18580:	9303      	str	r3, [sp, #12]
   18582:	2300      	movs	r3, #0
   18584:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   18588:	e703      	b.n	18392 <_vfiprintf_r+0x3fa>
   1858a:	9b07      	ldr	r3, [sp, #28]
   1858c:	f853 2b04 	ldr.w	r2, [r3], #4
   18590:	9206      	str	r2, [sp, #24]
   18592:	2a00      	cmp	r2, #0
   18594:	f280 829c 	bge.w	18ad0 <_vfiprintf_r+0xb38>
   18598:	9a06      	ldr	r2, [sp, #24]
   1859a:	4252      	negs	r2, r2
   1859c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   185a0:	f898 1000 	ldrb.w	r1, [r8]
   185a4:	f046 0604 	orr.w	r6, r6, #4
   185a8:	e569      	b.n	1807e <_vfiprintf_r+0xe6>
   185aa:	f898 1000 	ldrb.w	r1, [r8]
   185ae:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
   185b2:	e564      	b.n	1807e <_vfiprintf_r+0xe6>
   185b4:	f898 1000 	ldrb.w	r1, [r8]
   185b8:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   185bc:	e55f      	b.n	1807e <_vfiprintf_r+0xe6>
   185be:	4642      	mov	r2, r8
   185c0:	f812 1b01 	ldrb.w	r1, [r2], #1
   185c4:	292a      	cmp	r1, #42	; 0x2a
   185c6:	f000 8496 	beq.w	18ef6 <_vfiprintf_r+0xf5e>
   185ca:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   185ce:	2b09      	cmp	r3, #9
   185d0:	4690      	mov	r8, r2
   185d2:	f04f 0700 	mov.w	r7, #0
   185d6:	f63f ad54 	bhi.w	18082 <_vfiprintf_r+0xea>
   185da:	f818 1b01 	ldrb.w	r1, [r8], #1
   185de:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   185e2:	eb03 0747 	add.w	r7, r3, r7, lsl #1
   185e6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   185ea:	2b09      	cmp	r3, #9
   185ec:	d9f5      	bls.n	185da <_vfiprintf_r+0x642>
   185ee:	e548      	b.n	18082 <_vfiprintf_r+0xea>
   185f0:	f898 1000 	ldrb.w	r1, [r8]
   185f4:	f046 0601 	orr.w	r6, r6, #1
   185f8:	e541      	b.n	1807e <_vfiprintf_r+0xe6>
   185fa:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   185fe:	2b00      	cmp	r3, #0
   18600:	f47f adc2 	bne.w	18188 <_vfiprintf_r+0x1f0>
   18604:	2320      	movs	r3, #32
   18606:	f898 1000 	ldrb.w	r1, [r8]
   1860a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   1860e:	e536      	b.n	1807e <_vfiprintf_r+0xe6>
   18610:	f898 1000 	ldrb.w	r1, [r8]
   18614:	296c      	cmp	r1, #108	; 0x6c
   18616:	bf03      	ittte	eq
   18618:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   1861c:	f046 0620 	orreq.w	r6, r6, #32
   18620:	f108 0801 	addeq.w	r8, r8, #1
   18624:	f046 0610 	orrne.w	r6, r6, #16
   18628:	e529      	b.n	1807e <_vfiprintf_r+0xe6>
   1862a:	f898 1000 	ldrb.w	r1, [r8]
   1862e:	2968      	cmp	r1, #104	; 0x68
   18630:	bf03      	ittte	eq
   18632:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   18636:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
   1863a:	f108 0801 	addeq.w	r8, r8, #1
   1863e:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
   18642:	e51c      	b.n	1807e <_vfiprintf_r+0xe6>
   18644:	f046 0310 	orr.w	r3, r6, #16
   18648:	9303      	str	r3, [sp, #12]
   1864a:	9b03      	ldr	r3, [sp, #12]
   1864c:	f013 0220 	ands.w	r2, r3, #32
   18650:	f000 8206 	beq.w	18a60 <_vfiprintf_r+0xac8>
   18654:	9b07      	ldr	r3, [sp, #28]
   18656:	3307      	adds	r3, #7
   18658:	f023 0307 	bic.w	r3, r3, #7
   1865c:	4619      	mov	r1, r3
   1865e:	685a      	ldr	r2, [r3, #4]
   18660:	f851 3b08 	ldr.w	r3, [r1], #8
   18664:	9107      	str	r1, [sp, #28]
   18666:	2101      	movs	r1, #1
   18668:	e60d      	b.n	18286 <_vfiprintf_r+0x2ee>
   1866a:	9a07      	ldr	r2, [sp, #28]
   1866c:	f046 0302 	orr.w	r3, r6, #2
   18670:	9303      	str	r3, [sp, #12]
   18672:	f852 3b04 	ldr.w	r3, [r2], #4
   18676:	9207      	str	r2, [sp, #28]
   18678:	f647 0230 	movw	r2, #30768	; 0x7830
   1867c:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
   18680:	4ab8      	ldr	r2, [pc, #736]	; (18964 <_vfiprintf_r+0x9cc>)
   18682:	920c      	str	r2, [sp, #48]	; 0x30
   18684:	2102      	movs	r1, #2
   18686:	2200      	movs	r2, #0
   18688:	e5fd      	b.n	18286 <_vfiprintf_r+0x2ee>
   1868a:	06b7      	lsls	r7, r6, #26
   1868c:	f100 8248 	bmi.w	18b20 <_vfiprintf_r+0xb88>
   18690:	06f5      	lsls	r5, r6, #27
   18692:	f100 8346 	bmi.w	18d22 <_vfiprintf_r+0xd8a>
   18696:	0674      	lsls	r4, r6, #25
   18698:	f100 83d5 	bmi.w	18e46 <_vfiprintf_r+0xeae>
   1869c:	05b0      	lsls	r0, r6, #22
   1869e:	f140 8340 	bpl.w	18d22 <_vfiprintf_r+0xd8a>
   186a2:	9b07      	ldr	r3, [sp, #28]
   186a4:	9905      	ldr	r1, [sp, #20]
   186a6:	f853 2b04 	ldr.w	r2, [r3], #4
   186aa:	9307      	str	r3, [sp, #28]
   186ac:	7011      	strb	r1, [r2, #0]
   186ae:	e4be      	b.n	1802e <_vfiprintf_r+0x96>
   186b0:	9603      	str	r6, [sp, #12]
   186b2:	2901      	cmp	r1, #1
   186b4:	f43f ad8c 	beq.w	181d0 <_vfiprintf_r+0x238>
   186b8:	2902      	cmp	r1, #2
   186ba:	ac44      	add	r4, sp, #272	; 0x110
   186bc:	d111      	bne.n	186e2 <_vfiprintf_r+0x74a>
   186be:	980c      	ldr	r0, [sp, #48]	; 0x30
   186c0:	f003 010f 	and.w	r1, r3, #15
   186c4:	091b      	lsrs	r3, r3, #4
   186c6:	5c41      	ldrb	r1, [r0, r1]
   186c8:	f804 1d01 	strb.w	r1, [r4, #-1]!
   186cc:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   186d0:	0912      	lsrs	r2, r2, #4
   186d2:	ea53 0102 	orrs.w	r1, r3, r2
   186d6:	d1f3      	bne.n	186c0 <_vfiprintf_r+0x728>
   186d8:	9e03      	ldr	r6, [sp, #12]
   186da:	ab44      	add	r3, sp, #272	; 0x110
   186dc:	1b1b      	subs	r3, r3, r4
   186de:	9304      	str	r3, [sp, #16]
   186e0:	e583      	b.n	181ea <_vfiprintf_r+0x252>
   186e2:	f003 0107 	and.w	r1, r3, #7
   186e6:	08db      	lsrs	r3, r3, #3
   186e8:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   186ec:	08d2      	lsrs	r2, r2, #3
   186ee:	3130      	adds	r1, #48	; 0x30
   186f0:	ea53 0502 	orrs.w	r5, r3, r2
   186f4:	4620      	mov	r0, r4
   186f6:	f804 1d01 	strb.w	r1, [r4, #-1]!
   186fa:	d1f2      	bne.n	186e2 <_vfiprintf_r+0x74a>
   186fc:	9e03      	ldr	r6, [sp, #12]
   186fe:	07f3      	lsls	r3, r6, #31
   18700:	d5eb      	bpl.n	186da <_vfiprintf_r+0x742>
   18702:	2930      	cmp	r1, #48	; 0x30
   18704:	d0e8      	beq.n	186d8 <_vfiprintf_r+0x740>
   18706:	2330      	movs	r3, #48	; 0x30
   18708:	3802      	subs	r0, #2
   1870a:	f804 3c01 	strb.w	r3, [r4, #-1]
   1870e:	ab44      	add	r3, sp, #272	; 0x110
   18710:	1a1b      	subs	r3, r3, r0
   18712:	9e03      	ldr	r6, [sp, #12]
   18714:	9304      	str	r3, [sp, #16]
   18716:	4604      	mov	r4, r0
   18718:	e567      	b.n	181ea <_vfiprintf_r+0x252>
   1871a:	9b04      	ldr	r3, [sp, #16]
   1871c:	941b      	str	r4, [sp, #108]	; 0x6c
   1871e:	2201      	movs	r2, #1
   18720:	931c      	str	r3, [sp, #112]	; 0x70
   18722:	931a      	str	r3, [sp, #104]	; 0x68
   18724:	9219      	str	r2, [sp, #100]	; 0x64
   18726:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1872a:	f109 0908 	add.w	r9, r9, #8
   1872e:	e69d      	b.n	1846c <_vfiprintf_r+0x4d4>
   18730:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   18734:	e47b      	b.n	1802e <_vfiprintf_r+0x96>
   18736:	9a06      	ldr	r2, [sp, #24]
   18738:	9d03      	ldr	r5, [sp, #12]
   1873a:	1b55      	subs	r5, r2, r5
   1873c:	2d00      	cmp	r5, #0
   1873e:	f77f ae76 	ble.w	1842e <_vfiprintf_r+0x496>
   18742:	2d10      	cmp	r5, #16
   18744:	f340 83bb 	ble.w	18ebe <_vfiprintf_r+0xf26>
   18748:	9409      	str	r4, [sp, #36]	; 0x24
   1874a:	ee18 4a10 	vmov	r4, s16
   1874e:	e007      	b.n	18760 <_vfiprintf_r+0x7c8>
   18750:	f100 0c02 	add.w	ip, r0, #2
   18754:	f109 0908 	add.w	r9, r9, #8
   18758:	4610      	mov	r0, r2
   1875a:	3d10      	subs	r5, #16
   1875c:	2d10      	cmp	r5, #16
   1875e:	dd1e      	ble.n	1879e <_vfiprintf_r+0x806>
   18760:	4981      	ldr	r1, [pc, #516]	; (18968 <_vfiprintf_r+0x9d0>)
   18762:	f8c9 1000 	str.w	r1, [r9]
   18766:	1c42      	adds	r2, r0, #1
   18768:	3310      	adds	r3, #16
   1876a:	2110      	movs	r1, #16
   1876c:	2a07      	cmp	r2, #7
   1876e:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   18772:	f8c9 1004 	str.w	r1, [r9, #4]
   18776:	ddeb      	ble.n	18750 <_vfiprintf_r+0x7b8>
   18778:	aa18      	add	r2, sp, #96	; 0x60
   1877a:	2b00      	cmp	r3, #0
   1877c:	d074      	beq.n	18868 <_vfiprintf_r+0x8d0>
   1877e:	4621      	mov	r1, r4
   18780:	4658      	mov	r0, fp
   18782:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   18786:	f7ff fbcb 	bl	17f20 <__sprint_r.part.0>
   1878a:	2800      	cmp	r0, #0
   1878c:	f47f addb 	bne.w	18346 <_vfiprintf_r+0x3ae>
   18790:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   18794:	3d10      	subs	r5, #16
   18796:	2d10      	cmp	r5, #16
   18798:	f100 0c01 	add.w	ip, r0, #1
   1879c:	dce0      	bgt.n	18760 <_vfiprintf_r+0x7c8>
   1879e:	9c09      	ldr	r4, [sp, #36]	; 0x24
   187a0:	4a71      	ldr	r2, [pc, #452]	; (18968 <_vfiprintf_r+0x9d0>)
   187a2:	f8c9 5004 	str.w	r5, [r9, #4]
   187a6:	442b      	add	r3, r5
   187a8:	f1bc 0f07 	cmp.w	ip, #7
   187ac:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
   187b0:	f8c9 2000 	str.w	r2, [r9]
   187b4:	f340 8194 	ble.w	18ae0 <_vfiprintf_r+0xb48>
   187b8:	2b00      	cmp	r3, #0
   187ba:	f000 831f 	beq.w	18dfc <_vfiprintf_r+0xe64>
   187be:	ee18 1a10 	vmov	r1, s16
   187c2:	aa18      	add	r2, sp, #96	; 0x60
   187c4:	4658      	mov	r0, fp
   187c6:	f7ff fbab 	bl	17f20 <__sprint_r.part.0>
   187ca:	2800      	cmp	r0, #0
   187cc:	f47f adbb 	bne.w	18346 <_vfiprintf_r+0x3ae>
   187d0:	9a04      	ldr	r2, [sp, #16]
   187d2:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   187d6:	1abd      	subs	r5, r7, r2
   187d8:	2d00      	cmp	r5, #0
   187da:	f100 0101 	add.w	r1, r0, #1
   187de:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   187e2:	f77f ae29 	ble.w	18438 <_vfiprintf_r+0x4a0>
   187e6:	2d10      	cmp	r5, #16
   187e8:	dd29      	ble.n	1883e <_vfiprintf_r+0x8a6>
   187ea:	9409      	str	r4, [sp, #36]	; 0x24
   187ec:	2710      	movs	r7, #16
   187ee:	ee18 4a10 	vmov	r4, s16
   187f2:	e007      	b.n	18804 <_vfiprintf_r+0x86c>
   187f4:	f100 0c02 	add.w	ip, r0, #2
   187f8:	f109 0908 	add.w	r9, r9, #8
   187fc:	4610      	mov	r0, r2
   187fe:	3d10      	subs	r5, #16
   18800:	2d10      	cmp	r5, #16
   18802:	dd1a      	ble.n	1883a <_vfiprintf_r+0x8a2>
   18804:	1c42      	adds	r2, r0, #1
   18806:	4958      	ldr	r1, [pc, #352]	; (18968 <_vfiprintf_r+0x9d0>)
   18808:	3310      	adds	r3, #16
   1880a:	2a07      	cmp	r2, #7
   1880c:	e9c9 1700 	strd	r1, r7, [r9]
   18810:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   18814:	ddee      	ble.n	187f4 <_vfiprintf_r+0x85c>
   18816:	aa18      	add	r2, sp, #96	; 0x60
   18818:	b303      	cbz	r3, 1885c <_vfiprintf_r+0x8c4>
   1881a:	4621      	mov	r1, r4
   1881c:	4658      	mov	r0, fp
   1881e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   18822:	f7ff fb7d 	bl	17f20 <__sprint_r.part.0>
   18826:	2800      	cmp	r0, #0
   18828:	f47f ad8d 	bne.w	18346 <_vfiprintf_r+0x3ae>
   1882c:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   18830:	3d10      	subs	r5, #16
   18832:	2d10      	cmp	r5, #16
   18834:	f100 0c01 	add.w	ip, r0, #1
   18838:	dce4      	bgt.n	18804 <_vfiprintf_r+0x86c>
   1883a:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1883c:	4661      	mov	r1, ip
   1883e:	4a4a      	ldr	r2, [pc, #296]	; (18968 <_vfiprintf_r+0x9d0>)
   18840:	f8c9 5004 	str.w	r5, [r9, #4]
   18844:	442b      	add	r3, r5
   18846:	2907      	cmp	r1, #7
   18848:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   1884c:	f8c9 2000 	str.w	r2, [r9]
   18850:	f300 80e7 	bgt.w	18a22 <_vfiprintf_r+0xa8a>
   18854:	f109 0908 	add.w	r9, r9, #8
   18858:	3101      	adds	r1, #1
   1885a:	e5ed      	b.n	18438 <_vfiprintf_r+0x4a0>
   1885c:	f04f 0c01 	mov.w	ip, #1
   18860:	4618      	mov	r0, r3
   18862:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   18866:	e7ca      	b.n	187fe <_vfiprintf_r+0x866>
   18868:	f04f 0c01 	mov.w	ip, #1
   1886c:	4618      	mov	r0, r3
   1886e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   18872:	e772      	b.n	1875a <_vfiprintf_r+0x7c2>
   18874:	2b00      	cmp	r3, #0
   18876:	f000 8104 	beq.w	18a82 <_vfiprintf_r+0xaea>
   1887a:	ee18 1a10 	vmov	r1, s16
   1887e:	aa18      	add	r2, sp, #96	; 0x60
   18880:	4658      	mov	r0, fp
   18882:	f7ff fb4d 	bl	17f20 <__sprint_r.part.0>
   18886:	2800      	cmp	r0, #0
   18888:	f47f ad5d 	bne.w	18346 <_vfiprintf_r+0x3ae>
   1888c:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   18890:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   18894:	1c41      	adds	r1, r0, #1
   18896:	e5a7      	b.n	183e8 <_vfiprintf_r+0x450>
   18898:	2302      	movs	r3, #2
   1889a:	aa11      	add	r2, sp, #68	; 0x44
   1889c:	931c      	str	r3, [sp, #112]	; 0x70
   1889e:	921b      	str	r2, [sp, #108]	; 0x6c
   188a0:	2101      	movs	r1, #1
   188a2:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   188a6:	4608      	mov	r0, r1
   188a8:	f109 0908 	add.w	r9, r9, #8
   188ac:	1c41      	adds	r1, r0, #1
   188ae:	e5ba      	b.n	18426 <_vfiprintf_r+0x48e>
   188b0:	2d10      	cmp	r5, #16
   188b2:	f340 82e5 	ble.w	18e80 <_vfiprintf_r+0xee8>
   188b6:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   188ba:	940f      	str	r4, [sp, #60]	; 0x3c
   188bc:	4608      	mov	r0, r1
   188be:	ee18 4a10 	vmov	r4, s16
   188c2:	e007      	b.n	188d4 <_vfiprintf_r+0x93c>
   188c4:	f100 0c02 	add.w	ip, r0, #2
   188c8:	f109 0908 	add.w	r9, r9, #8
   188cc:	4610      	mov	r0, r2
   188ce:	3d10      	subs	r5, #16
   188d0:	2d10      	cmp	r5, #16
   188d2:	dd1d      	ble.n	18910 <_vfiprintf_r+0x978>
   188d4:	4925      	ldr	r1, [pc, #148]	; (1896c <_vfiprintf_r+0x9d4>)
   188d6:	f8c9 1000 	str.w	r1, [r9]
   188da:	1c42      	adds	r2, r0, #1
   188dc:	3310      	adds	r3, #16
   188de:	2110      	movs	r1, #16
   188e0:	2a07      	cmp	r2, #7
   188e2:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   188e6:	f8c9 1004 	str.w	r1, [r9, #4]
   188ea:	ddeb      	ble.n	188c4 <_vfiprintf_r+0x92c>
   188ec:	aa18      	add	r2, sp, #96	; 0x60
   188ee:	b303      	cbz	r3, 18932 <_vfiprintf_r+0x99a>
   188f0:	4621      	mov	r1, r4
   188f2:	4658      	mov	r0, fp
   188f4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   188f8:	f7ff fb12 	bl	17f20 <__sprint_r.part.0>
   188fc:	2800      	cmp	r0, #0
   188fe:	f47f ad22 	bne.w	18346 <_vfiprintf_r+0x3ae>
   18902:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   18906:	3d10      	subs	r5, #16
   18908:	2d10      	cmp	r5, #16
   1890a:	f100 0c01 	add.w	ip, r0, #1
   1890e:	dce1      	bgt.n	188d4 <_vfiprintf_r+0x93c>
   18910:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   18912:	4660      	mov	r0, ip
   18914:	4a15      	ldr	r2, [pc, #84]	; (1896c <_vfiprintf_r+0x9d4>)
   18916:	f8c9 5004 	str.w	r5, [r9, #4]
   1891a:	442b      	add	r3, r5
   1891c:	2807      	cmp	r0, #7
   1891e:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   18922:	f8c9 2000 	str.w	r2, [r9]
   18926:	f300 80c1 	bgt.w	18aac <_vfiprintf_r+0xb14>
   1892a:	f109 0908 	add.w	r9, r9, #8
   1892e:	1c41      	adds	r1, r0, #1
   18930:	e546      	b.n	183c0 <_vfiprintf_r+0x428>
   18932:	4618      	mov	r0, r3
   18934:	f04f 0c01 	mov.w	ip, #1
   18938:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1893c:	e7c7      	b.n	188ce <_vfiprintf_r+0x936>
   1893e:	0776      	lsls	r6, r6, #29
   18940:	9319      	str	r3, [sp, #100]	; 0x64
   18942:	d553      	bpl.n	189ec <_vfiprintf_r+0xa54>
   18944:	9a06      	ldr	r2, [sp, #24]
   18946:	9903      	ldr	r1, [sp, #12]
   18948:	1a54      	subs	r4, r2, r1
   1894a:	2c00      	cmp	r4, #0
   1894c:	dd4e      	ble.n	189ec <_vfiprintf_r+0xa54>
   1894e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   18952:	2c10      	cmp	r4, #16
   18954:	f340 82b0 	ble.w	18eb8 <_vfiprintf_r+0xf20>
   18958:	9919      	ldr	r1, [sp, #100]	; 0x64
   1895a:	ee18 6a10 	vmov	r6, s16
   1895e:	2510      	movs	r5, #16
   18960:	e00d      	b.n	1897e <_vfiprintf_r+0x9e6>
   18962:	bf00      	nop
   18964:	20003838 	.word	0x20003838
   18968:	2000bb34 	.word	0x2000bb34
   1896c:	200052f4 	.word	0x200052f4
   18970:	1c88      	adds	r0, r1, #2
   18972:	f109 0908 	add.w	r9, r9, #8
   18976:	4611      	mov	r1, r2
   18978:	3c10      	subs	r4, #16
   1897a:	2c10      	cmp	r4, #16
   1897c:	dd1a      	ble.n	189b4 <_vfiprintf_r+0xa1c>
   1897e:	1c4a      	adds	r2, r1, #1
   18980:	48b3      	ldr	r0, [pc, #716]	; (18c50 <_vfiprintf_r+0xcb8>)
   18982:	3310      	adds	r3, #16
   18984:	2a07      	cmp	r2, #7
   18986:	e9c9 0500 	strd	r0, r5, [r9]
   1898a:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   1898e:	ddef      	ble.n	18970 <_vfiprintf_r+0x9d8>
   18990:	aa18      	add	r2, sp, #96	; 0x60
   18992:	b333      	cbz	r3, 189e2 <_vfiprintf_r+0xa4a>
   18994:	4631      	mov	r1, r6
   18996:	4658      	mov	r0, fp
   18998:	f7ff fac2 	bl	17f20 <__sprint_r.part.0>
   1899c:	2800      	cmp	r0, #0
   1899e:	f47f acd2 	bne.w	18346 <_vfiprintf_r+0x3ae>
   189a2:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   189a6:	3c10      	subs	r4, #16
   189a8:	2c10      	cmp	r4, #16
   189aa:	f101 0001 	add.w	r0, r1, #1
   189ae:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   189b2:	dce4      	bgt.n	1897e <_vfiprintf_r+0x9e6>
   189b4:	4aa6      	ldr	r2, [pc, #664]	; (18c50 <_vfiprintf_r+0xcb8>)
   189b6:	f8c9 4004 	str.w	r4, [r9, #4]
   189ba:	4423      	add	r3, r4
   189bc:	2807      	cmp	r0, #7
   189be:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   189c2:	f8c9 2000 	str.w	r2, [r9]
   189c6:	f77f ad59 	ble.w	1847c <_vfiprintf_r+0x4e4>
   189ca:	b17b      	cbz	r3, 189ec <_vfiprintf_r+0xa54>
   189cc:	ee18 1a10 	vmov	r1, s16
   189d0:	aa18      	add	r2, sp, #96	; 0x60
   189d2:	4658      	mov	r0, fp
   189d4:	f7ff faa4 	bl	17f20 <__sprint_r.part.0>
   189d8:	2800      	cmp	r0, #0
   189da:	f47f acb4 	bne.w	18346 <_vfiprintf_r+0x3ae>
   189de:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   189e0:	e54c      	b.n	1847c <_vfiprintf_r+0x4e4>
   189e2:	2001      	movs	r0, #1
   189e4:	4619      	mov	r1, r3
   189e6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   189ea:	e7c5      	b.n	18978 <_vfiprintf_r+0x9e0>
   189ec:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   189f0:	9903      	ldr	r1, [sp, #12]
   189f2:	428a      	cmp	r2, r1
   189f4:	bfac      	ite	ge
   189f6:	189b      	addge	r3, r3, r2
   189f8:	185b      	addlt	r3, r3, r1
   189fa:	9305      	str	r3, [sp, #20]
   189fc:	e549      	b.n	18492 <_vfiprintf_r+0x4fa>
   189fe:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   18a02:	058f      	lsls	r7, r1, #22
   18a04:	ee18 3a10 	vmov	r3, s16
   18a08:	b28a      	uxth	r2, r1
   18a0a:	f53f aae8 	bmi.w	17fde <_vfiprintf_r+0x46>
   18a0e:	ee18 5a10 	vmov	r5, s16
   18a12:	6d98      	ldr	r0, [r3, #88]	; 0x58
   18a14:	f7f8 fd4a 	bl	114ac <__retarget_lock_acquire_recursive>
   18a18:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   18a1c:	b28a      	uxth	r2, r1
   18a1e:	f7ff bade 	b.w	17fde <_vfiprintf_r+0x46>
   18a22:	2b00      	cmp	r3, #0
   18a24:	f43f ae79 	beq.w	1871a <_vfiprintf_r+0x782>
   18a28:	ee18 1a10 	vmov	r1, s16
   18a2c:	aa18      	add	r2, sp, #96	; 0x60
   18a2e:	4658      	mov	r0, fp
   18a30:	f7ff fa76 	bl	17f20 <__sprint_r.part.0>
   18a34:	2800      	cmp	r0, #0
   18a36:	f47f ac86 	bne.w	18346 <_vfiprintf_r+0x3ae>
   18a3a:	9919      	ldr	r1, [sp, #100]	; 0x64
   18a3c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   18a3e:	3101      	adds	r1, #1
   18a40:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   18a44:	e4f8      	b.n	18438 <_vfiprintf_r+0x4a0>
   18a46:	9219      	str	r2, [sp, #100]	; 0x64
   18a48:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   18a4c:	e45e      	b.n	1830c <_vfiprintf_r+0x374>
   18a4e:	2f00      	cmp	r7, #0
   18a50:	f47f abc3 	bne.w	181da <_vfiprintf_r+0x242>
   18a54:	9e03      	ldr	r6, [sp, #12]
   18a56:	2700      	movs	r7, #0
   18a58:	9704      	str	r7, [sp, #16]
   18a5a:	ac44      	add	r4, sp, #272	; 0x110
   18a5c:	f7ff bbc5 	b.w	181ea <_vfiprintf_r+0x252>
   18a60:	9b03      	ldr	r3, [sp, #12]
   18a62:	f013 0310 	ands.w	r3, r3, #16
   18a66:	d154      	bne.n	18b12 <_vfiprintf_r+0xb7a>
   18a68:	9a03      	ldr	r2, [sp, #12]
   18a6a:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   18a6e:	f000 816b 	beq.w	18d48 <_vfiprintf_r+0xdb0>
   18a72:	9907      	ldr	r1, [sp, #28]
   18a74:	461a      	mov	r2, r3
   18a76:	f851 3b04 	ldr.w	r3, [r1], #4
   18a7a:	9107      	str	r1, [sp, #28]
   18a7c:	b29b      	uxth	r3, r3
   18a7e:	2101      	movs	r1, #1
   18a80:	e401      	b.n	18286 <_vfiprintf_r+0x2ee>
   18a82:	9a09      	ldr	r2, [sp, #36]	; 0x24
   18a84:	2a00      	cmp	r2, #0
   18a86:	d164      	bne.n	18b52 <_vfiprintf_r+0xbba>
   18a88:	4618      	mov	r0, r3
   18a8a:	2101      	movs	r1, #1
   18a8c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   18a90:	e4c9      	b.n	18426 <_vfiprintf_r+0x48e>
   18a92:	2101      	movs	r1, #1
   18a94:	4618      	mov	r0, r3
   18a96:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   18a9a:	e4c4      	b.n	18426 <_vfiprintf_r+0x48e>
   18a9c:	425b      	negs	r3, r3
   18a9e:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   18aa2:	9603      	str	r6, [sp, #12]
   18aa4:	202d      	movs	r0, #45	; 0x2d
   18aa6:	2101      	movs	r1, #1
   18aa8:	f7ff bbee 	b.w	18288 <_vfiprintf_r+0x2f0>
   18aac:	2b00      	cmp	r3, #0
   18aae:	f000 8088 	beq.w	18bc2 <_vfiprintf_r+0xc2a>
   18ab2:	ee18 1a10 	vmov	r1, s16
   18ab6:	aa18      	add	r2, sp, #96	; 0x60
   18ab8:	4658      	mov	r0, fp
   18aba:	f7ff fa31 	bl	17f20 <__sprint_r.part.0>
   18abe:	2800      	cmp	r0, #0
   18ac0:	f47f ac41 	bne.w	18346 <_vfiprintf_r+0x3ae>
   18ac4:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   18ac8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   18acc:	1c41      	adds	r1, r0, #1
   18ace:	e477      	b.n	183c0 <_vfiprintf_r+0x428>
   18ad0:	f898 1000 	ldrb.w	r1, [r8]
   18ad4:	9307      	str	r3, [sp, #28]
   18ad6:	f7ff bad2 	b.w	1807e <_vfiprintf_r+0xe6>
   18ada:	ac44      	add	r4, sp, #272	; 0x110
   18adc:	f7ff bb85 	b.w	181ea <_vfiprintf_r+0x252>
   18ae0:	f109 0908 	add.w	r9, r9, #8
   18ae4:	f10c 0101 	add.w	r1, ip, #1
   18ae8:	4660      	mov	r0, ip
   18aea:	e4a0      	b.n	1842e <_vfiprintf_r+0x496>
   18aec:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   18af0:	f040 8197 	bne.w	18e22 <_vfiprintf_r+0xe8a>
   18af4:	f851 3b04 	ldr.w	r3, [r1], #4
   18af8:	9107      	str	r1, [sp, #28]
   18afa:	f7ff bbc0 	b.w	1827e <_vfiprintf_r+0x2e6>
   18afe:	05b3      	lsls	r3, r6, #22
   18b00:	f100 8188 	bmi.w	18e14 <_vfiprintf_r+0xe7c>
   18b04:	f852 3b04 	ldr.w	r3, [r2], #4
   18b08:	9207      	str	r2, [sp, #28]
   18b0a:	17da      	asrs	r2, r3, #31
   18b0c:	4611      	mov	r1, r2
   18b0e:	f7ff bb52 	b.w	181b6 <_vfiprintf_r+0x21e>
   18b12:	9907      	ldr	r1, [sp, #28]
   18b14:	f851 3b04 	ldr.w	r3, [r1], #4
   18b18:	9107      	str	r1, [sp, #28]
   18b1a:	2101      	movs	r1, #1
   18b1c:	f7ff bbb3 	b.w	18286 <_vfiprintf_r+0x2ee>
   18b20:	9b07      	ldr	r3, [sp, #28]
   18b22:	9805      	ldr	r0, [sp, #20]
   18b24:	f853 1b04 	ldr.w	r1, [r3], #4
   18b28:	9307      	str	r3, [sp, #28]
   18b2a:	17c2      	asrs	r2, r0, #31
   18b2c:	e9c1 0200 	strd	r0, r2, [r1]
   18b30:	f7ff ba7d 	b.w	1802e <_vfiprintf_r+0x96>
   18b34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   18b36:	2b00      	cmp	r3, #0
   18b38:	f43f ab26 	beq.w	18188 <_vfiprintf_r+0x1f0>
   18b3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   18b3e:	781b      	ldrb	r3, [r3, #0]
   18b40:	2b00      	cmp	r3, #0
   18b42:	f43f ab21 	beq.w	18188 <_vfiprintf_r+0x1f0>
   18b46:	f898 1000 	ldrb.w	r1, [r8]
   18b4a:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   18b4e:	f7ff ba96 	b.w	1807e <_vfiprintf_r+0xe6>
   18b52:	2302      	movs	r3, #2
   18b54:	aa11      	add	r2, sp, #68	; 0x44
   18b56:	931c      	str	r3, [sp, #112]	; 0x70
   18b58:	921b      	str	r2, [sp, #108]	; 0x6c
   18b5a:	2001      	movs	r0, #1
   18b5c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   18b60:	e6a2      	b.n	188a8 <_vfiprintf_r+0x910>
   18b62:	9603      	str	r6, [sp, #12]
   18b64:	e571      	b.n	1864a <_vfiprintf_r+0x6b2>
   18b66:	4b3b      	ldr	r3, [pc, #236]	; (18c54 <_vfiprintf_r+0xcbc>)
   18b68:	930c      	str	r3, [sp, #48]	; 0x30
   18b6a:	f016 0220 	ands.w	r2, r6, #32
   18b6e:	d059      	beq.n	18c24 <_vfiprintf_r+0xc8c>
   18b70:	9b07      	ldr	r3, [sp, #28]
   18b72:	3307      	adds	r3, #7
   18b74:	f023 0307 	bic.w	r3, r3, #7
   18b78:	4618      	mov	r0, r3
   18b7a:	685a      	ldr	r2, [r3, #4]
   18b7c:	f850 3b08 	ldr.w	r3, [r0], #8
   18b80:	9007      	str	r0, [sp, #28]
   18b82:	07f4      	lsls	r4, r6, #31
   18b84:	d509      	bpl.n	18b9a <_vfiprintf_r+0xc02>
   18b86:	ea53 0002 	orrs.w	r0, r3, r2
   18b8a:	d006      	beq.n	18b9a <_vfiprintf_r+0xc02>
   18b8c:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
   18b90:	2130      	movs	r1, #48	; 0x30
   18b92:	f046 0602 	orr.w	r6, r6, #2
   18b96:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
   18b9a:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   18b9e:	9103      	str	r1, [sp, #12]
   18ba0:	2102      	movs	r1, #2
   18ba2:	f7ff bb70 	b.w	18286 <_vfiprintf_r+0x2ee>
   18ba6:	4b2c      	ldr	r3, [pc, #176]	; (18c58 <_vfiprintf_r+0xcc0>)
   18ba8:	930c      	str	r3, [sp, #48]	; 0x30
   18baa:	e7de      	b.n	18b6a <_vfiprintf_r+0xbd2>
   18bac:	9b07      	ldr	r3, [sp, #28]
   18bae:	2101      	movs	r1, #1
   18bb0:	f853 2b04 	ldr.w	r2, [r3], #4
   18bb4:	9103      	str	r1, [sp, #12]
   18bb6:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   18bba:	9307      	str	r3, [sp, #28]
   18bbc:	9104      	str	r1, [sp, #16]
   18bbe:	ac2b      	add	r4, sp, #172	; 0xac
   18bc0:	e4df      	b.n	18582 <_vfiprintf_r+0x5ea>
   18bc2:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   18bc6:	2a00      	cmp	r2, #0
   18bc8:	f040 8132 	bne.w	18e30 <_vfiprintf_r+0xe98>
   18bcc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   18bce:	2a00      	cmp	r2, #0
   18bd0:	f47f ae62 	bne.w	18898 <_vfiprintf_r+0x900>
   18bd4:	4618      	mov	r0, r3
   18bd6:	2101      	movs	r1, #1
   18bd8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   18bdc:	e427      	b.n	1842e <_vfiprintf_r+0x496>
   18bde:	2100      	movs	r1, #0
   18be0:	2208      	movs	r2, #8
   18be2:	a816      	add	r0, sp, #88	; 0x58
   18be4:	9413      	str	r4, [sp, #76]	; 0x4c
   18be6:	f7f8 f9e5 	bl	10fb4 <memset>
   18bea:	1c79      	adds	r1, r7, #1
   18bec:	f000 80bc 	beq.w	18d68 <_vfiprintf_r+0xdd0>
   18bf0:	2500      	movs	r5, #0
   18bf2:	9407      	str	r4, [sp, #28]
   18bf4:	462c      	mov	r4, r5
   18bf6:	e00c      	b.n	18c12 <_vfiprintf_r+0xc7a>
   18bf8:	a92b      	add	r1, sp, #172	; 0xac
   18bfa:	4658      	mov	r0, fp
   18bfc:	f7fe ff2e 	bl	17a5c <_wcrtomb_r>
   18c00:	1c42      	adds	r2, r0, #1
   18c02:	4420      	add	r0, r4
   18c04:	f000 816b 	beq.w	18ede <_vfiprintf_r+0xf46>
   18c08:	42b8      	cmp	r0, r7
   18c0a:	dc08      	bgt.n	18c1e <_vfiprintf_r+0xc86>
   18c0c:	f000 8170 	beq.w	18ef0 <_vfiprintf_r+0xf58>
   18c10:	4604      	mov	r4, r0
   18c12:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   18c14:	5952      	ldr	r2, [r2, r5]
   18c16:	ab16      	add	r3, sp, #88	; 0x58
   18c18:	3504      	adds	r5, #4
   18c1a:	2a00      	cmp	r2, #0
   18c1c:	d1ec      	bne.n	18bf8 <_vfiprintf_r+0xc60>
   18c1e:	9404      	str	r4, [sp, #16]
   18c20:	9c07      	ldr	r4, [sp, #28]
   18c22:	e0af      	b.n	18d84 <_vfiprintf_r+0xdec>
   18c24:	f016 0310 	ands.w	r3, r6, #16
   18c28:	9807      	ldr	r0, [sp, #28]
   18c2a:	d10c      	bne.n	18c46 <_vfiprintf_r+0xcae>
   18c2c:	f016 0440 	ands.w	r4, r6, #64	; 0x40
   18c30:	d005      	beq.n	18c3e <_vfiprintf_r+0xca6>
   18c32:	461a      	mov	r2, r3
   18c34:	f850 3b04 	ldr.w	r3, [r0], #4
   18c38:	9007      	str	r0, [sp, #28]
   18c3a:	b29b      	uxth	r3, r3
   18c3c:	e7a1      	b.n	18b82 <_vfiprintf_r+0xbea>
   18c3e:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   18c42:	f040 80e1 	bne.w	18e08 <_vfiprintf_r+0xe70>
   18c46:	f850 3b04 	ldr.w	r3, [r0], #4
   18c4a:	9007      	str	r0, [sp, #28]
   18c4c:	e799      	b.n	18b82 <_vfiprintf_r+0xbea>
   18c4e:	bf00      	nop
   18c50:	200052f4 	.word	0x200052f4
   18c54:	20003838 	.word	0x20003838
   18c58:	2000384c 	.word	0x2000384c
   18c5c:	9903      	ldr	r1, [sp, #12]
   18c5e:	9704      	str	r7, [sp, #16]
   18c60:	ac44      	add	r4, sp, #272	; 0x110
   18c62:	469e      	mov	lr, r3
   18c64:	ee08 ba90 	vmov	s17, fp
   18c68:	f401 6680 	and.w	r6, r1, #1024	; 0x400
   18c6c:	f04f 0c00 	mov.w	ip, #0
   18c70:	4623      	mov	r3, r4
   18c72:	e006      	b.n	18c82 <_vfiprintf_r+0xcea>
   18c74:	f1be 0f0a 	cmp.w	lr, #10
   18c78:	f172 0200 	sbcs.w	r2, r2, #0
   18c7c:	d339      	bcc.n	18cf2 <_vfiprintf_r+0xd5a>
   18c7e:	46a6      	mov	lr, r4
   18c80:	462a      	mov	r2, r5
   18c82:	49a6      	ldr	r1, [pc, #664]	; (18f1c <_vfiprintf_r+0xf84>)
   18c84:	eb1e 0002 	adds.w	r0, lr, r2
   18c88:	f140 0000 	adc.w	r0, r0, #0
   18c8c:	460f      	mov	r7, r1
   18c8e:	fba1 1400 	umull	r1, r4, r1, r0
   18c92:	f024 0103 	bic.w	r1, r4, #3
   18c96:	eb01 0194 	add.w	r1, r1, r4, lsr #2
   18c9a:	1a40      	subs	r0, r0, r1
   18c9c:	ebbe 0100 	subs.w	r1, lr, r0
   18ca0:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
   18ca4:	f162 0400 	sbc.w	r4, r2, #0
   18ca8:	fb05 f501 	mul.w	r5, r5, r1
   18cac:	fb07 5504 	mla	r5, r7, r4, r5
   18cb0:	fba1 4107 	umull	r4, r1, r1, r7
   18cb4:	440d      	add	r5, r1
   18cb6:	2705      	movs	r7, #5
   18cb8:	f004 0101 	and.w	r1, r4, #1
   18cbc:	fba1 1b07 	umull	r1, fp, r1, r7
   18cc0:	1809      	adds	r1, r1, r0
   18cc2:	0864      	lsrs	r4, r4, #1
   18cc4:	3130      	adds	r1, #48	; 0x30
   18cc6:	f803 1c01 	strb.w	r1, [r3, #-1]
   18cca:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
   18cce:	f10c 0c01 	add.w	ip, ip, #1
   18cd2:	3b01      	subs	r3, #1
   18cd4:	086d      	lsrs	r5, r5, #1
   18cd6:	2e00      	cmp	r6, #0
   18cd8:	d0cc      	beq.n	18c74 <_vfiprintf_r+0xcdc>
   18cda:	990b      	ldr	r1, [sp, #44]	; 0x2c
   18cdc:	7809      	ldrb	r1, [r1, #0]
   18cde:	4561      	cmp	r1, ip
   18ce0:	d1c8      	bne.n	18c74 <_vfiprintf_r+0xcdc>
   18ce2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   18ce6:	d0c5      	beq.n	18c74 <_vfiprintf_r+0xcdc>
   18ce8:	f1be 0f0a 	cmp.w	lr, #10
   18cec:	f172 0200 	sbcs.w	r2, r2, #0
   18cf0:	d26c      	bcs.n	18dcc <_vfiprintf_r+0xe34>
   18cf2:	461c      	mov	r4, r3
   18cf4:	ab44      	add	r3, sp, #272	; 0x110
   18cf6:	1b1b      	subs	r3, r3, r4
   18cf8:	9f04      	ldr	r7, [sp, #16]
   18cfa:	9e03      	ldr	r6, [sp, #12]
   18cfc:	9304      	str	r3, [sp, #16]
   18cfe:	ee18 ba90 	vmov	fp, s17
   18d02:	f7ff ba72 	b.w	181ea <_vfiprintf_r+0x252>
   18d06:	9603      	str	r6, [sp, #12]
   18d08:	f7ff ba62 	b.w	181d0 <_vfiprintf_r+0x238>
   18d0c:	4658      	mov	r0, fp
   18d0e:	f7f7 ff41 	bl	10b94 <__sinit>
   18d12:	f7ff b95b 	b.w	17fcc <_vfiprintf_r+0x34>
   18d16:	2901      	cmp	r1, #1
   18d18:	9603      	str	r6, [sp, #12]
   18d1a:	f47f accd 	bne.w	186b8 <_vfiprintf_r+0x720>
   18d1e:	f7ff ba5c 	b.w	181da <_vfiprintf_r+0x242>
   18d22:	9b07      	ldr	r3, [sp, #28]
   18d24:	9905      	ldr	r1, [sp, #20]
   18d26:	f853 2b04 	ldr.w	r2, [r3], #4
   18d2a:	6011      	str	r1, [r2, #0]
   18d2c:	9307      	str	r3, [sp, #28]
   18d2e:	f7ff b97e 	b.w	1802e <_vfiprintf_r+0x96>
   18d32:	2f06      	cmp	r7, #6
   18d34:	463b      	mov	r3, r7
   18d36:	9a03      	ldr	r2, [sp, #12]
   18d38:	4c79      	ldr	r4, [pc, #484]	; (18f20 <_vfiprintf_r+0xf88>)
   18d3a:	9207      	str	r2, [sp, #28]
   18d3c:	bf28      	it	cs
   18d3e:	2306      	movcs	r3, #6
   18d40:	9304      	str	r3, [sp, #16]
   18d42:	9303      	str	r3, [sp, #12]
   18d44:	f7ff bb25 	b.w	18392 <_vfiprintf_r+0x3fa>
   18d48:	9b03      	ldr	r3, [sp, #12]
   18d4a:	9907      	ldr	r1, [sp, #28]
   18d4c:	f413 7200 	ands.w	r2, r3, #512	; 0x200
   18d50:	bf14      	ite	ne
   18d52:	f851 3b04 	ldrne.w	r3, [r1], #4
   18d56:	f851 3b04 	ldreq.w	r3, [r1], #4
   18d5a:	9107      	str	r1, [sp, #28]
   18d5c:	bf1c      	itt	ne
   18d5e:	4602      	movne	r2, r0
   18d60:	b2db      	uxtbne	r3, r3
   18d62:	2101      	movs	r1, #1
   18d64:	f7ff ba8f 	b.w	18286 <_vfiprintf_r+0x2ee>
   18d68:	ab16      	add	r3, sp, #88	; 0x58
   18d6a:	9300      	str	r3, [sp, #0]
   18d6c:	2300      	movs	r3, #0
   18d6e:	4619      	mov	r1, r3
   18d70:	aa13      	add	r2, sp, #76	; 0x4c
   18d72:	4658      	mov	r0, fp
   18d74:	f7fe fe98 	bl	17aa8 <_wcsrtombs_r>
   18d78:	4603      	mov	r3, r0
   18d7a:	3301      	adds	r3, #1
   18d7c:	9004      	str	r0, [sp, #16]
   18d7e:	f000 80ae 	beq.w	18ede <_vfiprintf_r+0xf46>
   18d82:	9413      	str	r4, [sp, #76]	; 0x4c
   18d84:	9b04      	ldr	r3, [sp, #16]
   18d86:	2b00      	cmp	r3, #0
   18d88:	d030      	beq.n	18dec <_vfiprintf_r+0xe54>
   18d8a:	2b63      	cmp	r3, #99	; 0x63
   18d8c:	dc63      	bgt.n	18e56 <_vfiprintf_r+0xebe>
   18d8e:	2300      	movs	r3, #0
   18d90:	9308      	str	r3, [sp, #32]
   18d92:	ac2b      	add	r4, sp, #172	; 0xac
   18d94:	2208      	movs	r2, #8
   18d96:	2100      	movs	r1, #0
   18d98:	a816      	add	r0, sp, #88	; 0x58
   18d9a:	f7f8 f90b 	bl	10fb4 <memset>
   18d9e:	9d04      	ldr	r5, [sp, #16]
   18da0:	ab16      	add	r3, sp, #88	; 0x58
   18da2:	9300      	str	r3, [sp, #0]
   18da4:	aa13      	add	r2, sp, #76	; 0x4c
   18da6:	462b      	mov	r3, r5
   18da8:	4621      	mov	r1, r4
   18daa:	4658      	mov	r0, fp
   18dac:	f7fe fe7c 	bl	17aa8 <_wcsrtombs_r>
   18db0:	4285      	cmp	r5, r0
   18db2:	f040 80ab 	bne.w	18f0c <_vfiprintf_r+0xf74>
   18db6:	9b03      	ldr	r3, [sp, #12]
   18db8:	9a04      	ldr	r2, [sp, #16]
   18dba:	9307      	str	r3, [sp, #28]
   18dbc:	2300      	movs	r3, #0
   18dbe:	54a3      	strb	r3, [r4, r2]
   18dc0:	461f      	mov	r7, r3
   18dc2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   18dc6:	9303      	str	r3, [sp, #12]
   18dc8:	f7ff ba16 	b.w	181f8 <_vfiprintf_r+0x260>
   18dcc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   18dce:	990d      	ldr	r1, [sp, #52]	; 0x34
   18dd0:	1a9b      	subs	r3, r3, r2
   18dd2:	4618      	mov	r0, r3
   18dd4:	9308      	str	r3, [sp, #32]
   18dd6:	f7f8 fa63 	bl	112a0 <strncpy>
   18dda:	990b      	ldr	r1, [sp, #44]	; 0x2c
   18ddc:	9b08      	ldr	r3, [sp, #32]
   18dde:	784a      	ldrb	r2, [r1, #1]
   18de0:	b10a      	cbz	r2, 18de6 <_vfiprintf_r+0xe4e>
   18de2:	3101      	adds	r1, #1
   18de4:	910b      	str	r1, [sp, #44]	; 0x2c
   18de6:	f04f 0c00 	mov.w	ip, #0
   18dea:	e748      	b.n	18c7e <_vfiprintf_r+0xce6>
   18dec:	9b03      	ldr	r3, [sp, #12]
   18dee:	9307      	str	r3, [sp, #28]
   18df0:	9b04      	ldr	r3, [sp, #16]
   18df2:	9303      	str	r3, [sp, #12]
   18df4:	461f      	mov	r7, r3
   18df6:	9308      	str	r3, [sp, #32]
   18df8:	f7ff b9fe 	b.w	181f8 <_vfiprintf_r+0x260>
   18dfc:	2101      	movs	r1, #1
   18dfe:	4618      	mov	r0, r3
   18e00:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   18e04:	f7ff bb13 	b.w	1842e <_vfiprintf_r+0x496>
   18e08:	f850 3b04 	ldr.w	r3, [r0], #4
   18e0c:	9007      	str	r0, [sp, #28]
   18e0e:	4622      	mov	r2, r4
   18e10:	b2db      	uxtb	r3, r3
   18e12:	e6b6      	b.n	18b82 <_vfiprintf_r+0xbea>
   18e14:	f912 3b04 	ldrsb.w	r3, [r2], #4
   18e18:	9207      	str	r2, [sp, #28]
   18e1a:	17da      	asrs	r2, r3, #31
   18e1c:	4611      	mov	r1, r2
   18e1e:	f7ff b9ca 	b.w	181b6 <_vfiprintf_r+0x21e>
   18e22:	f851 3b04 	ldr.w	r3, [r1], #4
   18e26:	9107      	str	r1, [sp, #28]
   18e28:	4602      	mov	r2, r0
   18e2a:	b2db      	uxtb	r3, r3
   18e2c:	f7ff ba27 	b.w	1827e <_vfiprintf_r+0x2e6>
   18e30:	2301      	movs	r3, #1
   18e32:	931c      	str	r3, [sp, #112]	; 0x70
   18e34:	2101      	movs	r1, #1
   18e36:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   18e3a:	931b      	str	r3, [sp, #108]	; 0x6c
   18e3c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   18e40:	460b      	mov	r3, r1
   18e42:	f7ff bacd 	b.w	183e0 <_vfiprintf_r+0x448>
   18e46:	9b07      	ldr	r3, [sp, #28]
   18e48:	9905      	ldr	r1, [sp, #20]
   18e4a:	f853 2b04 	ldr.w	r2, [r3], #4
   18e4e:	9307      	str	r3, [sp, #28]
   18e50:	8011      	strh	r1, [r2, #0]
   18e52:	f7ff b8ec 	b.w	1802e <_vfiprintf_r+0x96>
   18e56:	1c59      	adds	r1, r3, #1
   18e58:	4658      	mov	r0, fp
   18e5a:	f7f6 f94f 	bl	f0fc <_malloc_r>
   18e5e:	4604      	mov	r4, r0
   18e60:	2800      	cmp	r0, #0
   18e62:	d03c      	beq.n	18ede <_vfiprintf_r+0xf46>
   18e64:	9008      	str	r0, [sp, #32]
   18e66:	e795      	b.n	18d94 <_vfiprintf_r+0xdfc>
   18e68:	6d88      	ldr	r0, [r1, #88]	; 0x58
   18e6a:	f7f8 fb21 	bl	114b0 <__retarget_lock_release_recursive>
   18e6e:	f7ff b9e9 	b.w	18244 <_vfiprintf_r+0x2ac>
   18e72:	9b03      	ldr	r3, [sp, #12]
   18e74:	9307      	str	r3, [sp, #28]
   18e76:	e9cd 7703 	strd	r7, r7, [sp, #12]
   18e7a:	9f08      	ldr	r7, [sp, #32]
   18e7c:	f7ff b9bc 	b.w	181f8 <_vfiprintf_r+0x260>
   18e80:	9819      	ldr	r0, [sp, #100]	; 0x64
   18e82:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   18e84:	3001      	adds	r0, #1
   18e86:	e545      	b.n	18914 <_vfiprintf_r+0x97c>
   18e88:	9b03      	ldr	r3, [sp, #12]
   18e8a:	9307      	str	r3, [sp, #28]
   18e8c:	4620      	mov	r0, r4
   18e8e:	f7f8 fd37 	bl	11900 <strlen>
   18e92:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   18e96:	462f      	mov	r7, r5
   18e98:	9004      	str	r0, [sp, #16]
   18e9a:	9303      	str	r3, [sp, #12]
   18e9c:	9508      	str	r5, [sp, #32]
   18e9e:	f7ff b9ab 	b.w	181f8 <_vfiprintf_r+0x260>
   18ea2:	ee18 1a10 	vmov	r1, s16
   18ea6:	aa18      	add	r2, sp, #96	; 0x60
   18ea8:	4658      	mov	r0, fp
   18eaa:	f7ff f839 	bl	17f20 <__sprint_r.part.0>
   18eae:	2800      	cmp	r0, #0
   18eb0:	f43f aa36 	beq.w	18320 <_vfiprintf_r+0x388>
   18eb4:	f7ff ba4d 	b.w	18352 <_vfiprintf_r+0x3ba>
   18eb8:	9819      	ldr	r0, [sp, #100]	; 0x64
   18eba:	3001      	adds	r0, #1
   18ebc:	e57a      	b.n	189b4 <_vfiprintf_r+0xa1c>
   18ebe:	468c      	mov	ip, r1
   18ec0:	e46e      	b.n	187a0 <_vfiprintf_r+0x808>
   18ec2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   18ec4:	07d9      	lsls	r1, r3, #31
   18ec6:	d405      	bmi.n	18ed4 <_vfiprintf_r+0xf3c>
   18ec8:	89ab      	ldrh	r3, [r5, #12]
   18eca:	059a      	lsls	r2, r3, #22
   18ecc:	d402      	bmi.n	18ed4 <_vfiprintf_r+0xf3c>
   18ece:	6da8      	ldr	r0, [r5, #88]	; 0x58
   18ed0:	f7f8 faee 	bl	114b0 <__retarget_lock_release_recursive>
   18ed4:	f04f 33ff 	mov.w	r3, #4294967295
   18ed8:	9305      	str	r3, [sp, #20]
   18eda:	f7ff ba49 	b.w	18370 <_vfiprintf_r+0x3d8>
   18ede:	ee18 2a10 	vmov	r2, s16
   18ee2:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   18ee6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   18eea:	8193      	strh	r3, [r2, #12]
   18eec:	f7ff ba35 	b.w	1835a <_vfiprintf_r+0x3c2>
   18ef0:	9c07      	ldr	r4, [sp, #28]
   18ef2:	9704      	str	r7, [sp, #16]
   18ef4:	e746      	b.n	18d84 <_vfiprintf_r+0xdec>
   18ef6:	9b07      	ldr	r3, [sp, #28]
   18ef8:	f898 1001 	ldrb.w	r1, [r8, #1]
   18efc:	f853 7b04 	ldr.w	r7, [r3], #4
   18f00:	9307      	str	r3, [sp, #28]
   18f02:	4690      	mov	r8, r2
   18f04:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
   18f08:	f7ff b8b9 	b.w	1807e <_vfiprintf_r+0xe6>
   18f0c:	ee18 2a10 	vmov	r2, s16
   18f10:	8993      	ldrh	r3, [r2, #12]
   18f12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   18f16:	8193      	strh	r3, [r2, #12]
   18f18:	f7ff ba15 	b.w	18346 <_vfiprintf_r+0x3ae>
   18f1c:	cccccccd 	.word	0xcccccccd
   18f20:	20003860 	.word	0x20003860

00018f24 <__sbprintf>:
   18f24:	b570      	push	{r4, r5, r6, lr}
   18f26:	460c      	mov	r4, r1
   18f28:	8989      	ldrh	r1, [r1, #12]
   18f2a:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
   18f2e:	f021 0102 	bic.w	r1, r1, #2
   18f32:	f8ad 1014 	strh.w	r1, [sp, #20]
   18f36:	6e61      	ldr	r1, [r4, #100]	; 0x64
   18f38:	911b      	str	r1, [sp, #108]	; 0x6c
   18f3a:	89e1      	ldrh	r1, [r4, #14]
   18f3c:	f8ad 1016 	strh.w	r1, [sp, #22]
   18f40:	69e1      	ldr	r1, [r4, #28]
   18f42:	9109      	str	r1, [sp, #36]	; 0x24
   18f44:	6a61      	ldr	r1, [r4, #36]	; 0x24
   18f46:	910b      	str	r1, [sp, #44]	; 0x2c
   18f48:	a91c      	add	r1, sp, #112	; 0x70
   18f4a:	9102      	str	r1, [sp, #8]
   18f4c:	9106      	str	r1, [sp, #24]
   18f4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
   18f52:	4606      	mov	r6, r0
   18f54:	9104      	str	r1, [sp, #16]
   18f56:	9107      	str	r1, [sp, #28]
   18f58:	a818      	add	r0, sp, #96	; 0x60
   18f5a:	2100      	movs	r1, #0
   18f5c:	e9cd 3200 	strd	r3, r2, [sp]
   18f60:	9108      	str	r1, [sp, #32]
   18f62:	f7f8 fa9f 	bl	114a4 <__retarget_lock_init_recursive>
   18f66:	e9dd 3200 	ldrd	r3, r2, [sp]
   18f6a:	a902      	add	r1, sp, #8
   18f6c:	4630      	mov	r0, r6
   18f6e:	f7ff f813 	bl	17f98 <_vfiprintf_r>
   18f72:	1e05      	subs	r5, r0, #0
   18f74:	db07      	blt.n	18f86 <__sbprintf+0x62>
   18f76:	a902      	add	r1, sp, #8
   18f78:	4630      	mov	r0, r6
   18f7a:	f7fd fb0f 	bl	1659c <_fflush_r>
   18f7e:	2800      	cmp	r0, #0
   18f80:	bf18      	it	ne
   18f82:	f04f 35ff 	movne.w	r5, #4294967295
   18f86:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   18f8a:	065b      	lsls	r3, r3, #25
   18f8c:	d503      	bpl.n	18f96 <__sbprintf+0x72>
   18f8e:	89a3      	ldrh	r3, [r4, #12]
   18f90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   18f94:	81a3      	strh	r3, [r4, #12]
   18f96:	9818      	ldr	r0, [sp, #96]	; 0x60
   18f98:	f7f8 fa86 	bl	114a8 <__retarget_lock_close_recursive>
   18f9c:	4628      	mov	r0, r5
   18f9e:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
   18fa2:	bd70      	pop	{r4, r5, r6, pc}

00018fa4 <__sfvwrite_r>:
   18fa4:	6893      	ldr	r3, [r2, #8]
   18fa6:	2b00      	cmp	r3, #0
   18fa8:	f000 8085 	beq.w	190b6 <__sfvwrite_r+0x112>
   18fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18fb0:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   18fb4:	460c      	mov	r4, r1
   18fb6:	0719      	lsls	r1, r3, #28
   18fb8:	4680      	mov	r8, r0
   18fba:	b083      	sub	sp, #12
   18fbc:	4617      	mov	r7, r2
   18fbe:	b298      	uxth	r0, r3
   18fc0:	d525      	bpl.n	1900e <__sfvwrite_r+0x6a>
   18fc2:	6923      	ldr	r3, [r4, #16]
   18fc4:	b31b      	cbz	r3, 1900e <__sfvwrite_r+0x6a>
   18fc6:	f010 0302 	ands.w	r3, r0, #2
   18fca:	683d      	ldr	r5, [r7, #0]
   18fcc:	d02d      	beq.n	1902a <__sfvwrite_r+0x86>
   18fce:	f04f 0a00 	mov.w	sl, #0
   18fd2:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 19294 <__sfvwrite_r+0x2f0>
   18fd6:	4656      	mov	r6, sl
   18fd8:	46b9      	mov	r9, r7
   18fda:	455e      	cmp	r6, fp
   18fdc:	4633      	mov	r3, r6
   18fde:	4652      	mov	r2, sl
   18fe0:	bf28      	it	cs
   18fe2:	465b      	movcs	r3, fp
   18fe4:	4640      	mov	r0, r8
   18fe6:	2e00      	cmp	r6, #0
   18fe8:	d052      	beq.n	19090 <__sfvwrite_r+0xec>
   18fea:	69e1      	ldr	r1, [r4, #28]
   18fec:	6a67      	ldr	r7, [r4, #36]	; 0x24
   18fee:	47b8      	blx	r7
   18ff0:	2800      	cmp	r0, #0
   18ff2:	dd56      	ble.n	190a2 <__sfvwrite_r+0xfe>
   18ff4:	f8d9 3008 	ldr.w	r3, [r9, #8]
   18ff8:	1a1b      	subs	r3, r3, r0
   18ffa:	4482      	add	sl, r0
   18ffc:	1a36      	subs	r6, r6, r0
   18ffe:	f8c9 3008 	str.w	r3, [r9, #8]
   19002:	2b00      	cmp	r3, #0
   19004:	d1e9      	bne.n	18fda <__sfvwrite_r+0x36>
   19006:	2000      	movs	r0, #0
   19008:	b003      	add	sp, #12
   1900a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1900e:	4621      	mov	r1, r4
   19010:	4640      	mov	r0, r8
   19012:	f000 f97d 	bl	19310 <__swsetup_r>
   19016:	2800      	cmp	r0, #0
   19018:	f040 8138 	bne.w	1928c <__sfvwrite_r+0x2e8>
   1901c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   19020:	683d      	ldr	r5, [r7, #0]
   19022:	b298      	uxth	r0, r3
   19024:	f010 0302 	ands.w	r3, r0, #2
   19028:	d1d1      	bne.n	18fce <__sfvwrite_r+0x2a>
   1902a:	f010 0901 	ands.w	r9, r0, #1
   1902e:	d144      	bne.n	190ba <__sfvwrite_r+0x116>
   19030:	464e      	mov	r6, r9
   19032:	9700      	str	r7, [sp, #0]
   19034:	b346      	cbz	r6, 19088 <__sfvwrite_r+0xe4>
   19036:	0582      	lsls	r2, r0, #22
   19038:	f8d4 b008 	ldr.w	fp, [r4, #8]
   1903c:	f140 8085 	bpl.w	1914a <__sfvwrite_r+0x1a6>
   19040:	45b3      	cmp	fp, r6
   19042:	465a      	mov	r2, fp
   19044:	f200 80b4 	bhi.w	191b0 <__sfvwrite_r+0x20c>
   19048:	f410 6f90 	tst.w	r0, #1152	; 0x480
   1904c:	f040 80c1 	bne.w	191d2 <__sfvwrite_r+0x22e>
   19050:	6820      	ldr	r0, [r4, #0]
   19052:	9201      	str	r2, [sp, #4]
   19054:	4649      	mov	r1, r9
   19056:	f7f7 ff31 	bl	10ebc <memmove>
   1905a:	68a3      	ldr	r3, [r4, #8]
   1905c:	9a01      	ldr	r2, [sp, #4]
   1905e:	eba3 010b 	sub.w	r1, r3, fp
   19062:	6823      	ldr	r3, [r4, #0]
   19064:	60a1      	str	r1, [r4, #8]
   19066:	4413      	add	r3, r2
   19068:	46b2      	mov	sl, r6
   1906a:	6023      	str	r3, [r4, #0]
   1906c:	2600      	movs	r6, #0
   1906e:	9a00      	ldr	r2, [sp, #0]
   19070:	6893      	ldr	r3, [r2, #8]
   19072:	eba3 030a 	sub.w	r3, r3, sl
   19076:	44d1      	add	r9, sl
   19078:	6093      	str	r3, [r2, #8]
   1907a:	2b00      	cmp	r3, #0
   1907c:	d0c3      	beq.n	19006 <__sfvwrite_r+0x62>
   1907e:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   19082:	b280      	uxth	r0, r0
   19084:	2e00      	cmp	r6, #0
   19086:	d1d6      	bne.n	19036 <__sfvwrite_r+0x92>
   19088:	e9d5 9600 	ldrd	r9, r6, [r5]
   1908c:	3508      	adds	r5, #8
   1908e:	e7d1      	b.n	19034 <__sfvwrite_r+0x90>
   19090:	e9d5 a600 	ldrd	sl, r6, [r5]
   19094:	3508      	adds	r5, #8
   19096:	e7a0      	b.n	18fda <__sfvwrite_r+0x36>
   19098:	4621      	mov	r1, r4
   1909a:	4640      	mov	r0, r8
   1909c:	f7fd fa7e 	bl	1659c <_fflush_r>
   190a0:	b388      	cbz	r0, 19106 <__sfvwrite_r+0x162>
   190a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   190a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   190aa:	f04f 30ff 	mov.w	r0, #4294967295
   190ae:	81a3      	strh	r3, [r4, #12]
   190b0:	b003      	add	sp, #12
   190b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   190b6:	2000      	movs	r0, #0
   190b8:	4770      	bx	lr
   190ba:	461e      	mov	r6, r3
   190bc:	46ba      	mov	sl, r7
   190be:	4699      	mov	r9, r3
   190c0:	4618      	mov	r0, r3
   190c2:	9500      	str	r5, [sp, #0]
   190c4:	461f      	mov	r7, r3
   190c6:	b366      	cbz	r6, 19122 <__sfvwrite_r+0x17e>
   190c8:	2800      	cmp	r0, #0
   190ca:	d032      	beq.n	19132 <__sfvwrite_r+0x18e>
   190cc:	464a      	mov	r2, r9
   190ce:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
   190d2:	6820      	ldr	r0, [r4, #0]
   190d4:	68a5      	ldr	r5, [r4, #8]
   190d6:	42b2      	cmp	r2, r6
   190d8:	bf28      	it	cs
   190da:	4632      	movcs	r2, r6
   190dc:	4288      	cmp	r0, r1
   190de:	d904      	bls.n	190ea <__sfvwrite_r+0x146>
   190e0:	eb05 0b03 	add.w	fp, r5, r3
   190e4:	455a      	cmp	r2, fp
   190e6:	f300 80a7 	bgt.w	19238 <__sfvwrite_r+0x294>
   190ea:	4293      	cmp	r3, r2
   190ec:	dc64      	bgt.n	191b8 <__sfvwrite_r+0x214>
   190ee:	69e1      	ldr	r1, [r4, #28]
   190f0:	6a65      	ldr	r5, [r4, #36]	; 0x24
   190f2:	463a      	mov	r2, r7
   190f4:	4640      	mov	r0, r8
   190f6:	47a8      	blx	r5
   190f8:	f1b0 0b00 	subs.w	fp, r0, #0
   190fc:	ddd1      	ble.n	190a2 <__sfvwrite_r+0xfe>
   190fe:	ebb9 090b 	subs.w	r9, r9, fp
   19102:	d0c9      	beq.n	19098 <__sfvwrite_r+0xf4>
   19104:	2001      	movs	r0, #1
   19106:	f8da 3008 	ldr.w	r3, [sl, #8]
   1910a:	eba3 030b 	sub.w	r3, r3, fp
   1910e:	445f      	add	r7, fp
   19110:	eba6 060b 	sub.w	r6, r6, fp
   19114:	f8ca 3008 	str.w	r3, [sl, #8]
   19118:	2b00      	cmp	r3, #0
   1911a:	f43f af74 	beq.w	19006 <__sfvwrite_r+0x62>
   1911e:	2e00      	cmp	r6, #0
   19120:	d1d2      	bne.n	190c8 <__sfvwrite_r+0x124>
   19122:	9a00      	ldr	r2, [sp, #0]
   19124:	6856      	ldr	r6, [r2, #4]
   19126:	4613      	mov	r3, r2
   19128:	3208      	adds	r2, #8
   1912a:	9200      	str	r2, [sp, #0]
   1912c:	2e00      	cmp	r6, #0
   1912e:	d0f8      	beq.n	19122 <__sfvwrite_r+0x17e>
   19130:	681f      	ldr	r7, [r3, #0]
   19132:	4632      	mov	r2, r6
   19134:	210a      	movs	r1, #10
   19136:	4638      	mov	r0, r7
   19138:	f7f8 fb92 	bl	11860 <memchr>
   1913c:	2800      	cmp	r0, #0
   1913e:	f000 809c 	beq.w	1927a <__sfvwrite_r+0x2d6>
   19142:	3001      	adds	r0, #1
   19144:	eba0 0907 	sub.w	r9, r0, r7
   19148:	e7c0      	b.n	190cc <__sfvwrite_r+0x128>
   1914a:	6820      	ldr	r0, [r4, #0]
   1914c:	6923      	ldr	r3, [r4, #16]
   1914e:	4298      	cmp	r0, r3
   19150:	d816      	bhi.n	19180 <__sfvwrite_r+0x1dc>
   19152:	6962      	ldr	r2, [r4, #20]
   19154:	42b2      	cmp	r2, r6
   19156:	d813      	bhi.n	19180 <__sfvwrite_r+0x1dc>
   19158:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   1915c:	42b3      	cmp	r3, r6
   1915e:	bf28      	it	cs
   19160:	4633      	movcs	r3, r6
   19162:	69e1      	ldr	r1, [r4, #28]
   19164:	fb93 f3f2 	sdiv	r3, r3, r2
   19168:	6a67      	ldr	r7, [r4, #36]	; 0x24
   1916a:	fb02 f303 	mul.w	r3, r2, r3
   1916e:	4640      	mov	r0, r8
   19170:	464a      	mov	r2, r9
   19172:	47b8      	blx	r7
   19174:	f1b0 0a00 	subs.w	sl, r0, #0
   19178:	dd93      	ble.n	190a2 <__sfvwrite_r+0xfe>
   1917a:	eba6 060a 	sub.w	r6, r6, sl
   1917e:	e776      	b.n	1906e <__sfvwrite_r+0xca>
   19180:	45b3      	cmp	fp, r6
   19182:	46da      	mov	sl, fp
   19184:	bf28      	it	cs
   19186:	46b2      	movcs	sl, r6
   19188:	4652      	mov	r2, sl
   1918a:	4649      	mov	r1, r9
   1918c:	f7f7 fe96 	bl	10ebc <memmove>
   19190:	68a3      	ldr	r3, [r4, #8]
   19192:	6822      	ldr	r2, [r4, #0]
   19194:	eba3 030a 	sub.w	r3, r3, sl
   19198:	4452      	add	r2, sl
   1919a:	60a3      	str	r3, [r4, #8]
   1919c:	6022      	str	r2, [r4, #0]
   1919e:	2b00      	cmp	r3, #0
   191a0:	d1eb      	bne.n	1917a <__sfvwrite_r+0x1d6>
   191a2:	4621      	mov	r1, r4
   191a4:	4640      	mov	r0, r8
   191a6:	f7fd f9f9 	bl	1659c <_fflush_r>
   191aa:	2800      	cmp	r0, #0
   191ac:	d0e5      	beq.n	1917a <__sfvwrite_r+0x1d6>
   191ae:	e778      	b.n	190a2 <__sfvwrite_r+0xfe>
   191b0:	6820      	ldr	r0, [r4, #0]
   191b2:	46b3      	mov	fp, r6
   191b4:	4632      	mov	r2, r6
   191b6:	e74c      	b.n	19052 <__sfvwrite_r+0xae>
   191b8:	4639      	mov	r1, r7
   191ba:	9201      	str	r2, [sp, #4]
   191bc:	f7f7 fe7e 	bl	10ebc <memmove>
   191c0:	9a01      	ldr	r2, [sp, #4]
   191c2:	68a3      	ldr	r3, [r4, #8]
   191c4:	1a9b      	subs	r3, r3, r2
   191c6:	60a3      	str	r3, [r4, #8]
   191c8:	6823      	ldr	r3, [r4, #0]
   191ca:	4413      	add	r3, r2
   191cc:	6023      	str	r3, [r4, #0]
   191ce:	4693      	mov	fp, r2
   191d0:	e795      	b.n	190fe <__sfvwrite_r+0x15a>
   191d2:	6823      	ldr	r3, [r4, #0]
   191d4:	6921      	ldr	r1, [r4, #16]
   191d6:	eba3 0b01 	sub.w	fp, r3, r1
   191da:	6963      	ldr	r3, [r4, #20]
   191dc:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   191e0:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   191e4:	f10b 0301 	add.w	r3, fp, #1
   191e8:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   191ec:	4433      	add	r3, r6
   191ee:	4553      	cmp	r3, sl
   191f0:	4652      	mov	r2, sl
   191f2:	bf84      	itt	hi
   191f4:	469a      	movhi	sl, r3
   191f6:	4652      	movhi	r2, sl
   191f8:	0543      	lsls	r3, r0, #21
   191fa:	d52c      	bpl.n	19256 <__sfvwrite_r+0x2b2>
   191fc:	4611      	mov	r1, r2
   191fe:	4640      	mov	r0, r8
   19200:	f7f5 ff7c 	bl	f0fc <_malloc_r>
   19204:	2800      	cmp	r0, #0
   19206:	d03b      	beq.n	19280 <__sfvwrite_r+0x2dc>
   19208:	465a      	mov	r2, fp
   1920a:	6921      	ldr	r1, [r4, #16]
   1920c:	9001      	str	r0, [sp, #4]
   1920e:	f7f4 f99f 	bl	d550 <memcpy>
   19212:	89a2      	ldrh	r2, [r4, #12]
   19214:	9b01      	ldr	r3, [sp, #4]
   19216:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   1921a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   1921e:	81a2      	strh	r2, [r4, #12]
   19220:	eb03 000b 	add.w	r0, r3, fp
   19224:	6123      	str	r3, [r4, #16]
   19226:	ebaa 030b 	sub.w	r3, sl, fp
   1922a:	f8c4 a014 	str.w	sl, [r4, #20]
   1922e:	60a3      	str	r3, [r4, #8]
   19230:	6020      	str	r0, [r4, #0]
   19232:	46b3      	mov	fp, r6
   19234:	4632      	mov	r2, r6
   19236:	e70c      	b.n	19052 <__sfvwrite_r+0xae>
   19238:	4639      	mov	r1, r7
   1923a:	465a      	mov	r2, fp
   1923c:	f7f7 fe3e 	bl	10ebc <memmove>
   19240:	6823      	ldr	r3, [r4, #0]
   19242:	445b      	add	r3, fp
   19244:	6023      	str	r3, [r4, #0]
   19246:	4621      	mov	r1, r4
   19248:	4640      	mov	r0, r8
   1924a:	f7fd f9a7 	bl	1659c <_fflush_r>
   1924e:	2800      	cmp	r0, #0
   19250:	f43f af55 	beq.w	190fe <__sfvwrite_r+0x15a>
   19254:	e725      	b.n	190a2 <__sfvwrite_r+0xfe>
   19256:	4640      	mov	r0, r8
   19258:	f7f6 fa18 	bl	f68c <_realloc_r>
   1925c:	4603      	mov	r3, r0
   1925e:	2800      	cmp	r0, #0
   19260:	d1de      	bne.n	19220 <__sfvwrite_r+0x27c>
   19262:	6921      	ldr	r1, [r4, #16]
   19264:	4640      	mov	r0, r8
   19266:	f7f8 fc5d 	bl	11b24 <_free_r>
   1926a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1926e:	220c      	movs	r2, #12
   19270:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   19274:	f8c8 2000 	str.w	r2, [r8]
   19278:	e715      	b.n	190a6 <__sfvwrite_r+0x102>
   1927a:	1c72      	adds	r2, r6, #1
   1927c:	4691      	mov	r9, r2
   1927e:	e726      	b.n	190ce <__sfvwrite_r+0x12a>
   19280:	220c      	movs	r2, #12
   19282:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   19286:	f8c8 2000 	str.w	r2, [r8]
   1928a:	e70c      	b.n	190a6 <__sfvwrite_r+0x102>
   1928c:	f04f 30ff 	mov.w	r0, #4294967295
   19290:	e6ba      	b.n	19008 <__sfvwrite_r+0x64>
   19292:	bf00      	nop
   19294:	7ffffc00 	.word	0x7ffffc00

00019298 <__submore>:
   19298:	f101 0340 	add.w	r3, r1, #64	; 0x40
   1929c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   192a0:	460c      	mov	r4, r1
   192a2:	6b09      	ldr	r1, [r1, #48]	; 0x30
   192a4:	4299      	cmp	r1, r3
   192a6:	d014      	beq.n	192d2 <__submore+0x3a>
   192a8:	6b66      	ldr	r6, [r4, #52]	; 0x34
   192aa:	0077      	lsls	r7, r6, #1
   192ac:	463a      	mov	r2, r7
   192ae:	f7f6 f9ed 	bl	f68c <_realloc_r>
   192b2:	4605      	mov	r5, r0
   192b4:	b340      	cbz	r0, 19308 <__submore+0x70>
   192b6:	eb00 0806 	add.w	r8, r0, r6
   192ba:	4601      	mov	r1, r0
   192bc:	4632      	mov	r2, r6
   192be:	4640      	mov	r0, r8
   192c0:	f7f4 f946 	bl	d550 <memcpy>
   192c4:	e9c4 570c 	strd	r5, r7, [r4, #48]	; 0x30
   192c8:	f8c4 8000 	str.w	r8, [r4]
   192cc:	2000      	movs	r0, #0
   192ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   192d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
   192d6:	f7f5 ff11 	bl	f0fc <_malloc_r>
   192da:	b1a8      	cbz	r0, 19308 <__submore+0x70>
   192dc:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   192e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
   192e4:	e9c4 020c 	strd	r0, r2, [r4, #48]	; 0x30
   192e8:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
   192ec:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   192f0:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
   192f4:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
   192f8:	f880 23fd 	strb.w	r2, [r0, #1021]	; 0x3fd
   192fc:	f200 33fd 	addw	r3, r0, #1021	; 0x3fd
   19300:	6023      	str	r3, [r4, #0]
   19302:	2000      	movs	r0, #0
   19304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19308:	f04f 30ff 	mov.w	r0, #4294967295
   1930c:	e7df      	b.n	192ce <__submore+0x36>
   1930e:	bf00      	nop

00019310 <__swsetup_r>:
   19310:	b538      	push	{r3, r4, r5, lr}
   19312:	4b31      	ldr	r3, [pc, #196]	; (193d8 <__swsetup_r+0xc8>)
   19314:	681b      	ldr	r3, [r3, #0]
   19316:	4605      	mov	r5, r0
   19318:	460c      	mov	r4, r1
   1931a:	b113      	cbz	r3, 19322 <__swsetup_r+0x12>
   1931c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1931e:	2a00      	cmp	r2, #0
   19320:	d04e      	beq.n	193c0 <__swsetup_r+0xb0>
   19322:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   19326:	0718      	lsls	r0, r3, #28
   19328:	b29a      	uxth	r2, r3
   1932a:	d51c      	bpl.n	19366 <__swsetup_r+0x56>
   1932c:	6921      	ldr	r1, [r4, #16]
   1932e:	b329      	cbz	r1, 1937c <__swsetup_r+0x6c>
   19330:	f012 0001 	ands.w	r0, r2, #1
   19334:	d007      	beq.n	19346 <__swsetup_r+0x36>
   19336:	2000      	movs	r0, #0
   19338:	60a0      	str	r0, [r4, #8]
   1933a:	6960      	ldr	r0, [r4, #20]
   1933c:	4240      	negs	r0, r0
   1933e:	61a0      	str	r0, [r4, #24]
   19340:	b139      	cbz	r1, 19352 <__swsetup_r+0x42>
   19342:	2000      	movs	r0, #0
   19344:	bd38      	pop	{r3, r4, r5, pc}
   19346:	0795      	lsls	r5, r2, #30
   19348:	bf58      	it	pl
   1934a:	6960      	ldrpl	r0, [r4, #20]
   1934c:	60a0      	str	r0, [r4, #8]
   1934e:	2900      	cmp	r1, #0
   19350:	d1f7      	bne.n	19342 <__swsetup_r+0x32>
   19352:	0612      	lsls	r2, r2, #24
   19354:	bf58      	it	pl
   19356:	4608      	movpl	r0, r1
   19358:	d5f4      	bpl.n	19344 <__swsetup_r+0x34>
   1935a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1935e:	81a3      	strh	r3, [r4, #12]
   19360:	f04f 30ff 	mov.w	r0, #4294967295
   19364:	bd38      	pop	{r3, r4, r5, pc}
   19366:	06d1      	lsls	r1, r2, #27
   19368:	d52e      	bpl.n	193c8 <__swsetup_r+0xb8>
   1936a:	0752      	lsls	r2, r2, #29
   1936c:	d414      	bmi.n	19398 <__swsetup_r+0x88>
   1936e:	6921      	ldr	r1, [r4, #16]
   19370:	f043 0308 	orr.w	r3, r3, #8
   19374:	81a3      	strh	r3, [r4, #12]
   19376:	b29a      	uxth	r2, r3
   19378:	2900      	cmp	r1, #0
   1937a:	d1d9      	bne.n	19330 <__swsetup_r+0x20>
   1937c:	f402 7020 	and.w	r0, r2, #640	; 0x280
   19380:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   19384:	d0d4      	beq.n	19330 <__swsetup_r+0x20>
   19386:	4621      	mov	r1, r4
   19388:	4628      	mov	r0, r5
   1938a:	f000 f977 	bl	1967c <__smakebuf_r>
   1938e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   19392:	6921      	ldr	r1, [r4, #16]
   19394:	b29a      	uxth	r2, r3
   19396:	e7cb      	b.n	19330 <__swsetup_r+0x20>
   19398:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1939a:	b151      	cbz	r1, 193b2 <__swsetup_r+0xa2>
   1939c:	f104 0240 	add.w	r2, r4, #64	; 0x40
   193a0:	4291      	cmp	r1, r2
   193a2:	d004      	beq.n	193ae <__swsetup_r+0x9e>
   193a4:	4628      	mov	r0, r5
   193a6:	f7f8 fbbd 	bl	11b24 <_free_r>
   193aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   193ae:	2200      	movs	r2, #0
   193b0:	6322      	str	r2, [r4, #48]	; 0x30
   193b2:	6921      	ldr	r1, [r4, #16]
   193b4:	2200      	movs	r2, #0
   193b6:	e9c4 1200 	strd	r1, r2, [r4]
   193ba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   193be:	e7d7      	b.n	19370 <__swsetup_r+0x60>
   193c0:	4618      	mov	r0, r3
   193c2:	f7f7 fbe7 	bl	10b94 <__sinit>
   193c6:	e7ac      	b.n	19322 <__swsetup_r+0x12>
   193c8:	2209      	movs	r2, #9
   193ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   193ce:	602a      	str	r2, [r5, #0]
   193d0:	f04f 30ff 	mov.w	r0, #4294967295
   193d4:	81a3      	strh	r3, [r4, #12]
   193d6:	bd38      	pop	{r3, r4, r5, pc}
   193d8:	2000c6f4 	.word	0x2000c6f4

000193dc <__fputwc>:
   193dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   193e0:	b082      	sub	sp, #8
   193e2:	4682      	mov	sl, r0
   193e4:	4688      	mov	r8, r1
   193e6:	4614      	mov	r4, r2
   193e8:	f7f7 ffc6 	bl	11378 <__locale_mb_cur_max>
   193ec:	2801      	cmp	r0, #1
   193ee:	d103      	bne.n	193f8 <__fputwc+0x1c>
   193f0:	f108 33ff 	add.w	r3, r8, #4294967295
   193f4:	2bfe      	cmp	r3, #254	; 0xfe
   193f6:	d936      	bls.n	19466 <__fputwc+0x8a>
   193f8:	f10d 0904 	add.w	r9, sp, #4
   193fc:	4642      	mov	r2, r8
   193fe:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   19402:	4649      	mov	r1, r9
   19404:	4650      	mov	r0, sl
   19406:	f7fe fb29 	bl	17a5c <_wcrtomb_r>
   1940a:	1c42      	adds	r2, r0, #1
   1940c:	4606      	mov	r6, r0
   1940e:	d032      	beq.n	19476 <__fputwc+0x9a>
   19410:	b320      	cbz	r0, 1945c <__fputwc+0x80>
   19412:	f89d c004 	ldrb.w	ip, [sp, #4]
   19416:	2500      	movs	r5, #0
   19418:	e009      	b.n	1942e <__fputwc+0x52>
   1941a:	6823      	ldr	r3, [r4, #0]
   1941c:	1c5a      	adds	r2, r3, #1
   1941e:	6022      	str	r2, [r4, #0]
   19420:	f883 c000 	strb.w	ip, [r3]
   19424:	3501      	adds	r5, #1
   19426:	42b5      	cmp	r5, r6
   19428:	d218      	bcs.n	1945c <__fputwc+0x80>
   1942a:	f819 cf01 	ldrb.w	ip, [r9, #1]!
   1942e:	68a3      	ldr	r3, [r4, #8]
   19430:	3b01      	subs	r3, #1
   19432:	2b00      	cmp	r3, #0
   19434:	60a3      	str	r3, [r4, #8]
   19436:	daf0      	bge.n	1941a <__fputwc+0x3e>
   19438:	69a7      	ldr	r7, [r4, #24]
   1943a:	42bb      	cmp	r3, r7
   1943c:	4661      	mov	r1, ip
   1943e:	4622      	mov	r2, r4
   19440:	4650      	mov	r0, sl
   19442:	db02      	blt.n	1944a <__fputwc+0x6e>
   19444:	f1bc 0f0a 	cmp.w	ip, #10
   19448:	d1e7      	bne.n	1941a <__fputwc+0x3e>
   1944a:	f000 f983 	bl	19754 <__swbuf_r>
   1944e:	1c43      	adds	r3, r0, #1
   19450:	d1e8      	bne.n	19424 <__fputwc+0x48>
   19452:	4606      	mov	r6, r0
   19454:	4630      	mov	r0, r6
   19456:	b002      	add	sp, #8
   19458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1945c:	4646      	mov	r6, r8
   1945e:	4630      	mov	r0, r6
   19460:	b002      	add	sp, #8
   19462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19466:	fa5f fc88 	uxtb.w	ip, r8
   1946a:	f88d c004 	strb.w	ip, [sp, #4]
   1946e:	4606      	mov	r6, r0
   19470:	f10d 0904 	add.w	r9, sp, #4
   19474:	e7cf      	b.n	19416 <__fputwc+0x3a>
   19476:	89a3      	ldrh	r3, [r4, #12]
   19478:	4630      	mov	r0, r6
   1947a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1947e:	81a3      	strh	r3, [r4, #12]
   19480:	b002      	add	sp, #8
   19482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19486:	bf00      	nop

00019488 <_fputwc_r>:
   19488:	b530      	push	{r4, r5, lr}
   1948a:	6e53      	ldr	r3, [r2, #100]	; 0x64
   1948c:	f013 0f01 	tst.w	r3, #1
   19490:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   19494:	4614      	mov	r4, r2
   19496:	b083      	sub	sp, #12
   19498:	4605      	mov	r5, r0
   1949a:	b29a      	uxth	r2, r3
   1949c:	d101      	bne.n	194a2 <_fputwc_r+0x1a>
   1949e:	0598      	lsls	r0, r3, #22
   194a0:	d51c      	bpl.n	194dc <_fputwc_r+0x54>
   194a2:	0490      	lsls	r0, r2, #18
   194a4:	d406      	bmi.n	194b4 <_fputwc_r+0x2c>
   194a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
   194a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   194ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   194b0:	81a3      	strh	r3, [r4, #12]
   194b2:	6662      	str	r2, [r4, #100]	; 0x64
   194b4:	4622      	mov	r2, r4
   194b6:	4628      	mov	r0, r5
   194b8:	f7ff ff90 	bl	193dc <__fputwc>
   194bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
   194be:	07da      	lsls	r2, r3, #31
   194c0:	4605      	mov	r5, r0
   194c2:	d402      	bmi.n	194ca <_fputwc_r+0x42>
   194c4:	89a3      	ldrh	r3, [r4, #12]
   194c6:	059b      	lsls	r3, r3, #22
   194c8:	d502      	bpl.n	194d0 <_fputwc_r+0x48>
   194ca:	4628      	mov	r0, r5
   194cc:	b003      	add	sp, #12
   194ce:	bd30      	pop	{r4, r5, pc}
   194d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   194d2:	f7f7 ffed 	bl	114b0 <__retarget_lock_release_recursive>
   194d6:	4628      	mov	r0, r5
   194d8:	b003      	add	sp, #12
   194da:	bd30      	pop	{r4, r5, pc}
   194dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   194de:	9101      	str	r1, [sp, #4]
   194e0:	f7f7 ffe4 	bl	114ac <__retarget_lock_acquire_recursive>
   194e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   194e8:	9901      	ldr	r1, [sp, #4]
   194ea:	b29a      	uxth	r2, r3
   194ec:	e7d9      	b.n	194a2 <_fputwc_r+0x1a>
   194ee:	bf00      	nop

000194f0 <_wcsnrtombs_l>:
   194f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   194f4:	b08b      	sub	sp, #44	; 0x2c
   194f6:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
   194fa:	9f14      	ldr	r7, [sp, #80]	; 0x50
   194fc:	9103      	str	r1, [sp, #12]
   194fe:	4681      	mov	r9, r0
   19500:	9205      	str	r2, [sp, #20]
   19502:	461e      	mov	r6, r3
   19504:	f1b8 0f00 	cmp.w	r8, #0
   19508:	d05c      	beq.n	195c4 <_wcsnrtombs_l+0xd4>
   1950a:	9b03      	ldr	r3, [sp, #12]
   1950c:	2b00      	cmp	r3, #0
   1950e:	d05e      	beq.n	195ce <_wcsnrtombs_l+0xde>
   19510:	9b05      	ldr	r3, [sp, #20]
   19512:	681d      	ldr	r5, [r3, #0]
   19514:	2f00      	cmp	r7, #0
   19516:	d06a      	beq.n	195ee <_wcsnrtombs_l+0xfe>
   19518:	1e74      	subs	r4, r6, #1
   1951a:	b34e      	cbz	r6, 19570 <_wcsnrtombs_l+0x80>
   1951c:	9b03      	ldr	r3, [sp, #12]
   1951e:	9304      	str	r3, [sp, #16]
   19520:	3d04      	subs	r5, #4
   19522:	2600      	movs	r6, #0
   19524:	9501      	str	r5, [sp, #4]
   19526:	e00b      	b.n	19540 <_wcsnrtombs_l+0x50>
   19528:	9b03      	ldr	r3, [sp, #12]
   1952a:	bb2b      	cbnz	r3, 19578 <_wcsnrtombs_l+0x88>
   1952c:	9b01      	ldr	r3, [sp, #4]
   1952e:	681a      	ldr	r2, [r3, #0]
   19530:	2a00      	cmp	r2, #0
   19532:	d03a      	beq.n	195aa <_wcsnrtombs_l+0xba>
   19534:	45bc      	cmp	ip, r7
   19536:	d25c      	bcs.n	195f2 <_wcsnrtombs_l+0x102>
   19538:	3c01      	subs	r4, #1
   1953a:	1c63      	adds	r3, r4, #1
   1953c:	4666      	mov	r6, ip
   1953e:	d017      	beq.n	19570 <_wcsnrtombs_l+0x80>
   19540:	f8d8 3000 	ldr.w	r3, [r8]
   19544:	9302      	str	r3, [sp, #8]
   19546:	9b01      	ldr	r3, [sp, #4]
   19548:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
   1954c:	f853 2f04 	ldr.w	r2, [r3, #4]!
   19550:	9301      	str	r3, [sp, #4]
   19552:	a907      	add	r1, sp, #28
   19554:	4643      	mov	r3, r8
   19556:	4648      	mov	r0, r9
   19558:	f8d8 b004 	ldr.w	fp, [r8, #4]
   1955c:	47a8      	blx	r5
   1955e:	1c42      	adds	r2, r0, #1
   19560:	d03a      	beq.n	195d8 <_wcsnrtombs_l+0xe8>
   19562:	eb00 0c06 	add.w	ip, r0, r6
   19566:	45bc      	cmp	ip, r7
   19568:	d9de      	bls.n	19528 <_wcsnrtombs_l+0x38>
   1956a:	9b02      	ldr	r3, [sp, #8]
   1956c:	e9c8 3b00 	strd	r3, fp, [r8]
   19570:	4630      	mov	r0, r6
   19572:	b00b      	add	sp, #44	; 0x2c
   19574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19578:	2800      	cmp	r0, #0
   1957a:	dd0e      	ble.n	1959a <_wcsnrtombs_l+0xaa>
   1957c:	9b04      	ldr	r3, [sp, #16]
   1957e:	9d01      	ldr	r5, [sp, #4]
   19580:	4418      	add	r0, r3
   19582:	1e5a      	subs	r2, r3, #1
   19584:	a907      	add	r1, sp, #28
   19586:	f100 3eff 	add.w	lr, r0, #4294967295
   1958a:	f811 3b01 	ldrb.w	r3, [r1], #1
   1958e:	f802 3f01 	strb.w	r3, [r2, #1]!
   19592:	4572      	cmp	r2, lr
   19594:	d1f9      	bne.n	1958a <_wcsnrtombs_l+0x9a>
   19596:	9501      	str	r5, [sp, #4]
   19598:	9004      	str	r0, [sp, #16]
   1959a:	9b05      	ldr	r3, [sp, #20]
   1959c:	681a      	ldr	r2, [r3, #0]
   1959e:	3204      	adds	r2, #4
   195a0:	601a      	str	r2, [r3, #0]
   195a2:	9b01      	ldr	r3, [sp, #4]
   195a4:	681a      	ldr	r2, [r3, #0]
   195a6:	2a00      	cmp	r2, #0
   195a8:	d1c4      	bne.n	19534 <_wcsnrtombs_l+0x44>
   195aa:	9b03      	ldr	r3, [sp, #12]
   195ac:	b10b      	cbz	r3, 195b2 <_wcsnrtombs_l+0xc2>
   195ae:	9b05      	ldr	r3, [sp, #20]
   195b0:	601a      	str	r2, [r3, #0]
   195b2:	f10c 36ff 	add.w	r6, ip, #4294967295
   195b6:	2200      	movs	r2, #0
   195b8:	4630      	mov	r0, r6
   195ba:	f8c8 2000 	str.w	r2, [r8]
   195be:	b00b      	add	sp, #44	; 0x2c
   195c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   195c4:	9b03      	ldr	r3, [sp, #12]
   195c6:	f500 7886 	add.w	r8, r0, #268	; 0x10c
   195ca:	2b00      	cmp	r3, #0
   195cc:	d1a0      	bne.n	19510 <_wcsnrtombs_l+0x20>
   195ce:	9b05      	ldr	r3, [sp, #20]
   195d0:	f04f 37ff 	mov.w	r7, #4294967295
   195d4:	681d      	ldr	r5, [r3, #0]
   195d6:	e79f      	b.n	19518 <_wcsnrtombs_l+0x28>
   195d8:	4606      	mov	r6, r0
   195da:	218a      	movs	r1, #138	; 0x8a
   195dc:	2200      	movs	r2, #0
   195de:	4630      	mov	r0, r6
   195e0:	f8c9 1000 	str.w	r1, [r9]
   195e4:	f8c8 2000 	str.w	r2, [r8]
   195e8:	b00b      	add	sp, #44	; 0x2c
   195ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   195ee:	463e      	mov	r6, r7
   195f0:	e7be      	b.n	19570 <_wcsnrtombs_l+0x80>
   195f2:	4666      	mov	r6, ip
   195f4:	e7bc      	b.n	19570 <_wcsnrtombs_l+0x80>
   195f6:	bf00      	nop

000195f8 <_wcsnrtombs_r>:
   195f8:	b510      	push	{r4, lr}
   195fa:	b084      	sub	sp, #16
   195fc:	4c05      	ldr	r4, [pc, #20]	; (19614 <_wcsnrtombs_r+0x1c>)
   195fe:	9806      	ldr	r0, [sp, #24]
   19600:	9000      	str	r0, [sp, #0]
   19602:	9807      	ldr	r0, [sp, #28]
   19604:	9001      	str	r0, [sp, #4]
   19606:	4804      	ldr	r0, [pc, #16]	; (19618 <_wcsnrtombs_r+0x20>)
   19608:	6800      	ldr	r0, [r0, #0]
   1960a:	9402      	str	r4, [sp, #8]
   1960c:	f7ff ff70 	bl	194f0 <_wcsnrtombs_l>
   19610:	b004      	add	sp, #16
   19612:	bd10      	pop	{r4, pc}
   19614:	2000c16c 	.word	0x2000c16c
   19618:	2000c6f4 	.word	0x2000c6f4

0001961c <category>:
   1961c:	4b15      	ldr	r3, [pc, #84]	; (19674 <category+0x58>)
   1961e:	4298      	cmp	r0, r3
   19620:	d823      	bhi.n	1966a <category+0x4e>
   19622:	b570      	push	{r4, r5, r6, lr}
   19624:	4e14      	ldr	r6, [pc, #80]	; (19678 <category+0x5c>)
   19626:	f04f 0e00 	mov.w	lr, #0
   1962a:	f640 04db 	movw	r4, #2267	; 0x8db
   1962e:	e003      	b.n	19638 <category+0x1c>
   19630:	f102 0e01 	add.w	lr, r2, #1
   19634:	45a6      	cmp	lr, r4
   19636:	dc16      	bgt.n	19666 <category+0x4a>
   19638:	eb04 020e 	add.w	r2, r4, lr
   1963c:	f022 0301 	bic.w	r3, r2, #1
   19640:	eb03 0362 	add.w	r3, r3, r2, asr #1
   19644:	eb06 0343 	add.w	r3, r6, r3, lsl #1
   19648:	1052      	asrs	r2, r2, #1
   1964a:	7859      	ldrb	r1, [r3, #1]
   1964c:	885d      	ldrh	r5, [r3, #2]
   1964e:	f8b3 c004 	ldrh.w	ip, [r3, #4]
   19652:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   19656:	448c      	add	ip, r1
   19658:	4560      	cmp	r0, ip
   1965a:	d8e9      	bhi.n	19630 <category+0x14>
   1965c:	4288      	cmp	r0, r1
   1965e:	d206      	bcs.n	1966e <category+0x52>
   19660:	1e54      	subs	r4, r2, #1
   19662:	45a6      	cmp	lr, r4
   19664:	dde8      	ble.n	19638 <category+0x1c>
   19666:	20ff      	movs	r0, #255	; 0xff
   19668:	bd70      	pop	{r4, r5, r6, pc}
   1966a:	20ff      	movs	r0, #255	; 0xff
   1966c:	4770      	bx	lr
   1966e:	7818      	ldrb	r0, [r3, #0]
   19670:	bd70      	pop	{r4, r5, r6, pc}
   19672:	bf00      	nop
   19674:	000e01ef 	.word	0x000e01ef
   19678:	20005304 	.word	0x20005304

0001967c <__smakebuf_r>:
   1967c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19680:	898b      	ldrh	r3, [r1, #12]
   19682:	460c      	mov	r4, r1
   19684:	0799      	lsls	r1, r3, #30
   19686:	b096      	sub	sp, #88	; 0x58
   19688:	d508      	bpl.n	1969c <__smakebuf_r+0x20>
   1968a:	f104 0343 	add.w	r3, r4, #67	; 0x43
   1968e:	2201      	movs	r2, #1
   19690:	e9c4 3204 	strd	r3, r2, [r4, #16]
   19694:	6023      	str	r3, [r4, #0]
   19696:	b016      	add	sp, #88	; 0x58
   19698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1969c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   196a0:	2900      	cmp	r1, #0
   196a2:	4606      	mov	r6, r0
   196a4:	db25      	blt.n	196f2 <__smakebuf_r+0x76>
   196a6:	466a      	mov	r2, sp
   196a8:	f000 f8ac 	bl	19804 <_fstat_r>
   196ac:	2800      	cmp	r0, #0
   196ae:	db1f      	blt.n	196f0 <__smakebuf_r+0x74>
   196b0:	9d01      	ldr	r5, [sp, #4]
   196b2:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   196b6:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   196ba:	fab5 f585 	clz	r5, r5
   196be:	f44f 6880 	mov.w	r8, #1024	; 0x400
   196c2:	096d      	lsrs	r5, r5, #5
   196c4:	f44f 6700 	mov.w	r7, #2048	; 0x800
   196c8:	4641      	mov	r1, r8
   196ca:	4630      	mov	r0, r6
   196cc:	f7f5 fd16 	bl	f0fc <_malloc_r>
   196d0:	b1e0      	cbz	r0, 1970c <__smakebuf_r+0x90>
   196d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   196d6:	f8c4 8014 	str.w	r8, [r4, #20]
   196da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   196de:	6020      	str	r0, [r4, #0]
   196e0:	6120      	str	r0, [r4, #16]
   196e2:	81a3      	strh	r3, [r4, #12]
   196e4:	bb35      	cbnz	r5, 19734 <__smakebuf_r+0xb8>
   196e6:	433b      	orrs	r3, r7
   196e8:	81a3      	strh	r3, [r4, #12]
   196ea:	b016      	add	sp, #88	; 0x58
   196ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   196f0:	89a3      	ldrh	r3, [r4, #12]
   196f2:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   196f6:	d019      	beq.n	1972c <__smakebuf_r+0xb0>
   196f8:	f04f 0840 	mov.w	r8, #64	; 0x40
   196fc:	2500      	movs	r5, #0
   196fe:	4641      	mov	r1, r8
   19700:	4630      	mov	r0, r6
   19702:	462f      	mov	r7, r5
   19704:	f7f5 fcfa 	bl	f0fc <_malloc_r>
   19708:	2800      	cmp	r0, #0
   1970a:	d1e2      	bne.n	196d2 <__smakebuf_r+0x56>
   1970c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   19710:	059a      	lsls	r2, r3, #22
   19712:	d4c0      	bmi.n	19696 <__smakebuf_r+0x1a>
   19714:	f023 0303 	bic.w	r3, r3, #3
   19718:	f104 0243 	add.w	r2, r4, #67	; 0x43
   1971c:	f043 0302 	orr.w	r3, r3, #2
   19720:	2101      	movs	r1, #1
   19722:	e9c4 2104 	strd	r2, r1, [r4, #16]
   19726:	81a3      	strh	r3, [r4, #12]
   19728:	6022      	str	r2, [r4, #0]
   1972a:	e7b4      	b.n	19696 <__smakebuf_r+0x1a>
   1972c:	f44f 6880 	mov.w	r8, #1024	; 0x400
   19730:	462f      	mov	r7, r5
   19732:	e7c9      	b.n	196c8 <__smakebuf_r+0x4c>
   19734:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   19738:	4630      	mov	r0, r6
   1973a:	f000 f879 	bl	19830 <_isatty_r>
   1973e:	b910      	cbnz	r0, 19746 <__smakebuf_r+0xca>
   19740:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   19744:	e7cf      	b.n	196e6 <__smakebuf_r+0x6a>
   19746:	89a3      	ldrh	r3, [r4, #12]
   19748:	f023 0303 	bic.w	r3, r3, #3
   1974c:	f043 0301 	orr.w	r3, r3, #1
   19750:	b21b      	sxth	r3, r3
   19752:	e7c8      	b.n	196e6 <__smakebuf_r+0x6a>

00019754 <__swbuf_r>:
   19754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19756:	460d      	mov	r5, r1
   19758:	4614      	mov	r4, r2
   1975a:	4606      	mov	r6, r0
   1975c:	b110      	cbz	r0, 19764 <__swbuf_r+0x10>
   1975e:	6b43      	ldr	r3, [r0, #52]	; 0x34
   19760:	2b00      	cmp	r3, #0
   19762:	d04c      	beq.n	197fe <__swbuf_r+0xaa>
   19764:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   19768:	69a3      	ldr	r3, [r4, #24]
   1976a:	60a3      	str	r3, [r4, #8]
   1976c:	0717      	lsls	r7, r2, #28
   1976e:	b290      	uxth	r0, r2
   19770:	d51b      	bpl.n	197aa <__swbuf_r+0x56>
   19772:	6923      	ldr	r3, [r4, #16]
   19774:	b1cb      	cbz	r3, 197aa <__swbuf_r+0x56>
   19776:	b2ed      	uxtb	r5, r5
   19778:	0481      	lsls	r1, r0, #18
   1977a:	462f      	mov	r7, r5
   1977c:	d522      	bpl.n	197c4 <__swbuf_r+0x70>
   1977e:	6822      	ldr	r2, [r4, #0]
   19780:	6961      	ldr	r1, [r4, #20]
   19782:	1ad3      	subs	r3, r2, r3
   19784:	4299      	cmp	r1, r3
   19786:	dd29      	ble.n	197dc <__swbuf_r+0x88>
   19788:	3301      	adds	r3, #1
   1978a:	68a1      	ldr	r1, [r4, #8]
   1978c:	3901      	subs	r1, #1
   1978e:	60a1      	str	r1, [r4, #8]
   19790:	1c51      	adds	r1, r2, #1
   19792:	6021      	str	r1, [r4, #0]
   19794:	7015      	strb	r5, [r2, #0]
   19796:	6962      	ldr	r2, [r4, #20]
   19798:	429a      	cmp	r2, r3
   1979a:	d027      	beq.n	197ec <__swbuf_r+0x98>
   1979c:	89a3      	ldrh	r3, [r4, #12]
   1979e:	07db      	lsls	r3, r3, #31
   197a0:	d501      	bpl.n	197a6 <__swbuf_r+0x52>
   197a2:	2d0a      	cmp	r5, #10
   197a4:	d022      	beq.n	197ec <__swbuf_r+0x98>
   197a6:	4638      	mov	r0, r7
   197a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   197aa:	4621      	mov	r1, r4
   197ac:	4630      	mov	r0, r6
   197ae:	f7ff fdaf 	bl	19310 <__swsetup_r>
   197b2:	bb08      	cbnz	r0, 197f8 <__swbuf_r+0xa4>
   197b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   197b8:	6923      	ldr	r3, [r4, #16]
   197ba:	b290      	uxth	r0, r2
   197bc:	b2ed      	uxtb	r5, r5
   197be:	0481      	lsls	r1, r0, #18
   197c0:	462f      	mov	r7, r5
   197c2:	d4dc      	bmi.n	1977e <__swbuf_r+0x2a>
   197c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   197c8:	81a2      	strh	r2, [r4, #12]
   197ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
   197cc:	6961      	ldr	r1, [r4, #20]
   197ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   197d2:	6662      	str	r2, [r4, #100]	; 0x64
   197d4:	6822      	ldr	r2, [r4, #0]
   197d6:	1ad3      	subs	r3, r2, r3
   197d8:	4299      	cmp	r1, r3
   197da:	dcd5      	bgt.n	19788 <__swbuf_r+0x34>
   197dc:	4621      	mov	r1, r4
   197de:	4630      	mov	r0, r6
   197e0:	f7fc fedc 	bl	1659c <_fflush_r>
   197e4:	b940      	cbnz	r0, 197f8 <__swbuf_r+0xa4>
   197e6:	6822      	ldr	r2, [r4, #0]
   197e8:	2301      	movs	r3, #1
   197ea:	e7ce      	b.n	1978a <__swbuf_r+0x36>
   197ec:	4621      	mov	r1, r4
   197ee:	4630      	mov	r0, r6
   197f0:	f7fc fed4 	bl	1659c <_fflush_r>
   197f4:	2800      	cmp	r0, #0
   197f6:	d0d6      	beq.n	197a6 <__swbuf_r+0x52>
   197f8:	f04f 37ff 	mov.w	r7, #4294967295
   197fc:	e7d3      	b.n	197a6 <__swbuf_r+0x52>
   197fe:	f7f7 f9c9 	bl	10b94 <__sinit>
   19802:	e7af      	b.n	19764 <__swbuf_r+0x10>

00019804 <_fstat_r>:
   19804:	b570      	push	{r4, r5, r6, lr}
   19806:	460c      	mov	r4, r1
   19808:	4d08      	ldr	r5, [pc, #32]	; (1982c <_fstat_r+0x28>)
   1980a:	4603      	mov	r3, r0
   1980c:	2600      	movs	r6, #0
   1980e:	4620      	mov	r0, r4
   19810:	4611      	mov	r1, r2
   19812:	461c      	mov	r4, r3
   19814:	602e      	str	r6, [r5, #0]
   19816:	f7f4 f863 	bl	d8e0 <_fstat>
   1981a:	1c43      	adds	r3, r0, #1
   1981c:	d000      	beq.n	19820 <_fstat_r+0x1c>
   1981e:	bd70      	pop	{r4, r5, r6, pc}
   19820:	682b      	ldr	r3, [r5, #0]
   19822:	2b00      	cmp	r3, #0
   19824:	d0fb      	beq.n	1981e <_fstat_r+0x1a>
   19826:	6023      	str	r3, [r4, #0]
   19828:	bd70      	pop	{r4, r5, r6, pc}
   1982a:	bf00      	nop
   1982c:	2005e3f8 	.word	0x2005e3f8

00019830 <_isatty_r>:
   19830:	b538      	push	{r3, r4, r5, lr}
   19832:	4d07      	ldr	r5, [pc, #28]	; (19850 <_isatty_r+0x20>)
   19834:	2200      	movs	r2, #0
   19836:	4604      	mov	r4, r0
   19838:	4608      	mov	r0, r1
   1983a:	602a      	str	r2, [r5, #0]
   1983c:	f7f4 f856 	bl	d8ec <_isatty>
   19840:	1c43      	adds	r3, r0, #1
   19842:	d000      	beq.n	19846 <_isatty_r+0x16>
   19844:	bd38      	pop	{r3, r4, r5, pc}
   19846:	682b      	ldr	r3, [r5, #0]
   19848:	2b00      	cmp	r3, #0
   1984a:	d0fb      	beq.n	19844 <_isatty_r+0x14>
   1984c:	6023      	str	r3, [r4, #0]
   1984e:	bd38      	pop	{r3, r4, r5, pc}
   19850:	2005e3f8 	.word	0x2005e3f8

00019854 <__aeabi_drsub>:
   19854:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   19858:	e002      	b.n	19860 <__adddf3>
   1985a:	bf00      	nop

0001985c <__aeabi_dsub>:
   1985c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00019860 <__adddf3>:
   19860:	b530      	push	{r4, r5, lr}
   19862:	ea4f 0441 	mov.w	r4, r1, lsl #1
   19866:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1986a:	ea94 0f05 	teq	r4, r5
   1986e:	bf08      	it	eq
   19870:	ea90 0f02 	teqeq	r0, r2
   19874:	bf1f      	itttt	ne
   19876:	ea54 0c00 	orrsne.w	ip, r4, r0
   1987a:	ea55 0c02 	orrsne.w	ip, r5, r2
   1987e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   19882:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   19886:	f000 80e2 	beq.w	19a4e <__adddf3+0x1ee>
   1988a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1988e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   19892:	bfb8      	it	lt
   19894:	426d      	neglt	r5, r5
   19896:	dd0c      	ble.n	198b2 <__adddf3+0x52>
   19898:	442c      	add	r4, r5
   1989a:	ea80 0202 	eor.w	r2, r0, r2
   1989e:	ea81 0303 	eor.w	r3, r1, r3
   198a2:	ea82 0000 	eor.w	r0, r2, r0
   198a6:	ea83 0101 	eor.w	r1, r3, r1
   198aa:	ea80 0202 	eor.w	r2, r0, r2
   198ae:	ea81 0303 	eor.w	r3, r1, r3
   198b2:	2d36      	cmp	r5, #54	; 0x36
   198b4:	bf88      	it	hi
   198b6:	bd30      	pophi	{r4, r5, pc}
   198b8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   198bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   198c0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   198c4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   198c8:	d002      	beq.n	198d0 <__adddf3+0x70>
   198ca:	4240      	negs	r0, r0
   198cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   198d0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   198d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   198d8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   198dc:	d002      	beq.n	198e4 <__adddf3+0x84>
   198de:	4252      	negs	r2, r2
   198e0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   198e4:	ea94 0f05 	teq	r4, r5
   198e8:	f000 80a7 	beq.w	19a3a <__adddf3+0x1da>
   198ec:	f1a4 0401 	sub.w	r4, r4, #1
   198f0:	f1d5 0e20 	rsbs	lr, r5, #32
   198f4:	db0d      	blt.n	19912 <__adddf3+0xb2>
   198f6:	fa02 fc0e 	lsl.w	ip, r2, lr
   198fa:	fa22 f205 	lsr.w	r2, r2, r5
   198fe:	1880      	adds	r0, r0, r2
   19900:	f141 0100 	adc.w	r1, r1, #0
   19904:	fa03 f20e 	lsl.w	r2, r3, lr
   19908:	1880      	adds	r0, r0, r2
   1990a:	fa43 f305 	asr.w	r3, r3, r5
   1990e:	4159      	adcs	r1, r3
   19910:	e00e      	b.n	19930 <__adddf3+0xd0>
   19912:	f1a5 0520 	sub.w	r5, r5, #32
   19916:	f10e 0e20 	add.w	lr, lr, #32
   1991a:	2a01      	cmp	r2, #1
   1991c:	fa03 fc0e 	lsl.w	ip, r3, lr
   19920:	bf28      	it	cs
   19922:	f04c 0c02 	orrcs.w	ip, ip, #2
   19926:	fa43 f305 	asr.w	r3, r3, r5
   1992a:	18c0      	adds	r0, r0, r3
   1992c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   19930:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   19934:	d507      	bpl.n	19946 <__adddf3+0xe6>
   19936:	f04f 0e00 	mov.w	lr, #0
   1993a:	f1dc 0c00 	rsbs	ip, ip, #0
   1993e:	eb7e 0000 	sbcs.w	r0, lr, r0
   19942:	eb6e 0101 	sbc.w	r1, lr, r1
   19946:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1994a:	d31b      	bcc.n	19984 <__adddf3+0x124>
   1994c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   19950:	d30c      	bcc.n	1996c <__adddf3+0x10c>
   19952:	0849      	lsrs	r1, r1, #1
   19954:	ea5f 0030 	movs.w	r0, r0, rrx
   19958:	ea4f 0c3c 	mov.w	ip, ip, rrx
   1995c:	f104 0401 	add.w	r4, r4, #1
   19960:	ea4f 5244 	mov.w	r2, r4, lsl #21
   19964:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   19968:	f080 809a 	bcs.w	19aa0 <__adddf3+0x240>
   1996c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   19970:	bf08      	it	eq
   19972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   19976:	f150 0000 	adcs.w	r0, r0, #0
   1997a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1997e:	ea41 0105 	orr.w	r1, r1, r5
   19982:	bd30      	pop	{r4, r5, pc}
   19984:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   19988:	4140      	adcs	r0, r0
   1998a:	eb41 0101 	adc.w	r1, r1, r1
   1998e:	3c01      	subs	r4, #1
   19990:	bf28      	it	cs
   19992:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   19996:	d2e9      	bcs.n	1996c <__adddf3+0x10c>
   19998:	f091 0f00 	teq	r1, #0
   1999c:	bf04      	itt	eq
   1999e:	4601      	moveq	r1, r0
   199a0:	2000      	moveq	r0, #0
   199a2:	fab1 f381 	clz	r3, r1
   199a6:	bf08      	it	eq
   199a8:	3320      	addeq	r3, #32
   199aa:	f1a3 030b 	sub.w	r3, r3, #11
   199ae:	f1b3 0220 	subs.w	r2, r3, #32
   199b2:	da0c      	bge.n	199ce <__adddf3+0x16e>
   199b4:	320c      	adds	r2, #12
   199b6:	dd08      	ble.n	199ca <__adddf3+0x16a>
   199b8:	f102 0c14 	add.w	ip, r2, #20
   199bc:	f1c2 020c 	rsb	r2, r2, #12
   199c0:	fa01 f00c 	lsl.w	r0, r1, ip
   199c4:	fa21 f102 	lsr.w	r1, r1, r2
   199c8:	e00c      	b.n	199e4 <__adddf3+0x184>
   199ca:	f102 0214 	add.w	r2, r2, #20
   199ce:	bfd8      	it	le
   199d0:	f1c2 0c20 	rsble	ip, r2, #32
   199d4:	fa01 f102 	lsl.w	r1, r1, r2
   199d8:	fa20 fc0c 	lsr.w	ip, r0, ip
   199dc:	bfdc      	itt	le
   199de:	ea41 010c 	orrle.w	r1, r1, ip
   199e2:	4090      	lslle	r0, r2
   199e4:	1ae4      	subs	r4, r4, r3
   199e6:	bfa2      	ittt	ge
   199e8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   199ec:	4329      	orrge	r1, r5
   199ee:	bd30      	popge	{r4, r5, pc}
   199f0:	ea6f 0404 	mvn.w	r4, r4
   199f4:	3c1f      	subs	r4, #31
   199f6:	da1c      	bge.n	19a32 <__adddf3+0x1d2>
   199f8:	340c      	adds	r4, #12
   199fa:	dc0e      	bgt.n	19a1a <__adddf3+0x1ba>
   199fc:	f104 0414 	add.w	r4, r4, #20
   19a00:	f1c4 0220 	rsb	r2, r4, #32
   19a04:	fa20 f004 	lsr.w	r0, r0, r4
   19a08:	fa01 f302 	lsl.w	r3, r1, r2
   19a0c:	ea40 0003 	orr.w	r0, r0, r3
   19a10:	fa21 f304 	lsr.w	r3, r1, r4
   19a14:	ea45 0103 	orr.w	r1, r5, r3
   19a18:	bd30      	pop	{r4, r5, pc}
   19a1a:	f1c4 040c 	rsb	r4, r4, #12
   19a1e:	f1c4 0220 	rsb	r2, r4, #32
   19a22:	fa20 f002 	lsr.w	r0, r0, r2
   19a26:	fa01 f304 	lsl.w	r3, r1, r4
   19a2a:	ea40 0003 	orr.w	r0, r0, r3
   19a2e:	4629      	mov	r1, r5
   19a30:	bd30      	pop	{r4, r5, pc}
   19a32:	fa21 f004 	lsr.w	r0, r1, r4
   19a36:	4629      	mov	r1, r5
   19a38:	bd30      	pop	{r4, r5, pc}
   19a3a:	f094 0f00 	teq	r4, #0
   19a3e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   19a42:	bf06      	itte	eq
   19a44:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   19a48:	3401      	addeq	r4, #1
   19a4a:	3d01      	subne	r5, #1
   19a4c:	e74e      	b.n	198ec <__adddf3+0x8c>
   19a4e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   19a52:	bf18      	it	ne
   19a54:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   19a58:	d029      	beq.n	19aae <__adddf3+0x24e>
   19a5a:	ea94 0f05 	teq	r4, r5
   19a5e:	bf08      	it	eq
   19a60:	ea90 0f02 	teqeq	r0, r2
   19a64:	d005      	beq.n	19a72 <__adddf3+0x212>
   19a66:	ea54 0c00 	orrs.w	ip, r4, r0
   19a6a:	bf04      	itt	eq
   19a6c:	4619      	moveq	r1, r3
   19a6e:	4610      	moveq	r0, r2
   19a70:	bd30      	pop	{r4, r5, pc}
   19a72:	ea91 0f03 	teq	r1, r3
   19a76:	bf1e      	ittt	ne
   19a78:	2100      	movne	r1, #0
   19a7a:	2000      	movne	r0, #0
   19a7c:	bd30      	popne	{r4, r5, pc}
   19a7e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   19a82:	d105      	bne.n	19a90 <__adddf3+0x230>
   19a84:	0040      	lsls	r0, r0, #1
   19a86:	4149      	adcs	r1, r1
   19a88:	bf28      	it	cs
   19a8a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   19a8e:	bd30      	pop	{r4, r5, pc}
   19a90:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   19a94:	bf3c      	itt	cc
   19a96:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   19a9a:	bd30      	popcc	{r4, r5, pc}
   19a9c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   19aa0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   19aa4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   19aa8:	f04f 0000 	mov.w	r0, #0
   19aac:	bd30      	pop	{r4, r5, pc}
   19aae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   19ab2:	bf1a      	itte	ne
   19ab4:	4619      	movne	r1, r3
   19ab6:	4610      	movne	r0, r2
   19ab8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   19abc:	bf1c      	itt	ne
   19abe:	460b      	movne	r3, r1
   19ac0:	4602      	movne	r2, r0
   19ac2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   19ac6:	bf06      	itte	eq
   19ac8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   19acc:	ea91 0f03 	teqeq	r1, r3
   19ad0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   19ad4:	bd30      	pop	{r4, r5, pc}
   19ad6:	bf00      	nop

00019ad8 <__aeabi_ui2d>:
   19ad8:	f090 0f00 	teq	r0, #0
   19adc:	bf04      	itt	eq
   19ade:	2100      	moveq	r1, #0
   19ae0:	4770      	bxeq	lr
   19ae2:	b530      	push	{r4, r5, lr}
   19ae4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   19ae8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   19aec:	f04f 0500 	mov.w	r5, #0
   19af0:	f04f 0100 	mov.w	r1, #0
   19af4:	e750      	b.n	19998 <__adddf3+0x138>
   19af6:	bf00      	nop

00019af8 <__aeabi_i2d>:
   19af8:	f090 0f00 	teq	r0, #0
   19afc:	bf04      	itt	eq
   19afe:	2100      	moveq	r1, #0
   19b00:	4770      	bxeq	lr
   19b02:	b530      	push	{r4, r5, lr}
   19b04:	f44f 6480 	mov.w	r4, #1024	; 0x400
   19b08:	f104 0432 	add.w	r4, r4, #50	; 0x32
   19b0c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   19b10:	bf48      	it	mi
   19b12:	4240      	negmi	r0, r0
   19b14:	f04f 0100 	mov.w	r1, #0
   19b18:	e73e      	b.n	19998 <__adddf3+0x138>
   19b1a:	bf00      	nop

00019b1c <__aeabi_f2d>:
   19b1c:	0042      	lsls	r2, r0, #1
   19b1e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   19b22:	ea4f 0131 	mov.w	r1, r1, rrx
   19b26:	ea4f 7002 	mov.w	r0, r2, lsl #28
   19b2a:	bf1f      	itttt	ne
   19b2c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   19b30:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   19b34:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   19b38:	4770      	bxne	lr
   19b3a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   19b3e:	bf08      	it	eq
   19b40:	4770      	bxeq	lr
   19b42:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   19b46:	bf04      	itt	eq
   19b48:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   19b4c:	4770      	bxeq	lr
   19b4e:	b530      	push	{r4, r5, lr}
   19b50:	f44f 7460 	mov.w	r4, #896	; 0x380
   19b54:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   19b58:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   19b5c:	e71c      	b.n	19998 <__adddf3+0x138>
   19b5e:	bf00      	nop

00019b60 <__aeabi_ul2d>:
   19b60:	ea50 0201 	orrs.w	r2, r0, r1
   19b64:	bf08      	it	eq
   19b66:	4770      	bxeq	lr
   19b68:	b530      	push	{r4, r5, lr}
   19b6a:	f04f 0500 	mov.w	r5, #0
   19b6e:	e00a      	b.n	19b86 <__aeabi_l2d+0x16>

00019b70 <__aeabi_l2d>:
   19b70:	ea50 0201 	orrs.w	r2, r0, r1
   19b74:	bf08      	it	eq
   19b76:	4770      	bxeq	lr
   19b78:	b530      	push	{r4, r5, lr}
   19b7a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   19b7e:	d502      	bpl.n	19b86 <__aeabi_l2d+0x16>
   19b80:	4240      	negs	r0, r0
   19b82:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   19b86:	f44f 6480 	mov.w	r4, #1024	; 0x400
   19b8a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   19b8e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   19b92:	f43f aed8 	beq.w	19946 <__adddf3+0xe6>
   19b96:	f04f 0203 	mov.w	r2, #3
   19b9a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   19b9e:	bf18      	it	ne
   19ba0:	3203      	addne	r2, #3
   19ba2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   19ba6:	bf18      	it	ne
   19ba8:	3203      	addne	r2, #3
   19baa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   19bae:	f1c2 0320 	rsb	r3, r2, #32
   19bb2:	fa00 fc03 	lsl.w	ip, r0, r3
   19bb6:	fa20 f002 	lsr.w	r0, r0, r2
   19bba:	fa01 fe03 	lsl.w	lr, r1, r3
   19bbe:	ea40 000e 	orr.w	r0, r0, lr
   19bc2:	fa21 f102 	lsr.w	r1, r1, r2
   19bc6:	4414      	add	r4, r2
   19bc8:	e6bd      	b.n	19946 <__adddf3+0xe6>
   19bca:	bf00      	nop

00019bcc <__aeabi_d2lz>:
   19bcc:	b508      	push	{r3, lr}
   19bce:	4602      	mov	r2, r0
   19bd0:	460b      	mov	r3, r1
   19bd2:	ec43 2b17 	vmov	d7, r2, r3
   19bd6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   19bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   19bde:	d403      	bmi.n	19be8 <__aeabi_d2lz+0x1c>
   19be0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   19be4:	f000 b80c 	b.w	19c00 <__aeabi_d2ulz>
   19be8:	eeb1 7b47 	vneg.f64	d7, d7
   19bec:	ec51 0b17 	vmov	r0, r1, d7
   19bf0:	f000 f806 	bl	19c00 <__aeabi_d2ulz>
   19bf4:	4240      	negs	r0, r0
   19bf6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   19bfa:	bd08      	pop	{r3, pc}
   19bfc:	0000      	movs	r0, r0
	...

00019c00 <__aeabi_d2ulz>:
   19c00:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 19c30 <__aeabi_d2ulz+0x30>
   19c04:	ec41 0b17 	vmov	d7, r0, r1
   19c08:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 19c38 <__aeabi_d2ulz+0x38>
   19c0c:	ee27 6b06 	vmul.f64	d6, d7, d6
   19c10:	eebc 6bc6 	vcvt.u32.f64	s12, d6
   19c14:	eeb8 4b46 	vcvt.f64.u32	d4, s12
   19c18:	eea4 7b45 	vfms.f64	d7, d4, d5
   19c1c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
   19c20:	ee16 1a10 	vmov	r1, s12
   19c24:	ee17 0a90 	vmov	r0, s15
   19c28:	4770      	bx	lr
   19c2a:	bf00      	nop
   19c2c:	f3af 8000 	nop.w
   19c30:	00000000 	.word	0x00000000
   19c34:	3df00000 	.word	0x3df00000
   19c38:	00000000 	.word	0x00000000
   19c3c:	41f00000 	.word	0x41f00000

00019c40 <___init_veneer>:
   19c40:	f85f f000 	ldr.w	pc, [pc]	; 19c44 <___init_veneer+0x4>
   19c44:	60005541 	.word	0x60005541

00019c48 <___ZNK16CrashReportClass7printToER5Print_veneer>:
   19c48:	f85f f000 	ldr.w	pc, [pc]	; 19c4c <___ZNK16CrashReportClass7printToER5Print_veneer+0x4>
   19c4c:	60004621 	.word	0x60004621

00019c50 <___Z13ServiceSerialv_veneer>:
   19c50:	f85f f000 	ldr.w	pc, [pc]	; 19c54 <___Z13ServiceSerialv_veneer+0x4>
   19c54:	60004155 	.word	0x60004155

00019c58 <___ZN16CrashReportClasscvbEv_veneer>:
   19c58:	f85f f000 	ldr.w	pc, [pc]	; 19c5c <___ZN16CrashReportClasscvbEv_veneer+0x4>
   19c5c:	60004d25 	.word	0x60004d25

00019c60 <___Z14ParseARTHeaderv_veneer>:
   19c60:	f85f f000 	ldr.w	pc, [pc]	; 19c64 <___Z14ParseARTHeaderv_veneer+0x4>
   19c64:	60001951 	.word	0x60001951

00019c68 <___reboot_Teensyduino__veneer>:
   19c68:	f85f f000 	ldr.w	pc, [pc]	; 19c6c <___reboot_Teensyduino__veneer+0x4>
   19c6c:	60005499 	.word	0x60005499

00019c70 <___Z14ParseSIDHeaderPKc_veneer>:
   19c70:	f85f f000 	ldr.w	pc, [pc]	; 19c74 <___Z14ParseSIDHeaderPKc_veneer+0x4>
   19c74:	60001a4d 	.word	0x60001a4d

00019c78 <___Z14ParseKLAHeaderv_veneer>:
   19c78:	f85f f000 	ldr.w	pc, [pc]	; 19c7c <___Z14ParseKLAHeaderv_veneer+0x4>
   19c7c:	600019bd 	.word	0x600019bd

00019c80 <___Z6runAppm_veneer>:
   19c80:	f85f f000 	ldr.w	pc, [pc]	; 19c84 <___Z6runAppm_veneer+0x4>
   19c84:	600033e5 	.word	0x600033e5
	...

Disassembly of section .fini:

00019c90 <_fini>:
   19c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19c92:	bf00      	nop
